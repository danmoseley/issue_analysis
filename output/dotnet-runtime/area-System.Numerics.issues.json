[
    {
        "url":  "https://github.com/dotnet/runtime/issues/21588",
        "createdAt":  "2017-05-09T05:26:10Z",
        "number":  21588,
        "author":  "Thaina",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOChxGmA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vslee",
                                            "createdAt":  "2022-06-14T15:28:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-15T21:35:19Z",
        "body":  "This issue was ported from https://github.com/dotnet/csharplang/issues/553\r\n\r\nLately in csharplang whenever we talk about struct feature. Rational struct often came up as an example\r\n\r\nAnd so I think that Rational actually useful. Normally approximate number with float. `3 * (1 / 3f)` is not became what we would expect. Floating point error need to be handled everywhere since we program in C\r\n\r\nMost of the time we care about precision than the range of number. If we could naturally use `Rational` in code it could make a lot of sense in many calculation logic\r\n\r\nAnd instead of always making Rational on our own then overriding all operators just about conversion between each number type. I think it could be useful enough to have it built in\r\n\r\n```C#\r\nstruct Rational64 { public int Number,Divider; }\r\nstruct Rational128 { public long Number,Divider; }\r\n\r\n// Both will have long list of overload operator and implicit operator\r\n\r\nRational64 f = 3; // implicit operator for int. Became Rational64(3,1)\r\n\r\nRational64 f3 = 1 / f; // operator / will flip Number and Divider\r\nvar three = 9 * f3; // 9 * 1 / 3 became Rational64(9,3). Should it always find LCM or just did it only when overflow?\r\n```\r\n\r\n### ps\r\n\r\nWe actually could handle internal value like this\r\n\r\n```C#\r\nstruct Rational64\r\n{\r\n    uint divider;\r\n    public int Number;\r\n    public uint Divider { get =\u003e divider + 1; set =\u003e divider = value - 1 }\r\n\r\n    public double Value { get =\u003e Number / (double)Divider; }\r\n}\r\n```\r\n\r\nWith this we will always handle negative only in number. And zeromemory will be `0 / 1`\r\n\r\n### ps2\r\n\r\nShould we also add `Irrational` and `Algebraic` object too?\r\n\r\n```C#\r\nstruct Irrational64 // Actually just 1 order of power for polynomial calculation\r\n{\r\n    public Rational64 Value;\r\n    public Rational64 Power;\r\n}\r\n\r\nstruct Irrational128\r\n{\r\n    public Rational128 Value;\r\n    public Rational128 Power;\r\n}\r\n\r\nclass Algebraic128 // The real Irrational\r\n{\r\n    public Rational128 Value = 0 / 1R;\r\n    public Algebraic Power = null; // Unlike Irrational, can contain chain of power\r\n\r\n    public static implicit operator double(Algebraic128 value) =\u003e Math.Pow((double)Value,Power ?? 1);\r\n}\r\n```\r\n\r\nI think most of calculation we use in graphics and physics simulation could be use `Irrational128` in general\r\n\r\n### ps3\r\n\r\nFrom csharplang repo I was propose this feature to have literal syntax. And there are suggestion that it should at least make the object itself pass corefx first",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORrBgAw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDE0MDkzOQ==",
                                           "createdAt":  "2017-05-09T11:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "My comments:\r\n\r\n1. I find it confusing that `Rational64` uses 32-bit integers. Are both `Rational` types actually needed? Maybe having only `Rational128` (renamed to just `Rational`) would be enough?\r\n2. Would a type that can actually represent any rational number (i.e. one using `BigInteger`s for numerator and denominator) be useful?\r\n3. I think that `Irrational` is not a great name, since it can\u0027t represent irrational numbers like π.\r\n4. Are the `Irrational` and `Algebraic` types actually useful? For example, as far as I can tell, they can\u0027t even represent values like √2 + √3.",
                                           "updatedAt":  "2017-05-09T11:55:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDE0NTI5OA==",
                                           "createdAt":  "2017-05-09T12:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@svick Thanks\r\n\r\n1 - I just thinking that for fraction value. We use `int` more than `long` in general. 1/3 for example. `epsilon` being `1 / int.MaxValue` might be enough. But well, I agree it confusing so maybe `LongRational` ?\r\n\r\n2 - There are `BigRational` proposed dotnet/runtime#14853. But in most case I want to deal with number by valuetype. At least `Rational` with int64\r\n\r\n3 - I have research it and think that it\u0027s true. That struct should be named `Algebraic` and that algebraic struct should be named with other word (Have seen it called closed form function)\r\nBut for PI I normally call it `Transcendental` separated from normal irrational\r\n\r\n4 - You are right. That expression would need more work to do. I would thinking more about it\r\nBut still with `Irrational` struct. We could make any expression easily with array of those numbers and extensions method",
                                           "updatedAt":  "2017-05-09T12:43:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDE3NDM5OQ==",
                                           "createdAt":  "2017-05-09T14:03:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e We could make any expression easily with array of those numbers and extensions method\r\n\r\nHow? Are you saying the array would represent sum of all its elements? Then how would you express ![2^(1/2) * 3^(1/3)](http://latex2png.com/output//latex_09326fa89041f025da89305facd0e6a6.png)?\r\n\r\nAnd I still don\u0027t see what is the actual use case for such numbers. If there is one, I would expect it to be very specialized, so it doesn\u0027t belong in corefx.",
                                           "updatedAt":  "2017-05-09T14:03:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDE3ODU5NQ==",
                                           "createdAt":  "2017-05-09T14:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@svick ![image](https://cloud.githubusercontent.com/assets/1042507/25896372/1107b6b4-35ae-11e7-9f46-0993e047adda.png)  is easy one\r\n\r\nIt could became ![image](https://cloud.githubusercontent.com/assets/1042507/25896439/559132ba-35ae-11e7-9b46-3de5622fd0fd.png)\r\n\r\nWhich is ![image](https://cloud.githubusercontent.com/assets/1042507/25896455/650dbee8-35ae-11e7-9320-c6cec8f800c5.png)\r\n",
                                           "updatedAt":  "2017-05-10T11:28:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjI4NTQzMw==",
                                           "createdAt":  "2017-05-18T02:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "I have seen Rational types used in libraries before, but they are usually very niche ([for example](https://github.com/sharpdx/SharpDX/blob/master/Source/SharpDX.DXGI/Rational.cs)), and in my opinion aren\u0027t very interesting for us to include in the BCL. There are all sorts of different specialized mathematical types we could potentially include, but we only want to include things that are generally or universally useful. I feel that this would be better served by a third-party library for the time being.",
                                           "updatedAt":  "2017-05-18T02:45:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjI4NjY0MQ==",
                                           "createdAt":  "2017-05-18T02:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@mellinoe I think it\u0027s niche because we actually not included in BCL\r\n\r\nAll of financial and statistics application or even graphics and physics simulation could replace most floating point in the code into rational if it was standard library\r\n\r\nBut because it not standard no one would likely risk downloading additional library for their crucial job so it still neglect even it make calculation more accurate. They need to bear with float because float is standard\r\n\r\nThis is somehow dilemma. I think it need to start somewhere to make it being general\r\n\r\nBut I think `Rational` number is universally useful",
                                           "updatedAt":  "2017-05-18T02:54:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjI5MjY4NA==",
                                           "createdAt":  "2017-05-18T03:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "\u003e @mellinoe I think it\u0027s niche because we actually not included in BCL\r\n\r\n\u003e All of financial and statistics application or even graphics and physics simulation could replace most floating point in the code into rational if it was standard library\r\n\r\nCertainly, that is always a possibility. However, this isn\u0027t just a niche type in C#/.NET. I\u0027m not really aware of any graphics or physics libraries which represent data in this way, even in other languages. IMO, it\u0027s also more than just being inconvenient or poorly-supported in libraries. GPU\u0027s fundamentally don\u0027t understand this data format. Real-time physics simulation libraries still predominantly use 32-bit floats for speed, even though 64-bit floats would be essentially a drop-in replacement. A rational structure wouldn\u0027t be.\r\n\r\nI\u0027m not saying that this wouldn\u0027t be a useful type, I\u0027m just not sure that it is universal enough for inclusion in the BCL, at least not yet. I agree with @tannergooding\u0027s suggestion in the other issue that this would be great to build as a standalone NuGet package before consideration for the BCL.",
                                           "updatedAt":  "2017-05-18T03:45:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjI5NDQ2MA==",
                                           "createdAt":  "2017-05-18T04:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@mellinoe As I said it hardly compared because both float32 and float64 was standardize into bcl. You don\u0027t need to rely on nuget\r\n\r\nActually it was ingrained into literal `f` and `d`. It so fast to just code it without even `using`. Not to mention there are `Math` and other library about it that support `float` and `double` from the core\r\n\r\nIt like C# that even it better than Java, it still struggle to raise the popularity than Java. Because Java was born before\r\n\r\nI bet if `float` and `double` was excluded into nuget package it would be the same popularity as nowaday\r\n\r\nWe might gone too far now. floating point was being standard for so long even before GPU itself. And in the old day computer was limit by many cap, a floating point that can represent widely range of number would be more useful to support it than rational number\r\n\r\nBut nowaday we have ram in GB unit. I think we should start solving bug `3 * (1 / 3) != 1` in the system",
                                           "updatedAt":  "2017-05-18T04:03:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjQ4NjUwMg==",
                                           "createdAt":  "2017-05-18T17:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@Thaina. I don\u0027t think you\u0027ll ever see float drop away as the primary representation for values. As @mellinoe points out, there are no major **real-time** libraries that use anything other than float, primarily because they care more about speed then they do precision. When you are manipulating 2073600 pixels (that\u0027s 1920x1080) 60 times each second (and it could be more with 4k resolution and higher refresh rates, which are becoming more common) to provide a smooth but realistic enough experience, you want speed and that is something that raw integer math can\u0027t handle (even when representing a rational number using a numerator/denominator pair).\r\n\r\nThe primary reason that integer math doesn\u0027t work is because there isn\u0027t hardware to support it. Graphics cards are essentially tens or hundreds (sometimes thousands) of compute units designed specifically to crunch floating point numbers. Even on the CPU, floating point throughput can be higher than integer throughput, because the pipeline has been specifically designed to handle it and to handle it seperately from normal integer operations. For example, the Intel Haswell, Broadwell, and Skylake processors can retire a maximum of 32 single precision operations per cycle (when doing two 8-wide FMA instructions).\r\n\r\n\r\nNow, you appear to be wanting to solve some of the common and well known problems that arise from floating-point arithmetic and many of these are already solved (and standardized). The primary issue with binary floating-point arithmetic is that some numbers are not exact.\r\n\r\nFor example, the following program:\r\n```C#\r\nvar value = 0.0;\r\n\r\nfor (int i = 0; i \u003c= 10; i++)\r\n{\r\n    Console.WriteLine($\"{value:G17}\");\r\n    value += 0.1;\r\n}\r\n```\r\n\r\nProduces:\r\n```\r\n0\r\n0.10000000000000001\r\n0.20000000000000001\r\n0.30000000000000004\r\n0.40000000000000002\r\n0.5\r\n0.59999999999999998\r\n0.69999999999999996\r\n0.79999999999999993\r\n0.89999999999999991\r\n0.99999999999999989\r\n```\r\n\r\nThis issue, however, only exits in \"binary\" based floating-point arithmetic. IEEE also defines \"decimal\" based arithmetic which does not suffer from most of these problems (I don\u0027t think our `System.Decimal` type is IEEE compliant, but it follows the same principle).\r\n\r\nFor example, the following program:\r\n```C#\r\nvar value = 0.0m;\r\n\r\nfor (int i = 0; i \u003c= 10; i++)\r\n{\r\n    Console.WriteLine($\"{value}\");\r\n    value += 0.1m;\r\n}\r\n```\r\n\r\nProduces:\r\n```\r\n0\r\n0.1\r\n0.2\r\n0.3\r\n0.4\r\n0.5\r\n0.6\r\n0.7\r\n0.8\r\n0.9\r\n1\r\n```\r\n\r\nApplications which require more precise results (such as financial applications) will use the decimal based arithmetic over float/double (which are binary based arithmetic). The program takes longer to run, but will give the more precise results that they need.\r\n\r\nDecimal based arithmetic does still have some shortcomings. For example, 1/3 is represented as `0.3333333333333333333333333333` and multiplying 1/3 * 3 ends up with `0.9999999999999999999999999999` rather than 1.0. However, the number of digits that `Decimal` supports is enough that most applications can account for these small errors by rounding. As an example, a financial application doesn\u0027t need 29 trailing digits, they really only need about 4, and rounding 1/3 * 3 will give 1.0 and allow their arithmetic to remain correct.\r\n\r\nThen there are applications which require even more precise results (such as scientific applications that are performing data modelling or making extremely precise measurements). For the cases where even decimal doesn\u0027t meet their needs, they will end up rolling their own (or using some existing library) that does take care of their needs so that they can precisely compute/model all numbers (rational numbers, irrational numbers, complex numbers, trascedental numbers, etc...).\r\n",
                                           "updatedAt":  "2017-05-18T17:40:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTEzMDYwNQ==",
                                           "createdAt":  "2018-03-21T23:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3ukww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2018-03-22T01:20:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erjicles",
                                                                               "createdAt":  "2019-03-30T02:20:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "carlyman77",
                                                                               "createdAt":  "2019-12-17T13:34:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlyman77",
                                                                               "createdAt":  "2019-12-20T04:01:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "HalosGhost",
                                           "body":  "I would like to add my voice to support this proposal. Rationals are actually incredibly useful for a wide variety of applications (for example, doing arithmetic with [currency](https://ren.zone/articles/safe-money) in a manner that is guaranteed to be accurate). In many cases where people use IEEE754 floats, rationals can be dramatically better.\r\n\r\nI would like to suggest a few things though.\r\n\r\nFirst of all, just a stylistic thing, can we please use the terms ``Numerator`` and ``Denominator`` instead of ``Number`` and ``Divider`` (which are not standard terms)?\r\n\r\nSecond, a normalize method will be necessary to simplify a rational to its normal form. This may signal the need for two Rational types at least (one which enforces normalization after each operation) and one which does not. I\u0027m not sure which I would prefer, though I suspect we might want to have the routine always called in ``operator=``.\r\n\r\nThird, in an attempt to avoid adding a whole class of exceptions and silly behavior, the fields should really be ``Numerator`` and ``DenominatorLessOne`` (i.e., treat ``0`` in the denominator as ``1``). This actually allows for a wider value range, and eliminates the possibility of divide-by-zero errors. Keeping that property private and exposing a more user-friendly ``Denominator`` property is not a problem so long as the constructor does some sane validation.\r\n\r\nFourth, if it is preferred, a rational type can reasonably be defined as an encoding of a single integer as having two parts (and a separate field to track where the separator is). A ``byte`` is more than large enough to store where the separation is for a 128-bit total precision rational. This allows for a flexible precision in a Rational type along with reducing the total size required for the type. This does, however complicate the implementation quite a bit which may be something we\u0027d all like to avoid.\r\n\r\nI can provide an example ``Rational`` class if people would find that useful.",
                                           "updatedAt":  "2018-04-06T02:28:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTEzNjA4Mw==",
                                           "createdAt":  "2018-03-22T00:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshfree",
                                           "body":  "Just a quick note that there\u0027s a rudimentary Rational class from the old bcl codeplex site @ https://github.com/MicrosoftArchive/bcl/blob/master/Libraries/BigRational/BigRationalLibrary/BigRational.cs \r\n\r\n@HalosGhost if you\u0027re passionate about working on a prototype or example Rational type for .NET Core, a repo for the experiment to happen in could be https://github.com/dotnet/corefxlab \r\n\r\nHowever I do think Rational isn\u0027t really suitable for many basic scenarios (that are better supported by existing decimal or double types); the folks that do need a Rational type are likely working on advanced mathematical modeling / simulations / solvers - and have domain specific requirements that would need to be met in order for the type to be usable by them.\r\n\r\n/cc @eerhardt ",
                                           "updatedAt":  "2018-03-22T00:07:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjU0NTE0MQ==",
                                           "createdAt":  "2019-12-17T13:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3etqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erjicles",
                                                                               "createdAt":  "2019-12-17T17:37:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "carlyman77",
                                           "body":  "Excuse me for being a year+ late, but was anything decided on a big rational? Nearly all these threads I read seem to die off and not lead anywhere. Thanks in advance! @HalosGhost @joshfree",
                                           "updatedAt":  "2019-12-17T13:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Nzc3NjUxOA==",
                                           "createdAt":  "2019-12-20T03:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA5Dv9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlyman77",
                                                                               "createdAt":  "2019-12-20T03:57:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2020-01-15T03:45:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "HalosGhost",
                                           "body":  "@carlyman77, I have a functional prototype lying around, but I got stuck on deciding how to handle canonicalization. Namely, whether or not a Rational should automatically canonicalize anytime you do anything with it, or if it should instead only be canonicalized during comparisons. there\u0027s not necessarily a down-side to the latter, and it saves a fair bit of computational power.\r\n\r\nThoughts?",
                                           "updatedAt":  "2019-12-20T03:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2Nzc3ODIxOA==",
                                           "createdAt":  "2019-12-20T04:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlyman77",
                                           "body":  "That\u0027s a good question. I think during comparison sounds reasonable. (Thanks for responding to me btw, it sounds like you are way in front of where I am - considering writing my own rational.)\r\n\r\nThere are use cases where accuracy is far more important than performance (my physics project for example), although as @joshfree points out these use cases might be limited (read: not commercial).",
                                           "updatedAt":  "2019-12-20T04:00:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjk4MTQ3NQ==",
                                           "createdAt":  "2020-02-29T18:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erjicles",
                                           "body":  "\u003e @carlyman77, I have a functional prototype lying around, but I got stuck on deciding how to handle canonicalization. Namely, whether or not a Rational should automatically canonicalize anytime you do anything with it, or if it should instead only be canonicalized during comparisons. there\u0027s not necessarily a down-side to the latter, and it saves a fair bit of computational power.\r\n\u003e \r\n\u003e Thoughts?\r\n\r\nJust my 2 cents. Every project where I\u0027ve needed this has required the canonical form, so I\u0027d lean towards always canonicalizing (and maybe for fun, you could also keep the original raw BigInteger numerator and denominator values as separate properties).\r\n\r\nAnother option is to provide a global static flag that determines the canonicalization behavior. Default it to always canonicalize, but the user can set it to false so that it only canonicalizes when required or explicitly requested.",
                                           "updatedAt":  "2020-02-29T18:52:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjk4MTc5OA==",
                                           "createdAt":  "2020-02-29T18:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA84Y1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2020-02-29T19:29:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "erjicles",
                                           "body":  "PS - If you do implement this, please implement it as BigRational (based on BigInteger) rather than the other integer types. Rationals that don\u0027t have arbitrary precision quickly become useless, as most applications that would use them require perfect precision, and most calculations involving them create large numerators and denominators that exceed the precision of the non-BigInteger types.",
                                           "updatedAt":  "2020-02-29T18:56:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjk4NTk5NQ==",
                                           "createdAt":  "2020-02-29T19:32:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "Even though I request this feature myself but for such times I have a new idea already but it still not solid\r\n\r\nI now think we should not have a struct for rational. Instead we should have class for Number and it\u0027s exponent. Represent rational with negative exponent, Then we could represent the number by the array of product\r\n\r\n`2/3` is `[2^1,3^-1]` for example and so `sqrt(2)` is `[2^[2^-1]]`\r\n\r\nNot sure is better or worse",
                                           "updatedAt":  "2020-02-29T19:32:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjk5MTMyNw==",
                                           "createdAt":  "2020-02-29T20:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erjicles",
                                           "body":  "\u003e Even though I request this feature myself but for such times I have a new idea already but it still not solid\r\n\u003e \r\n\u003e I now think we should not have a struct for rational. Instead we should have class for Number and it\u0027s exponent. Represent rational with negative exponent, Then we could represent the number by the array of product\r\n\u003e \r\n\u003e `2/3` is `[2^1,3^-1]` for example and so `sqrt(2)` is `[2^[2^-1]]`\r\n\u003e \r\n\u003e Not sure is better or worse\r\n\r\nI can see use cases for this, but I also see many use cases for a standardized arbitrary-precision rational structure. I don\u0027t necessarily see it as either/or. For me personally, a rational object would be more useful, but I could see this being useful in some cases too.",
                                           "updatedAt":  "2020-02-29T20:29:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzM5NDQ3MA==",
                                           "createdAt":  "2020-03-02T13:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e If you do implement this, please implement it as BigRational (based on BigInteger) rather than the other integer types\r\n\r\nIf implemented, a `BigRational` type would have to be based on `BigInteger` (given the name). A separate `Rational` type might be a viable alternative for known small use cases.\r\n\r\n\u003e Another option is to provide a global static flag that determines the canonicalization behavior. Default it to always canonicalize, but the user can set it to false so that it only canonicalizes when required or explicitly requested.\r\n\r\nI don\u0027t like the idea of a global flag as they are tricky and can easily introduce bugs. I\u0027d rather instead say that we follow what IEEE 754 does for its `decimal` types, which is canonical results by default (except for a few operations, such as `abs`, `negate`, and `copySign`, which operate on \"bit strings\") or that we return non-canonical results by default and require the user to explicitly call a `Canonicalize` method when they deem that having one is important.",
                                           "updatedAt":  "2020-03-02T13:12:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzQ2MTE2NA==",
                                           "createdAt":  "2020-03-02T15:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erjicles",
                                           "body":  "\u003e \u003e If you do implement this, please implement it as BigRational (based on BigInteger) rather than the other integer types\r\n\u003e \r\n\u003e If implemented, a `BigRational` type would have to be based on `BigInteger` (given the name). A separate `Rational` type might be a viable alternative for known small use cases.\r\n\r\nIndeed. Since the thread is called \"Standardized Rational object\" and much of the discussion left the nature of the proposed standardized rational object ambiguous, I just wanted to state explicitly that I think an arbitrary-precision `BigRational` type would be the most useful implementation (though I can see utility for other `Rational` types in some scenarios).\r\n\r\n\u003e \u003e Another option is to provide a global static flag that determines the canonicalization behavior. Default it to always canonicalize, but the user can set it to false so that it only canonicalizes when required or explicitly requested.\r\n\u003e \r\n\u003e I don\u0027t like the idea of a global flag as they are tricky and can easily introduce bugs. I\u0027d rather instead say that we follow what IEEE 754 does for its `decimal` types, which is canonical results by default (except for a few operations, such as `abs`, `negate`, and `copySign`, which operate on \"bit strings\") or that we return non-canonical results by default and require the user to explicitly call a `Canonicalize` method when they deem that having one is important.\r\n\r\nTotally fair. I\u0027d lean toward canonical results by default because the canonical form is needed for most uses. At the very least, I would cache the canonical form once computed so that you wouldn\u0027t need to calculate it more than once for any given `BigRational` variable.",
                                           "updatedAt":  "2020-03-02T15:32:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzQ5MzUxMA==",
                                           "createdAt":  "2020-03-02T16:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA9CFQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlyman77",
                                                                               "createdAt":  "2020-03-03T03:40:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2020-03-03T05:10:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The next step here would be for someone to propose the public surface area of the `Rational` or `BigRational` type (both should realistically be the same public surface area, just replacing one with the other). At a base level, this would involve the following:\r\n* Constructors\r\n* Comparison Operators (==, !=, \u003c, \u003e, \u003c=, \u003e=)\r\n* Comparison Interfaces (IEquatable, IComparable)\r\n* Formatting/Parsing Methods (ToString, Parse, TryParse)\r\n* Unary Operators (+, -, ++, --)\r\n* Binary Operators (+, -, *, /, %)\r\n\r\nOther operators (such as ^, \u0026, |, \u003c\u003c, and \u003e\u003e) would likely need to be discussed, but I don\u0027t think there is a reasonable implementation. Implicit/explicit conversions for the integer and floating-point primitives would likely need to be discussed (and decided if those or constructors are better).\r\n\r\nAfter that is done, we can likely have a discussion around class vs struct and the proposed API can then be taken forward to API review. The API review process is detailed here: https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md, with a \"good example\" listed under step 1. Not all parts from the good example area required, but providing some basic rationale and the proposed API section are good minimums as they help centralize the proposal and avoid needing to help scrolling around the tracking issue.",
                                           "updatedAt":  "2020-03-02T16:35:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzcxMzU1Nw==",
                                           "createdAt":  "2020-03-03T01:08:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlyman77",
                                           "body":  "Happy to start looking into the shape that the type would take (assuming my 1 year old cuts me a bit of slack in the coming days).\r\n\r\nFWIW, I prefer the name Rational over BigRational. The initial design I was thinking of working towards was using bit strings until I found a better way to do it.\r\n\r\nEdit: invites incoming for collaborators, please ping me if you\u0027re keen.",
                                           "updatedAt":  "2020-03-03T10:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EdMrC",
                                           "createdAt":  "2022-06-07T10:49:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCgjzeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-06-07T10:49:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hjrb",
                                           "body":  "NOW there is a new  momentum with INumbery\u003cT\u003e. There is even a chance to implement rational / fraction based on a template Integer type. Rational\u003cT\u003e where T: \u003cList of supported interfaces\u003e and also make Rational itself implement INumber\u003cT\u003e (or maybe only partially). Having this a part of the standard library would encourage way more people to use it. The existing NuGet packages are just not enough supported.",
                                           "updatedAt":  "2022-06-07T10:49:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EeUuz",
                                           "createdAt":  "2022-06-07T15:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCgo57Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-06-07T16:55:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-06-07T16:55:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Someone will need to write a full proposal covering the entire proposed API surface for a `struct Rational\u003cTInteger\u003e where TInteger : IBinaryInteger\u003cTInteger\u003e` before I can review it myself and then take it to API review.\r\n\r\nI am not against providing such a type in the `System.Numerics` namespace.\r\n\r\n*Edit:* I\u0027ll try to do the proposal myself, if no one else gets to it first, sometime after we lock down for .NET 7 RC1",
                                           "updatedAt":  "2022-06-07T22:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GsGAD",
                                           "createdAt":  "2022-07-15T21:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnB-5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-07-16T05:33:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "c-ohle",
                                           "body":  "@all, I would like propose a new solution for a rational number type and arbitrary arithmetic in general for NET7 System.Numerics.\r\nDiscussion, criticism, ideas, suggestions would be helpful for further improvements and API design, I would like to collaborate.\r\nMy focus is performant algorithms and code  - not so much on user requirements, interface design and documentation. I could use help. \r\nProject and documentation are available on [GitHub](https://github.com/c-ohle/RationalNumerics).\r\nNuget package [(currently available for NET6)](https://www.nuget.org/packages/BigRational) for NET7-preview is coming soon.\r\nThe latest state of discussion [here](https://github.com/dotnet/runtime/issues/71791).",
                                           "updatedAt":  "2022-07-15T21:35:19Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Standardized Rational object",
        "labels":  [
                       "api-needs-work",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24168",
        "createdAt":  "2017-11-18T17:13:40Z",
        "number":  24168,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCryofw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tzachshabtay",
                                            "createdAt":  "2018-09-27T14:33:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mehmetakbulut",
                                            "createdAt":  "2018-11-27T20:33:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "praeclarum",
                                            "createdAt":  "2018-12-14T00:50:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heitor-lassarote",
                                            "createdAt":  "2019-02-09T13:03:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SirusDoma",
                                            "createdAt":  "2019-02-10T21:43:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krwq",
                                            "createdAt":  "2019-02-20T21:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "utkumaden",
                                            "createdAt":  "2019-03-20T19:36:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HamishBuckmaster",
                                            "createdAt":  "2019-03-21T06:35:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephtr",
                                            "createdAt":  "2019-07-09T15:29:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nrother",
                                            "createdAt":  "2019-08-13T11:47:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QuantumDeveloper",
                                            "createdAt":  "2019-08-21T20:26:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2019-09-18T03:26:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heyjoeway",
                                            "createdAt":  "2019-10-08T15:56:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miyu",
                                            "createdAt":  "2019-12-09T08:17:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lamont-granquist",
                                            "createdAt":  "2020-02-10T23:48:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "naymore",
                                            "createdAt":  "2020-03-05T08:08:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nxrighthere",
                                            "createdAt":  "2020-03-07T11:28:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ryder25",
                                            "createdAt":  "2020-03-15T03:15:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "harry-cpp",
                                            "createdAt":  "2020-04-01T21:12:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "john-h-k",
                                            "createdAt":  "2020-04-23T22:02:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2020-04-23T22:08:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "morphx666",
                                            "createdAt":  "2020-05-27T22:29:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LevYas",
                                            "createdAt":  "2020-07-22T11:38:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dglozano",
                                            "createdAt":  "2020-08-13T13:08:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RahimovIR",
                                            "createdAt":  "2020-08-14T16:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheMuuj",
                                            "createdAt":  "2020-09-08T01:21:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eriove",
                                            "createdAt":  "2020-09-09T07:38:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atlemann",
                                            "createdAt":  "2020-10-07T20:15:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andre-ss6",
                                            "createdAt":  "2020-11-21T21:52:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "andre-ss6",
                                            "createdAt":  "2020-11-21T21:52:13Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "andre-ss6",
                                            "createdAt":  "2020-11-21T21:52:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "merinos",
                                            "createdAt":  "2021-01-08T15:09:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "merinos",
                                            "createdAt":  "2021-01-08T15:09:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2021-02-26T03:36:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mortalvombat",
                                            "createdAt":  "2021-04-12T15:15:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FilipToth",
                                            "createdAt":  "2021-05-13T12:22:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T03:16:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T03:16:32Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T03:16:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aaronfranke",
                                            "createdAt":  "2021-08-10T23:07:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "i3ym",
                                            "createdAt":  "2021-09-17T10:22:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jpmn",
                                            "createdAt":  "2021-11-30T01:25:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hoffmann-stefan",
                                            "createdAt":  "2022-01-04T14:30:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2022-01-17T13:37:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ingframin",
                                            "createdAt":  "2022-03-10T13:48:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epicabsol",
                                            "createdAt":  "2022-03-17T08:22:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KubaSzostak",
                                            "createdAt":  "2022-09-08T10:18:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "damian-666",
                                            "createdAt":  "2022-10-24T02:04:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uvsxx",
                                            "createdAt":  "2022-11-11T18:15:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaMatrix",
                                            "createdAt":  "2022-12-08T10:09:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GKPr0",
                                            "createdAt":  "2022-12-09T21:20:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jp2masa",
                                            "createdAt":  "2023-01-13T04:23:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarcPhi",
                                            "createdAt":  "2023-02-06T22:05:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tvardero",
                                            "createdAt":  "2023-02-20T16:15:32Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "NoahStolk",
                                            "createdAt":  "2023-05-27T12:48:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NoahStolk",
                                            "createdAt":  "2023-05-27T12:48:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2023-05-30T22:39:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stenretni",
                                            "createdAt":  "2023-06-26T05:48:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "9il",
                                            "createdAt":  "2023-07-21T16:39:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Not-A-Normal-Robot",
                                            "createdAt":  "2023-08-06T06:23:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xiety",
                                            "createdAt":  "2023-09-07T09:44:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idea-lei",
                                            "createdAt":  "2023-09-14T18:33:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DerekZiemba",
                                            "createdAt":  "2023-09-19T06:55:30Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "dzmitry-lahoda",
                                            "createdAt":  "2023-09-30T15:22:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ds5678",
                                            "createdAt":  "2023-10-11T17:46:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dotlogix",
                                            "createdAt":  "2023-10-29T16:13:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miguelmaso",
                                            "createdAt":  "2023-11-10T16:41:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "r-wavilo",
                                            "createdAt":  "2023-12-15T22:11:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Methuselah96",
                                            "createdAt":  "2024-01-15T16:59:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shammill",
                                            "createdAt":  "2024-04-06T03:51:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenyErnest",
                                            "createdAt":  "2024-04-24T15:30:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2024-05-06T20:27:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "barikata1984",
                                            "createdAt":  "2024-07-11T20:27:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Ruslan-B",
                                            "createdAt":  "2024-08-14T13:21:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2024-08-22T06:35:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noelex",
                                            "createdAt":  "2024-10-30T09:13:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "martinrhan",
                                            "createdAt":  "2024-11-06T10:05:48Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "martinrhan",
                                            "createdAt":  "2024-11-06T10:05:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martinrhan",
                                            "createdAt":  "2024-11-06T10:05:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Captainpast",
                                            "createdAt":  "2025-04-10T06:41:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lue-bird",
                                            "createdAt":  "2025-05-18T01:26:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "llaz-wop",
                                            "createdAt":  "2025-08-11T08:24:48Z"
                                        }
                                    ],
                          "totalCount":  82
                      },
        "updatedAt":  "2024-11-26T04:00:17Z",
        "body":  "The approved API is here: https://github.com/dotnet/runtime/issues/24168#issuecomment-642847557\r\n\r\nDue to the size of the approved surface area, it is being split into multiple sections for people who want to help implement it. You can see https://github.com/dotnet/runtime/issues/24168#issuecomment-642894470 for more details\r\n\r\n-----------------\r\n\r\nVector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane, Quaternion are currently implemented with single precission numbers. \r\nTheare are requests (above) and some miror implementations of System.Numerics.* can be found across Internet where double is supported.\r\n\r\nThese classes should support float and double precission and maybe in future more types. One of possile solution is to miror them as generics\r\nwith support for both double and single precission numbers.\r\n\r\n## Rationale and Usage\r\n\r\nThis is request that developers ask about, one of usages is CAD software.\r\n\r\nFor example, to use Vector3\u003cT\u003e and Matrix4x4\u003cT\u003e with double precission we will be able to write:\r\n\r\n```csharp\r\nvar v1 = new Vector3\u003cdouble\u003e(4,5,4);\r\nvar v2 = new Vector3\u003cdouble\u003e(1,3,2);\r\ndouble d = Vector3\u003cdouble\u003e.Dot(v1, v2);\r\n\r\nMatrix4x4\u003cdouble\u003e xRot = Matrix4x4\u003cdouble\u003e.CreateTranslation(v1);\r\nVector3\u003cdouble\u003e tr = Vector3\u003cdouble\u003e.Transform(v2,xRot);\r\n```\r\n\r\n## Proposed API (mirrored from Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane)\r\n\r\nThe following APIs are duplicates of the existing `float` based APIs, but with `float` replaced with `T` to allow for `float`, `double`, and in the future `System.Half`.\r\n\r\n### File Vector2OfT.cs\r\n\r\n```csharp\r\npublic partial struct Vector2\u003cT\u003e : IEquatable\u003cVector2\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector2\u003cT\u003e Zero { get; }\r\n    \r\n    public static Vector2\u003cT\u003e One { get; }\r\n    \r\n    public static Vector2\u003cT\u003e UnitX { get; }\r\n    \r\n    public static Vector2\u003cT\u003e UnitY { get; }\r\n    \r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Normalize(Vector2\u003cT\u003e value);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Reflect(Vector2\u003cT\u003e vector, Vector2\u003cT\u003e normal);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Clamp(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e min, Vector2\u003cT\u003e max);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Lerp(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2, T amount);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix3x2\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix3x2\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Add(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Subtract(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, T right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(T left, Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Divide(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Divide(Vector2\u003cT\u003e left, T divisor);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Negate(Vector2\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector2_IntrinsicsOfT.cs\r\n```csharp\r\npublic partial struct Vector2\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n\r\n    [JitIntrinsic]\r\n    public Vector2(T value);\r\n\r\n    [JitIntrinsic]\r\n    public Vector2(T x, T y);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(global::System.Numerics.Vector2\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n    \r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Min(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Max(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Abs(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e SquareRoot(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator +(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator -(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(T left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(global::System.Numerics.Vector2\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator /(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator /(global::System.Numerics.Vector2\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator -(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector2\u003cT\u003e(Vector2 value);\r\n}\r\n```\r\n### File Vector3OfT.cs\r\n```csharp\r\npublic partial struct Vector3\u003cT\u003e : IEquatable\u003cVector3\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector3\u003cT\u003e Zero { get; }\r\n    \r\n    public static Vector3\u003cT\u003e One { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitX { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitY { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitZ { get; }\r\n    \r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Normalize(Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Cross(Vector3\u003cT\u003e vector1, Vector3\u003cT\u003e vector2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Reflect(Vector3\u003cT\u003e vector, Vector3\u003cT\u003e normal);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Clamp(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e min, Vector3\u003cT\u003e max);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Lerp(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2, T amount);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e TransformNormal(Vector3\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Add(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Subtract(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, T right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(T left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Divide(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Divide(Vector3\u003cT\u003e left, T divisor);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Negate(Vector3\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector3_IntrinsicsOfT.cs\r\n```csharp\r\npublic partial struct Vector3\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n    \r\n    public T Z;\r\n\r\n    [JitIntrinsic]\r\n    public Vector3(T value);\r\n\r\n    public Vector3(Vector2\u003cT\u003e value, T z);\r\n\r\n    [JitIntrinsic]\r\n    public Vector3(T x, T y, T z);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(Vector3\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Vector3\u003cT\u003e vector1, Vector3\u003cT\u003e vector2);\r\n\r\n    [JitIntrinsic]\r\n    public static Vector3\u003cT\u003e Min(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Max(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Abs(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e SquareRoot(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(T left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector3\u003cT\u003e(Vector3 value);\r\n}\r\n```\r\n### File Vector4OfT.cs\r\n```csharp\r\npublic partial struct Vector4\u003cT\u003e : IEquatable\u003cVector4\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector4\u003cT\u003e Zero { get; }\r\n\r\n    public static Vector4\u003cT\u003e One { get; }\r\n\r\n    public static Vector4\u003cT\u003e UnitX { get; }\r\n\r\n    public static Vector4\u003cT\u003e UnitY { get ; }\r\n    \r\n    public static Vector4\u003cT\u003e UnitZ { get; }\r\n    \r\n    public static Vector4\u003cT\u003e UnitW { get; };\r\n\r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Normalize(Vector4\u003cT\u003e vector);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Clamp(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e min, Vector4\u003cT\u003e max);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Lerp(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2, T amount);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e vector, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector2\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector3\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Add(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Subtract(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, T right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(T left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Divide(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Divide(Vector4\u003cT\u003e left, T divisor);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Negate(Vector4\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector4OfT_Intrinsics.cs\r\n```csharp\r\npublic partial struct Vector4\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n\r\n    public T Z;\r\n    \r\n    public T W;\r\n    \r\n    [JitIntrinsic]\r\n    public Vector4(T value);\r\n\r\n    [JitIntrinsic]\r\n    public Vector4(T x, T y, T z, T w);\r\n\r\n    public Vector4(Vector2\u003cT\u003e value, T z, T w);\r\n\r\n    public Vector4(Vector3\u003cT\u003e value, T w);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(Vector4\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Vector4\u003cT\u003e vector1, Vector4\u003cT\u003e vector2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Min(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Max(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Abs(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e SquareRoot(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(T left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector4\u003cT\u003e(Vector4 value);\r\n}\r\n```\r\n### File Matrix3x2OfT.cs\r\n```csharp\r\npublic struct Matrix3x2\u003cT\u003e : IEquatable\u003cMatrix3x2\u003cT\u003e\u003e\r\n{\r\n    public T M11;\r\n\r\n    public T M12;\r\n    \r\n    public T M21;\r\n    \r\n    public T M22;\r\n    \r\n    public T M31;\r\n    \r\n    public T M32;\r\n\r\n    public static Matrix3x2\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; set; }\r\n\r\n    public Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(Vector2\u003cT\u003e position);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(T xPosition, T yPosition);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T xScale, T yScale);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T xScale, T yScale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scales);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scales, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public T GetDeterminant();\r\n\r\n    public static bool Invert(Matrix3x2\u003cT\u003e matrix, out Matrix3x2\u003cT\u003e result);\r\n\r\n    public static Matrix3x2\u003cT\u003e Lerp(Matrix3x2\u003cT\u003e matrix1, Matrix3x2\u003cT\u003e matrix2, T amount);\r\n\r\n    public static Matrix3x2\u003cT\u003e Negate(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e Add(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Subtract(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003e value1, T value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e value1, T value2);\r\n\r\n    public static bool operator ==(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public bool Equals(Matrix3x2\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Matrix3x2\u003cT\u003e(Matrix3x2 value);\r\n}\r\n```\r\n### File Matrix4x4ofT.cs\r\n```csharp\r\npublic struct Matrix4x4\u003cT\u003e : IEquatable\u003cMatrix4x4\u003cT\u003e\u003e\r\n{\r\n    public T M11;\r\n    \r\n    public T M12;\r\n    \r\n    public T M13;\r\n    \r\n    public T M14;\r\n    \r\n    public T M21;\r\n    \r\n    public T M22;\r\n    \r\n    public T M23;\r\n    \r\n    public T M24;\r\n\r\n    public T M31;\r\n    \r\n    public T M32;\r\n    \r\n    public T M33;\r\n    \r\n    public T M34;\r\n    \r\n    public T M41;\r\n    \r\n    public T M42;\r\n    \r\n    public T M43;\r\n    \r\n    public T M44;\r\n    \r\n    public static Matrix4x4\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector3\u003cT\u003e Translation { get; set; }\r\n\r\n    public Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44);\r\n    \r\n    public Matrix4x4(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraUpVector, Vector3\u003cT\u003e cameraForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateConstrainedBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e rotateAxis, Vector3\u003cT\u003e cameraForwardVector, Vector3\u003cT\u003e objectForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(Vector3\u003cT\u003e position);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(T xPosition, T yPosition, T zPosition);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T xScale, T yScale, T zScale);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T xScale, T yScale, T zScale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scales);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scales, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveFieldOfView(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspective(T width, T height, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveOffCenter(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographic(T width, T height, T zNearPlane, T zFarPlane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographicOffCenter(T left, T right, T bottom, T top, T zNearPlane, T zFarPlane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateLookAt(Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraTarget, Vector3\u003cT\u003e cameraUpVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateWorld(Vector3\u003cT\u003e position, Vector3\u003cT\u003e forward, Vector3\u003cT\u003e up);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromQuaternion(Quaternion\u003cT\u003e quaternion);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateShadow(Vector3\u003cT\u003e lightDirection, Plane\u003cT\u003e plane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateReflection(Plane\u003cT\u003e value);\r\n\r\n    public T GetDeterminant();\r\n\r\n    public static bool Invert(Matrix4x4\u003cT\u003e matrix, out Matrix4x4\u003cT\u003e result);\r\n\r\n    public static bool Decompose(Matrix4x4\u003cT\u003e matrix, out Vector3\u003cT\u003e scale, out Quaternion\u003cT\u003e rotation, out Vector3\u003cT\u003e translation);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transform(Matrix4x4\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transpose(Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Matrix4x4\u003cT\u003e Lerp(Matrix4x4\u003cT\u003e matrix1, Matrix4x4\u003cT\u003e matrix2, T amount);\r\n\r\n    public static Matrix4x4\u003cT\u003e Negate(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e Add(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Subtract(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003e value1, T value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e value1, T value2);\r\n\r\n    public static bool operator ==(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public bool Equals(Matrix4x4\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Matrix4x4\u003cT\u003e(Matrix4x4 value);\r\n}\r\n```\r\n### File PlaneOfT.cs\r\n```csharp\r\npublic struct Plane\u003cT\u003e : IEquatable\u003cPlane\u003cT\u003e\u003e\r\n{\r\n    public Vector3\u003cT\u003e Normal;\r\n    \r\n    public T D;\r\n\r\n    public Plane(T x, T y, T z, T d);\r\n    \r\n    public Plane(Vector3\u003cT\u003e normal, T d);\r\n\r\n    public Plane(Vector4\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e CreateFromVertices(Vector3\u003cT\u003e point1, Vector3\u003cT\u003e point2, Vector3\u003cT\u003e point3);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Normalize(Plane\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Plane\u003cT\u003e plane, Vector4\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DotCoordinate(Plane\u003cT\u003e plane, Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DotNormal(Plane\u003cT\u003e plane, Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Plane\u003cT\u003e value1, Plane\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Plane\u003cT\u003e value1, Plane\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public bool Equals(Plane\u003cT\u003e other);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Plane\u003cT\u003e(Plane value);\r\n}\r\n```\r\n### File QuaternionOfT.cs\r\n```csharp\r\npublic struct Quaternion\u003cT\u003e : IEquatable\u003cQuaternion\u003cT\u003e\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n    \r\n    public T Z;\r\n    \r\n    public T W;\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Quaternion(T x, T y, T z, T w);\r\n\r\n    public Quaternion(Vector3\u003cT\u003e vectorPart, T scalarPart);\r\n\r\n    public T Length();\r\n\r\n    public T LengthSquared();\r\n\r\n    public static Quaternion\u003cT\u003e Normalize(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Conjugate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Inverse(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromRotationMatrix(Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static T Dot(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2);\r\n\r\n    public static Quaternion\u003cT\u003e Slerp(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2, T amount);\r\n\r\n    public static Quaternion\u003cT\u003e Lerp(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2, T amount);\r\n\r\n    public static Quaternion\u003cT\u003e Concatenate(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Negate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Add(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Subtract(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003e value1, T value2);\r\n\r\n    public static Quaternion\u003cT\u003e Divide(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e value1, T value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator /(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static bool operator ==(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public bool Equals(Quaternion\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Quaternion\u003cT\u003e(Quaternion value);\r\n}\r\n```\r\n\r\n### class Vector2 extended with:\r\n```csharp\r\npublic static implicit operator Vector2(Vector2\u003cdouble\u003e value);\r\npublic static implicit operator Vector2(Vector2\u003cfloat\u003e value);\r\n```\r\n### class Vector3 extended with:\r\n```csharp\r\npublic static implicit operator Vector3(Vector3\u003cdouble\u003e value);\r\npublic static implicit operator Vector3(Vector3\u003cfloat\u003e value);\r\n```\r\n### class Vector4 extended with:\r\n```csharp\r\npublic static implicit operator Vector4(Vector4\u003cdouble\u003e value);\r\npublic static implicit operator Vector4(Vector4\u003cfloat\u003e value);\r\n```\r\n### class Matrix3x2 extended with:\r\n```csharp\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cdouble\u003e value);\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cfloat\u003e value);\r\n```\r\n### class Matrix4x4 extended with:\r\n```csharp\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cdouble\u003e value);\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cfloat\u003e value);\r\n```\r\n### class Quaternion extended with:\r\n```csharp\r\npublic static implicit operator Quaternion(Quaternion\u003cdouble\u003e value);\r\npublic static implicit operator Quaternion(Quaternion\u003cfloat\u003e value);\r\n```\r\n### class Plane extended with:\r\n```csharp\r\npublic static implicit operator Plane(Plane\u003cdouble\u003e value);\r\npublic static implicit operator Plane(Plane\u003cfloat\u003e value);\r\n```\r\n\r\n## Original Text\r\n\r\n_From @acecebov on August 25, 2017 16:50_\r\n\r\nAdd support System.Numerics.Vectors types with double precision:\r\nVector2d, Vector3d, Vector4d, Matrix3x2d, Matrix4x4d, PlaneD, QuaternionD.\r\n\r\nThere are lots of scientific/gaming cases when we want to work with double precision and benefit of SIMD!\r\n\r\n_Copied from original issue: dotnet/coreclr#13591_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHxKjKA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQ1NjI5Mg==",
                                           "createdAt":  "2017-11-18T17:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @danmosemsft on August 27, 2017 19:55_\n\n@acecebov thanks for the suggestion, can you move the issue to the corefx repo? New api proposals go there.",
                                           "updatedAt":  "2017-11-18T17:13:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0OTAwMDUwNg==",
                                           "createdAt":  "2017-12-04T15:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bradphelan",
                                           "body":  "We needed double as we need the precision for a CAD application so we wrote a port of System.Numerics.Vectors. Mostly just VIM macros replacing float with double everywhere. No SIMD support however.\r\n\r\nhttps://github.com/Weingartner/System.Numerics.DoubleVectors\r\nhttps://www.nuget.org/packages/System.DoubleNumerics/\r\n",
                                           "updatedAt":  "2017-12-04T15:41:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MDgxOTI2Mg==",
                                           "createdAt":  "2017-12-11T18:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Need to add a proposed API, get it reviewed, and then implement the API.  After that, need to update the JIT to support SIMD on these new types.\r\n\r\nAnother feature that is coming in .NET Core 2.1 that will help here is Hardware/Platform Intrinsics. \r\n See https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md.  This exposes the underlying SIMD instructions to C# and allows you to call the SIMD instructions directly without needing types to be exposed in System.Numerics.Vectors.",
                                           "updatedAt":  "2017-12-11T18:48:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MDg1MzAyMg==",
                                           "createdAt":  "2017-12-11T20:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQYINg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fiigii",
                                                                               "createdAt":  "2017-12-11T20:50:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@eerhardt, rather than updating the JIT, might it be better to just wait for Hardware/Platform intrinsics?\r\n\r\nThat is, just have it be purely software and add the additional intrinsic code paths once @fiigii (and others working on this) finishes adding the JIT support for those.\r\n\r\nARM support could be implemented in the same way, as their is currently work starting to add intrinsics for it as well.",
                                           "updatedAt":  "2017-12-11T20:47:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTE4NzA2OA==",
                                           "createdAt":  "2017-12-12T20:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "If we wait for the Hardware intrinsics, would it be better to just close this as \"won\u0027t fix\" and consumers can just take advantage of the underlying Hardware intrinsic APIs?  I am assuming that was the point of directly exposing the intrinsics - so we didn\u0027t need to keep growing our API abstraction over the top of it.",
                                           "updatedAt":  "2017-12-12T20:39:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTE5MTcxMg==",
                                           "createdAt":  "2017-12-12T20:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e would it be better to just close this as \"won\u0027t fix\"\r\n\r\nNo, I don\u0027t think that should happen.\r\n\r\nI don\u0027t think the intrinsics are meant to exist so that we don\u0027t have to grow our API abstraction. I think they are meant to exist so that library/framework authors can write more performant libraries that better take advantage of the underlying hardware.\r\n\r\nThat is, even if hardware intrinsics existed today, requests to expose `System.Numerics.Vector` for `float` and `double` would still exist. The `Vector` types are general purpose APIs that are useful in a number of applications. Having the additional code paths to take advantage of the underlying hardware and be more performant is a bonus.\r\n\r\nMy proposal was to expose these APIs today, but with software only implementations. Then, as the hardware intrinsics come online, we can add the more performant code paths (which would be useful for https://github.com/dotnet/coreclr/issues/15490)\r\n",
                                           "updatedAt":  "2017-12-12T20:57:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1Nzc0MzAzMQ==",
                                           "createdAt":  "2018-01-15T17:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "Hello, I would like to try to work on this issue, can you please assign me to it?",
                                           "updatedAt":  "2018-01-15T17:16:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1Nzc0NjA0Mw==",
                                           "createdAt":  "2018-01-15T17:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOARgqBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmatras",
                                                                               "createdAt":  "2018-01-17T08:24:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@mmatras, This (ideally) needs a proper API proposal and should go through the API review process before any work starts on it.\r\n\r\nAnother big decision is whether this should be implemented the same way as the existing intrinsics (adding codgen support directly to the JIT) or if it can use the new hardware intrinsics functionality (which is still a WIP). The two implementations are widely different and going one vs the other may result in a lot of throw-away work.",
                                           "updatedAt":  "2018-01-15T17:29:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODA5NTAwOA==",
                                           "createdAt":  "2018-01-16T20:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOARgqAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmatras",
                                                                               "createdAt":  "2018-01-17T08:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@mmatras - as @tannergooding says, this needs to go through the [API proposal process](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md).  You can start working on this by filling out the original post with the proposed API.  Then we can schedule it for a review.",
                                           "updatedAt":  "2018-01-16T20:30:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTI4MTY0NA==",
                                           "createdAt":  "2018-01-21T21:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "Hello @eerhardt and @tannergooding , \r\nI\u0027ve started working on API proposition, but got stuck and I don\u0027t know in which direction I should go. For clarity let\u0027s stick to Vector2:\r\nMy first propositon is to change X and Y types to object, and to add all needed overloads for float and double:\r\n```\r\n[JitIntrinsic]\r\npublic Vector2(Single x, Single y)\r\n[JitIntrinsic]\r\npublic Vector2(Double x, Double y)\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic void CopyTo(Single[] array);\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic void CopyTo(Double[] array);\r\n```\r\netc.\r\n\r\nMy second option is to use generic type: public partial struct Vector2\u003cT\u003e, and rewrite all methods to generic. Which option is better in your opinion?\r\n",
                                           "updatedAt":  "2018-01-21T21:15:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTI4MzkwNA==",
                                           "createdAt":  "2018-01-21T21:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We actually can\u0027t do either of those, as it would be a breaking API change.\r\n\r\nI think we could probably go two directions here:\r\n1. Just add `Vector2d`, `Vector3d`, and `Vector4d` types, which mirror the existing classes but use `double`\r\n2. Add generic `Vector2\u003cT\u003e`, `Vector3\u003cT\u003e`, and `Vector4\u003cT\u003e` types, which mirror the existing classes and use `T` (which would allow the use of the `Vector` in generic algorithms, and better extension to other types in the future, if that is desirable)\r\n\r\n@eerhardt, thoughts?",
                                           "updatedAt":  "2018-01-21T21:47:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTI5MTE3Ng==",
                                           "createdAt":  "2018-01-21T23:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "In my second option I thought the same as you but I didn\u0027t express myself well, maybe this is the way. I will prepare API proposal in the coming week.",
                                           "updatedAt":  "2018-01-21T23:26:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MDkxOTE4MQ==",
                                           "createdAt":  "2018-01-26T22:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I guess I was under the assumption that we were going to do @tannergooding\u0027s (1.) proposal - \"Just add Vector2d, Vector3d, and Vector4d types, which mirror the existing classes but use double\".\r\n\r\nIf we went with the generic approach, would we support more types than just `float` and `double`?  Say `decimal` or `short`?\r\n\r\n/cc @CarolEidt ",
                                           "updatedAt":  "2018-01-26T22:14:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MDkxOTY5Nw==",
                                           "createdAt":  "2018-01-26T22:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Also, with the generic approach, would not having a fixed struct size be a problem?  (I don\u0027t know if there is - just bringing it up)",
                                           "updatedAt":  "2018-01-26T22:17:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MDkyOTY0NQ==",
                                           "createdAt":  "2018-01-26T23:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyrSfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damian-666",
                                                                               "createdAt":  "2023-01-15T21:14:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e If we went with the generic approach, would we support more types than just float and double\r\n\r\nMy thought on a generic approach is that the vector operations are generally valid on any type of numeric data and it might make extension to support future types easier, if that was desired.\r\n\r\nCurrently the support is `System.Single` (existing code) and `System.Double` (this proposal). However, we are looking at adding at least one other floating-point type (`System.Numerics.Half`) and could look at adding others in the future. If it was desirable to also support `Vector` operations for those types, it might be better to just extend an existing `Vector2\u003cT\u003e` (with a static `Vector2\u003cT\u003e.IsSupported` check) then also implement a new `Vector2h` type.\r\n\r\nA downside is that not all math operations required to support `vector` operations (such as `Sqrt`) are available for all numeric types and there may be weird rounding issues when doing certain operations with integer types (although integer types would be useful for something like `Vector2\u003cint\u003e`, which equates to the `POINT` struct on Windows and similar structs on other platforms).\r\n\r\n\u003e Also, with the generic approach, would not having a fixed struct size be a problem\r\n\r\nI don\u0027t think having a fixed struct size would be a problem, if you needed access to the raw bits you would just offset with `Unsafe.SizeOf\u003cVector2\u003cT\u003e\u003e` instead of some fixed size (16 for single, 32 for double, etc).\r\n\r\n",
                                           "updatedAt":  "2018-01-26T23:06:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTczNDkyOQ==",
                                           "createdAt":  "2018-01-30T21:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyrSkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damian-666",
                                                                               "createdAt":  "2023-01-15T21:15:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mmatras",
                                           "body":  "Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane, Quaternion are currently implemented with single precission numbers. \r\nTheare are requests (above) and some miror implementations of System.Numerics.* can be found across Internet where double is supported.\r\n\r\nThese classes should support float and double precission and maybe in future more types. One of possile solution is to miror them as generics\r\nwith support for both double and single precission numbers.\r\n\r\n## Rationale and Usage\r\n\r\nThis is request that developers ask about, one of usages is CAD software.\r\n\r\nFor example, to use Vector3\u003cT\u003e and Matrix4x4\u003cT\u003e with double precission we will be able to write:\r\n\r\n```csharp\r\nvar v1 = new Vector3\u003cdouble\u003e(4,5,4);\r\nvar v2 = new Vector3\u003cdouble\u003e(1,3,2);\r\ndouble d = Vector3\u003cdouble\u003e.Dot(v1, v2);\r\n\r\nMatrix4x4\u003cdouble\u003e xRot = Matrix4x4\u003cdouble\u003e.CreateTranslation(v1);\r\nVector3\u003cdouble\u003e tr = Vector3\u003cdouble\u003e.Transform(v2,xRot);\r\n```\r\n\r\n## Proposed API (mirrored from Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane)\r\n\r\n### File Vector2OfT.cs\r\n\r\n```csharp\r\npublic partial struct Vector2\u003cT\u003e : IEquatable\u003cVector2\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector2\u003cT\u003e Zero { get; }\r\n    \r\n    public static Vector2\u003cT\u003e One { get; }\r\n    \r\n    public static Vector2\u003cT\u003e UnitX { get; }\r\n    \r\n    public static Vector2\u003cT\u003e UnitY { get; }\r\n    \r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Normalize(Vector2\u003cT\u003e value);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Reflect(Vector2\u003cT\u003e vector, Vector2\u003cT\u003e normal);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Clamp(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e min, Vector2\u003cT\u003e max);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Lerp(Vector2\u003cT\u003e value1, Vector2\u003cT\u003e value2, T amount);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix3x2\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix3x2\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Add(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Subtract(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, T right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Multiply(T left, Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Divide(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Divide(Vector2\u003cT\u003e left, T divisor);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector2\u003cT\u003e Negate(Vector2\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector2_IntrinsicsOfT.cs\r\n```csharp\r\npublic partial struct Vector2\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n\r\n    [JitIntrinsic]\r\n    public Vector2(T value);\r\n\r\n    [JitIntrinsic]\r\n    public Vector2(T x, T y);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(global::System.Numerics.Vector2\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n    \r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Min(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Max(global::System.Numerics.Vector2\u003cT\u003e value1, global::System.Numerics.Vector2\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e Abs(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e SquareRoot(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator +(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator -(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(T left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator *(global::System.Numerics.Vector2\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator /(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator /(global::System.Numerics.Vector2\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static global::System.Numerics.Vector2\u003cT\u003e operator -(global::System.Numerics.Vector2\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(global::System.Numerics.Vector2\u003cT\u003e left, global::System.Numerics.Vector2\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector2\u003cT\u003e(Vector2 value);\r\n}\r\n```\r\n### File Vector3OfT.cs\r\n```csharp\r\npublic partial struct Vector3\u003cT\u003e : IEquatable\u003cVector3\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector3\u003cT\u003e Zero { get; }\r\n    \r\n    public static Vector3\u003cT\u003e One { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitX { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitY { get; }\r\n    \r\n    public static Vector3\u003cT\u003e UnitZ { get; }\r\n    \r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Normalize(Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Cross(Vector3\u003cT\u003e vector1, Vector3\u003cT\u003e vector2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Reflect(Vector3\u003cT\u003e vector, Vector3\u003cT\u003e normal);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Clamp(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e min, Vector3\u003cT\u003e max);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Lerp(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2, T amount);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e TransformNormal(Vector3\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Add(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Subtract(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, T right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Multiply(T left, Vector3\u003cT\u003e right);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Divide(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Divide(Vector3\u003cT\u003e left, T divisor);\r\n    \r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Negate(Vector3\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector3_IntrinsicsOfT.cs\r\n```csharp\r\npublic partial struct Vector3\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n    \r\n    public T Z;\r\n\r\n    [JitIntrinsic]\r\n    public Vector3(T value);\r\n\r\n    public Vector3(Vector2\u003cT\u003e value, T z);\r\n\r\n    [JitIntrinsic]\r\n    public Vector3(T x, T y, T z);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(Vector3\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Vector3\u003cT\u003e vector1, Vector3\u003cT\u003e vector2);\r\n\r\n    [JitIntrinsic]\r\n    public static Vector3\u003cT\u003e Min(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Max(Vector3\u003cT\u003e value1, Vector3\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e Abs(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e SquareRoot(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator *(T left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector3\u003cT\u003e(Vector3 value);\r\n}\r\n```\r\n### File Vector4OfT.cs\r\n```csharp\r\npublic partial struct Vector4\u003cT\u003e : IEquatable\u003cVector4\u003cT\u003e\u003e, IFormattable\r\n{\r\n    public static Vector4\u003cT\u003e Zero { get; }\r\n\r\n    public static Vector4\u003cT\u003e One { get; }\r\n\r\n    public static Vector4\u003cT\u003e UnitX { get; }\r\n\r\n    public static Vector4\u003cT\u003e UnitY { get ; }\r\n    \r\n    public static Vector4\u003cT\u003e UnitZ { get; }\r\n    \r\n    public static Vector4\u003cT\u003e UnitW { get; };\r\n\r\n    public override int GetHashCode();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public string ToString(string format);\r\n\r\n    public string ToString(string format, IFormatProvider formatProvider);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T Length();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public T LengthSquared();\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Distance(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DistanceSquared(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Normalize(Vector4\u003cT\u003e vector);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Clamp(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e min, Vector4\u003cT\u003e max);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Lerp(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2, T amount);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e vector, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector2\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector3\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Add(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Subtract(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, T right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Multiply(T left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Divide(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Divide(Vector4\u003cT\u003e left, T divisor);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Negate(Vector4\u003cT\u003e value);\r\n}\r\n```\r\n### File Vector4OfT_Intrinsics.cs\r\n```csharp\r\npublic partial struct Vector4\u003cT\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n\r\n    public T Z;\r\n    \r\n    public T W;\r\n    \r\n    [JitIntrinsic]\r\n    public Vector4(T value);\r\n\r\n    [JitIntrinsic]\r\n    public Vector4(T x, T y, T z, T w);\r\n\r\n    public Vector4(Vector2\u003cT\u003e value, T z, T w);\r\n\r\n    public Vector4(Vector3\u003cT\u003e value, T w);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public void CopyTo(T[] array, int index);\r\n\r\n    [JitIntrinsic]\r\n    public bool Equals(Vector4\u003cT\u003e other);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Vector4\u003cT\u003e vector1, Vector4\u003cT\u003e vector2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Min(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Max(Vector4\u003cT\u003e value1, Vector4\u003cT\u003e value2);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e Abs(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e SquareRoot(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, T right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator *(T left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e value1, T value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e value);\r\n\r\n    [JitIntrinsic]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static explicit operator Vector4\u003cT\u003e(Vector4 value);\r\n}\r\n```\r\n### File Matrix3x2OfT.cs\r\n```csharp\r\npublic struct Matrix3x2\u003cT\u003e : IEquatable\u003cMatrix3x2\u003cT\u003e\u003e\r\n{\r\n    public T M11;\r\n\r\n    public T M12;\r\n    \r\n    public T M21;\r\n    \r\n    public T M22;\r\n    \r\n    public T M31;\r\n    \r\n    public T M32;\r\n\r\n    public static Matrix3x2\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; set; }\r\n\r\n    public Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(Vector2\u003cT\u003e position);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(T xPosition, T yPosition);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T xScale, T yScale);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T xScale, T yScale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scales);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scales, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public T GetDeterminant();\r\n\r\n    public static bool Invert(Matrix3x2\u003cT\u003e matrix, out Matrix3x2\u003cT\u003e result);\r\n\r\n    public static Matrix3x2\u003cT\u003e Lerp(Matrix3x2\u003cT\u003e matrix1, Matrix3x2\u003cT\u003e matrix2, T amount);\r\n\r\n    public static Matrix3x2\u003cT\u003e Negate(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e Add(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Subtract(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003e value1, T value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e value1, T value2);\r\n\r\n    public static bool operator ==(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Matrix3x2\u003cT\u003e value1, Matrix3x2\u003cT\u003e value2);\r\n\r\n    public bool Equals(Matrix3x2\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Matrix3x2\u003cT\u003e(Matrix3x2 value);\r\n}\r\n```\r\n### File Matrix4x4ofT.cs\r\n```csharp\r\npublic struct Matrix4x4\u003cT\u003e : IEquatable\u003cMatrix4x4\u003cT\u003e\u003e\r\n{\r\n    public T M11;\r\n    \r\n    public T M12;\r\n    \r\n    public T M13;\r\n    \r\n    public T M14;\r\n    \r\n    public T M21;\r\n    \r\n    public T M22;\r\n    \r\n    public T M23;\r\n    \r\n    public T M24;\r\n\r\n    public T M31;\r\n    \r\n    public T M32;\r\n    \r\n    public T M33;\r\n    \r\n    public T M34;\r\n    \r\n    public T M41;\r\n    \r\n    public T M42;\r\n    \r\n    public T M43;\r\n    \r\n    public T M44;\r\n    \r\n    public static Matrix4x4\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector3\u003cT\u003e Translation { get; set; }\r\n\r\n    public Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44);\r\n    \r\n    public Matrix4x4(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraUpVector, Vector3\u003cT\u003e cameraForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateConstrainedBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e rotateAxis, Vector3\u003cT\u003e cameraForwardVector, Vector3\u003cT\u003e objectForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(Vector3\u003cT\u003e position);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(T xPosition, T yPosition, T zPosition);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T xScale, T yScale, T zScale);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T xScale, T yScale, T zScale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scales);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scales, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveFieldOfView(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspective(T width, T height, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveOffCenter(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographic(T width, T height, T zNearPlane, T zFarPlane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographicOffCenter(T left, T right, T bottom, T top, T zNearPlane, T zFarPlane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateLookAt(Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraTarget, Vector3\u003cT\u003e cameraUpVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateWorld(Vector3\u003cT\u003e position, Vector3\u003cT\u003e forward, Vector3\u003cT\u003e up);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromQuaternion(Quaternion\u003cT\u003e quaternion);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateShadow(Vector3\u003cT\u003e lightDirection, Plane\u003cT\u003e plane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateReflection(Plane\u003cT\u003e value);\r\n\r\n    public T GetDeterminant();\r\n\r\n    public static bool Invert(Matrix4x4\u003cT\u003e matrix, out Matrix4x4\u003cT\u003e result);\r\n\r\n    public static bool Decompose(Matrix4x4\u003cT\u003e matrix, out Vector3\u003cT\u003e scale, out Quaternion\u003cT\u003e rotation, out Vector3\u003cT\u003e translation);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transform(Matrix4x4\u003cT\u003e value, Quaternion\u003cT\u003e rotation);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transpose(Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Matrix4x4\u003cT\u003e Lerp(Matrix4x4\u003cT\u003e matrix1, Matrix4x4\u003cT\u003e matrix2, T amount);\r\n\r\n    public static Matrix4x4\u003cT\u003e Negate(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e Add(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Subtract(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003e value1, T value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e value1, T value2);\r\n\r\n    public static bool operator ==(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Matrix4x4\u003cT\u003e value1, Matrix4x4\u003cT\u003e value2);\r\n\r\n    public bool Equals(Matrix4x4\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Matrix4x4\u003cT\u003e(Matrix4x4 value);\r\n}\r\n```\r\n### File PlaneOfT.cs\r\n```csharp\r\npublic struct Plane\u003cT\u003e : IEquatable\u003cPlane\u003cT\u003e\u003e\r\n{\r\n    public Vector3\u003cT\u003e Normal;\r\n    \r\n    public T D;\r\n\r\n    public Plane(T x, T y, T z, T d);\r\n    \r\n    public Plane(Vector3\u003cT\u003e normal, T d);\r\n\r\n    public Plane(Vector4\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e CreateFromVertices(Vector3\u003cT\u003e point1, Vector3\u003cT\u003e point2, Vector3\u003cT\u003e point3);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Normalize(Plane\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Quaternion\u003cT\u003e rotation);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T Dot(Plane\u003cT\u003e plane, Vector4\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DotCoordinate(Plane\u003cT\u003e plane, Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static T DotNormal(Plane\u003cT\u003e plane, Vector3\u003cT\u003e value);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator ==(Plane\u003cT\u003e value1, Plane\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool operator !=(Plane\u003cT\u003e value1, Plane\u003cT\u003e value2);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public bool Equals(Plane\u003cT\u003e other);\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Plane\u003cT\u003e(Plane value);\r\n}\r\n```\r\n### File QuaternionOfT.cs\r\n```csharp\r\npublic struct Quaternion\u003cT\u003e : IEquatable\u003cQuaternion\u003cT\u003e\u003e\r\n{\r\n    public T X;\r\n    \r\n    public T Y;\r\n    \r\n    public T Z;\r\n    \r\n    public T W;\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Quaternion(T x, T y, T z, T w);\r\n\r\n    public Quaternion(Vector3\u003cT\u003e vectorPart, T scalarPart);\r\n\r\n    public T Length();\r\n\r\n    public T LengthSquared();\r\n\r\n    public static Quaternion\u003cT\u003e Normalize(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Conjugate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Inverse(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Quaternion\u003cT\u003e CreateFromRotationMatrix(Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static T Dot(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2);\r\n\r\n    public static Quaternion\u003cT\u003e Slerp(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2, T amount);\r\n\r\n    public static Quaternion\u003cT\u003e Lerp(Quaternion\u003cT\u003e quaternion1, Quaternion\u003cT\u003e quaternion2, T amount);\r\n\r\n    public static Quaternion\u003cT\u003e Concatenate(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Negate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e Add(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Subtract(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003e value1, T value2);\r\n\r\n    public static Quaternion\u003cT\u003e Divide(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e value1, T value2);\r\n\r\n    public static Quaternion\u003cT\u003e operator /(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static bool operator ==(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public static bool operator !=(Quaternion\u003cT\u003e value1, Quaternion\u003cT\u003e value2);\r\n\r\n    public bool Equals(Quaternion\u003cT\u003e other);\r\n\r\n    public override bool Equals(object obj);\r\n\r\n    public override string ToString();\r\n\r\n    public override int GetHashCode();\r\n\r\n    public static explicit operator Quaternion\u003cT\u003e(Quaternion value);\r\n}\r\n```\r\n\r\n### class Vector2 extended with:\r\n```csharp\r\npublic static implicit operator Vector2(Vector2\u003cdouble\u003e value);\r\npublic static implicit operator Vector2(Vector2\u003cfloat\u003e value);\r\n```\r\n### class Vector3 extended with:\r\n```csharp\r\npublic static implicit operator Vector3(Vector3\u003cdouble\u003e value);\r\npublic static implicit operator Vector3(Vector3\u003cfloat\u003e value);\r\n```\r\n### class Vector4 extended with:\r\n```csharp\r\npublic static implicit operator Vector4(Vector4\u003cdouble\u003e value);\r\npublic static implicit operator Vector4(Vector4\u003cfloat\u003e value);\r\n```\r\n### class Matrix3x2 extended with:\r\n```csharp\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cdouble\u003e value);\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cfloat\u003e value);\r\n```\r\n### class Matrix4x4 extended with:\r\n```csharp\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cdouble\u003e value);\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cfloat\u003e value);\r\n```\r\n### class Quaternion extended with:\r\n```csharp\r\npublic static implicit operator Quaternion(Quaternion\u003cdouble\u003e value);\r\npublic static implicit operator Quaternion(Quaternion\u003cfloat\u003e value);\r\n```\r\n### class Plane extended with:\r\n```csharp\r\npublic static implicit operator Plane(Plane\u003cdouble\u003e value);\r\npublic static implicit operator Plane(Plane\u003cfloat\u003e value);\r\n```",
                                           "updatedAt":  "2018-02-02T12:04:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTczNjY0Mw==",
                                           "createdAt":  "2018-01-30T21:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@eerhardt, I think the proposed API looks reasonable (it looks like everything already exposed, but with `float` replaced with `T`).\r\n\r\nI think the biggest debate might be whether it should be generic (for easy extension in the future, if desired) or if it should be restricted to just double.",
                                           "updatedAt":  "2018-01-30T21:16:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTczNzA4NA==",
                                           "createdAt":  "2018-01-30T21:17:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOASEHHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmatras",
                                                                               "createdAt":  "2018-01-30T21:35:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@mmatras, it may also be worth considering whether conversion between `Vector2\u003cdouble\u003e` and `Vector2` should be allowed.",
                                           "updatedAt":  "2018-01-30T21:17:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjQxODMyNg==",
                                           "createdAt":  "2018-02-01T22:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "Yes, casting to and from generic types seems reasonable:\r\nI will extend previous API proposal comment with below methods declarations:\r\n```csharp\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static explicit operator Vector2\u003cT\u003e(Vector2 value);\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static explicit operator Vector3\u003cT\u003e(Vector3 value);\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static explicit operator Vector4\u003cT\u003e(Vector4 value);\r\n\r\npublic static explicit operator Matrix3x2\u003cT\u003e(Matrix3x2 value);\r\n\r\npublic static explicit operator Matrix4x4\u003cT\u003e(Matrix4x4 value);\r\n\r\npublic static explicit operator Plane\u003cT\u003e(Plane value);\r\n\r\npublic static explicit operator Quaternion\u003cT\u003e(Quaternion value);\r\n```\r\nThe non generic types can be extended with:\r\n\r\nVector2:\r\n```csharp\r\npublic static implicit operator Vector2(Vector2\u003cdouble\u003e value);\r\npublic static implicit operator Vector2(Vector2\u003cfloat\u003e value);\r\n```\r\nVector3:\r\n```csharp\r\npublic static implicit operator Vector3(Vector3\u003cdouble\u003e value);\r\npublic static implicit operator Vector3(Vector3\u003cfloat\u003e value);\r\n```\r\nVector4:\r\n```csharp\r\npublic static implicit operator Vector4(Vector4\u003cdouble\u003e value);\r\npublic static implicit operator Vector4(Vector4\u003cfloat\u003e value);\r\n```\r\nMatrix3x2:\r\n```csharp\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cdouble\u003e value);\r\npublic static implicit operator Matrix3x2(Matrix3x2\u003cfloat\u003e value);\r\n```\r\nMatrix4x4:\r\n```csharp\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cdouble\u003e value);\r\npublic static implicit operator Matrix4x4(Matrix4x4\u003cfloat\u003e value);\r\n```\r\nQuaternion:\r\n```csharp\r\npublic static implicit operator Quaternion(Quaternion\u003cdouble\u003e value);\r\npublic static implicit operator Quaternion(Quaternion\u003cfloat\u003e value);\r\n```\r\nPlane:\r\n```csharp\r\npublic static implicit operator Plane(Plane\u003cdouble\u003e value);\r\npublic static implicit operator Plane(Plane\u003cfloat\u003e value);\r\n```",
                                           "updatedAt":  "2018-02-01T22:18:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjQxOTMzOQ==",
                                           "createdAt":  "2018-02-01T22:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdvHuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmatras",
                                                                               "createdAt":  "2018-02-01T22:16:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kraytos17",
                                                                               "createdAt":  "2024-04-10T19:20:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "If the operators are purely generic, they should be explicit.\r\n\r\nIf they are \"exploded\", we can allow implicit in a few scenarios (such as float-\u003edouble).",
                                           "updatedAt":  "2018-02-01T22:11:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjQyMTY2NA==",
                                           "createdAt":  "2018-02-01T22:21:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "fixed",
                                           "updatedAt":  "2018-02-01T22:21:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTYyNDY1Mw==",
                                           "createdAt":  "2018-02-14T14:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmatras",
                                           "body":  "@tannergooding, how we can continue with this issue? I was waiting for some feedback or discussion but it took a while now and it got stuck?",
                                           "updatedAt":  "2018-02-14T14:32:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTY1MTQ4Nw==",
                                           "createdAt":  "2018-02-14T15:55:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@eerhardt is the \"area owner\" and is the person who should mark the API as \"ready-to-review\".\r\n\r\nProvided he agrees that the proposed API looks good, we can update the top post and marg it with the appropriate tags.",
                                           "updatedAt":  "2018-02-14T15:55:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTk2NjYzNg==",
                                           "createdAt":  "2018-02-15T15:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Marking as ready to review.\r\n\r\n/cc @CarolEidt @jkotas - in case they want to chime in on the proposed API.",
                                           "updatedAt":  "2018-02-15T15:43:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2ODk2ODIxNg==",
                                           "createdAt":  "2018-02-27T17:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "This looks like an idea case to use in parameters and maybe to make them readonly structs?",
                                           "updatedAt":  "2018-02-27T17:57:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2ODk3MDIyNg==",
                                           "createdAt":  "2018-02-27T18:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e This looks like an idea case to use in parameters and maybe to make them readonly structs?\r\n\r\nNot really, these are the type of structs that should be taking advantage of the underlying hardware and that should be getting passed around in the SIMD registers.",
                                           "updatedAt":  "2018-02-27T18:03:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2OTA1ODAwNg==",
                                           "createdAt":  "2018-02-27T22:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarolEidt",
                                           "body":  "\u003e Not really, these are the type of structs that should be taking advantage of the underlying hardware and that should be getting passed around in the SIMD registers.\r\n\r\nAnd even if not passed in registers, the best performance should be achieved by leaving them as by-value (see https://github.com/dotnet/coreclr/issues/16619)",
                                           "updatedAt":  "2018-02-27T22:59:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2OTA1ODMyMw==",
                                           "createdAt":  "2018-02-27T23:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8j3pA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2018-02-27T23:02:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damian-666",
                                                                               "createdAt":  "2023-01-15T12:54:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aniobodo",
                                                                               "createdAt":  "2023-04-14T05:30:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2023-05-27T12:53:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "CarolEidt",
                                           "body":  "I think the proposed API is reasonable; I think that the generic form is more appealing than `Vectord`, and leaves room for additional types in future.",
                                           "updatedAt":  "2018-02-27T23:00:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3ODkwODM4Ng==",
                                           "createdAt":  "2018-04-05T11:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aobatact",
                                           "body":  "Can\u0027t we use \"in\" at operators in Matrix4x4 ?",
                                           "updatedAt":  "2018-04-05T11:44:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MTMyNzcxOA==",
                                           "createdAt":  "2018-04-14T13:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "The common use case that benefits the most from optimization is transforming an array of points with a single matrix, c.f. DirectXMath\u0027s:\r\n* XMVector2TransformStream\r\n* XMVector3TransformCoordStream\r\n\r\nSo I think we need something like:\r\n\r\n```\r\npublic static Vector4 Transform(Vector4\u003cT\u003e[] positions, Matrix4x4 matrix);\r\n\r\npublic static Vector2 Transform(Vector2\u003cT\u003e[] positions, Matrix3x2 matrix);\r\n```\r\n\r\nThe large matrix param is then only passed once, so the in/not-in debate becomes mute.",
                                           "updatedAt":  "2018-04-14T13:02:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjEwMTUyNQ==",
                                           "createdAt":  "2018-04-17T18:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e Can\u0027t we use \"in\" at operators in Matrix4x4 ?\r\n\r\nNo `in` only works for `readonly struct` types",
                                           "updatedAt":  "2018-04-17T18:49:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjExMDAyMg==",
                                           "createdAt":  "2018-04-17T19:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e No in only works for readonly struct types\r\n\r\n@benaadams - I don\u0027t think that is true.  I think they work great together, but the `in` keyword doesn\u0027t require the parameter to be a `readonly struct`.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/reference-semantics-with-value-types",
                                           "updatedAt":  "2018-04-17T19:18:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjExMjUwMA==",
                                           "createdAt":  "2018-04-17T19:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I think they work great together\r\n\r\nRight, for `implicit in`, you should get better IL for `readonly struct` (as the compiler should not need to create a copy of the struct). However, you can get the same IL for any struct by explicitly specifying `in` (which tells the compiler you are explicitly opting into the behavior).\r\n\r\n\u003e The use of `in` parameters avoids the potential performance costs of making copies. It does not change the semantics of any method call. Therefore, you do not need to specify the `in` modifier at the call site. However, omitting the `in` modifier at the call site informs the compiler that it is allowed to make a copy of the argument for the following reasons:\r\n\u003e * There is an implicit conversion but not an identity conversion from the argument type to the parameter type.\r\n\u003e * The argument is an expression but does not have a known storage variable.\r\n\u003e * An overload exists that differs by the presence or absence of `in`. In that case, the by value overload is a better match.\r\n",
                                           "updatedAt":  "2018-04-17T19:26:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjExNjE2NQ==",
                                           "createdAt":  "2018-04-17T19:39:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e \u003e No in only works for readonly struct types\r\n\r\n\u003e @benaadams - I don\u0027t think that is true. I think they work great together, but the in keyword doesn\u0027t require the parameter to be a readonly struct.\r\n\r\n@eerhardt only if you stay away from the instance methods in the proposal; else it will do a copy when they are called",
                                           "updatedAt":  "2018-04-17T19:39:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjExNzQzNw==",
                                           "createdAt":  "2018-04-17T19:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@benaadams, it (the emitted IL) should never create a copy if you explicitly specify `in` at the callsite, as per the language specification (see above in the quoted section I copied over).",
                                           "updatedAt":  "2018-04-17T19:44:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjExOTU0Nw==",
                                           "createdAt":  "2018-04-17T19:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "Excellent blog post on the reality here [The ‘in’-modifier and the readonly structs in C#](https://blogs.msdn.microsoft.com/seteplia/2018/03/07/the-in-modifier-and-the-readonly-structs-in-c/)\r\n\r\nI\u0027d vote for these structs being immutable.",
                                           "updatedAt":  "2018-04-17T19:50:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjEyMzEwNg==",
                                           "createdAt":  "2018-04-17T20:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e @benaadams, it (the emitted IL) should never create a copy if you explicitly specify in at the callsite, as per the language specification (see above in the quoted section I copied over).\r\n\r\nIt still will make a copy in the called function when a property is accessed or method call made on the variable so it does not potentially change the original?\r\n\r\n\u003e I\u0027d vote for these structs being immutable.\r\n\r\nThen you have the flip side; if you want to change a single value in the struct you now have to copy 16 doubles (128 bytes)",
                                           "updatedAt":  "2018-04-17T20:01:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjEzMDc3NA==",
                                           "createdAt":  "2018-04-17T20:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "I don’t think changing one element of a transform matrix is a common use case.  They usually change as a result of an operation on the whole matrix.",
                                           "updatedAt":  "2018-04-17T20:27:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjEzMTUwMA==",
                                           "createdAt":  "2018-04-17T20:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "It would still be better pass by value and and support vectorcall\r\n\r\n\u003e When any of the first six arguments in order from left to right are vector type arguments, they are passed by value in SSE vector registers 0 to 5 according to argument position. Floating-point and __m128 types are passed in XMM registers, and __m256 types are passed in YMM registers. This differs from the standard x64 calling convention, because the vector types are passed by value instead of by reference, and additional registers are used.",
                                           "updatedAt":  "2018-04-17T20:29:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjEzNTg5OA==",
                                           "createdAt":  "2018-04-17T20:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "It’s a shame that whether to use in or not in the language is down to performance and not to whether the method mutates the parameter.\r\n\r\nEither way it would be beneficial for performance  to be able to pass an array of points and a single matrix to the transform method.",
                                           "updatedAt":  "2018-04-17T20:42:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTMzMDIyNQ==",
                                           "createdAt":  "2018-05-23T12:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEg8Vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "miyu",
                                                                               "createdAt":  "2020-05-18T08:13:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "I\u0027m jumping in. I have basically the need to develop this (at least for myself) right away, I was planing doing something simple at first, but I could ideally help @mmatras if he wants to.\r\n\r\nCouple of observations/questions though:\r\n - Floating point arithmetic have been discussed so far but why not also considering integers numeric data types? (byte, short, int and long) I typically need a Vector3\u003culong\u003e right now for what I\u0027m doing. \r\n - AFAIK there is no generic constraint such as \"numeric data type\" to allow the usage of arithmetic operators, so how the implementation of such generic classes should be ideally done?\r\n - Are you sure the `in` keyword is not useful when passing a Matrix as parameter? 16 double values may be a lot on some CPU don\u0027t you think?",
                                           "updatedAt":  "2018-05-23T12:35:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTU5NjMxNg==",
                                           "createdAt":  "2018-05-24T05:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEAgAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ryder25",
                                                                               "createdAt":  "2020-05-12T23:53:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e AFAIK there is no generic constraint such as \"numeric data type\" to allow the usage of arithmetic operators, so how the implementation of such generic classes should be ideally done?\r\n\r\nThat\u0027s a good question. Part of the implementation could be done in IL by using directly mul/add instructions... but there are IL instructions that are not generic-able for this (e.g ldc_r4/ldc_r8), so I\u0027m wondering how this would be handled here in practice (It is like we would like to have \"generic\" specialization here  :speak_no_evil: )\r\n\r\n\u003e Are you sure the in keyword is not useful when passing a Matrix as parameter? 16 double values may be a lot on some CPU don\u0027t you think?\r\n\r\nI concur. `in` works even on non readonly structs assuming that you don\u0027t use methods on them (which would be the case for a Matrix multiplication where you access only fields) but not sure you can use in with indirect generics (like in this [issue](https://github.com/dotnet/roslyn/issues/24601))\r\n\r\nOverall, not sure I like the idea of a generic version. As it would be mainly viable for float and double. As we have already `Vector3` for float,  It would feel awkward to have a new generic type that could also accept float and double... while having `Vector3d` would be straightforward enough.\r\n\r\nOn the subject, we could introduce instead float2/float3/float4/double2/double3/double3 as native types instead (so to coreclr, not corefx)... these types would not contain anything more than there fields (and the swizzles and the default operators)... all other operations would be stored in a different API.  I remember suggesting to the .NET team at the time Vector3 was designed to use types like `float3`/`float4` instead 😅  that would have made `double3` more balanced than `Vector3d` while we don\u0027t have a `Vector3f`... We did something like this for [Unity.Mathematics](https://github.com/Unity-Technologies/Unity.Mathematics/tree/master/src/Unity.Mathematics) and while there is a resistance for it (lowercase naming), if it was part of the core types, people would not complain about the lowercasing anymore...\r\n\r\nWe could argue that we could use the `Vector\u003cT\u003e` in some generic code, sure, it would be nice, but as we can\u0027t do anything about the T in our own code (due to the non existence of numeric constraints), I\u0027m failing to see the value of a generic version...\r\n\r\nSide question for codegen for SSE4 likely to be convoluted as there are no 4xdouble hardware registers (compare to AVX)\r\n\r\n\r\n",
                                           "updatedAt":  "2018-05-24T05:51:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTYwMDk1NA==",
                                           "createdAt":  "2018-05-24T06:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Introducing native types would be a great thing imho, but I fear that we double the total count. But having float4, double4, (u)int4, (u)long4 among others would be very easy for us to build dedicated operations in different API because integer based types won\u0027t have the same API surface than floating ones I think.\r\n\r\nMy own (I say it, it\u0027s subjectif) reference point is comparing what we want to the OpenGL Mathematics library, I don\u0027t care about the highp/mediump/lowp precision but I do like the fact that we have a very broad set of types that I can have confidence into how they will be compiled to asm down the road. It\u0027s not important if some operations are missing they will be added and compiled into very efficient code.\r\n\r\nI think @xoofx and I may be a little biased as we\u0027re seeing this from the prism of 3D programming but things like swizzles would be huge!\r\n\r\nDown the road I think what we need is (basic or not) data types that will have a very good IL/ASM generation otherwise people will keep tweaking things to get some extra juice and I believe that is the number 1 thing to address right here. The API surface can be (should be?) a separate concern as it\u0027s hard to please everyone on this one without implementing a lot of APIs.\r\n\r\nMathematics will be more and more present in the future and taking advantage of a broad set of types and APIs, high optimized, will matter a lot.",
                                           "updatedAt":  "2018-05-24T06:17:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTExMzM3NQ==",
                                           "createdAt":  "2018-09-27T14:27:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfiA2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mehmetakbulut",
                                                                               "createdAt":  "2018-11-27T20:33:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2018-09-27T14:27:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTExODAyMQ==",
                                           "createdAt":  "2018-09-27T14:39:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This has been pushed back the past couple of review sessions as we want to spend some more in-depth time reviewing it (due to its size).\r\n\r\nCC. @terrajobst ",
                                           "updatedAt":  "2018-09-27T14:39:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTExODU2NQ==",
                                           "createdAt":  "2018-09-27T14:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Ah okay. As long as it\u0027s happening soon :) Do you reckon this will release alongside .NET Core 3?\r\n\r\n**EDIT**: I know it\u0027s not part of that milestone, but can we expect it _around_ that date?",
                                           "updatedAt":  "2018-09-27T14:43:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTEyMDQ0NQ==",
                                           "createdAt":  "2018-09-27T14:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAlYWgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Perksey",
                                                                               "createdAt":  "2018-09-27T14:51:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mehmetakbulut",
                                                                               "createdAt":  "2018-11-27T20:35:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "devvoid",
                                                                               "createdAt":  "2019-03-20T20:36:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Once reviewed, and if approved, I would guess it will be in the next release for the given branch following its implementation being merged (if it is merged to master, and master is still targeting 3.0, it should make the 3.0 release).",
                                           "updatedAt":  "2018-09-27T14:45:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NTc4NzE3OA==",
                                           "createdAt":  "2019-04-23T12:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAujXrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sorrien",
                                                                               "createdAt":  "2019-04-23T13:26:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "harryisgamer",
                                                                               "createdAt":  "2019-05-24T05:26:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Perksey",
                                                                               "createdAt":  "2019-06-01T19:36:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vassalware",
                                                                               "createdAt":  "2019-06-01T19:44:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2019-06-11T10:37:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "modios",
                                                                               "createdAt":  "2019-07-12T11:07:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamVanheer",
                                                                               "createdAt":  "2019-07-31T12:08:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grepsy",
                                                                               "createdAt":  "2019-08-15T07:07:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "varon",
                                           "body":  "The OpenTK team is still hugely interested in this. Would be an enormous boon for our performance!",
                                           "updatedAt":  "2019-04-23T12:45:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODM1NDA1NQ==",
                                           "createdAt":  "2019-06-03T17:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCFUmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sorrien",
                                                                               "createdAt":  "2019-06-05T17:54:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Sorrien",
                                                                               "createdAt":  "2019-06-05T17:54:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spixy",
                                                                               "createdAt":  "2019-06-05T19:26:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2019-06-11T10:37:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "modios",
                                                                               "createdAt":  "2019-07-12T11:07:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamVanheer",
                                                                               "createdAt":  "2019-07-31T12:08:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Perksey",
                                                                               "createdAt":  "2019-08-14T16:16:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Perksey",
                                                                               "createdAt":  "2019-08-14T16:17:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SparkieLabs",
                                                                               "createdAt":  "2019-08-14T17:48:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Grepsy",
                                                                               "createdAt":  "2019-08-15T07:07:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lamont-granquist",
                                                                               "createdAt":  "2020-02-10T23:48:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "naymore",
                                                                               "createdAt":  "2020-03-05T08:08:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HurricanKai",
                                                                               "createdAt":  "2020-04-23T22:08:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks for the feedback @varon. I definitely want to see this get done, we just didn\u0027t have enough resources to do it for 3.0.\r\n\r\nOnce we start reviewing issues for .NET 5, I\u0027ll be sure to try and push this through API review again (we previously determined it requires a dedicated review session) and then, once approved, work can begin on the API.",
                                           "updatedAt":  "2019-06-03T17:37:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTMxNTExMg==",
                                           "createdAt":  "2019-08-14T16:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDdoYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SparkieLabs",
                                                                               "createdAt":  "2019-08-14T17:50:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QuantumDeveloper",
                                                                               "createdAt":  "2019-08-22T15:55:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lamont-granquist",
                                                                               "createdAt":  "2020-02-10T23:48:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2020-03-07T11:29:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2020-03-14T21:42:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HurricanKai",
                                                                               "createdAt":  "2020-04-23T22:09:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "veggielane",
                                                                               "createdAt":  "2020-05-07T10:41:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "Perksey",
                                           "body":  "It\u0027s good to see that this has been added to the .NET 5 milestone :)",
                                           "updatedAt":  "2019-08-14T16:17:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDIwOTA3Ng==",
                                           "createdAt":  "2020-03-03T22:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Removing untriaged label as it is labeled as \"api-ready-for-review\"\r\ncc: area owners:   @tannergooding @pgovind",
                                           "updatedAt":  "2020-03-03T22:42:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQzOTU2MQ==",
                                           "createdAt":  "2020-05-07T19:02:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "I have added an additional proposal at #35980 which continues to expand the System.Numerics APIs with other types that add other missing features and types that other maths libraries have. This proposal is based off of this one.",
                                           "updatedAt":  "2020-05-07T19:02:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzYzMDYzNg==",
                                           "createdAt":  "2020-05-12T22:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWu_6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ryder25",
                                                                               "createdAt":  "2020-05-12T23:53:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HurricanKai",
                                                                               "createdAt":  "2020-05-13T19:38:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thargy",
                                                                               "createdAt":  "2020-05-13T20:20:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "miyu",
                                                                               "createdAt":  "2020-05-18T08:14:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lamont-granquist",
                                                                               "createdAt":  "2020-05-24T16:23:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-idigo",
                                                                               "createdAt":  "2020-11-13T16:39:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "prollin",
                                           "body":  "Stumbled upon this while looking for a Vector3 for other types (int, double)\r\n\r\nIs there any traction with introducing int2/int3/int4/float2/float3/float4/double2/double3/double4 as builtin types as mentioned by @xoofx above? Since there is usually a corresponding SIMD type, it would make a lot of sense to treat them as builtin types. It would also greatly simplify the .NET API surface for math stuff.\r\n\r\nI am curious what would be the process for such proposal.\r\n\r\n",
                                           "updatedAt":  "2020-05-12T22:23:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MDkwNjQ1Ng==",
                                           "createdAt":  "2020-06-08T21:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHHygg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mbreckon",
                                                                               "createdAt":  "2020-06-10T14:51:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SparkieLabs",
                                                                               "createdAt":  "2020-06-11T15:50:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "In preparation for the API review this coming Thursday (11th of June), I simplified the proposal into each individual type being proposed (rather than mirroring the existing file structure).\r\n\r\nThe proposal is ultimately still the same, but it adds a couple of missing APIs (namely around `Span\u003cT\u003e` and `ReadOnlySpan\u003cT\u003e`) and calls out some notes.\r\n\r\nFor example, the existing types expose the fields publicly which goes against the normal .NET Framework Design Guidelines.\r\nExposing these as properties better fits the general guidelines and allows later tweaks to the layout (such as for `Plane` or `Quaternion`) if that is beneficial.\r\nThe remaining question would be if this should be fully readonly and have a `wither` or if it should be the only mutable method and have a `setter`\r\n\r\nAdditionally there are cases like `Length()` which are currently methods but which may be better suited as properties.\r\n\r\n### Vector2\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Vector2\u003cT\u003e : IEquatable\u003cVector2\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector2 WithX(T value), or be a public field like Vector2\r\n    public T Y { get; }     // Should this have a setter, a Vector2 WithY(T value), or be a public field like Vector2\r\n\r\n    // Constructors\r\n\r\n    public Vector2(T value);\r\n    public Vector2(T x, T y);\r\n\r\n    public Vector2(T[] value);              // Doesn\u0027t exist for Vector2\r\n    public Vector2(T[] value, int offset);  // Doesn\u0027t exist for Vector2\r\n    public Vector2(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector2\r\n\r\n    // Static Properties\r\n\r\n    public static Vector2\u003cT\u003e One { get; }\r\n    public static Vector2\u003cT\u003e UnitX { get; }\r\n    public static Vector2\u003cT\u003e UnitY { get; }\r\n    public static Vector2\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static bool operator !=(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator +(Vector2\u003cT\u003e value);  // Doesn\u0027t exist for Vector2\r\n    public static Vector2\u003cT\u003e operator -(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e operator +(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e operator -(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e operator /(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(Vector2\u003cT\u003e left, T right);\r\n    public static Vector2\u003cT\u003e operator /(Vector2\u003cT\u003e left, T right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(T left, Vector2\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector2\u003cT\u003e     Plus(Vector2\u003cT\u003e value);    // Doesn\u0027t exist for Vector2\r\n    public static Vector2\u003cT\u003e   Negate(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e      Add(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e Subtract(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e   Divide(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, T right);\r\n    public static Vector2\u003cT\u003e   Divide(Vector2\u003cT\u003e left, T right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(T left, Vector2\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector2\u003cT\u003e Abs(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Clamp(Vector2\u003cT\u003e value, Vector2\u003cT\u003e min, Vector2\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static T Dot(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Lerp(Vector2\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector2\u003cT\u003e Min(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e Max(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Normalize(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Reflect(Vector2\u003cT\u003e incident, Vector2\u003cT\u003e normal);\r\n\r\n    public static Vector2\u003cT\u003e SquareRoot(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix3x2\u003cT\u003e  matrix);\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e  matrix);\r\n\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Quaternion\u003cT\u003e rotation); // Rotate is a better name?\r\n\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix3x2\u003cT\u003e matrix);\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector2\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector2\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Vector3\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Vector3\u003cT\u003e : IEquatable\u003cVector3\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector3 WithX(T value), or be a public field like Vector3\r\n    public T Y { get; }     // Should this have a setter, a Vector3 WithY(T value), or be a public field like Vector3\r\n    public T Z { get; }     // Should this have a setter, a Vector3 WithZ(T value), or be a public field like Vector3\r\n\r\n    // Constructors\r\n\r\n    public Vector3(T value);\r\n    public Vector3(T x, T y, T z);\r\n    public Vector3(Vector2\u003cT\u003e value, T z);\r\n\r\n    public Vector3(T[] value);              // Doesn\u0027t exist for Vector3\r\n    public Vector3(T[] value, int offset);  // Doesn\u0027t exist for Vector3\r\n    public Vector3(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector3\r\n\r\n    // Static Properties\r\n\r\n    public static Vector3\u003cT\u003e One { get; }\r\n    public static Vector3\u003cT\u003e UnitX { get; }\r\n    public static Vector3\u003cT\u003e UnitY { get; }\r\n    public static Vector3\u003cT\u003e UnitZ { get; }\r\n    public static Vector3\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static bool operator !=(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e value);  // Doesn\u0027t exist for Vector3\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, T right);\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, T right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(T left, Vector3\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector3\u003cT\u003e     Plus(Vector3\u003cT\u003e value);    // Doesn\u0027t exist for Vector3\r\n    public static Vector3\u003cT\u003e   Negate(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e      Add(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e Subtract(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e   Divide(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, T right);\r\n    public static Vector3\u003cT\u003e   Divide(Vector3\u003cT\u003e left, T right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(T left, Vector3\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector3\u003cT\u003e Abs(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Clamp(Vector3\u003cT\u003e value, Vector3\u003cT\u003e min, Vector3\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3 Cross(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T         Dot(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Lerp(Vector3\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector3\u003cT\u003e Min(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e Max(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Normalize(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Reflect(Vector3\u003cT\u003e incident, Vector3\u003cT\u003e normal);\r\n\r\n    public static Vector3\u003cT\u003e SquareRoot(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Quaternion\u003cT\u003e rotation);    // Rotate is a better name?\r\n\r\n    public static Vector3\u003cT\u003e TransformNormal(Vector3\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector3\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector3\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Vector4\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Vector4\u003cT\u003e : IEquatable\u003cVector4\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector4 WithX(T value), or be a public field like Vector4\r\n    public T Y { get; }     // Should this have a setter, a Vector4 WithY(T value), or be a public field like Vector4\r\n    public T Z { get; }     // Should this have a setter, a Vector4 WithZ(T value), or be a public field like Vector4\r\n    public T W { get; }     // Should this have a setter, a Vector4 WithW(T value), or be a public field like Vector4\r\n\r\n    // Constructors\r\n\r\n    public Vector4(T value);\r\n    public Vector4(T x, T y, T z, T w);\r\n    public Vector4(Vector2\u003cT\u003e value, T z, T, w);\r\n    public Vector4(Vector3\u003cT\u003e value, T, w);\r\n\r\n    public Vector4(T[] value);              // Doesn\u0027t exist for Vector4\r\n    public Vector4(T[] value, int offset);  // Doesn\u0027t exist for Vector4\r\n    public Vector4(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector4\r\n\r\n    // Static Properties\r\n\r\n    public static Vector4\u003cT\u003e One { get; }\r\n    public static Vector4\u003cT\u003e UnitX { get; }\r\n    public static Vector4\u003cT\u003e UnitY { get; }\r\n    public static Vector4\u003cT\u003e UnitZ { get; }\r\n    public static Vector4\u003cT\u003e UnitW { get; }\r\n    public static Vector4\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static bool operator !=(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e value);  // Doesn\u0027t exist for Vector4\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, T right);\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, T right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(T left, Vector4\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector4\u003cT\u003e     Plus(Vector4\u003cT\u003e value);    // Doesn\u0027t exist for Vector4\r\n    public static Vector4\u003cT\u003e   Negate(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e      Add(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e Subtract(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e   Divide(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, T right);\r\n    public static Vector4\u003cT\u003e   Divide(Vector4\u003cT\u003e left, T right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(T left, Vector4\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector4\u003cT\u003e Abs(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e Clamp(Vector4\u003cT\u003e value, Vector4\u003cT\u003e min, Vector4\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static T Dot(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Lerp(Vector4\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector4\u003cT\u003e Min(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e Max(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Normalize(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e SquareRoot(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e position, Quaternion\u003cT\u003e rotation); // Rotate is a better name?\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector4\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector4\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Plane\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Plane\u003cT\u003e : IEquatable\u003cPlane\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T          Distance { get; }     // Should this have a setter, a T          WithDistance(T          value), or be a public field like Plan\r\n    public Vector3\u003cT\u003e   Normal { get; }     // Should this have a setter, a Vector3\u003cT\u003e   WithNormal(Vector3\u003cT\u003e value), or be a public field like Plan\r\n\r\n    // Constructors\r\n\r\n    public Plane(T x, T y, T z, T distance);\r\n    public Plane(Vector3\u003cT\u003e normal, T distance);\r\n    public Plane(Vector4\u003cT\u003e value);\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Plane\u003cT\u003e left, Plane\u003cT\u003e right);\r\n    public static bool operator !=(Plane\u003cT\u003e left, Plane\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Plane\u003cT\u003e CreateFromVertices(Vector3\u003cT\u003e point1, Vector3\u003cT\u003e point2, Vector3\u003cT\u003e point3); // CreateFromPoints is a better name?\r\n\r\n    public static T           Dot(Plane\u003cT\u003e left, Vector4\u003cT\u003e right);     // DotProduct is a better name?\r\n    public static T DotCoordinate(Plane\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T     DotNormal(Plane\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Plane\u003cT\u003e Normalize(Plane\u003cT\u003e value);\r\n\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Matrix4x4\u003cT\u003e  matrix);\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Quaternion\u003cT\u003e matrix); // Rotate is a better name?\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Plane\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Quaternion\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Quaternion\u003cT\u003e : IEquatable\u003cQuaternion\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithX(T value), or be a public field like Quaternion\r\n    public T Y { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithY(T value), or be a public field like Quaternion\r\n    public T Z { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithZ(T value), or be a public field like Quaternion\r\n    public T W { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithW(T value), or be a public field like Quaternion\r\n\r\n    // Constructors\r\n\r\n    public Quaternion(T x, T y, T z, T w);\r\n    public Quaternion(Vector3\u003cT\u003e vector, T rotation);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static bool operator !=(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e value);    // Doesn\u0027t exist for Quaternion\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static Quaternion\u003cT\u003e operator /(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Quaternion\u003cT\u003e   Plus(Quaternion\u003cT\u003e value);    // Doesn\u0027t exist for Quaternion\r\n    public static Quaternion\u003cT\u003e Negate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e      Add(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e Subtract(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e   Divide(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Quaternion\u003cT\u003e Concatenate(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e   Conjugate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e      CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle); // CreateFromRotationAxis is abetter name?\r\n    public static Quaternion\u003cT\u003e CreateFromRotationMatrix(Matrix4x4 matrix);\r\n    public static Quaternion\u003cT\u003e   CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public T Dot(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);  // DotProduct is a better name?\r\n\r\n    public Quaternion\u003cT\u003e Inverse(Quaternion\u003cT\u003e value);\r\n\r\n    public Quaternion\u003cT\u003e  Lerp(Quaternion\u003cT\u003e min, Quaternion\u003cT\u003e max, T amount);\r\n    public Quaternion\u003cT\u003e Slerp(Quaternion\u003cT\u003e min, Quaternion\u003cT\u003e max, T amount);\r\n\r\n    public Quaternion\u003cT\u003e Normalize(Quaternion\u003cT\u003e value);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Quaternion\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Matrix3x2\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Matrix3x2\u003cT\u003e : IEquatable\u003cMatrix3x2\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T M11 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM11(T value), or be a public field like Matrix3x2\r\n    public T M12 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM12(T value), or be a public field like Matrix3x2\r\n\r\n    public T M21 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM21(T value), or be a public field like Matrix3x2\r\n    public T M22 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM22(T value), or be a public field like Matrix3x2\r\n\r\n    public T M31 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM31(T value), or be a public field like Matrix3x2\r\n    public T M32 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM32(T value), or be a public field like Matrix3x2\r\n\r\n    // Constructors\r\n\r\n    public Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; }  // Should this have a setter or a wither\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n    public static bool operator !=(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e value);  // Doesn\u0027t exist for Matrix3x2\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Matrix3x2\u003cT\u003e   Plus(Matrix3x2\u003cT\u003e value);    // Doesn\u0027t exist for Matrix3x2\r\n    public static Matrix3x2\u003cT\u003e Negate(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e      Add(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n    public static Matrix3x2\u003cT\u003e Subtract(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians);\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scaleX, T scaleY);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scaleX, T scaleY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scale);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY);\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(T positionX, T positionY);\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(Vector2\u003cT\u003e position);\r\n\r\n    public static bool Invert(Matrix3x2\u003cT\u003e matrix, out Matrix3x2\u003cT\u003e result); // TryInvert is a better name?\r\n\r\n    public static Matrix3x2\u003cT\u003e Lerp(Matrix3x2\u003cT\u003e min, Matrix3x2\u003cT\u003e max, T amount);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Matrix3x2\u003cT\u003e other);\r\n\r\n    public readonly T GetDeterminant(); // Better as a property?\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n\r\n### Matrix4x4\u003cT\u003e\r\n\r\n```csharp\r\npublic struct Matrix4x4\u003cT\u003e : IEquatable\u003cMatrix4x4\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T M11 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM11(T value), or be a public field like Matrix4x4\r\n    public T M12 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM12(T value), or be a public field like Matrix4x4\r\n    public T M13 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM13(T value), or be a public field like Matrix4x4\r\n    public T M14 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM14(T value), or be a public field like Matrix4x4\r\n\r\n    public T M21 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM21(T value), or be a public field like Matrix4x4\r\n    public T M22 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM22(T value), or be a public field like Matrix4x4\r\n    public T M23 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM23(T value), or be a public field like Matrix4x4\r\n    public T M24 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM24(T value), or be a public field like Matrix4x4\r\n\r\n    public T M31 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM31(T value), or be a public field like Matrix4x4\r\n    public T M32 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM32(T value), or be a public field like Matrix4x4\r\n    public T M33 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM33(T value), or be a public field like Matrix4x4\r\n    public T M34 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM34(T value), or be a public field like Matrix4x4\r\n\r\n    public T M41 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM41(T value), or be a public field like Matrix4x4\r\n    public T M42 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM42(T value), or be a public field like Matrix4x4\r\n    public T M43 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM43(T value), or be a public field like Matrix4x4\r\n    public T M44 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM44(T value), or be a public field like Matrix4x4\r\n\r\n    // Constructors\r\n\r\n    public Matrix4x4(Matrix3x2 value);\r\n    public Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; }  // Should this have a setter or a wither\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n    public static bool operator !=(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e value);  // Doesn\u0027t exist for Matrix4x4\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Matrix4x4\u003cT\u003e   Plus(Matrix4x4\u003cT\u003e value);    // Doesn\u0027t exist for Matrix4x4\r\n    public static Matrix4x4\u003cT\u003e Negate(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e      Add(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n    public static Matrix4x4\u003cT\u003e Subtract(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Matrix4x4\u003cT\u003e            CreateBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraUpVector, Vector3\u003cT\u003e cameraForwardVector);\r\n    public static Matrix4x4\u003cT\u003e CreateConstrainedBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e rotationAxis,   Vector3\u003cT\u003e cameraForwardVector, Vector3\u003cT\u003e objectForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e    CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n    public static Matrix4x4\u003cT\u003e   CreateFromQuaternion(Quaternion quaternion);\r\n    public static Matrix4x4\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateLookAt(Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraTarget, Vector3\u003cT\u003e cameraUpVector); // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e          CreateOrthographic(T width, T height, T nearPlane, T farPlane);                 // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographicOffCenter(T left, T right, T bottom, T top, T nearPlane, T farPlane);  // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e            CreatePerspective(T width, T height, T nearPlaneDistance, T farPlaneDistance);                // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveFieldOfView(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance);     // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e   CreatePerspectiveOffCenter(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance); // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateReflection(Plane\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scaleX, T scaleY, T scaleZ);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scaleX, T scaleY, T scaleZ, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scale);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateShadow(Vector3\u003cT\u003e lightDirection, Plane\u003cT\u003e plane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(T positionX, T positionY, T positionZ);\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(Vector3\u003cT\u003e position);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateWorld(Vector3\u003cT\u003e position, Vector3\u003cT\u003e forward, Vector3\u003cT\u003e up);\r\n\r\n    public static bool Decompose(Matrix4x4\u003cT\u003e matrix, out Vector3\u003cT\u003e scale, out Quaternion rotation, out Vector3\u003cT\u003e translation); // TryDecompose is a better name?\r\n\r\n    public static bool Invert(Matrix4x4\u003cT\u003e matrix, out Matrix4x4\u003cT\u003e result); // TryInvert is a better name? Better to out determinant and return result?\r\n\r\n    public static Matrix4x4\u003cT\u003e Lerp(Matrix4x4\u003cT\u003e min, Matrix4x4\u003cT\u003e max, T amount);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transform(Matrix4x4\u003cT\u003e value, Quaternion\u003cT\u003e rotation); // Rotate is a better name\r\n\r\n    public static Matrix4x4\u003cT\u003e Transpose(Matrix4x4\u003cT\u003e value);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Matrix4x4\u003cT\u003e other);\r\n\r\n    public readonly T GetDeterminant(); // Better as a property?\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-06-08T21:51:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTA0MDc1NA==",
                                           "createdAt":  "2020-06-09T05:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nxrighthere",
                                           "body":  "@tannergooding I probably missed this, do we support the marshaling of blittable generic types today? So this will work just fine in case of interop as the current numerics?\r\n",
                                           "updatedAt":  "2020-06-09T05:38:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTM0NTE2MA==",
                                           "createdAt":  "2020-06-09T14:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBG1kzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2020-06-09T15:05:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes, support for passing blittable generics was added in .NET Core 3.0.",
                                           "updatedAt":  "2020-06-09T14:46:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjg0NzU1Nw==",
                                           "createdAt":  "2020-06-11T18:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvdU0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SparkieLabs",
                                                                               "createdAt":  "2020-06-11T18:23:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-06-11T19:15:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xxdeveloper",
                                                                               "createdAt":  "2021-10-03T21:34:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoffmann-stefan",
                                                                               "createdAt":  "2022-01-04T14:28:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "uvsxx",
                                                                               "createdAt":  "2022-11-11T18:13:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "* `Vector2\u003cT\u003e`\r\n    - We should keep the API in sync with `Vector2`, so all APIs we added to `Vector2\u003cT\u003e` we should also add to `Vector2`\r\n    - Adding identity operators makes sense from a math standpoint, but we should make sure we don\u0027t make it slower\r\n    - We shouldn\u0027t \"fix\" names like `Transform` to `Rotate` because it makes it harder to go between `Vector2` and `Vector2\u003cT\u003e`\r\n    - We should move the static methods to `Vector2` to avoid having to type the type\r\n    - We considered making the methods non-generic by exploding them into the concrete types but this would mean follks can\u0027t write generic code that works with either float or double.\r\n    - If we keep the properties as get-only we should mark the type as read-only\r\n* `Vector3\u003cT\u003e`, `Vector4\u003cT\u003e`\r\n    - Same comments as `Vector2\u003cT\u003e`\r\n* `Plane\u003cT\u003e`\r\n    - Rename `D` to `Distance` seems fine\r\n* `Matrix3x2\u003cT\u003e`\r\n    - Consider exposing the same ctors as we have on `Vector2\u003cT\u003e`\r\n* `Matrix4x4\u003cT\u003e`\r\n    - Consider exposing the same ctors as we have on `Vector2\u003cT\u003e`\r\n    - Consider exposing a property for vectors\r\n\r\n```csharp\r\npublic struct Vector2\u003cT\u003e : IEquatable\u003cVector2\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector2 WithX(T value), or be a public field like Vector2\r\n    public T Y { get; }     // Should this have a setter, a Vector2 WithY(T value), or be a public field like Vector2\r\n\r\n    // Constructors\r\n\r\n    public Vector2(T value);\r\n    public Vector2(T x, T y);\r\n\r\n    public Vector2(T[] value);              // Doesn\u0027t exist for Vector2\r\n    public Vector2(T[] value, int offset);  // Doesn\u0027t exist for Vector2\r\n    public Vector2(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector2\r\n\r\n    // Static Properties\r\n\r\n    public static Vector2\u003cT\u003e One { get; }\r\n    public static Vector2\u003cT\u003e UnitX { get; }\r\n    public static Vector2\u003cT\u003e UnitY { get; }\r\n    public static Vector2\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static bool operator !=(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator +(Vector2\u003cT\u003e value);  // Doesn\u0027t exist for Vector2\r\n    public static Vector2\u003cT\u003e operator -(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e operator +(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e operator -(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e operator /(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(Vector2\u003cT\u003e left, T right);\r\n    public static Vector2\u003cT\u003e operator /(Vector2\u003cT\u003e left, T right);\r\n\r\n    public static Vector2\u003cT\u003e operator *(T left, Vector2\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector2\u003cT\u003e     Plus(Vector2\u003cT\u003e value);    // Doesn\u0027t exist for Vector2\r\n    public static Vector2\u003cT\u003e   Negate(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e      Add(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e Subtract(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e   Divide(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(Vector2\u003cT\u003e left, T right);\r\n    public static Vector2\u003cT\u003e   Divide(Vector2\u003cT\u003e left, T right);\r\n\r\n    public static Vector2\u003cT\u003e Multiply(T left, Vector2\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector2\u003cT\u003e Abs(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Clamp(Vector2\u003cT\u003e value, Vector2\u003cT\u003e min, Vector2\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static T Dot(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Lerp(Vector2\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector2\u003cT\u003e Min(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n    public static Vector2\u003cT\u003e Max(Vector2\u003cT\u003e left, Vector2\u003cT\u003e right);\r\n\r\n    public static Vector2\u003cT\u003e Normalize(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Reflect(Vector2\u003cT\u003e incident, Vector2\u003cT\u003e normal);\r\n\r\n    public static Vector2\u003cT\u003e SquareRoot(Vector2\u003cT\u003e value);\r\n\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix3x2\u003cT\u003e  matrix);\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Matrix4x4\u003cT\u003e  matrix);\r\n\r\n    public static Vector2\u003cT\u003e Transform(Vector2\u003cT\u003e position, Quaternion\u003cT\u003e rotation); // Rotate is a better name?\r\n\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix3x2\u003cT\u003e matrix);\r\n    public static Vector2\u003cT\u003e TransformNormal(Vector2\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector2\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector2\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Vector3\u003cT\u003e : IEquatable\u003cVector3\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector3 WithX(T value), or be a public field like Vector3\r\n    public T Y { get; }     // Should this have a setter, a Vector3 WithY(T value), or be a public field like Vector3\r\n    public T Z { get; }     // Should this have a setter, a Vector3 WithZ(T value), or be a public field like Vector3\r\n\r\n    // Constructors\r\n\r\n    public Vector3(T value);\r\n    public Vector3(T x, T y, T z);\r\n    public Vector3(Vector2\u003cT\u003e value, T z);\r\n\r\n    public Vector3(T[] value);              // Doesn\u0027t exist for Vector3\r\n    public Vector3(T[] value, int offset);  // Doesn\u0027t exist for Vector3\r\n    public Vector3(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector3\r\n\r\n    // Static Properties\r\n\r\n    public static Vector3\u003cT\u003e One { get; }\r\n    public static Vector3\u003cT\u003e UnitX { get; }\r\n    public static Vector3\u003cT\u003e UnitY { get; }\r\n    public static Vector3\u003cT\u003e UnitZ { get; }\r\n    public static Vector3\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static bool operator !=(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e value);  // Doesn\u0027t exist for Vector3\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e operator +(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e operator -(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(Vector3\u003cT\u003e left, T right);\r\n    public static Vector3\u003cT\u003e operator /(Vector3\u003cT\u003e left, T right);\r\n\r\n    public static Vector3\u003cT\u003e operator *(T left, Vector3\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector3\u003cT\u003e     Plus(Vector3\u003cT\u003e value);    // Doesn\u0027t exist for Vector3\r\n    public static Vector3\u003cT\u003e   Negate(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e      Add(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e Subtract(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e   Divide(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(Vector3\u003cT\u003e left, T right);\r\n    public static Vector3\u003cT\u003e   Divide(Vector3\u003cT\u003e left, T right);\r\n\r\n    public static Vector3\u003cT\u003e Multiply(T left, Vector3\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector3\u003cT\u003e Abs(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Clamp(Vector3\u003cT\u003e value, Vector3\u003cT\u003e min, Vector3\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3 Cross(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T         Dot(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Lerp(Vector3\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector3\u003cT\u003e Min(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static Vector3\u003cT\u003e Max(Vector3\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Vector3\u003cT\u003e Normalize(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Reflect(Vector3\u003cT\u003e incident, Vector3\u003cT\u003e normal);\r\n\r\n    public static Vector3\u003cT\u003e SquareRoot(Vector3\u003cT\u003e value);\r\n\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Vector3\u003cT\u003e Transform(Vector3\u003cT\u003e position, Quaternion\u003cT\u003e rotation);    // Rotate is a better name?\r\n\r\n    public static Vector3\u003cT\u003e TransformNormal(Vector3\u003cT\u003e normal, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector3\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector3\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Vector4\u003cT\u003e : IEquatable\u003cVector4\u003cT\u003e\u003e, IFormattable\r\n    where T : struct\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Vector4 WithX(T value), or be a public field like Vector4\r\n    public T Y { get; }     // Should this have a setter, a Vector4 WithY(T value), or be a public field like Vector4\r\n    public T Z { get; }     // Should this have a setter, a Vector4 WithZ(T value), or be a public field like Vector4\r\n    public T W { get; }     // Should this have a setter, a Vector4 WithW(T value), or be a public field like Vector4\r\n\r\n    // Constructors\r\n\r\n    public Vector4(T value);\r\n    public Vector4(T x, T y, T z, T w);\r\n    public Vector4(Vector2\u003cT\u003e value, T z, T, w);\r\n    public Vector4(Vector3\u003cT\u003e value, T, w);\r\n\r\n    public Vector4(T[] value);              // Doesn\u0027t exist for Vector4\r\n    public Vector4(T[] value, int offset);  // Doesn\u0027t exist for Vector4\r\n    public Vector4(ReadOnlySpan\u003cT\u003e value);  // Doesn\u0027t exist for Vector4\r\n\r\n    // Static Properties\r\n\r\n    public static Vector4\u003cT\u003e One { get; }\r\n    public static Vector4\u003cT\u003e UnitX { get; }\r\n    public static Vector4\u003cT\u003e UnitY { get; }\r\n    public static Vector4\u003cT\u003e UnitZ { get; }\r\n    public static Vector4\u003cT\u003e UnitW { get; }\r\n    public static Vector4\u003cT\u003e Zero { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static bool operator !=(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e value);  // Doesn\u0027t exist for Vector4\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e operator +(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e operator -(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(Vector4\u003cT\u003e left, T right);\r\n    public static Vector4\u003cT\u003e operator /(Vector4\u003cT\u003e left, T right);\r\n\r\n    public static Vector4\u003cT\u003e operator *(T left, Vector4\u003cT\u003e right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Vector4\u003cT\u003e     Plus(Vector4\u003cT\u003e value);    // Doesn\u0027t exist for Vector4\r\n    public static Vector4\u003cT\u003e   Negate(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e      Add(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e Subtract(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e   Divide(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(Vector4\u003cT\u003e left, T right);\r\n    public static Vector4\u003cT\u003e   Divide(Vector4\u003cT\u003e left, T right);\r\n\r\n    public static Vector4\u003cT\u003e Multiply(T left, Vector4\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Vector4\u003cT\u003e Abs(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e Clamp(Vector4\u003cT\u003e value, Vector4\u003cT\u003e min, Vector4\u003cT\u003e max);\r\n\r\n    public static T        Distance(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static T DistanceSquared(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static T Dot(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Lerp(Vector4\u003cT\u003e min, Vector\u003cT\u003e max, T amount);\r\n\r\n    public static Vector4\u003cT\u003e Min(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n    public static Vector4\u003cT\u003e Max(Vector4\u003cT\u003e left, Vector4\u003cT\u003e right);\r\n\r\n    public static Vector4\u003cT\u003e Normalize(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e SquareRoot(Vector4\u003cT\u003e value);\r\n\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e position, Matrix4x4\u003cT\u003e matrix);\r\n\r\n    public static Vector4\u003cT\u003e Transform(Vector4\u003cT\u003e position, Quaternion\u003cT\u003e rotation); // Rotate is a better name?\r\n\r\n    // Methods\r\n\r\n    public readonly void CopyTo(T[] array);\r\n    public readonly void CopyTo(T[] array, int index);\r\n    public readonly void CopyTo(Span\u003cT\u003e destination);   // Doesn\u0027t exist for Vector4\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Vector4\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    public readonly string ToString(string format);\r\n    public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Plane\u003cT\u003e : IEquatable\u003cPlane\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T          Distance { get; }     // Should this have a setter, a T          WithDistance(T          value), or be a public field like Plan\r\n    public Vector3\u003cT\u003e   Normal { get; }     // Should this have a setter, a Vector3\u003cT\u003e   WithNormal(Vector3\u003cT\u003e value), or be a public field like Plan\r\n\r\n    // Constructors\r\n\r\n    public Plane(T x, T y, T z, T distance);\r\n    public Plane(Vector3\u003cT\u003e normal, T distance);\r\n    public Plane(Vector4\u003cT\u003e value);\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Plane\u003cT\u003e left, Plane\u003cT\u003e right);\r\n    public static bool operator !=(Plane\u003cT\u003e left, Plane\u003cT\u003e right);\r\n\r\n    // Static Methods\r\n\r\n    public static Plane\u003cT\u003e CreateFromVertices(Vector3\u003cT\u003e point1, Vector3\u003cT\u003e point2, Vector3\u003cT\u003e point3); // CreateFromPoints is a better name?\r\n\r\n    public static T           Dot(Plane\u003cT\u003e left, Vector4\u003cT\u003e right);     // DotProduct is a better name?\r\n    public static T DotCoordinate(Plane\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n    public static T     DotNormal(Plane\u003cT\u003e left, Vector3\u003cT\u003e right);\r\n\r\n    public static Plane\u003cT\u003e Normalize(Plane\u003cT\u003e value);\r\n\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Matrix4x4\u003cT\u003e  matrix);\r\n    public static Plane\u003cT\u003e Transform(Plane\u003cT\u003e plane, Quaternion\u003cT\u003e matrix); // Rotate is a better name?\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Plane\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Quaternion\u003cT\u003e : IEquatable\u003cQuaternion\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T X { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithX(T value), or be a public field like Quaternion\r\n    public T Y { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithY(T value), or be a public field like Quaternion\r\n    public T Z { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithZ(T value), or be a public field like Quaternion\r\n    public T W { get; }     // Should this have a setter, a Quaternion\u003cT\u003e WithW(T value), or be a public field like Quaternion\r\n\r\n    // Constructors\r\n\r\n    public Quaternion(T x, T y, T z, T w);\r\n    public Quaternion(Vector3\u003cT\u003e vector, T rotation);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static bool operator !=(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e value);    // Doesn\u0027t exist for Quaternion\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e operator +(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static Quaternion\u003cT\u003e operator -(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n    public static Quaternion\u003cT\u003e operator /(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);\r\n\r\n    public static Quaternion\u003cT\u003e operator *(Quaternion\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Quaternion\u003cT\u003e   Plus(Quaternion\u003cT\u003e value);    // Doesn\u0027t exist for Quaternion\r\n    public static Quaternion\u003cT\u003e Negate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e      Add(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e Subtract(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e   Divide(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n\r\n    public static Quaternion\u003cT\u003e Multiply(Quaternion\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Quaternion\u003cT\u003e Concatenate(Quaternion\u003cT\u003eleft, Quaternion\u003cT\u003eright);\r\n    public static Quaternion\u003cT\u003e   Conjugate(Quaternion\u003cT\u003e value);\r\n\r\n    public static Quaternion\u003cT\u003e      CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle); // CreateFromRotationAxis is abetter name?\r\n    public static Quaternion\u003cT\u003e CreateFromRotationMatrix(Matrix4x4 matrix);\r\n    public static Quaternion\u003cT\u003e   CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public T Dot(Quaternion\u003cT\u003e left, Quaternion\u003cT\u003e right);  // DotProduct is a better name?\r\n\r\n    public Quaternion\u003cT\u003e Inverse(Quaternion\u003cT\u003e value);\r\n\r\n    public Quaternion\u003cT\u003e  Lerp(Quaternion\u003cT\u003e min, Quaternion\u003cT\u003e max, T amount);\r\n    public Quaternion\u003cT\u003e Slerp(Quaternion\u003cT\u003e min, Quaternion\u003cT\u003e max, T amount);\r\n\r\n    public Quaternion\u003cT\u003e Normalize(Quaternion\u003cT\u003e value);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Quaternion\u003cT\u003e other);\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly T Length();         // Better as a property?\r\n    public readonly T LengthSquared();  // Better as a property?\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Matrix3x2\u003cT\u003e : IEquatable\u003cMatrix3x2\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T M11 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM11(T value), or be a public field like Matrix3x2\r\n    public T M12 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM12(T value), or be a public field like Matrix3x2\r\n\r\n    public T M21 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM21(T value), or be a public field like Matrix3x2\r\n    public T M22 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM22(T value), or be a public field like Matrix3x2\r\n\r\n    public T M31 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM31(T value), or be a public field like Matrix3x2\r\n    public T M32 { get; }   // Should this have a setter, a Matrix3x2\u003cT\u003e WithM32(T value), or be a public field like Matrix3x2\r\n\r\n    // Constructors\r\n\r\n    public Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; }  // Should this have a setter or a wither\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n    public static bool operator !=(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e value);  // Doesn\u0027t exist for Matrix3x2\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator +(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n    public static Matrix3x2\u003cT\u003e operator -(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e left, Matrix3x2\u003cT\u003e right);\r\n\r\n    public static Matrix3x2\u003cT\u003e operator *(Matrix3x2\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Matrix3x2\u003cT\u003e   Plus(Matrix3x2\u003cT\u003e value);    // Doesn\u0027t exist for Matrix3x2\r\n    public static Matrix3x2\u003cT\u003e Negate(Matrix3x2\u003cT\u003e value);\r\n\r\n    public static Matrix3x2\u003cT\u003e      Add(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n    public static Matrix3x2\u003cT\u003e Subtract(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003eleft, Matrix3x2\u003cT\u003eright);\r\n\r\n    public static Matrix3x2\u003cT\u003e Multiply(Matrix3x2\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians);\r\n    public static Matrix3x2\u003cT\u003e CreateRotation(T radians, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scaleX, T scaleY);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(T scaleX, T scaleY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scale);\r\n    public static Matrix3x2\u003cT\u003e CreateScale(Vector2\u003cT\u003e scale, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY);\r\n    public static Matrix3x2\u003cT\u003e CreateSkew(T radiansX, T radiansY, Vector2\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(T positionX, T positionY);\r\n    public static Matrix3x2\u003cT\u003e CreateTranslation(Vector2\u003cT\u003e position);\r\n\r\n    public static bool Invert(Matrix3x2\u003cT\u003e matrix, out Matrix3x2\u003cT\u003e result); // TryInvert is a better name?\r\n\r\n    public static Matrix3x2\u003cT\u003e Lerp(Matrix3x2\u003cT\u003e min, Matrix3x2\u003cT\u003e max, T amount);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Matrix3x2\u003cT\u003e other);\r\n\r\n    public readonly T GetDeterminant(); // Better as a property?\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\npublic struct Matrix4x4\u003cT\u003e : IEquatable\u003cMatrix4x4\u003cT\u003e\u003e //, IFormattable\r\n{\r\n    // Fields\r\n\r\n    public T M11 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM11(T value), or be a public field like Matrix4x4\r\n    public T M12 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM12(T value), or be a public field like Matrix4x4\r\n    public T M13 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM13(T value), or be a public field like Matrix4x4\r\n    public T M14 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM14(T value), or be a public field like Matrix4x4\r\n\r\n    public T M21 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM21(T value), or be a public field like Matrix4x4\r\n    public T M22 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM22(T value), or be a public field like Matrix4x4\r\n    public T M23 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM23(T value), or be a public field like Matrix4x4\r\n    public T M24 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM24(T value), or be a public field like Matrix4x4\r\n\r\n    public T M31 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM31(T value), or be a public field like Matrix4x4\r\n    public T M32 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM32(T value), or be a public field like Matrix4x4\r\n    public T M33 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM33(T value), or be a public field like Matrix4x4\r\n    public T M34 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM34(T value), or be a public field like Matrix4x4\r\n\r\n    public T M41 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM41(T value), or be a public field like Matrix4x4\r\n    public T M42 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM42(T value), or be a public field like Matrix4x4\r\n    public T M43 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM43(T value), or be a public field like Matrix4x4\r\n    public T M44 { get; }   // Should this have a setter, a Matrix4x4\u003cT\u003e WithM44(T value), or be a public field like Matrix4x4\r\n\r\n    // Constructors\r\n\r\n    public Matrix4x4(Matrix3x2 value);\r\n    public Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44);\r\n\r\n    // Static Properties\r\n\r\n    public static Quaternion\u003cT\u003e Identity { get; }\r\n\r\n    // Properties\r\n\r\n    public bool IsIdentity { get; }\r\n\r\n    public Vector2\u003cT\u003e Translation { get; }  // Should this have a setter or a wither\r\n\r\n    // Operators\r\n\r\n    public static bool operator ==(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n    public static bool operator !=(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e value);  // Doesn\u0027t exist for Matrix4x4\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator +(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n    public static Matrix4x4\u003cT\u003e operator -(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e left, Matrix4x4\u003cT\u003e right);\r\n\r\n    public static Matrix4x4\u003cT\u003e operator *(Matrix4x4\u003cT\u003e left, T right);\r\n\r\n    // \"Friendly\" Operators\r\n\r\n    public static Matrix4x4\u003cT\u003e   Plus(Matrix4x4\u003cT\u003e value);    // Doesn\u0027t exist for Matrix4x4\r\n    public static Matrix4x4\u003cT\u003e Negate(Matrix4x4\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e      Add(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n    public static Matrix4x4\u003cT\u003e Subtract(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003eleft, Matrix4x4\u003cT\u003eright);\r\n\r\n    public static Matrix4x4\u003cT\u003e Multiply(Matrix4x4\u003cT\u003eleft, T right);\r\n\r\n    // Static Methods\r\n\r\n    public static Matrix4x4\u003cT\u003e            CreateBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraUpVector, Vector3\u003cT\u003e cameraForwardVector);\r\n    public static Matrix4x4\u003cT\u003e CreateConstrainedBillboard(Vector3\u003cT\u003e objectPosition, Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e rotationAxis,   Vector3\u003cT\u003e cameraForwardVector, Vector3\u003cT\u003e objectForwardVector);\r\n\r\n    public static Matrix4x4\u003cT\u003e    CreateFromAxisAngle(Vector3\u003cT\u003e axis, T angle);\r\n    public static Matrix4x4\u003cT\u003e   CreateFromQuaternion(Quaternion quaternion);\r\n    public static Matrix4x4\u003cT\u003e CreateFromYawPitchRoll(T yaw, T pitch, T roll);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateLookAt(Vector3\u003cT\u003e cameraPosition, Vector3\u003cT\u003e cameraTarget, Vector3\u003cT\u003e cameraUpVector); // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e          CreateOrthographic(T width, T height, T nearPlane, T farPlane);                 // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e CreateOrthographicOffCenter(T left, T right, T bottom, T top, T nearPlane, T farPlane);  // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e            CreatePerspective(T width, T height, T nearPlaneDistance, T farPlaneDistance);                // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e CreatePerspectiveFieldOfView(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance);     // Ideally has LH and RH\r\n    public static Matrix4x4\u003cT\u003e   CreatePerspectiveOffCenter(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance); // Ideally has LH and RH\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateReflection(Plane\u003cT\u003e value);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationX(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationY(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians);\r\n    public static Matrix4x4\u003cT\u003e CreateRotationZ(T radians, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scaleX, T scaleY, T scaleZ);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(T scaleX, T scaleY, T scaleZ, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scale);\r\n    public static Matrix4x4\u003cT\u003e CreateScale(Vector3\u003cT\u003e scale, Vector3\u003cT\u003e centerPoint);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateShadow(Vector3\u003cT\u003e lightDirection, Plane\u003cT\u003e plane);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(T positionX, T positionY, T positionZ);\r\n    public static Matrix4x4\u003cT\u003e CreateTranslation(Vector3\u003cT\u003e position);\r\n\r\n    public static Matrix4x4\u003cT\u003e CreateWorld(Vector3\u003cT\u003e position, Vector3\u003cT\u003e forward, Vector3\u003cT\u003e up);\r\n\r\n    public static bool Decompose(Matrix4x4\u003cT\u003e matrix, out Vector3\u003cT\u003e scale, out Quaternion rotation, out Vector3\u003cT\u003e translation); // TryDecompose is a better name?\r\n\r\n    public static bool Invert(Matrix4x4\u003cT\u003e matrix, out Matrix4x4\u003cT\u003e result); // TryInvert is a better name? Better to out determinant and return result?\r\n\r\n    public static Matrix4x4\u003cT\u003e Lerp(Matrix4x4\u003cT\u003e min, Matrix4x4\u003cT\u003e max, T amount);\r\n\r\n    public static Matrix4x4\u003cT\u003e Transform(Matrix4x4\u003cT\u003e value, Quaternion\u003cT\u003e rotation); // Rotate is a better name\r\n\r\n    public static Matrix4x4\u003cT\u003e Transpose(Matrix4x4\u003cT\u003e value);\r\n\r\n    // Methods\r\n\r\n    public override readonly bool Equals(object? obj);\r\n    public readonly bool Equals(Matrix4x4\u003cT\u003e other);\r\n\r\n    public readonly T GetDeterminant(); // Better as a property?\r\n\r\n    public override readonly int GetHashCode();\r\n\r\n    public readonly override string ToString();\r\n    // public readonly string ToString(string format);\r\n    // public readonly string ToString(string format, IFormatProvider formatProvider);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-06-11T18:10:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjg5MTczNQ==",
                                           "createdAt":  "2020-06-11T19:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "john-h-k",
                                           "body":  "Can I take `Vector2\u003cT\u003e` for the software impls?",
                                           "updatedAt":  "2020-06-11T19:45:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjg5NDQ3MA==",
                                           "createdAt":  "2020-06-11T19:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Approved API is here: https://github.com/dotnet/runtime/issues/24168#issuecomment-642847557\r\n\r\nTypes are the following and should support `float` and `double`:\r\n- [ ] Vector2, Assigned to @john-h-k \r\n- [ ] Vector3, Assigned to @HurricanKai\r\n- [ ] Vector4, Assigned to @Perksey\r\n- [ ] Plane, Up for Grabs\r\n- [ ] Quaternion, Up for Grabs\r\n- [ ] Matrix3x2, Up for Grabs\r\n- [ ] Matrix4x4, Up for Grabs\r\n\r\nThe initial PR should just focus on the software implementation. Hardware acceleration is being looked at and I will update with more details.",
                                           "updatedAt":  "2020-06-11T21:32:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjkzNjYwMw==",
                                           "createdAt":  "2020-06-11T21:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HurricanKai",
                                           "body":  "I\u0027d like to take the software impl of Vector3\u003cT\u003e",
                                           "updatedAt":  "2020-06-11T21:28:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjkzODI3Ng==",
                                           "createdAt":  "2020-06-11T21:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "I\u0027ll have a software impl of Vector4 with a side of fries please ([see also](https://discordapp.com/channels/143867839282020352/312132327348240384/720752141110870058))",
                                           "updatedAt":  "2020-06-11T21:32:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjkzOTg5NQ==",
                                           "createdAt":  "2020-06-11T21:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks @HurricanKai and @Perksey.\r\n\r\nI\u0027ve marked those bits as assigned. As per the discussion on Discord, given the work size and that we don\u0027t want to get only a partial implementation in, the work will go into the `generic-vector` branch of my fork: https://github.com/tannergooding/runtime/tree/generic-vector\r\nOnce everything is completed, it can then be PR\u0027d altogether for a final review.\r\n\r\nOnce the first couple of types are in, I will see how easy it is to extend the `SimdAsHWIntrinsic` support to support the new types.\r\nOn initial investigation, this should be just recognizing the new type for `float`. It may require some minor changes to support `double` code when AVX is not supported.",
                                           "updatedAt":  "2020-06-11T21:36:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjk0MjI4NQ==",
                                           "createdAt":  "2020-06-11T21:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@eerhardt reminded me we have https://github.com/dotnet/runtimelab now, so I will set that up instead 😄 ",
                                           "updatedAt":  "2020-06-11T21:43:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzI1ODU3MA==",
                                           "createdAt":  "2020-06-12T13:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "As discussed in Discord, John and I would like to claim Matrix4x4\u003cT\u003e and Matrix3x2\u003cT\u003e respectively. Let me know if the runtimelab branch is still going ahead, if not I\u0027ll just use tanner\u0027s fork.",
                                           "updatedAt":  "2020-06-12T13:03:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTMwNjg2MQ==",
                                           "createdAt":  "2020-11-20T17:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXh_bw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Grepsy",
                                                                               "createdAt":  "2020-11-20T18:16:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "Whatever happened to this? In many applications doubles are absolutely critical for accuracy. In the signal processing or RF world floats can affect phase drastically, and on modern 64 bit computers double math and float math are pretty close in performance. Why wasn\u0027t System.Numerics done as doubles originally? I mean that\u0027s why System.Math was done in doubles to begin with and MathF was added later. Basically this is unusable in any situation that requires accuracy, and has forced us to use alternative math libraries that use hardware.instrinsics. Also someone has already done this, so please get this included. I\u0027d do it myself but for various company policy reasons I can\u0027t.\r\n\r\nhttps://github.com/Weingartner/System.Numerics.DoubleVectors\r\n\r\nAlso doing it as Decimal would be welcome too, although that\u0027s probably pretty niche.\r\n\r\nLastly, is JIT smart enough in .net core to use AVX, AVX2, AVX256, and AVX512 instructions?",
                                           "updatedAt":  "2020-11-20T17:43:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTMyMDUyMg==",
                                           "createdAt":  "2020-11-20T17:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBaINog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "alexis-idigo",
                                                                               "createdAt":  "2020-11-24T13:00:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Martin1994",
                                                                               "createdAt":  "2020-12-16T08:11:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Whatever happened to this\r\n\r\nIt\u0027s a work in progress and hasn\u0027t been completed yet. I\u0027d like to get it in for .NET 6, but we still need to see about scheduling and prioritization.\r\n\r\n\u003e In the signal processing or RF world floats can affect phase drastically, and on modern 64 bit computers double math and float math are pretty close in performance\r\n\r\nFor single operations, `double` and `float` indeed take approximately the same number of cycles. For vectorized operations however, single-precision floats tends to be ~2x faster as each instruction can operate on 4/8 rather than 2/4 values at a time.\r\n\r\n\u003e Why wasn\u0027t System.Numerics done as doubles originally\r\n\r\nMost of the types in System.Numerics were oriented around graphics programming (things like XNA, MonoGame, etc) which tends to prefer single-precision floats. Many CPUs also correspondingly favor single-precision vectorized operations in the instructions they expose. That is, not all functionality is equally exposed between `float` and `double`.\r\n\r\n\u003e Lastly, is JIT smart enough in .net core to use AVX, AVX2, AVX256, and AVX512 instructions?\r\n\r\nYes. Just as `Vector2/3/4` are internally accelerated today, these new types will likewise be internally accelerated when possible. We also expose `System.Runtime.Intrinsics` for cases where you want more explicit control over the codegen.\r\n\r\nWe do not support AVX512 today and there is no AVX256 ISA. 256-bit variants of the instructions as part of AVX and AVX2 and are supported that way.\r\n",
                                           "updatedAt":  "2020-11-20T17:56:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ4MjQzNg==",
                                           "createdAt":  "2020-11-21T01:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZxUGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexis-idigo",
                                                                               "createdAt":  "2020-11-24T13:00:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2020-12-12T11:31:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pgovind",
                                           "body":  "I will move this along for the .NET 6 wave and co-ordinate PRs in runtimelab with @tannergooding. Assigning to myself",
                                           "updatedAt":  "2020-11-21T01:15:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODI2Njk3Mg==",
                                           "createdAt":  "2020-12-03T19:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "\u003e \u003e Whatever happened to this\r\n\u003e \r\n\u003e It\u0027s a work in progress and hasn\u0027t been completed yet. I\u0027d like to get it in for .NET 6, but we still need to see about scheduling and prioritization.\r\n\u003e \r\n\u003e \u003e In the signal processing or RF world floats can affect phase drastically, and on modern 64 bit computers double math and float math are pretty close in performance\r\n\u003e \r\n\u003e For single operations, `double` and `float` indeed take approximately the same number of cycles. For vectorized operations however, single-precision floats tends to be ~2x faster as each instruction can operate on 4/8 rather than 2/4 values at a time.\r\n\u003e \r\n\u003e \u003e Why wasn\u0027t System.Numerics done as doubles originally\r\n\u003e \r\n\u003e Most of the types in System.Numerics were oriented around graphics programming (things like XNA, MonoGame, etc) which tends to prefer single-precision floats. Many CPUs also correspondingly favor single-precision vectorized operations in the instructions they expose. That is, not all functionality is equally exposed between `float` and `double`.\r\n\u003e \r\n\u003e \u003e Lastly, is JIT smart enough in .net core to use AVX, AVX2, AVX256, and AVX512 instructions?\r\n\u003e \r\n\u003e Yes. Just as `Vector2/3/4` are internally accelerated today, these new types will likewise be internally accelerated when possible. We also expose `System.Runtime.Intrinsics` for cases where you want more explicit control over the codegen.\r\n\u003e \r\n\u003e We do not support AVX512 today and there is no AVX256 ISA. 256-bit variants of the instructions as part of AVX and AVX2 and are supported that way.\r\n\r\nThank you for all this information and additional context that makes a lot of sense",
                                           "updatedAt":  "2020-12-03T19:51:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTM5MTE3MA==",
                                           "createdAt":  "2021-04-29T16:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "@pgovind and @tannergooding, is there any update on this for .NET6 given that the first previews are out already?\r\n\r\nI\u0027m having a use case where I\u0027d like to work with sets of currency-related data, where I would like to perform parallelized operations on the elements of these sets. Think of arrays of `decimal`s.\r\n\r\nThe operations I would like to perform are element-wise multiplication and element-wise summing of multiple arrays having the same length.\r\n\r\nI thought to use `Vector\u003cdecimal\u003e` for this, only to find out that it will throw a `NotSupportedException`....",
                                           "updatedAt":  "2021-04-29T16:29:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTQwNTY5NA==",
                                           "createdAt":  "2021-04-29T16:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This isn\u0027t being actively prioritized right now.\r\n\r\nI\u0027ve done quite a bit of cleanup in the JIT and so adding the acceleration for these types should be much more doable now, but it still needs some infrastructure work to make happen.",
                                           "updatedAt":  "2021-04-29T16:35:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTQxNzI0MA==",
                                           "createdAt":  "2021-04-29T16:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "Ok, and is there still a chance to get it in? Can anything be done to prioritize it higher?\r\n\r\nIt would already help a bit if it wasn\u0027t hardware accelerated yet but if it at least was usable from a developer perspective (rather than having to build for loops or use LINQ\u0027s Zip method to achieve element-wise vector-scalar multiplication and element summing of multiple vectors).\r\n\r\nNow for every method, [`ThrowHelper.ThrowForUnsupportedNumericsVectorBaseType\u003cT\u003e();` is called](https://source.dot.net/#System.Private.CoreLib/Vector_1.cs,e1ed53562feae514)...\r\n\r\nEdit: if I\u0027m misunderstanding this and if I should be using a different approach for (parallel) element-wise operations on lists of `decimal`, I\u0027d be also curious to hear the feedback :)\r\n\r\nSee https://dotnetfiddle.net/DXpMUP for an example of why you could do element-wise operations on sequences of `decimal`.",
                                           "updatedAt":  "2021-04-29T17:04:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTU1NDM5MQ==",
                                           "createdAt":  "2021-04-29T19:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e is there still a chance to get it in\r\n\r\nIt will happen eventually. When it gets in is largely up to my own free time. Even if a community member were to provide this, there needs to be availability to review it.\r\n\r\n\u003e Can anything be done to prioritize it higher?\r\n\r\nNot readily. This isn\u0027t something that falls into the \"nice to have\"/\"general framework improvements\" category and so it falls below other work on my plate.\r\n\r\n\u003e Now for every method, ThrowHelper.ThrowForUnsupportedNumericsVectorBaseType\u003cT\u003e(); is called...\r\n\r\nThis is elided by the JIT since `T` must be a `struct` type.\r\n\r\n\u003e See https://dotnetfiddle.net/DXpMUP for an example of why you could do element-wise operations on sequences of decimal.\r\n\r\nThese types are largely oriented around what can be hardware accelerated. We could conceivably support more with the new generic math proposal, but it isn\u0027t clear how much benefit that will have.\r\n\r\nCC. @jeffhandley ",
                                           "updatedAt":  "2021-04-29T19:55:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTU3Njk5Nw==",
                                           "createdAt":  "2021-04-29T20:33:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "\u003e When it gets in is largely up to my own free time.\r\n\r\nOk, I understand. Thank you for providing feedback in any case!\r\n\r\n\u003e This is elided by the JIT since T must be a struct type.\r\n\r\nOk, but `decimal` is a struct, too, and still it will throw a `NotSupportedException`. I do see now that it comes from the `Vector\u003cT\u003e` constructor though.\r\n\r\n\u003e We could conceivably support more with the new generic math proposal\r\n\r\nLikely you mean https://github.com/dotnet/runtime/issues/18244? (https://github.com/dotnet/csharplang/issues/4436 also is called \"generic math\")\r\n\r\nhttps://github.com/dotnet/runtime/issues/18244 seems to focus on *scalar* types - I don\u0027t know enough about it to understand how that proposal will improve the `Vector\u003cT\u003e` support for `decimal`?",
                                           "updatedAt":  "2021-04-29T20:43:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTU4NTMzMg==",
                                           "createdAt":  "2021-04-29T20:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Ok, but decimal is a struct, too, and still it will throw a NotSupportedException\r\n\r\nYes, but we can\u0027t support any struct type. We can only support a limited subset, which is currently `float`, `double`, `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`, `nint`, and `nuint` (the exact types supported can vary however).\r\n\r\n`decimal` is a large and slow type oriented around a specific use-case (largely `currency`). It isn\u0027t suitable for use in some other spaces where concepts like `NaN`, `Infinity` or `Negative Zero` are important.\r\n\r\n\u003e Likely you mean #18244? (dotnet/csharplang#4436 also is called \"generic math\")\r\n\r\nThe latter. The former is one that I missed and have just closed 😄 \r\n\r\nWe are tracking some more extensive work in supporting \"generic math\" via some interfaces, the rough draft design is tracked here: \u003chttps://github.com/dotnet/designs/pull/205\u003e\r\n\r\nThis would theoretically allow `Vector2\u003cT\u003e where T : INumber\u003cT\u003e` or similar, but given the orientation of `Vector2` around graphics and perf, that might not be desirable.\r\n",
                                           "updatedAt":  "2021-04-29T20:47:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTYwMDYzNw==",
                                           "createdAt":  "2021-04-29T21:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "\u003e decimal is a large and slow type oriented around a specific use-case (largely currency)\r\n\r\nYes, I agree, that is why I was wondering whether it was possible to support the missing builtin numeric types without hardware acceleration to make it at least \"code-complete\" (if the hardware acceleration support would be the issue).",
                                           "updatedAt":  "2021-04-29T21:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTYxNDAwNA==",
                                           "createdAt":  "2021-04-29T21:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027d be willing to entertain supporting `decimal` here, but I think it needs more thought, including how it would restrict or impact the ability to extend Vector2/3/4 with additional support in the future.\r\n\r\nIt would need to be a separate API proposal that discusses extending the types approved in this issue. You can find the new proposal template here: https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.md\r\nhttps://github.com/dotnet/runtime/issues/36160 is an example of an issue that requested `Vector\u003cT\u003e` be expanded too support `nint` and `nuint`\r\n\r\nThe main concerns are how this impacts the lack of APIs like `decimal.Sqrt` and how it might impact the ability to expose methods like `Sin`, `Cos`, or other \"common\" functionality exposed by `Vector2/3/4` types: \u003chttps://docs.microsoft.com/en-us/windows/win32/dxmath/ovw-xnamath-reference-functions-vector2\u003e.\r\n\r\nThe same concerns exist for the integral types such as `int` or `byte`.\r\n\r\nAlso, for reference `decimal` isn\u0027t an industry standard type (unlike `float`, or `double` or `half`), isn\u0027t supported by any of the ABI (application binary interface) specifications, and isn\u0027t actually a runtime built-in type.\r\nIt\u0027s actually a Microsoft specific type that is fully defined by the framework and has special support in C#, VB, and F#.\r\n\r\n",
                                           "updatedAt":  "2021-04-29T21:40:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTkxMTQ0OQ==",
                                           "createdAt":  "2021-04-30T07:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "Ok, in that case the barrier feels a bit too high for me. Thank you for thinking along, though!",
                                           "updatedAt":  "2021-04-30T07:48:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTkxODQ4Nw==",
                                           "createdAt":  "2021-04-30T08:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FilipToth",
                                           "body":  "Wow, I love it! Although one rarely needs extremely precise vectors, I do think the `System.Numerics`  API needs to be more extensive. How about `long` for vectors and matrices?",
                                           "updatedAt":  "2021-04-30T08:03:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDA3MTEyOQ==",
                                           "createdAt":  "2021-04-30T12:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "@FilipToth that would require a (predictably extensive) chat in API review to figure out what to do with things that just don’t work outside of floating points - like vector lengths and normalisation: should they throw? or return a really imprecise value?",
                                           "updatedAt":  "2021-04-30T12:48:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDEwNjMwNw==",
                                           "createdAt":  "2021-04-30T13:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e How about long for vectors and matrices?\r\n\r\nThe same concerns as I raised for `decimal` exist, but more-so since it doesn\u0027t carry a fractional part.\r\nWhat\u0027s the behavior for standard operations like `Length` or `Sqrt`. What will be the behavior if we want to expose `Sin` or `Cos` in the future?\r\n\r\nThe type is generic and so having these in the future will be possible, but it certainly needs more though and design work to see if that\u0027s desirable.",
                                           "updatedAt":  "2021-04-30T13:45:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDQ1MzExNQ==",
                                           "createdAt":  "2021-05-13T09:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FilipToth",
                                           "body":  "@Perksey @tannergooding Good to know. Thank you for your clarification.\n\n\u003e The type is generic and so having these in the future will be possible, but it certainly needs more thought and design work to see if that\u0027s desirable.\n\nI agree, it would amazing to have that in the API. I feel maybe the methods that do require a decimal point but the vector is say a `long` could just round it up.",
                                           "updatedAt":  "2021-05-13T10:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41lhoP",
                                           "createdAt":  "2021-08-15T10:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8j5nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hansmbakker",
                                                                               "createdAt":  "2021-08-15T11:13:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2021-08-15T23:56:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "malaterre",
                                                                               "createdAt":  "2021-09-23T06:32:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Laurnz",
                                                                               "createdAt":  "2021-09-28T18:18:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2023-05-27T13:08:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "Now that [generic math is a thing](https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/), this issue seems like the perfect use case for it.\r\n\r\nTo that end I have been creating [generic math versions here](https://github.com/sparkie108/generic-vectors-matrices).\r\n\r\nI have implemented Vector2\\\u003cT\\\u003e, Vector3\\\u003cT\\\u003e, Vector4\\\u003cT\\\u003e, Matrix3x2\\\u003cT\\\u003e, Matrix4x4\\\u003cT\\\u003e, Plane\\\u003cT\\\u003e and Quaternion\\\u003cT\\\u003e together with the associated tests, all based on the existing non-generic float versions code.\r\n\r\nFeedback welcome!",
                                           "updatedAt":  "2021-08-15T10:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42aHDF",
                                           "createdAt":  "2021-09-03T21:14:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "@sparkie108 1000000000% agree, though before coming up with an alternative API proposal we should probably look at which APIs are suitable for just floating point numbers and which APIs could work with any numeric type, as generic math would allow us to open these new types up to every single numeric type (but there are some of the methods which don\u0027t really make sense if you\u0027re working with integers)",
                                           "updatedAt":  "2021-09-03T21:14:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42gsSq",
                                           "createdAt":  "2021-09-07T18:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "Agreed a discussion is needed as to how theses types should be progressed now that Generic Math is a thing.\r\n\r\nMy own considered opinion, for what it\u0027s worth, is that these types are primary designed to support 2D and 3D graphical applications and that\u0027s what they should focus on. If you look at the methods, particalarly of the Matrix types, most are orientated towards graphics.  Perhaps they should even be in System.Numerics.Graphics? The scalar types currently used for graphics are Half, Single and Double which can all be supported using the approved api and Generic Math [as shown in my repo](https://github.com/sparkie108/generic-vectors-matrices).\r\n\r\nI can see the case for supplementary vector/matrix types that:\r\n- support more, and maybe even arbitary, dimensions.\r\n- support additional numeric types that make sense for non-graphics applications, such as Decimal and Complex.\r\n- don\u0027t support Plane or Quaternion or provide any graphics specific methods.\r\n\r\nThe ML world probably has some of this covered.\r\n\r\nI suspect just adding support to these types for Complex and Decimal won\u0027t really meet anybody\u0027s needs.\r\n\r\nIdeally the graphics types would be a \u0027subclass\u0027 of the more general types, but as they are structs I\u0027m not sure how that is possible.  Generic Math would certainly make it easier for the two sets of types to interact.\r\n\r\nWhether integer support ever makes sense I\u0027m unsure of, beyond a 2D pixel point which you could regard as a 2D vector.  As soon as you try to invert a matrix of integers you risk getting floats.\r\n\r\n@tannergooding, I would be very interested in your views.",
                                           "updatedAt":  "2021-09-07T18:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44L4Hx",
                                           "createdAt":  "2021-10-13T19:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is no longer marked `api-approved` or `up-for-grabs` as there have been both new innovations and new potential conflicts that have come to light which warrant it getting re-designed and re-reviewed.\r\n\r\nIn particular, generic math now exists and may make much of this area simpler to design around/implement or such that it can be designed \"better\". Likewise, when the `T` for these generic types are `int`, there are potential conflicts with things such as C# list and index patterns and its highly possible one of the other domain specific should be used instead of `Length`. https://github.com/dotnet/csharplang/discussions/5278 tracks the language providing an opt-out for this \"issue\", but it needs additional discussion/consideration by API review in either case.",
                                           "updatedAt":  "2021-10-13T19:15:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44MJuh",
                                           "createdAt":  "2021-10-13T20:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC51wWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lloydjatkinson",
                                                                               "createdAt":  "2021-11-23T13:13:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pjmlp",
                                                                               "createdAt":  "2022-01-30T13:32:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aniobodo",
                                                                               "createdAt":  "2023-04-14T05:31:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vpenades",
                                           "body":  "So after 5 years of debate, back to the beginning. In the meantime, we\u0027re forced to do stuff like [this](https://github.com/vpenades/SharpGLTF/blob/master/src/SharpGLTF.Core/Transforms/Matrix4x4Double.cs).\r\n\r\nSometimes, the best solution is not the perfect solution. Sometimes the best solution is the one that arrives in time. How I wished to have System.Numerics.Vectors at the time I was using Net3.5",
                                           "updatedAt":  "2021-10-13T20:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44MNCp",
                                           "createdAt":  "2021-10-13T21:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8j5_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-10-14T14:25:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jpmn",
                                                                               "createdAt":  "2021-11-30T01:27:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vpenades",
                                                                               "createdAt":  "2022-04-21T22:03:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2023-05-27T13:11:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes, sometimes the best solution is not the perfect solution. But when there are practical and real world concerns that come up which will actively hurt or complicate the thing in question, its likewise worth the additional bake time to get it out right.\r\n\r\nThere are a lot of features that everyone is asking for across the ecosystem and this one in particular is one of the \"big asks\" and because it is a \"big ask\" it requires additional design and consideration, particularly if it is going to lay the foundations for future support and not simply get invalidated in another 3-5 years.\r\n\r\n----------------------\r\n\r\nI\u0027ve been actively pushing on getting this feature, among others in the numerics and SIMD related areas since I became the area owner and I am still committed to ensuring this happens.\r\n\r\nIn particular, we are not back to square 1 here, there is largely an open question around `Length`. However, on top of that, there are a couple other \"breaks\" with regards to `Vector2/3/4` that have consistently come up that are worth considering; in particularly explicitly calling out when something is LHS vs RHS based. These are the minimal open questions that API review needs to reconsider before this can actually move forward.\r\n\r\nBeyond that, there is opportunity to correctly integrate this with `generic math` for .NET 7. That isn\u0027t a requirement, but it is something worth considering given that this hasn\u0027t shipped yet. And finally, there is the overall need to ensure that this is performant and therefore actually usable in production apps. .NET 5 and .NET 6 laid a lot of foundational work to make that possible and to ensure we could trivially ensure `Vector2/3/4\u003cfloat\u003e` and the other `T` could be trivially accelerated.\r\n",
                                           "updatedAt":  "2021-10-13T21:09:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44OYe4",
                                           "createdAt":  "2021-10-14T12:08:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "I agree .NET could end up with a better solution if this was approached again with a clean sheet.\r\n- it could fully embrace generic math with specific interfaces for vectors and matrices.  It might be possible to resolve the issues of some members being suitable for integers and others not.\r\n- split out the 2d/3d graphics specific methods, perhaps into extension methods.  The core vector/matrix methods could then be used with imaginary numbers for example.\r\n- resolve the Length vs Magnitude issue.\r\n\r\nGeneric math would make these types far more useful as the code consuming them could also be made generic, for example you could create LineSegment\\\u003cT\\\u003e with line-based math with would work with both floats and doubles.\r\n\r\nI did manage to get generic math to work with the current api with one exception, see sparkie108/generic-vectors-matrices#3.\r\n@tannergooding  am I missing a trick here or is it a problem with current generic math api?\r\n\r\nIs there anything we can do to help move this forward in .NET 7?",
                                           "updatedAt":  "2021-10-14T12:08:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44pc1h",
                                           "createdAt":  "2021-10-24T20:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "@tannergooding Hey, one question I had on the implementation of this. Looking at the code for float I don\u0027t see any of the SIMD logic like Avx.Add or Avx2 or SSE2, etc. How exactly does this work in the current implementation. Is JIT somehow smart enough to automatically insert the SIMD instructions where appropriate? Until the generic math comes into existence. I was thinking of just taking the float code that already exists, adding a D at the end of every method, and finding and replacing float with double.   ",
                                           "updatedAt":  "2021-10-24T20:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Gnyj",
                                           "createdAt":  "2022-01-30T13:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjmlp",
                                           "body":  "Coming late to the party as I dived into this issue due to some raytracing experiments, which naturally use double and floats are just too small for the range of values causing visual distortions.\r\n\r\nSo basically the only way to guarantee that we can have some kind of stable accelerated API for this kind of purposes is to drop into C++, from what I understand from this discussion, as neither Systems.Numerics is going forward nor System.Runtime.Intrinsics provide the comfort of the previous one, and naturally it is still a big question how .NET 7 will look like in this regard.",
                                           "updatedAt":  "2022-01-30T13:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Gzhd",
                                           "createdAt":  "2022-01-30T17:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyq0qA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damian-666",
                                                                               "createdAt":  "2023-01-15T12:59:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e So basically the only way to guarantee that we can have some kind of stable accelerated API for this kind of purposes is to drop into C++, from what I understand from this discussion, as neither Systems.Numerics is going forward nor System.Runtime.Intrinsics provide the comfort of the previous one, and naturally it is still a big question how .NET 7 will look like in this regard.\r\n\r\nCould you elaborate on what parts above make you think this? `System.Numerics` is not going away and is still being developed and moved forward. Likewise, `System.Runtime.Intrinsics` is getting explicit improvements in .NET 7 to improve the xplat experience and make it more comfortable to use (most of the work is already done and in .NET 7 P1).\r\n\r\nThe main issues here are that exposing Vector2/3/4\u003cT\u003e (and equivalent generic versions of the other types) is a lot of work. The scope of the work is also complex as users want to support integer types in the future, there has been feedback for several years on the existing Vector2/3/4 types having a layout that makes certain things hard to understand/use, and there has since been the introduction of the hardware intrinsics, xplat intrinsic helpers (new in .NET 7), and generic math (also new in .NET 7). All of this culminates in a need to give this API another think over and taking it back to API review.\r\n\r\nI certainly could push this forward faster and ignore some of the big feedback points or design changes that have come up. But that also wouldn\u0027t make me a very good area owner here. Likewise, I do not want this sitting around for ever; it is a beneficial set of APIs to expose and I don\u0027t want it to get stuck in design limbo. I do expect this next design round will be the last as I\u0027m not currently planning any other \"major\" changes that would be impactful enough to do warrant that and I\u0027ve also gotten the overall JIT support here into a good place where accelerating these APIs is going to be much easier/straightforward.\r\n\r\n----------------------------------------\r\n\r\n\u003e which naturally use double and floats are just too small for the range of values causing visual distortions.\r\n\r\nI expect this is more to do with implementation than to do with the precision range of `float`. Consider that many GPUs still don\u0027t have `double-precision` support and that `Vulkan`, `DirectX 12`, and many of the best ray tracing engines still use `float`.\r\n\r\nI would generally expect a render engine/framework to take into account the concept of a \"floating-origin\" to ensure that you never have to consider floating-point values large enough to cause inaccuracies and to \"normalize\" the scale so that the most commonly used values are between `-1` and `+1` (allowing ~2 billion uniquely representable single-precision floating-point values).",
                                           "updatedAt":  "2022-01-30T17:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49G1aL",
                                           "createdAt":  "2022-01-30T18:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC51w2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aniobodo",
                                                                               "createdAt":  "2023-04-14T05:35:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pjmlp",
                                           "body":  "I confess I haven\u0027t read every single post, however I got the feeling that other stuff was kind of having higher priority on .NET roadmap and we have what we have.\r\n\r\nGood to know that I was wrong and should probably read the whole thread with more care.\r\n\r\nAs for the float vs double, maybe some issues on blindly converting a C++ rendering sample into C#, replacing glm with System.Numeric (and downgrading double to float in the process), which is what prompt me to try to find out the current stat of affairs, thus landing here, maybe I should look more closely for arithmetic conversion bugs.\r\n\r\nThanks for the lengthy reply, naturally I prefer to stay in .NET land even for this kind of experiments and looking forward to what is coming.",
                                           "updatedAt":  "2022-01-30T18:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49G2uW",
                                           "createdAt":  "2022-01-30T18:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e As for the float vs double, maybe some issues on blindly converting a C++ rendering sample into C#, replacing glm with System.Numeric (and downgrading double to float in the process), which is what prompt me to try to find out the current stat of affairs, thus landing here, maybe I should look more closely for arithmetic conversion bugs.\r\n\r\nIt\u0027s likely not conversion bugs, but rather to do with how floating-point works under the covers.\r\n\r\n`float` is 32-bits and can represent approximately 4-billion unique values. However, the distribution is not linear and the distance between representable values differs depending on how big they are.\r\n\r\nIf you were to say that `1.0f` was a meter than it can accurately represent things at approx the \"micrometer\" level. Where-as at `1024.0` meters you can only represent things at approx the millimeter level. After 2^24 (approx 16.7 million) you can no longer even represent whole integers and only even numbers (and then only every 4th number at 2^25 and so on).\r\n\r\nThe biggest thing that `double` typically enables is that you can represent whole integers up to `2^52` and so you are less likely to run into issues with a simple algorithm. However, you can still run into the same issues especially if you are working with \"large scales\" (like space games representing the solar system).\r\n\r\nDue to how `float`/`double` are represented and because approx half of the representable values are between `-1` and `+1`, you generally want to \"normalize\" your inputs so that most values fall between `-1` and `+1`. You then likely also want to separate your world into cells or chunks and to change where the origin is as you move throughout the world (either moving the world around the camera, rather than the camera through the world; or changing the origin every \u0027x\u0027 cells so that you never move far enough away from it to start seeing issues).",
                                           "updatedAt":  "2022-01-30T18:59:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49G4kk",
                                           "createdAt":  "2022-01-30T19:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjmlp",
                                           "body":  "@tannergooding Many thanks for the tips, even though it isn\u0027t really related to the ticket, much appreciated.",
                                           "updatedAt":  "2022-01-30T19:36:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JKj1",
                                           "createdAt":  "2022-01-31T14:40:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vpenades",
                                           "body":  "I\u0027ve just found [Silk.NET.Maths](https://github.com/dotnet/Silk.NET/tree/main/src/Maths/Silk.NET.Maths) which seems to be quite complete and using generic maths.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-01-31T14:40:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JaqS",
                                           "createdAt":  "2022-01-31T15:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "\u003e I\u0027ve just found [Silk.NET.Maths](https://github.com/dotnet/Silk.NET/tree/main/src/Maths/Silk.NET.Maths) which seems to be quite complete and using generic maths.\r\n\r\nThe project in general looks pretty sweet, thanks for posting it. Their work is quite impressive. But do the math operations you listed there actually get compiled to use SIMD efficiently? Like are they going to use avx instructions?",
                                           "updatedAt":  "2022-01-31T15:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JbLR",
                                           "createdAt":  "2022-01-31T15:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "@serp777 see dotnet/Silk.NET#666 and #904",
                                           "updatedAt":  "2022-01-31T15:20:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Jd2E",
                                           "createdAt":  "2022-01-31T15:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "\u003e \u003e As for the float vs double, maybe some issues on blindly converting a C++ rendering sample into C#, replacing glm with System.Numeric (and downgrading double to float in the process), which is what prompt me to try to find out the current stat of affairs, thus landing here, maybe I should look more closely for arithmetic conversion bugs.\r\n\u003e \r\n\u003e It\u0027s likely not conversion bugs, but rather to do with how floating-point works under the covers.\r\n\u003e \r\n\u003e `float` is 32-bits and can represent approximately 4-billion unique values. However, the distribution is not linear and the distance between representable values differs depending on how big they are.\r\n\u003e \r\n\u003e If you were to say that `1.0f` was a meter than it can accurately represent things at approx the \"micrometer\" level. Where-as at `1024.0` meters you can only represent things at approx the millimeter level. After 2^24 (approx 16.7 million) you can no longer even represent whole integers and only even numbers (and then only every 4th number at 2^25 and so on).\r\n\u003e \r\n\u003e The biggest thing that `double` typically enables is that you can represent whole integers up to `2^52` and so you are less likely to run into issues with a simple algorithm. However, you can still run into the same issues especially if you are working with \"large scales\" (like space games representing the solar system).\r\n\u003e \r\n\u003e Due to how `float`/`double` are represented and because approx half of the representable values are between `-1` and `+1`, you generally want to \"normalize\" your inputs so that most values fall between `-1` and `+1`. You then likely also want to separate your world into cells or chunks and to change where the origin is as you move throughout the world (either moving the world around the camera, rather than the camera through the world; or changing the origin every \u0027x\u0027 cells so that you never move far enough away from it to start seeing issues).\r\n\r\nInteresting, this makes me think about how kerbal space program (written in Unity) does their math. You\u0027ve got very large numbers in the hundreds of millions or billions with precision at the 0.01 level. At the same time though all double math would likely be too expensive. ",
                                           "updatedAt":  "2022-01-31T15:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JgZ4",
                                           "createdAt":  "2022-01-31T15:33:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMlBmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cpt-Falcon",
                                                                               "createdAt":  "2022-02-01T19:12:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vpenades",
                                           "body":  "\u003e this makes me think about how kerbal space program (written in Unity) does their math.\r\n\r\nExplained here: https://youtu.be/mXTxQko-JH0?t=259",
                                           "updatedAt":  "2022-01-31T15:33:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49J9xI",
                                           "createdAt":  "2022-01-31T17:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMlBpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cpt-Falcon",
                                                                               "createdAt":  "2022-02-01T19:13:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Interesting, this makes me think about how kerbal space program (written in Unity) does their math. You\u0027ve got very large numbers in the hundreds of millions or billions with precision at the 0.01 level. At the same time though all double math would likely be too expensive.\r\n\r\n@serp777, yes they cover a few of the standard approaches to solving this in the video. You can see this in other games as well particularly those with modding support such as Minecraft (chunks), or Elder Scrolls (cells), etc. There are tons of papers covering the techniques and approaches that allow all of this to work, including at scale.\r\n\r\nIts also worth noting that `double` math isn\u0027t itself \"expensive\". That is `float + float` and `double + double` both execute in about 2-3 cycles (going back to at least 2016) and this also applies to most other operations that have hardware support. What makes `float` faster is when you\u0027re using SIMD, as you can then do twice as many operations in the same instruction or when memory is a bottleneck since you can do the same number of operations while using half the memory.",
                                           "updatedAt":  "2022-01-31T17:23:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49KdUa",
                                           "createdAt":  "2022-01-31T19:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "prollin",
                                           "body":  "@tannergooding just want to add support for the solution expressed in #904. Unless I am missing anything, there is currently no way to use our own simple math types and expect the same performance as Vector3 when doing SIMD operations.\r\nFor example, I have a custom math library that closely follow glsl semantics (vec2, vec3, mat4, etc) and can\u0027t get my vec3 type to perform efficiently since I pay the price of loading it into a Vector128 each time.\r\nThis really seems like the best option rather than forcing developers to use framework types.",
                                           "updatedAt":  "2022-01-31T19:56:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49OczK",
                                           "createdAt":  "2022-02-01T19:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cpt-Falcon",
                                           "body":  "\u003e \u003e Interesting, this makes me think about how kerbal space program (written in Unity) does their math. You\u0027ve got very large numbers in the hundreds of millions or billions with precision at the 0.01 level. At the same time though all double math would likely be too expensive.\r\n\u003e \r\n\u003e @serp777, yes they cover a few of the standard approaches to solving this in the video. You can see this in other games as well particularly those with modding support such as Minecraft (chunks), or Elder Scrolls (cells), etc. There are tons of papers covering the techniques and approaches that allow all of this to work, including at scale.\r\n\u003e \r\n\u003e Its also worth noting that `double` math isn\u0027t itself \"expensive\". That is `float + float` and `double + double` both execute in about 2-3 cycles (going back to at least 2016) and this also applies to most other operations that have hardware support. What makes `float` faster is when you\u0027re using SIMD, as you can then do twice as many operations in the same instruction or when memory is a bottleneck since you can do the same number of operations while using half the memory.\r\n\r\nThanks for this response. One thing I will say is that doubles can be slower beyond just pure operations. For example if I have a class with 20 doubles vs 20 floats, the class with 20 doubles will be twice as big. This quite possibly means twice as much memory pressure, more GC needed, etc. Moving memory around or copying it etc can also be very slow. So if I have gigabytes worth of memory constituted from this hypothetical class, using floats vs doubles could massively improve performance depending on the load that occurs. I mention this specifically because I know KSP has had serious issues with garbage collection and memory pressure. It used to be when playing it would stutter heavily every 3 seconds depending on mods and craft size because of the GC. ",
                                           "updatedAt":  "2022-02-01T19:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OMnNs",
                                           "createdAt":  "2022-11-11T16:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPyH1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "devttebayo",
                                                                               "createdAt":  "2022-12-03T14:08:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "domportera",
                                                                               "createdAt":  "2022-12-14T04:40:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2023-03-19T11:42:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "r-wavilo",
                                                                               "createdAt":  "2023-12-15T22:00:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "malstraem",
                                           "body":  "Are there any updates? .NET 7 and generic math now available. Why we still have no simd accelerated double precision vectors, matrices, etc.? This is important for games and scientific applications.",
                                           "updatedAt":  "2022-11-11T16:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OMtcX",
                                           "createdAt":  "2022-11-11T17:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Are there any updates? .NET 7 and generic math now available. Why we still have no simd accelerated double precision vectors, matrices, etc.? This is important for games and scientific applications.\r\n\r\nFor now you can use the `Vector128\u003cT\u003e` and `Vector256\u003cT\u003e` SIMD types. Keep in mind that their size if fixed to 16 or 32 bytes and so the amount of Ts you can store there varies.\r\n\r\nYou also need to check whether IsHardwareAccelerated is true on those, otherwise you\u0027ll end up with slow software fallbacks. (Vector256 will for example be never accelerated on ARM64 CPUs).",
                                           "updatedAt":  "2022-11-11T17:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OM68w",
                                           "createdAt":  "2022-11-11T18:05:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Why we still have no simd accelerated double precision vectors, matrices, etc.? This is important for games and scientific applications.\r\n\r\nThe API surface needs to be re-reviewed to account for generic math. It is also a non-trivial amount of work, especially if it is to be hardware accelerated as well.",
                                           "updatedAt":  "2022-11-11T18:05:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z4X46",
                                           "createdAt":  "2023-04-14T05:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Aniobodo",
                                           "body":  "Vector4 as double. Any hope in .NET 8?",
                                           "updatedAt":  "2023-04-14T05:39:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z60oO",
                                           "createdAt":  "2023-04-14T14:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is still something I am very interested in finishing an pushing through. Unfortunately, due to competing priorities its not likely going to be in for .NET 8.\r\n\r\nThere is significant design work required to ensure the API surface is correct and forward compatible. The implementation cost, particularly to ensure it is performant, is likewise non-trivial.",
                                           "updatedAt":  "2023-04-14T14:06:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8hUb",
                                           "createdAt":  "2023-04-14T18:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "If the BCL contained Vector2\u003cT\u003e, Vector3\u003cT\u003e, Vector4\u003cT\u003e together with simple Matrix3x2\u003cT\u003e and Matrix4x4\u003cT\u003e types wrapping them it would at least enable libraries to exchange data with each other.\r\nThey don\u0027t need to have all the 3D graphics functions, people can add them with extension methods if needed (especially when roles lands).\r\nSIMD support would be great but doesn\u0027t have to be there initially.\r\nThe basic shape of these types (without all the helper methods) should be fairly non-contentious.\r\n",
                                           "updatedAt":  "2023-04-14T18:06:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8icP",
                                           "createdAt":  "2023-04-14T18:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC55NcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-04-14T18:31:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Perksey",
                                           "body":  "@SparkieLabs The design for this, while currently approved, does not account for generic maths (originally this was going to be a fixed API surface, and manually specialized implementations which would throw if an unsupported T is used) which vastly changes the implications of expanding System.Numerics. It is true that noone will object to the currently approved surface, but at the same time given recent developments more can definitely be done here. There are other libraries that fill in these blanks (such as Silk.NET.Maths) in the meantime.",
                                           "updatedAt":  "2023-04-14T18:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8o8R",
                                           "createdAt":  "2023-04-14T18:38:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC55PLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vpenades",
                                                                               "createdAt":  "2023-04-14T18:39:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "Agreed they should be generic.\r\nThe problem isn\u0027t a lack of community libraries with these types its the abundance of them (I\u0027ve even got [my own generic version](https://github.com/SparkieLabs/generic-vectors-matrices)).  Different libraries all having there own types adds friction to interworking say Silk.NET and [geometry4Sharp)](https://github.com/NewWheelTech/geometry4Sharp), that\u0027s what I think the focus should be on solving.",
                                           "updatedAt":  "2023-04-14T18:38:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8rni",
                                           "createdAt":  "2023-04-14T18:50:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There has to be a consideration for versioning such APIs over time, however.\r\n\r\nSimply throwing up a few types is simple. Ensuring those types have the right shape so that they can be made performant, such that they don\u0027t lead to UB, such that they can support the types developers need, etc. That takes time and effort to design.\r\n\r\nIn the interim, we have APIs like `TTo Unsafe.BitCast\u003cTFrom, TTo\u003e(TFrom value)` which allow safely and efficiently reinterpreting (without making it address taken) same sized value types which can be used to ease the interop of the various types custom libraries have.\r\n\r\nExposing another type in the BCL doesn\u0027t fix the issue itself, it just compounds to their being \"yet another\" type that you have to consider, the one difference is that its \"in box\" so it can be the common interchange between them, but ultimately you would still need to do \"two casts\" to go from `JanesVector4Double` to `JimsVector4Double` (where-as `BitCast` gives it to you in 1).",
                                           "updatedAt":  "2023-04-14T18:50:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z_mup",
                                           "createdAt":  "2023-04-15T14:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC57DqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aniobodo",
                                                                               "createdAt":  "2023-04-15T14:24:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vukovinski",
                                           "body":  "Quick look into Intel architecture document shows SIMD instructions for double precision floating points were available with Pentium 4 (see SSE2 for details).",
                                           "updatedAt":  "2023-04-15T14:03:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z_oj5",
                                           "createdAt":  "2023-04-15T14:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Aniobodo",
                                           "body":  "@vukovinski  Thanks for that info. \r\nThe hardware company knows that SIMD with double is a priority, only Microsoft thinks otherswise.",
                                           "updatedAt":  "2023-04-15T14:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aASTz",
                                           "createdAt":  "2023-04-16T02:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkAG8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Peter-B-",
                                                                               "createdAt":  "2024-01-19T14:38:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MovGP0",
                                                                               "createdAt":  "2024-05-31T08:57:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We already provide all the necessary APIs and functionality for someone to roll their own fully SIMD accelerated double-precision Vector2/3/4 types.\r\n\r\nAdditionally, no one has said that `double` isn\u0027t a \"priority\". It\u0027s simply been stated that there is quite a substantial amount of design work that needs to be done before the proposal can move forward again.",
                                           "updatedAt":  "2023-04-16T02:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aAwaX",
                                           "createdAt":  "2023-04-16T07:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Aniobodo",
                                           "body":  "@tannergooding \r\nYour last comment is interesting:\r\nWe already provide all the necessary APIs and functionality for someone to roll their own fully SIMD accelerated double-precision Vector2/3/4 types.\r\n\r\nIs there any description for that? \r\nI tried with attribute [Intrinsic] but it didn’t work.\r\n\r\n",
                                           "updatedAt":  "2023-04-16T07:43:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aA_2q",
                                           "createdAt":  "2023-04-16T09:13:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC59XlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SparkieLabs",
                                                                               "createdAt":  "2023-04-16T12:01:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2023-04-17T00:23:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vpenades",
                                           "body":  "@tannergooding I think there\u0027s two separate cases that need to be handled by numeric types: maths and interop.\r\n\r\nI agree that in order to support generic maths requires extensive R\u0026D, but not so for interop, and I don\u0027t think having a few more commonly used types would harm.\r\n\r\nSo what I think what people is asking is that while we wait for _perfection_, it could be desirable to have some temporary solution, something in between.\r\n\r\nI understand that temporary solution could not fit into system.numeric.vectors.. So I would like to propose to have a **CommunityToolkit.Numeric.Vectors** or something like that. After all, CommunityToolkit is being used to fill the gap of things that are commonly needed by the community but don\u0027t quite fit into the CLR\r\n\r\nI know silk.net has been proposed, and it\u0027s not bad at all, but it\u0027s not so widely adopted either to become a type exchange library.",
                                           "updatedAt":  "2023-04-16T09:15:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aBj3A",
                                           "createdAt":  "2023-04-16T12:21:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I tried with attribute [Intrinsic] but it didn’t work.\r\n\r\n@Aniobodo, `[Intrinsic]` is an internal only attribute for the runtime so that the runtime can specialize semantics internally. Such as providing custom type layout or specialized node handling to help with overall JIT throughput.\r\n\r\nUser code has access to the `System.Runtime.Intrinsics` namespace which provides access to platform-specific (since .NET Core 3.1) and cross-platform (since .NET 7) hardware intrinsics, much like C/C++ provide.\r\n\r\nInterested parties would utilize this in their own types, such as https://source.terrafx.dev/#TerraFX/Numerics/Vector4.cs,927e43c5390e4e41, to provide the underlying acceleration appropriate.",
                                           "updatedAt":  "2023-04-16T12:21:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aBj3p",
                                           "createdAt":  "2023-04-16T12:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQQl7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2023-04-17T00:24:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2023-04-17T00:24:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2023-10-30T16:33:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bupalaoye",
                                                                               "createdAt":  "2023-12-21T06:36:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I understand that temporary solution could not fit into system.numeric.vectors.. So I would like to propose to have a CommunityToolkit.Numeric.Vectors or something like that. After all, CommunityToolkit is being used to fill the gap of things that are commonly needed by the community but don\u0027t quite fit into the CLR\r\n\r\n@vpenades, I already touched on this above.\r\n\r\nIf we were to expose some `CommunityToolkit.Numerics.Vector` purely for interop, it would effectively just be identical to a named version of `ValueTuple\u003cdouble, double\u003e` for `Vector2`. This wouldn\u0027t then be usable as the interchange type when the `System.Numerics.Vector2\u003cT\u003e` comes about in the future, due to layering, and so it does in fact ultimately hurt things more in the long run.\r\n\r\nExposing one more type doesn\u0027t fix the root interchange issue. Nor does it fix the issue of differing libraries actually adopting the \"one more type\" as the actual interchange type. There will always be a need for users to work around a lack of common type, either because the library in question isn\u0027t using it or because of performance.\r\n\r\nAPIs like `ref TTo Unsafe.As\u003cTFrom, TTo\u003e(ref TFrom value)` and as of .NET 8 `TTo Unsafe.BitCast\u003cTFrom, TTo\u003e(TFrom value)` exist specifically to help solve this scenario and allow reinterpreting bits of type `TFrom` as bits of type `TTo`.\r\n\r\nValue Tuples (particularly with the general language decomposition support) are another good option, as is the `Vector128\u003cT\u003e` (particularly from the perf perspective) from the `System.Runtime.Intrinsics` namespace. You can also utilize the `Vector256\u003cT\u003e` or in .NET 8 the `Vector512\u003cT\u003e` type for similar benefits, this is particularly the case on x86/x64, or in .NET 8 on \"all platforms\" since they are 2x and 4x `Vector128\u003cT\u003e`, respectively.\r\n\r\nI am personally committed to ensuring this happens, but it needs to be done correctly and needs to be done in relation to other important work that is more broadly impactful to .NET in general.\r\n- In .NET 7 this functionality got pushed out in favor of Generic Math, which is a generally beneficial feature allowing massive reductions in code duplication and broader support for correctly constraining and using generics meaningfully with arithmetic. Such a feature directly benefits the design of `Vector2/3/4\u003cT\u003e`.\r\n- For .NET 8, the main focus is exposing `Vector512\u003cT\u003e` and the corresponding AVX512 support. This will have general benefits to modern hardware throughout the entirety of the BCL. Such functionality not only allows improving existing SIMD accelerated workloads (such as Span, LINQ, text transcoding, etc), but it also will improve almost all floating-point related code due to powerful new instructions. -- This is true for scalar, 128-bit, 256-bit, and 512-bit code.\r\n- Other \"large\" features on the general backlog include this proposal, IEEE 754 decimal types, and a `BigInteger` rewrite. ",
                                           "updatedAt":  "2023-04-16T12:22:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aEK3X",
                                           "createdAt":  "2023-04-17T09:55:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPyKhg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2023-04-17T11:15:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgnslndh",
                                                                               "createdAt":  "2023-09-27T12:11:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dzmitry-lahoda",
                                                                               "createdAt":  "2023-09-30T15:23:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MiheevN",
                                                                               "createdAt":  "2023-11-05T12:18:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "r-wavilo",
                                                                               "createdAt":  "2023-12-15T22:10:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "With the advent of generic math this domain is at an inflection point. If Microsoft delivers an offering in .NET 9 the community will rally around it. It they don’t the .NET generic vector space will be the same fragmented mess as the non-generic space is today.\n\nI am told that the future is the metaverse and the fundamental particles of the metaverse are vectors, matrices and quaternions.",
                                           "updatedAt":  "2023-04-17T09:55:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aEYBx",
                                           "createdAt":  "2023-04-17T10:32:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SparkieLabs",
                                           "body":  "I should add that the current System.Numerics.Vectors float implementations are excellent and thanks for all the work you do on them.",
                                           "updatedAt":  "2023-04-17T10:32:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aEl5p",
                                           "createdAt":  "2023-04-17T11:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vukovinski",
                                           "body":  "@SparkieLabs also, choice operators, but thats another story",
                                           "updatedAt":  "2023-04-17T11:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yEI5M",
                                           "createdAt":  "2024-01-28T18:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODX1vkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2024-01-28T18:47:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ptasev",
                                                                               "createdAt":  "2024-01-28T18:59:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "sopgenorth",
                                                                               "createdAt":  "2024-01-28T19:09:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "malstraem",
                                                                               "createdAt":  "2024-01-28T21:21:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Jimmacle",
                                                                               "createdAt":  "2024-01-29T16:11:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xiety",
                                                                               "createdAt":  "2024-01-29T19:45:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "tvardero",
                                                                               "createdAt":  "2024-02-11T20:53:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "veggielane",
                                                                               "createdAt":  "2024-02-13T20:57:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "spacecheeserocks",
                                                                               "createdAt":  "2024-02-22T15:20:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "KingKrouch",
                                           "body":  "Are there any updates on the status of this?",
                                           "updatedAt":  "2024-01-28T18:45:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yS0TQ",
                                           "createdAt":  "2024-01-30T17:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESgCcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KingKrouch",
                                                                               "createdAt":  "2024-01-30T17:59:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahStolk",
                                                                               "createdAt":  "2024-01-30T19:44:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2024-01-30T20:30:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lue-bird",
                                                                               "createdAt":  "2025-05-18T01:28:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is a lot of ongoing work in the various spaces of intrinsics and only so much time to get it all done.\r\n\r\nThis work item in particular is still pending an updated and forward thinking proposal that takes into account `generic math`, includes newly introduced API surface, and factors in the considerations of what does or doesn\u0027t make sense in a generic context.\r\n\r\nThe last bit is notably the part that needs the most thought because there is a desire from the community to ensure that `Vector2\u003cT\u003e` works with `integers` or `floating-point` types. However, many of the concepts around these types of Euclidean vectors only make sense for floating-point types and so we really need to think on how this should be split/exposed. This includes thinking around if we should expose both `Vector2I\u003cT\u003e where T : IBinaryInteger\u003cT\u003e` and `Vector2F\u003cT\u003e where T : IFloatingPointIeee754\u003cT\u003e` (but maybe with better names), etc.\r\n\r\nAPI design is not trivial and it requires significant investment to ensure that we end up with a viable API surface that won\u0027t require us to introduce yet another type that doesn\u0027t quite mesh in the future and while the immediate ask of supporting just `double` is more simple, we can\u0027t only consider that when thinking about what to do here since the needs in this space are known to be broader in practice.",
                                           "updatedAt":  "2024-01-30T17:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yS1CF",
                                           "createdAt":  "2024-01-30T17:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "If someone is willing to help do the work to drive an updated proposal, I\u0027d be happy to set aside some time to sync with them on a basic outline that I believe would work and then follow up with them after they\u0027ve gotten the design doc (which would include rationale, examples, and needs elaborated on) written up. That would unblock this from going to API review and then the basic implementation being provided",
                                           "updatedAt":  "2024-01-30T17:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yT2nk",
                                           "createdAt":  "2024-01-30T20:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "malstraem",
                                           "body":  "\u003e However, many of the concepts around these types of Euclidean vectors only make sense for floating-point types and so we really need to think on how this should be split/exposed.\r\n\r\nShould we really limit the implementation to the meaning of Euclidean vectors? Maybe there is a workaround that will allow us to implement vectors that are constrainted by interfaces only, but still use their own logic for integers or floatings? This will definitely allow people to do a lot of useful custom things based on generic math interfaces.\r\n\r\nI\u0027m just interesting, cause it\u0027s obvious that after dividing the vectors according to Euclidean, there will be no way back.",
                                           "updatedAt":  "2024-01-30T20:11:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yT54R",
                                           "createdAt":  "2024-01-30T20:16:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "These are already Euclidean vectors, by definition. General purpose mathematical vectors or explicit SIMD vectors are different concepts and already exposed or are being exposed by a different set of APIs.",
                                           "updatedAt":  "2024-01-30T20:16:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yT6qV",
                                           "createdAt":  "2024-01-30T20:19:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "That is, `Vector2/3/4`, `Matrix4x4`, `Quaternion`, `Plane`, etc are explicit specializations designed for and around things like graphics and physics. There isn\u0027t really a desire to make it more broad outside those concepts because things like `System.Runtime.Intrinsics.Vector64/128/256/512\u003cT\u003e` and `System.Numerics.Vector\u003cT\u003e` exist for SIMD, while `System.Numerics.Tensors.TensorPrimitives` and the likely eventual `Tensor\u003cT\u003e` (or similarly shaped API) are designed for the broader mathematical/AI/ML usage of scalars/vectors/matrices/tensors",
                                           "updatedAt":  "2024-01-30T20:19:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U99XJ",
                                           "createdAt":  "2024-11-25T23:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "micampbell",
                                           "body":  "in exploring how Vector3 is written in .NET 9, it seems that many calls are now going to `AsVector128Unsafe()`. For double precision, would one be able to just copy this class and make a double precision Vector3 by changing these to  `AsVector512Unsafe()`?",
                                           "updatedAt":  "2024-11-25T23:53:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U_PST",
                                           "createdAt":  "2024-11-26T04:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "It\u0027d be `AsVector256Unsafe`, but it\u0027s a bit more complicated in practice.\n\nUnlike `Vector128` which is largely the core SIMD primitive that exists on all hardware with SIMD support, `Vector256` tends to be more limited and x86/x64 specific. As such, you\u0027d really need to detect acceleration and use either 1x Vector256 or 2x Vector128 operations to do the work for Vector3/4. For Vector2 it\u0027d always be 1x Vector128 operation.\n\nThis will cause most of the right things to happen, but notably there\u0027s still some minor special handling for the `System.Numerics.Vector*` types that can\u0027t be provided to user-defined structs and so some other minor nuances might also exist leading to it being subpar. Ideally we\u0027ll get to a point where it isn\u0027t unique to in-box types, but there\u0027s a lot of work needed before that is possible.",
                                           "updatedAt":  "2024-11-26T04:00:16Z"
                                       }
                                   ],
                         "totalCount":  129
                     },
        "title":  "Add support System.Numerics.Vectors types with double precision",
        "labels":  [
                       "area-System.Numerics",
                       "Cost:L"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10397",
        "createdAt":  "2018-05-29T17:32:14Z",
        "number":  10397,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBbxkkg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikedn",
                                            "createdAt":  "2018-05-29T17:39:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2018-05-30T14:04:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2021-01-07T21:12:12Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-03-01T00:19:11Z",
        "body":  "There is heavy use of unsafe code in number.parsing.cs and calling code (eg at https://github.com/dotnet/runtime/blob/110282c71b3f7e1f91ea339953f4a0eba362a62c/src/libraries/System.Private.CoreLib/src/System/Number.Parsing.cs#L255). This could be rewritten with `ReadOnlySpan\u003cchar\u003e` to eliminate the `char *` resulting in safer code that is also easier to read.\r\n\r\nRelates to https://github.com/dotnet/coreclr/pull/17808",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJu699Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODQ0MjY1Mg==",
                                           "createdAt":  "2020-06-23T21:40:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-23T21:40:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Mjc3ODI0OQ==",
                                           "createdAt":  "2020-07-02T04:45:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "felipepessoto",
                                           "body":  "@danmosemsft, @tannergooding, do you know a better strategy to edit/build/test it?\r\n\r\nI was running these two command, but the first one takes a long time to run:\r\n\r\n.\\build.cmd -subset clr+libs -c Checked /p:BuildNative=false\r\nD:\\Repos\\runtime\\src\\libraries\\System.Runtime\\tests\u003e dotnet build /t:Test /p:Configuration=Checked\r\n\r\nSo, I\u0027m currently doing this:\r\n\r\n.\\build.cmd -subset clr -c Checked /p:BuildNative=false\r\n\r\nCopy \"D:\\Repos\\runtime\\artifacts\\bin\\coreclr\\Windows_NT.x64.Checked\\System.Private.CoreLib.dll\"\r\nTo D:\\Repos\\runtime\\artifacts\\bin\\testhost\\net5.0-Windows_NT-Checked-x64\\shared\\Microsoft.NETCore.App\\5.0.0\\\r\n\r\nD:\\Repos\\runtime\\src\\libraries\\System.Runtime\\tests\u003e dotnet build /t:Test /p:Configuration=Checked",
                                           "updatedAt":  "2020-07-02T05:05:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzExODAxNg==",
                                           "createdAt":  "2020-07-02T16:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "You\u0027re changing `src/libraries/System.Private.CoreLib/src/System/Number.Parsing.cs` and `src/libraries/System.Runtime/tests` right? @safern didn\u0027t we recently change things so that building `src\\libraries\\System.Runtime\\tests` would also build `System.Private.Corelib`? In that case I would expect you could build `clr+libs` just once, and then iterate by doing `dotnet build /t:build;test` on System.Runtime\\tests. Would that be right?",
                                           "updatedAt":  "2020-07-02T16:53:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzEyMjQ3OA==",
                                           "createdAt":  "2020-07-02T17:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Yeah we did but that doesn’t update the testhost because System.Private.CoreLib configuration has to match the whole runtime. What I do when I change System.Private.CoreLib and want to iterate on it to test again I run:\n\n```\nbuild.cmd clr.corelib+clr.nativecorelib+libs.pretest -rc \u003cRuntimeConfig\u003e\n```\n\nthat will build Corelib, will run cross gen in it and will bin place it in the testhost.",
                                           "updatedAt":  "2020-07-02T17:03:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE0MjYyMA==",
                                           "createdAt":  "2020-07-02T17:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@felipepessoto does that work for you?\r\n\r\nI would not have figured that out. I wonder whether this is worth adding as an example to `build -?` and also documenting in `docs/workflow/building/libraries/README.md`. It\u0027s always good when we couch docs/help in terms of \"if you want to do common thing X, then use this command line Y\".",
                                           "updatedAt":  "2020-07-02T17:50:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE0ODc4Mg==",
                                           "createdAt":  "2020-07-02T18:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "felipepessoto",
                                           "body":  "I\u0027ll try it.\r\n@safern, do you also know the easiest way to debug System.Private.CoreLib? Like the Number  class",
                                           "updatedAt":  "2020-07-02T18:04:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE1NTAwOA==",
                                           "createdAt":  "2020-07-02T18:19:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "\u003e  I wonder whether this is worth adding as an example to build -? and also documenting in docs/workflow/building/libraries/README.md\r\n\r\nYeah makes sense, I\u0027ll add it. \r\n\r\n\u003e I\u0027ll try it.\r\n\u003e @safern, do you also know the easiest way to debug System.Private.CoreLib? Like the Number class\r\n\r\nI usually just use the VS Test explorer and set breakpoints in System.Private.CoreLib source code ",
                                           "updatedAt":  "2020-07-02T18:19:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE2Nzk3Mg==",
                                           "createdAt":  "2020-07-02T18:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "felipepessoto",
                                           "body":  "\u003e @felipepessoto does that work for you?\r\n\u003e \r\n\u003e I would not have figured that out. I wonder whether this is worth adding as an example to `build -?` and also documenting in `docs/workflow/building/libraries/README.md`. It\u0027s always good when we couch docs/help in terms of \"if you want to do common thing X, then use this command line Y\".\r\n\r\nWorked very well. Now it takes 30~60 seconds to compile, much better than 12 minutes. Thanks.",
                                           "updatedAt":  "2020-07-02T18:49:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE3Mjk1NA==",
                                           "createdAt":  "2020-07-02T19:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJQDxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "felipepessoto",
                                                                               "createdAt":  "2020-07-02T19:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "safern",
                                           "body":  "\u003e Worked very well. Now it takes 30~60\r\n\r\nBtw, if you pass down the `-build` action to the script it will be faster since it will not do any of the `-restore` routines. i.e:\r\n\r\n```\r\nbuild.cmd clr.corelib+clr.nativecorelib+libs.pretest -build -rc \u003cRuntimeConfig\u003e\r\n```",
                                           "updatedAt":  "2020-07-02T19:01:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE3OTY5NQ==",
                                           "createdAt":  "2020-07-02T19:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Shouldn\u0027t restore be super fast now, if it\u0027s already run?",
                                           "updatedAt":  "2020-07-02T19:18:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzE4MDQwNQ==",
                                           "createdAt":  "2020-07-02T19:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "\u003e Shouldn\u0027t restore be super fast now, if it\u0027s already run?\r\n\r\nIt is, but in this case since you\u0027re using `build.cmd` it takes a few seconds to run the global tools install that arcade does for `Tools.props` etc, so it saves some seconds. ",
                                           "updatedAt":  "2020-07-02T19:20:07Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Remove unsafe code from number parsing",
        "labels":  [
                       "area-System.Numerics",
                       "help wanted",
                       "Cost:M",
                       "reduce-unsafe"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28657",
        "createdAt":  "2019-02-08T22:58:24Z",
        "number":  28657,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAq2iag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tannergooding",
                                            "createdAt":  "2019-02-08T23:08:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2019-06-19T11:04:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-06-09T18:42:36Z",
        "body":  "Once upon a time it seems as though System.Runtime.Numerics forked the integer formatting/parsing code that\u0027s in CoreLib.  That CoreLib code has since evolved, and is also now being mirrored to corefx, where System.Runtime.Numerics could include it rather than maintaining its own copy.\r\n\r\ncc: @tannergooding ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMyOTUg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODU1Njk4NA==",
                                           "createdAt":  "2019-10-04T20:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nabeelvalley",
                                           "body":  "Hi, is this still open? What\u0027s needed on this?",
                                           "updatedAt":  "2019-10-04T20:56:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODYwODc1Mg==",
                                           "createdAt":  "2019-10-05T02:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e is this still open?\r\n\r\nYes\r\n\r\n\u003e What\u0027s needed on this?\r\n\r\nThe file\r\nhttps://github.com/dotnet/corefx/blob/master/src/Common/src/System/Globalization/FormatProvider.Number.cs\r\nis now a stale copy of  https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Number.Formatting.cs\r\nthough there\u0027s likely some functionality in the former that no longer exists in the latter but that\u0027s still needed for BigInteger.\r\n\r\nThe work here is to rationalize the difference and get to a point where the System.Runtime.Numerics library (which is currently including the former) can instead include the latter, and do so without negatively impacting the performance of code currently using the latter.",
                                           "updatedAt":  "2019-10-05T02:28:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODYxMjI2MA==",
                                           "createdAt":  "2019-10-05T03:31:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@nabeelvalley  want to take a shot at this work?",
                                           "updatedAt":  "2019-10-05T03:31:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODY1MjkxMw==",
                                           "createdAt":  "2019-10-05T14:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nabeelvalley",
                                           "body":  "@danmosemsft / @stephentoub I\u0027d like to look at it, still a little unclear about what exactly is needed though, and also what background knowledge/info would I need to work on this?",
                                           "updatedAt":  "2019-10-05T14:08:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODcxMDIzMA==",
                                           "createdAt":  "2019-10-06T04:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@nabeelvalley its pretty much what\u0027s described above. You could take a look at the code mentioned maybe.\r\n\r\nFor a first contribution though, you could look at a smaller change if you want to ? There are a lot of issues marked \"up for grabs\" you could choose from.",
                                           "updatedAt":  "2019-10-06T04:13:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzOTYyODEwOQ==",
                                           "createdAt":  "2019-10-08T17:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nabeelvalley",
                                           "body":  "Hi @danmosemsft , thanks, I\u0027ve taken a look and it seems a bit out of my depth at the moment, but I will look at what else is around",
                                           "updatedAt":  "2019-10-08T17:51:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzOTc3NjEyNQ==",
                                           "createdAt":  "2019-10-09T01:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@nabeelvalley ok, not a problem, hope to see you elsewhere in the repo!",
                                           "updatedAt":  "2019-10-09T01:24:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODQ0NjE5NA==",
                                           "createdAt":  "2020-06-23T21:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-23T21:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODI4MzkyNg==",
                                           "createdAt":  "2020-10-14T09:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "@stephentoub is that still the case with the consolidated repo?",
                                           "updatedAt":  "2020-10-14T09:34:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODMzNDczMQ==",
                                           "createdAt":  "2020-10-14T11:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Yup",
                                           "updatedAt":  "2020-10-14T11:14:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzUwMjE5NA==",
                                           "createdAt":  "2021-06-09T08:35:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Looking at this. `Number` is using a lot of CoreLib internals. Though many of them isn\u0027t required by System.Runtime.Numerics, it isn\u0027t factored to be included only a part. Some others like FastAllocateString are critical to performance.\r\nFolding it into CoreLib doesn\u0027t sound correct to me. @stephentoub any thoughts here?",
                                           "updatedAt":  "2021-06-09T08:35:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzU2ODI3NQ==",
                                           "createdAt":  "2021-06-09T10:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "It does help a lot to fold into CoreLib, but it doesn\u0027t sound correct that *anything numeric related are required to be in CoreLib to get best performance*.\r\n\r\nCurrently blockers to compile `Number` out of CoreLib:\r\n- FastAllocateString. How does `ValueStringBuilder` perform comparing to it?\r\n- Decimal/Half manipulating. Can become public API, or use reinterpret cast.\r\n- NumberFormatInfo internals. They are all available through public API, however those APIs has to defensive copy for array-returning members.\r\n  - This also means that any third-party library can\u0027t utilize `NumberFormatInfo` with good performance",
                                           "updatedAt":  "2021-06-09T10:10:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Nzg3NDY4MQ==",
                                           "createdAt":  "2021-06-09T17:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e anything numeric related are required to be in CoreLib to get best performance\r\n\r\nIt is likely always going to be the case that internal implementation details of corelib can be utilized to eek out the best perf.  For example, you mention FastAllocateString: that will never be exposed publicly, because it\u0027s an implementation detail of creating a mutable System.String that\u0027s written to and then published for immutable consumption.  The public version of that is `String.Create`, which enables the same functionality but in a safe, span-based manner, the primary overhead of which is an extra delegate invocation.\r\n\r\n\u003e it isn\u0027t factored to be included only a part\r\n\r\nWork here could include refactoring to split the file into pieces compiled into both assemblies and pieces that are unique to one or the other.  It could also (if feasible) involve changing portions of the BigInteger code to sit on top of public API instead where that\u0027s possible functionally and without significantly impacting performance.",
                                           "updatedAt":  "2021-06-09T17:05:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Nzk2OTQ5MA==",
                                           "createdAt":  "2021-06-09T18:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Yep. After looking a bit more, the only required thing is `NumberFormatInfo`. It\u0027s API shape is unfriendly for performance, and the number formatting code access internal fields directly to avoid defensive copy. I think it\u0027s better to open a new issue for discussing it.",
                                           "updatedAt":  "2021-06-09T18:42:36Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Unify CoreLib/System.Runtime.Numerics formatting/parsing code",
        "labels":  [
                       "area-System.Numerics",
                       "help wanted",
                       "Cost:M"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12139",
        "createdAt":  "2019-02-27T20:33:21Z",
        "number":  12139,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-14T18:02:06Z",
        "body":  "ARM/ARM64 currently return `0` for `Math.Pow(double.Epsilon, 1)` when it should be returning `double.Epsilon`. My best guess is that the implementation is not properly special casing `y=1`.\r\n\r\ncategory:correctness\r\ntheme:jit-intrinsics\r\nskill-level:beginner\r\ncost:small",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAGUVA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODAxOTQ4OA==",
                                           "createdAt":  "2019-02-27T20:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @AndyAyersMS logged this to track the underlying issue for https://github.com/dotnet/coreclr/pull/22802",
                                           "updatedAt":  "2019-02-27T20:33:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODAxOTc1OA==",
                                           "createdAt":  "2019-02-27T20:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There are other various cross-platform differences for the various Math functions so I am putting this into `future`.",
                                           "updatedAt":  "2019-02-27T20:34:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_sBlF",
                                           "createdAt":  "2022-03-15T21:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "echesakov",
                                           "body":  "Un-assigning myself\r\ncc @BruceForstall ",
                                           "updatedAt":  "2022-03-15T21:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUB5y",
                                           "createdAt":  "2022-04-28T18:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "@tannergooding can you update the status of this issue?",
                                           "updatedAt":  "2022-04-28T18:49:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUMsX",
                                           "createdAt":  "2022-04-28T19:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nARM/ARM64 currently return `0` for `Math.Pow(double.Epsilon, 1)` when it should be returning `double.Epsilon`. My best guess is that the implementation is not properly special casing `y=1`.\r\n\r\ncategory:correctness\r\ntheme:jit-intrinsics\r\nskill-level:beginner\r\ncost:small\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `arch-arm32`, `arch-arm64`, `area-System.Numerics`, `Priority:3`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-28T19:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUMxh",
                                           "createdAt":  "2022-04-28T19:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Issue is still present and should be eventually resolved. This isn\u0027t really a codegen issue, but rather an implementation issue with the underlying CRT implementation we defer to, so I\u0027ve changed the area path.",
                                           "updatedAt":  "2022-04-28T19:44:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAZRU",
                                           "createdAt":  "2023-08-14T18:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is a \"fix anytime\" issue. It may eventually get picked up alongside other determinism changes that happen",
                                           "updatedAt":  "2023-08-14T18:02:06Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ARM/ARM64 returns an incorrect result for `pow(x, 1)`",
        "labels":  [
                       "bug",
                       "arch-arm32",
                       "arch-arm64",
                       "area-System.Numerics",
                       "help wanted",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29193",
        "createdAt":  "2019-04-08T00:42:47Z",
        "number":  29193,
        "author":  "ahsonkhan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBvHF-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petterton",
                                            "createdAt":  "2019-04-19T19:56:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2019-07-22T14:55:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CShepartd",
                                            "createdAt":  "2019-09-26T14:04:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrew-boyarshin",
                                            "createdAt":  "2020-06-13T15:50:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2021-04-23T08:29:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS4Code",
                                            "createdAt":  "2021-06-17T11:55:13Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-03-20T22:45:33Z",
        "body":  "@verelpode commented on [Sun Apr 07 2019](https://github.com/dotnet/corefxlab/issues/2655)\n\n[System.Numerics.BigInteger](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger) is really great, except for a few issues that could be easily fixed.  \r\n\r\n## Nasty conversion from 128-bit integer to BigInteger\r\nCurrently, in order to convert a 128-bit integer to BigInteger, it requires the following ugly workaround that creates **4** instances of BigInteger including the 4 internal array objects on the heap!  When this conversion is performed many times in a loop, it creates a bunch of unnecessary garbage for GC.\r\n\r\n```\r\npublic static BigInteger UInt128ToBigInteger(UInt64 lowPart, UInt64 highPart)\r\n{\r\n\tif (highPart == 0) return new BigInteger(lowPart);\r\n\treturn (new BigInteger(highPart) \u003c\u003c 64) | new BigInteger(lowPart);\r\n}\r\n\r\npublic static BigInteger SInt128ToBigInteger(UInt64 lowPart, Int64 highPart)\r\n{\r\n\tif (highPart == 0) return new BigInteger(lowPart);\r\n\tif (highPart == -1) return BigInteger.Negate(new BigInteger(unchecked((~lowPart) + 1)));\r\n\treturn (new BigInteger(highPart) \u003c\u003c 64) | new BigInteger(lowPart);\r\n}\r\n```\r\n\r\nI suggest adding the following optimized constructors to BigInteger:\r\n\r\n```\r\n// For unsigned 128-bit integer:\r\npublic BigInteger(UInt64 lowPart, UInt64 highPart) { ... }\r\n\r\n// For signed 128-bit integer:\r\npublic BigInteger(UInt64 lowPart, Int64 highPart) { ... }\r\n\r\n// For 128-bit integer with sign supplied separately (this is useful):\r\npublic BigInteger(UInt64 lowPart, UInt64 highPart, bool isNegative) { ... }\r\n```\r\n\r\n## Construct from array of UInt32\r\nI\u0027d also enjoy an efficient constructor that uses an array of UInt32 like the internal \"_bits\" field inside BigInteger:\r\n\r\n```\r\npublic BigInteger(UInt32[] data, bool isNegative, bool useDirectly = false) { ... }\r\n```\r\n\r\nThe \"data\" parameter represents the words of an unsigned integer and the sign is supplied separately via the \"isNegative\" parameter.\r\nBy default, it would copy the \"data\" parameter to a new array instance, but if \"useDirectly\" is true, then it\u0027d directly store the \"data\" reference to the internal \"_bits\" field inside BigInteger.  This is quite helpful to enable various high-performance optimizations for situations where many math calculations are performed using BigInteger -- big number-crunching situations.  \r\n(\"useDirectly\" would be defined as a preference to respect \"if possible\", not strict requirement, thus the implementation of BigInteger would still be permitted to copy \"data\" regardless of useDirectly, thus the BigInteger implementation is not required to forever keep \"_bits\" as UInt32 array in future versions.)\r\n\r\n## Copy to array of UInt32\r\nFor the opposite direction, it\u0027d be great to have a method that copies \"_bits\" to the specified array:\r\n```\r\n// \"destinationOffset\" is offset/ordinal/index within \"destinationArray\".\r\n/// \u003creturns\u003eLength copied to \"destinationArray\".  Returns 0 if BigInteger.IsZero.\u003c/returns\u003e\r\npublic int ToArray(uint[] destinationArray, int destinationOffset, out bool outNegative)\r\n{\r\n\toutNegative = (_sign \u003c 0);\r\n\t...\r\n\tif (_bits is null)\r\n\t{\r\n\t\tif (_sign == 0) return 0;\r\n\t\tdestinationArray[destinationOffset] = unchecked((uint)Math.Abs(_sign));\r\n\t\treturn 1;\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n## Typecast but with failure reported as null instead of OverflowException\r\nIt\u0027d be very useful to have the following \"TryConvertToXXXX\" methods that would attempt to typecast/convert the BigInteger *without* throwing System.OverflowException, unlike the existing typecast operators in BigInteger.  The following methods should return null if conversion is unsucccessful (meaning return null if the BigInteger does not fit within the specified smaller integer type).\r\n```\r\npublic Int32? TryConvertToInt32() { ... }\r\npublic Int64? TryConvertToInt64() { ... }\r\npublic UInt32? TryConvertToUInt32() { ... }\r\npublic UInt64? TryConvertToUInt64() { ... }\r\n```\r\nIn the case of converting to unsigned UInt64, if the BigInteger is less than zero (UInt64.MinValue) or greater than UInt64.MaxValue, then TryConvertToUInt64 would return null.\r\n\r\nFor 128-bit integers, the following TryConvertToInt128 method would return true if the conversion is successful.  The sign would be output separately via the boolean \"outNegative\" parameter (I\u0027ve found that separated sign is quite useful), thus the \"outLowPart\" and \"outHighPart\" parameters are in-effect set to what would be the result of `BigInteger.Abs`.\r\n```\r\npublic bool TryConvertToInt128(out UInt64 outLowPart, out UInt64 outHighPart, out bool outNegative)\r\n{\r\n\toutNegative = (_sign \u003c 0);\r\n\t...\r\n}\r\n\r\n// Conversion to unsigned 128-bit integer:\r\npublic bool TryConvertToUInt128(out UInt64 outLowPart, out UInt64 outHighPart)\r\n{\r\n\tbool neg;\r\n\treturn (this.TryConvertToInt128(out outLowPart, out outHighPart, out neg) \u0026\u0026 !neg);\r\n}\r\n\r\n// Conversion to signed 128-bit integer with high part represented as signed 64-bit integer:\r\npublic bool TryConvertToInt128(out UInt64 outLowPart, out Int64 outHighPart)\r\n{\r\n\tUInt64 unsignedHighPart;\r\n\tbool neg;\r\n\tif (this.TryConvertToUInt128(out outLowPart, out unsignedHighPart, out neg))\r\n\t{\r\n\t\tif (neg)\r\n\t\t{\r\n\t\t\tif (unsignedHighPart \u003c= unchecked((UInt64)Int64.MinValue))\r\n\t\t\t{\r\n\t\t\t\toutHighPart = unchecked(-(Int64)unsignedHighPart);\r\n\t\t\t\treturn true; // success\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ((unsignedHighPart \u003e\u003e 64) == 0)\r\n\t\t{\r\n\t\t\toutHighPart = unchecked((Int64)unsignedHighPart);\r\n\t\t\treturn true; // success\r\n\t\t}\r\n\t}\r\n\toutLowPart = 0;\r\n\toutHighPart = 0;\r\n\treturn false; // unsuccessful\r\n}\r\n```\r\n\r\nIf desired, TryConvertToXXXX could also be supported for floating-point as follows.\r\n```\r\npublic double? TryConvertToFloat64() { ... }\r\npublic single? TryConvertToFloat32() { ... }\r\npublic decimal? TryConvertToDecimal() { ... }\r\n```\r\nNote TryConvertToFloat64 etc should only return exactly converted values.  If the BigInteger would be inexactly/approx represented by float64 (System.Double), then null should be returned.  If you want an inexact conversion to float64, then use the preexisting `public static explicit operator Double(BigInteger value)` that is already present in BigInteger.  Alternatively, if desired, TryConvertToFloat64 might have a parameter to control exact versus inexact conversion, as follows:\r\n```\r\npublic double? TryConvertToFloat64(bool approximation = false) { ... }\r\npublic single? TryConvertToFloat32(bool approximation = false) { ... }\r\npublic decimal? TryConvertToDecimal(bool approximation = false) { ... }\r\n```\r\n\r\n## Tiny mistake in BigInteger.Abs, easily improved\r\nThe existing `BigInteger.Abs` method is useful but seems to be mistakenly implemented inefficiently:\r\n```\r\npublic static BigInteger Abs(BigInteger value)\r\n{\r\n    return (value \u003e= BigInteger.Zero) ? value : -value;\r\n}\r\n```\r\nI think it should be changed to:\r\n```\r\npublic static BigInteger Abs(BigInteger value)\r\n{\r\n    return (value._sign \u003c 0) ? -value : value;\r\n}\r\n```\r\n\r\n## GetBitLength\r\nA \"GetBitLength\" method would also be useful.  It would return the number of binary bits consumed by an absolute/unsigned/positive representation of the binary integer (excluding any leading zero bits).  The result is the same regardless of whether the BigInteger is positive or negative.  If BigInteger.IsZero, then GetBitLength returns 0.\r\n```\r\npublic uint GetBitLength() { ... }\r\n```\r\n\r\n## BigInteger result from 64-bit operands\r\nIt\u0027d be good to have math operations that produce a BigInteger result from two 64-bit operands, as follows:\r\n```\r\npublic static BigInteger Add(Int64 left, Int64 right) { ... }\r\npublic static BigInteger Add(UInt64 left, UInt64 right) { ... }\r\npublic static BigInteger Subtract(Int64 left, Int64 right) { ... }\r\npublic static BigInteger Subtract(UInt64 left, UInt64 right) { ... }\r\npublic static BigInteger Multiply(Int64 left, Int64 right) { ... }\r\npublic static BigInteger Multiply(UInt64 left, UInt64 right) { ... }\r\n// Divide(Int64,Int64) is not applicable.\r\n\r\n// Already exists:\r\npublic static BigInteger Add(BigInteger left, BigInteger right) { ... }\r\npublic static BigInteger Subtract(BigInteger left, BigInteger right) { ... }\r\npublic static BigInteger Multiply(BigInteger left, BigInteger right) { ... }\r\n```\r\n\r\n## Two operations in one\r\nAlso worth considering:\r\n```\r\npublic static BigInteger MultiplyAdd(BigInteger inOperandA, BigInteger inOperandB, BigInteger inOperandC)\r\n{\r\n\t// To be optimized now or in future with use of System.Numerics.BigIntegerBuilder.\r\n\treturn (inOperandA * inOperandB) + inOperandC;\r\n}\r\n\r\npublic static BigInteger MultiplyAdd(BigInteger inOperandA, sint64 inOperandB, sint64 inOperandC)\r\n{\r\n\t// To be optimized now or in future with use of System.Numerics.BigIntegerBuilder.\r\n\treturn (inOperandA * inOperandB) + inOperandC;\r\n}\r\n\r\n```\n\n---\n\n@verelpode commented on [Sun Apr 07 2019](https://github.com/dotnet/corefxlab/issues/2655#issuecomment-480636327)\n\nThe last one, MultiplyAdd, is intended to be like:  https://en.wikipedia.org/wiki/Multiply–accumulate_operation\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORYTQsg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDY2NjQzNQ==",
                                           "createdAt":  "2019-04-08T02:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@verelpode. Thanks for taking the time to log this.\r\n\r\nIt would be nice if the original issue could be broken up into a few concrete proposals that follow the \"good example\" template given here: https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md#steps. This will help us prioritize and review the individual API proposals as necessary.\r\n\r\nIt\u0027s probably worth mentioning that I\u0027ve given some thought to the issues frequently brought up around `BigInteger` and I\u0027ve been meaning to create a proposal around it, but haven\u0027t managed to find the time to do so yet. The gist behind that proposal would be extending `BigInteger` to have a `BigInteger.Builder` type. This type would be mutable, growable, and follow the existing pattern we have for other immutable structs. It should help resolve many of the allocation problems people have when performing multiple operations with `BigInteger`.\r\n\r\n\u003e Nasty conversion from 128-bit integer to BigInteger\r\n\r\nI want to think about this one some more as there have also been some discussions around exposing proper `Int128`/`UInt128` types (an issue tracking us prototyping them can be seen here: https://github.com/dotnet/corefxlab/issues/2635). We might also be able to largely solve this issue using the builder pattern.\r\n\r\n\u003e Construct from array of UInt32\r\n\u003e Copy to array of UInt32\r\n\r\nWe already have internal methods that do this and public versions that take/return `byte`. I think these are probably fine to make public provided we can do this in a safe cross-platform/architecture manner.\r\n\r\n\u003e Typecast but with failure reported as null instead of OverflowException\r\n\r\nI\u0027m generally okay with exposing methods that are `TryConvertToX`, but they should follow our existing API pattern for this; which is to return a `bool` and have the result in an `out` parameter. We should likely also consider exposing plain `ConvertToX` methods for contrast (as I believe the non-throwing methods would be the explicit casts otherwise).\r\n\r\n\u003e Tiny mistake in BigInteger.Abs, easily improved\r\n\r\nThis shouldn\u0027t need an API review and it should be fine to submit a PR (bonus points for including benchmark numbers).\r\n\r\n\u003e GetBitLength\r\n\r\nI think being able to get the length of a `BigInteger` is ok. However, it should probably be in `bytes` for consistency with other APIs and since that is the smallest size we can deal with anyways.\r\n\r\n\u003e BigInteger result from 64-bit operands\r\n\r\nI think this will largely be resolved by the `Builder` pattern I mentioned at the top.\r\n\r\n\u003e Two operations in one\r\n\r\nI want to think about this more as this is also something that comes up for things like `Tensor`, vectorization, or machine learning. We might also be able to handle this in the `Builder` pattern by exposing the underlying data in some manner...\r\n\r\nThe root problem is that when performing a operations over an array, it can be very inefficient to walk the array twice when the operations could instead be merged into the same \"loop\". This can be partially solved by exposing specialized operations, but this can quickly bloat the exposed API surface area....\r\n\r\nIt would be nice if we had a centralized place that handled these or if their was some way to tell the runtime that two operations could be \"merged\" together...",
                                           "updatedAt":  "2019-04-08T02:58:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg3ODI4MA==",
                                           "createdAt":  "2019-04-08T15:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "Hi Tanner, thanks for the quick reply.  Here\u0027s my thoughts on those issues:\r\n\r\n\u003e The gist behind that proposal would be extending BigInteger to have a BigInteger.Builder type. This type would be mutable, growable,\r\n\r\nIndeed BigInteger.Builder would make BigInteger much more powerful, especially when an algorithm runs in a loop and must perform many iterations and each iteration modifies/mutates the same local variables of type BigInteger.Builder.\r\n\r\n\u003e exposing proper Int128/UInt128 types\r\n\r\nWould be useful.  One useful ability of Int128 is that when you multiply, add, or subtract two Int64 operands to produce a Int128 result, it is guaranteed not to overflow.  Sometimes it is desirable to check if the result no longer fits in Int64 and then perform a different action using the Int128 value, instead of aborting the program or method with OverflowException.  Catching OverflowException is not a good solution because exceptions are relatively expensive to throw and catch, and OverflowException still doesn\u0027t provide the result of the multiply/add/subtract.\r\n\r\n## ToArray / ToByteArray / ToUInt32Array\r\n\u003e We already have internal methods that do this and public versions that take/return byte.\r\n\r\nCurrently, it is problematic when you want to move data into or out of BigInteger.  Although public BigInteger.ToByteArray() already exists, unfortunately it creates a new instance of the array.  I\u0027d prefer to be able to do it like this example:\r\n\r\n```\r\nBigInteger a = ...;\r\nBigInteger b = ...;\r\nBigInteger c = ...;\r\nint bufferLen = a.ByteLength + b.ByteLength + c.ByteLength;\r\nbyte[] buffer = new byte[bufferLen];\r\nint currentOffset = 0;\r\nint integerLen;\r\na.ToArray(buffer, currentOffset, out integerLen);\r\ncurrentOffset += integerLen;\r\nb.ToArray(buffer, currentOffset, out integerLen);\r\ncurrentOffset += integerLen;\r\nc.ToArray(buffer, currentOffset, out integerLen);\r\ncurrentOffset += integerLen;\r\n```\r\n\r\nThus the following methods and properties would be created in BigInteger:\r\n\r\n```\r\npublic int ByteLength { get; }\r\npublic int BitLength { get; }\r\npublic void ToArray(byte[] destinationArray, int destinationOffset, out int outLengthWritten, out bool outNegative);\r\npublic void ToArray(UInt32[] destinationArray, int destinationOffset, out int outLengthWritten, out bool outNegative);\r\n// And if desired, could also support UInt64 array:\r\npublic void ToArray(UInt64[] destinationArray, int destinationOffset, out int outLengthWritten, out bool outNegative);\r\n```\r\n\r\n\u003e provided we can do this in a safe cross-platform/architecture manner.\r\n\r\nIn that case, in order to improve cross-platform portability, I suggest that the sign be output as a boolean \"is negative\" parameter instead of outputting two\u0027s complement representation.\r\n\r\n## New BigInteger from ArraySegment\r\nI suggest creating the following constructors that would copy/convert an ArraySegment into a new BigInteger instance:\r\n```\r\npublic BigInteger(System.ArraySegment\u003cbyte\u003e data, bool isNegative) { ... }\r\n\r\n// Maybe also support both little-endian and big-endian via an \"isBigEndian\" parameter:\r\npublic BigInteger(System.ArraySegment\u003cbyte\u003e data, bool isNegative, bool isBigEndian = false) { ... }\r\n\r\n// More efficient than byte array is to use UInt32 array:\r\npublic BigInteger(System.ArraySegment\u003cUInt32\u003e data, bool isNegative) { ... }\r\n\r\n// If desired, could also support UInt64 array:\r\npublic BigInteger(System.ArraySegment\u003cUInt64\u003e data, bool isNegative) { ... }\r\n```\r\n\r\nThe input ArraySegment would contain simply the absolute/unsigned representation of the integer, not two\u0027s complement, and the sign would be provided separately via the boolean \"isNegative\" parameter.  In my experience, a boolean \"isNegative\" parameter is easier to understand, easier to use, more reliable, and more portable (cross-platform) than using two\u0027s complement in a BigInteger or BigNumber or BigRational.\r\n\r\n\r\n## TryConvertToX and ConvertToX\r\n\u003e I\u0027m generally okay with exposing methods that are TryConvertToX, but they should follow our existing API pattern for this; which is to return a bool and have the result in an out parameter. \r\n\r\nThat\u0027s a good point, but here is another good point:  That API pattern was designed before `System.Nullable\u003cT\u003e` existed, and also before C# supported the ability to make a function return multiple result values with the help of `ValueTuple`.   If the API pattern was designed today, then I believe people would use either `Nullable\u003cT\u003e` or return `ValueTuple`, instead of the old style of return bool + out parameter.   It is also interesting to note that when any method has both a return value and one or more output parameters, then it is kind of a violation of functional programming principles and C# async methods that return `Task\u003cT\u003e`.  Generally speaking, at least in theory, an API is more modern or more \"functional\" when it doesn\u0027t define a return value AND out parameters in the same method:  It should use EITHER out parameters or a return value or multiple return values via ValueTuple.\r\n\r\nIn other words, one can say that ideally/preferably a method should be designed as either a pure \"function\" or a \"procedure\", not a mix of both.  I\u0027m trying to adopt this modern principle, but admittedly in practice it is sometimes convenient to define return value and out params in the same method, even if it does kind of violate functional programming principles and C# async methods.\r\n\r\n\u003e We should likely also consider exposing plain ConvertToX methods for contrast \r\n\r\nI agree.\r\n\r\n```\r\npublic Int64 ConvertToInt64()\r\n{\r\n    Int64? nv = this.TryConvertToInt64();\r\n    if (nv.HasValue) return nv.GetValueOrDefault();\r\n    throw new System.OverflowException();\r\n}\r\n```\r\n\r\n## ByteLength and BitLength\r\n\u003e I think being able to get the length of a BigInteger is ok. However, it should probably be in bytes for consistency with other APIs and since that is the smallest size we can deal with anyways.\r\n\r\nI think both are useful.  **ByteLength** is especially useful in combination with ToByteArray/ToArray methods.  And **BitLength** is useful in certain algorithms, for example:\r\n\r\n```\r\n/// \u003csummary\u003eCalculates the integer part of logarithm of inNumber or Floor(Log(inBase,inNumber)).\u003c/summary\u003e\r\npublic static uint64 IntegerLogarithm(uint32 inBase, BigInteger inNumber)\r\n{\r\n    ...\r\n    if (inBase == 2)\r\n        return inNumber.BitLength - 1; // Floor(Log(2,number)) == number.BitLength-1 == IntegerLength(number,2)-1\r\n    ...\r\n}\r\n```\r\n\r\nExample implementation of BitLength:\r\n```\r\npublic int BitLength\r\n{\r\n    get {\r\n        int sourceSign = this._sign;\r\n        if (sourceSign == 0) return 0;\r\n        uint[] sourceArray = this._bits;\r\n        if (sourceArray != null)\r\n        {\r\n            int lastOrd = GetMinimumWordCount(sourceArray) - 1; // excluding leading zero words.\r\n            if (lastOrd \u003c 0) return 0;\r\n            int lastWordBitCount = 32 - CountLeadingZeroBits32(sourceArray[lastOrd]);\r\n            return checked( (lastOrd * 32) + lastWordBitCount );\r\n        }\r\n        uint absSmallValue;\r\n        if (sourceSign \u003c 0) absSmallValue = unchecked((uint)(-sourceSign));\r\n        else absSmallValue = unchecked((uint)sourceSign);\r\n        if (absSmallValue == 1) return 1;\r\n        return unchecked(32 - CountLeadingZeroBits32(absSmallValue));\r\n    }\r\n}\r\n```\r\n\r\n## Resulting Sign of Bitwise Operators\r\nCurrently the documentation says:\r\n_\"The BitwiseAnd method performs the bitwise And operation on two BigInteger values as if they were both in two\u0027s complement representation with virtual sign extension.\"_\r\n\r\nThat surprised me because I presumed that bitwise AND, OR, and XOR in BigInteger should **not** use two\u0027s complement, and instead should calculate the result sign by applying the same bitwise operator to the sign bits, meaning:\r\n1. Calculate the boolean \"is negative\" status of operand A.\r\n2. Calculate the boolean \"is negative\" status of operand B.\r\n3. `bool resultIsNegative = aIsNegative \u0026 bIsNegative;`\r\n\r\nThe same technique is applicable to BAND, BOR, and BXOR:\r\n```\r\nbool bandResultIsNegative = aIsNegative \u0026 bIsNegative;\r\nbool borResultIsNegative  = aIsNegative | bIsNegative;\r\nbool bxorResultIsNegative = aIsNegative ^ bIsNegative;\r\n```\r\n\r\nCorrect me if I\u0027m wrong, but I think this technique will produce the same sign as if two\u0027s complement is used, therefore you could switch over to this technique even without breaking compatibility with the existing behavior of the bitwise operators in BigInteger and in regular System.Int32.  Admittedly I haven\u0027t fully tested this, but off the top of my head, I think I\u0027m correct in saying the above.\r\n\r\nThe existing version of BigInteger is already an excellent help and looks well-designed and well-implemented -- I like it a lot -- but a few extra methods as described above would increase the usability and performance of BigInteger, especially if we could eliminate the difficulty of efficiently moving data into and out of BigInteger, via the addition of constructors that take `ArraySegment\u003cUInt32\u003e` and a `ToArray` method that doesn\u0027t create a new array instance, and use of efficient UInt32 array instead of unnecessary extra cost incurred for conversion between byte array and internal UInt32 array.\r\n\r\n",
                                           "updatedAt":  "2019-04-08T15:22:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg4NzYxMQ==",
                                           "createdAt":  "2019-04-08T15:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e ToArray / ToByteArray / ToUInt32Array\r\n\r\nExposing methods that fill an existing buffer, rather than creating a new one, sound fine and is something we provide in other types. Directly exposing the underlying array (to allow access without any copying) via a `ROSpan\u003cbyte\u003e` might also be possible...\r\n\r\n\u003e New BigInteger from ArraySegment\r\n\r\nMost APIs aren\u0027t taking or using `ArraySegment`, they are using `Span\u003cT\u003e` instead. We would likely do the same here.\r\n\r\n\u003e TryConvertToX and ConvertToX\r\n\r\nCoreFX isn\u0027t only designed for C#, it needs to work for multiple languages. I believe this has come up in API review in the past and the guidance is to still follow the current pattern which returns a `bool` and has an `out T`. This also avoids some other problems that `Nullable\u003cT\u003e` can have, such as no longer allowing atomic access to the underlying value.\r\n\r\n\u003e ByteLength and BitLength\r\n\r\nI agree both can be useful, but if you want the true bit length, then it is likely better exposed as the integral `Log2`.\r\n",
                                           "updatedAt":  "2019-04-08T15:45:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg4OTEyNw==",
                                           "createdAt":  "2019-04-08T15:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "Here\u0027s one more issue that might interest you or other readers.  Firstly, note that every new PC sold today (and every PC sold since the year 2000-and-something) has a 64-bit processor.  Even \"small\" processors such as Intel Atom are 64-bit (some people think that Intel Atom processors are 32-bit but they\u0027re actually 64-bit and run 64-bit Windows well).\r\n\r\nCurrently the BigInteger struct contains these 2 fields:\r\n```\r\npublic struct BigInteger\r\n{\r\n    internal int _sign;\r\n    internal uint[] _bits;\r\n}\r\n```\r\n\r\nThus the struct occupies a minimum of 32 + 64 = 96 bits but actually it occupies 128 bits because the array reference `_bits` needs to be aligned to a 64-bit boundary in RAM.  Considering that the struct normally occupies 128 bits already, this means that 32 bits are currently unused/wasted, so why not take advantage of these unused 32 bits and change the `_sign` field from Int32 to Int64?   The struct would continue to consume the same size, 128 bits, but with the advantage that BigInteger would become capable of representing larger integers inline before resorting to creating an array object.  What do you think?",
                                           "updatedAt":  "2019-04-08T15:49:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDg5NDU2Ng==",
                                           "createdAt":  "2019-04-08T16:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCurQGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-10-28T16:41:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027ve put some thought into modifying `BigInteger` to operate on `native int` (so `UInt64` on 64-bits and `UInt32` on 32-bits) and believe it would allow some measurable perf gains.\r\n\r\nHowever, I also need to follow up on whether breaking binary serialization compatibility here is OK.",
                                           "updatedAt":  "2019-04-08T16:03:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDkwNjQxNA==",
                                           "createdAt":  "2019-04-08T16:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\u003e I\u0027ve put some thought into modifying BigInteger to operate on native int\r\n\r\nThat\u0027s a different issue than what I mentioned.  I was talking about changing the `_sign` field to Int64 _regardless of_ whether the `_bits` field is `UInt32[]` or `UInt64[]`, because the `_bits` field is a reference that causes 64-bit alignment regardless of whether it is a reference to `UInt32[]` or `UInt64[]`.\r\n\r\n\u003e Most APIs aren\u0027t taking or using ArraySegment, they are using Span\u003cT\u003e instead.\r\n\r\nTrue true, I forgot that `Span\u003cT\u003e` replaces `ArraySegment\u003cT\u003e`.\r\n\r\n\u003e Directly exposing the underlying array (to allow access without any copying) via a ROSpan\u003cbyte\u003e might also be possible...\r\n\r\nI think such direct access should be permitted even if it is unsafe, because you can name the method \"UnsafeGetInternalSpan\" or property \"UnsafeDirectSpan\", thus the caller of \"UnsafeDirectSpan\" is clearly warned that it is their own responsibility to be careful when using direct access.  If a programmer doesn\u0027t want to take the risk, then he can simply choose _not_ to use the \"UnsafeDirectSpan\" property.  Whereas if direct access is completely forbidden in the public API, then it is quite frustrating when the only thing stopping us from solving a special-case problem is \"access denied\".\r\n\r\nThus in my opinion access shouldn\u0027t be denied, rather it should say _\"This is unsafe, not recommended, be careful, but it is allowed just in case you need it to solve a problem in a special case.\"_\r\n\r\nHowever, considering that BigInteger is immutable, if the API returns ROSpan not Span, then it\u0027s safe anyway.  Both could be permitted:\r\n```\r\npublic ROSpan\u003cuint\u003e InternalBits { get; }\r\npublic Span\u003cuint\u003e UnsafeInternalBits { get; }\r\n```\r\n\r\n\u003e I agree both can be useful, but if you want the true bit length, then it is likely better exposed as the integral Log2.\r\n\r\nOK.  In order to solve the problem that people don\u0027t know or don\u0027t remember that Log2 == bit length, the Log2 method could have a doc-comment that mentions in `\u003csummary\u003e` or `\u003cremarks\u003e` that Log2 == bit length.\r\n\r\nBigInteger currently contains an implementation of BitLengthOfUInt that can be replaced:\r\n```\r\ninternal static int BitLengthOfUInt(uint x)\r\n{\r\n    int numBits = 0;\r\n    while (x \u003e 0)\r\n    {\r\n        x \u003e\u003e= 1;\r\n        numBits++;\r\n    }\r\n    return numBits;\r\n}\r\n```\r\n\r\nUnfortunately CoreFX or the CLR does not yet support use of the x86 BitScanForward and BitScanReverse instructions (see [#32269](https://github.com/dotnet/corefx/issues/32269)), so in the meantime, a less-bad solution is to use the algorithm from \"Hacker\u0027s Delight\" by H.Warren:\r\n\r\n```\r\npublic static int CountLeadingZeroBits32(uint32 inNumber)\r\n{\r\n    unchecked {\r\n        int x, y, m, n;\r\n        x = (int)inNumber;\r\n        y = -(x \u003e\u003e 16);        // If left half of x is 0,\r\n        m = (y \u003e\u003e 16) \u0026 16;    // set n = 16.  If left half\r\n        n = 16 - m;            // is nonzero, set n = 0 and\r\n        x = x \u003e\u003e m;            // shift x right 16.\r\n                               // Now x is of the form 0000xxxx.\r\n        y = x - 0x100;         // If positions 8-15 are 0,\r\n        m = (y \u003e\u003e 16) \u0026 8;     // add 8 to n and shift x left 8.\r\n        n = n + m;\r\n        x = x \u003c\u003c m;\r\n\r\n        y = x - 0x1000;        // If positions 12-15 are 0,\r\n        m = (y \u003e\u003e 16) \u0026 4;     // add 4 to n and shift x left 4.\r\n        n = n + m;\r\n        x = x \u003c\u003c m;\r\n\r\n        y = x - 0x4000;        // If positions 14-15 are 0,\r\n        m = (y \u003e\u003e 16) \u0026 2;     // add 2 to n and shift x left 2.\r\n        n = n + m;\r\n        x = x \u003c\u003c m;\r\n\r\n        y = x \u003e\u003e 14;           // Set y = 0, 1, 2, or 3.\r\n        m = y \u0026 ~(y \u003e\u003e 1);     // Set m = 0, 1, 2, or 2 resp.\r\n        return (int)(n + 2 - m);\r\n    }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2019-04-08T16:35:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDkwOTkwMQ==",
                                           "createdAt":  "2019-04-08T16:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e That\u0027s a different issue than what I mentioned. I was talking about changing the _sign field to Int64 regardless of whether the _bits field is UInt32[] or UInt64[], because the _bits field is a reference that causes 64-bit alignment regardless of whether it is a reference to UInt32[] or UInt64[].\r\n\r\nYes, and I think it would only be considered if we kept the `_bits` field the same size. Even if most modern computers support 64-bit, not every app runs in 64-bit and we don\u0027t want to regress perf for the 32-bit scenario.\r\n\r\nThe optimal solution would be to make both `_sign` and `_bits` be `native int` so that they can do the most efficient thing for the current platform/architecture.\r\n\r\n\u003e public Span\u003cuint\u003e UnsafeInternalBits { get; }\r\n\r\nI wouldn\u0027t consider exposing this on the readonly `BigInteger` struct as it breaks the semantics of the type. There would, instead, likely be a direct way to get a writeable `Span` from the `Builder` struct.\r\n\r\n\u003e Unfortunately CoreFX or the CLR does not yet support use of the x86 BitScanForward and BitScanReverse instructions (see dotnet/runtime#27382), so in the meantime, a less-bad solution is to use the algorithm from \"Hacker\u0027s Delight\" by H.Warren:\r\n\r\nWe now have `System.Numerics.BitOperations.Log2` which will do the efficient thing on modern hardware (it is implemented using `lzcnt`, where available). Supporting `BitScanForward` and `BitScanReverse` might happen in the future as part of future HWIntrinsic expansion, but that is to be proposed/reviewed/determined.",
                                           "updatedAt":  "2019-04-08T16:44:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDkxODcxMw==",
                                           "createdAt":  "2019-04-08T17:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\r\n\u003e The optimal solution would be to make both _sign and _bits be native int so that they can do the most efficient thing for the current platform/architecture.\r\n\r\nSounds good, but does it cause a problem for you if you need to internally produce a 128bit result from the multiplication (or addition) of two 64bit array elements in _bits?   With the current implementation where _bits is UInt32[], you can simply use UInt64 to multiply (or add) two elements with guaranteed success (without overflow).   Would you lose this ability if you change the array to native int?   Would you need the CLR to give you access to the [CLMUL instruction](https://en.wikipedia.org/wiki/CLMUL_instruction_set)?  The CLMUL instruction computes the 128-bit carry-less product of two 64-bit values.  If I recall correctly, x86 also has another instruction for 128-bit math but I forget the name.\r\n\r\nIn other words, would `native int[] _bits` mean that you would require a hardware-optimized built-in Int128 type?\r\n\r\n\u003e Directly exposing the underlying array (to allow access without any copying) via a ROSpan might also be possible...\r\n\r\nIf you\u0027d like to permit the internal `_bits` field to be changed to a different array type in a future version of CoreFX, then the public API for direct access could be like this:\r\n```\r\npublic int InternalElementSize    // returns either 4 or 8.\r\n{\r\n    get { return sizeof(_bits[0]); }\r\n}\r\n\r\npublic ROSpan\u003cbyte\u003e InternalBits { get { return new ROSpan\u003cbyte\u003e(_bits); } }\r\n\r\n//public Span\u003cbyte\u003e UnsafeInternalBits { get { return new Span\u003cbyte\u003e(_bits); } }\r\n```\r\n\r\nThus the returned span would always be `ROSpan\u003cbyte\u003e` regardless of whether internal `_bits` is an array of byte, UInt32, UInt64, or native int, and it is the caller\u0027s responsibility to read and respect the `InternalElementSize` property when interpreting the `ROSpan\u003cbyte\u003e`.\r\n\r\n\u003e We now have System.Numerics.BitOperations.Log2\r\n\r\nOh, that\u0027s new, great!  Damn, apparently the reason I can\u0027t find it in the Object Browser is that it\u0027s not public ([#35606](https://github.com/dotnet/corefx/pull/35606)).\r\n\r\n",
                                           "updatedAt":  "2019-04-08T17:09:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDkyMjA2Ng==",
                                           "createdAt":  "2019-04-08T17:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Would you need the CLR to give you access to the CLMUL instruction?\r\n\r\nWe will be exposing that via the hardware intrinsics feature in .NET Core 3.0: `System.Runtime.Intrinsics.X86.Pclmulqdq.CarrylessMultiply`.\r\n\r\nBut otherwise, it is all fully implementable via software emulation (and will need to be for the non-x86 codepath). Same as 64-bit arithmetic on a 32-bit machine is done.\r\n\r\n\u003e In other words, would native int[] _bits mean that you would require a hardware-optimized built-in Int128 type?\r\n\r\nNot required, it would just help in some cases for computing the carry per iteration.\r\n\r\n\u003e Oh, that\u0027s new, great! Damn, apparently the reason I can\u0027t find it in the Object Browser is that it\u0027s not public (#35606).\r\n\r\nRight, it will be shipped first in .NET Core 3.0 and was only recently exposed.",
                                           "updatedAt":  "2019-04-08T17:15:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDkyMjg1MQ==",
                                           "createdAt":  "2019-04-08T17:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "There is already [a constructor that accepts `Span\u003cbyte\u003e`](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.-ctor?view=netcore-3.0#System_Numerics_BigInteger__ctor_System_ReadOnlySpan_System_Byte__System_Boolean_System_Boolean_). If the goal of the proposals for new ways of creating `BigInteger` is avoiding allocations, then I think they\u0027re mostly not necessary, since you should be able to implement them yourself using that.\r\n\r\nIf the goal is also convenience, then they could still be useful.",
                                           "updatedAt":  "2019-04-08T17:17:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDk0MTM2OQ==",
                                           "createdAt":  "2019-04-08T18:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\u003e There is already a constructor that accepts Span\u003cbyte\u003e.\r\n\r\nGreat!  I didn\u0027t know that BigInteger has already advanced beyond the version that shipped with VS 2019 this week.\r\n\r\nWhat if the source array is `UInt32[]`?  Can it still be passed to the constructor that accepts `ROSpan\u003cbyte\u003e`?  Thinking about the \"isBigEndian\" parameter and the cross-platform interaction with `System.BitConverter.IsLittleEndian` is giving me a headache.  Even if it\u0027s possible to safely typecast `UInt32[]` to `ROSpan\u003cbyte\u003e`, people are likely to make mistakes with this, therefore I suggest the addition of at least a  `ROSpan\u003cUInt32\u003e` constructor.  Potentially all of the following could be supported:\r\n\r\n```\r\npublic BigInteger (ReadOnlySpan\u003cbyte\u003e value, bool isUnsigned = false, bool isBigEndian = false);\r\npublic BigInteger (ReadOnlySpan\u003cUInt32\u003e value, bool isUnsigned = false);\r\npublic BigInteger (ReadOnlySpan\u003cUInt64\u003e value, bool isUnsigned = false);\r\npublic BigInteger (ReadOnlySpan\u003cnative int\u003e value, bool isUnsigned = false);\r\n```\r\n\r\nShould the \"isBigEndian\" parameter only exist for `ROSpan\u003cbyte\u003e`, not for the others?  If `ROSpan\u003cUInt32\u003e` should have a \"isBigEndian\" parameter, then I believe it should only affect the order of the elements in the UInt32 array, not the order of the bytes within each UInt32.\r\n\r\nI would be satisfied if `ROSpan\u003cUInt32\u003e` only supports little-end-first because I think I\u0027m correct in saying that regardless of architecture **nobody** places uint32 array elements in big-endian order.  The first element in a uint32 or uint64 array is _always_ the little end of the integer AFAIK, even if the CPU is big-endian.  Thus it seems that the \"isBigEndian\" parameter is only relevant for `ROSpan\u003cbyte\u003e`.\r\n",
                                           "updatedAt":  "2019-04-08T18:05:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg1NzU4OA==",
                                           "createdAt":  "2019-04-25T22:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027ve logged https://github.com/dotnet/corefx/issues/37204 proposing a `BigInteger.Builder` type.",
                                           "updatedAt":  "2019-04-25T22:16:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzAyNDQxMQ==",
                                           "createdAt":  "2019-04-26T11:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@tannergooding \r\nJava has BigInteger and BigDecimal, C# only has BigInteger. That\u0027s a pity. I hope C# to have BigDecimal API too.",
                                           "updatedAt":  "2019-04-26T11:27:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzAzMjExMQ==",
                                           "createdAt":  "2019-04-26T12:00:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@ygc369 \r\n\r\nThere has been some discussion about BigDecimal at https://github.com/dotnet/corefx/issues/17267.\r\n\r\nAlso, I suspect [this comment from 2015](https://github.com/dotnet/corefx/issues/2376#issuecomment-158239866) about the related BigRational type might be relevant:\r\n\r\n\u003e Right now I think it\u0027s fair to say that we don\u0027t have any concrete plans to port [BigRational] over to corefx. If you feel that there\u0027s a scenario you\u0027d like to have this functionality for, please open a new issue and we can talk about the necessary shape of the library there, use cases, etc, perhaps using this old BigRational type as a starting point.",
                                           "updatedAt":  "2019-04-26T12:02:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzAzNzc4MA==",
                                           "createdAt":  "2019-04-26T12:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "dotnet/corefxlab#2635 tracks prototyping some of these types, like a BigDecimal type.\r\n\r\nThere is a `System.Numerics.Experimental` project in corefxlab and if someone wants to work on the initial prototype, I\u0027d be happy to take it (for any of the types listed in the meta issue).\r\n\r\nI would just ask you split off the type you plan on working on into it\u0027s own issue on corefxlab and try to capture a rough API shape. That issue can eventually be moved back to CoreFX for the API review when the type is done.",
                                           "updatedAt":  "2019-04-26T12:22:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhNCy",
                                           "createdAt":  "2022-06-25T17:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PaulusParssinen",
                                           "body":  "I believe all points except the `uint[]` constructor \u0026 `CopyTo` are covered by [`UInt128/Int128`](https://github.com/dotnet/runtime/issues/67151) and [Generic Math](https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/)\n\nAlso the `uint` representation of BigInteger is implementation detail and there\u0027s plans to use `nuint` instead.",
                                           "updatedAt":  "2025-03-20T22:45:33Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "BigInteger deficiencies and solutions",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1643",
        "createdAt":  "2019-04-18T01:42:45Z",
        "number":  1643,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC17YAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2019-04-18T01:43:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2020-01-24T22:28:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "airbreather",
                                            "createdAt":  "2020-09-26T12:05:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gerhard17",
                                            "createdAt":  "2022-03-23T07:44:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BurkusCat",
                                            "createdAt":  "2022-06-03T20:50:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-06-13T17:55:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ehosaini",
                                            "createdAt":  "2022-06-13T18:52:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-02-17T04:12:11Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-01-29T21:38:03Z",
        "body":  "The `Math.Round(value, digits, mode)` code returns a close, but not correct result most of the time.\r\n\r\nThe root problem is that the algorithm tries to follow normal mathematical rules to produce the result. However, due to the variable precision in IEEE floating-point numbers, this ultimately causes it to produce a close, but generally incorrect result most of the time and causes it to not accept inputs above a certain range. For example, you can\u0027t round `double.MaxValue` and the larger the input is, the more inaccurate the rounding will be.\r\n\r\nThese functions should be rewritten to be IEEE compliant and to accept any valid finite floating-point input.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnFO2WQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDMyNDUzNg==",
                                           "createdAt":  "2019-04-18T01:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEYNsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "codeconscious",
                                                                               "createdAt":  "2025-01-29T00:52:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "An example of where this fails is: `Math.Round(655.924999999999954525264911353588104248046875, 2, MidpointRounding.AwayFromZero);`\r\n\r\nThe nearest representable value with 2 digits is: `655.91999999999996` (which is the nearest representable value for `655.92` printed with 17 digits of precision), which is `0.004999999999994525264911353588104248046875` away. The next highest representable value with two digits is `655.92999999999995` (which is the nearest representable value for `655.93` printed with 17 digits of precision), which is `0.004999999999995474735088646411895751953125` away.\r\n\r\nFor this case, the `Math.Round` code is scaling the input by 100 and getting exactly `65592.5`, this ends up losing thinking the original value is a midpoint value (it is not, the actual value is just below a midpoint) and rounding away from zero.",
                                           "updatedAt":  "2019-04-18T01:52:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTI3NzQ4OQ==",
                                           "createdAt":  "2020-04-17T14:31:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "`Math.Truncate` works exactly as intended. It is not a rounding function and instead just truncates all bits, always. This means `3.9` is by design returning `3`.\r\n\r\nI need to dig up the notes on `MidpointRounding.ToNegativeInfinity`, ToPositiveInfinity, and ToZero` as I remember there being discussion around there behavior differing.",
                                           "updatedAt":  "2020-04-17T14:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EzL9U",
                                           "createdAt":  "2022-06-13T18:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ehosaini",
                                           "body":  "For `Math.Round(1111_1111_1111_1111.5, 1, MidpointRounding.AwayFromZero)` we get `1111111111111111.6` which we feel might be related to this issue.",
                                           "updatedAt":  "2022-06-13T18:57:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LRYnj",
                                           "createdAt":  "2022-09-29T21:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "We would like to fix this at some point, but it is a non-trivial issue, so this is not guaranteed to happen for .NET 8. Moved to Future for now.",
                                           "updatedAt":  "2022-09-29T21:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cLrpt",
                                           "createdAt":  "2025-01-29T00:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DasNaughtie",
                                           "body":  "Hi Guys, hope all\u0027s well!  Curious to know when you\u0027re going to get round to this issue?  I\u0027ve recently moved an application to Net 8 and ran into this.",
                                           "updatedAt":  "2025-01-29T00:09:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cSkGC",
                                           "createdAt":  "2025-01-29T16:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEe30w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DasNaughtie",
                                                                               "createdAt":  "2025-01-29T16:49:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I\u0027ve recently moved an application to Net 8 and ran into this.\n\n@DasNaughtie There\u0027s been no change in behavior since .NET Framework, this is tracking making an eventual breaking change to the behavior to fix it to do the correct thing.\n\nCould you elaborate on what it is you\u0027re seeing?",
                                           "updatedAt":  "2025-01-29T16:23:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cS9GU",
                                           "createdAt":  "2025-01-29T17:04:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DasNaughtie",
                                           "body":  "After spending a number of hours trying to get to the bottom of this the problem seems to exist with EF core - I\u0027m running a linq query that is correct in VS 2022 but when I execute it profiler is showing me completely different values!  0.005 is being converted to 1 and 0.0004 is being converted to 0.0004000000000000000191686944095437183932517655\n\n",
                                           "updatedAt":  "2025-01-29T17:06:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cTq68",
                                           "createdAt":  "2025-01-29T17:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "You\u0027re observing the raw underlying value in this case.\n\n`float` and `double` are `binary-based floating-point numbers` and so can only exactly represent values that are multiples of some power of 2 (with the multiple changing every power of 2, but with the root multiplier being `T.Epsilon`). Anything that isn\u0027t representable rounds to the nearest representable result.\n\n`0.0004` is such a case (as it is not a multiple of `double.Epsilon`) and so it rounds to the nearest representable which is `0.0004000000000000000191686944095437183932517655193805694580078125`. `double.ToString()` then defaults to showing the shortest roundtrippable string (that is the string with the least number of significant digits that produces the same `double`), which is `0.0004` in this case, but debuggers, profilers, and other scenarios may show the exact represented value instead.\n\nThere was notably a bug fix introduced in .NET Core 3.0: https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/, which is that we changed to ensuring that `double.ToString()` would produce such a roundtrippable value by default; as you have cases like `double.Parse(Math.PI.ToString()) != Math.PI` on .NET Framework. But that doesn\u0027t look to be what you\u0027re hitting here.\n\nBecause the literal you typed is not necessarily the exact underlying value, this can lead to some weird rounding edge cases. For example, `0.0000005` looks like a midpoint value, but it is actually `0.0000004999999999999999773740559129431293428069693618454039096832275390625` and so is rather just under and should not be treated as a midpoint.",
                                           "updatedAt":  "2025-01-29T17:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cUtCD",
                                           "createdAt":  "2025-01-29T19:38:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DasNaughtie",
                                           "body":  "So in summary MS has taken something that worked perfectly fine and screwed it up to the point where I have to use a profiler to see the results of my unit tests because the UI doesn\u0027t represent the truth? How do you get away with this? It\u0027s taken months of work to get this solution and the multiple others into .Net only to find the ORM doesn\u0027t support the basic querying?\n\nThis is the Linq statement that is now broken:\n\n`var result =\n    _context.Holding.Where(\n        h =\u003e\n            (h.ClientRef == holding.ClientRef) \u0026\u0026 \n            (h.SecurityRef == holding.SecurityRef) \u0026\u0026\n            (!holding.Expense.HasValue || h.Expense == holding.Expense) \u0026\u0026 \n            (!holding.Shares.HasValue || h.Shares == holding.Shares) \u0026\u0026\n            (!holding.AvExpense.HasValue || h.AvExpense == holding.AvExpense) \u0026\u0026\n            (!holding.Proceeds.HasValue || h.Proceeds == holding.Proceeds) \u0026\u0026\n            (!holding.Valuation.HasValue || h.Valuation == holding.Valuation) \u0026\u0026\n            (!holding.Truncation.HasValue || h.Truncation == holding.Truncation) \u0026\u0026\n            (!holding.Indexation.HasValue || h.Indexation == holding.Indexation) \u0026\u0026\n            (!holding.QEExpense.HasValue || h.QEExpense == holding.QEExpense) \u0026\u0026\n            (!holding.QEProceeds.HasValue || h.QEProceeds == holding.QEProceeds) \u0026\u0026\n            (!holding.Price.HasValue || h.Price == holding.Price));`\n\nThat is as basic as it gets and EF Core doesn\u0027t support this scenario because of a float or double?  ",
                                           "updatedAt":  "2025-01-29T19:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cUzbB",
                                           "createdAt":  "2025-01-29T19:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e So in summary MS has taken something that worked perfectly fine and screwed it up to the point where I have to use a profiler to see the results of my unit tests because the UI doesn\u0027t represent the truth\n\nNothing has changed, the behavior of `Math.Round` is the same today as it was in .NET Framework. As such, there is likely some other cause of the break in your code that is not related to `Math.Round`.\n\nThis issue is tracking a planned future break to ensure that correct results are computed as there are known cases that they have never been correct, and thus ensuring `Math.Round` is behaving correctly.\n\nAs for how float/double work, this is how IEEE 754 floating-point numbers work in all languages. Whether it is C, C++, Java, Swift, Rust, Go, Javascript, C#, VB, F#, etc. It is not unique to .NET, it is not unique to Microsoft, it is simply part of programming with such numbers. If you are doing something like working with currency, you should likely be using a `base-10` floating-point type, such as `decimal`, instead. `decimal` still has concerns around rounding non-representable values (for example, `((1.0m / 3.0m) * 3.0m) != 1.0m`), but since it is base-10 it works closer to how most people think about numbers and a given literal will typically be exactly representable.",
                                           "updatedAt":  "2025-01-29T19:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cU1O8",
                                           "createdAt":  "2025-01-29T19:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "\u003e As for how float/double work, this is how IEEE 754 floating-point numbers work in all languages\n\ntrue for whats being discussed, but it looks like the discussion is passing over whats broken in the first place\n\n\u003e 0.005 is being converted to 1\n\nthats probably whats causing issues, and its unlikely to be related to this issue or floating point representation at all\n\nfurther investigation should probably focus at what happens between EF Core and the SQL statement generation",
                                           "updatedAt":  "2025-01-29T19:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cU3kV",
                                           "createdAt":  "2025-01-29T19:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEgYSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "DasNaughtie",
                                                                               "createdAt":  "2025-01-29T20:05:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e true for whats being discussed, but it looks like the discussion is passing over whats broken in the first place\n\nThat\u0027s why I said \"As such, there is likely some other cause of the break in your code that is not related to Math.Round.\". \n\nThat is, there is likely something else broken in the code and not enough context to help root cause the problem. It is likely in how `Expense` is being set, given that it is `decimal?` (not `double`) and `0.005m` is exactly representable as `decimal`.",
                                           "updatedAt":  "2025-01-29T19:59:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cU7ZZ",
                                           "createdAt":  "2025-01-29T20:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DasNaughtie",
                                           "body":  "I don\u0027t know what else to say.  I accept this is nothing to do with Math.Round but find it difficult to see an issue with the code.\n\nI\u0027ll park this here and update the other issue I\u0027ve created.  Thanks for your patience.",
                                           "updatedAt":  "2025-01-29T21:38:03Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Math.Round(value, digits, mode) does not return the correct result",
        "labels":  [
                       "bug",
                       "area-System.Numerics",
                       "breaking-change",
                       "help wanted",
                       "Cost:M"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29378",
        "createdAt":  "2019-04-25T22:16:00Z",
        "number":  29378,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCutgwA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrew-boyarshin",
                                            "createdAt":  "2020-06-13T15:57:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "acaly",
                                            "createdAt":  "2021-05-01T02:52:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JasonBock",
                                            "createdAt":  "2021-05-27T12:29:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bazzilic",
                                            "createdAt":  "2021-05-27T14:33:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SunsetQuest",
                                            "createdAt":  "2021-06-10T18:20:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2021-10-24T02:55:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdavid04",
                                            "createdAt":  "2022-05-18T21:55:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dakersnar",
                                            "createdAt":  "2022-09-09T22:03:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anar-bastanov",
                                            "createdAt":  "2023-03-05T15:49:05Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2023-02-27T01:20:54Z",
        "body":  "### Rationale\r\n\r\n`System.Numerics.BigInteger` is an immutable struct that frequently works with \"big data\". This can cause it to be very ineffecient to use given that you need to create a new immutable struct for every operation. As such, I propose we expose a new `BigInteger.Builder` type which allows for multiple operations to be performed on a mutable class before ultimately serializing the final result back to a regular `BigInteger`. This pattern has been used to good affect in other types, such as those in `System.Collections.Immutable`.\r\n\r\n### Proposed API\r\n\r\n```csharp\r\nnamespace System.Numerics\r\n{\r\n    public partial struct BigInteger\r\n    {\r\n        // Should there be a CreateBuilder method which takes an initial capacity?\r\n\r\n        public static Builder CreateBuilder();\r\n        public static Builder CreateBuilder(byte[] value);\r\n        public static Builder CreateBuilder(decimal value);\r\n        public static Builder CreateBuilder(double value);\r\n        public static Builder CreateBuilder(int value);\r\n        public static Builder CreateBuilder(long value);\r\n        public static Builder CreateBuilder(float value);\r\n        public static Builder CreateBuilder(uint value);\r\n        public static Builder CreateBuilder(ulong value);\r\n        public static Builder CreateBuilder(BigInteger value);\r\n\r\n        public sealed class Builder : IFormattable, IComparable, IComparable\u003cBigInteger.Builder\u003e, IEquatable\u003cBigInteger.Builder\u003e\r\n        {\r\n            // Already in BigInteger\r\n\r\n                public bool IsEven { get; }\r\n                public bool IsOne { get; }\r\n                public bool IsPowerOfTwo { get; }\r\n                public bool IsZero { get; }\r\n\r\n                public int Sign { get; }\r\n\r\n                public static Builder Abs(Builder value);\r\n                public static Builder Add(Builder left, Builder right);\r\n                public static int Compare(Builder left, Builder right);\r\n                public static Builder Divide(Builder dividend, Builder divisor);\r\n                public static Builder DivRem(Builder dividend, Builder divisor, out Builder remainder);\r\n                public static Builder GreatestCommonDivisor(Builder left, Builder right);\r\n                public static Builder Log(Builder value);\r\n                public static double Log(Builder value, double baseValue);\r\n                public static Builder Log10(Builder value);\r\n                public static Builder Max(Builder left, Builder right);\r\n                public static Builder Min(Builder left, Builder right);\r\n                public static Builder ModPow(Builder value, Builder exponent, Builder modulus);\r\n                public static Builder Multiply(Builder left, Builder right);\r\n                public static Builder Negate(Builder value);\r\n                public static Builder Pow(Builder value, int exponent);\r\n                public static Builder Remainder(Builder dividend, Builder divisor);\r\n                public static Builder Subtract(Builder value, int shift);\r\n\r\n                public int CompareTo(Builder other);\r\n                public override Equals(object other);\r\n                public bool Equals(Builder other);\r\n                public int GetByteCount(bool isUnsigned = false);\r\n                public override int GetHashCode();\r\n                public byte[] ToByteArray(bool isUnsigned = false, bool isBigEndian = false);\r\n                public override string ToString();\r\n\r\n            // Not listed\r\n            \r\n                // All the operators, including:\r\n                //   * Explicit Casts\r\n                //   * Implicit Casts\r\n                //   * Comparison (\u003e, \u003e=, \u003c, \u003c=, ==, !=)\r\n\r\n                // Parse methods\r\n\r\n            // Not in BigInteger\r\n\r\n                public static Builder BitwiseAnd(Builder left, Builder right);\r\n                public static Builder BitwiseOr(Builder left, Builder right);\r\n                public static Builder Decrement(Builder value);\r\n                public static Builder Increment(Builder value);\r\n                public static Builder LeftShift(Builder value, int shift);\r\n                public static Builder Modulus(Builder dividend, Builder divisor);\r\n                public static Builder OnesComplement(Builder value);\r\n                public static Builder RightShift(Builder value, int shift);\r\n                public static Builder Xor(Builder left, Builder right);\r\n\r\n                public BigInteger ToBigInteger();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Open Questions\r\n\r\nHow should the builder handle taking an existing `BigInteger` as an input? We don\u0027t want to force creation of a `Builder` as that could copy unecessarily.\r\n\r\nShould the Builder be a class, as other builders have been. What about a `ref struct` which might help with lifetime and allow usage of the stack, rather than force array allocations...\r\n\r\nShould the APIs be exposed in a more \"builder\" oriented manner (instance methods that return \u0027self\u0027)?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVikjcw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg3MzQ4Nw==",
                                           "createdAt":  "2019-04-25T23:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "How do the binary operations behave? Is the return value guaranteed to be the same instance as the first operand? Or should both operands be considered invalid after those operations? Either way, I think it\u0027s going to be unintuitive and instance methods would make the mutations much clearer.\r\n\r\nWhat is the expected usage pattern? Just the method name thanks to `using static`? (I think that e.g. `BigInteger.Abs` is mostly reasonable, but `BigInteger.Builder.Abs` is quite verbose.)\r\n\r\nMaybe an example would help. Consider the following variation of computing an arithmetic series:\r\n\r\n```c#\r\nBigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d) =\u003e\r\n    (2 * a1 + (n - 1) * d) * n / 2;\r\n```\r\n\r\nHow would you do the same thing using `BigInteger.Builder`?\r\n\r\n\u003e How should the builder handle taking an existing `BigInteger` as an input? We don\u0027t want to force creation of a `Builder` as that could copy unnecessarily.\r\n\r\nMaybe it doesn\u0027t have to copy, if you use copy-on-write? When you create a `Builder` from `BigInteger`, it reuses its backing array and remembers that it\u0027s not allowed to mutate it. When a mutation is performed on that `Builder`, then it will allocate its own array.",
                                           "updatedAt":  "2019-04-25T23:30:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg3NTI2MQ==",
                                           "createdAt":  "2019-04-25T23:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e How do the binary operations behave? Is the return value guaranteed to be the same instance as the first operand? Or should both operands be considered invalid after those operations? Either way, I think it\u0027s going to be unintuitive and instance methods would make the mutations much clearer.\r\n\r\nRight, this is why I called out that the APIs should possibly be exposed in a more \"builder\" oriented manner... Essentially, we will need to either:\r\n* Have a fluent design with instance methods (can\u0027t really use operators)\r\n* Have a design where the user can explicitly specify the destination builder. This could potentially be returned as the result as well, but we can\u0027t really utilize operators\r\n* Have a \"RMW\" design where the left operand is also the destination (potentially confusing design, also potentially inefficient when the user has an ultimate destination but multiple sub-operations)\r\n\r\n\u003e Maybe it doesn\u0027t have to copy, if you use copy-on-write? \r\n\r\nThat might work, could probably do this fairly easily as well....\r\n",
                                           "updatedAt":  "2019-04-25T23:40:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg4ODE2OQ==",
                                           "createdAt":  "2019-04-26T00:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "I\u0027ll write my full comments when I get a chance, but for now, here\u0027s a design that is worthwhile to consider:\r\n```\r\nclass Builder\r\n{\r\n    public void Multiply(Builder left, Builder right);\r\n}\r\n```\r\n\r\nYes, although it may seem surprising, that is indeed a non-static method and I intentionally wrote \"void\" return type.   The result of the multiplication is stored into `this`, the same instance.  In the following example, the result of the multiplication is stored into \"r\".\r\n\r\n```\r\nBuilder x = new Builder(123456);\r\nBuilder y = new Builder(50000);\r\nBuilder r = new Builder();\r\nr.Multiply(x, y);\r\n```\r\n\r\nI\u0027m not saying this is the one true way, rather I\u0027m saying, at least consider this design, even if it initially seems different than what you\u0027re traditionally accustomed to.  Sometimes an idea seems unlikeable at first because it different to an old habit, but after you get used to it, you might end up liking it and discovering that it has advantages, even if it seemed strange at first.",
                                           "updatedAt":  "2019-04-26T00:59:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njg5NDE3Mw==",
                                           "createdAt":  "2019-04-26T01:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@verelpode \r\n\r\nWith that design, would you be allowed to write `r.Multiply(r, x);` (effectively `r *= x;`)? Or even `r.Multiply(r, r);`?",
                                           "updatedAt":  "2019-04-26T01:35:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzEzMjAwOQ==",
                                           "createdAt":  "2019-04-26T17:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@svick Good question.  Yes, in my opinion, it should be written not to malfunction nor throw exception when any of r, x, y is the same instance as any of r, x, y, otherwise the reliability would be unsatisfactory.  I\u0027ve done some work in this area and my experience was that this ability is easy enough to support, if you implement it by simply loading the operand fields into local variables and then work with the local variables instead of the operand fields directly.  As simple as this:\r\n```\r\npublic void Multiply(Builder inOperandA, Builder inOperandB)\r\n{\r\n    uint[] a_bits = inOperandA._bits;\r\n    uint[] b_bits = inOperandB._bits;\r\n    int a_sign = inOperandA._sign;\r\n    int b_sign = inOperandB._sign;\r\n    ...\r\n}\r\n```\r\n\r\nAs a pleasing side-effect, this use of local variables also tends to help the compiler (or CIL-to-x64 compiler) optimize the generated code.   Sometimes it also reduces the amount of additional work necessary to make something thread-safe.",
                                           "updatedAt":  "2019-04-26T17:12:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE0MTEwMw==",
                                           "createdAt":  "2019-04-26T17:41:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\u003e Maybe an example would help. Consider the following variation of computing an arithmetic series:\r\n\u003e BigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d) =\u003e\r\n\u003e     (2 * a1 + (n - 1) * d) * n / 2;\r\n\u003e How would you do the same thing using BigInteger.Builder?\r\n\r\nI agree, this example certainly helps.  If the design is as I proposed, then the following demonstrates an **optimized** implementation of the above expression.\r\n```\r\nBigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d)\r\n{\r\n    var r = new BigInteger.Builder();\r\n    r.Multiply(2, a1);   // r = 2 * a1;\r\n\r\n    var t = new BigInteger.Builder();\r\n    t.SubtractOne(n);    // t = n - 1;\r\n    t.Multiply(t, d);    // t = t * d;\r\n    r.Add(r, t);         // r = r + t;\r\n\r\n    r.Multiply(r, n);    // r = r * n;\r\n    r.Divide(r, 2);      // r = r / 2;\r\n    return r.ToBigInteger();\r\n}\r\n```\r\n\r\nIn addition to having `Builder.Multiply(BigInteger, BigInteger)`, consider also having `MultiplyBy` and `DivideBy` methods that are simply one-liner shortcuts that invoke `Multiply` or `Divide`.  Thus the above example would be simplified to:\r\n```\r\nBigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d)\r\n{\r\n    var r = new BigInteger.Builder();\r\n    r.Multiply(2, a1);   // r = 2 * a1;\r\n\r\n    var t = new BigInteger.Builder();\r\n    t.SubtractOne(n);    // t = n - 1;\r\n    t.MultiplyBy(d);     // t *= d;\r\n    r.AddWith(t);        // r += t;\r\n\r\n    r.MultiplyBy(n);     // r *= n;\r\n    r.DivideBy(2);       // r /= 2;\r\n    return r.ToBigInteger();\r\n}\r\n```\r\n\r\n```\r\nclass Builder\r\n{\r\n    public void Add(BigInteger operandA, BigInteger operandB) { ... }\r\n    public void Multiply(BigInteger operandA, BigInteger operandB) { ... }\r\n    public void Divide(BigInteger operandA, BigInteger operandB) { ... }\r\n    \r\n    public void AddWith(BigInteger operand)\r\n    {\r\n        this.Add(this, operand);\r\n    }\r\n    \r\n    public void MultiplyBy(BigInteger operand)\r\n    {\r\n        this.Multiply(this, operand);\r\n    }\r\n    \r\n    public void DivideBy(BigInteger operand)\r\n    {\r\n        this.Divide(this, operand);\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2019-04-26T17:41:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE0ODQ3OQ==",
                                           "createdAt":  "2019-04-26T18:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "If the design is as I said except now with the idea of making each method finish with `return this;`, then ArithmeticSeries could be written as:\r\n```\r\nBigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d)\r\n{\r\n    var r = BigInteger.Builder.New(2).MultiplyBy(a1);\r\n    r.AddWith( BigInteger.Builder.New(n).Decrement().MultiplyBy(d) );\r\n    return r.MultiplyBy(n).DivideBy(2).ToBigInteger();\r\n}\r\n```\r\n\r\nOr if you really want to write it all on a single line, then the following is also valid, although not necessarily better in terms of code readability/maintainability.\r\n```\r\nBigInteger ArithmeticSeries(BigInteger n, BigInteger a1, BigInteger d)\r\n{\r\n    return BigInteger.Builder.New(2).MultiplyBy(a1).AddWith( BigInteger.Builder.New(n).Decrement().MultiplyBy(d) ).MultiplyBy(n).DivideBy(2).ToBigInteger();\r\n}\r\n```",
                                           "updatedAt":  "2019-04-26T18:04:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE1Nzg2NA==",
                                           "createdAt":  "2019-04-26T18:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@verelpode - \r\n\u003e I\u0027ve done some work in this area and my experience was that this ability is easy enough to support, if you implement it by simply loading the operand fields into local variables and then work with the local variables instead of the operand fields directly. As simple as this:\r\n\r\nDoing something like that would require a copy of the underlying data, since copying the pointer wouldn\u0027t have a material effect on the outcome.  Now, you would only have to copy in the case that the operands were the same, and I\u0027d actually only copy the \"result\" operand (and set it at the end of the operation), since that\u0027s the only one that would be modified.\r\n\r\n\u003eSometimes it also reduces the amount of additional work necessary to make something thread-safe.\r\n\r\nBuilders are almost never thread-safe, nor do most usecases warrant that.  The main problem is the fact that interleaving calls to a mutable piece of data is inherently dangerous, even if the internal representation doesn\u0027t tear or otherwise protects itself from corruption.\r\n\r\n\u003eIf the design is as I said except now with the idea of making each method finish with `return this`...\r\n\r\nAt this point (and I would personally prefer a `this`-returning type), do we really have a `Builder`, as opposed to a `MutableBigInteger`?",
                                           "updatedAt":  "2019-04-26T18:32:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE2MTA3MQ==",
                                           "createdAt":  "2019-04-26T18:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@verelpode\r\n\r\nI like the example in your last post: it looks fairly close to the original expression (which makes it easier to understand) and it has only one mutable variable, which I think makes it easier to write the code correctly (because you\u0027re unlikely to mutate the wrong variable).\r\n\r\nThough I note that you\u0027re exclusively using the `By` versions of operations. And if you limit yourself to just those, I think your proposal is effectively the same as the original proposal from @tannergooding, except with instance methods, as suggested in the last open question.\r\n\r\n@Clockwork-Muse \r\n\r\n\u003e At this point (and I would personally prefer a `this`-returning type), do we really have a `Builder`, as opposed to a `MutableBigInteger`?\r\n\r\n`StringBuilder` uses that approach, so it would not be unprecedented to call such type a `Builder`. Though e.g. `ImmutableList\u003cT\u003e.Builder` does not.",
                                           "updatedAt":  "2019-04-26T18:42:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE2OTMyMw==",
                                           "createdAt":  "2019-04-26T19:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@Clockwork-Muse \r\n\u003e Doing something like that would require a copy of the underlying data, since copying the pointer wouldn\u0027t have a material effect on the outcome. Now, you would only have to copy in the case that the operands were the same\r\n\r\nNo, that\u0027s incorrect or inaccurate or \"not necessarily true\", depending on the precise implementation details.  For example, have a look at the preexisting source code of `System.Numerics.BigIntegerBuilder.Mul`.  Here\u0027s the start of it:\r\n```\r\n// Multiply reg1 times reg2, putting the result in \u0027this\u0027. This version never shares memory\r\n// with either of the operands. This is useful when performing a series of arithmetic operations\r\n// and large working buffers are allocated up front.\r\npublic void Mul(ref BigIntegerBuilder reg1, ref BigIntegerBuilder reg2) {\r\n```\r\n\r\n\u003e Builders are almost never thread-safe,\r\n\r\nI didn\u0027t say that loading fields into local variables make things thread-safe, rather I said that it\u0027s a step in the direction of thread safety -- it tends to reduce the amount of additional work necessary to make something thread-safe.\r\n",
                                           "updatedAt":  "2019-04-26T19:12:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE3NDI4OQ==",
                                           "createdAt":  "2019-04-26T19:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@svick\r\n\u003e if you limit yourself to just those, I think your proposal is effectively the same as the original proposal from @tannergooding, except with instance methods, as suggested in the last open question.\r\n\r\nTrue, @tannergooding may well have already thought of practically the same thing.  Nevertheless I think it was still useful to work through your ArithmeticSeries example and explain in more detail, in order to decide the best way to go.\r\n",
                                           "updatedAt":  "2019-04-26T19:29:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzE5NTUyNw==",
                                           "createdAt":  "2019-04-26T20:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@verelpode -\r\n\r\n\u003e No, that\u0027s incorrect or inaccurate or \"not necessarily true\", depending on the precise implementation details. For example, have a look at the preexisting source code of `System.Numerics.BigIntegerBuilder.Mul`. Here\u0027s the start of it:\r\n\r\nI was speaking about attempting to use the `this` object as either of the operands, I should have been a little clearer.",
                                           "updatedAt":  "2019-04-26T20:44:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzIwMjg3NQ==",
                                           "createdAt":  "2019-04-26T21:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@Clockwork-Muse OK, I could have been clearer too, and I might have made it sound easier than it is in reality.  Anyway, the important points are:\r\n1. It\u0027s not difficult to permit either operand to be the same instance as the other operand OR the same instance as `this`, but yes it is important to mention and remember this issue in order to prevent a faulty implementation.\r\n2. Duplication of an operand\u0027s underlying data/array is _not_ necessarily required, even when it is the same instance as the other operand or `this`, depending on how the algorithm is written.  For example, see `System.Numerics.BigIntegerBuilder.Mul(ref BigIntegerBuilder, ref BigIntegerBuilder)` and other big-integer math algorithms that don\u0027t destructively interfere.  When an algorithm modifies an array element but never again reads that array element, it can succeed even when it is the same instance as the other operand or `this`, even without prior duplication, but it depends on which math operation it is, addition including subtraction, or multiplication, or division, and which algorithm is used.\r\n3. In the case when the operands are BigInteger not Builder, then BigInteger is immutable thus merely copying the pointer is as good as copying the underlying data.  It seems to be not-yet-decided whether the operands will be BigInteger or Builder or both supported.\r\n\r\n\"Double buffering\" is another technique that can potentially be used to eliminate prior duplication of operands.  The Builder has 2 buffers, one in use, one not in use, and it alternates between them.  The result of a math operation is stored in whichever buffer is not currently in-use, and the in-use and not-in-use status of the 2 buffers is swapped.",
                                           "updatedAt":  "2019-04-26T21:27:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzIxMjM2Ng==",
                                           "createdAt":  "2019-04-26T21:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@svick mentioned previously that BigInteger recently received [a new constructor that accepts `Span\u003cbyte\u003e`](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.-ctor?view=netcore-3.0#System_Numerics_BigInteger__ctor_System_ReadOnlySpan_System_Byte__System_Boolean_System_Boolean_). Let\u0027s put the same constructor in Builder, but not only byte, please let\u0027s also support UInt32.  Byte is good in relation to binary serialization/deserialization purposes, whereas UInt32 is good for importing big integer data that was generated at runtime and that has nothing to do with serialization.  Thus:\r\n\r\n```\r\npublic Builder (ReadOnlySpan\u003cbyte\u003e value, bool isUnsigned = false, bool isBigEndian = false);\r\npublic Builder (ReadOnlySpan\u003cUInt32\u003e value, bool isUnsigned = false);\r\npublic Builder (ReadOnlySpan\u003cUInt64\u003e value, bool isUnsigned = false);\r\npublic Builder (ReadOnlySpan\u003cnative int\u003e value, bool isUnsigned = false);\r\n```\r\n\r\nIn my opinion, the \"isBigEndian\" parameter is only applicable for byte not UInt32 (I wrote more details about this in a [previous comment](https://github.com/dotnet/corefx/issues/36682#issuecomment-480941369).)\r\n\r\nSetting a Builder to `ReadOnlySpan\u003cbyte\u003e` shouldn\u0027t be limited to the constructor.  Thus I suggest that the constructors invoke public `SetValue` methods as follows:\r\n\r\n```\r\npublic Builder (ReadOnlySpan\u003cbyte\u003e value, bool isUnsigned = false, bool isBigEndian = false)\r\n{\r\n    this.SetValue(value, isUnsigned, isBigEndian);\r\n}\r\npublic Builder (ReadOnlySpan\u003cUInt32\u003e value, bool isUnsigned = false)\r\n{\r\n    this.SetValue(value, isUnsigned);\r\n}\r\npublic Builder (ReadOnlySpan\u003cUInt64\u003e value, bool isUnsigned = false)\r\n{\r\n    this.SetValue(value, isUnsigned);\r\n}\r\npublic Builder (ReadOnlySpan\u003cnative int\u003e value, bool isUnsigned = false)\r\n{\r\n    this.SetValue(value, isUnsigned);\r\n}\r\n\r\npublic void SetValue(ReadOnlySpan\u003cbyte\u003e value, bool isUnsigned = false, bool isBigEndian = false) { ... }\r\npublic void SetValue(ReadOnlySpan\u003cUInt32\u003e value, bool isUnsigned = false) { ... }\r\npublic void SetValue(ReadOnlySpan\u003cUInt64\u003e value, bool isUnsigned = false) { ... }\r\npublic void SetValue(ReadOnlySpan\u003cnative int\u003e value, bool isUnsigned = false) { ... }\r\n\r\npublic void SetValue(Int32 value) { ... }\r\npublic void SetValue(UInt32 value) { ... }\r\npublic void SetValue(Int64 value) { ... }\r\npublic void SetValue(UInt64 value) { ... }\r\n\r\npublic void SetValue(UInt8 value) { this.SetValue((UInt32)value); }\r\npublic void SetValue(UInt16 value) { this.SetValue((UInt32)value); }\r\n```\r\n\r\nAlthough the `SetValue(UInt8)` and `SetValue(UInt16)` appear completely superfluous at first glance, they\u0027re not.\r\n",
                                           "updatedAt":  "2019-04-26T21:50:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzI0NzQzNg==",
                                           "createdAt":  "2019-04-27T02:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\u003e I like the example in your last post: it looks fairly close to the original expression\r\n\r\nI might end up with the same preference as you, but here\u0027s something to consider:  Although that ArithmeticSeries example was helpful and a good start (I\u0027m not criticizing it), it may be worthwhile to work through another example; this time an example that suits real modern software engineering practices as opposed to an artificial example similar to what mathematicians and math teachers produce.  \r\n\r\nUnfortunately math teachers continue to use a very old style that causes never-ending difficulties and complaints from students.  In the beginning of software engineering, the old problematic mathematical style was copied into software engineering, but in modern software engineering, especially in teamwork, it is increasingly recognized that it is bad practice to obscurely name variables, parameters, or fields as \"q1\" and \"q2\" instead of something meaningful such as \"remainingDistance\" and \"estimatedDistance\".\r\n\r\nIn the past, \"q1\" and \"q2\" were viewed as intelligent because people thought:  \r\n_\"I understand nothing of what he wrote therefore he must be super intelligent.  The more complex and difficult it is to understand, the smarter it must be.  When I write something, I\u0027ll likewise write it in a way that is impressively obscure and complex.\"_\r\n\r\nNowadays the attitude in professional software engineering is increasingly becoming like this:  \r\n_\"Obscure names such as q1 and q2 cause difficulties for team members / coworkers and long-term maintainability of code.  Our team runs better when the code is clear and easy to understand, as much as possible/practical.  Whenever possible, a simple-but-effective solution is impressive and intelligent.  Artificial complexity causes problems such as increased rate of mistakes/bugs, additional cost and delay to produce the next version, and difficulty transferring code between coworkers.\"_\r\n\r\nI was shocked when I heard a university mathematics professor say _proudly_:\r\n_\"And this is exactly the same today as it was 200 years ago!\"_\r\n\r\nI was shocked because he said it with pride and joy, whereas I thought:\r\n_\"Aren\u0027t you the least bit embarrassed about having made no progress, no advancements, no improvements during the last 200 years?  I\u0027d reconsider before I\u0027d proudly announce no changes after 200 years.\"_\r\n\r\nMy point is, we are software engineers not mathematics professors, therefore let\u0027s design BigInteger.Builder to suit modern professional software engineering practices, not to suit badly-written math textbooks that torment poor university students year after year after year.",
                                           "updatedAt":  "2019-04-27T02:29:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMwOTE5NQ==",
                                           "createdAt":  "2019-04-27T18:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003eIn the past, \"q1\" and \"q2\" were viewed as intelligent because people thought:\r\n_\"I understand nothing of what he wrote therefore he must be super intelligent. The more complex and difficult it is to understand, the smarter it must be. When I write something, I\u0027ll likewise write it in a way that is impressively obscure and complex.\"_\r\n\r\n....I don\u0027t think this was ever actually true.\r\n\r\nDiscounting the common practice of short variable names for loop counters (which should probably be changed to more descriptive names in many cases, although I doubt they were ever intended to look complex), in some older languages [there was literally a maximum length that the parser/linker would accept](https://en.wikipedia.org/wiki/Naming_convention_(programming)#Length_of_identifiers):\r\n\r\n\u003e early linkers which required variable names to be restricted to 6 characters to save memory. A later \"advance\" allowed longer variable names to be used for human comprehensibility, but where only the first few characters were significant. In some versions of BASIC such as TRS-80 Level 2 Basic, long names were allowed, but only the first two letters were significant. This feature permitted erroneous behaviour that could be difficult to debug, for example when names such as \"VALUE\" and \"VAT\" were used and intended to be distinct.\r\n\r\n(BASIC isn\u0027t the only language with a restriction like this - many punchcard/columnar-based languages would be restricted due to the input/storage medium!)\r\n\r\nAnd while it\u0027s true that at least some of the tradition for short variable names comes from mathematics, there variable names aren\u0027t intended to obscure things, but rather most of the time it\u0027s intended as an abstraction, and you just want \"something that\u0027s not a digit\".",
                                           "updatedAt":  "2019-04-27T18:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMxNDMwMw==",
                                           "createdAt":  "2019-04-27T19:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "Sure, sometimes I use single-letter names as well, especially \"i\" in \"for\" loops.  I don\u0027t want to be an extremist against single-letter names.  It\u0027s a judgement call.  The preference for descriptive names is only a **guideline**, not a hard rule from an extremist who can only see black and white and nothing in-between.\r\n\r\nGood point re some early languages being incapable of longer names, but the problem of artificial obscurity also pops up in languages that do support long names.  I can\u0027t speak for your experiences, but in my experience, I have personally experienced cases of artificially-introduced obscurity/complexity.  Fake complexity intended to impress.  I have encountered real people who are elitist and view obscurity as a sign of intelligence and simplicity as a sign of a plebeian.   (Not svick. I know svick wasn\u0027t doing that.)\r\n\r\n\u003e At this point (and I would personally prefer a this-returning type), do we really have a Builder, as opposed to a MutableBigInteger?\r\n\r\nI prefer the name \"Builder\" because it indicates that instances of Builder are intended/designed to have a relatively short lifespan, whereas instances of immutable BigInteger are suitable for long-term storage of values.  In contrast, if Builder is named \"MutableBigInteger\", then it sounds like it\u0027s suitable for long-term storage but it likely won\u0027t be (depending on how it\u0027s implemented).\r\n\r\nFor example, if a Builder implementation happened to use the aforementioned double-buffering technique to avoid operand duplications, then a Builder instance can contain 2 arrays and this is satisfactory for a Builder _but not for a MutableBigInteger._  If a MutableBigInteger is stored for a long time and it contains a large secondary array/buffer that is unused, then it\u0027s a design defect.\r\n\r\nLikewise in general, if any Builder class is named \"Builder\", then the implementation has the freedom to store any temporary objects that may be helpful in private fields of Builder.  This implementation freedom and optimization freedom is cancelled if Builder is named \"MutableBigInteger\" because the lifetime/scope of \"MutableBigInteger\" becomes unclearly defined.\r\n\r\nThe reason for having 2 classes -- one immutable and one Builder -- is a clearly defined reason with a well-known advantage, whereas if we have \"ImmutableX\" and \"MutableX\", then the design has an awkward question such as:  Why not just use \"MutableX\" for everything and delete \"ImmutableX\" entirely?  Thus a design of \"ImmutableX\" plus \"MutableX\" is harder to justify than \"ImmutableX\" plus \"ImmutableX.Builder\".  I\u0027d stick with Tanner\u0027s naming regardless of whether the methods do `return this;`\r\n\r\nIf the Builder pattern is claimed to be wrong, then it would mean that `System.String` can be deleted and `System.Text.StringBuilder` used instead, in all places where strings are used.",
                                           "updatedAt":  "2019-04-27T19:58:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMyMjYzNg==",
                                           "createdAt":  "2019-04-27T21:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "To be consistent with `BitwiseAnd` and `BitwiseOr`, I suggest renaming `Xor` to `BitwiseExclusiveOr`.  Nowadays VS/IntelliSense makes it easy to use full names.  See also `System.Linq.Expressions.Expression.ExclusiveOr` and `ExclusiveOrAssign`.  \"And\", \"Or\", and \"Exclusive Or\" are all the same category -- they\u0027re all [boolean logic functions](https://en.wikipedia.org/wiki/Boolean_algebra) therefore it\u0027d be good to name them consistently with each other.\r\n\r\n`LeftShift` and `RightShift` could be renamed to `BitwiseShiftLeft` and `BitwiseShiftRight`.  (Alternatively `BitwiseShiftUp` (left) and `BitwiseShiftDown` (right) are better names except for being non-traditional.  I expect that people will want to stick with the traditional names in this case.)\r\n\r\nI notice the proposed API contains both `Remainder` AND `Modulus`.  Is that intentional somehow?\r\n\r\nI suggest renaming `Builder.Pow` to `Power` (or maybe `RaiseBy`) because \"pow()\" is an obsolete function name from the \"bad old days\" of plain C -- the Wild Wild West of programming -- the medieval middle ages of software -- the Dark Ages.  Even when RAM was much smaller than it is today, there was no justifiable logical reason for truncating the name of this function by removing the last 2 bytes/chars.  \r\n\r\nNote if `Builder.Multiply` will not exist and only `Builder.MultiplyBy` will exist, then the Power method would operate likewise and would be named something like `RaiseBy` I guess.\r\n\r\nUnfortunately `System.Math.Pow` continues the bad practice from C, but there is no good reason why `BigInteger.Builder` should perpetuate this bad practice just because `System.Math` contains some unfortunate naming.  Anyway possibly this issue will be side-stepped via AddWith, MultiplyBy, DivideBy, RaiseBy, etc.\r\n\r\nLast night I had a nightmare about the bad old days.  I dreamed that I was forced to write a huge section of an app using plain old C.  I woke up screaming and drenched in sweat.  I grabbed the phone and immediately called the emergency hotline and exclaimed anxiously: _\"I\u0027m deathly worried about having a huge C section!!\"_\r\nThe guy replied calmly:  _\"Don\u0027t worry. You\u0027re a man. Men don\u0027t have C sections.\"_",
                                           "updatedAt":  "2019-04-27T21:52:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMyNTE4Mg==",
                                           "createdAt":  "2019-04-27T22:41:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e To be consistent with BitwiseAnd and BitwiseOr, I suggest renaming Xor to BitwiseExclusiveOr. \r\n\r\nThere are pre-existing \"friendly\" names that exist for all the standard operators. The names I used above follow that: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads\r\n\r\n\u003e I notice the proposed API contains both Remainder AND Modulus. Is that intentional somehow?\r\n\r\nRemainder and Modulus are different functions and have different behaviors when dealing with negative numbers.\r\n\r\n\u003e I suggest renaming Builder.Pow to Power (or maybe RaiseBy) because \"pow()\" is an obsolete function \r\n\r\nThis is still the standard name used by most spec\u0027s, frameworks, and languages (including .NET). It is also the name used by the existing `BigInteger` class. Having consistency is generally considered better and it will likely not change.\r\n\r\n\u003e At this point (and I would personally prefer a this-returning type), do we really have a Builder, as opposed to a MutableBigInteger?\r\n\r\nThe builder pattern and calling the mutable version \"Builder\" is an existing convention we have.",
                                           "updatedAt":  "2019-04-27T22:41:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMyNTIyOQ==",
                                           "createdAt":  "2019-04-27T22:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The conversations above have covered some great points so far. I\u0027ll try to collect the points covered so far and updated the original post sometime soon (including examples of the different suggested patterns).",
                                           "updatedAt":  "2019-04-27T22:42:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMyNjk5Ng==",
                                           "createdAt":  "2019-04-27T23:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "Should Builder accept operands of type Builder or BigInteger or both?  Following I\u0027ve written an incomplete example implementation that demonstrates one way of allowing the operand of `MultiplyBy` to be Builder, BigInteger, uint, or UInt64 (signed int would also be supported but is not shown here).\r\n\r\nThis is implemented as a wrapper around the preexisting internal struct `System.Numerics.BigIntegerBuilder`, which I renamed to `SBigIntegerBuilder` in this example for clarity.\r\n\r\nThis already supports **copy-on-write** via the preexisting `System.Numerics.BigIntegerBuilder._fWritable`.\r\n\r\nThis isn\u0027t intended to be a real nor proper implementation.  It is only an example of what is possible.  This does contain bugs -- for example, it doesn\u0027t even try to calculate the correct sign of the multiplication result.  Likewise yes one must be careful to prevent malfunction when the operand is the same instance as `this` and there exists more than one solution to that issue.\r\n\r\n```\r\npublic class Builder\r\n{\r\n    private SBigIntegerBuilder _internalBuilder;\r\n\r\n    public Builder MultiplyBy(Builder inOperand)\r\n    {\r\n        _internalBuilder.Mul(ref inOperand._internalBuilder);\r\n        return this;\r\n    }\r\n\r\n    public Builder MultiplyBy(BigInteger inOperand)\r\n    {\r\n        SBigIntegerBuilder operandAsSBuilder = new SBigIntegerBuilder(inOperand);\r\n        _internalBuilder.Mul(ref operandAsSBuilder);\r\n        return this;\r\n    }\r\n\r\n    public Builder MultiplyBy(uint inOperand)\r\n    {\r\n        SBigIntegerBuilder operandAsSBuilder = new SBigIntegerBuilder();\r\n        operandAsSBuilder.Set(inOperand);\r\n        _internalBuilder.Mul(ref operandAsSBuilder);\r\n        return this;\r\n    }\r\n\r\n    public Builder MultiplyBy(UInt64 inOperand)\r\n    {\r\n        SBigIntegerBuilder operandAsSBuilder = new SBigIntegerBuilder();\r\n        operandAsSBuilder.Set(inOperand);\r\n        _internalBuilder.Mul(ref operandAsSBuilder);\r\n        return this;\r\n    }\r\n\r\n} // class Builder\r\n```\r\n",
                                           "updatedAt":  "2019-04-27T23:20:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzMyOTM2Mg==",
                                           "createdAt":  "2019-04-28T00:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "The idea of \"MultiplyBy\" with `return this;` was liked.  Although the English language makes the \"By\" naming easy for multiplication and division, unfortunately English does not make it so easy for subtraction.  Therefore note the following difference between `SubtractWith` versus `SubtractFrom`.  The many peculiarities of English and other natural languages.  Here is a list of potential names, not without some flaws.  \r\n\r\n```\r\nr.Increment()       means r = r + 1;\r\nr.Decrement()       means r = r - 1;\r\nr.AddWith(b)        means r = r + b;\r\nr.SubtractWith(b)   means r = r - b;\r\nr.SubtractFrom(b)   means r = b - r;\r\nr.MultiplyBy(b)     means r = r * b;\r\nr.DivideBy(divisor) means r = r / divisor;\r\nr.DivideToRemainderBy(b) means remainder of r divided by b;\r\nr.RaiseBy(exponent)  means r = r ** exponent; means r = Power(r, exponent);\r\nr.PowerModulo(exponent, modulus)  means DivRemainder(Power(value, exponent), modulus);\r\n\r\nr.MakePositive()     means r = abs(r);\r\nr.MakeNegative()     means r = -abs(r);\r\nr.InvertSign()       means r = -r;\r\n\r\nr.BitwiseAndWith(b)  means r = r \u0026 b;\r\nr.BitwiseOrWith(b)   means r = r | b;\r\nr.BitwiseExclusiveOrWith(b) means r = r ^ b;\r\nr.OnesComplement()   means r = -(r + 1);\r\nr.BitwiseShiftLeft(amount)  means r = r \u003c\u003c amount;\r\nr.BitwiseShiftRight(amount) means r = r \u003e\u003e amount;\r\n\r\nr.SelectLowest(b)    means r = min(r, b);\r\nr.SelectHighest(b)   means r = max(r, b);\r\n\r\nr.GreatestCommonDivisor(b) means r = GCD(r, b);\r\nr.NaturalLogarithm() means r = BigInteger.Log(r);\r\nr.Logarithm10()      means r = BigInteger.Log10(r);\r\nr.Logarithm(base)    means r = BigInteger.Log(r, base);\r\n```\r\n\r\nYes I deliberately included a couple of names that provoke controversy and quarrel because on one hand they are better names but on the other hand, many people find it impossibly difficult to change old ingrained habits/traditions even when the tradition is something as wildly nuts as drinking car fuel (ethanol) every weekend as if it\u0027s perfectly normal for everyone to drink car fuel.  Cheers :-)",
                                           "updatedAt":  "2019-04-28T00:15:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODA5NDA2NA==",
                                           "createdAt":  "2019-04-30T20:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "\u003e Remainder and Modulus are different functions and have different behaviors when dealing with negative numbers.\r\n\r\nAha, I didn\u0027t realize that.  In that case, shouldn\u0027t the Modulus method be renamed to **Modulo**?  Here\u0027s the definition of [\"modulus\" in Oxford English Dictionary](https://en.oxforddictionaries.com/definition/modulus):\r\n\u003e Mathematics: 1 another term for absolute value\r\n\u003e 1.1 The positive square root of the sum of the squares of the real and imaginary parts of a complex number.\r\n\u003e 2 A constant factor or ratio.\r\n\u003e 3 A number used as a divisor for considering numbers in sets, numbers being considered congruent when giving the same remainder when divided by a particular modulus.\r\n\r\nDefinitions 1 and 1.1 are also examples of the problem that I mentioned -- elitism and deliberate obfuscation -- and such behavior is unprofessional and bad for teamwork and should not be adopted into software engineering.  Definition 3 is the nearest to what BigInteger needs but it says that the **\"modulus\" is the divisor**, which would mean that where the Builder proposal currently says....\r\n```\r\npublic static Builder Modulus(Builder dividend, Builder divisor);\r\n```\r\n...the \"divisor\" parameter is also known as \"modulus\", but let\u0027s keep the name \"divisor\" because the name \"modulus\" makes no sense.\r\n\r\n[\"Modulo operation\" in Wikipedia](https://en.wikipedia.org/wiki/Modulo_operation) says the same as Oxford -- that the divisor is sometimes called modulus:\r\n\u003e In computing, the modulo operation finds the remainder after division of one number by another (sometimes called modulus). \r\n\r\n* Name of the operation:  Modulo\r\n* Name of the divisor:  Divisor or modulus\r\n* Name of the result:  Remainder\r\n\r\nMathematical terminology is a minefield and desperately needs to be updated but as I mentioned, unfortunately the attitude is that it\u0027s impressive to have 200 years without progress/changes, and that \"obfuscation = super intelligent\".\r\n\r\n[C# \"Operator Overloads\"](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads) doesn\u0027t actually say that the modulo operation should be called modulus.  It says that the \"Friendly Name\" is \"Mod or Remainder\" therefore it suggests `Builder.Mod` or `Builder.Remainder` not `Builder.Modulus`.  Unfortunately the metadata name is \"op_Modulus\" but that\u0027s irrelevant because that\u0027s a hidden internal compiler-generated name that the C# compiler stores into a compiled Assembly, not normally visible to the user of the C# language.  `Builder.Mod` isn\u0027t a hidden internal compiler-generated name, therefore the internal \"op_Modulus\" can be ignored.\r\n\r\nSee also the preexisting `BigInteger.ModPow` method:\r\n```\r\npublic static BigInteger ModPow(BigInteger value, BigInteger exponent,BigInteger modulus)\r\n```\r\nThis \"modulus\" parameter in `BigInteger.ModPow` is consistent with OED and Wikipedia, whereas the proposed `Builder.Modulus` method is not.   \r\nDamn, I only wanted to write a short message about this topic.",
                                           "updatedAt":  "2019-04-30T20:14:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODY4NzQwMg==",
                                           "createdAt":  "2019-05-02T14:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "Since there\u0027s a way to get a byte[] from the Builder, shouldn\u0027t there be a way to get a Span\u003cbyte\u003e from the builder? BigInteger has TryWriteBytes, so I\u0027m guessing this was missed.",
                                           "updatedAt":  "2019-05-02T14:07:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTE5Mjc4MQ==",
                                           "createdAt":  "2019-05-03T18:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@FiniteReality I agree.  This should be supported in both directions.  For the direction Span-to-BigInteger, see my [previous comment](https://github.com/dotnet/corefx/issues/37204#issuecomment-487212366), and for the direction BigInteger-to-Span, I suggest the following methods.  What do you think?\r\n```\r\nclass Builder\r\n{\r\n    public int CopyTo(Span\u003cbyte\u003e destination, bool isUnsigned = false, bool isBigEndian = false);\r\n    public int CopyTo(Span\u003cUInt32\u003e destination, bool isUnsigned = false);\r\n    public int CopyTo(Span\u003cUInt64\u003e destination, bool isUnsigned = false);\r\n\r\n    // Span might be unsupported in some environments, therefore also support arrays directly:\r\n    public int CopyTo(byte[] destination, int destinationIndex, bool isUnsigned = false, bool isBigEndian = false);\r\n    public int CopyTo(UInt32[] destination, int destinationIndex, bool isUnsigned = false);\r\n    public int CopyTo(UInt64[] destination, int destinationIndex, bool isUnsigned = false);\r\n}\r\n\r\nstruct BigInteger\r\n{\r\n    // BigInteger and BigInteger.Builder should both have the same \"CopyTo\" methods.\r\n    public int CopyTo(...);\r\n}\r\n```\r\n\r\nThe name `CopyTo` is consistent with `System.Collections.Generic.ICollection\u003cT\u003e.CopyTo(T[] array, int arrayIndex)`.\r\n\r\nI defined `CopyTo` to return int.  It should return the number of elements copied/written to the destination span or array, which may be less than the length of the span.  If the span length (or remaining array length) is insufficient, then do nothing and throw exception.  When copying to a byte array or span, CopyTo should return the same as `Builder.GetByteCount`.  When copying to a UInt32 array or span, the measurement unit of `destinationIndex` and the return value are elements not bytes, thus `CopyTo(Span\u003cUInt32\u003e, ...)` returns a length equalling `Builder.GetByteCount(...) / sizeof(UInt32)`.\r\n\r\nIn my opinion, `Span\u003cUInt32\u003e` and `Span\u003cUInt64\u003e` should be supported, not only `Span\u003cbyte\u003e`, because byte is for serialization/deserialization purposes whereas UInt32 and UInt64 are for importing/exporting data generated at runtime unrelated to serialization.\r\n",
                                           "updatedAt":  "2019-05-03T18:21:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTIwMjA4Mg==",
                                           "createdAt":  "2019-05-03T18:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "I also suggest adding the following \"TryConvertTo\" methods to both of `BigInteger.Builder` and `BigInteger`.  These methods attempt to typecast/convert the BigInteger or BigInteger.Builder *without* throwing `System.OverflowException`, unlike the existing typecast operators in BigInteger.  The following methods should return false if conversion is unsucccessful (meaning return false if the BigInteger does not fit within the specified smaller integer type).\r\n```\r\npublic bool TryConvertTo(out Int32 outValue);\r\npublic bool TryConvertTo(out Int64 outValue);\r\npublic bool TryConvertTo(out UInt32 outValue);\r\npublic bool TryConvertTo(out UInt64 outValue);\r\n\r\n// The following would throw exception when conversion is unsucccessful:\r\npublic Int32 ConvertToInt32();\r\npublic Int64 ConvertToInt64();\r\npublic UInt32 ConvertToUInt32();\r\npublic UInt64 ConvertToUInt64();\r\n```\r\nAlternatively \"TryConvertTo\" could be named \"TryConvert\".\r\n\r\nActually I prefer to make the \"TryConvertTo\" methods return a nullable integer (as follows) instead of boolean and output parameter, but I changed the proposal to bool+out because @tannergooding wanted it.  I don\u0027t agree but I\u0027ve accepted Tanner\u0027s decision, so the proposal is now boolean+out, whereas the previous proposal was:\r\n```\r\npublic Int32? TryConvertToInt32();\r\npublic Int64? TryConvertToInt64();\r\npublic UInt32? TryConvertToUInt32();\r\npublic UInt64? TryConvertToUInt64();\r\n\r\npublic Int32 ConvertToInt32();\r\npublic Int64 ConvertToInt64();\r\npublic UInt32 ConvertToUInt32();\r\npublic UInt64 ConvertToUInt64();\r\n```\r\n\r\nIn the case of converting to unsigned UInt64, if the BigInteger is less than zero (`UInt64.MinValue`) or greater than `UInt64.MaxValue`, then `TryConvertTo(out UInt64)` would return false.\r\n\r\nFor 128-bit integers, the following TryConvertToInt128 method would return true if the conversion is successful.  The sign would be output separately via the boolean \"outNegative\" parameter (I\u0027ve found that separated sign is quite useful), thus the \"outLowPart\" and \"outHighPart\" parameters are in-effect set to what would be the result of `BigInteger.Abs`.\r\n```\r\npublic bool TryConvertToInt128(out UInt64 outLowPart, out UInt64 outHighPart, out bool outNegative)\r\n{\r\n\toutNegative = (_sign \u003c 0);\r\n\t...\r\n}\r\n\r\n// Conversion to unsigned 128-bit integer:\r\npublic bool TryConvertToUInt128(out UInt64 outLowPart, out UInt64 outHighPart)\r\n{\r\n\tbool neg;\r\n\treturn (this.TryConvertToInt128(out outLowPart, out outHighPart, out neg) \u0026\u0026 !neg);\r\n}\r\n\r\n// Conversion to signed 128-bit integer with high part represented as signed 64-bit integer:\r\npublic bool TryConvertToInt128(out UInt64 outLowPart, out Int64 outHighPart)\r\n{\r\n\tUInt64 unsignedHighPart;\r\n\tbool neg;\r\n\tif (this.TryConvertToUInt128(out outLowPart, out unsignedHighPart, out neg))\r\n\t{\r\n\t\tif (neg)\r\n\t\t{\r\n\t\t\tif (unsignedHighPart \u003c= unchecked((UInt64)Int64.MinValue))\r\n\t\t\t{\r\n\t\t\t\toutHighPart = unchecked(-(Int64)unsignedHighPart);\r\n\t\t\t\treturn true; // success\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ((unsignedHighPart \u003e\u003e 64) == 0)\r\n\t\t{\r\n\t\t\toutHighPart = unchecked((Int64)unsignedHighPart);\r\n\t\t\treturn true; // success\r\n\t\t}\r\n\t}\r\n\toutLowPart = 0;\r\n\toutHighPart = 0;\r\n\treturn false; // unsuccessful\r\n}\r\n```\r\n\r\nIf desired, TryConvertTo could also be supported for floating-point as follows.\r\n```\r\npublic bool TryConvertTo(out double outValue);\r\npublic bool TryConvertTo(out single outValue);\r\npublic bool TryConvertTo(out decimal outValue);\r\n\r\npublic double ConvertToFloat64();\r\npublic single ConvertToFloat32();\r\npublic decimal ConvertToDecimal();\r\n```\r\nNote `TryConvertTo(out double)` etc should only return exactly converted values.  If the BigInteger would be inexactly/approx represented by float64 (System.Double), then null should be returned.  If you want an inexact conversion to float64, then use the preexisting `public static explicit operator Double(BigInteger value)` that is already present in BigInteger.  Alternatively, if desired, `TryConvertTo(out double)` might have a parameter to control exact versus inexact conversion, as follows:\r\n```\r\npublic bool TryConvertTo(out double outValue, bool approximation = false);\r\npublic bool TryConvertTo(out single outValue, bool approximation = false);\r\npublic bool TryConvertTo(out decimal outValue, bool approximation = false);\r\n```\r\n\r\nFor reference, previously @tannergooding mentioned \"ConvertTo\" methods in addition to the \"TryConvertTo\":\r\n\u003e We should likely also consider exposing plain ConvertToX methods for contrast (as I believe the non-throwing methods would be the explicit casts otherwise).\r\n",
                                           "updatedAt":  "2019-05-03T18:50:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTIxNDkxOQ==",
                                           "createdAt":  "2019-05-03T19:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAoBYHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FiniteReality",
                                                                               "createdAt":  "2019-05-03T19:41:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Just wanted to say, as much as there are some great ideas for new APIs, they need to be split out into a separate proposal.\r\n\r\nThe initial proposal for the `BigInteger.Builder` should just try to provide parity with the existing `BigInteger` struct. This simplifies the review process and will give it a higher chance of being merged.\r\n\r\nThe entirely new APIs can then be reviewed/processed independently (which also makes their review simpler and gives them a higher chance of being accepted) with the assumption that they will either also make it into the builder (whether accepted/merged before or after the builder).",
                                           "updatedAt":  "2019-05-03T19:35:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTIxNjEzNg==",
                                           "createdAt":  "2019-05-03T19:40:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "I thought further about this issue:  On one hand, the idea of \"MultiplyBy\" with `return this;` was liked, and it works well with multiplication etc., but not with certain other special operations such as `Builder.GreatestCommonDivisor`, therefore I suggest the following API where suitable operations are represented in \"By\" form whereas other operations are represented in \"return void\" form.\r\n```\r\npublic Builder MultiplyBy(Builder operand);\r\npublic Builder MultiplyBy(BigInteger operand);\r\npublic Builder MultiplyBy(Int32 operand);\r\npublic Builder MultiplyBy(Int64 operand);\r\n\r\npublic Builder DivideBy(Builder operand);\r\npublic Builder DivideBy(BigInteger operand);\r\npublic Builder DivideBy(Int32 operand);\r\npublic Builder DivideBy(Int64 operand);\r\n\r\npublic Builder RaiseBy(Int32 exponent);\r\n...\r\npublic Builder Increment();\r\npublic Builder Decrement();\r\n...\r\npublic Builder InvertSign(); // will be renamed to \"Negate\" unfortunately.\r\npublic Builder MakePositive(); // will be renamed to \"Abs\" unfortunately.\r\npublic Builder MakeNegative();\r\npublic Builder OnesComplement();\r\n...\r\n```\r\nAnd the following non-static methods return void/nothing and store the result into `this`.  Any preexisting value in `this` is ignored and overwritten.\r\n```\r\npublic void GreatestCommonDivisor(Builder left, Builder right);\r\npublic void PowerModulo(Builder value, Builder exponent, Builder modulus);\r\npublic void SelectLowest(Builder operandA, Builder operandB);\r\npublic void SelectLowest(Builder operandA, Builder operandB, Builder operandC);\r\npublic void SelectHighest(Builder operandA, Builder operandB);\r\npublic void SelectHighest(Builder operandA, Builder operandB, Builder operandC);\r\n```\r\n\r\nIf desired, **both** the `MultiplyBy` and `Multiply` patterns could be supported as follows, with `MultiplyBy` implemented by invoking `this.Multiply`.\r\n```\r\npublic void Multiply(Builder operandA, Builder operandB) { ... }\r\n\r\npublic Builder MultiplyBy(Builder operand)\r\n{\r\n    this.Multiply(this, operand);\r\n    return this;\r\n}\r\n\r\npublic Builder MultiplyBy(BigInteger operand) { ... }\r\npublic Builder MultiplyBy(Int32 operand) { ... }\r\npublic Builder MultiplyBy(Int64 operand) { ... }\r\n```\r\n\r\nstatic/non-instance 3-parameter forms might also be supported as follows, and the methods with 1 and 2 parameters are implemented by invoking the 3-parameter method.\r\n```\r\n// Non-instance method:\r\npublic static void Multiply(Builder destination, Builder operandA, Builder operandB) { ... }\r\n\r\n// Per-instance methods:\r\npublic void Multiply(Builder operandA, Builder operandB)\r\n{\r\n    Builder.Multiply(this, operandA, operandB);\r\n}\r\n\r\npublic Builder MultiplyBy(Builder operand)\r\n{\r\n    Builder.Multiply(this, this, operand);\r\n    return this;\r\n}\r\n\r\npublic Builder MultiplyBy(BigInteger operand) { ... }\r\npublic Builder MultiplyBy(Int32 operand) { ... }\r\npublic Builder MultiplyBy(Int64 operand) { ... }\r\n```\r\n\r\nRe the overloads to conveniently support the operand being any of Builder, BigInteger, Int32, Int64, these convenient shortcuts would probably only be supported with `MultiplyBy(operand)` not `Multiply(a,b)` and not `Multiply(dest,a,b)`, because the 2-param and 3-param methods would produce too many combinations.  See also the `SetValue` methods that I proposed in a previous message:\r\n\r\n```\r\nclass Builder\r\n{\r\n    public void SetValue(Int32 value) { ... }\r\n    public void SetValue(UInt32 value) { ... }\r\n    public void SetValue(Int64 value) { ... }\r\n    public void SetValue(UInt64 value) { ... }\r\n\r\n    // The following may serve as tiny optimizations but it depends on the internal details of Builder.\r\n    public void SetValue(UInt8 value) { this.SetValue((UInt32)value); }\r\n    public void SetValue(UInt16 value) { this.SetValue((UInt32)value); }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2019-05-03T19:40:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTIyMjQ5MQ==",
                                           "createdAt":  "2019-05-03T20:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "verelpode",
                                           "body":  "@tannergooding\r\n\u003e The entirely new APIs can then be reviewed/processed independently\r\n\r\nOK.  When you update the Builder proposal, you could place the summary/API of the separate proposal in a commented-out section like follows:\r\n```\r\nclass Builder\r\n{\r\n    public Builder MultiplyBy(Builder operand);\r\n    ...\r\n\r\n    /*\r\n    The following methods are also proposed but will be finalized via a separate proposal.\r\n    ...\r\n    ...\r\n    */\r\n}\r\n```\r\n\r\nThe reason for summarizing the separate proposal in a commented-out section is this:  Sometimes a design appears good when we see and consider only the small picture, but it no longer appears good when we see **the big picture**.  Thus I suggest that \"Stage 1\" is decided with inclusion of a summary of the ideas in \"Stage 2\" even though \"Stage 2\" will be implemented via a separate proposal.  This way we avoid losing the big picture, yet still gain the advantages of separation that you mentioned.",
                                           "updatedAt":  "2019-05-03T20:02:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjU4NTc3OA==",
                                           "createdAt":  "2020-05-22T09:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bazzilic",
                                           "body":  "Is there any movement on this?",
                                           "updatedAt":  "2020-05-22T09:08:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjc1Mzg2OQ==",
                                           "createdAt":  "2020-05-22T15:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This will end up on the general backlog of issues so it might be a bit before it gets to API review, reviewed, approved, and implemented.\r\n\r\nGiven its nature, it likely would benefit from a prototype being built to vet that it works as intended. I would be fine with that happening in dotnet/corefxlab under the `System.Numerics.Experimental` project if someone (or multiple people) want to give it a go.\r\n\r\nThe experimental package would then be useable and would help ensure any API surface we took to API review was correct and that we weren\u0027t missing anything obvious.",
                                           "updatedAt":  "2020-05-22T15:27:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTU5MTAzOA==",
                                           "createdAt":  "2021-05-27T12:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JasonBock",
                                           "body":  "FWIW I **just** ran into this (sort of). I\u0027m doing multiple multiplications of `BigInteger` values, and I\u0027m seeing allocations for every single one, even though I really only need \"one\" `BigInteger` value. If there was a \"Builder\" type that would reduce the allocations \r\n(and stay performant) that would be a really nice addition. I hope this doesn\u0027t stay on the backlog too long :) ",
                                           "updatedAt":  "2021-05-27T12:28:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTY0MzQ3MQ==",
                                           "createdAt":  "2021-05-27T13:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtMlHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JasonBock",
                                                                               "createdAt":  "2021-05-27T13:46:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FiniteReality",
                                                                               "createdAt":  "2021-05-27T20:16:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SunsetQuest",
                                                                               "createdAt":  "2021-06-10T18:27:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2021-10-24T02:56:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bazzilic",
                                                                               "createdAt":  "2022-10-03T14:31:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This won\u0027t happen for .NET 6, but this is one of the things I want to address in the near future",
                                           "updatedAt":  "2021-05-27T13:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44VOqa",
                                           "createdAt":  "2021-10-17T10:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2zESg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bazzilic",
                                                                               "createdAt":  "2023-02-27T08:47:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "koszeggy",
                                           "body":  "Apart from building a new value without many allocations, it would also be useful to access the inner bytes of an already built `BigInteger`, without calling the allocating `ToByteArray` method:\r\n\r\n```cs\r\npublic partial struct BigInteger\r\n{\r\n    // could be an indexer just like on string and StringBuilder but since .NET Core 2.1 we have more parameters\r\n    public byte GetByte(int index, bool isUnsigned = false, bool isBigEndian = false);\r\n}\r\n```\r\n\r\nAnd of course, this could appear also on the `Builder` class. The `isUnsigned` and `isBigEndian` parameters work like in the `ToByteArray` and `GetByteCount` methods.\r\n\r\n----\r\nEdit: Maybe the `Builder` could expose the actual little endian raw data in two\u0027s component format via a writable indexer:\r\n```cs\r\n// Only in Builder: to access the actual raw content:\r\npublic byte this[int index] { get; set; } // accesses _sign for small values\r\npublic int RawLength { get; }\r\n```",
                                           "updatedAt":  "2021-10-17T10:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WKSNz",
                                           "createdAt":  "2023-02-27T01:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8Gl9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "bazzilic",
                                                                               "createdAt":  "2023-02-27T08:47:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "deromik",
                                                                               "createdAt":  "2023-05-21T13:17:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "izilla",
                                           "body":  "Any movement on this?",
                                           "updatedAt":  "2023-02-27T01:20:54Z"
                                       }
                                   ],
                         "totalCount":  35
                     },
        "title":  "Expose a BigInteger.Builder to help avoid so many copies/allocations",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1630",
        "createdAt":  "2020-01-11T13:07:21Z",
        "number":  1630,
        "author":  "dovisutu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJoDVw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2020-03-26T13:41:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2020-08-23T13:30:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2023-06-24T18:23:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ezequias2d",
                                            "createdAt":  "2025-05-26T23:36:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-08-02T20:55:37Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-12-06T22:56:07Z",
        "body":  "### Part of #27204\r\n\r\nIn **IEEE 754:2008 part 5.12.3**, transfering a float/double from/to an `external hexadecimal-significand character sequence representing finite number` is requested while we don\u0027t have it yet. The pattern is like this: (regex)\r\n```regex\r\n[+-]?0[xX](?:[\\da-fA-F]*\\.[\\da-fA-F]+|[\\da-fA-F]\\.?)(?:[pP][+-]?\\d+)?\r\n```\r\n\u003e notice that this is slightly different to the standard based on the discussion below, which talked about the exponent part\r\n\r\nwhich means:\r\n\r\nvalid | invalid\r\n----- | -------\r\n+0x7ff.3edp+1 | +7ff.3edp-1\r\n0x7ff.3edp+1 | 0x7ff.3ede+1\r\n0x7ff.3edp1 | 0x7ff.3uup1\r\n+0x7ff.3edp1 | 0x7ff.3ed\r\n+0X7FF.3EDP1 | 0X7FF.3ED\r\n-0x7ff.3edp1 | 0x7ff_3edp-1\r\n0x7ff. | +-0x7ff.3edp-1\r\n0x7ff  | 0x7fu.3edp-1\r\n0x.3edp-1 | 0x.p-1\r\n\r\n\r\n#### benefits\r\n- Easier parsing for native hexadecimal float/double. for example, `0x0.ffp0` is the equivalent of `0.99609375` while using less chars. Same for formatting as it reduces the size of string to transfer.\r\n- Parsed number is percise in the limit of float/double\u0027s limitations. Since both float and double are based on raw bit, transistion from hexadecimal literal to them would be easier and without rounding if they are in the limitation. parsing decimals, on the other hand, would often has to round.\r\n- It\u0027s in IEEE 754:2008/2019 standard, so it\u0027s necessary to add it.\r\n# proposal APIs\r\n```c#\r\nnamespace System.Globalization {\r\n    [Flags]\r\n    enum NumberStyles {\r\n        // ...,\r\n        HexFloat = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowHexSpecifier | AllowDecimalPoint\r\n        // ,...\r\n    }\r\n}\r\n```\r\nAnd let `Numbers.ParseDouble/Single(string s, NumberStyles style[, NumberFormatInfo info])` accept `Numberstyles.HexFloat` (or it without `NumberStyles.AllowDecimalPoint`) and correctly parse string.\r\n\r\nEdit `Numbers.FormatDouble/Single(ref ValueStringBuilder sb, double/float value, ReadOnlySpan\u003cchar\u003e format, NumberFormatInfo info)` so that they can correctly identify `X` specifier (which is also used for outputting integers in hex) which may have a trailing precision specifier, and correctly format it. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT-Clyw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzMxNjE1OQ==",
                                           "createdAt":  "2020-01-11T13:16:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @tannergooding ",
                                           "updatedAt":  "2020-01-11T13:16:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzMyMTYzNg==",
                                           "createdAt":  "2020-01-11T14:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Tracked by https://github.com/dotnet/runtime/issues/1387?",
                                           "updatedAt":  "2020-01-11T14:28:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzM0MDE1NA==",
                                           "createdAt":  "2020-01-11T18:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks for opening this, its good to see additional customer wants for these areas 😄 \r\n\r\nIt is partially tracked by https://github.com/dotnet/corefx/issues/31901 (which is IEEE 754:2008 compliance) and by https://github.com/dotnet/runtime/issues/1387 (which is IEEE 754:2019 compliance), but those are largely meta issues and the individual proposals will be easier to take through API review.\r\n\r\nThe format specifier can be broken down into:\r\n```\r\nsign:           [+-]?\r\nhexIndicator:   0[xX]\r\nhexSignificand: (?:[\\da-fA-F]*\\.[\\da-fA-F]+|[\\da-fA-F]+\\.?)\r\ndecExponent:    [pP][+-]?\\d+\r\n```\r\n\r\nThe terminal `[fFdD]?` listed is not actually part of the IEEE specification and should be excluded.\r\nI also updated `hexSignificand` to clarify that just `.` is not valid.\r\n\r\nThe computed value is `hexSignificand * 2^decExponent`.\r\n\r\nSo, for example if you have `0x1.234p0` this is:\r\n* `0x1` == `1`\r\n* `0x234 * 16^-3` == `564 * 16^-3` == `0.1376953125`\r\n* `1.1376953125 * 2^0` == `1.1376953125`",
                                           "updatedAt":  "2020-01-11T18:07:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzM0MDI1Ng==",
                                           "createdAt":  "2020-01-11T18:08:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Even though this isn\u0027t a new API, I believe we still want to take it through API review since it is modifying an existing API.\r\n\r\nWe would want to check it against the compat bar and make the necessary decisions around what flags would be used to support this functionality and ensure that we wouldn\u0027t accidentally introduce any breaking changes, etc.",
                                           "updatedAt":  "2020-01-11T18:08:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODE2NjQ3MA==",
                                           "createdAt":  "2020-03-12T12:47:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "I\u0027ve updated the issue description to show what changes should be made. Free to discuss.",
                                           "updatedAt":  "2020-03-12T12:47:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODU0OTA0Nw==",
                                           "createdAt":  "2020-03-13T04:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "(Sorry for the mess when I edit the title)",
                                           "updatedAt":  "2020-03-13T04:58:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDQ1MDcwNQ==",
                                           "createdAt":  "2020-03-26T14:06:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "Would this change also allow more combinations with `AllowHexSpecifier`? e.g. combining it with only `AllowLeadingSign` (without `AllowDecimalPoint`).",
                                           "updatedAt":  "2020-03-26T14:06:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDQ3MjU1OQ==",
                                           "createdAt":  "2020-03-26T14:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t see why it wouldn\u0027t, provided it was still valid according to the IEEE requirements.",
                                           "updatedAt":  "2020-03-26T14:46:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDk1NzIzNQ==",
                                           "createdAt":  "2020-03-27T11:47:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "\u003e I don\u0027t see why it wouldn\u0027t, provided it was still valid according to the IEEE requirements.\r\n\r\nYeah, it makes sense, but that is *out of scope* - which should be parsed into  signed integer, not floating point nunber - so I think it should be proposed in a separate issue, though.",
                                           "updatedAt":  "2020-03-27T11:47:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTEwNDk0Nw==",
                                           "createdAt":  "2020-03-27T16:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t believe its out of scope, as I said as long as its still valid according to the IEEE requirements, it should be fine.\r\n\r\nThere are \"paths\" where the decimal point isn\u0027t required and so the user should fully be able to specify that `hex` is allowed but `decimal-point` is not. It\u0027s an advanced scenario, but the number parser already supports it and will continue doing so even if we add support for `hex`, so there is no reason to block it. The interesting scenario would be whether or not to allow the exponent to be optional and to default to `0` (which would still be valid based on the normal conversion rules, etc).\r\n\r\n```\r\nsign:           [+-]?\r\nhexIndicator:   0[xX]\r\nhexSignificand: (?:[\\da-fA-F]*\\.[\\da-fA-F]+|[\\da-fA-F]+\\.?)\r\ndecExponent:    [pP][+-]?\\d+\r\n```\r\n\r\n* The sign is optional but must be `+` or `-`\r\n* The hex indicator is required and must be `0x` or `0X`\r\n* The hex significand is required and must be one of:\r\n  * one or more hex digits\r\n  * one or more hex digits followed by `.`\r\n  * one or more hex characters followed by `.` followed by one or more hex digits\r\n  * `.` followed by one or more hex digits\r\n* The decimal exponent is required and must be `p` or `P` followed by an optional sign followed by one or more decimal digits",
                                           "updatedAt":  "2020-03-27T16:48:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTM4OTE4NA==",
                                           "createdAt":  "2020-03-28T03:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "Oh, right. numbers like +0x23p1 can also be parsed as float... So this is OK to be valid (if users doesn\u0027t want to accept input that has `.`). You are right. ~*Let Int.Parse() accept it, however, is out of scope.*~\r\n\r\nBut about exponent part... I saw an explanation of this being mandatory in the standard because it may create confusion like:\r\n```\r\n0x1.23e+1\r\n```\r\nWhile it clearly only parses into *1* state:`(0x1.23e) + 1`, but users may see it as a valid number.\r\n\r\nBut in c(++)\u0027s implementation this is optional:\r\n(strtod)\r\n \u003e - A 0x or 0X prefix, then a sequence of hexadecimal digits (as in isxdigit) optionally containing a period which separates the whole and fractional number parts. Optionally followed by a power of 2 exponent (a p or P character followed by an optional sign and a sequence of hexadecimal digits).\r\n\r\nI think when *parsing*, let the exponent optional is OK, because you **can\u0027t** parse an expression into a floating-point number. \r\n\r\n~But it should be mandatory when we (possibly?) move this to *a literal value in c#/vb/f# to* avoid confusion. However, lefting it optional may still make sense because when users are aware of using this, they should already know that the exponent of hexadecimal float is `p`, not `e`.~\r\nThis part I deleted is out of scope and should be considered by the language design group.",
                                           "updatedAt":  "2020-03-28T03:42:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTM2MTM5MA==",
                                           "createdAt":  "2020-04-05T05:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "Updated the description based on the discussion.",
                                           "updatedAt":  "2020-04-05T05:23:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODc1MDQ5Ng==",
                                           "createdAt":  "2020-04-24T01:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "Sorry, but anything going on?",
                                           "updatedAt":  "2020-04-24T01:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODc1MDgxMw==",
                                           "createdAt":  "2020-04-24T01:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This hasn\u0027t made it to API review yet. Issues that are critical to .NET 5 are being reviewed first and the general backlog is then reviewed from oldest to newest.",
                                           "updatedAt":  "2020-04-24T01:23:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODc1MTkyMg==",
                                           "createdAt":  "2020-04-24T01:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "OK, thanks. :D",
                                           "updatedAt":  "2020-04-24T01:28:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY3MDcyOA==",
                                           "createdAt":  "2020-07-24T18:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=TofmrPLEeFI\u0026t=0h43m55s)\n\n* API wise, the only change is the `NumberStyles` addition of `HexFloat`\r\n* Behavior wise, this changes parsing of `float` and `double` to support the `x` format specifier. This isn\u0027t a breaking change because `float` and `double` throw when `x` is passed.\r\n* We considered adding `AllowHexPrefix` because integers don\u0027t allow `0x` as  the prefix, while `float` and `double` would. However, for floats we want the prefix to be required, so `AllowHexPrefix` would necessary be a separate bit. Combining it with `HexFloat` would make it optional. Thus, we can do it later.\r\n\r\n```C#\r\nnamespace System.Globalization\r\n{\r\n    public partial enum NumberStyles\r\n    {\r\n        HexFloat = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowHexSpecifier | AllowDecimalPoint\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-07-24T19:23:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ2NTk3Mg==",
                                           "createdAt":  "2020-11-20T23:54:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXlQLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2020-11-21T00:15:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2020-11-21T00:22:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "phuclv90",
                                                                               "createdAt":  "2020-11-21T05:48:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "HurricanKai",
                                                                               "createdAt":  "2020-11-21T18:03:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pgovind",
                                           "body":  "Assigning myself to this. ",
                                           "updatedAt":  "2020-11-20T23:54:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Tyiv",
                                           "createdAt":  "2022-03-08T19:57:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCR-P3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2022-03-08T20:16:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@dovisutu are you interested in working on this? If not I will label up for grabs.",
                                           "updatedAt":  "2022-03-08T19:57:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_h_Qc",
                                           "createdAt":  "2022-03-12T12:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dovisutu",
                                           "body":  "\u003e @dovisutu are you interested in working on this? If not I will label up for grabs.\r\n\r\nWell, nope, I don\u0027t think I have spare time (or *adequate abilities*?) to work on this. Fine to label as up-for-grabs.",
                                           "updatedAt":  "2022-03-12T12:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ppcvt",
                                           "createdAt":  "2022-12-03T21:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e \r\n\r\nIt seems that that regex might be wrong, I found this one that seems to behave correctly:\r\n\r\n`0[Xx]([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.?)[Pp][-+]?[0-9]+[flFL]?`\r\n\r\nFrom here: https://efxa.org/2014/05/10/regular-expressions-for-matching-data-values-in-compiler-lexers/\r\n",
                                           "updatedAt":  "2022-12-03T21:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P2n1d",
                                           "createdAt":  "2022-12-06T17:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "It\u0027s possible its incorrect, but the ultimate logic won\u0027t be using a RegEx anyways",
                                           "updatedAt":  "2022-12-06T17:22:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3Aex",
                                           "createdAt":  "2022-12-06T18:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e It\u0027s possible its incorrect, but the ultimate logic won\u0027t be using a RegEx anyways\r\n\r\nOK, is that because of performance considerations?",
                                           "updatedAt":  "2022-12-06T18:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3ENZ",
                                           "createdAt":  "2022-12-06T19:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Performance is certainly a factor, but the biggest reason is float/double live in System.Private.CoreLib, which can\u0027t depend on System.Text.RegularExpressions.dll",
                                           "updatedAt":  "2022-12-06T19:00:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P4KXL",
                                           "createdAt":  "2022-12-06T22:56:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e Performance is certainly a factor, but the biggest reason is float/double live in System.Private.CoreLib, which can\u0027t depend on System.Text.RegularExpressions.dll\r\n\r\nThat\u0027s quite interesting, thanks for explaining!\r\n\r\n",
                                           "updatedAt":  "2022-12-06T22:56:06Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "Add the ability to parse/format a float/double from/to a hexadecimal literal",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35980",
        "createdAt":  "2020-05-07T19:00:28Z",
        "number":  35980,
        "author":  "Perksey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFsKqg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2020-05-07T19:45:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Grepsy",
                                            "createdAt":  "2020-05-08T10:02:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Grepsy",
                                            "createdAt":  "2020-05-08T10:02:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2020-05-08T23:41:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-05-09T00:55:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-05-09T00:55:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thargy",
                                            "createdAt":  "2020-05-13T20:21:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zdivelbiss",
                                            "createdAt":  "2020-05-16T16:36:48Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "zdivelbiss",
                                            "createdAt":  "2020-05-16T16:36:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "carmineos",
                                            "createdAt":  "2020-06-02T10:53:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattleibow",
                                            "createdAt":  "2020-06-15T14:15:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdmozibur",
                                            "createdAt":  "2020-06-15T14:53:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wieslawsoltes",
                                            "createdAt":  "2020-06-15T14:59:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "wieslawsoltes",
                                            "createdAt":  "2020-06-15T14:59:44Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "wieslawsoltes",
                                            "createdAt":  "2020-06-15T14:59:48Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "wieslawsoltes",
                                            "createdAt":  "2020-06-15T14:59:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "costoda-ey",
                                            "createdAt":  "2020-06-15T16:02:48Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "costoda-ey",
                                            "createdAt":  "2020-06-15T16:02:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "costoda-ey",
                                            "createdAt":  "2020-06-15T16:02:52Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "costoda-ey",
                                            "createdAt":  "2020-06-15T16:02:53Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "JimBobSquarePants",
                                            "createdAt":  "2020-06-15T19:05:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2020-06-29T18:53:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yoshiask",
                                            "createdAt":  "2020-08-18T20:48:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "yoshiask",
                                            "createdAt":  "2020-08-18T20:48:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProphetLamb",
                                            "createdAt":  "2020-08-22T20:34:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atruskie",
                                            "createdAt":  "2020-11-16T13:57:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2021-02-24T18:09:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T02:57:17Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T02:57:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T02:57:18Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "jhm-ciberman",
                                            "createdAt":  "2021-06-14T02:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-06-14T05:46:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "james0x0A",
                                            "createdAt":  "2021-09-04T20:07:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vpenades",
                                            "createdAt":  "2021-10-02T12:36:19Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "asasine",
                                            "createdAt":  "2022-07-08T18:37:41Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "RadekVyM",
                                            "createdAt":  "2022-12-29T15:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rstarkov",
                                            "createdAt":  "2023-04-11T13:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gavin-Williams",
                                            "createdAt":  "2024-02-14T20:07:50Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AlbatorLaho",
                                            "createdAt":  "2024-03-24T23:50:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StefanPoelloth",
                                            "createdAt":  "2025-02-25T15:21:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xPaw",
                                            "createdAt":  "2025-07-04T08:06:45Z"
                                        }
                                    ],
                          "totalCount":  41
                      },
        "updatedAt":  "2023-06-24T09:37:40Z",
        "body":  "## Introduction\r\nSystem.Numerics.Vectors is a brilliant set of APIs for computing numerical vectors and matrices, however it has been lacking for a while. This has lead a number of people to whip up their own maths libraries (such as OpenTK and SharpDX, just to name a few) to fill in the gaps that System.Numerics left open. While #24168\u0027s proposal is certainly a step in the right direction and fixes the library\u0027s most glaring issue - the lack of double precision and other types of vectors - through \"generic vectors\". This is what I will be building on today.\r\n\r\nEach part of this proposal is individually adressable, however I figured it would be better to contain all of it under one roof due to how closely related they all are.\r\n\r\n## More matrices\r\n### Summary\r\nCurrently, System.Numerics only contains 2 matrix types: a matrix containing three two-dimensional vectors and a matrix containing four four-dimensional vectors. This presents problems when users want to use matrices with different dimensions.\r\n\r\n### Use cases\r\nAs with a lot of mathematical stuff, the most notable use case for matrices with more dimensions are graphical applications. For example, when developing GPU-accelerated 3D applications such as games and game engines the user (when creating data structures to be passed to the GPU and shaders running on the GPU) will have to pass a Vector4 even if the W components aren\u0027t needed or used in any meaningful way. Matrix4x3 solves this as it allows the user to still send 4 vectors to the GPU within a matrix without needing to specify the W component (as this will likely be done in the shader). The same goes for Matrix4x2 and 2D applications. \r\n\r\n### Proposal\r\n\r\nI propose the the following types be added:\r\n- Matrix2x2\u003cT\u003e\r\n- Matrix2x3\u003cT\u003e\r\n- Matrix2x4\u003cT\u003e\r\n- Matrix3x3\u003cT\u003e\r\n- Matrix3x4\u003cT\u003e\r\n- Matrix4x2\u003cT\u003e\r\n- Matrix4x3\u003cT\u003e\r\n\r\nMirroring their Matrix3x2 and Matrix4x4 counterparts\r\n\r\n## Box Geometry\r\n### Summary\r\nCurrently, there are no types providing axis-aligned bounding box (AABB) types, other than the System.Drawing types which do not use JIT intrinsics and do not use the System.Numerics types, making them awkward to fit into programs that are built around this library. I propose we add the following types:\r\n\r\n### Use cases\r\nAABBs are commonly found in applications that need to do collision detection between 2D objects or 3D objects. For example, games and physics engines alike use AABBs to create a box around objects and detect when two AABBs collide. AABB have also recently been used in a number of ray-tracing APIs and applications, allowing users to pass in \"acceleration structures\" using AABBs to decrease the complexity of ray-intersection calculations.\r\n\r\n### Box2\\\u003cT\\\u003e\r\n\r\n```cs\r\npublic struct Box2\u003cT\u003e : IEquatable\u003cBox2\u003cT\u003e\u003e\r\n{\r\n    public T Min0;\r\n    public T Min1;\r\n    public T Max0;\r\n    public T Max1;\r\n    public Vector2\u003cT\u003e Min { get; set; }\r\n    public Vector2\u003cT\u003e Max { get; set; }\r\n    public Box2(Vector2\u003cT\u003e min, Vector2\u003cT\u003e max);\r\n    public Box2(T min0, T min1, T max0, T max1);\r\n    public Vector2\u003cT\u003e Size { get; set; }\r\n    public Vector2\u003cT\u003e Center { get; set; }\r\n    public bool Contains(Vector2\u003cT\u003e point);\r\n    public bool Contains(Vector2\u003cT\u003e point, bool boundaryInclusive);\r\n    public bool Contains(Box2\u003cT\u003e other);\r\n    public T DistanceToNearestEdge(Vector2\u003cT\u003e point);\r\n    public void Translate(Vector2\u003cT\u003e distance);\r\n    public static Box2\u003cT\u003e Translate(Box2\u003cT\u003e input, Vector2\u003cT\u003e distance);\r\n    public void Scale(Vector2\u003cT\u003e scale, Vector2\u003cT\u003e anchor);\r\n    public static Box2\u003cT\u003e Scale(Box2\u003cT\u003e input, Vector2\u003cT\u003e scale, Vector2\u003cT\u003e anchor);\r\n    public void Inflate(Vector2\u003cT\u003e toPoint);\r\n    public static Box2\u003cT\u003e Inflate(Box2\u003cT\u003e input, Vector2\u003cT\u003e toPoint);\r\n    public static bool operator ==(Box2\u003cT\u003e left, Box2\u003cT\u003e right);\r\n    public static bool operator !=(Box2\u003cT\u003e left, Box2\u003cT\u003e right);\r\n    public bool Equals(Box2\u003cT\u003e other);\r\n    public bool Equals(object obj);\r\n}\r\n```\r\n\r\n### Box3\\\u003cT\\\u003e\r\n\r\n```cs\r\npublic struct Box3\u003cT\u003e : IEquatable\u003cBox3\u003cT\u003e\u003e\r\n{\r\n    public T Min0;\r\n    public T Min1;\r\n    public T Min2;\r\n    public T Max0;\r\n    public T Max1;\r\n    public T Min2;\r\n    public Vector3\u003cT\u003e Min { get; set; }\r\n    public Vector3\u003cT\u003e Max { get; set; }\r\n    public Box3(Vector3\u003cT\u003e min, Vector3\u003cT\u003e max);\r\n    public Box3(T min0, T min1, T min2, T max0, T max1, T max2);\r\n    public Vector3\u003cT\u003e Size { get; set; }\r\n    public Vector3\u003cT\u003e Center { get; set; }\r\n    public bool Contains(Vector3\u003cT\u003e point);\r\n    public bool Contains(Vector3\u003cT\u003e point, bool boundaryInclusive);\r\n    public bool Contains(Box3\u003cT\u003e other);\r\n    public T DistanceToNearestEdge(Vector3\u003cT\u003e point);\r\n    public void Translate(Vector3\u003cT\u003e distance);\r\n    public static Box3\u003cT\u003e Translate(Box3\u003cT\u003e input, Vector3\u003cT\u003e distance);\r\n    public void Scale(Vector3\u003cT\u003e scale, Vector3\u003cT\u003e anchor);\r\n    public static Box3\u003cT\u003e Scale(Box3\u003cT\u003e input, Vector3\u003cT\u003e scale, Vector3\u003cT\u003e anchor);\r\n    public void Inflate(Vector3\u003cT\u003e toPoint);\r\n    public static Box3\u003cT\u003e Inflate(Box3\u003cT\u003e input, Vector3\u003cT\u003e toPoint);\r\n    public static bool operator ==(Box3\u003cT\u003e left, Box3\u003cT\u003e right);\r\n    public static bool operator !=(Box3\u003cT\u003e left, Box3\u003cT\u003e right);\r\n    public bool Equals(Box3\u003cT\u003e other);\r\n    public bool Equals(object obj);\r\n}\r\n```\r\n\r\n## Bezier Geometry\r\n### Summary\r\n\r\nMany competing maths libraries contain bezier curve types which come in handy for many graphical operations such as vector graphics rendering, for example. Currently, the System.Numerics doesn\u0027t contain any curve types. Here are some proposed curve APIs:\r\n\r\n### Use cases\r\nBezier curves are used in all sorts of places. It\u0027s used by renderers of vector graphics (such as SVG files) and font renderers alike to achieve smooth curves. They also see use within the computer-aided design (CAD) segment - the concept of a \"bezier curve\" was actually adopted after Bezier was calculating smooth curves for Renault\u0027s cars.\r\n\r\n### BezierCurveCubic\\\u003cT\\\u003e\r\n```cs\r\npublic struct BezierCurveCubic\u003cT\u003e\r\n{\r\n    public T S0;\r\n    public T S1;\r\n    public T E0;\r\n    public T E1;\r\n    public T C00;\r\n    public T C01;\r\n    public T C10;\r\n    public T C11;\r\n    public T ParallelDistance;\r\n    public Vector2\u003cT\u003e StartAnchor { get; set; }\r\n    public Vector2\u003cT\u003e EndAnchor { get; set; }\r\n    public Vector2\u003cT\u003e FirstControlPoint { get; set; }\r\n    public Vector2\u003cT\u003e SecondControlPoint { get; set; }\r\n    public BezierCurveCubic(T s0, T s1, T e0, T e1, T c00, T c01, T c10, T c11, T parallel);\r\n    public BezierCurveCubic(Vector2\u003cT\u003e start, Vector2\u003cT\u003e end, Vector2\u003cT\u003e firstControl, Vector2\u003cT\u003e secondControl, T parallel = default);\r\n    public Vector2\u003cT\u003e CalculatePoint(T t); // 0 \u003c= t \u003c= 1\r\n    public Vector2\u003cT\u003e CalculatePointOfDerivative(T t);\r\n    public T CalculateLength(T precision);\r\n}\r\n```\r\n\r\n### BezierCurveQuadratic\\\u003cT\\\u003e\r\n\r\n```cs\r\npublic struct BezierCurveCubic\u003cT\u003e\r\n{\r\n    public T S0;\r\n    public T S1;\r\n    public T E0;\r\n    public T E1;\r\n    public T C00;\r\n    public T C01;\r\n    public T ParallelDistance;\r\n    public Vector2\u003cT\u003e StartAnchor { get; set; }\r\n    public Vector2\u003cT\u003e EndAnchor { get; set; }\r\n    public Vector2\u003cT\u003e ControlPoint { get; set; }\r\n    public BezierCurveCubic(T s0, T s1, T e0, T e1, T c0, T c1, T parallel);\r\n    public BezierCurveCubic(Vector2\u003cT\u003e start, Vector2\u003cT\u003e end, Vector2\u003cT\u003e control, T parallel = default);\r\n    public Vector2\u003cT\u003e CalculatePoint(T t); // 0 \u003c= t \u003c= 1\r\n    public Vector2\u003cT\u003e CalculatePointOfDerivative(T t);\r\n    public T CalculateLength(T precision);\r\n}\r\n```\r\n\r\n## Closing\r\nI hope that the CoreFX team take this into consideration. I work with vectors and matrices a lot, and as maintainer of OpenTK I was responsible for maintaining a maths library which fill these gaps (and am on the verge of writing another one for Silk.NET too.) My dearest hope is that System.Numerics.Vectors becomes feature-rich enough that there\u0027s no need for competing libraries to be developed, so I hope that this is helpful in removing fragmentation in this space if taken on by the CoreFX team. Thanks for reading.\r\n\r\n**EDIT 19:45 UTC**: Added use cases",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX6-JdQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQzODY3Mw==",
                                           "createdAt":  "2020-05-07T19:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-07T19:00:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ0MjYwMw==",
                                           "createdAt":  "2020-05-07T19:08:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks for the suggestion @Perksey. \r\n\r\nIt would be helpful if you could aggregate some real-world use cases for the various types and prior art where applicable. This will help centralize the information if this does eventually goto API review.\r\n\r\nDirectX Math and GLM provide a couple but not all of these types and the same can be seen if you look in other places like Direct2D, Unity, or other libraries.",
                                           "updatedAt":  "2020-05-07T19:08:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ2MDg5OQ==",
                                           "createdAt":  "2020-05-07T19:48:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "I\u0027ve edited to add some use cases, thanks for the suggestion.",
                                           "updatedAt":  "2020-05-07T19:48:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA2MTczMw==",
                                           "createdAt":  "2020-05-08T23:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "micampbell",
                                           "body":  "I was interested in pitching a Matrix3x3 as well.  Here is my reasoning. Matrix3x3 should be useful in other situations where solving a small system of equations like Ax = b. One such example - still in computational geometry (since many of System.Numerics seems to be focused on geometry) is finding the point that is common to 3 planes. Beyond this, there are countless uses for solving small systems of linear equations of order 2, 3, and 4. With the code already written to invert a 4x4 matrix, it seems only natural to extend this for 2 and 3.\r\nAdditionally, there are use cases in graphics where a full homogeneous coordinate transformation would be important for 2D systems - as the Matrix3x2 is intended to address. Filling out the 3x3 with the remaining projective terms could be used in keystoning (https://en.wikipedia.org/wiki/Keystone_effect) like the map tilt in Google Earth.\r\n\r\nI would like to see Matrix3x2 removed - along with the apologies for internal functions like invert and determinant which are not possible on non-square matrices. Instead both Matrix3x3 and Matrix4x4 would include an \"IsProjectiveTransform\" boolean. This could be used to indicate whether the last column is used or not. A Matrix3x2 with IsProjectiveTransform false, would work just like Matrix3x2. Similarly for Matrix4x4, which would function as a Matrix4x3. Finally these should be make into readonly structs. \r\nFor reference, I am currently making these changes in TVGL (https://github.com/DesignEngrLab/TVGL/blob/CS8Vectors/TessellationAndVoxelizationGeometryLibrary/Numerics/Matrix4x4.cs), which is a library that we are using for CAD/CAM applications.",
                                           "updatedAt":  "2020-05-08T23:38:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA2NDMxMw==",
                                           "createdAt":  "2020-05-08T23:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I would like to see Matrix3x2 removed - along with the apologies for internal functions like invert and determinant which are not possible on non-square matrices. Instead both Matrix3x3 and Matrix4x4 would include an \"IsProjectiveTransform\" boolean. This could be used to indicate whether the last column is used or not. A Matrix3x2 with IsProjectiveTransform false, would work just like Matrix3x2. Similarly for Matrix4x4, which would function as a Matrix4x3. Finally these should be make into readonly structs.\r\n\r\nNone of this is possible. They are all non-trivial breaking changes. It is also undesirable to use larger than necessary matrices in some scenarios and various libraries (such as DirectX Math and GLM) frequently provide types like `Matrix3x2` and `Matrix4x3` and even expose functions that may be useful but only sometimes possible, as they are intended for use in places where an approximation is \"good enough\".",
                                           "updatedAt":  "2020-05-08T23:38:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA2NTQ2Mg==",
                                           "createdAt":  "2020-05-08T23:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "micampbell",
                                           "body":  "I suppose that makes sense. \r\nStill, a case for Matrix3x3 and Matrix2x2 could be made. I\u0027m not prepared to properly do that at this time, and I don\u0027t want to distract from the plan of the OP, @Perksey .",
                                           "updatedAt":  "2020-05-08T23:52:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA2ODA0Ng==",
                                           "createdAt":  "2020-05-08T23:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "@micampbell Thanks for chipping in here. \n\nAll I’m after is System.Numerics.Vectors to become feasible for most scenarios out there, whereas today it’s currently lacking. As such it has (and continues to) lead developers to create their own spin-off libraries and that’s really what I’m trying to prevent - no one likes fragmentation on something as simple as this.\n\nIn any case, this will have to get past API review - something that has proven challenging (the original proposal for double precision vectors has been open for 3 years with continuous attention and no progression) because their priorities are elsewhere, so the ball is in their court and needs a nudge before we can pitch in. I would fully expect this to take a while though, and appreciate that Microsoft has to spend their time with other things instead of these proposals.",
                                           "updatedAt":  "2020-05-08T23:56:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzIyMDQwOQ==",
                                           "createdAt":  "2020-06-02T01:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "prollin",
                                           "body":  "An argument can be made for more matrix types. The rest seem to be outside of what such a core API should provide; for example AABB can be represented in multiple ways: Min/Max or Center/Extent, the later being more efficient for intersection tests.\r\n\r\nSystem.Numerics.Vectors is indeed lacking. I do think it should be limited to provide access to SIMD types and operators, anything more should be extension methods or part of a helper class (Math?).\r\n\r\nAs I mentioned in #24168, i think making those types actual primitive types would be ideal (and move all the math stuff in `Math`), though I have no idea how far fetch this is (or if it is even possible).",
                                           "updatedAt":  "2020-06-02T01:53:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDE2MzA4NA==",
                                           "createdAt":  "2020-06-15T14:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattleibow",
                                           "body":  "Hi folks! Love this issue! I need this for SkiaSharp https://github.com/mono/SkiaSharp/issues/1330\r\n\r\nSkiaSharp is a 2D drawing engine, and we have been using our own types. And everyone wants to use Numerics. But we can\u0027t because we don\u0027t have all the types we need.\r\n\r\nIt would be great to be able to use BCL-based, intrinsics-powered matrices. Even if just the 3x3 and 4x4.",
                                           "updatedAt":  "2020-06-15T14:17:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDE2NjMwMQ==",
                                           "createdAt":  "2020-06-15T14:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Hi Matt, the .NET team have a lot on their hands at the moment and seem to be prioritizing the backlog, so don\u0027t be surprised if this takes another 3 years to get in!\r\n\r\nNumerics-wise, we\u0027re currently busy implementing the new generic vectors which will support both float and double. The generic vectors are likely going to be in for .NET 5 in some form (whether hardware-accelerated or not) as there\u0027s a lot of backing by both the community as well as some .NET team members. Sadly I don\u0027t forsee any numerics proposals getting in for .NET 5.\r\n\r\nI need to edit this issue a bit so it\u0027s constructed properly, hopefully then tanner will be able to mark it as `api-ready-for-review` and then we play the waiting game for it to finally make it to review.",
                                           "updatedAt":  "2020-06-15T14:23:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDE2NzcwNQ==",
                                           "createdAt":  "2020-06-15T14:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattleibow",
                                           "body":  "I understand the work. I\u0027ve been on some of the calls. \r\n\r\nBut this raises the question... I am wanting to use the types across the native boundary... What will the new generics mean for this? Will it be possible to just use as is if the APIs match? Can generics be used via p/invokes?",
                                           "updatedAt":  "2020-06-15T14:25:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDE3MTQxNw==",
                                           "createdAt":  "2020-06-15T14:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Double vectors and float vectors with both be blittable, the generics don\u0027t change that as we throw an exception if you attempt to use or contruct any of the System.Numerics types using any T that isn\u0027t supported (currently only float and double), similar to how Vector\\\u003cT\\\u003e works today.\r\n\r\nHowever, you won\u0027t be able to take a pointer to Vector4\\\u003cT\\\u003e and friends. You will need to know that the T is either float or double as the constraint on those types are `struct` rather than `unmanaged`, so you will only be able to take a pointer to a Vector4\\\u003cT\\\u003e whose T is guaranteed to be unmanaged.",
                                           "updatedAt":  "2020-06-15T14:32:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDE3OTc2OQ==",
                                           "createdAt":  "2020-06-15T14:45:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "For the simple types like `Vector2/3/4`, `Matrix3x2`, and `Matrix4x4`, the types will be useable in interop code. They reasonably only have a single underlying representation.\r\nFor types like `Plane` and `Quaternion` it\u0027s likely that the underlying implementation won\u0027t change, but they (particularly `Plane`) have multiple underlying representations across the industry, so it isn\u0027t strictly guaranteed that will always be the case.\r\n\r\nGenerics are allowed in interop code since .NET Core 3.0, you can likewise take the address of a generic provided it meets the unmanaged constraint. Given the constraint is `where T : struct`, you\u0027ll be able to have `Vector2\u003cfloat\u003e*` or `Vector2\u003cdouble*\u003e`, but not `Vector2\u003cT\u003e*`.",
                                           "updatedAt":  "2020-06-15T14:46:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDMzNTMzNg==",
                                           "createdAt":  "2021-06-14T03:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhm-ciberman",
                                           "body":  "\u003e However, you won\u0027t be able to take a pointer to Vector4\u003cT\u003e and friends. You will need to know that the T is either float or double as the constraint on those types are `struct` rather than `unmanaged`, so you will only be able to take a pointer to a Vector4\u003cT\u003e whose T is guaranteed to be unmanaged.\r\n\r\n@Perksey Can you elaborate why do you want `Vector4\u003cT\u003e` to be `where T : struct` instead of `where T : unmanaged`? I don\u0027t see any benefit in allowing managed data inside a Vector4 that is meant only for graphics programming and numeric calculations. \r\n\r\nby the way, I\u0027m all in with this proposal 🚀 As a simply developer starting with graphics programming, not having a consistent api to work with AABB/Beziers/Matrices is a headache.\r\n",
                                           "updatedAt":  "2021-06-14T03:20:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fr4l1",
                                           "createdAt":  "2023-06-24T09:37:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbtDVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jhm-ciberman",
                                                                               "createdAt":  "2023-06-24T20:45:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "AlbatorLaho",
                                                                               "createdAt":  "2024-03-24T23:51:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "richard-sim",
                                           "body":  "\u003e don\u0027t be surprised if this takes another 3 years to get in!\r\n\u003e ...\r\n\u003e I need to edit this issue a bit so it\u0027s constructed properly, hopefully then tanner will be able to mark it as `api-ready-for-review` and then we play the waiting game for it to finally make it to review.\r\n\r\nSo, we\u0027re now 3 years on, and I see some nice improvements being made to the Matrix3x2 and Matrix4x4 types for .net8.0 - yay!\r\n\r\nUnfortunately, it looks like this proposal never made it to being `api-ready-for-review`, so I\u0027m guessing there\u0027s no hope for even just the essential (from a 3D graphics perspective) Matrix3x3 and Matrix4x3 types to make it in with the other Numerics changes going into .net8.0. Another 3 years?",
                                           "updatedAt":  "2023-06-24T09:37:40Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Proposal for more System.Numerics APIs",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38160",
        "createdAt":  "2020-06-19T18:17:35Z",
        "number":  38160,
        "author":  "FrantzUml",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9XSmA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2020-06-19T19:23:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "caihongxu",
                                            "createdAt":  "2020-06-23T03:30:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VBAndCs",
                                            "createdAt":  "2020-08-06T19:17:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ysmgthntt",
                                            "createdAt":  "2020-08-16T03:32:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "airbreather",
                                            "createdAt":  "2020-09-26T13:15:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ALobpreis",
                                            "createdAt":  "2020-12-18T04:50:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Apostolique",
                                            "createdAt":  "2021-03-06T01:21:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xstevenne",
                                            "createdAt":  "2021-07-29T08:53:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rast1234",
                                            "createdAt":  "2023-06-06T12:58:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sigod",
                                            "createdAt":  "2024-03-12T14:14:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JochCool",
                                            "createdAt":  "2024-05-01T12:54:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koszeggy",
                                            "createdAt":  "2024-11-21T12:47:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeWZC",
                                            "createdAt":  "2024-12-11T02:25:21Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-07-04T07:11:35Z",
        "body":  "### Math.Round with rounding type\r\n\r\nThe MidpointRounding enum is a \"rounding to nearest integer\" and not a \"directed rounding\".\r\nSo, for example, the MidpointRounding.ToZero description says : \"when a number is halfway between two others.......\"\r\nSo, System.Math.Round(-1.8D, any type of MidpointRounding) should return -2 because it\u0027s the nearest integer value of -1.8.\r\n\r\nBut, with ToPositiveInfinity and ToZero, the result is badly -1\r\n\r\nIt\u0027s a misunderstanding of the rounding math theory.\r\n\r\nThe result should be different only when the value to round is halfway between two others.\r\n\r\nWatching the code for Core 3.1, the developpers make select between the MidpointRounding mode even when the value to round is not halfway.\r\n\r\nIn definitive, the System.Math is buggy.\r\n\r\nCordially",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg5-Qzg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgwMjQ4Nw==",
                                           "createdAt":  "2020-06-19T18:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-19T18:17:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgwOTA2NA==",
                                           "createdAt":  "2020-06-19T18:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBiePrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Apostolique",
                                                                               "createdAt":  "2021-03-06T01:22:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Even if unintuitive (which I agree it is, and the documentation does not help either), this behavior cannot be changed as it would be the worst kind of a breaking change (silent change of runtime behavior). The bar for these changes is incredibly high.",
                                           "updatedAt":  "2020-06-19T18:34:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgxMzY2Ng==",
                                           "createdAt":  "2020-06-19T18:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrantzUml",
                                           "body":  "You\u0027re right with the breaking change, but the documentation msdn says :\r\nthe MidpointRounding enumeration does not affect the result of the rounding operation when the next digit is from 0 to 4 and from 6 to 9.\r\nHowever, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the MidpointRounding enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.\r\n\r\nSo, the MidpointRounding mode is quiet a \"nearest rounding\" and not a \"directed rounding\".\r\nFor example, the documentation of msdn about ToPositiveInfinity says \"When a number is halfway between two others, it is rounded toward the result closest to and no less than the infinitely precise result.\"\r\nBut he comments in the source code indicates \"Directed rounding: Round up to the next value, toward positive infinity\".\r\n\r\nIs it a bad design and conception from start ?\r\n ",
                                           "updatedAt":  "2020-06-19T18:47:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgyMDA1Mw==",
                                           "createdAt":  "2020-06-19T19:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e Is it a bad design and conception from start?\r\n\r\nI would say it is a confusing design (the name of the enum is indeed `MidpointRounding`). But given it is a very recent addition to the framework (see [here](https://apisof.net/catalog/System.MidpointRounding.ToZero)), I suspect the reasoning behind it is discoverability, which was determined to be of higher value than consistency (see the [original issue](https://github.com/dotnet/runtime/issues/27205), I suppose). I might be able to dig up an API review for it from YouTube.\r\n\r\nHowever, what seems quite clear is that docs need some improvement. Maybe [file](https://github.com/dotnet/docs) a doc bug (or, if you want, create a pull request)?",
                                           "updatedAt":  "2020-06-19T19:04:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgyMjI3NA==",
                                           "createdAt":  "2020-06-19T19:10:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The APIs were originally added to cover some missing rounding modes from the IEEE 754 specification.\r\n\r\nI don\u0027t recall the exact reasoning why we decided to add them to `MidpointRounding` rather than some new `DirectedRounding` type.\r\n\r\nAt a minimum the docs should be updated to call out this difference. Fixing it would be a breaking change and would require further consideration.\r\n\r\nThe algorithm for `Math.Round` is notably already buggy, even for the rounding modes that existed in .NET Framework and https://github.com/dotnet/runtime/issues/1643 tracks fixing it. This is also a breaking change.",
                                           "updatedAt":  "2020-06-19T19:10:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjgyOTQ5NQ==",
                                           "createdAt":  "2020-06-19T19:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODg24Jg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Apostolique",
                                                                               "createdAt":  "2021-03-06T01:30:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wischi-chr",
                                                                               "createdAt":  "2022-09-01T14:38:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grimeh",
                                                                               "createdAt":  "2023-01-05T09:45:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikethemage",
                                                                               "createdAt":  "2024-05-06T22:03:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Actually, the more I think about these APIs, the more confusing they seem to me (`AwayFromZero` and `ToZero` aren\u0027t actually related, heh?). I am not a smart person, but even accounting for this, it does take me an unusually high amount of mental effort to understand what \"When a number is halfway between two others, it is rounded toward the result closest to and no greater in magnitude than the infinitely precise result\" is supposed to mean (this, I guess, can be fixed with better documentation, but still).\r\n\r\nAt this point, I would be in favor of obsoleting these enum members (and EB-nevering them, as there would presumably be a 1-1 replacement, but I know this has drawbacks and so people aren\u0027t enthusiastic about it) and actually adding a dedicated enum. This would only be source-breaking, so it might actually be actionable (and, presumably, not many people are actually using these APIs yet so the impact would be limited).\r\n\r\n@FrantzUml Do you feel strongly enough about this to edit the original issue into a dedicated obsoletion proposal or open another one and close this one? You would have my vote.\r\n\r\nEdit: [the API review](https://youtu.be/hLbCfJSPIaI?t=4563).\r\nSome quotes (slightly altered as to suit the professional setting of this issue):\r\n- \"Yes, people will not be happy\", \"All the people that are trying to do rounding and nobody knows what these things mean. Like, it\u0027s not super hard, but it requires a decent amount of understanding on what is going on. It\u0027s a typical problem of rounding not doing what you want it to do...\"\r\n- \"It will need a good documentation. That\u0027s for sure\"\r\n\r\nThe point of it not really being a \"midpoint rounding\" was brought up, but nobody had strong opinions about the alternatives - it seems like the consensus was that it is fairly advanced API and you will have to read the docs anyway, so it was approved.",
                                           "updatedAt":  "2020-06-19T20:11:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzY3NjQ0Nw==",
                                           "createdAt":  "2020-06-22T17:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrantzUml",
                                           "body":  "I agree with no breaking change but adding a dedicated enum, explain the bug in MidPointRounding and make it obsolete.\r\nSo, the enum should be :\r\npublic enum RoundingMode\r\n{\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round down (same as Floor).\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tDown,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round up (same as Ceiling).\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tUp,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round towards zero (same as Truncate).\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tTowardsZero,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round away from zero\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tAwayZero,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and down when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfDown,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and up when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfUp,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and towards zero when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfTowardsZero,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and away from zero when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfAwayZero,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and to nearest even integer when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(0D, -0.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(0D, +0.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfToEven\r\n}\r\n\r\nAnd the proposed implementation :\r\npublic static double Round(double value, RoundingMode rounding)\r\n{\r\n\tif (rounding == RoundingMode.Down)\r\n\t{\r\n\t\treturn System.Math.Floor(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.Up)\r\n\t{\r\n\t\treturn System.Math.Ceiling(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.TowardsZero)\r\n\t{\r\n\t\treturn System.Math.Truncate(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.AwayZero)\r\n\t{\r\n\t\treturn System.Math.Sign(value) \u003c 0 ? System.Math.Floor(value) : System.Math.Ceiling(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfToEven)\r\n\t{\r\n\t\treturn System.Math.Round(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfDown)\r\n\t{\r\n\t\treturn System.Math.Ceiling(value - 0.5D);\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfUp)\r\n\t{\r\n\t\treturn System.Math.Floor(value + 0.5D);\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfTowardsZero)\r\n\t{\r\n\t\tdouble absolute = System.Math.Ceiling(System.Math.Abs(value) - 0.5D);\r\n\t\treturn (System.Math.Sign(value) \u003e 0) ? absolute : -absolute;\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfAwayZero)\r\n\t{\r\n\t\tdouble absolute = System.Math.Floor(System.Math.Abs(value) + 0.5D);\r\n\t\treturn (System.Math.Sign(value) \u003e 0) ? absolute : -absolute;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException();\r\n\t}\r\n}\r\n\r\nOr with using the static ModF function (but i can\u0027t verify compliance as the function is internal in Core) :\r\npublic static unsafe double Round(double value, RoundingMode rounding)\r\n{\r\n\tif (rounding == RoundingMode.Down)\r\n\t{\r\n\t\treturn System.Math.Floor(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.Up)\r\n\t{\r\n\t\treturn System.Math.Ceiling(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.TowardsZero)\r\n\t{\r\n\t\treturn System.Math.Truncate(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.AwayZero)\r\n\t{\r\n\t\treturn System.Math.Sign(value) \u003c 0 ? System.Math.Floor(value) : System.Math.Ceiling(value);\r\n\t}\r\n\telse if (rounding == RoundingMode.HalfToEven)\r\n\t{\r\n\t\treturn System.Math.Round(value);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tdouble fraction = ModF(value, \u0026value);\r\n\t\tdouble absoluteFrac = System.Math.Abs(fraction);\r\n\t\tif (absoluteFrac \u003c 0.5D)\r\n\t\t{\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tint signFrac = System.Math.Sign(fraction);\r\n\t\tswitch (rounding)\r\n\t\t{\r\n\t\t\tcase RoundingMode.HalfAwayZero:\r\n\t\t\t\treturn value + signFrac;\r\n\t\t\tcase RoundingMode.HalfDown:\r\n\t\t\t\treturn (signFrac \u003c 0) ? value + signFrac : (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\tcase RoundingMode.HalfUp:\r\n\t\t\t\treturn (signFrac \u003e 0) ? value + signFrac : (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\tcase RoundingMode.HalfTowardsZero:\r\n\t\t\t\treturn (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new ArgumentException();\r\n\t\t}\r\n      }\r\n}\r\n\r\nI will suggest implementation with \"int digits\" as argument, but I don\u0027t like the implmentation in Core because multiply value by 10^digits may overflow or create less accuracy.\r\n\r\n\t\t}",
                                           "updatedAt":  "2020-06-22T17:41:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Nzc0MDczNg==",
                                           "createdAt":  "2020-06-22T20:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "@FrantzUml I think we need to support rounding to the specified number of significant digits (`Math.Round(double value, int digits, MidpointRounding mode)` overload), not just to digits.\r\n\r\nI would open a new issue for the proposal and close this one (to avoid modifying your original post).",
                                           "updatedAt":  "2020-06-22T20:00:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODk4ODYyMQ==",
                                           "createdAt":  "2020-06-24T18:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrantzUml",
                                           "body":  "I suggest this implementation.\r\nDo you think I have to pull a request and close this issue ? (sorry but I\u0027m not a professional developer and not very used to github).\r\n```c#\r\npublic static unsafe double Round(double value, int digits, RoundingMode rounding) \r\n{ \r\n\tif ((digits \u003c 0) || (digits \u003e kMaxDoubleDigits))\r\n\t{\r\n\t\tthrow new ArgumentException();\r\n\t}\r\n\tif (digits == 0)\r\n\t{\r\n\t\treturn Round(value, rounding);\r\n\t}\r\n\tdouble fraction = ModF(value, \u0026value);\r\n\tdouble power10 = roundPower10Double[digits];\r\n\tfraction *= power10;\r\n\treturn value + Round(fraction, rounding) / power10;\r\n}\r\n\r\npublic static unsafe double Round(double value, RoundingMode rounding)\r\n{\r\n\tif (rounding \u003c RoundingMode.HalfToEven || rounding \u003e RoundingMode.HalfTowardsZero)\r\n\t{\r\n\t\tthrow new ArgumentException();\r\n\t}\r\n\tif (System.Math.Abs(value) \u003c kRoundDoubleLimit)\r\n\t{\r\n\t\tif (rounding == RoundingMode.Down)\r\n\t\t{\r\n\t\t\treturn System.Math.Floor(value);\r\n\t\t}\r\n\t\telse if (rounding == RoundingMode.Up)\r\n\t\t{\r\n\t\t\treturn System.Math.Ceiling(value);\r\n\t\t}\r\n\t\telse if (rounding == RoundingMode.TowardsZero)\r\n\t\t{\r\n\t\t\treturn System.Math.Truncate(value);\r\n\t\t}\r\n\t\telse if (rounding == RoundingMode.AwayZero)\r\n\t\t{\r\n\t\t\treturn System.Math.Sign(value) \u003c 0 ? System.Math.Floor(value) : System.Math.Ceiling(value);\r\n\t\t}\r\n\t\telse if (rounding == RoundingMode.HalfToEven)\r\n\t\t{\r\n\t\t\treturn System.Math.Round(value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdouble fraction = ModF(value, \u0026value);\r\n\t\t\tdouble absoluteFrac = System.Math.Abs(fraction);\r\n\t\t\tif (absoluteFrac \u003c 0.5D)\r\n\t\t\t{\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\tint signFrac = System.Math.Sign(fraction);\r\n\t\t\tswitch (rounding)\r\n\t\t\t{\r\n\t\t\t\tcase RoundingMode.HalfAwayZero:\r\n\t\t\t\t\treturn value + signFrac;\r\n\t\t\t\tcase RoundingMode.HalfDown:\r\n\t\t\t\t\treturn (signFrac \u003c 0) ? value + signFrac : (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\t\tcase RoundingMode.HalfUp:\r\n\t\t\t\t\treturn (signFrac \u003e 0) ? value + signFrac : (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\t\tcase RoundingMode.HalfTowardsZero:\r\n\t\t\t\t\treturn (absoluteFrac \u003e 0.5D) ? value + signFrac : value;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new ArgumentException();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n`\r\npublic enum RoundingMode\r\n{\r\n\t/// \u003csummary\u003e`\r\n\t`/// Directed round down (same as Floor).`\r\n\t`/// \u003c/summary\u003e`\r\n\t`/// \u003cremarks\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(-2D, -1.2D);\u003c/code\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e`\r\n\t`/// \u003ccode\u003eAssert.AreEqual(1D, +1.8D);\u003c/code\u003e`\r\n\t`/// \u003c/remarks\u003e`\r\n\tDown = 3,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round up (same as Ceiling).\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tUp = 4,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round towards zero (same as Truncate).\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tTowardsZero = 2,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Directed round away from zero\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tAwayZero = 5,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and down when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfDown = 6,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and up when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfUp = 7,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and towards zero when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfTowardsZero = 8,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and away from zero when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfAwayZero = 1,\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Round to nearest integer and to nearest even integer when the number is halfway between two others.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cremarks\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.8D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-2D, -1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(-1D, -1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(0D, -0.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(0D, +0.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(1D, +1.2D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.5D);\u003c/code\u003e\r\n\t/// \u003ccode\u003eAssert.AreEqual(2D, +1.8D);\u003c/code\u003e\r\n\t/// \u003c/remarks\u003e\r\n\tHalfToEven = 0\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-06-24T20:45:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTA2MDk5NA==",
                                           "createdAt":  "2020-06-24T20:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBKAbZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-07-10T15:30:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e Do you think I have to pull a request and close this issue ? (sorry but I\u0027m not a professional developer and not very used to github).\r\n\r\nSo, this is the process for API changes like this one in the runtime repository:\r\n\r\n1\\. Someone creates an API proposal, that has:\r\n  - The motivation behind the proposal.\r\n  - The proposed APIs.\r\n  - Other relevant info.\r\n\r\n#13933 is often quoted as a good template for a proposal.\r\n\r\n2\\. Someone from the team thinks it would be worth implementing and marks the proposal `api-ready-for-review`.\r\n\r\n3\\. The proposal gets reviewed (you can watch reviews live on .NET Foundation\u0027s YouTube channel). When this happens depends on what status did the proposal get:\r\n  - `Blocking`: the highest priority, major features planned for a release depend on the implementation of the API.\r\n  - `Backlog`: everything else. Usually, these are \"nice to have\" APIs, but can sometimes be bigger work items. Anything not marked as `Blocking` is automatically put on the backlog.\r\n\r\nThe team reviews backlog in a chronological order (so, older issues get reviewed first), except when a dedicated review session (or many of them) is needed for something big (recent examples: #34742, #1793). You can see issues that are about to get reviewed via http://aka.ms/ready-for-api-review)\r\n\r\n4\\. The team can decide that the proposal:\r\n  - Is approved. Most proposals end up being approved, mostly because there had to be a reason someone marked it as `api-ready-for-review` in the first place.\r\n  - Needs work. Sometimes the API shape is too rough and authors of the proposal must improve it before it can be reviewed again. This is also sometimes used for bigger items that need many dedicated review sessions to be completed.\r\n  - Is rejected. Although rare, some proposals are not approved, for various reasons (backwards compatibility and lack of value are the major ones).\r\n\r\n5\\. After approval, the proposal must be implemented (if it hasn\u0027t been already). Easier issues can be marked as `up-for-grabs`, which means that the team accepts pull requests with implementations for those from the community.\r\n\r\nIn view of all this:\r\n - There are two proposals in this issue, with different motivations:\r\n   - Obsolete (and hide) some members on `MidpointRounding` and replace them with a new enum (`DirectedRounding`), to clear up the confusion between, for example, `AwayFromZero` and `ToZero`.\r\n   - Add new rounding modes to support more scenarios (your later posts).\r\n\r\nI would suggest you create two new issues for each, formatted as proper proposals, with a link to this issue. I would also highly encourage you to create an issue in the docs repo (https://github.com/dotnet/docs) with a request to improve the documentation on the new rounding modes. You can improve the docs yourself by creating a PR there, if you feel that you can add the missing bits (I would do it myself, but unfortunately I do not have the time for it right now).",
                                           "updatedAt":  "2020-06-24T21:01:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTA2MzA2OA==",
                                           "createdAt":  "2020-06-24T20:47:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@SingleAccretion that is a great summary I wonder whether it would be worth a PR to improve https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md? Also note we now have a template: https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.md\u0026title=\r\n\r\n@FrantzUml you can format code nicely by using three back ticks. So you start with \r\n```\r\n```c#\r\n```\r\non its own line and end with 3 ticks on their own line. I updated your post above as an example.",
                                           "updatedAt":  "2020-06-24T20:48:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTA3MTQ0OQ==",
                                           "createdAt":  "2020-06-24T21:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIdekg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-06-24T23:43:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "@danmosemsft I think the document is great, the only things I would add are these links:\r\n - https://aka.ms/ready-for-api-review\r\n - .NET Foundation\u0027s YouTube channel\r\n - https://apisof.net\r\n\r\nEdit: and a link to the template, heh.\r\n\r\nI am not quite sure yet how to properly fit these into the structure (inline/separate section) and it is approaching midnight here so I\u0027ll leave it to my tomorrow\u0027s self to figure out.\r\n",
                                           "updatedAt":  "2020-06-24T21:12:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JkW7r",
                                           "createdAt":  "2022-09-01T13:16:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wischi-chr",
                                           "body":  "Also just ran into the problem that `ToZero` isn\u0027t a mid-point rounding strategy.\r\n\r\nFor what it\u0027s worth IMHO an API design like the following would handle all cases and would also be perfectly clear for the developers and consistent.\r\n\r\n```csharp\r\npublic enum RoundingDirection\r\n{\r\n    ToEven,\r\n    ToOdd,\r\n    ToZero,\r\n    AwayFromZero,\r\n    ToPositiveInfinity,\r\n    ToNegativeInfinity,\r\n}\r\n\r\npublic enum RoundingStrategy\r\n{\r\n    ToNearest,\r\n    Directed,\r\n}\r\n\r\npublic static class Math\r\n{\r\n    public static double Round\r\n    (\r\n        double value,\r\n        int digits,\r\n        RoundindDirection direction = RoundindDirection.ToEven,\r\n        RoundingStrategy strategy = RoundingStrategy.ToNearest\r\n    )\r\n    {\r\n        // implementation left as an exercise for the reader\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\nOf course there would be combinations that are probably very rare (like `ToEven` + `Directed`) but at least it would be consistant. This would also solve https://github.com/dotnet/runtime/issues/40456",
                                           "updatedAt":  "2022-09-01T13:23:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RyOB2",
                                           "createdAt":  "2023-01-05T11:50:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODg24mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dmytro-i",
                                                                               "createdAt":  "2023-10-24T15:08:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikethemage",
                                                                               "createdAt":  "2024-05-06T22:04:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Grimeh",
                                           "body":  "Today I ran into the issue of `MidpointRounding` being a confusing name when trying to determine if there was a way to do a **directed** `AwayFromZero` round in the `Math` API. The improved docs helped a lot, particularly the remarks section for [`MidpointRounding`](https://learn.microsoft.com/en-us/dotnet/api/system.midpointrounding?view=net-7.0). I was disappointed to discover there was a directed `ToZero` but no matching directed `AwayFromZero`.\r\n\r\nI like @SingleAccretion\u0027s [idea](https://github.com/dotnet/runtime/issues/38160#issuecomment-646829495) of:\r\n- introducing a new `DirectedRounding` enum\r\n- adding overloads to `Round` for `Math`, `MathF`, and `Decimal`: `Round([numeric type], DirectedRounding)` and `Round([numeric type], int, DirectedRounding)`\r\n- marking `MidpointRounding.ToNegativeInfinity`, `MidpointRounding.ToPositiveInfinity`, and `MidpointRounding.ToZero` as obsolete in favour of their `DirectedRounding` counterparts (though I\u0027m ignorant as to what \"EB-nevering\" means, sounds like a way to hide it?)\r\n\r\nAn issue I can see is that having a non-directed actually-midpoint `MidpointRounding.ToZero` is helpful if we wish to fill out the API for rounding modes, but changing the behaviour of the existing enum value would be undesirable for obvious reasons. Marking the existing `ToZero` value obsolete and adding a `MidpointRounding.TowardsZero` may fix that, but the ambiguity/similarity with `MidpointRounding.ToZero` might be confusing if the user who has used `ToZero` previously.\r\n\r\nIt also adds two more overloads to a method that already has a few, not sure if that\u0027s a concern or not.\r\n\r\nI\u0027m happy to make a proposal, should I bring up the above concerns in a new API proposal issue under the \"Risks\" section (as detailed [here](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md)), or discuss them here before making a new issue?\r\nPlease forgive my ignorance, first time contributor :)",
                                           "updatedAt":  "2023-01-05T11:50:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dn5DO",
                                           "createdAt":  "2024-07-04T07:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Corniel",
                                           "body":  "For a [open source project](https://github.com/Qowaiv/Qowaiv), I maintain, I once implemented an extended version of rounding (only for decimals, but that should not matter).\r\n\r\nI extended the support methods of decimal rounding to 13 (see list below), and also allow a negative amount of decimals to round to, to be specified, meaning to round to a multiple of 10, 100, etc...\r\n\r\nMight that help fixing this API?\r\n\r\n``` C#\r\n/// \u003csummary\u003eMethods of rounding \u003csee cref=\"decimal\"/\u003es.\u003c/summary\u003e\r\n/// \u003cremarks\u003e\r\n/// This is an extension on \u003csee cref=\"MidpointRounding\"/\u003e.\r\n/// \u003c/remarks\u003e\r\npublic enum DecimalRounding\r\n{\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the nearest even.\u003c/summary\u003e\r\n    ToEven = 0,\r\n\r\n    /// \u003csummary\u003eBankers round, also known as \u003csee cref=\"ToEven\"/\u003e.\u003c/summary\u003e\r\n    BankersRound = ToEven,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the nearest number that is away from zero.\u003c/summary\u003e\r\n    AwayFromZero = 1,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the nearest odd.\u003c/summary\u003e\r\n    ToOdd = 2,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the nearest number that is closest to zero.\u003c/summary\u003e\r\n    TowardsZero = 3,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the highest of the two.\u003c/summary\u003e\r\n    Up = 4,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is rounded toward the lowest of the two.\u003c/summary\u003e\r\n    Down = 5,\r\n\r\n    /// \u003csummary\u003eWhen a number is halfway between two others, it is randomly rounded up or down with equal probability.\u003c/summary\u003e\r\n    RandomTieBreaking = 6,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, the remainder is truncated/ignored.\u003c/summary\u003e\r\n    Truncate = 7,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, it is rounded toward the nearest number that is away from zero.\u003c/summary\u003e\r\n    DirectAwayFromZero = 8,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, it is rounded toward the nearest number that is closest to zero.\u003c/summary\u003e\r\n    DirectTowardsZero = 9,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, its rounded to the largest.\u003c/summary\u003e\r\n    Ceiling = 10,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, its rounded to the smallest.\u003c/summary\u003e\r\n    Floor = 11,\r\n\r\n    /// \u003csummary\u003eWhen a number is between two others, it is randomly rounded up or down with stochastic probability.\u003c/summary\u003e\r\n    StochasticRounding = 12,\r\n}\r\n```\r\n[Source](https://github.com/Qowaiv/Qowaiv/blob/master/src/Qowaiv/DecimalRounding.cs)",
                                           "updatedAt":  "2024-07-04T07:11:34Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Math.Round and misunderstanding",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41495",
        "createdAt":  "2020-08-28T05:31:42Z",
        "number":  41495,
        "author":  "Grevor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBywTBg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2020-08-28T08:07:02Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2020-09-18T15:59:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hexawyz",
                                            "createdAt":  "2020-11-07T17:18:35Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hanabi1224",
                                            "createdAt":  "2021-03-31T05:52:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2021-07-16T04:55:20Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-07-19T17:17:16Z",
        "body":  "The BigInteger class is fast already, but after doing a bit-twiddling kata/review on the source code I realized there were some further improvements to be made. Due to the ongoing effort to spanify the BigInteger #35565 I will leave the proposed code changes and their rationales below, with performance measurements as delta from existing code. I see no reason the same shouldn\u0027t apply for the spanified version as well. The code is spanified for later convenience. \r\n\r\n_All code can be found in the BigIntegerCalculator.* files._\r\n\r\nIf the proposed changes are accepted (with some further refinements, of course) I am willing to do the implementation on top of the spanification once it is merged. Further benchmarking also needs to be done to ensure this is not a \"my machine\" thing.\r\n\r\n### Configuration\r\n.NET 5.0 (from repository, commit 3ac735b4b98811f23e89a36570d4e98994a191c3)\r\nWindows 10 19041 x64\r\nIntel i7-8700K (Unclocked for the benchmark runs)\r\n\r\n\r\n### Add\r\nAdd should impose a check for carry == 0 in the last loop of both the half trivial case and the \"full add\":\r\n```\r\n            int i = 0;\r\n            for ( ; carry != 0 \u0026 i \u003c left.Length; i++)\r\n            {\r\n                long digit = left[i] + carry;\r\n                bits[i] = unchecked((uint)digit);\r\n                carry = digit \u003e\u003e 32;\r\n            }\r\n            left.Slice(i).CopyTo(bits.Slice(i));\r\n            bits[left.Length] = (uint)carry;\r\n```\r\n\r\nNote the use of single `\u0026`. This is to keep the single branch instructions. The JIT seem to fold this nicely in the x64 disassembly (It\u0027s one more instruction). The single \u0026 could also be used in `AddSelf`. In general, the carry will very quickly reach zero, so this should enable big + small additions to mainly be `memmove`. For some reason the change also gave better performance on cases I did not expect. The results are repeatable with new baselines as well.\r\n\r\n```\r\n| Faster                                                                      | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| --------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Numerics.Tests.Perf_BigInteger.Add(arguments: 65536,65536 bits)      |      1.14 |          2403.37 |          2102.15 |         |\r\n| System.Numerics.Tests.Perf_BigInteger.Add(arguments: 16,16 bits)            |      1.14 |             7.30 |             6.43 |         |\r\n\r\n```\r\n\r\n\r\n### Subtract\r\nThe same as for Add. The carry will tend toward zero.\r\n\r\nThe results are repeatable.\r\n```\r\n| Faster                                                                      | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| --------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Numerics.Tests.Perf_BigInteger.Subtract(arguments: 16,16 bits)       |      1.07 |             7.60 |             7.07 |         |\r\n| System.Numerics.Tests.Perf_BigInteger.Subtract(arguments: 65536,65536 bits) |      1.14 |          2391.64 |          2094.65 |         |\r\n```\r\n\r\n### Divide\r\nThis is where it gets wild. Changing the `SubtractDivisor` accordingly removes a TON of branch misspredictions. Measurements are needed on 32-bit machines due to the 64 bit operations.\r\n\r\n```\r\n           ulong carry = 0UL;\r\n\r\n            for (int i = 0; i \u003c right.Length; i++)\r\n            {\r\n                carry += right[i] * q;\r\n                uint digit = unchecked((uint)carry);\r\n                carry = carry \u003e\u003e 32;\r\n                ulong newDigit = unchecked((ulong)left[i] - digit);\r\n                carry += (newDigit  \u003e\u003e 32 ) \u0026 0x1; // This is the same as if (leftElement \u003c digit) ++carry\r\n                left[i] = unchecked((uint)newDigit);\r\n            }\r\n\r\n            return (uint)carry;\r\n```\r\n\r\nThe results are a bit varied on this one, surprisingly. I do not fully understand why the first case degrades so much. It did have much lower missprediction rate, so there could be further optimizations to be done by perhaps checking the value `q` (for example, single binary digit `q` values gives a non-uniform distribution under truncated multiplication with random `left` and `right`, IE. good for the current algorithm) and selecting the current code or the proposed one. On average I would suspect the proposed code to perform better, as the ratio of true to false branches is fairly close to 1 on average (slight overweight on branch taken).\r\n```\r\n| Slower                                                                 | diff/base | Base Median (ns) | Diff Median (ns) | Modality|\r\n| ---------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Numerics.Tests.Perf_BigInteger.Divide(arguments: 1024,512 bits) |      1.27 |           524.26 |           665.83 |         |\r\n| System.Numerics.Tests.Perf_BigInteger.Remainder(arguments: 1024,512 bits)        |      1.31 |           524.66 |           685.61 |         |\r\n\r\n| Faster                                                                    | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| ------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Numerics.Tests.Perf_BigInteger.Divide(arguments: 65536,32768 bits) |      2.63 |       4249482.81 |       1617236.56 |         |\r\n| System.Numerics.Tests.Perf_BigInteger.Remainder(arguments: 65536,32768 bits) |      2.61 |       4257183.59 |       1633850.63 |   \r\n```\r\n\r\n\r\n### Multiply\r\nThe last one I have is uncertain. It has to do with loop-unrolling in the trivial case of `Multiply `. This enables the use of a dirty result buffers. The effects can only be seen in PowMod (with removed zeroing of the BitBuffers). However, there are some potential negative effects due to increased code size (double the instruction cache misses? Hard to say, processors are good at predictively streaming into them these days).\r\n\r\n```\r\n                if (right.Length \u003c= 0)\r\n                {\r\n                    result.Clear();\r\n                    return;\r\n                }\r\n                // Implied i = 0 and result = 0\r\n                ulong carry = 0UL;\r\n                for (int j = 0; j \u003c left.Length; j++)\r\n                {\r\n                    ulong digits = carry\r\n                        + (ulong)left[j] * right[0];\r\n                    result[j] = unchecked((uint)digits);\r\n                    carry = digits \u003e\u003e 32;\r\n                }\r\n                result[left.Length] = (uint)carry;\r\n\r\n                for (int i = 1; i \u003c right.Length; i++)\r\n                {\r\n                    carry = 0UL;\r\n                    for (int j = 0; j \u003c left.Length; j++)\r\n                    {\r\n                        ulong digits = result[i + j] + carry\r\n                            + (ulong)left[j] * right[i];\r\n                        result[i + j] = unchecked((uint)digits);\r\n                        carry = digits \u003e\u003e 32;\r\n                    }\r\n                    result[i + left.Length] = (uint)carry;\r\n                }\r\n```\r\n\r\n\r\n\r\n```\r\n| Faster                                                                       | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| ---------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Numerics.Tests.Perf_BigInteger.ModPow(arguments: 1024,1024,64 bits)   |      1.14 |        130853.59 |        114545.93 |         |\r\n| System.Numerics.Tests.Perf_BigInteger.ModPow(arguments: 16384,16384,64 bits) |      1.09 |       2186651.56 |       1998425.00 |         |\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYeYE0g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjMzNDAyMQ==",
                                           "createdAt":  "2020-08-28T05:31:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-28T05:31:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE4ODA0Mg==",
                                           "createdAt":  "2020-09-14T17:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027m generally happy to take perf PRs, provided all tests pass and numbers look good (both local and those on the perf lab hardware).",
                                           "updatedAt":  "2020-09-14T17:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h1vYd",
                                           "createdAt":  "2023-07-19T06:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "speshuric",
                                           "body":  "@adamsitnik please take a look. It seems that the issue can be closed with #83457\r\n",
                                           "updatedAt":  "2023-07-19T06:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h4N1Y",
                                           "createdAt":  "2023-07-19T13:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e @adamsitnik please take a look. It seems that the issue can be closed with #83457\r\n\r\nIt looks like  #83457 has included the `+` and `-` perf improvements, how about `*` and `/` ? It would be great to try them and see what perf benefits we can get. Since this seems to be a small change I can give it a quick try and report back.",
                                           "updatedAt":  "2023-07-19T13:51:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h5gTS",
                                           "createdAt":  "2023-07-19T17:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "speshuric",
                                           "body":  "Yes, it need to be clarified. \r\nBut Karatsuba/Toom-Cook branch already use `Add` method which contains this improvement. ",
                                           "updatedAt":  "2023-07-19T17:17:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "BigInteger performance improvements",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45279",
        "createdAt":  "2020-11-27T14:03:03Z",
        "number":  45279,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0mnaw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teo-tsirpanis",
                                            "createdAt":  "2020-11-27T17:40:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petrmarak",
                                            "createdAt":  "2021-11-07T00:26:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubo",
                                            "createdAt":  "2023-02-04T09:38:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-12-13T06:36:59Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-09-08T18:59:00Z",
        "body":  "## Background and Motivation\r\n\r\nThe concept of an multiplicative inverse modulo a base, is perhaps as fundamental as BigInteger.GreatestCommonDivisor.\r\nI would propose adding this as a method. This allows development to stay close to BigInteger, rather than have to rely on Cryptographic imports. If this is not selected, perhaps at least an explanation as to why this method was not included?\r\n\r\nI mean, if you are including ModPow as a primitive method? Why not ModInverse?\r\n\r\n## Proposed API\r\n\r\n```\r\n//public static System.Numerics.BigInteger ModularInverse (System.Numerics.BigInteger modulus) ;\r\n\r\n        public BigInteger modInverse(BigInteger modulus)\r\n        {\r\n                BigInteger[] p = { 0, 1 };\r\n                BigInteger[] q = new BigInteger[2];    // quotients\r\n                BigInteger[] r = { 0, 0 };             // remainders\r\n\r\n                int step = 0;\r\n\r\n                BigInteger a = modulus;\r\n                BigInteger b = this;\r\n\r\n                while(b.dataLength \u003e 1 || (b.dataLength == 1 \u0026\u0026 b.data[0] != 0))\r\n                {\r\n                        BigInteger quotient = new BigInteger();\r\n                        BigInteger remainder = new BigInteger();\r\n\r\n                        if(step \u003e 1)\r\n                        {\r\n                                BigInteger pval = (p[0] - (p[1] * q[0])) % modulus;\r\n                                p[0] = p[1];\r\n                                p[1] = pval;\r\n                        }\r\n\r\n                        if(b.dataLength == 1)\r\n                                singleByteDivide(a, b, quotient, remainder);\r\n                        else\r\n                                multiByteDivide(a, b, quotient, remainder);\r\n\r\n                        /*\r\n                        Console.WriteLine(quotient.dataLength);\r\n                        Console.WriteLine(\"{0} = {1}({2}) + {3}  p = {4}\", a.ToString(10),\r\n                                          b.ToString(10), quotient.ToString(10), remainder.ToString(10),\r\n                                          p[1].ToString(10));\r\n                        */\r\n\r\n                        q[0] = q[1];\r\n                        r[0] = r[1];\r\n                        q[1] = quotient; r[1] = remainder;\r\n\r\n                        a = b;\r\n                        b = remainder;\r\n\r\n                        step++;\r\n                }\r\n\r\n                if(r[0].dataLength \u003e 1 || (r[0].dataLength == 1 \u0026\u0026 r[0].data[0] != 1))\r\n                        throw (new ArithmeticException(\"No inverse!\"));\r\n\r\n                BigInteger result = ((p[0] - (p[1] * q[0])) % modulus);\r\n\r\n                if((result.data[maxLength - 1] \u0026 0x80000000) != 0)\r\n                        result += modulus;  // get the least positive modulus\r\n\r\n                return result;\r\n        }\r\n\r\n// xref: https://www.codeproject.com/Articles/2728/C-BigInteger-Class\r\n\r\n```\r\n\r\n\r\n## Usage Examples\r\n\r\n```\r\nBigInteger modulus = new BigInteger(5915587276);\r\nBigInteger exponent = new BigInteger(65537);\r\nBigInteger inverse = exponent.ModInverse(modulus);\r\n// Returns 3603040989 , such that 65537*3603040989 == 1 Mod 5915587276\r\n\r\n```\r\n\r\n## Alternative Designs\r\n\r\nThis is just an idea.  I think it would make use of the BigInteger class as a primitive stronger. This way we don\u0027t have to rely on our custom implementations of calculating an inverse. \r\n\r\n## Risks\r\n\r\nMinimal.\r\n\r\nThank you for your consideration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi0iSxQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDg1MDAxNA==",
                                           "createdAt":  "2020-11-27T14:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nThe concept of an multiplicative inverse modulo a base, is perhaps as fundamental as BigInteger.GreatestCommonDivisor.\r\nI would propose adding this as a method. This allows development to stay close to BigInteger, rather than have to rely on Cryptographic imports. If this is not selected, perhaps at least an explanation as to why this method was not included?\r\n\r\nI mean, if you are including ModPow as a primitive method? Why not ModInverse?\r\n\r\n## Proposed API\r\n\r\n```\r\n//public static System.Numerics.BigInteger ModularInverse (System.Numerics.BigInteger modulus) ;\r\n\r\n        public BigInteger modInverse(BigInteger modulus)\r\n        {\r\n                BigInteger[] p = { 0, 1 };\r\n                BigInteger[] q = new BigInteger[2];    // quotients\r\n                BigInteger[] r = { 0, 0 };             // remainders\r\n\r\n                int step = 0;\r\n\r\n                BigInteger a = modulus;\r\n                BigInteger b = this;\r\n\r\n                while(b.dataLength \u003e 1 || (b.dataLength == 1 \u0026\u0026 b.data[0] != 0))\r\n                {\r\n                        BigInteger quotient = new BigInteger();\r\n                        BigInteger remainder = new BigInteger();\r\n\r\n                        if(step \u003e 1)\r\n                        {\r\n                                BigInteger pval = (p[0] - (p[1] * q[0])) % modulus;\r\n                                p[0] = p[1];\r\n                                p[1] = pval;\r\n                        }\r\n\r\n                        if(b.dataLength == 1)\r\n                                singleByteDivide(a, b, quotient, remainder);\r\n                        else\r\n                                multiByteDivide(a, b, quotient, remainder);\r\n\r\n                        /*\r\n                        Console.WriteLine(quotient.dataLength);\r\n                        Console.WriteLine(\"{0} = {1}({2}) + {3}  p = {4}\", a.ToString(10),\r\n                                          b.ToString(10), quotient.ToString(10), remainder.ToString(10),\r\n                                          p[1].ToString(10));\r\n                        */\r\n\r\n                        q[0] = q[1];\r\n                        r[0] = r[1];\r\n                        q[1] = quotient; r[1] = remainder;\r\n\r\n                        a = b;\r\n                        b = remainder;\r\n\r\n                        step++;\r\n                }\r\n\r\n                if(r[0].dataLength \u003e 1 || (r[0].dataLength == 1 \u0026\u0026 r[0].data[0] != 1))\r\n                        throw (new ArithmeticException(\"No inverse!\"));\r\n\r\n                BigInteger result = ((p[0] - (p[1] * q[0])) % modulus);\r\n\r\n                if((result.data[maxLength - 1] \u0026 0x80000000) != 0)\r\n                        result += modulus;  // get the least positive modulus\r\n\r\n                return result;\r\n        }\r\n\r\n// xref: https://www.codeproject.com/Articles/2728/C-BigInteger-Class\r\n\r\n```\r\n\r\n\r\n## Usage Examples\r\n\r\n```\r\nBigInteger modulus = new BigInteger(5915587276);\r\nBigInteger exponent = new BigInteger(65537);\r\nBigInteger inverse = exponent.ModInverse(modulus);\r\n// Returns 3603040989 , such that 65537*3603040989 == 1 Mod 5915587276\r\n\r\n```\r\n\r\n## Alternative Designs\r\n\r\nThis is just an idea.  I think it would make use of the BigInteger class as a primitive stronger. This way we don\u0027t have to rely on our custom implementations of calculating an inverse. \r\n\r\n## Risks\r\n\r\nMinimal.\r\n\r\nThank you for your consideration.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esecdev-01\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-27T14:03:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Nzc4MDI0Mw==",
                                           "createdAt":  "2020-12-17T23:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pgovind",
                                           "body":  "Adding this to my queue. I won\u0027t be able to look at it this month, but I\u0027ll consider this in Jan 2021.",
                                           "updatedAt":  "2020-12-17T23:59:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjM4NzI1Ng==",
                                           "createdAt":  "2021-01-07T21:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This seems reasonable to add to me. I\u0027ll let @pgovind do the triage here though 😄 ",
                                           "updatedAt":  "2021-01-07T21:12:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTk3NDM4NA==",
                                           "createdAt":  "2021-05-27T22:09:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Any updates or momentum on this?",
                                           "updatedAt":  "2021-05-27T22:09:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UcUQo",
                                           "createdAt":  "2023-02-04T09:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxb80g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "secdev02",
                                                                               "createdAt":  "2024-09-08T18:59:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rubo",
                                           "body":  "This would be extremely useful. Any update?",
                                           "updatedAt":  "2023-02-04T09:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LSJLF",
                                           "createdAt":  "2024-09-08T18:58:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "secdev02",
                                           "body":  "This again seems useful as it allows development to stay within the BigInteger Class, rather than rely on external Classes and Methods, or worse, cryptographic applications that are writing their own, untested, error prone Mod Inverse routines.\r\n",
                                           "updatedAt":  "2024-09-08T18:58:59Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Extend System.Numerics.BigInteger to include a Method to Compute Modular Inverse.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46682",
        "createdAt":  "2021-01-07T17:05:08Z",
        "number":  46682,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-17T23:40:34Z",
        "body":  "The initial support for `SinCos` was added in https://github.com/dotnet/runtime/pull/46551. However, due to complexities involved with its API surface it was not fully integrated as a JIT intrinsic and thus does not currently have CSE or constant folding support.\r\n\r\nThis issue tracks ensuring that support is added. The changes involved may be more extensive given that it involves a value tuple. However, any ground work laid will likely be shared with other new \"planned\" intrinsic APIs that also return a value tuple, such as `DivRem`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLRNmRA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjI0NjA4NA==",
                                           "createdAt":  "2021-01-07T17:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe initial support for `SinCos` was added in https://github.com/dotnet/runtime/pull/46551. However, due to complexities involved with its API surface it was not fully integrated as a JIT intrinsic and thus does not currently have CSE or constant folding support.\r\n\r\nThis issue tracks ensuring that support is added. The changes involved may be more extensive given that it involves a value tuple. However, any ground work laid will likely be shared with other new \"planned\" intrinsic APIs that also return a value tuple, such as `DivRem`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-07T17:05:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support Math and MathF SinCos as a JIT intrinsic",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48247",
        "createdAt":  "2021-02-12T21:57:58Z",
        "number":  48247,
        "author":  "Scooletz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJqRKQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-07-29T09:32:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2021-08-27T11:29:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abelbraaksma",
                                            "createdAt":  "2022-07-28T00:57:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2022-12-08T04:50:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-04-10T09:00:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hexawyz",
                                            "createdAt":  "2023-10-23T08:15:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-03-19T11:02:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kittoes0124",
                                            "createdAt":  "2025-08-03T17:46:18Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-09-06T09:32:00Z",
        "body":  "## Background and Motivation\r\n\r\nThe motivation behind this proposal is to provide API that can be useful for adding/subtracting big integers without the need of calculating carry manually. Currently, the only way that I\u0027m aware of .NET uses `ADC` assembly instruction is an overflow check, followed by a conditional jump to the exception throw. With a proper intrinsics/Math method it could be leveraged to provide a fast add with carry operation. This would be beneficial for `BitInteger` but also for any other code using this API.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public static partial class Math\r\n    {\r\n+         ulong AddWithCarry(ulong a, ulong b, ref ulong carry);\r\n    }\r\n }\r\n```\r\n\r\n## Usage Examples\r\n\r\nThe immediate beneficent would be `BigInteger` with methods like https://github.com/dotnet/runtime/blob/21a03c393b234492acbe2d8d40694bf11f38ef93/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.AddSub.cs#L75-L79\r\n\r\n## Risks\r\n\r\nThe implementation overhead. This would require to go to JIT/intrinsics area and provide a proper fallback, something similar to what was done in `Math.BigMul`.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONnLaoQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODQ3NzM2OQ==",
                                           "createdAt":  "2021-02-12T21:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n`\r\nThe motivation behind this proposal is to provide API that can be useful for adding/subtracting big integers without the need of calculating carry manually. Currently, the only way that I\u0027m aware of .NET uses `ADC ` assembly instruction is an overflow check. With a proper intrinsics/Math method it could be leveraged to provide a fast add with carry operation. This would be beneficial for `BitInteger` but also for any other code using this API.\r\n\r\n## Proposed API\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\n```diff\r\nnamespace System\r\n{\r\n    public static partial class Math\r\n    {\r\n+         ulong AddWithCarry(ulong a, ulong b, out ulong carry);\r\n    }\r\n }\r\n```\r\n\r\n## Usage Examples\r\n\r\nThe immediate beneficent would be `BigInteger` with methods like https://github.com/dotnet/runtime/blob/21a03c393b234492acbe2d8d40694bf11f38ef93/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.AddSub.cs#L75-L79\r\n\r\n## Risks\r\n\r\nThe implementation overhead. This would require to go to JIT/intrinsics area and provide a proper fallback, something similar to what was done in `Math.BigMul`.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eScooletz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-12T21:58:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzMDA0MQ==",
                                           "createdAt":  "2021-06-17T23:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This likely needs more design work and usage samples.",
                                           "updatedAt":  "2021-06-17T23:45:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDgyMjU3OA==",
                                           "createdAt":  "2021-06-21T08:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Scooletz",
                                           "body":  "@tannergooding Could you clarify whether it\u0027s an issue author responsibility, meaning: me, or is it a request for various people to chime in? If the first, I\u0027m not sure if I can provide more. The finding is based on my work in https://github.com/NethermindEth/int256 and my search in the `BigInteger` area to find how it\u0027s done in there. In both cases `ADC` looked like a good match for carrying over.",
                                           "updatedAt":  "2021-06-21T08:07:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTIwMzE3NQ==",
                                           "createdAt":  "2021-06-21T17:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBviiSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Scooletz",
                                                                               "createdAt":  "2021-06-21T17:33:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Its ultimately the area owners (my own and Prashanth\u0027s) responsibility to drive this if we feel its worth getting in.\r\n\r\nHowever, interested community members are also free to help out here and to drive much of the design work/addressing feedback/etc. This can sometimes be faster based on what workload we otherwise have.\r\n\r\nIn the case of this API, I do believe its worth adding and there are corresponding proposals such as https://github.com/dotnet/runtime/issues/54439 or https://github.com/dotnet/runtime/issues/46259 that are in a similar vein.\r\n\r\nAs far as this proposal goes, I think the \"design\" work that is needed includes:\r\n* Showing what other languages are doing (C/C++, Rust, Java, Go, Swift, etc)\r\n  * e.g. C/C++ expose what is effectively `bool addcarry(bool carry, uint a, uint b, out uint result)`\r\n  * This will help ensure we are exposing the right shape\r\n* Showing what logic this replaces today\r\n  * e.g. Today you manually track the carry by doing a twice as large addition or comparing the result to the inputs\r\n  * This is displayed, should be broadened a bit to include the carry declaration and ideally to show the replacement code using this API instead\r\n* Sharing how this would impact performance in given workloads\r\n  * IIRC, the simple single case is typically the same, but multiple unrolled adds can be much better",
                                           "updatedAt":  "2021-06-21T17:09:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42ctqh",
                                           "createdAt":  "2021-09-06T09:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODajSIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saucecontrol",
                                                                               "createdAt":  "2022-04-19T16:54:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hexawyz",
                                                                               "createdAt":  "2023-10-23T08:15:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lilinus",
                                                                               "createdAt":  "2024-03-14T11:03:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "pentp",
                                           "body":  "C/C++ exposes it as `unsigned char _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *)`, but compilers recognize some of the comparison based code patterns also.\r\nRust exposes it as `pub unsafe fn _addcarry_u64(c_in: u8, a: u64, b: u64, out: \u0026mut u64) -\u003e u8`\r\nGo exposes it as `func Add64(x, y, carry uint64) (sum, carryOut uint64)`\r\n\r\n## Proposed API\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    partial class Math\r\n    {\r\n        public static (uint Sum, bool Carry) AddWithCarry(uint a, uint b, bool carry);\r\n        public static (nuint Sum, bool Carry) AddWithCarry(nuint a, nuint b, bool carry);\r\n        public static (ulong Sum, bool Carry) AddWithCarry(ulong a, ulong b, bool carry);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nIn `decimal.DecCalc.VarDecMul` this would be used quite a lot:\r\n```diff\r\n// Highest 32 bits is non-zero. Calculate 5 more partial products.\r\n-tmp2 = UInt32x32To64(d1.Low, d2.High);\r\n-tmp += tmp2; // this could generate carry\r\n+(tmp, bool carry) = Math.AddWithCarry(tmp, UInt32x32To64(d1.Low, d2.High), false);\r\n-uint tmp3 = 0;\r\n-if (tmp \u003c tmp2) // detect carry\r\n-    tmp3 = 1;\r\n+uint tmp3 = Convert.ToUInt32(carry);\r\n\r\n-tmp2 = UInt32x32To64(d1.High, d2.Low);\r\n-tmp += tmp2; // this could generate carry\r\n+(tmp, carry) = Math.AddWithCarry(tmp, UInt32x32To64(d1.High, d2.Low), false);\r\nbufProd.U2 = (uint)tmp;\r\n-if (tmp \u003c tmp2) // detect carry\r\n-    tmp3++;\r\n+(tmp3, _) = Math.AddWithCarry(tmp3, 0, carry);\r\n-tmp2 = ((ulong)tmp3 \u003c\u003c 32) | (tmp \u003e\u003e 32);\r\n\r\n-tmp = UInt32x32To64(d1.Mid, d2.High);\r\n-tmp += tmp2; // this could generate carry\r\n+(tmp, carry) = Math.AddWithCarry(((ulong)tmp3 \u003c\u003c 32) | (tmp \u003e\u003e 32), UInt32x32To64(d1.Mid, d2.High), false);\r\n-tmp3 = 0;\r\n-if (tmp \u003c tmp2) // detect carry\r\n-    tmp3 = 1;\r\n+tmp3 = Convert.ToUInt32(carry);\r\n\r\n-tmp2 = UInt32x32To64(d1.High, d2.Mid);\r\n-tmp += tmp2; // this could generate carry\r\n+(tmp, carry) = Math.AddWithCarry(tmp, UInt32x32To64(d1.High, d2.Mid), false);\r\nbufProd.U3 = (uint)tmp;\r\n-if (tmp \u003c tmp2) // detect carry\r\n-    tmp3++;\r\n+(tmp3, _) = Math.AddWithCarry(tmp3, 0, carry);\r\ntmp = ((ulong)tmp3 \u003c\u003c 32) | (tmp \u003e\u003e 32);\r\n\r\nbufProd.High64 = UInt32x32To64(d1.High, d2.High) + tmp;\r\nhiProd = 5;\r\n```\r\n\r\nIn `BigIntegerCalculator.Add(uint[] left, uint right)`:\r\n```diff\r\nuint[] bits = new uint[left.Length + 1];\r\n\r\n-long digit = (long)left[0] + right;\r\n-bits[0] = unchecked((uint)digit);\r\n-long carry = digit \u003e\u003e 32;\r\n+(bits[0], bool carry) = Math.AddWithCarry(left[0], right, false);\r\n\r\nfor (int i = 1; i \u003c left.Length; i++)\r\n{\r\n-    digit = left[i] + carry;\r\n-    bits[i] = unchecked((uint)digit);\r\n-    carry = digit \u003e\u003e 32;\r\n+    (bits[i], carry) = Math.AddWithCarry(left[i], 0, carry);\r\n}\r\n-bits[left.Length] = (uint)carry;\r\n+bits[left.Length] = Convert.ToUInt32(carry);\r\n\r\nreturn bits;\r\n```\r\n",
                                           "updatedAt":  "2021-09-06T09:32:00Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Provide a way to perform Add with carry and Subtract with borrow",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48615",
        "createdAt":  "2021-02-22T19:35:29Z",
        "number":  48615,
        "author":  "JeremyKuhne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD6U7Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-02-23T09:22:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2021-02-24T03:29:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "JimBobSquarePants",
                                            "createdAt":  "2021-04-02T22:28:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2021-04-06T07:52:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CodedBeard",
                                            "createdAt":  "2021-05-28T08:52:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2021-06-07T21:27:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "r2d2rigo",
                                            "createdAt":  "2021-07-20T18:58:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vabka",
                                            "createdAt":  "2021-07-20T20:49:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jacobslusser",
                                            "createdAt":  "2021-07-20T20:55:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amerkoleci",
                                            "createdAt":  "2021-07-20T21:54:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mycodeshow-dev",
                                            "createdAt":  "2021-07-21T03:58:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GalaxiaGuy",
                                            "createdAt":  "2021-07-21T08:14:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-07-21T10:05:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2021-07-21T14:10:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nadjibus",
                                            "createdAt":  "2021-07-21T23:35:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theolivenbaum",
                                            "createdAt":  "2021-07-22T04:05:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2021-07-22T05:31:31Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Gavin-Williams",
                                            "createdAt":  "2021-07-29T07:56:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gavin-Williams",
                                            "createdAt":  "2021-07-29T07:57:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Takym",
                                            "createdAt":  "2021-08-17T22:39:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2022-01-27T05:24:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nxrighthere",
                                            "createdAt":  "2022-03-10T15:17:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "gerhard17",
                                            "createdAt":  "2022-03-23T07:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-09-09T20:17:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RayKoopa",
                                            "createdAt":  "2022-10-22T21:55:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2023-03-14T19:09:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2024-08-14T14:47:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "hamarb123",
                                            "createdAt":  "2024-08-18T00:08:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-08-18T12:15:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hawkerm",
                                            "createdAt":  "2024-11-24T02:03:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slxdy",
                                            "createdAt":  "2025-06-14T22:14:56Z"
                                        }
                                    ],
                          "totalCount":  31
                      },
        "updatedAt":  "2025-09-03T00:42:42Z",
        "body":  "## Background and Motivation\r\n\r\n`System.Drawing.Color` contains extra metadata that makes it unusable in interop scenarios and inefficient in arrays.\r\n\r\n``` C#\r\nnamespace System.Drawing\r\n{\r\n    public readonly struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        private readonly string? name;\r\n        private readonly long value;\r\n        private readonly short knownColor;\r\n        private readonly short state;\r\n    }\r\n}\r\n```\r\n\r\n`Color` is also mutable, despite being `readonly`. If it is constructed from a system `KnownColor` value, it always looks up the value on every access.\r\n\r\nIn order to facilitate exchange of raw color data throughout the .NET ecosystem and external libraries we should expose common color types that only contain raw color data.\r\n\r\nThe intent is to follow up with these base types to provide a basic set of the most common functionality needed around colors as described here: https://github.com/dotnet/runtime/issues/48615#issuecomment-883803660\r\n\r\nThe intent is **NOT** to start building a general purpose image manipulation library. Libraries such as ImageSharp are the right answer for this.\r\n\r\nWinForms and System.Drawing will be able to leverage this for performance, which was the original driver for this request.\r\n\r\n``` C++\r\n// Native Win32 definitions\r\n\r\n// GDI\r\ntypedef DWORD COLORREF;\r\n// GDI+\r\ntypedef DWORD ARGB;\r\n```\r\n\r\n## Proposed API\r\n\r\n``` C#\r\nusing System;\r\n\r\nnamespace System.Drawing\r\n{\r\n    partial struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n\r\n        // ToNumericsArgb? ToArgbNumerics?\r\n        public System.Numerics.Colors.Argb\u003cbyte\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n    }\r\n}\r\n\r\n// WPF\r\nnamespace System.Windows.Media\r\n{\r\n    public struct Color : IEquatable\u003cColor\u003e, IFormattable\r\n    {\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cfloat\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cfloat\u003e argb);\r\n\r\n        public System.Numerics.Colors.Argb\u003cbyte\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n        public System.Numerics.Colors.Argb\u003cfloat\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cfloat\u003e(in Color color);\r\n    }\r\n}\r\n\r\nnamespace System.Numerics.Colors\r\n{\r\n    public static class Argb\r\n    {\r\n        public static Argb\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static Argb\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Argb\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Argb\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Argb\u003cT\u003e : IEquatable\u003cArgb\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T A { get; }\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n\r\n        public Argb(T a, T r, T g, T b);\r\n        public Argb(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Argb\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Rgba\u003cT\u003e ToRgba();\r\n    }\r\n\r\n    public static class Rgba\r\n    {\r\n        public static Rgba\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static Rgba\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Rgba\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Rgba\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Rgba\u003cT\u003e : IEquatable\u003cRgba\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n        public T A { get; }\r\n\r\n        public Rgba(T r, T g, T b, T a);\r\n        public Rgba(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Rgba\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Argb\u003cT\u003e ToArgb();\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Original Proposal**\r\n\r\n\u003cdetails\u003e\r\n\r\n``` C#\r\n    public readonly struct ColorArgb\r\n    {\r\n        // Layout matches GDI COLORREF and GDI+ ARGB\r\n        public uint Value { get; }\r\n        public byte A =\u003e (byte)(Value \u003e\u003e 24);\r\n        public byte R =\u003e (byte)(Value \u003e\u003e 16);\r\n        public byte G =\u003e (byte)(Value \u003e\u003e 8);\r\n        public byte B =\u003e (byte)(Value);\r\n\r\n        public ColorArgb(uint value) =\u003e Value = value;\r\n        public ColorArgb(byte r, byte g, byte b) : this(r, g, b, byte.MaxValue) { }\r\n        public ColorArgb(byte r, byte g, byte b, byte a) =\u003e Value = (uint)(a \u003c\u003c 24 | r \u003c\u003c 16 | g \u003c\u003c 8 | b);\r\n        public ColorArgb(KnownColor knownColor) =\u003e Value = KnownColorTable.KnownColorToArgb(knownColor);\r\n\r\n        public ColorArgb(Color color) =\u003e Value = (uint)color.ToArgb();\r\n\r\n        // Color has these 3 methods.\r\n        public float GetHue() =\u003e 0;\r\n        public float GetSaturation() =\u003e 0;\r\n        public float GetBrightness() =\u003e 0;\r\n\r\n        // Frequently checked as only GDI+ supports transparency.\r\n        public bool HasTransparency =\u003e A != byte.MaxValue;\r\n        public bool FullyTransparent =\u003e A == 0;\r\n\r\n        public static implicit operator Color(ColorArgb color) =\u003e Color.FromArgb((int)color.Value);\r\n        public static implicit operator ARGB(ColorArgb color) =\u003e (ARGB)color.Value;\r\n        public static implicit operator ColorArgb(ARGB argb) =\u003e new ColorArgb((uint)argb);\r\n        public static implicit operator ColorArgb(Color color) =\u003e new ColorArgb(color);\r\n        public static implicit operator ColorArgb(KnownColor knownColor) =\u003e new ColorArgb(knownColor);\r\n    }\r\n\r\n    // For ease of use in interop definitions (P/Invoke, function pointers, COM)\r\n    // (as close as we get to a typedef in C#)\r\n    public enum ARGB : uint { }\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n## Alternative Designs\r\n\r\nWe could drop a System.Drawing specific color type in System.Drawing for this purpose (the original proposal). Discussing this with @pgovind and @tannergooding we feel there is value in defining more broadly available color types in System.Numerics.\r\n\r\nUsing Vector4 is _possible_ for this purpose, but that makes data interchange and just general usage difficult. (Was this ARGB or RGBA, etc?) The intent is also to add additional methods in the future that are dependent on specific layout (such as conversion to HSL/HSV, etc.).\r\n\r\n## Risks\r\n\r\nNo known risks.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONS_fPA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzYyMDg3Nw==",
                                           "createdAt":  "2021-02-22T19:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern, @tarekgh\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\n`System.Drawing.Color` contains extra metadata that makes it unusable in interop scenarios and inefficient in arrays.\r\n\r\n``` C#\r\nnamespace System.Drawing\r\n{\r\n    public readonly struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        private readonly string? name; // Do not rename (binary serialization)\r\n        private readonly long value; // Do not rename (binary serialization)\r\n        private readonly short knownColor; // Do not rename (binary serialization)\r\n        private readonly short state; // Do not rename (binary serialization)\r\n    }\r\n}\r\n```\r\n\r\n`Color` is also mutable, despite being `readonly`. If it is constructed from a system `KnownColor` value, it always looks up the value on every access.\r\n\r\nIn order to facilitate GDI and GDI+ interop scenarios and creation of more performant overloads for `System.Drawing` and Windows Forms, we should expose a type only contains the raw color data.\r\n\r\n``` C++\r\n// Native definitions\r\n\r\n// GDI\r\ntypedef DWORD COLORREF;\r\n// GDI+\r\ntypedef DWORD ARGB;\r\n```\r\n\r\n## Proposed API\r\n\r\n``` C#\r\n    public readonly struct ColorArgb\r\n    {\r\n        // Layout matches GDI COLORREF and GDI+ ARGB\r\n        public uint Value { get; }\r\n        public byte A =\u003e (byte)(Value \u003e\u003e 24);\r\n        public byte R =\u003e (byte)(Value \u003e\u003e 16);\r\n        public byte G =\u003e (byte)(Value \u003e\u003e 8);\r\n        public byte B =\u003e (byte)(Value);\r\n\r\n        public ColorArgb(uint value) =\u003e Value = value;\r\n        public ColorArgb(byte r, byte g, byte b) : this(r, g, b, byte.MaxValue) { }\r\n        public ColorArgb(byte r, byte g, byte b, byte a) =\u003e Value = (uint)(a \u003c\u003c 24 | r \u003c\u003c 16 | g \u003c\u003c 8 | b);\r\n        public ColorArgb(KnownColor knownColor) =\u003e Value = KnownColorTable.KnownColorToArgb(knownColor);\r\n\r\n        public ColorArgb(Color color) =\u003e Value = (uint)color.ToArgb();\r\n\r\n        // Color has these 3 methods.\r\n        public float GetHue() =\u003e 0;\r\n        public float GetSaturation() =\u003e 0;\r\n        public float GetBrightness() =\u003e 0;\r\n\r\n        // Frequently checked as only GDI+ supports transparency.\r\n        public bool HasTransparency =\u003e A != byte.MaxValue;\r\n        public bool FullyTransparent =\u003e A == 0;\r\n\r\n        public static implicit operator Color(ColorArgb color) =\u003e Color.FromArgb((int)color.Value);\r\n        public static implicit operator ARGB(ColorArgb color) =\u003e (ARGB)color.Value;\r\n        public static implicit operator ColorArgb(ARGB argb) =\u003e new ColorArgb((uint)argb);\r\n        public static implicit operator ColorArgb(Color color) =\u003e new ColorArgb(color);\r\n        public static implicit operator ColorArgb(KnownColor knownColor) =\u003e new ColorArgb(knownColor);\r\n    }\r\n\r\n    // For ease of use in interop definitions (P/Invoke, function pointers, COM)\r\n    // (as close as we get to a typedef in C#)\r\n    public enum ARGB : uint { }\r\n```\r\n\r\n## Alternative Designs\r\n\r\nWe could make a more generic set of color structs to handle all typical color usage scenarios, but that isn\u0027t the intent here. #32418 tracks such a request. This type is specifically to address the existing space that `System.Drawing` exists in, and as such lives in `System.Drawing`.\r\n\r\n## Risks\r\n\r\nNo known risks.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJeremyKuhne\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Drawing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-22T19:35:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjY5NjI0OA==",
                                           "createdAt":  "2021-04-02T20:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charlesroddie",
                                           "body":  "Wow what horrors. ColorArgb is clearly better for the reasons given. But then Color8 in the linked thread solves the same problem. So apart from the namespace it\u0027s the same proposal.",
                                           "updatedAt":  "2021-04-02T20:22:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjkwMTc4Ng==",
                                           "createdAt":  "2021-04-03T17:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzQANA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vabka",
                                                                               "createdAt":  "2021-07-20T20:50:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "~~I dislike this proposal for a few reasons:~~\n\n* ~~The name does not give any information about color depth, while `Color8` does.~~ It\u0027s `\u003cT\u003e` now so that\u0027s very clear.\n\n* ~~I think we should be using and encouraging RGBA instead of ARGB. RGBA is the most used format, while ARGB is mostly a just thing in Microsoft products.~~ The proposal has both RGBA and ARGB now, but I still think that RGBA should be presented as the \"default\" option by naming it just `Color`.",
                                           "updatedAt":  "2025-01-02T06:18:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzU5Nzc4Nw==",
                                           "createdAt":  "2021-04-05T19:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODurM1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2024-08-18T22:06:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e So apart from the namespace it\u0027s the same proposal.\r\n\r\n@charlesroddie Yes, it is very close. This is the native color, and this is _specifically_ for direct interop. `Color8` is not the same format and I don\u0027t want to muddy that space with a layout that doesn\u0027t match the \"standard\".\r\n\r\n@aaronfranke \r\n\r\n\u003e The name does not give any information about color depth, while Color8 does.\r\n\r\nTrue, and I think `Color8` is a much better \"new\" color. This is explicitly for perf and direct interop scenarios.\r\n\r\n\u003e I think we should be using and encouraging RGBA instead of ARGB. \r\n\r\nI agree, but it doesn\u0027t address the specific interop need here.\r\n\r\n\r\nI want to be super clear- this is *not* intended to be the \"new\" `Color`. This is meant to allow us to have a shared native definition for GDI and GDI+ scenarios, which is what `System.Drawing` is specifically written to. We can take multiple steps to push people to use the \"new\" `Color` types when they become available. Type naming, subnamespacing, hiding from intellisense, etc. are options we can lean on.\r\n",
                                           "updatedAt":  "2021-04-05T19:27:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzkwOTg5MA==",
                                           "createdAt":  "2021-04-06T07:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charlesroddie",
                                           "body":  "\u003e This is meant to allow us to have a shared native definition for GDI and GDI+ scenarios, which is what System.Drawing is specifically written to.\r\n\r\nSorry I didn\u0027t see the interop part. If it\u0027s a Windows-specific feature then I don\u0027t think it\u0027s a candidate for dotnet/runtime. Perhaps a WindowsGraphicsPrimitives library that WPF/WinForms can depend on? Or a GraphicsPrimitives library that does the same thing for a broader set of consumers?",
                                           "updatedAt":  "2021-04-06T07:54:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDUxMjUyMQ==",
                                           "createdAt":  "2021-04-07T00:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e If it\u0027s a Windows-specific feature then I don\u0027t think it\u0027s a candidate for dotnet/runtime. \r\n\r\nWell, it is Windows specific in the sense that it is GDI/GDI+ specific, which is what System.Drawing is a projection/mapping of.  So generally I agree with you, but this assembly is really a legacy Windows thing we\u0027re carrying and not the future of drawing/graphics support for .NET I think.",
                                           "updatedAt":  "2021-04-07T00:14:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjI4MTU3Mg==",
                                           "createdAt":  "2021-04-08T22:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Given that this is needed by Winforms to improve perf and System.Drawing.Common could benefit from it, let\u0027s mark is as api-ready-for-review and discuss it in the review meeting.",
                                           "updatedAt":  "2021-04-08T22:50:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjI5NjU0Mw==",
                                           "createdAt":  "2021-04-08T23:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "If this is reviewed, then #32418 should also be reviewed. Since so many things need a Color type, it makes sense to include one (or two) in .NET for everyone to use, including Winforms and System.Drawing and Maui and much more.",
                                           "updatedAt":  "2021-04-08T23:43:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODA5NTM1Mw==",
                                           "createdAt":  "2021-05-25T18:03:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "In API Review we feel that this is just setting us up for an API bifurcation between Color and ColorArgb, and that there doesn\u0027t seem to be a compelling scenario for that bifurcation.\r\n\r\nWith a compelling scenario we could have a different discussion.",
                                           "updatedAt":  "2021-05-25T18:03:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODE5MTgyOQ==",
                                           "createdAt":  "2021-05-25T19:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=kO1HyNmi7ww\u0026t=1h47m30s)\n\nIt seems like there may be scenarios, but we should reconcile the layering (above or below Color) and determine if we need this, or a companion, for MAUI.",
                                           "updatedAt":  "2021-05-25T19:14:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTk4NzYyMQ==",
                                           "createdAt":  "2021-05-27T22:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Updated the proposal based on offline discussions with @pgovind and @tannergooding.",
                                           "updatedAt":  "2021-05-27T22:40:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MDEyMzEzOA==",
                                           "createdAt":  "2021-05-28T04:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\n`System.Drawing.Color` contains extra metadata that makes it unusable in interop scenarios and inefficient in arrays.\r\n\r\n``` C#\r\nnamespace System.Drawing\r\n{\r\n    public readonly struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        private readonly string? name; // Do not rename (binary serialization)\r\n        private readonly long value; // Do not rename (binary serialization)\r\n        private readonly short knownColor; // Do not rename (binary serialization)\r\n        private readonly short state; // Do not rename (binary serialization)\r\n    }\r\n}\r\n```\r\n\r\n`Color` is also mutable, despite being `readonly`. If it is constructed from a system `KnownColor` value, it always looks up the value on every access.\r\n\r\nIn order to facilitate GDI and GDI+ interop scenarios and creation of more performant overloads for `System.Drawing` and Windows Forms, we should expose a type only contains the raw color data.\r\n\r\n``` C++\r\n// Native definitions\r\n\r\n// GDI\r\ntypedef DWORD COLORREF;\r\n// GDI+\r\ntypedef DWORD ARGB;\r\n```\r\n\r\n## Proposed API\r\n\r\n``` C#\r\nusing System;\r\n\r\nnamespace System.Drawing\r\n{\r\n    public readonly struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n        public static implicit operator Color(System.Numerics.Colors.Rgba\u003cbyte\u003e rgba);\r\n        public static explicit operator System.Numerics.Colors.Rgba\u003cbyte\u003e(in Color color);\r\n    }\r\n}\r\n\r\nnamespace System.Numerics.Colors\r\n{\r\n    public static class Argb\r\n    {\r\n        public static Argb\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Argb\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Argb\u003cT\u003e : IEquatable\u003cArgb\u003cT\u003e\u003e, IFormattable where T : struct\r\n    {\r\n        public T A { get; }\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n\r\n        public Argb(T a, T r, T g, T b);\r\n        public Argb(ReadOnlySpan\u003cT\u003e values);\r\n        public readonly void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Argb\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n    }\r\n\r\n    public static class Rgba\r\n    {\r\n        public static Rgba\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Rgba\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Rgba\u003cT\u003e : IEquatable\u003cRgba\u003cT\u003e\u003e, IFormattable where T : struct\r\n    {\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n        public T A { get; }\r\n\r\n        public Rgba(T r, T g, T b, T a);\r\n        public Rgba(ReadOnlySpan\u003cT\u003e values);\r\n        public readonly void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Rgba\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Original Proposal**\r\n\r\n\u003cdetails\u003e\r\n``` C#\r\n    public readonly struct ColorArgb\r\n    {\r\n        // Layout matches GDI COLORREF and GDI+ ARGB\r\n        public uint Value { get; }\r\n        public byte A =\u003e (byte)(Value \u003e\u003e 24);\r\n        public byte R =\u003e (byte)(Value \u003e\u003e 16);\r\n        public byte G =\u003e (byte)(Value \u003e\u003e 8);\r\n        public byte B =\u003e (byte)(Value);\r\n\r\n        public ColorArgb(uint value) =\u003e Value = value;\r\n        public ColorArgb(byte r, byte g, byte b) : this(r, g, b, byte.MaxValue) { }\r\n        public ColorArgb(byte r, byte g, byte b, byte a) =\u003e Value = (uint)(a \u003c\u003c 24 | r \u003c\u003c 16 | g \u003c\u003c 8 | b);\r\n        public ColorArgb(KnownColor knownColor) =\u003e Value = KnownColorTable.KnownColorToArgb(knownColor);\r\n\r\n        public ColorArgb(Color color) =\u003e Value = (uint)color.ToArgb();\r\n\r\n        // Color has these 3 methods.\r\n        public float GetHue() =\u003e 0;\r\n        public float GetSaturation() =\u003e 0;\r\n        public float GetBrightness() =\u003e 0;\r\n\r\n        // Frequently checked as only GDI+ supports transparency.\r\n        public bool HasTransparency =\u003e A != byte.MaxValue;\r\n        public bool FullyTransparent =\u003e A == 0;\r\n\r\n        public static implicit operator Color(ColorArgb color) =\u003e Color.FromArgb((int)color.Value);\r\n        public static implicit operator ARGB(ColorArgb color) =\u003e (ARGB)color.Value;\r\n        public static implicit operator ColorArgb(ARGB argb) =\u003e new ColorArgb((uint)argb);\r\n        public static implicit operator ColorArgb(Color color) =\u003e new ColorArgb(color);\r\n        public static implicit operator ColorArgb(KnownColor knownColor) =\u003e new ColorArgb(knownColor);\r\n    }\r\n\r\n    // For ease of use in interop definitions (P/Invoke, function pointers, COM)\r\n    // (as close as we get to a typedef in C#)\r\n    public enum ARGB : uint { }\r\n```\r\n\u003c/details\u003e\r\n\r\n## Alternative Designs\r\n\r\nWe could drop a System.Drawing specific color type in System.Drawing for this purpose (the original proposal). Discussing this with @pgovind and @tannergooding we feel there is value in defining more broadly available color types in System.Numerics.\r\n\r\nUsing Vector4 is _possible_ for this purpose, but that makes data interchange and just general usage difficult. (Was this ARGB or RGBA, etc?) The intent is also to add additional methods in the future that are dependent on specific layout (such as conversion to HSL/HSV, etc.).\r\n\r\n## Risks\r\n\r\nNo known risks.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJeremyKuhne\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-needs-work`, `api-suggestion`, `area-System.Drawing`, `area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-28T04:32:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MDU5NTk2NQ==",
                                           "createdAt":  "2021-05-28T18:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pgovind",
                                           "body":  "1 question I had here was: Is `System.Numerics` the right place to add `Colors`? \r\n\r\nMy perspective here is that `Numerics` is meant for more math related types. So if I wanted to add a type related to linear algebra, matrices, computational geometry etc, I\u0027d add it to `Numerics`. `Colors` seems more graphics related (for ex: I can\u0027t think of a non-graphics scenario when I\u0027d use `Colors`) and less math related to me, so I wonder if it\u0027ll fit better in a `Graphics` namespace (not sure we have one in the runtime libraries at the moment). Having said that, I don\u0027t really care for the namespace that much. With the new linker work, IMO it doesn\u0027t matter which namespace the type lives in. Ideally only the `Colors` type would remain after the linker passes and at that point it doesn\u0027t matter if it was `System.Numerics.Colors` or `System.GraphicsNamespaceThatDoesntExistYet.Colors`.",
                                           "updatedAt":  "2021-05-28T18:33:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MDYyODg0Mw==",
                                           "createdAt":  "2021-05-28T19:32:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "My perspective here is that most of the types in Numerics are already graphics related. Yes, you could squint and say they math/linear algebra related, but in practice they are designed and expose methods that are purposefully built around 2D and 3D graphics scenarios and are largely based on the types that originally shipped in XNA.\r\n\r\nFor additional clarity, it is not a goal for us to support all color formats or encodings, users have a range of options for that from ImageSharp to WIC. However, the baseline color support being discussed here fits in well with the currently exposed APIs and with what other SIMD oriented math libraries that are similar to our own (such as GLM, DirectX Math, Unity, etc) expose. It effectively covers the default \"surface\" formats of the native OS and will largely be oriented around `byte` and `float` (which are the respective \"default\" storage and operation formats for things like Maui, Wpf, WinForms, Drawing, and DX/OGL/VK).",
                                           "updatedAt":  "2021-05-28T19:32:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjIxNDYzNQ==",
                                           "createdAt":  "2021-06-07T19:58:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@pgovind / @tannergooding I think this is ready for API review again. Do you agree?",
                                           "updatedAt":  "2021-06-07T19:58:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzMDI0Nw==",
                                           "createdAt":  "2021-06-17T23:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@JeremyKuhne, what\u0027s the importance of getting this in for 6.0.0 vs changing it to 7.0.0 or future?",
                                           "updatedAt":  "2021-06-17T23:46:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzNTQwOA==",
                                           "createdAt":  "2021-06-18T00:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzU19w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2021-06-18T00:04:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-07-21T10:09:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@tannergooding it is getting late for 6 so it isn\u0027t _critical_. If we don\u0027t have time now it would be good to get it taken care of early in 7 so we can actually build on it.",
                                           "updatedAt":  "2021-06-18T00:02:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzNjA5Nw==",
                                           "createdAt":  "2021-06-18T00:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Thanks! Going to mark this as 7.0.0 so we hopefully get to it early in the triage process.",
                                           "updatedAt":  "2021-06-18T00:04:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qzas",
                                           "createdAt":  "2021-07-20T19:22:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=POU7RxyBAoI\u0026t=0h41m34s)\n\nWe lost quorum during the API Review meeting for this.  There was concern that it\u0027s proposed as a primitive and there\u0027s not clear evidence that the interested parties have signed off that it\u0027s usable for them.  So it\u0027d be great to get that feedback from someone before approval.\r\n\r\nNotes we took when discussing the proposal:\r\n\r\n\r\n* The types should be ISpanFormattable\r\n* The constraints on these types would ideally be `IScalar`.  If we can get the constraint more constrained that would be great.\r\n* They\u0027re IFormattable, should they be IParsable?\r\n* The Argb and Rgba non-generic types should also have BigEndian versions of their routines.\r\n* The System.Drawing.Color from `Argb\u003cbyte\u003e` should be an overload of `Color.FromArgb`\r\n* Eliminate the RGBA interaction to System.Drawing.Color in favor of conversions from RGBA to ARGB\r\n  * Argb\u003cT\u003e.ToRgba\u003cT\u003e, and Rgba\u003cT\u003e.ToArgb\u003cT\u003e.  Don\u0027t need the Froms.\r\n\r\n```C#\r\nnamespace System.Drawing\r\n{\r\n    partial struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n\r\n        // ToNumericsArgb? ToArgbNumerics?\r\n        public System.Numerics.Colors.Argb\u003cbyte\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n    }\r\n}\r\n\r\nnamespace System.Numerics.Colors\r\n{\r\n    public static class Argb\r\n    {\r\n        public static Argb\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static Argb\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Argb\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Argb\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Argb\u003cT\u003e : IEquatable\u003cArgb\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T A { get; }\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n\r\n        public Argb(T a, T r, T g, T b);\r\n        public Argb(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Argb\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Rgba\u003cT\u003e ToRgba();\r\n    }\r\n\r\n    public static class Rgba\r\n    {\r\n        public static Rgba\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static Rgba\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Rgba\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Rgba\u003cbyte\u003e color);\r\n    }\r\n\r\n    public readonly struct Rgba\u003cT\u003e : IEquatable\u003cRgba\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n        public T A { get; }\r\n\r\n        public Rgba(T r, T g, T b, T a);\r\n        public Rgba(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Rgba\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Argb\u003cT\u003e ToArgb();\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2021-07-20T19:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40q6Gd",
                                           "createdAt":  "2021-07-20T20:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Just popping by from Twitter, saw Numerics and couldn\u0027t resist...\n\nColour types (cue the \"English English\" link) are something we have needed in .NET for a while, because any image processing library just ends up whipping up their own.\n\nHowever, the APIs here are quite thin and by the looks of things are just for SIMD acceleration - if this is the case then that\u0027s fine, only that there are currently no non-float Ts approved for the new generic vector types - I would not be surprised if performance freaks wield these types for general SIMD mathematics which is a shame as beyond the field order being intrinsically meaningful with these types, there aren\u0027t that many differences between these and the vectors.\n\nThis, in addition to there being no defined interactions between the various layout types, indicates that these are just identical storage types with different names and field orders.\n\nWhat\u0027s my point? This just seems like a lot of not a lot, and doesn\u0027t really seem that useful as a standalone namespace that can be used outside of System.Drawing by other libraries; it seems to just exist as a vectorised storage type, the API set of which being increasingly fragmented.\n\nI would rather a Vector4\\\u003cbyte\\\u003e, which admittedly is a bit too general purpose and doesn\u0027t have the meaningful layout; and/or more APIs (like conversions between the colours) to make it more useful to anyone that isn\u0027t System.Drawing and warrant it not being in that namespace - possibly fit for another API proposal, sure.\n\nI just don\u0027t think such thin APIs so tailored and specific to System.Drawing have much reason being outside of it.",
                                           "updatedAt":  "2021-07-20T20:10:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40q7ce",
                                           "createdAt":  "2021-07-20T20:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzc5Jg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2021-07-22T05:34:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I just don\u0027t think such thin APIs so tailored and specific to System.Drawing have much reason being outside of it.\r\n\r\n@Perksey thanks for the feedback. The general intent here is to eventually extend these types with other core functionality such as exposed by DXM or GLM (such as https://docs.microsoft.com/en-us/windows/win32/dxmath/ovw-xnamath-reference-functions-color and related functionality for addition, substraction, interpolation, etc).\r\n\r\nThis was originally made to be a \"minimal viable surface\" so that it could make .NET 6 and for the other functionality to be proposed/come separately in .NET 7. However this missed that deadline. The intent is definitely not for it to stay so \"thin\" and basically only be a storage type.",
                                           "updatedAt":  "2021-07-20T20:20:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40q9cS",
                                           "createdAt":  "2021-07-20T20:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Perksey",
                                           "body":  "Oh awesome, and yeah that\u0027d be the sort of thing I\u0027d be after! Don\u0027t mind me then ;)",
                                           "updatedAt":  "2021-07-20T20:27:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rLNQ",
                                           "createdAt":  "2021-07-20T21:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7iJ8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2021-07-20T22:54:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "frankhaugen",
                                                                               "createdAt":  "2021-09-23T15:44:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CodedBeard",
                                           "body":  "While I was one of the six original up voters, and am not currently the author of my own library (so may not be the feedback you are looking for) I thought I would at least mention why I voted for this oringally.\r\n\r\nI currently have my own fork of both `Ml.Net` and `System.Devices.IoT` where I was working on proposals to provide struct based methods for working with colors for performance sensitive environments. The reason being that, while I can write code in C++ or Rust and have it be peformant enough for \u0027realtime\u0027 video analysis on a raspberry pi, implementing the same code with .NET is not currently usable on a pi, due in some part to the performance of `System.Drawing.*`. \r\n\r\nI intially tried to use ImageSharp as a direct replacement, but found that it too had similar performance issues on a pi. At the time, I found a closed issue (which I now can\u0027t find to reference) on the ImageSharp repo from another user trying to do the same thing, where the close note was in essence \"this isn\u0027t a focus area for us so we won\u0027t be looking at it\".\r\n\r\nWhile I understand the hesitation to \u0027step on the toes\u0027 of existing libraries, given that there are already other parts of .NET besides Winforms that could benifit from this, I really hope it gets approved.",
                                           "updatedAt":  "2021-07-20T21:57:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rRK6",
                                           "createdAt":  "2021-07-20T22:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "Any performance issues for ImageSharp on the PI are platform issues not issues with the library. ",
                                           "updatedAt":  "2021-07-20T22:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rZZo",
                                           "createdAt":  "2021-07-21T00:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzhTTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2021-07-21T00:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2021-07-21T01:04:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "raulsntos",
                                                                               "createdAt":  "2021-07-21T08:59:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2021-07-22T05:35:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "fahadabdulaziz",
                                                                               "createdAt":  "2021-07-22T14:51:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "JimBobSquarePants",
                                           "body":  "This issue feels like a rehash of https://github.com/dotnet/runtime/issues/32418 but with reduce API scope and individual types over a general type..\r\n\r\nI stand by my comment there. This won\u0027t be useful for existing libraries working in this space as they already have those types with tweaks to match their own requirements. \r\nhttps://github.com/dotnet/runtime/issues/32418#issuecomment-595710924",
                                           "updatedAt":  "2021-07-21T00:23:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rcYM",
                                           "createdAt":  "2021-07-21T00:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzbRGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2021-07-21T01:02:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raulsntos",
                                                                               "createdAt":  "2021-07-21T08:54:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2021-07-21T21:26:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodedBeard",
                                                                               "createdAt":  "2021-07-21T21:57:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The main benefit is the same as `Vector2/3/4` and other types in the `System.Numerics` namespace:\r\n1. They represent an interchange type at the lowest levels and so can be used to interchange between higher level libraries with their own types.\r\n2. They provide a minimal set of APIs that might be expected for these \"primitive\" concepts.\r\n3. They can provide hardware acceleration and other benefits that are useful for applications that need something barebones to work with\r\n\r\nThat is, they serve the same purpose as exist in say `DirectX Math` or `GLM` (OpenGL Math). The actual named types for the \"core\" formats would exist and a few helper methods providing xplat accelerated algorithms would exist (same as for `Vector2/3/4`, `Quaternion`, `Plane`, `Matrix4x4`, etc). This mirrors what DXM/GLM do: https://docs.microsoft.com/en-us/windows/win32/dxmath/ovw-xnamath-reference-functions-color and https://glm.g-truc.net/0.9.0/api/a00144.html (plus related docs).\r\n\r\nSo you could expect these to expose core concepts like:\r\n* Addition\r\n* Subtraction\r\n* Interpolation\r\n* Basic Contrast/Saturation adjustments\r\n* Conversion to/from \"core\" formats\r\n  * IEC 61966-2-1:1999 (sRGB)\r\n  * ITU-R BT.601/CCIR 601\r\n  * ITU-R BT.709\r\n\r\nThis would not cover all supported graphics formats (DirectX/Vulkan have ~134 formats: https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format and https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormat.html).\r\n\r\nThis would not aim to cover all kinds of color space conversions.\r\n\r\nThis would not aim to provide support for anything beyond the \"basic\" support as required for interchange and supporting basic UI and graphical acceleration (that is the same scenarios as already covered by other libraries similar to System.Numerics such as XNA, DXM, GLM, etc).",
                                           "updatedAt":  "2021-07-21T00:56:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40rdKw",
                                           "createdAt":  "2021-07-21T01:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBze2PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2021-07-21T02:27:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodedBeard",
                                                                               "createdAt":  "2021-07-21T08:53:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2021-07-21T21:25:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-07-22T10:22:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "and as always, thanks for the input here James. \r\n\r\nImageSharp is a major library and you have a lot of experience in this space. I do agree that there is a lot of scope creep that could happen and I explicitly do not want that here.\r\n\r\nImageSharp is and should continue to be the goto for more advanced scenarios and when you want to do actual/powerful image processing, color space conversions, and transformations.",
                                           "updatedAt":  "2021-07-21T01:05:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40r4u3",
                                           "createdAt":  "2021-07-21T06:11:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "I\u0027m finding the chosen placement confusing. If we\u0027re saying this change is targeting Windows Desktop interop scenarios, then we should place it in System.Drawing.Common, since it is only targeting Windows (https://github.com/dotnet/designs/pull/234).",
                                           "updatedAt":  "2021-07-21T06:11:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40sJ9l",
                                           "createdAt":  "2021-07-21T08:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GalaxiaGuy",
                                           "body":  "As someone who does multi-platform development that mostly does not include Windows, this seems very useful to me.",
                                           "updatedAt":  "2021-07-21T08:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uGHA",
                                           "createdAt":  "2021-07-21T21:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@RussKie  This is not targeting just Windows Desktop anymore. That was the original proposal, it  was updated to be more general purpose based on initial feedback. It will, however, still be usable for the initial scenarios described.",
                                           "updatedAt":  "2021-07-21T21:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uVkQ",
                                           "createdAt":  "2021-07-21T23:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzeUtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2021-07-22T01:40:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2021-07-22T09:16:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CodedBeard",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e Any performance issues for ImageSharp on the PI are platform issues not issues with the library.\r\n\r\nJust to clarify, my comment wasn\u0027t meant as a slight on ImageSharp, Its a wonderful library that I already use for image processing at my employer. It works great on their webservers (vs on a PI), which is what I meant with the paraphrasing of \u0027not our focus area\u0027 on the close comment. @JimBobSquarePants if I am mis-rembering this (entirely possible with the heatwave in my country) or things have changed since early this year, happy to revist ImageSharp\u0027s performance in these \u0027low power\u0027 IoT uses cases, and correct my initial thoughts.\r\n\r\nMy oringial feedback was submitted immediately after watcing this weeks API review. I mearly wanted to voice my opinion that as a non library author who still cares about performance, I support @tannergooding  and @JeremyKuhne arguments for including this, and that parts of .NET outside of the BCL that need to use basic color operations (most of ml/iot usage i\u0027ve seen), shouldn\u0027t be hamstrung by `System.Drawing.Color` performance, or the fact that other \u0027fully functional\u0027  image processing libraries like ImageSharp exist and may/not adopt these types. My concern was and still is, this will get \u0027can kicked\u0027 again because ImageSharp won\u0027t use it, as they already have their own similar implementation, even though there are use cases that could still benifit from a framework provided type.",
                                           "updatedAt":  "2021-07-21T23:29:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uv4h",
                                           "createdAt":  "2021-07-22T05:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzhDMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2021-07-22T14:29:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fitdev",
                                           "body":  "A color exchange type is certainly one of the things we have long been looking for, and for the moment due to the lack of one in BCL, had to implement our own, which is not ideal.\r\n\r\nOther libraries / frameworks may use their own Color types, tailored to their needs. But that does not eliminate the need for a common, performant, and data-oriented (just holding the raw, unambiguous data) Color type, to which all other libraries / framework may provide explicit/implicit conversion operators anyways.\r\n\r\nMoreover, in the same spirit as what you are doing with static interfaces for Math, having a common Color type would allow one to write reusable color-related routines _once_, and then be able to use them in any framework where such color calculations might be needed like WF, WPF, MAUI (assuming those will provide conversion operators to/from this common color type).",
                                           "updatedAt":  "2021-07-22T05:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vbNj",
                                           "createdAt":  "2021-07-22T11:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzffoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2021-07-22T11:54:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "I don\u0027t have such strong opinion against this as @JimBobSquarePants, but it would be really nice to see usage examples with specific library code before moving on with the proposal.\r\n\r\nIs anyone interested posting code snippets, or even better, prototype the API\u0027s with an actual interchange scenario, so we can reason about code instead of theoretical scenarios?",
                                           "updatedAt":  "2021-07-22T11:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v3R8",
                                           "createdAt":  "2021-07-22T14:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "Note that this proposal is specifically for blittable color. For a general-purpose interchange type, see #32418. It would be highly appreciated if users would post use cases in that proposal. I\u0027ve already posted some examples, including interoperability with GPUs, shader languages, Godot, Xenko, System.Drawing.Color, MAUI\u0027s Color type, and packing in and out of uint/ulong.",
                                           "updatedAt":  "2021-07-22T14:44:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v5L0",
                                           "createdAt":  "2021-07-22T14:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Note that this proposal is specifically for blittable color. For a general-purpose interchange type, see #32418.\r\n\r\n@aaronfranke, I do not believe we would look at doing both. #32418, IMO, does not offer any additional benefits over these types and has several drawbacks as discussed in the issue itself.\r\n\r\nFor example, if you look at the `Color` type in that proposal, it is functionally the `Rgba\u003cfloat\u003e` from this proposal (and same for `Color8` to `Rgba\u003cbyte\u003e`). But with the concepts like HSV and others exposed as properties such that getting them is more costly and without explicitly distinguishing the layout that the type is.\r\n\r\nIt is a non-goal to provide a general purpose interchange color and attempting to do so would likely not turn out well. Instead, it is only the goal to provide support for a few \"core\" color formats (such as `ARGB` and `RGBA`) with \"core\" functionality such as addition, subtraction, interpolation, and core color space conversions (as listed above).",
                                           "updatedAt":  "2021-07-22T14:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v5dq",
                                           "createdAt":  "2021-07-22T14:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "@tannergooding Can we explicitly distinguish what layout the type is, then? Can we just do whatever MAUI does, but in `System.Numerics`? https://github.com/dotnet/Microsoft.Maui.Graphics/blob/main/src/Microsoft.Maui.Graphics/Color.cs",
                                           "updatedAt":  "2021-07-22T14:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v7Hc",
                                           "createdAt":  "2021-07-22T14:54:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Can we explicitly distinguish what layout the type is, then?\r\n\r\nCan you elaborate on what you mean here?\r\n\r\n\u003e Can we just do whatever MAUI does, but in System.Numerics?\r\n\r\nNone of WinForms (`System.Drawing.Color`), WPF (`System.Windows.Media.Color`), or MAUI (`Microsoft.Maui.Graphics.Color`) are good examples of what we are trying to cover here.\r\n\r\nIn the WinForms/MAUI case they are classes and so represent non-blittable information. In the case of WPF, it is a struct but carries a lot of additional metadata that makes it inefficient for \"core\" scenario we are attempting to cover here.\r\nNoting that this isn\u0027t \"bad\". They are designed for their use cases and so carry additional data that each layer requires, but that does make it much higher level than what we want this to be, which is \"named and blittable types representing the raw color metadata of core formats with a few core functions supporting the basic color operations effectively every library exposes\". These higher levels could be built on (internally) or be created from the System.Numerics color formats (that is have conversion operations) proposed above. This would give them additional performance wins (as we will SIMD accelerate algorithms where possible for all SIMD platforms) and allow easy interchange between other color formats without taking on \"new dependencies\" (e.g. `Maui Color` -\u003e `Numerics Color` -\u003e `Drawing Color`/`WPF Color`/`\u003cOther\u003e Color`).\r\n\r\nThat is filling the gap for `Color` in the same way that other libraries that are similar to System.Numerics, such as DirectX Math and GLM.\r\n",
                                           "updatedAt":  "2021-07-22T14:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v_kF",
                                           "createdAt":  "2021-07-22T15:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "\u003e \u003e Can we explicitly distinguish what layout the type is, then?\r\n\u003e\r\n\u003e Can you elaborate on what you mean here?\r\n\r\nI mean the same thing as what you mean here:\r\n\r\n\u003e and without explicitly distinguishing the layout that the type is.",
                                           "updatedAt":  "2021-07-22T15:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wCgs",
                                           "createdAt":  "2021-07-22T15:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I mean the same thing as what you mean here:\r\n\r\nI\u0027m still not understanding. `Rgba\u003cT\u003e` and `Argb\u003cT\u003e` both explicitly list the layout in their name.",
                                           "updatedAt":  "2021-07-22T15:32:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wGtL",
                                           "createdAt":  "2021-07-22T15:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "I don\u0027t think that the layout has to be explicitly stated in the name for it to be well-defined. Concepts like HSV and others exposed as properties are still well-defined. In fact, the HSV values don\u0027t at all depend on the in-memory layout of the channels.\r\n\r\n\u003e It is a non-goal to provide a general purpose interchange color and attempting to do so would likely not turn out well. Instead, it is only the goal to provide support for a few \"core\" color formats (such as ARGB and RGBA) with \"core\" functionality such as addition, subtraction, interpolation, and core color space conversions (as listed above).\r\n\r\nThat\u0027s basically what the general-purpose color type is for. It provides basic functionality of storing colors in RGBA format with basic operations like addition, subtraction, interpolation, etc. Methods like lightened and darkened present in the proposal can be excluded if it\u0027s decided that they are not desired.\r\n\r\nConverting to color spaces to me would be considered out-of-scope, however, as there are hundreds of color spaces in use and an infinite amount of them that could exist, so I think that\u0027s best left to user code (and/or would be handled transparently if we need to do so when converting to other color types in .NET).",
                                           "updatedAt":  "2021-07-22T15:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wHOG",
                                           "createdAt":  "2021-07-22T15:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "What are you seeing in #32418 that isn\u0027t covered by this proposal then (and the planned future API additions to the base types described here)?",
                                           "updatedAt":  "2021-07-22T15:59:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400LLL",
                                           "createdAt":  "2021-07-24T18:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0_mHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2021-07-24T18:24:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2021-08-04T02:55:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "A general `RGB` name makes me a little uneasy because it doesn\u0027t tell me what RGB it is. sRGB? Adobe RGB? scRGB? Is it compressed, or linear? If a method takes `RGB\u003cfloat\u003e` then which of those do I pass to it?\r\n\r\nIs it valueable to express such things as part of the type?\r\n\r\nIf we *don\u0027t* express that as part of the type, then what use does it have over e.g. `Color3` or `Color4`? It seems like no method could take the type without negotiating the actual color info through other means, so there is no real need to call it `RGB`.",
                                           "updatedAt":  "2021-07-24T18:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400LWm",
                                           "createdAt":  "2021-07-24T18:28:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0_mBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2021-08-04T02:55:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e A general RGB name makes me a little uneasy because it doesn\u0027t tell me what RGB it is. sRGB? Adobe RGB? scRGB? Is it compressed, or linear? If a method takes RGB\u003cfloat\u003e then which of those do I pass to it?\r\n\r\nThe typical pattern is that `sRGB` is `sRGB` and that `RGB`/`RGBA` is \"the full color space\". This is an existing and fairly standardized pattern for graphics APIs covering what is being exposed here.\r\n\r\nIt is simply a red, green, blue, and alpha component where `0` is no color present and `MaxValue` for integers and `1.0` for floating point represents \"all color present\".\r\n\r\nConversion to a given color space, such as `sRGB` represents an operation that will mutate this to fit within the \"full color space\".",
                                           "updatedAt":  "2021-07-24T18:30:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400LX9",
                                           "createdAt":  "2021-07-24T18:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0_lyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2021-08-04T02:54:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "If the pattern is standard, why not call it `Color`?",
                                           "updatedAt":  "2021-07-24T18:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400LbO",
                                           "createdAt":  "2021-07-24T18:30:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Because the pattern is standard but the ordering of components is not and the ordering of components is the important information here.",
                                           "updatedAt":  "2021-07-24T18:30:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400LhA",
                                           "createdAt":  "2021-07-24T18:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format and https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkFormat.html go more in depth into the possible color formats. For the most part, they differ on:\r\n* Signed vs Unsigned\r\n* Normalized vs Unormalized\r\n* sRGB vs Full Space\r\n\r\nIt is not the goal or scope of this proposal to expose everything. But most concepts can be cleanly represented via the explicit `Argb\u003cT\u003e` and `Rgba\u003cT\u003e` for the most common formats and color spaces (just like DirectX Math or GLM expose: https://docs.microsoft.com/en-us/windows/win32/dxmath/ovw-xnamath-reference-functions-color)",
                                           "updatedAt":  "2021-07-24T18:33:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400Lv5",
                                           "createdAt":  "2021-07-24T18:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCLyjOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2021-08-04T02:54:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ithline",
                                                                               "createdAt":  "2021-08-29T11:45:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2022-01-27T07:23:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "\u003e but the ordering of components is not\r\n\r\nFrom a Microsoft perspective, maybe. For the rest of the world, RGBA is quite standard. Formats like ARGB are used in DirectX and pretty much nowhere else. Even in .NET, we have System.Drawing.Color and MAUI\u0027s Color which are both RGBA (and aren\u0027t named \"Rgba\"). I think it makes perfect sense to call it \"Color\" and have everyone just learn what it means.\r\n\r\nIt is very trivial for someone to Ctrl+Click on a type and see what the layout of its members are. I\u0027m not sure that having this information in the name is of any help at all. Most users don\u0027t even need this information anyway.\r\n\r\nI don\u0027t want to expose everything either. I want a `Color` type with RGBA. We can have `Color` and `Argb` if you want, and IMO this is also better than `Rgba` and `Argb`, because it directs users to the simpler \"Color\" name if they just want colors, and users will know that the more complex name of `Argb` is for if you need that specific format.",
                                           "updatedAt":  "2021-07-24T18:46:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400MAr",
                                           "createdAt":  "2021-07-24T18:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "\u003e The typical pattern is that `sRGB` is `sRGB` and that `RGB`/`RGBA` is \"the full color space\".\r\n\r\nI\u0027m not familiar with the term \"full color space\" -- is it a misnomer for \"any color space\"?\r\n\r\nWhat you\u0027re describing here isn\u0027t how I would expect the type to be used.\r\n\r\nAnywhere I see `RGB\u003cbyte\u003e`, I\u0027d expect to pass compressed sRGB.\r\n\r\nAnywhere I see `RGB\u003cfloat\u003e`, I\u0027d expect to pass linear sRGB. Except with `System.Windows.Media.Color`, where I\u0027d expect to pass linear scRGB.",
                                           "updatedAt":  "2021-07-24T18:48:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400NVm",
                                           "createdAt":  "2021-07-24T19:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "sRGB is almost never the normal definition of \"color\" values in the types of APIs that this is covering.\r\n\r\nInstead it is typically CIE 1931 RGB (linear RGB) which is the \"full color space\", that is the visible color spectrum irrespective of the limitations of monitors or other display technology:\r\n![image](https://user-images.githubusercontent.com/10487869/126879301-3835414d-92ef-4abe-afc5-0c5a547d0d5e.png) (image from wikipedia)\r\n\r\nThis along with CIE 1931 XYZ are the two most common color spaces and are often used and cited as the intermediary formats on which other color spaces such as sRGB (`IEC 61966-2-1:1999`) are built.\r\n\r\n*Edit:* I think I may have gotten RGB and XYZ mixed up on which is the \"full space\", I think XYZ is the unlimited gamut that can define \"any color\", but the general point remains the same.",
                                           "updatedAt":  "2021-07-24T19:32:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41L988",
                                           "createdAt":  "2021-08-04T03:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nirmal4G",
                                           "body":  "If we\u0027re having trouble with the naming, I have a few suggestions.\r\n\r\n1. `To` + `ArgbColor\u003cbyte\u003e`/`RgbaColor\u003cbyte\u003e`\r\n2. `To` + `ColorARGB\u003cbyte\u003e`/`ColorRGBA\u003cbyte\u003e`\r\n3. `To` + `AlphaFirstColor\u003cbyte\u003e`/`AlphaLastColor\u003cbyte\u003e`\r\n4. `To` + `ColorAlphaFirst\u003cbyte\u003e`/`ColorAlphaLast\u003cbyte\u003e` \r\n\r\nThis is similar to naming of `UTF8String` and `Http~` types. I personally recommend either **2** or **4** (_If we\u0027re okay with the verbose naming_)",
                                           "updatedAt":  "2021-08-04T03:19:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41L_VT",
                                           "createdAt":  "2021-08-04T03:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1HViA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2021-08-04T18:12:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Nirmal4G",
                                           "body":  "Unrelated to the issue... The original proposal in the description is not rendered properly.\r\n\r\nTo render the details/spoiler tag properly, just leave an empty line between the tags, like so...\r\n\r\n```md\r\n\u003cdetails\u003e\r\n\u003csummary\u003eTitle text here...\u003c/summary\u003e\r\n\r\n\u003c!-- insert markdown here... --\u003e\r\n\r\n\u003c/details\u003e\r\n```",
                                           "updatedAt":  "2025-09-03T00:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Tjuf",
                                           "createdAt":  "2022-03-08T18:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=0nixAM-u2Fw\u0026t=0h34m1s)\n\n* Looks good as proposed\r\n\r\n```C#\r\nusing System;\r\n\r\nnamespace System.Drawing\r\n{\r\n    partial struct Color : IEquatable\u003cColor\u003e\r\n    {\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n\r\n        // ToNumericsArgb? ToArgbNumerics?\r\n        public System.Numerics.Colors.Argb\u003cbyte\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n    }\r\n}\r\n\r\n// WPF\r\nnamespace System.Windows.Media\r\n{\r\n    public struct Color : IEquatable\u003cColor\u003e, IFormattable\r\n    {\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cbyte\u003e argb);\r\n        public static Color FromArgb(System.Numerics.Colors.Argb\u003cfloat\u003e argb);\r\n        public static implicit operator Color(System.Numerics.Colors.Argb\u003cfloat\u003e argb);\r\n\r\n        public System.Numerics.Colors.Argb\u003cbyte\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cbyte\u003e(in Color color);\r\n        public System.Numerics.Colors.Argb\u003cfloat\u003e ToArgbValue();\r\n        public static explicit operator System.Numerics.Colors.Argb\u003cfloat\u003e(in Color color);\r\n    }\r\n}\r\n\r\nnamespace System.Numerics.Colors\r\n{\r\n    public static class Argb\r\n    {\r\n        public static Argb\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static Argb\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Argb\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Argb\u003cbyte\u003e color);\r\n    }\r\n    public readonly struct Argb\u003cT\u003e : IEquatable\u003cArgb\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T A { get; }\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n\r\n        public Argb(T a, T r, T g, T b);\r\n        public Argb(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Argb\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Rgba\u003cT\u003e ToRgba();\r\n    }\r\n    public static class Rgba\r\n    {\r\n        public static Rgba\u003cbyte\u003e CreateLittleEndian(uint color);\r\n        public static Rgba\u003cbyte\u003e CreateBigEndian(uint color);\r\n        public static uint ToUInt32LittleEndian(this Rgba\u003cbyte\u003e color);\r\n        public static uint ToUInt32BigEndian(this Rgba\u003cbyte\u003e color);\r\n    }\r\n    public readonly struct Rgba\u003cT\u003e : IEquatable\u003cRgba\u003cT\u003e\u003e, IFormattable, ISpanFormattable where T : struct\r\n    {\r\n        public T R { get; }\r\n        public T G { get; }\r\n        public T B { get; }\r\n        public T A { get; }\r\n\r\n        public Rgba(T r, T g, T b, T a);\r\n        public Rgba(ReadOnlySpan\u003cT\u003e values);\r\n        public void CopyTo(Span\u003cT\u003e destination);\r\n        public bool Equals(Rgba\u003cT\u003e other);\r\n        public string ToString(string format, IFormatProvider formatProvider);\r\n        // whatever ISpanFormattable says\r\n        public Argb\u003cT\u003e ToArgb();\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-03-09T00:30:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Ydpc",
                                           "createdAt":  "2022-03-09T21:15:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "I think we can label this \"easy\". I think new contributors would do well with this issue.",
                                           "updatedAt":  "2022-03-09T21:15:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Yehk",
                                           "createdAt":  "2022-03-09T21:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSY7ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deeprobin",
                                                                               "createdAt":  "2022-03-10T19:35:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This one is being primarily driven by WinForms and need in other areas. It\u0027s going to likely be done by that team to ensure it and its usages are going in at the same time/release",
                                           "updatedAt":  "2022-03-09T21:19:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ghpt",
                                           "createdAt":  "2022-03-11T20:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "So why are they named `Rgba` and `Argb` ? I thought the standard, as per WIC, was BGRA and RGBA? Both of those have A in the same position (byte index 3). I\u0027m not familiar with moving A to byte index 0.\r\n\r\n`Argb\u003cT\u003e` in particular does not appear compatible with Win32/WIC-style BGRA ordering. This means that to use `Argb\u003cT\u003e`, swizzling will always be required, which has overhead and will limit throughput in a very common scenario, including WinForms.",
                                           "updatedAt":  "2022-03-11T20:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_gmpa",
                                           "createdAt":  "2022-03-11T20:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Argb\u003cT\u003e in particular does not appear compatible with Win32/WIC-style BGRA ordering.\r\n\r\nThis is a complex space and depends on native surface format of a given OS vs what is used everywhere.\r\n\r\nThe native Win32 surface format is often referred to as `B8G8R8A8` but that is most often carried about as a typedef of `uint32_t` and so whether it matches a `Bgra\u003cT\u003e` or `Argb\u003cT\u003e` struct can depend on endianness among other factors.\r\n\r\nIt may be that we want/need to eventually expose `Bgra\u003cT\u003e` as well, but that doesn\u0027t necessarily fit with the immediate needs of WinForms, WPF, or common usages in games.\r\n\r\nThe conversion between formats can also be done as part of the copy or write operation in a majority of these cases, leading to no real additional cost in terms of the operation.\r\n\r\n",
                                           "updatedAt":  "2022-03-11T20:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_gvtR",
                                           "createdAt":  "2022-03-11T21:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSomMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2022-03-12T05:27:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "I disagree -- the swizzling definitely has a cost, especially when it has to be done on both ends of an operation, especially if has to be done multiple times as a buffer is passed around internally and has various operations performed on it that only operate on the swizzled format. So in my app/library, imagine I\u0027m passing a BGRA bitmap from A to B to C, and each one wants to execute a filter on the bitmap that is supported by these primitives (but only in ARGB format!). That means I have to swizzle 6 times to get the job done, unless I add a way for the components to communicate the component ordering of the buffer. This affects architecture of apps and libraries, which may not be malleable enough to reasonably accommodate this.\r\n\r\n\u003e It may be that we want/need to eventually expose Bgra\u003cT\u003e as well, but that doesn\u0027t necessarily fit with the immediate needs of WinForms, WPF, or common usages in games.\r\n\r\nThat sounds completely contradictory. You\u0027re stating that a key target scenario here is WinForms and WPF, which will be dealing with BGRA because that\u0027s what the platform (Win32) uses, so therefore BGRA doesn\u0027t fit with their immediate needs? 😕 Paint.NET would also be hamstrung, performance-wise, if I wanted to use these primitives -- I have seen good performance improvements by optimizing and eliminating things like swizzling, copying, and format conversions.\r\n\r\nTo be blunt, if BGRA isn\u0027t supported, these primitives are completely useless for Paint.NET and for a large number of Windows/desktop scenarios. The performance cost of swizzling is not super high but it does lower the upper bound of performance, especially for real-time/interactive scenarios.",
                                           "updatedAt":  "2022-03-11T21:51:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_g7zF",
                                           "createdAt":  "2022-03-11T22:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuaPYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "bartonjs",
                                                                               "createdAt":  "2022-03-11T22:44:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2022-03-12T09:32:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RussKie",
                                                                               "createdAt":  "2022-03-13T22:44:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "RussKie",
                                                                               "createdAt":  "2022-03-13T22:44:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexRadch",
                                                                               "createdAt":  "2024-08-16T04:22:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e the swizzling definitely has a cost, especially when it has to be done on both ends of an operation, especially if has to be done multiple times as a buffer is passed around internally and has various operations performed on it that only operate on the swizzled format.\r\n\r\nI think you\u0027re misunderstanding. In terms of basic operations, the swizzle is performed as part of the load/store. So if you require a copy, then you can convert as part of that copy at no-additional cost (there is no instruction latency difference between a `load` or a `load + swizzle`). This is true of both individual pixel read-writes and more vectorized algorithms. You can achieve theoretically higher throughput for a 1-to-1 copy using non-temporal loads/stores, but that\u0027s something a bit different and isn\u0027t as common.\r\n\r\nIf you are having to swizzle, do an operation, and then re-swizzle; then yes there can be a cost for vectorized code since you can\u0027t do the swizzle as part of a vectorized store.\r\n\r\n\u003e You\u0027re stating that a key target scenario here is WinForms and WPF, which will be dealing with BGRA because that\u0027s what the platform (Win32) uses, so therefore BGRA doesn\u0027t fit with their immediate needs\r\n\r\nThis is a complex area and what the docs describe vs how its implemented can differ a bit.\r\n* `COLORREF` is a `uint32` and is `0x00BBGGRR`\r\n  * This is equivalent to `struct COLORREF { byte R, G, B, A; }`, where `A` is always `0`, on a little-endian platform\r\n  * This is described in docs as `RGB`\r\n* `Gdiplus.Color` is a `uint32` and is `0xAARRGGBB`.\r\n  * This is equivalent to `struct Color { byte B, G, R, A; }` on a little-endian platform\r\n  * This is described in docs as `RGBA`\r\n  * The ordering in the struct, however, is BGRA\r\n* `System.Windows.Media.Color` is `struct Color { byte a, r, g, b; }` or `struct Color { float a, r, g, b; }`\r\n  * This is equivalent to `0xBBGGRRAA` on a little endian platform\r\n  * This is described in the docs as `ARGB`\r\n* CSS and other standard colors are or in the form `#RRGGBBAA`\r\n  * These are described in the docs as `RGB` and `RGBA`\r\n* DirectX Math are interpreted as `struct Color { float r, g, b, a; }`\r\n  * These are described in the docs as `RGBA`\r\n  * Most games likewise order their surface formats and other bits as `RGBA`\r\n* Direct2D exposes `ColorF` which is a `uint32` and is `0xAARRGGBB`\r\n  * Direct2D recommends targeting `B8G8R8A8` as this ends up matching the layout of `ColorF` and `Gdiplus.Color` on a little-endian system\r\n\r\nThe actual underlying format for GDI+ and the recommended format for D2D1 is really equivalent to `BGRA` since Windows only supports little-endian systems (however, it would be `ARGB` on a big-endian system if ever supported in the future). However, most higher level libraries are working with `RGBA` or `ARGB` instead and then \"normalize\" to the actual surface format in the compositor or elsewhere. This is particularly relevant when the surface format for other platforms/systems can differ as well and so picking one major format to standardize on for the \"core\" functionality is desirable. This does sometimes have a cost for converting, but those are often relegated to \"one time\" operations that happen as part of the start/end of the transform pipeline.\r\n* Also noting that `BGRA` is strictly just the \"native\" surface format. If you have a monitor that supports it, you are completely able to opt into other formats as well including HDR, 10 or 12-bit color formats, etc. In this case, the DWM will handle fixing up the difference for apps that don\u0027t support this (and it can lead to a noticeable \"washed out\" appearance in some cases).",
                                           "updatedAt":  "2022-03-11T22:33:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_jLLV",
                                           "createdAt":  "2022-03-13T21:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "Hmm, well that seems to clear up the confusion on my part (along with the conversation we had on Discord).",
                                           "updatedAt":  "2022-03-13T21:28:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IzniJ",
                                           "createdAt":  "2024-08-18T11:47:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexRadch",
                                           "body":  "I implemented this API in PR #106575. I think that the methods `CreateBigEndian(uint color)` and `CreateLittleEndian(uint color)` have inappropriate and confusing names. These methods create a color **from** an integer value with a big-endian/little-endian byte order.\r\n\r\nI suggest renaming them to `FromBigEndian` and `FromLittleEndian`. Such names are more consistent with reverse methods `ToUInt32BigEndian` and `ToUInt32LittleEndian`. It is convenient for reverse methods to have reverse names.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-08-18T11:49:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JEvdG",
                                           "createdAt":  "2024-08-20T20:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvDAFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2024-08-21T08:28:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PavielKraskouski",
                                           "body":  "Will it be possible to convert float colors to vector types and back? For example, when reading normal maps, colors need to be converted to vector.",
                                           "updatedAt":  "2024-08-20T20:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WRqPV",
                                           "createdAt":  "2024-12-05T19:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michael-hawker",
                                           "body":  "Does CMYK factor as an alternate schema/form in here at all as something to think about? Just trying to think beyond the base cases here and what could be useful to other industries/use-cases beyond the traditional graphics rendering.",
                                           "updatedAt":  "2024-12-05T19:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WUCA3",
                                           "createdAt":  "2024-12-06T00:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD95hdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2024-12-06T00:55:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2024-12-06T07:47:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2024-12-06T12:49:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Saplonily",
                                                                               "createdAt":  "2024-12-06T16:00:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "Worth noting is that colors composed of different primitive types, e.g. `byte` vs `float`, often use different ranges for their values. An `Rgba\u003cbyte\u003e` will use the full [0, 255] range of a `byte` whereas an `Rgba\u003cfloat\u003e` would use a normalized range of [0, 1]. Values outside of that range are either invalid or used for things like HDR. So this design should consider that a \"primitive schema\" might be necessary in the future, particularly if generic conversions between e.g. `Rgba\u003cbyte\u003e` and `Rgba\u003cfloat\u003e` is desired functionality.\n\nPut another way, we can\u0027t just constrain to `INumber\u003cT\u003e, IMinMaxValue\u003cT\u003e` and use `IMinMaxValue\u003cT\u003e.MinValue/MaxValue` for the range of color components.\n\nSome imaging toolkits, notably WIC, also have a default policy that pixel formats using unsigned integers (e.g. `Rgba\u003cbyte\u003e`) use companded gamma (e.g. sRGB ~2.2ɣ), while floating point formats (`Rgba\u003cfloat\u003e`) use linear gamma (1.0ɣ). This gets into color spaces, color profiles, and color \"contexts\", which is a huge mess of complexity on its own, but is worth keeping an eye on so that these APIs don\u0027t get painted in a corner with respect to future expansion.",
                                           "updatedAt":  "2024-12-06T00:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4tdh",
                                           "createdAt":  "2024-12-30T04:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "Sorry, but IMHO this makes no sense with this small surface/scope.\n\nFirst. If you are going to reinvent the wheel to make an unification of code, the reinvented wheel should be better than the current wheel. That means to implement a wellformed api surface around the color theory, color spaces, conversions, etc... Even if you don\u0027t implement it, create an good structure of interfaces and let the people cook. If this is only \"create a new small, non extrapolable struct to make it a little bit better to interop and help us to improve performance without encouraging the developers to use these things\" is ok, but is an enormous missed opportunity.\n\nSecond. Json serialization. If this is looking for make the interoperability better, why not the serialization?. Look third statement.\n\nThird. Create a logical framework around the concept of color (again, first point, color theory, color spaces, conversions). Create an \"agnostic color-color space tuple\" or \"color in space\" (naming is hard) struct, and work around there. Is it a pain in the *ss? Yeah, but it is \"the right way\". In a pure way, a color is just a **vector of values** (I think this must be make with SIMD in mind), each one represeting something in one concrete color space or representation system.\n\nFourth. More ahead, you\u0027ll never break binary compatibility in order to remove `Media.Color` and `Drawing.Color`, and use the new `Color`, adding a layer that will be \"just a new layer which is common\" for the mantainers of the libraries, but not to the users. That way the users will never use this work. You have to encourage the users to work in \"the new color api space\" and just make `System.Windows.Media.Color.FromAgnosticColor(AgnosticColor xxxx, ....)` and `System.Drawing.Color.FromAgnosticColor(AgnosticColor xxxx, ....)` in the end stage.\n\nThe color animations in WPF could be improved a lot with this work, a lot of other things too.\n\nFifth. Generic Math interfaces!\n\nAnd, if this become bigger and has the sufficient scope, just create namespace for it `System.Colors`\n\nPS: I understand that the great majority of developers just use sRGB (or any other permutation of the (A)RGB model). And that\u0027s the core funcionality you should implement. But you could let the API more open to expansion for other developers.",
                                           "updatedAt":  "2024-12-30T04:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y7UjF",
                                           "createdAt":  "2024-12-30T16:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAxnIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2024-12-30T19:12:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexRadch",
                                                                               "createdAt":  "2024-12-31T10:22:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2024-12-31T15:23:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aaronfranke",
                                                                               "createdAt":  "2025-01-02T06:17:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Any API the BCL exposes has to consider the Framework Design Guidelines (FDG) and the general scope of the proposal. We don\u0027t just expose APIs unnecessarily, we don\u0027t try and expose foundational things without good reason, and extensibility support or lack there of is an explicit part of the design considerations.\n\nAll the points you\u0027ve raised have already been considered and were rejected for various reasons such as going directly against the FDG, coupling things together that should not be coupled or which may only be \"point in time\", not being \"foundational\" but rather encroaching into incredibly complex spaces that are better handled by explicit 3rd party libraries dedicated to the scenario, etc.\n\nThe APIs being exposed here are explicitly scoped, they are done the way they are to provide a means of simple primitive interop, to allow exposing some baseline functionality that is common to other graphics oriented vector math libraries (such as DirectX Math or GLM), and to provide a means of accelerating/improving WinForms/WPF.",
                                           "updatedAt":  "2024-12-30T16:28:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZAZsp",
                                           "createdAt":  "2025-01-01T13:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "What about something like this?\n\n```C#\npublic readonly struct Color: IEquatable\u003cColor\u003e //etc...\n{\n    public enum ColorFormat\n    {\n        Rgba,\n        Argb,\n        Rgb,\n        Bgr,\n        Xyz,\n        Xyy,\n        Lab,\n        //and so on\n    }\n\n    // Color components. Meaningless, the ColorFormat will be the element that gives them the meaning by the order.\n    public float Component1 { get; set; }\n    public float Component2 { get; set; }\n    public float Component3 { get; set; }\n    public float Component4 { get; set; }\n    //future proofing?\n    //public float Component5 { get; set; }\n    //public float Component6 { get; set; }\n\n    public ColorFormat Format { get; set; }\n\n    public Color(ColorFormat format, float c1, float c2, float c3, float c4 = 0.0f)\n    {\n        Format = format;\n        Component1 = c1;\n        Component2 = c2;\n        Component3 = c3;\n        Component4 = c4;\n    }\n}\n\n//among all the other methods and static classes in the api proposal\n```\n\nThis is still blittable, it\u0027s based on floating point (which is more relatable to something like the color) and is the most generic way a 3-4 components color can be represented, without restraints. To make use of vectorization, just convert it to `Vector4`. Instead a full range float, it could be considered something more restrictive, or even make it generic (but that defeats the purpose).\n\nThis could be the basic element, and then use the proposed `Rgba` or `Argb` as the \"usable in everyday computing things\".",
                                           "updatedAt":  "2025-01-01T14:13:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZAlRz",
                                           "createdAt":  "2025-01-01T16:17:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e This is still blittable\n\nIt\u0027s blittable in the strictest sense that it contains all unmanaged data and would not require marshalling.\n\nIt is not blittable in the useful sense in that it allows bit-blitting of the data in the common scenarios that require it. So you wouldn\u0027t be able to use such a `Color[1080, 1920]` array to represent a bitmap, for example. You wouldn\u0027t be able to have a `Span\u003cColor\u003e` or `Color*` to the underlying buffer of a drawing surface, etc.\n\nThe design here is very intentional and considerate of the real world needs and use-cases; not some generic shape that tries to do everything at once.",
                                           "updatedAt":  "2025-01-01T16:17:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZBOSm",
                                           "createdAt":  "2025-01-02T02:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "I will reiterate what I\u0027ve stated before: The most important color type to include in .NET is the one already used in the C# ecosystem, such as [Unity](https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Color.html), [Godot](https://github.com/godotengine/godot/blob/master/modules/mono/glue/GodotSharp/GodotSharp/Core/Color.cs), [Stride](https://github.com/stride3d/stride/blob/master/sources/core/Stride.Core.Mathematics/Color4.cs), and [MAUI](https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/Color.cs) (see https://github.com/dotnet/maui/issues/16903). Namely, a Color made out of 32-bit `float` values in an RGBA layout.\n\nThis is specifically what would provide the most benefit for interoperability scenarios in the general case, so that code can use a general color type that has seamless blittability with these others. For the non-general case, such as a need for multiple layouts, multiple color spaces, compact representations, and so on, these are what should be left to libraries. I urge people to not get distracted by legacy Microsoft-specific technologies with ARGB, which is not generally useful in the .NET ecosystem.",
                                           "updatedAt":  "2025-01-02T02:45:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZBXOv",
                                           "createdAt":  "2025-01-02T04:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Namely, a Color made out of 32-bit float values in an RGBA layout.\n\nThis is covered in the existing proposal via the `Rgba\u003cT\u003e` type.\n\n\u003e I urge people to not get distracted by legacy Microsoft-specific technologies with ARGB\n\nThis is not a legacy or Microsoft specific thing, it\u0027s actually rather the standard name for the `BGRA32` format that many windowing systems default to. This has historically been the default because it was more efficient to handle data as a single 32-bit unit rather than as 4 separate 8-bit units, so you had `XRGB` and then later `ARGB`. When stored as little-endian this then means `blue` was the first byte, being the least significant unit.\n\nThis historical start to the \"layout\" is still visible in almost every system used to talk about colors today. It\u0027s used in the industry standard hex representation of colors, such as `#FF0000` being `red`, `#00FF00` being `green`, and `#0000FF` being `blue`. Placing the alpha at the most significant byte then used the otherwise \"unused\" bits without needing to otherwise reposition the data on little-endian systems (unlike `RGBA32` which shifts everything down one byte).\n\nThere are still many scenarios that require or otherwise benefit (such as perf wise) from `BGRA32` compatible formats and so it remains a key scenario to support.\n\n-- This isn\u0027t universally the default and some systems like OpenGL have historically preferred RGBA32, likewise when working with `4x float` components it is also very typical to use a `RGBA128` format, but that\u0027s still all the reason why the base proposal covers both `Rgba\u003cT\u003e` and `Argb\u003cT\u003e`",
                                           "updatedAt":  "2025-01-02T04:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZBiaf",
                                           "createdAt":  "2025-01-02T06:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaronfranke",
                                           "body":  "@tannergooding Industry-standard color hex codes are RGB(A): `#FF0000FF` is opaque red (not opaque blue).\n\nPlacing alpha at the end has the benefit of making it easier to handle cases where the alpha is optional. With an array of floats that can be 3 or 4 long, read index 0 as red, index 1 as green, index 2 as blue, and if index 3 exists, read it as alpha.\n\nBut yeah, the proposal has `Rgba\u003cT\u003e` so that\u0027s good, my argument is that it should be called `Color` and presented as the default color format to avoid confusion for people needing a color format and not knowing which is the recommended one. Ultimately I would be happy with `Rgba\u003cT\u003e` even if it\u0027s not the optimal name in my opinion.",
                                           "updatedAt":  "2025-01-02T06:19:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZCts9",
                                           "createdAt":  "2025-01-02T11:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Industry-standard color hex codes are RGB(A): #FF0000FF is opaque red (not opaque blue).\n\nI was giving a history lesson on how/why `BGRA32` (aka `B8G8R8X8`) was and continues to be a common and prevalent color format. I was not making a statement about the current interpretation of web-color codes.\n\nWhat was being stated is that prior to alpha existing, it was simply `#RRGGBB` where that was commonly interpreted directly as a `uint32` for performance and therefore produced a value `0x00RRGGBB`. Since little-endian machines were (and continue to be) prevalent and the data was typically stored in memory as a `0xBB, 0xGG, 0xRR, 0x--` where the fourth byte was unused (known as `B8G8R8X8` or `BGRX32-BE` or `XRGB32-LE`). When alpha was then introduced, the storage format then simply placed alpha in the unused space, so the actual integer was `0xAARRGGBB` (known as `B8G8R8A8` or `BGRA32-BE` or `ARGB32-LE`).\n\nThis is distinct from what the web standardized on (`#RRGGBBAA`), where it decided to go its own direction upon introducing alpha. This new direction caused a deviation where it defined a format that no longer represents the raw integer. Which is to say that `#RRGGBBAA` (such that `#00FF00FF` is opaque green) is not stored as `0xRRGGBBAA` which would be `0xAA, 0xBB, 0xGG, 0xRR`; it\u0027s rather stored as `0xRR, 0xGG, 0xBB, 0xAA` (`R8G8B8A8` or `RGBA32-BE` or `ABGR32-LE`) which would be loaded on a little-endian machine as the integer `0xAABBGGRR`. Shuffling was (and remains) an expensive step, so its avoided where possible.\n\nThis is entirely from how things work when working with bytes, not with floats, and from it being far more efficient for data to be manipulated as a single `uint32` rather than as `4x byte`. Modern computers have evolved and now have the ability to work with `4x float` efficiently regardless of layout; the same goes for `16x byte` so the distinction is less relevant for things like games where you do often see `4x elements` and no longer see it \"compressed\" into a single endian impacted load/store, but that doesn\u0027t change what the underlying window manager or native display format is for the OS (or what hardware has optimizations around), which often remains or defaults to `BGRA32` (and you can often see better frame rates and other considerations by utilizing such a format for your ultimate render target output, which is distinct from what you use at earlier pipeline stages where `R32G32B32A32` is more prevalent).\n\n\u003e But yeah, the proposal has Rgba\u003cT\u003e so that\u0027s good, my argument is that it should be called Color and presented as the default color format to avoid confusion for people needing a color format and not knowing which is the recommended one. Ultimately I would be happy with Rgba\u003cT\u003e even if it\u0027s not the optimal name in my opinion.\n\nCalling it `Color` is non starter, not only is that significantly conflicting with many other types in the scenarios that would be common for these new types to be used, but it is then also inconsistent with the other color types we want to expose because they are foundational and necessary.",
                                           "updatedAt":  "2025-01-02T11:23:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BVU-0",
                                           "createdAt":  "2025-09-02T02:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@ViveliDuCh / @jozkee - Assigning this to you to pair up on. The existing PR #106575 can be used to finish the implementation. There is outstanding feedback on that PR for moving the code into a different/existing assembly instead of introducing a new one, but the PR is otherwise in good shape.",
                                           "updatedAt":  "2025-09-02T02:29:21Z"
                                       }
                                   ],
                         "totalCount":  72
                     },
        "title":  "API Proposal: Add blittable Color to System.Numerics",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49611",
        "createdAt":  "2021-03-14T20:53:00Z",
        "number":  49611,
        "author":  "SingleAccretion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-13T16:42:04Z",
        "body":  "### Description\r\n\r\nThe gist of the issue is that some precision is apparently lost when using the explicit conversion operator `operator double(BigInteger integer)`, as compared to a direct cast from `long`. Here\u0027s a very simple reproduction:\r\n```CS\r\nusing System;\r\nusing System.Numerics;\r\n\r\nBigInteger a = long.MaxValue / 2;\r\n\r\nConsole.WriteLine($\"Source: {a}\");\r\nConsole.WriteLine($\"BigInt: {(double)a:F0}\");\r\nConsole.WriteLine($\"Long:   {(double)(long)a:F0}\");\r\n```\r\nThis will print:\r\n```\r\nSource: 4611686018427387903\r\nBigInt: 4611686018427387392\r\nLong:   4611686018427387904\r\n```\r\n\r\n### Configuration\r\n\r\nTested with the latest bits from `dotnet/installer` - `6.0.100-preview.3.21164.5` on Windows 10 x64. I do not believe this is an architecture-specific issue as all the code that does it is fully managed and uses simple arithmetic.\r\n\r\n### Regression?\r\n\r\nNot a regression - the reproduction works on `net6.0`, `net5.0` and `netcoreapp3.1`. It appears that the code responsible for the conversion hasn\u0027t been touched in a long time.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGghxQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5ODk3Nzg1Mg==",
                                           "createdAt":  "2021-03-14T20:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding, @pgovind\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe gist of the issue is that some precision is apparently lost when using the explicit conversion operator `double(BigInteger integer)`, as compared to a direct cast from `long`. Here\u0027s a very simple reproduction:\r\n```CS\r\n BigInteger a = long.MaxValue / 2;\r\n\r\n Console.WriteLine($\"Source: {a}\");\r\n Console.WriteLine($\"BigInt: {(double)a:F0}\");\r\n Console.WriteLine($\"Long:   {(double)(long)a:F0}\");\r\n```\r\nThis will print:\r\n```\r\nSource: 4611686018427387903\r\nBigInt: 4611686018427387392\r\nLong:   4611686018427387904\r\n```\r\n\r\n### Configuration\r\n\r\nTested with the latest bits from `dotnet/installer` - `6.0.100-preview.3.21164.5` on Windows 10 x64. I do not believe this is an architecture-specific issue as all the code that does it is fully managed and uses simple arithmetic.\r\n\r\n### Regression?\r\n\r\nNot a regression - the reproduction works on `net6.0`, `net5.0` and `netcoreapp3.1`. It appears that the code responsible for the conversion hasn\u0027t been touched in a long time.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSingleAccretion\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-14T20:53:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzYzMzYxNA==",
                                           "createdAt":  "2021-06-17T23:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This looks like a rounding bug. Putting into 6.0 so we can do an investigation to determine if this is a simple fix or not.",
                                           "updatedAt":  "2021-06-17T23:57:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTAwODEzNA==",
                                           "createdAt":  "2021-07-13T11:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maximys",
                                           "body":  "@tannergooding , currently I trying to fix this bug, but I have little question linked with [RunSingleExplicitCastFromBigIntegerTests](https://github.com/dotnet/runtime/blob/b1375a9c34966c563bc5ebeab9b5964682a3e939/src/libraries/System.Runtime.Numerics/tests/BigInteger/cast_from.cs#L426). Can you explain me [this](https://github.com/dotnet/runtime/blob/b1375a9c34966c563bc5ebeab9b5964682a3e939/src/libraries/System.Runtime.Numerics/tests/BigInteger/cast_from.cs#L436) lines of test:\r\n```\r\nbigInteger = new BigInteger(float.MinValue);\r\nbigInteger -= BigInteger.One;\r\nVerifySingleExplicitCastFromBigInteger(float.MinValue, bigInteger);\r\n```\r\nThis lines makes next:\r\n\r\n1. create BigInteger value by float.MinValue;\r\n2. decreasing this value;\r\n3. casting result value to float;\r\n4. checking equation of (float.MinValue - 1) and float.MinValue.\r\n\r\nIs it normall? I think, it should return false but I\u0027m not sure.\r\nI see the same problem on next [lines](https://github.com/dotnet/runtime/blob/b1375a9c34966c563bc5ebeab9b5964682a3e939/src/libraries/System.Runtime.Numerics/tests/BigInteger/cast_from.cs#L476)\r\nCan you explain me?",
                                           "updatedAt":  "2021-07-13T11:32:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTIzOTYyMQ==",
                                           "createdAt":  "2021-07-13T16:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCGN9sA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2021-12-11T23:41:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Is it normall? I think, it should return false but I\u0027m not sure.\r\n\r\nYes. IEEE 754 binary floating-point numbers are non-exact and have a sliding epsilon (delta/difference) between values. This epsilon starts at `float.Epsilon` at `0` and doubles ever power of two. So, for example, the delta between 2^22 (`4194304`) and the next largest representable value is `0.5`. That means `4194304` + any value that is less than `0.5` will result in the same value (`4194304`). This delta doubles at the next power of two (2^23, which is `8388608`) and becomes `1.0`, then again at the next (2^24, which is `16777216`) to become `2.0`, etc.\r\n\r\n`float.MaxValue` is approx. `3.4028235E+38` which means the delta between it and the next largest number is very big (approx. `2.028241E+31`) and anything smaller will result in `float.MaxValue` being returned.\r\n\r\n",
                                           "updatedAt":  "2021-07-13T16:42:04Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Conversions from BigInteger to Double are not always as precise as from Long",
        "labels":  [
                       "bug",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62714",
        "createdAt":  "2021-12-13T11:59:22Z",
        "number":  62714,
        "author":  "lcsondes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCLaQ6A==",
                          "nodes":  [
                                        {
                                            "content":  "LAUGH",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-01-25T10:54:59Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-12T21:43:48Z",
        "body":  "https://github.com/dotnet/runtime/blob/22b8d9a79ecb877769a4a4389f78b4fd22efa30c/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix3x2.cs#L542\r\n\r\nDue to the definition of `float.Epsilon` this `if` will only work for ±0.0f (possibly not even that on ARM with no denormals), but the way the code was written suggests that there\u0027s some tolerance involved.\r\n\r\nSee also https://docs.microsoft.com/en-us/dotnet/api/system.single.epsilon#remarks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk1JMhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47JusH",
                                           "createdAt":  "2021-12-13T11:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-13T11:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Ju6G",
                                           "createdAt":  "2021-12-13T12:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/blob/22b8d9a79ecb877769a4a4389f78b4fd22efa30c/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix3x2.cs#L542\r\n\r\nDue to the definition of `float.Epsilon` this `if` will only work for ±0.0f (possibly not even that on ARM with no denormals), but the way the code was written suggests that there\u0027s some tolerance involved.\r\n\r\nSee also https://docs.microsoft.com/en-us/dotnet/api/system.single.epsilon#remarks\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elcsondes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-13T12:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TUSkO",
                                           "createdAt":  "2024-11-12T20:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PranavSenthilnathan",
                                           "body":  "The check looks like it\u0027s just to make sure the determinant isn\u0027t zero. Another instance of this pattern actually has a comment:\nhttps://github.com/dotnet/runtime/blob/5d69e2dca30524a93b00cd613be218144b5f95d1/src/libraries/System.Private.CoreLib/src/System/Numerics/Matrix4x4.Impl.cs#L1276-L1277\n\n@tannergooding Is there any downside to just changing this to `if (MathF.Abs(det) == 0.0f)`?",
                                           "updatedAt":  "2024-11-12T20:59:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TUb_C",
                                           "createdAt":  "2024-11-12T21:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6kfVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PranavSenthilnathan",
                                                                               "createdAt":  "2024-11-12T21:25:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Its functionally the same as the current code, but that is itself potentially a bug/issue and likely not the \"right\" fix.\n\nWhat the code is \"meant\" to be doing is finding cases where the matrix is \"not invertible\" and while for strict math that is `determinant != 0`, it doesn\u0027t always work out the same with IEEE 754 floating-point due to the precision limitations.\n\nA \"correct\" implementation would find the appropriate cutoff and treat values below that threshold as \"not invertible\", where that threshold can sometimes differ based on the matrix. However, doing that is far too expensive for the use-cases that this type is designed for. Given the cases the type is designed for, more ideally this API would have a signature closer to what GLM, DirectX Math, HLSL, and GLSL provide which includes the result being generally undefined if the value is not inversible, such that it isn\u0027t returning a `bool` at all. \n\nHowever, since we need to work with what we have the more correct thing would be to define a general epsilon that works for most typical scenarios. A better check would be `if (float.IsSubnormal(det))` as that includes everything that is very close to zero. But a more appropriate check is likely `0.00001f`, which is the \"epsilon\" value used by many other matrix functions in the core libraries I listed above. `0.0000001f` is likely the smallest value that would be \"acceptable\" as it produces a reciprocal of `10000000` (which has a log2 of `23.2` and pushes up against the precision limitations of `float`, which has 23+1 mantissa bits).\n\n",
                                           "updatedAt":  "2024-11-12T21:20:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TUkyH",
                                           "createdAt":  "2024-11-12T21:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PranavSenthilnathan",
                                           "body":  "`Matrix4x4` can use the same change: [here](https://github.com/search?q=repo%3Adotnet%2Fruntime+%22%3C+float.epsilon%22+path%3A%2F%5Esrc%5C%2Flibraries%5C%2FSystem%5C.Private%5C.CoreLib%5C%2Fsrc%5C%2FSystem%5C%2FNumerics%5C%2F%2F\u0026type=code)",
                                           "updatedAt":  "2024-11-12T21:42:51Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Matrix3x2.Invert doesn\u0027t actually have tolerance",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62992",
        "createdAt":  "2021-12-18T21:04:44Z",
        "number":  62992,
        "author":  "CyrusNajmabadi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-15T20:32:38Z",
        "body":  "### Description\n\nWhen given two doubles `x` and `y` and the C# operation `x % y`, C# (roslyn) will push the values to the stack and emit the `REM` instruction.  [C# defines this as](https://github.com/dotnet/csharplang/blob/main/spec/expressions.md#remainder-operator):\r\n\r\n\u003e z is the result of x % y and is computed as x - n * y, where n is the largest possible integer that is less than or equal to x / y. This method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754 definition (in which n is the integer closest to x / y).\r\n\r\nAnd the [runtime is similar with](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem?redirectedfrom=MSDN\u0026view=net-6.0):\r\n\r\n\u003e result = value1 - value2 × (value1 div value2) ...\r\n\r\nTalking to @tannergooding, we may want to audit this to ensure the impl we have is either following this (and fix if not), or doc better to explain what\u0027s going on.  For example, if `x=1.0` and `y=0.1` then the instructions above allow for the following interpretation:\r\n\r\n\u003e z is the result of x % y and is computed as x - n * y\r\n\r\nso `1.0 % 0.1` is computed as `1.0 - n * 0.1` \r\n\r\n\u003e where n is the largest possible integer that is less than or equal to x / y\r\n\r\nthe largest possible integer that is less than or equal to `1.0 / 0.1` is `10.0`, which can be validated here:\r\n\r\n`Console.WriteLine(10.0 \u003c= (1.0 / 0.1))`\r\n\r\nAs such, one interpretation is `1.0 - 10.0 * 0.1` which itself is evaluated to `0.0`.  This does not match current runtime result of `0.09999999999999945`.  Which likely means the algorithm is more like:\r\n\r\n```c#\r\ny = Math.Abs(y);\r\nvar result = Math.IEEERemainder(Math.Abs(x), y);\r\nif (double.IsNegative(result))\r\n{\r\n    result += y;\r\n}\r\nreturn Math.CopySign(result, x);\r\n```\r\n\r\nWhich can also be considered fine.  However, if so, the docs should likely call this out so that the discrepancy can be better understood.\n\n### Reproduction Steps\n\nConsole.WriteLine(1.0 % 0.1)\n\n### Expected behavior\n\nLess clear.  Based strictly on the provided docs, either 0 or 0.09999999999999995.  This ambiguity isn\u0027t great though and we should beef up the docs.\n\n### Actual behavior\n\n0.09999999999999995.  If desired, we should doc more precisely.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORPA-cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47cVp5",
                                           "createdAt":  "2021-12-18T21:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen given two doubles `x` and `y` and the C# operation `x % y`, C# (roslyn) will push the values to the stack and emit the `REM` instruction.  [C# defines this as](https://github.com/dotnet/csharplang/blob/main/spec/expressions.md#remainder-operator):\r\n\r\n\u003e z is the result of x % y and is computed as x - n * y, where n is the largest possible integer that is less than or equal to x / y. This method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754 definition (in which n is the integer closest to x / y).\r\n\r\nAnd the [runtime is similar with](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem?redirectedfrom=MSDN\u0026view=net-6.0):\r\n\r\n\u003e result = value1 - value2 × (value1 div value2) ...\r\n\r\nTalking to @tannergooding, we may want to audit this to ensure the impl we have is either following this (and fix if not), or doc better to explain what\u0027s going on.  For example, if `x=1.0` and `y=0.1` then the instructions above allow for the following interpretation:\r\n\r\n\u003e z is the result of x % y and is computed as x - n * y\r\n\r\nso `1.0 % 0.1` is computed as `1.0 - n * 0.1` \r\n\r\n\u003e where n is the largest possible integer that is less than or equal to x / y\r\n\r\nthe largest possible integer that is less than or equal to `1.0 / 0.1` is `10.0`, which can be validated here:\r\n\r\n`Console.WriteLine(10.0 \u003c= (1.0 / 0.1))`\r\n\r\nAs such, one interpretation is `1.0 - 10.0 * 0.1` which itself is evaluated to `0.0`.  This does not match current runtime result of `0.09999999999999945`.  Which likely means the algorithm is more like:\r\n\r\n```c#\r\ny = Math.Abs(y);\r\nvar result = Math.IEEERemainder(Math.Abs(x), y);\r\nif (double.IsNegative(result))\r\n{\r\n    result += y;\r\n}\r\nreturn Math.CopySign(result, x);\r\n```\r\n\r\nWhich can also be considered fine.  However, if so, the docs should likely call this out so that the discrepancy can be better understood.\n\n### Reproduction Steps\n\nConsole.WriteLine(1.0 % 0.1)\n\n### Expected behavior\n\nLess clear.  Based strictly on the provided docs, either 0 or 0.09999999999999995.  This ambiguity isn\u0027t great though and we should beef up the docs.\n\n### Actual behavior\n\n0.09999999999999995.  If desired, we should doc more precisely.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCyrusNajmabadi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-18T21:04:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47cW_y",
                                           "createdAt":  "2021-12-18T21:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "While its still fresh in my head. We internally implement this as basically over `fmod`, which the C spec states is:\r\n\u003e The `fmod` functions return the value `x − ny`, for some integer `n` such that, if `y` is nonzero, the result has the same sign as `x` and magnitude less than the magnitude of `y`. If `y` is zero, whether a domain error occurs or the `fmod` functions return zero is implementation-defined.\r\n\r\nIt additionally calls out that this is functionally similar to:\r\n```csharp\r\ny = Math.Abs(y);\r\nvar result = Math.IEEERemainder(Math.Abs(x), y);\r\nif (double.IsNegative(result))\r\n{\r\n    result += y;\r\n}\r\nreturn Math.CopySign(result, x);\r\n```\r\n\r\nIf you use that algorithm for `1.0 % 0.1` you do indeed get `0.09999999999999945`.",
                                           "updatedAt":  "2021-12-18T22:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47cXM9",
                                           "createdAt":  "2021-12-18T22:02:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "*Edit:* The below analysis is potentially incorrect and is potentially an error on my part.\r\n\r\nNamely the C# spec is ambiguous as to whether the following definition implies that `floor(x / y)` is a fused operation or not:\r\n\u003e In the table, x and y are positive finite values. z is the result of x % y and is computed as x – n * y, where n is the largest possible integer that is less than or equal to x / y\r\n\r\nI\u0027ve added an additional note on this elaborating more further down.\r\n\r\n----------------- \r\n\r\nThis is ultimately a bug in our implementation since we define `x % y` to effectively be similar to:\r\n```csharp\r\nvar n = Math.Truncate(x / y);\r\nreturn x - n * y;\r\n```\r\n\r\nWe can\u0027t simply do the above algorithm as it may result in issues with regard to rounding since `x - n * y` is two operations. However, we could implement it as the following:\r\n```csharp\r\nvar n = Math.Truncate(x / y);\r\nreturn Math.FusedMultiplyAdd(-n, y, x);\r\n```\r\n\r\nOn ARM64 and x86/x64 from ~2013+ this will be effectively three instructions. For x86/x64 this is (noting we should update `Math.Truncate` to be intrinsic as part of this):\r\n```asm\r\nvdivsd xmm0, xmm1, xmm2\r\nvroundsd xmm0, xmm0, xmm0, 3\r\nvfnmadd213sd xmm0, xmm2, xmm1\r\n```\r\n\r\nFor ARM32 we don\u0027t currently accelerate `FusedMultiplyAdd`, but we could and its available wherever `AdvSimd` is supported (which is baseline for ARM64).\r\n\r\nFor older x86/x64, this would end up being a call to the CRT `fma` function; which is what `Math.FusedMultiplyAdd` falls back to. Its known to be IEEE compliant and is likely (but I haven\u0027t measured yet) not significantly slower than the current `fmod` call which results in a `fprem` loop. The non-accelerated software implementation is typically something like: https://github.com/ucb-bar/berkeley-softfloat-3/blob/master/source/s_mulAddF64.c. MSVCRT and LibC each have their own implementations, but both are known to be IEEE compliant and aren\u0027t terribly slow.",
                                           "updatedAt":  "2022-06-15T14:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47cXgf",
                                           "createdAt":  "2021-12-18T22:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is a potentially interesting corner case to consider with the `Truncate/FMA` algorithm above which is that if the result of `Math.Truncate(x / y)` is a whole integer greater than `2^53`, it may not be exactly representable (between 2^53 and 2^54 only even numbers are representable; and then every fourth number for 2^54 through 2^55, etc).\r\n\r\nIf `x % y` is meant to be treated as a \"single operation\", then technically we\u0027d need to calculate the fully-precise integer result and use that in the subsequent `x - n * y` which would be significantly more complex to do (but is detectable and could keep the normal path \"small\").\r\n",
                                           "updatedAt":  "2021-12-18T22:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47cfBS",
                                           "createdAt":  "2021-12-19T03:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e If you use that algorithm for 1.0 % 0.1 you do indeed get 0.09999999999999945.\r\n\r\nGiven that this is our behavior, shoudl we then update our docs to call this out?  It feels like that if this is what we do, we should just doc that as preserving what we do feels more important than changing things just to satisfy docs that people couldn\u0027t have fully depended on anyways.",
                                           "updatedAt":  "2021-12-19T03:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47ch9z",
                                           "createdAt":  "2021-12-19T05:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... especially since we - and probably just about every other language out there - are wrapping `fmod`...",
                                           "updatedAt":  "2021-12-19T05:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473Ju3",
                                           "createdAt":  "2022-01-03T19:41:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e .... especially since we - and probably just about every other language out there - are wrapping fmod...\r\n\r\nThere are problems with wrapping `fmod`, including that the result is non-deterministic. C# is likely going to require this be deterministic and that means rolling their own implementation of `fmod` or moving to the long time spec\u0027d implementation. Either change is going to be \"breaking\" in some fashion (either breaking the spec or implementation). The benefit of breaking the implementation, is that its already broken and non-deterministic.",
                                           "updatedAt":  "2022-01-03T19:41:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8C0r",
                                           "createdAt":  "2022-06-15T15:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@CyrusNajmabadi I\u0027ve actually gone over this a bit more and there was an issue in what I stated above.\r\n\r\nNamely the issue is that the C# spec has an ambiguity here. In particular it defines:\r\n\u003e In the table, `x` and `y` are positive finite values. `z` is the result of `x % y` and is computed as `x – n * y`, where `n` is the largest possible integer that is less than or equal to `x / y`\r\n\r\nThe ambiguity comes from how to interpret:\r\n\u003e where `n` is the largest possible integer that is less than or equal to `x / y`\r\n\r\nIn particular consider `1.0 % 0.1` again. `1.0` is exactly representable as a `double` while `0.1` is not and is in fact `0.1000000000000000055511151231257827021181583404541015625`.\r\n\r\nNow if you do this using the infinitely precise values represnted then `0.1 / 0.1000000000000000055511151231257827021181583404541015625` is `9.999999999999999444888487687421760603063276150361782076232622354...`\r\n\r\nFor `double`, the nearest representable integer to this is `10` and so `1.0 / 0.1 == 10`. Therefore if C# intends this to be:\r\n```csharp\r\nvar n = Math.Truncate(x / y);\r\nreturn x - n * y\r\n```\r\n\r\nThe correct answer is `0`. However, this potentially introduces rounding error and other issues.\r\n\r\nWhere-as if it is intended that `x % y` matches the normal IEEE 754 requirements around operations which is that `x op y` is done using the exact represented values and computed as if to infinite precision and unbounded range, then rounded to the nearest representable result; then `x % y` has to do effectively a `FloorDiv(x, y)` which would instead round the infinitely precise answer (`9.9999999999999994...`) down to `9`. `fma(9, -0.1, 1)` is then `0.0999999999999999500399638918679556809365749359130859375` as expected and as returned by `fmod`.\r\n\r\n",
                                           "updatedAt":  "2022-06-15T15:05:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8D5y",
                                           "createdAt":  "2022-06-15T15:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We should likely determine what the intent of the C# spec is here and I should finish doing the math to confirm that `fmod(x, y)` is equivalent to `fma(fdiv(x, y), -y, x)` (I believe it is).\r\n\r\nIf the intent is that `%` is equivalent to `fmod`, updating the spec wording would likely be desirable and would avoid a breaking change.",
                                           "updatedAt":  "2022-06-15T15:08:47Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Investigate audit potential/result in double remainder (REM) operation.",
        "labels":  [
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65671",
        "createdAt":  "2022-02-21T18:16:34Z",
        "number":  65671,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T23:04:29Z",
        "body":  "Found on https://github.com/dotnet/runtime/pull/65628 which runs tests in a random order.\r\n\r\nRandom test failure with v8/linux, but seems to be reliably reproducible with `XUNIT_RANDOM_ORDER_SEED=1883302047`:\r\n\r\n```\r\n[03:29:54] info: Starting:    System.Runtime.Numerics.Tests.dll\r\n[03:29:58] fail: [FAIL] System.Numerics.Tests.cast_toTest.RunDoubleExplicitCastToBigIntegerTests\r\n[03:29:58] info: Assert.Equal() Failure\r\n[03:29:58] info:           ↓ (pos 0)\r\n[03:29:58] info: Expected: -0\r\n[03:29:58] info: Actual:   0\r\n[03:29:58] info:           ↑ (pos 0)\r\n[03:29:58] info:    at System.Numerics.Tests.cast_toTest.VerifyDoubleExplicitCastToBigInteger(Double value)\r\n[03:29:58] info:    at System.Numerics.Tests.cast_toTest.RunDoubleExplicitCastToBigIntegerTests()\r\n[03:29:58] info:    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)\r\n```\r\n\r\nTo test it with that PR, make sure to `\u003cXUnitUseRandomizedTestOrderer\u003efalse\u003c/XUnitUseRandomizedTestOrderer\u003e` from the csproj.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ8__-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-afXo",
                                           "createdAt":  "2022-02-21T18:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFound on https://github.com/dotnet/runtime/pull/65628 which runs tests in a random order.\r\n\r\nRandom test failure with v8/linux, but seems to be reliably reproducible with `XUNIT_RANDOM_ORDER_SEED=1883302047`:\r\n\r\n```\r\n[03:29:54] info: Starting:    System.Runtime.Numerics.Tests.dll\r\n[03:29:58] fail: [FAIL] System.Numerics.Tests.cast_toTest.RunDoubleExplicitCastToBigIntegerTests\r\n[03:29:58] info: Assert.Equal() Failure\r\n[03:29:58] info:           ↓ (pos 0)\r\n[03:29:58] info: Expected: -0\r\n[03:29:58] info: Actual:   0\r\n[03:29:58] info:           ↑ (pos 0)\r\n[03:29:58] info:    at System.Numerics.Tests.cast_toTest.VerifyDoubleExplicitCastToBigInteger(Double value)\r\n[03:29:58] info:    at System.Numerics.Tests.cast_toTest.RunDoubleExplicitCastToBigIntegerTests()\r\n[03:29:58] info:    at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)\r\n```\r\n\r\nTo test it with that PR, make sure to `\u003cXUnitUseRandomizedTestOrderer\u003efalse\u003c/XUnitUseRandomizedTestOrderer\u003e` from the csproj.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-21T18:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DzCpJ",
                                           "createdAt":  "2022-05-25T15:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "This is still reproducible.\r\n",
                                           "updatedAt":  "2022-05-25T15:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dz__7",
                                           "createdAt":  "2022-05-25T18:40:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "This seems to be a problem with the test itself. It uses randomized values, which could lead to random failures.\r\nIn this case, this code:\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Runtime.Numerics/tests/BigInteger/cast_to.cs#L663\r\nis called with a value like -0.1, and it basically does:\r\n```\r\n        double value = -0.1;\r\n        Console.WriteLine (Math.Ceiling (value).ToString () == ((BigInteger)value).ToString ());\r\n```\r\nwhich fails because Math.Ceiling ().ToString () returns \"-0\".",
                                           "updatedAt":  "2022-05-25T18:41:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm] `System.Numerics.Tests.cast_toTest.RunDoubleExplicitCastToBigIntegerTests` fails with randomized test order",
        "labels":  [
                       "area-System.Numerics",
                       "test-bug"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67993",
        "createdAt":  "2022-04-13T21:44:55Z",
        "number":  67993,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T08:30:14Z",
        "body":  "https://github.com/dotnet/runtime/pull/67939 exposed an issue where the test `AssertBitwiseEqual(NegativeZero, ModulusOperatorsHelper\u003cHalf, Half, Half\u003e.op_Modulus(NegativeZero, PositiveTwo));` failed with \"expected -0, actual 0`.\r\n\r\nWhere:\r\n```csharp\r\nprivate static Half NegativeZero =\u003e BitConverter.UInt16BitsToHalf(0x8000);\r\nprivate static Half PositiveTwo =\u003e BitConverter.UInt16BitsToHalf(0x4000);\r\n\r\npublic static Half operator %(Half left, Half right) =\u003e (Half)((float)left % (float)right);\r\n\r\npublic static explicit operator Half(float value)\r\n{\r\n    const int SingleMaxExponent = 0xFF;\r\n\r\n    uint floatInt = BitConverter.SingleToUInt32Bits(value);\r\n    bool sign = (floatInt \u0026 float.SignMask) \u003e\u003e float.SignShift != 0;\r\n    int exp = (int)(floatInt \u0026 float.ExponentMask) \u003e\u003e float.ExponentShift;\r\n    uint sig = floatInt \u0026 float.SignificandMask;\r\n\r\n    if (exp == SingleMaxExponent)\r\n    {\r\n        if (sig != 0) // NaN\r\n        {\r\n            return CreateHalfNaN(sign, (ulong)sig \u003c\u003c 41); // Shift the significand bits to the left end\r\n        }\r\n        return sign ? NegativeInfinity : PositiveInfinity;\r\n    }\r\n\r\n    uint sigHalf = sig \u003e\u003e 9 | ((sig \u0026 0x1FFU) != 0 ? 1U : 0U); // RightShiftJam\r\n\r\n    if ((exp | (int)sigHalf) == 0)\r\n    {\r\n        return new Half(sign, 0, 0);\r\n    }\r\n\r\n    return new Half(RoundPackToHalf(sign, (short)(exp - 0x71), (ushort)(sigHalf | 0x4000)));\r\n}\r\n\r\npublic static explicit operator float(Half value)\r\n{\r\n    bool sign = IsNegative(value);\r\n    int exp = value.Exponent;\r\n    uint sig = value.Significand;\r\n\r\n    if (exp == MaxExponent)\r\n    {\r\n        if (sig != 0)\r\n        {\r\n            return CreateSingleNaN(sign, (ulong)sig \u003c\u003c 54);\r\n        }\r\n        return sign ? float.NegativeInfinity : float.PositiveInfinity;\r\n    }\r\n\r\n    if (exp == 0)\r\n    {\r\n        if (sig == 0)\r\n        {\r\n            return BitConverter.UInt32BitsToSingle(sign ? float.SignMask : 0); // Positive / Negative zero\r\n        }\r\n        (exp, sig) = NormSubnormalF16Sig(sig);\r\n        exp -= 1;\r\n    }\r\n\r\n    return CreateSingle(sign, (byte)(exp + 0x70), sig \u003c\u003c 13);\r\n}\r\n```\r\n\r\nGiven this logic, the result should be `-0` and is negative zero on most of the CI legs. However `runtime (Libraries Test Run release coreclr windows x64 Debug) ` in particular failed citing the actual result was `0`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQb06XA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Begpw",
                                           "createdAt":  "2022-04-13T21:45:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/67939 exposed an issue where the test `AssertBitwiseEqual(NegativeZero, ModulusOperatorsHelper\u003cHalf, Half, Half\u003e.op_Modulus(NegativeZero, PositiveTwo));` failed with \"expected -0, actual 0`.\r\n\r\nWhere:\r\n```csharp\r\nprivate static Half NegativeZero =\u003e BitConverter.UInt16BitsToHalf(0x8000);\r\nprivate static Half PositiveTwo =\u003e BitConverter.UInt16BitsToHalf(0x4000);\r\n\r\npublic static Half operator %(Half left, Half right) =\u003e (Half)((float)left % (float)right);\r\n\r\npublic static explicit operator Half(float value)\r\n{\r\n    const int SingleMaxExponent = 0xFF;\r\n\r\n    uint floatInt = BitConverter.SingleToUInt32Bits(value);\r\n    bool sign = (floatInt \u0026 float.SignMask) \u003e\u003e float.SignShift != 0;\r\n    int exp = (int)(floatInt \u0026 float.ExponentMask) \u003e\u003e float.ExponentShift;\r\n    uint sig = floatInt \u0026 float.SignificandMask;\r\n\r\n    if (exp == SingleMaxExponent)\r\n    {\r\n        if (sig != 0) // NaN\r\n        {\r\n            return CreateHalfNaN(sign, (ulong)sig \u003c\u003c 41); // Shift the significand bits to the left end\r\n        }\r\n        return sign ? NegativeInfinity : PositiveInfinity;\r\n    }\r\n\r\n    uint sigHalf = sig \u003e\u003e 9 | ((sig \u0026 0x1FFU) != 0 ? 1U : 0U); // RightShiftJam\r\n\r\n    if ((exp | (int)sigHalf) == 0)\r\n    {\r\n        return new Half(sign, 0, 0);\r\n    }\r\n\r\n    return new Half(RoundPackToHalf(sign, (short)(exp - 0x71), (ushort)(sigHalf | 0x4000)));\r\n}\r\n\r\npublic static explicit operator float(Half value)\r\n{\r\n    bool sign = IsNegative(value);\r\n    int exp = value.Exponent;\r\n    uint sig = value.Significand;\r\n\r\n    if (exp == MaxExponent)\r\n    {\r\n        if (sig != 0)\r\n        {\r\n            return CreateSingleNaN(sign, (ulong)sig \u003c\u003c 54);\r\n        }\r\n        return sign ? float.NegativeInfinity : float.PositiveInfinity;\r\n    }\r\n\r\n    if (exp == 0)\r\n    {\r\n        if (sig == 0)\r\n        {\r\n            return BitConverter.UInt32BitsToSingle(sign ? float.SignMask : 0); // Positive / Negative zero\r\n        }\r\n        (exp, sig) = NormSubnormalF16Sig(sig);\r\n        exp -= 1;\r\n    }\r\n\r\n    return CreateSingle(sign, (byte)(exp + 0x70), sig \u003c\u003c 13);\r\n}\r\n```\r\n\r\nGiven this logic, the result should be `-0` and is negative zero on most of the CI legs. However `runtime (Libraries Test Run release coreclr windows x64 Debug) ` in particular failed citing the actual result was `0`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-13T21:45:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BvTpc",
                                           "createdAt":  "2022-04-19T17:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is a similar failure in https://github.com/dotnet/runtime/pull/68217 for Min/MaxNumber functions",
                                           "updatedAt":  "2022-04-19T17:44:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`Half.operator %` seems to randomly fail on some configuration",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70460",
        "createdAt":  "2022-06-08T22:58:29Z",
        "number":  70460,
        "author":  "fryguy1013",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxHAag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jwosty",
                                            "createdAt":  "2023-07-05T03:57:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-14T18:05:57Z",
        "body":  "### Description\n\nWhen using a string format with two section separators and a negative zeroish number when accounting for the limited number of decimal points, there is an additional negative sign added to the output string when there shouldn\u0027t be.\n\n### Reproduction Steps\n\n`Console.WriteLine((-0.001).ToString(\"+0.00;-0.00\"));` , \n\n### Expected behavior\n\nOutputs `+0.00` on .NET Framework 4.7.2 (`-0.00` seems valid as well)\r\n\n\n### Actual behavior\n\noutputs `-+0.00` on dotnet6\n\n### Regression?\n\nThis worked in .NET Framework 4.7.2. \n\n### Known Workarounds\n\nThe two-section \"+0.00;-0.00\" can be replaced by the three-section \"+0.00;-0.00;+0.00\" and seems to work correctly\n\n### Configuration\n\nI\u0027ve reproduced this in both my local visual studio and dotnetfiddle.net on dotnet 6.\n\n### Other information\n\nThis seems related to the bug https://github.com/dotnet/runtime/issues/32237 which was an \"Closed As Design\" due to https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/, but this issue seems like an actual regression since the string format is explicitly calling out how to format positive and negative numbers",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAGoZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EkybW",
                                           "createdAt":  "2022-06-08T22:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen using a string format with two section separators and a negative zeroish number when accounting for the limited number of decimal points, there is an additional negative sign added to the output string when there shouldn\u0027t be.\n\n### Reproduction Steps\n\n`Console.WriteLine((-0.001).ToString(\"+0.00;-0.00\"));` , \n\n### Expected behavior\n\nOutputs `+0.00` on .NET Framework 4.7.2 (`-0.00` seems valid as well)\r\n\n\n### Actual behavior\n\noutputs `-+0.00` on dotnet6\n\n### Regression?\n\nThis worked in .NET Framework 4.7.2. \n\n### Known Workarounds\n\nThe two-section \"+0.00;-0.00\" can be replaced by the three-section \"+0.00;-0.00;+0.00\" and seems to work correctly\n\n### Configuration\n\nI\u0027ve reproduced this in both my local visual studio and dotnetfiddle.net on dotnet 6.\n\n### Other information\n\nThis seems related to the bug https://github.com/dotnet/runtime/issues/32237 which was an \"Closed As Design\" due to https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/, but this issue seems like an actual regression since the string format is explicitly calling out how to format positive and negative numbers\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efryguy1013\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T22:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EnbP-",
                                           "createdAt":  "2022-06-09T14:23:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This was \"+0.00\" in .NET Core 2.1 and changed to \"-+0.00\" in .NET Core 3.1",
                                           "updatedAt":  "2022-06-09T14:23:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EniOF",
                                           "createdAt":  "2022-06-09T14:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027m guessing there is a conflict between the input value and the rounded value. Will take a look.",
                                           "updatedAt":  "2022-06-09T14:45:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gno_k",
                                           "createdAt":  "2023-07-05T04:29:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jwosty",
                                           "body":  "Depending on your use case, it\u0027s possible to work around it using all three section separators, but you lose the ability to print negative and positive zero differently.\r\n\r\nFor example:\r\n\r\n```csharp\r\n(-0.0).ToString(\"+0.0;-0.0;0.0\")\r\n```\r\n\r\nand\r\n\r\n```csharp\r\n(-0.0000001).ToString(\"+0.0;-0.0;0.0\")\r\n```\r\n\r\nboth display `0.0`.",
                                           "updatedAt":  "2023-07-05T04:29:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gnrYm",
                                           "createdAt":  "2023-07-05T04:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fryguy1013",
                                           "body":  "The workaround we\u0027re using to preserve the behavior is in the issue. Your idea will display \"0.0\" instead of \"+0.0\" (or \"-0.0\") which isn\u0027t the right size since the protocol requires a sign bit in that position of the string.",
                                           "updatedAt":  "2023-07-05T04:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gq4at",
                                           "createdAt":  "2023-07-05T14:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jwosty",
                                           "body":  "\u003e The workaround we\u0027re using to preserve the behavior is in the issue. Your idea will display \"0.0\" instead of \"+0.0\" (or \"-0.0\") which isn\u0027t the right size since the protocol requires a sign bit in that position of the string.\r\n\r\nAh, I see I didn\u0027t read that properly (it was late at night :) ). You\u0027re right, that is the better workaround. Any of these workaround using the third section still have the problem of not preserving the difference between -0.0 and +0.0 though -- therefore there is no real workaround if you really need that behavior (other than writing your own formatting code). A true fix would be great.",
                                           "updatedAt":  "2023-07-05T14:16:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAahk",
                                           "createdAt":  "2023-08-14T18:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is effectively a do anytime issue. The bug is small and shouldn\u0027t be overly difficult to fix. For the most part `-0.0` needs to be treated as negative and distinct from `+0.0` for the purposes of formatting.",
                                           "updatedAt":  "2023-08-14T18:05:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Double.ToString with two section separators and negative zero placing additional negative sign in output",
        "labels":  [
                       "bug",
                       "area-System.Numerics",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72125",
        "createdAt":  "2022-07-13T20:53:03Z",
        "number":  72125,
        "author":  "dakersnar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T19:08:40Z",
        "body":  "### Description\r\n\r\nThe current algorithm for casting a decimal to a double loses precision.\r\n\r\n### Reproduction Steps\r\n[Example](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmABgFgAoUgRmuoBMIdgAbGAAmdY4DUAhmxxcAvJ1pkp0mdIB0ZAJyKkSgMwB2AKwBuakVqKAFACIAoggAOMMBhiNOAJRgBnHGywmAlHpqGjPOwwgsIwcgAqEADKGFAAlngA5qYA4srePpwA9FkSsvlSCsqqippaDFSMNnEAtkLc1XVsISKc4pIFskUq6to1voEcnLAubZycASxBXlVgtUItML4GxiYAwgIudg4AIlNDAGJQEDWcADJxdlD1O41CIN46nPr+IxHRsQnJJmmKGU85PKdGRFDRILRIEjlKgVWbzNgNOZNRYABQEUBc9jGcKacjRGJgk14wSEIneMXiSVS6S8aE4BjkKTYEGAQjiAC8BBg4hA8HIAHI4GrAGBQGIATw4LjkB2ZXJ8TH2XBGJDGE0GMBmd2apJg+MxjGW/nWm22nD2xM4RxOnH1WNuSPuj2efmMKvJnypPxpmUBHWBhSUYIhUIqYZhEeoQA==)\r\n```\r\ndouble doubleValue = 10000000000000.099609375;\r\nConsole.WriteLine(\"Expected Result:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\")); // 10000000000000.099609375\r\n\r\ndecimal decimalValue = 10000000000000.099609375m;\r\ndouble res =  (double)decimalValue;\r\nConsole.WriteLine(\"Casted Double From Literal Decimal:\"); \r\nConsole.WriteLine(res.ToString(\"G99\")); // 10000000000000.09765625\r\n\r\nstring strDouble = doubleValue.ToString(\"G99\");\r\ndecimal decimalValueParsed = decimal.Parse(strDouble, System.Globalization.NumberStyles.Float);\r\ndouble res2 =  (double)decimalValueParsed;\r\nConsole.WriteLine(\"Casted Double From Parsed Decimal:\"); \r\nConsole.WriteLine(res2.ToString(\"G99\")); // 10000000000000.09765625\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe above three prints should print the same value.\r\n\r\n### Actual behavior\r\n\r\nThere is a precision loss when casting from decimal to double. I included two methods of constructing the decimal to demonstrate that the behavior is specifically tied to the decimal -\u003e double conversion, and not the construction of the decimal.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORp6flQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GjVUt",
                                           "createdAt":  "2022-07-13T20:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe current algorithm for casting a decimal to a double loses precision.\n\n### Reproduction Steps\n\n```\r\n// Start with a double\r\ndouble doubleValue = 10000000000000.099609375;\r\nConsole.WriteLine(\"Expected Result:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\")); // 10000000000000.099609375\r\n\r\n// Start with a double\r\ndecimal decimalValue = 10000000000000.099609375m;\r\ndouble res =  (double)decimalValue;\r\nConsole.WriteLine(\"Casted Double From Literal Decimal:\"); \r\nConsole.WriteLine(res.ToString(\"G99\")); // 10000000000000.09765625\r\n\r\nstring strDouble = doubleValue.ToString(\"G99\");\r\ndecimal decimalValueParsed = decimal.Parse(strDouble, System.Globalization.NumberStyles.Float);\r\ndouble res2 =  (double)decimalValueParsed;\r\nConsole.WriteLine(\"Casted Double From Parsed Decimal:\"); \r\nConsole.WriteLine(res2.ToString(\"G99\")); // 10000000000000.09765625\r\n\r\n```\n\n### Expected behavior\n\nThe above three prints should print the same value.\n\n### Actual behavior\n\nThere is a precision loss when casting from decimal to double. I included two methods of constructing the decimal to demonstrate that the behavior is specifically tied to the decimal -\u003e double conversion, and not the construction of the decimal.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edakersnar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-13T20:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GkhSv",
                                           "createdAt":  "2022-07-14T04:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "At present we mimic behavior of `VarR8FromDec`: https://github.com/dotnet/runtime/blob/7f9ed8f271df8fb83862b3812d9c490e4ff74711/src/libraries/System.Private.CoreLib/src/System/Decimal.DecCalc.cs#L1870-L1882",
                                           "updatedAt":  "2022-07-14T04:39:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gm8Nx",
                                           "createdAt":  "2022-07-14T15:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Yes, I believe that\u0027s the actual conversion code. @tannergooding and I were brainstorming some ways to improve its precision. We think a method in which we split the decimal into a fractional and integral part using Truncate, translate each mantissa to a double, process the fractional part, and then combine the two parts could be the correct solution.",
                                           "updatedAt":  "2022-07-14T15:54:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gnp-V",
                                           "createdAt":  "2022-07-14T19:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Right. `double` has `52` (well 53) bits of significand precision. It can exactly represent whole integers up to this value. It can correctly represent any integral up to 2^53 before it starts losing precision.\r\n\r\nFor values above 2^53, we already have a valid (and efficient) `Int128-\u003eDouble` conversion. For values between `2^52` and `2^53` we may need to consider the fractional part for rounding.\r\n\r\nSince we have 96-bits of significand precision in `decimal`, since we can exactly represent powers of `10` up to `10^22`, since any `double` can be split into exact `integral` and `fractional` parts, and since any \"single\" operation is done \"as if to infinite precision and unbounded range and then rounded to the nearest representable result\"; we should be able to compute the separate parts and combine them (which is similar to how `Int128-\u003eDouble` works) just now with a fractional part.\r\n\r\nThere are other ways to do this as well and the \"correct\" (but slow) way is `double.Parse(decimalValue.ToString(\"G30\"))`, but this should be fast and correct.",
                                           "updatedAt":  "2022-07-14T19:08:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Decimal to double conversion loses precision",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72135",
        "createdAt":  "2022-07-13T21:45:28Z",
        "number":  72135,
        "author":  "dakersnar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-hr-A==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "aepot",
                                            "createdAt":  "2024-02-08T09:22:50Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Dinand01",
                                            "createdAt":  "2024-11-01T08:52:05Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "gao-artur",
                                            "createdAt":  "2025-01-28T09:23:58Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-10-06T23:02:40Z",
        "body":  "I\u0027m making a separate issue to discuss what was discovered [here](https://github.com/dotnet/runtime/issues/68042#issuecomment-1100258233) in more detail.\r\n\r\n## Summary\r\nThe current double to decimal conversion code relies on some false assumptions. Namely, it assumes a double can only represent 15 base-10 digits of precision, which is incorrect. This leads to quite a number of inaccuracies when converting. I\u0027ve included some examples below. I also included the result of constructing the decimal via string parsing to show that it is entirely possible for a decimal to precisely represent each value.\r\n\r\n# Reproduction\r\n```\r\ndouble doubleValue = [INSERT VALUE HERE];\r\nConsole.WriteLine(\"Expected Result:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\"));\r\n\r\ndecimal decimalValue = (decimal)doubleValue;\r\nConsole.WriteLine(\"Constructing Decimal Via Casting:\"); \r\nConsole.WriteLine(decimalValue.ToString(\"G99\"));\r\n\r\n\r\ndecimal decimalValueParsed = decimal.Parse(doubleValue.ToString(\"G99\"), System.Globalization.NumberStyles.Float);\r\nConsole.WriteLine(\"Constructing Decimal Via Parsing:\"); \r\nConsole.WriteLine(decimalValueParsed.ToString(\"G99\"));\r\n```\r\nOutputs:\r\n| Expected Result | Constructing Decimal Via Casting |  Constructing Decimal Via Parsing | \r\n| ----------- | ----------- |  ----------- |\r\n| 10000000000000.099609375      | 10000000000000.1 |  10000000000000.099609375 |\r\n| 79228162514264328797450928128 | 79228162514264300000000000000 | 79228162514264328797450928128 |\r\n| 1.229999999999999982236431605997495353221893310546875 | 1.23 | 1.229999999999999982236431606 |\r\n\r\n# Fix\r\nI have a PR coming up soon with a fix to this. At a high level, we can take advantage of sections of our existing double to string conversion algorithms, which are performing that base-2 to base-10 conversion at much better precision.\r\n\r\n# Impact\r\nThis issue has been around forever (as far as I can tell), so it is hard to say how high of a priority this fix is. I did run into this very bug while using the [PowerToys calculator](https://github.com/microsoft/PowerToys/issues/18574), which makes me believe this fix has high priority. Not being able to trust the output of your calculator because the framework it is built on has conversion bugs is concerning.\r\n\r\nHowever, because this behavior has existed for so long, it is important to recognize that users might have incorrect expectations that we will be breaking with this fix. For example, a test case I found was assuming the double literal `1.23` could be represented exactly and casting it to decimal only validated their false assumption. With the fix applied, the more precise decimal we now get is not what they were expecting.\r\n\r\n```\r\nusing System;\r\n\r\ndouble doubleValue = 1.23;\r\nConsole.WriteLine(\"Actually stored as:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\")); // 1.229999999999999982236431605997495353221893310546875\r\n\r\ndecimal decimalValue = (decimal)doubleValue;\r\n\r\nvar builder = new System.Text.StringBuilder(\"Hello\");\r\nbuilder.Append(decimalValue);\r\nConsole.WriteLine(builder.ToString()); \r\n// This currently (incorrectly) prints \"Hello1.23\"\r\n// With the fix it prints \"Hello1.22299999999999999822364316059\"\r\n// User should have used decimal literal 1.23m\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORo343Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Gjfjd",
                                           "createdAt":  "2022-07-13T21:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m making a separate issue to discuss what was discovered [here](https://github.com/dotnet/runtime/issues/68042#issuecomment-1100258233) in more detail.\r\n\r\n## Summary\r\nThe current double to decimal conversion code relies on some false assumptions. Namely, it assumes a double can only represent 15 base-10 digits of precision, which is incorrect. This leads to quite a number of inaccuracies when converting. I\u0027ve included some examples below. I also included the result of constructing the decimal via string parsing to show that it is entirely possible for a decimal to precisely represent each value.\r\n\r\n# Reproduction\r\n```\r\ndouble doubleValue = [INSERT VALUE HERE];\r\nConsole.WriteLine(\"Expected Result:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\"));\r\n\r\ndecimal decimalValue = (decimal)doubleValue;\r\nConsole.WriteLine(\"Constructing Decimal Via Casting:\"); \r\nConsole.WriteLine(decimalValue.ToString(\"G99\"));\r\n\r\n\r\ndecimal decimalValueParsed = decimal.Parse(doubleValue.ToString(\"G99\"), System.Globalization.NumberStyles.Float);\r\nConsole.WriteLine(\"Constructing Decimal Via Parsing:\"); \r\nConsole.WriteLine(decimalValueParsed.ToString(\"G99\"));\r\n```\r\nOutputs:\r\n| Expected Result | Constructing Decimal Via Casting |  Constructing Decimal Via Parsing | \r\n| ----------- | ----------- |  ----------- |\r\n| 10000000000000.099609375      | 10000000000000.1 |  10000000000000.099609375 |\r\n| 79228162514264328797450928128 | 79228162514264300000000000000 | 79228162514264328797450928128 |\r\n| 1.229999999999999982236431605997495353221893310546875 | 1.23 | 1.229999999999999982236431606 |\r\n\r\n# Fix\r\nI have a PR coming up soon with a fix to this. At a high level, we can take advantage of sections of our existing double to string conversion algorithms, which are performing that base-2 to base-10 conversion at much better precision.\r\n\r\n# Impact\r\nThis issue has been around for as long as I can tell, so it is hard to say how high of a priority this fix is. I did run into this very bug while using the [PowerToys calculator](https://github.com/microsoft/PowerToys/issues/18574), which makes me believe this fix has high priority. Not being able to trust the output of your calculator because the framework it is built on has conversion bugs is concerning.\r\n\r\nHowever, because this behavior has existed for so long, it is important to recognize that users might have incorrect expectations that we will be breaking with this fix. For example, a test case I found was assuming the double literal `1.23` could be represented exactly and casting it to decimal only validated their false assumption. With the fix applied, the more precise decimal we now get is not what they were expecting.\r\n\r\n```\r\nusing System;\r\n\r\ndouble doubleValue = 1.23;\r\nConsole.WriteLine(\"Actually stored as:\");\r\nConsole.WriteLine(doubleValue.ToString(\"G99\")); // 1.229999999999999982236431605997495353221893310546875\r\n\r\ndecimal decimalValue = (decimal)doubleValue;\r\n\r\nvar builder = new System.Text.StringBuilder(\"Hello\");\r\nbuilder.Append(decimalValue);\r\nConsole.WriteLine(builder.ToString()); \r\n// This currently (incorrectly) prints \"Hello1.23\"\r\n// With the fix it prints \"Hello1.22299999999999999822364316059\"\r\n// User should have used decimal literal 1.23m\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edakersnar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-13T21:45:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Double to decimal conversion loses precision",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73150",
        "createdAt":  "2022-08-01T12:39:31Z",
        "number":  73150,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-30T14:14:27Z",
        "body":  "During the `System.Formats.Cbor` test run, [CborDocument_Roundtrip](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Formats.Cbor/tests/PropertyTests/CborPropertyTests.cs#L187) crashes when comparing two `BigInteger` types.\r\n\r\n```\r\n[22:22:52.0766040] =================================================================\r\n[22:22:52.0766090] \tManaged Stacktrace:\r\n[22:22:52.0766150] =================================================================\r\n[22:22:52.0766210] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00050\u003e\r\n[22:22:52.0766260] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00073\u003e\r\n[22:22:52.0766320] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00217\u003e\r\n[22:22:52.0766420] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00047\u003e\r\n[22:22:52.0766480] \t  at Xunit.Sdk.AssertEqualityComparerAdapter`1:Equals \u003c0x000af\u003e\r\n[22:22:52.0766540] \t  at Xunit.Sdk.AssertEqualityComparer`1:CheckIfEnumerablesAreEqual \u003c0x00207\u003e\r\n[22:22:52.0766640] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00323\u003e\r\n[22:22:52.0766690] \t  at Xunit.Assert:Equal \u003c0x0012f\u003e\r\n[22:22:52.0766750] \t  at Xunit.Assert:Equal \u003c0x00077\u003e\r\n[22:22:52.0766810] \t  at System.Formats.Cbor.Tests.CborPropertyTests:CborDocument_Roundtrip \u003c0x00063\u003e\r\n``` \r\n\r\nThe test will be skipped for now.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYljJlw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HmBLf",
                                           "createdAt":  "2022-08-01T12:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-01T12:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HmBOl",
                                           "createdAt":  "2022-08-01T12:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDuring the `System.Formats.Cbor` test run, [CborDocument_Roundtrip](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Formats.Cbor/tests/PropertyTests/CborPropertyTests.cs#L187) crashes when comparing two `BigInteger` types.\r\n\r\n```\r\n[22:22:52.0766040] =================================================================\r\n[22:22:52.0766090] \tManaged Stacktrace:\r\n[22:22:52.0766150] =================================================================\r\n[22:22:52.0766210] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00050\u003e\r\n[22:22:52.0766260] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00073\u003e\r\n[22:22:52.0766320] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00217\u003e\r\n[22:22:52.0766420] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00047\u003e\r\n[22:22:52.0766480] \t  at Xunit.Sdk.AssertEqualityComparerAdapter`1:Equals \u003c0x000af\u003e\r\n[22:22:52.0766540] \t  at Xunit.Sdk.AssertEqualityComparer`1:CheckIfEnumerablesAreEqual \u003c0x00207\u003e\r\n[22:22:52.0766640] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00323\u003e\r\n[22:22:52.0766690] \t  at Xunit.Assert:Equal \u003c0x0012f\u003e\r\n[22:22:52.0766750] \t  at Xunit.Assert:Equal \u003c0x00077\u003e\r\n[22:22:52.0766810] \t  at System.Formats.Cbor.Tests.CborPropertyTests:CborDocument_Roundtrip \u003c0x00063\u003e\r\n``` \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-01T12:39:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HmBW8",
                                           "createdAt":  "2022-08-01T12:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-formats-cbor, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDuring the `System.Formats.Cbor` test run, [CborDocument_Roundtrip](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Formats.Cbor/tests/PropertyTests/CborPropertyTests.cs#L187) crashes when comparing two `BigInteger` types.\r\n\r\n```\r\n[22:22:52.0766040] =================================================================\r\n[22:22:52.0766090] \tManaged Stacktrace:\r\n[22:22:52.0766150] =================================================================\r\n[22:22:52.0766210] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00050\u003e\r\n[22:22:52.0766260] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00073\u003e\r\n[22:22:52.0766320] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00217\u003e\r\n[22:22:52.0766420] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00047\u003e\r\n[22:22:52.0766480] \t  at Xunit.Sdk.AssertEqualityComparerAdapter`1:Equals \u003c0x000af\u003e\r\n[22:22:52.0766540] \t  at Xunit.Sdk.AssertEqualityComparer`1:CheckIfEnumerablesAreEqual \u003c0x00207\u003e\r\n[22:22:52.0766640] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00323\u003e\r\n[22:22:52.0766690] \t  at Xunit.Assert:Equal \u003c0x0012f\u003e\r\n[22:22:52.0766750] \t  at Xunit.Assert:Equal \u003c0x00077\u003e\r\n[22:22:52.0766810] \t  at System.Formats.Cbor.Tests.CborPropertyTests:CborDocument_Roundtrip \u003c0x00063\u003e\r\n``` \r\n\r\nThe test will be skipped for now.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-ios`, `area-System.Formats.Cbor`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-01T12:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hm-w_",
                                           "createdAt":  "2022-08-01T16:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "While this is potentially affecting a disabled test for CBOR, the real issue seems to be a crash in BigInteger, so transferring to numerics.",
                                           "updatedAt":  "2022-08-01T16:05:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hm-73",
                                           "createdAt":  "2022-08-01T16:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDuring the `System.Formats.Cbor` test run, [CborDocument_Roundtrip](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Formats.Cbor/tests/PropertyTests/CborPropertyTests.cs#L187) crashes when comparing two `BigInteger` types.\r\n\r\n```\r\n[22:22:52.0766040] =================================================================\r\n[22:22:52.0766090] \tManaged Stacktrace:\r\n[22:22:52.0766150] =================================================================\r\n[22:22:52.0766210] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00050\u003e\r\n[22:22:52.0766260] \t  at System.Numerics.BigInteger:CompareTo \u003c0x00073\u003e\r\n[22:22:52.0766320] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00217\u003e\r\n[22:22:52.0766420] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00047\u003e\r\n[22:22:52.0766480] \t  at Xunit.Sdk.AssertEqualityComparerAdapter`1:Equals \u003c0x000af\u003e\r\n[22:22:52.0766540] \t  at Xunit.Sdk.AssertEqualityComparer`1:CheckIfEnumerablesAreEqual \u003c0x00207\u003e\r\n[22:22:52.0766640] \t  at Xunit.Sdk.AssertEqualityComparer`1:Equals \u003c0x00323\u003e\r\n[22:22:52.0766690] \t  at Xunit.Assert:Equal \u003c0x0012f\u003e\r\n[22:22:52.0766750] \t  at Xunit.Assert:Equal \u003c0x00077\u003e\r\n[22:22:52.0766810] \t  at System.Formats.Cbor.Tests.CborPropertyTests:CborDocument_Roundtrip \u003c0x00063\u003e\r\n``` \r\n\r\nThe test will be skipped for now.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-01T16:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hcrm_",
                                           "createdAt":  "2023-07-13T20:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@SamMonoRT do you think someone on your team can look into this?  ",
                                           "updatedAt":  "2023-07-13T20:57:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hgnp7",
                                           "createdAt":  "2023-07-14T14:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@dakersnar - do we know what are the final plans for https://github.com/dotnet/runtime/issues/79004 - trying to determine if we should try to investigate this iOS specific issue for 8.0 timeline\r\n",
                                           "updatedAt":  "2023-07-14T14:46:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHcyB",
                                           "createdAt":  "2023-07-21T18:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBky6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveisok",
                                                                               "createdAt":  "2023-07-21T19:10:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "kotlarmilos",
                                                                               "createdAt":  "2023-07-24T09:11:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@kotlarmilos - take a brief look as you enable the iOS lanes. Moving this to 9.0 due to lack of clarity above.",
                                           "updatedAt":  "2023-07-21T18:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iWMmX",
                                           "createdAt":  "2023-07-25T14:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "Didn\u0027t manage to reproduce the failure locally. However, the test fails on the CI. Further investigation is needed, thus moving this to Future.",
                                           "updatedAt":  "2024-07-30T14:14:27Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[iOS] BigInteger CompareTo crash in CborDocument_Roundtrip test",
        "labels":  [
                       "bug",
                       "area-System.Numerics",
                       "disabled-test",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74148",
        "createdAt":  "2022-08-18T13:26:53Z",
        "number":  74148,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-28T06:21:00Z",
        "body":  "See discussion in https://github.com/dotnet/runtime/pull/74025#issuecomment-1217129862.  The question is whether the new generic math interfaces being introduced in .NET 7 should express co/contravariance (in and out on the various generic type parameters), e.g. https://github.com/dotnet/runtime/commit/197d96f92887c0032c5d19dff47d377cf63672f4.  It\u0027s not clear if there are meaningful scenarios for it or if adding them now could conflict with future language work, but it could also be a breaking change to add them later.\r\n\r\nSeems likely we should just leave them as-is, but we should make an explicit decision.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObeLgiQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ir_na",
                                           "createdAt":  "2022-08-18T13:27:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee discussion in https://github.com/dotnet/runtime/pull/74025#issuecomment-1217129862.  The question is whether the new generic math interfaces being introduced in .NET 7 should express co/contravariance (in and out on the various generic type parameters), e.g. https://github.com/dotnet/runtime/commit/197d96f92887c0032c5d19dff47d377cf63672f4.  It\u0027s not clear if there are meaningful scenarios for it or if adding them now could conflict with future language work, but it could also be a breaking change to add them later.\r\n\r\nSeems likely we should just leave them as-is, but we should make an explicit decision.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-18T13:27:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IsYFX",
                                           "createdAt":  "2022-08-18T14:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "I don\u0027t see any use case against co/contravariance on generic math. Generally we are using generic math against structs. And even if we support it, currently we have no way to call a static interface member on interface type directly without a type parameter.",
                                           "updatedAt":  "2022-08-18T14:53:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_K77",
                                           "createdAt":  "2022-09-08T22:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@tannergooding (and @dotnet/area-system-numerics), have you reached a conclusion on this? If we decide to add the expressions, we would need to do so before the RC2 snap.",
                                           "updatedAt":  "2022-09-08T22:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJRQc",
                                           "createdAt":  "2022-09-12T15:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsE4Qw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-09-12T17:09:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "@tannergooding and I discussed this on Friday and have decided we are not going to include this feature. He plans on sending a longer explanation here but for now we can remove the blocking-release tag.",
                                           "updatedAt":  "2022-09-12T15:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KfFqE",
                                           "createdAt":  "2022-09-16T18:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsdOIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-09-19T15:14:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I want to keep this in the 7.0.0 milestone, but labeled as documentation. We need to have notes about variance in the docs and/or here so that folks who ask about this again can understand why we chose not to express it.",
                                           "updatedAt":  "2022-09-16T18:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t2-aW",
                                           "createdAt":  "2023-12-06T15:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@jeffhandley should this still be kept in the 7.0.0 milestone?",
                                           "updatedAt":  "2023-12-06T15:35:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t4uCJ",
                                           "createdAt":  "2023-12-06T19:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODO1NGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2023-12-07T13:20:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Oops; nope. Thanks; updated.",
                                           "updatedAt":  "2023-12-06T19:48:14Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Determine whether generic math interfaces need to express variance",
        "labels":  [
                       "documentation",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75431",
        "createdAt":  "2022-09-12T02:18:23Z",
        "number":  75431,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJxWDg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2022-09-12T02:20:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-09-12T02:54:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2022-09-12T02:56:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2022-09-12T04:53:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-09-12T07:09:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevingosse",
                                            "createdAt":  "2022-09-12T07:39:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2022-09-12T09:14:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2022-09-12T13:33:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liveans",
                                            "createdAt":  "2022-09-12T13:49:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kyoyama-kazusa",
                                            "createdAt":  "2022-09-12T16:32:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-09-12T17:56:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-09-12T22:39:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2022-09-13T07:56:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giladfrid009",
                                            "createdAt":  "2022-09-13T09:45:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2022-09-15T22:22:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-10-28T07:36:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-11-30T06:41:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-11-30T06:41:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uvsxx",
                                            "createdAt":  "2022-12-11T11:04:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-01-18T19:44:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "koszeggy",
                                            "createdAt":  "2023-02-02T16:38:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2023-03-19T14:11:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neme12",
                                            "createdAt":  "2023-08-26T13:03:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Epicguru",
                                            "createdAt":  "2023-09-18T18:21:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inurias",
                                            "createdAt":  "2024-07-16T14:18:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2025-04-02T13:45:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Exact-RolfvanKuijen",
                                            "createdAt":  "2025-07-03T12:03:26Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Exact-RolfvanKuijen",
                                            "createdAt":  "2025-07-03T12:03:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hrrrrustic",
                                            "createdAt":  "2025-08-04T16:03:28Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2024-05-06T02:30:40Z",
        "body":  "### Background and motivation\n\nNow that we have the generic math interfaces, we should be able to write a method for generating a random value that can work with any T where T implements the appropriate interface.\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic class Random\r\n{\r\n    public T Next\u003cT\u003e() where T : INumber\u003cT\u003e;\r\n    public T Next\u003cT\u003e(T maxValue) where T : INumber\u003cT\u003e;\r\n    public T Next\u003cT\u003e(T minValue, T maxValue) where T : INumber\u003cT\u003e;\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nRandom r = new Random();\r\nInt128 value = r.Next\u003cInt128\u003e();\r\n```\r\n\n\n### Alternative Designs\n\n- We might need two sets of methods, one for integral values and one for floating-point values.  In that case, `INumber\u003cT\u003e` isn\u0027t the right interface; each set will use its own that appropriate.\r\n- The range used for NextDouble is 0.0 to 1.0; for a floating-point API, we\u0027d presumably want to map to the same range?\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZQAqHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KGMSo",
                                           "createdAt":  "2022-09-12T02:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nNow that we have the generic math interfaces, we should be able to write a method for generating a random value that can work with any T where T implements the appropriate interface.\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic class Random\r\n{\r\n    public T Next\u003cT\u003e() where T : INumber\u003cT\u003e;\r\n    public T Next\u003cT\u003e(T maxValue) where T : INumber\u003cT\u003e;\r\n    public T Next\u003cT\u003e(T minValue, T maxValue) where T : INumber\u003cT\u003e;\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nRandom r = new Random();\r\nInt128 value = r.Next\u003cInt128\u003e();\r\n```\r\n\n\n### Alternative Designs\n\n- We might need two sets of methods, one for integral values and one for floating-point values.  In that case, `INumber\u003cT\u003e` isn\u0027t the right interface; each set will use its own that appropriate.\r\n- The range used for NextDouble is 0.0 to 1.0; for a floating-point API, we\u0027d presumably want to map to the same range?\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-12T02:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KGOVW",
                                           "createdAt":  "2022-09-12T02:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e The range used for NextDouble is 0.0 to 1.0; for a floating-point API, we\u0027d presumably want to map to the same range?\n\nSame for NextSingle() so I think so.\n\nIt might be interesting to have a quick look at what random methods other stacks expose.",
                                           "updatedAt":  "2022-09-12T02:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KIKeE",
                                           "createdAt":  "2022-09-12T12:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwaeSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-11-30T06:43:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "\u003e \u003e The range used for NextDouble is 0.0 to 1.0; for a floating-point API, we\u0027d presumably want to map to the same range?\r\n\u003e \r\n\u003e Same for NextSingle() so I think so.\r\n\u003e \r\n\u003e It might be interesting to have a quick look at what random methods other stacks expose.\r\n\r\nHumbly I leave here my (not well written) random utilities I use when I need to seed to test something. As example of some useful methods or generics could be integrated\r\n\r\n```C#\r\npublic static class RandomExtensions\r\n{\r\n    public static bool CoinToss(this Random rng)\r\n    {\r\n        return CoinToss(rng, .5);\r\n    }\r\n\r\n    public static bool CoinToss(this Random rng, double zeroWeight)\r\n    {\r\n        return rng.NextDouble() \u003e= zeroWeight;\r\n    }\r\n\r\n    public static byte NextByte(this Random rng)\r\n    {\r\n        return (byte)rng.Next(byte.MinValue, byte.MaxValue + 1);\r\n    }\r\n\r\n    public static byte NextByte(this Random rng, byte min, byte max)\r\n    {\r\n        return (byte)rng.Next(min, max);\r\n    }\r\n\r\n    public static sbyte NextSbyte(this Random rng)\r\n    {\r\n        return (sbyte)rng.Next(sbyte.MinValue, sbyte.MaxValue + 1);\r\n    }\r\n\r\n    public static sbyte NextSbyte(this Random rng, sbyte min, sbyte max)\r\n    {\r\n        return (sbyte)rng.Next(min, max);\r\n    }\r\n\r\n    public static DateTime NextDateTime(this Random rng)\r\n    {\r\n        return NextDateTime(rng, DateTime.MinValue, DateTime.MaxValue);\r\n    }\r\n\r\n    public static DateTime NextDateTime(this Random rng, DateTime maxValue)\r\n    {\r\n        return NextDateTime(rng, DateTime.MinValue, maxValue);\r\n    }\r\n\r\n    public static DateTime NextDateTime(this Random rng, DateTime minValue, DateTime maxValue)\r\n    {\r\n        if (minValue \u003e= maxValue) throw new ArgumentOutOfRangeException(nameof(minValue));\r\n        var nextLong = rng.NextLong(minValue.Ticks, maxValue.Ticks);\r\n        return new DateTime(nextLong);\r\n    }\r\n\r\n    public static DateOnly NextDate(this Random rng)\r\n    {\r\n        return NextDate(rng, DateOnly.MinValue, DateOnly.MaxValue);\r\n    }\r\n\r\n    public static DateOnly NextDate(this Random rng, DateOnly maxValue)\r\n    {\r\n        return NextDate(rng, DateOnly.MinValue, maxValue);\r\n    }\r\n\r\n    public static DateOnly NextDate(this Random rng, DateOnly minValue, DateOnly maxValue)\r\n    {\r\n        if (minValue \u003e= maxValue) throw new ArgumentOutOfRangeException(nameof(minValue));\r\n        var nextDay = rng.Next(minValue.DayNumber, maxValue.DayNumber);\r\n        return DateOnly.FromDayNumber(nextDay);\r\n    }\r\n\r\n    public static TimeOnly NextTime(this Random rng)\r\n    {\r\n        return NextTime(rng, TimeOnly.MinValue, TimeOnly.MaxValue);\r\n    }\r\n\r\n    public static TimeOnly NextTime(this Random rng, TimeOnly maxValue)\r\n    {\r\n        return NextTime(rng, TimeOnly.MinValue, maxValue);\r\n    }\r\n\r\n    public static TimeOnly NextTime(this Random rng, TimeOnly minValue, TimeOnly maxValue)\r\n    {\r\n        if (minValue \u003e= maxValue) throw new ArgumentOutOfRangeException(nameof(minValue));\r\n        var nextLong = rng.NextLong(minValue.Ticks, maxValue.Ticks);\r\n        return new TimeOnly(nextLong);\r\n    }\r\n\r\n    public static double NextDouble(this Random rng, double minValue, double maxValue)\r\n    {\r\n        return minValue + rng.NextDouble() * (maxValue - minValue);\r\n    }\r\n\r\n    public static long NextLong(this Random rng)\r\n    {\r\n        return NextLong(rng, 0, long.MaxValue);\r\n    }\r\n\r\n    public static long NextLong(this Random rng, long maxValue)\r\n    {\r\n        return NextLong(rng, 0, maxValue);\r\n    }\r\n\r\n    public static long NextLong(this Random rng, long minValue, long maxValue)\r\n    {\r\n        if (minValue \u003e= maxValue)\r\n            throw new ArgumentOutOfRangeException(nameof(minValue));\r\n\r\n        //Working with ulong so that modulo works correctly with values \u003e long.MaxValue\r\n        var uRange = (ulong)(maxValue - minValue);\r\n\r\n        //Prevent a modolo bias; see https://stackoverflow.com/a/10984975/238419\r\n        //for more information.\r\n        //In the worst case, the expected number of calls is 2 (though usually it\u0027s\r\n        //much closer to 1) so this loop doesn\u0027t really hurt performance at all.\r\n        ulong ulongRand;\r\n        var buf = (stackalloc byte[8]);\r\n        do\r\n        {\r\n            rng.NextBytes(buf);\r\n            ulongRand = (ulong)BitConverter.ToInt64(buf);\r\n        } while (ulongRand \u003e ulong.MaxValue - ((ulong.MaxValue % uRange) + 1) % uRange);\r\n\r\n        return (long)(ulongRand % uRange) + minValue;\r\n    }\r\n\r\n    public static char NextChar(this Random rng)\r\n    {\r\n        return NextChar(rng, char.MinValue, char.MaxValue);\r\n    }\r\n\r\n    public static char NextChar(this Random rng, char maxValue)\r\n    {\r\n        return NextChar(rng, char.MinValue, maxValue);\r\n    }\r\n\r\n    public static char NextChar(this Random rng, char minValue, char maxValue)\r\n    {\r\n        if (minValue \u003e= maxValue) \r\n            throw new ArgumentOutOfRangeException(nameof(minValue));\r\n\r\n        int min = minValue;\r\n        int max = maxValue;\r\n        return (char)rng.Next(min, max);\r\n    }\r\n\r\n    public static string NextString(this Random rng, int length)\r\n    {\r\n        return NextString(rng, length, char.MinValue, char.MaxValue);\r\n    }\r\n\r\n    public static string NextString(this Random rng, int length, char maxValue)\r\n    {\r\n        return NextString(rng, length, char.MinValue, maxValue);\r\n    }\r\n\r\n    public static string NextString(this Random rng, int length, char minValue, char maxValue)\r\n    {\r\n        if (length \u003c 0) \r\n            throw new ArgumentOutOfRangeException(nameof(length));\r\n\r\n        var strSpan = (stackalloc char[length]);\r\n\r\n        for (int i = 0; i \u003c length; i++)\r\n        {\r\n            strSpan[i] = NextChar(rng, minValue, maxValue);\r\n        }\r\n        return strSpan.ToString();\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-09-12T12:21:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJT2g",
                                           "createdAt":  "2022-09-12T16:01:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hopperpl",
                                           "body":  "is maxValue inclusive or exclusive? minValue respectively.",
                                           "updatedAt":  "2022-09-12T16:01:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJUZx",
                                           "createdAt":  "2022-09-12T16:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "In the existing APIs, minValue is inclusive and maxValue is exclusive.  This is using the same naming as the existing overloads and would have the same semantics as the existing overloads.",
                                           "updatedAt":  "2022-09-12T16:03:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJj3h",
                                           "createdAt":  "2022-09-12T16:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwaejQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-11-30T06:44:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hopperpl",
                                           "body":  "then it should be noted that way... \r\n\r\n- because `Next\u003cT\u003e(T.MinValue, T.MaxValue)` will not be the same as `Next\u003cT\u003e()`\r\n- also `Next\u003cT\u003e(0, T.MaxValue + 1)` will not be possible (assuming T is a signed variant)... if the goal is to have any value of the positive range (of a signed T variant)\r\n\r\nI\u0027m not against it, but it has to be clearly stated, I fell into that pitfall many times. The documentation mentions it for the current `int` implementation in a small remark. For example `Next\u003cbyte\u003e()` can never return 255. \r\n\r\nI would on a personal note as this is a new implementation without backward compatibility ... \r\n- have `Next\u003cT\u003e()` return the full range of T\r\n- have `Next\u003cT\u003e(T minInclusive, T maxInclusive)` return a complete range -- or `maxExclusive` but have the parameter properly named -- problem with exclusive is still no full positive range possible\r\n- and when T is a floating point number default to T.Zero and T.One (inclusive)\r\n\r\nif default `Next\u003cfloat\u003e()` would not include 1 then the random value is not usable for the scenarios I use random float numbers. \r\n\r\nOh, I forgot to mention, it is easy to turn inclusive to exclusive by subtracting 1 or Epsilon, but it is not possible to do the opposite, as T.MaxValue is the maximum value and nothing can be bigger.",
                                           "updatedAt":  "2022-09-12T16:56:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KJ7sN",
                                           "createdAt":  "2022-09-12T18:13:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e For example `Next\u003cbyte\u003e()` can never return 255.\r\n\r\nWhich can cause slight bias to results downstream, as I brought up in #41457 .\r\n\r\n\u003e if default `Next\u003cfloat\u003e()` would not include 1 then the random value is not usable for the scenarios I use random float numbers.\r\n\r\n.... what are these scenarios?",
                                           "updatedAt":  "2022-09-12T18:13:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KKD-W",
                                           "createdAt":  "2022-09-12T18:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwaeyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2022-09-12T18:53:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-09-12T19:34:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timcassell",
                                                                               "createdAt":  "2022-09-12T23:26:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-10-04T01:17:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-11-30T06:45:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "hopperpl",
                                           "body":  "\u003e .... what are these scenarios?\r\n\r\nraytracing, (audio) signal processing, field density, math, geometry, anything that is too complex to completely calculate... you use a randomization of a normalized set (so 0 to 1) and then calculate until you have enough result values... as the calculation will theoretically go on forever... if the 1 is missing as a random value, one \"edge\" will be \"not sharp\"\r\n\r\nIf you have a large input set, then it doesn\u0027t make a difference as by rounding you hit the edge, but sometimes you have a 3 dimensional set or a 4 dimensional  set with a very \"thin\" dimension, for example depth or color/hue (4th dimension). Or you have a reduced data set and the last thing you want is to add a special randomizer for such special cases. \r\n\r\nNormalization is usually done with a range of 0 to 1 inclusive. Or -1 to +1 inclusive. The left x-coordinate is 0, the right x-coordinate is 1. Or you have a line from A to B and use a random number to find any point between A and B. But you want A and B both included. A line segment between 2 points includes both points. Normalized, to find A you use 0 and to find B you use 1. In float-color (0,0,0) is Black and (1,1,1) is White, (0.5,0.5,0.5) is Gray etc. The 1 is always part of the set.",
                                           "updatedAt":  "2022-09-12T18:46:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KK3JL",
                                           "createdAt":  "2022-09-12T20:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwafNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2022-09-13T07:30:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giladfrid009",
                                                                               "createdAt":  "2022-09-15T11:40:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2022-09-16T11:09:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielchalmers",
                                                                               "createdAt":  "2022-11-08T04:27:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-11-30T06:48:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "aloraman",
                                           "body":  "#### Thoughts on API shape\r\nI don\u0027t think having the same random API for all numeric types is a good idea. Integer numbers and floating-point numbers have different behaviors and expectations. Single generic API for all of them would have very weird behavior. The very core of RNG is producing sequence of uniformly distributed byte values, other methods produce values of specific types from these byte sequences. With that in mind we can look at differences in numeric types:\r\n - Binary integers (from `System.Byte` to `System.Int64`, signed and unsigned) have values that are uniformly distributed. Every interval also has uniformly distributed values. So, producing a binary integer from byte sequence is almost as easy as filling the memory span with these bytes (there are tricks to support `Next(min, max)`, more on that later). When users call `Random.Next\u003cTBinaryInteger\u003e(min, max)`, they expect to receive uniformly distributed values.\r\n - IEEE754 floating-point numbers (`System.Half`, `System.Single`, `System.Double`) have values that are **not** uniformly distributed. Some intervals have uniformly distributed numbers, some haven\u0027t - it depends on whether only mantissa is changing, or there\u0027s a change in value of exponent as well. If we simply fill a memory span with random bytes we won\u0027t get a uniform distribution, we\u0027ll get a distribution with logarithmic density, which behaves very counter-intuitively. There is a way to produce uniformly distributed values in the interval `[0.0; 1.0)` utilizing dyadic rationals and the specific size of mantissa, which is used in current implementation. Maybe we can define `Next(max)` and `Next(min, max)` for floating point numbers from `Next(0, 1)` via linear transformation, but I\u0027m not sure if that\u0027s a good idea - precision loss can skew the distribution.\r\n - Non-IEEE754 floating-point numbers (`System.Decimal`) is its own can of worms, I can\u0027t say a lot about it, maybe have specific API for decimals? With a way to pass a specific required precision.\r\n - Other new numeric types - Here be dragons! What should `Random.Next\u003cBigInteger\u003e()` produce? Should `Random.Next\u003cComplex\u003e()` produce values from full Complex plane or from unit circle?\r\n\r\n#### Proposed API shape\r\n```csharp\r\npublic class Random\r\n{\r\n    public T Next\u003cT\u003e() where T : IBinaryInteger\u003cT\u003e; // produces values from [T.Zero;T.MaxValue)\r\n    public T Next\u003cT\u003e(T maxValue) where T : IBinaryInteger\u003cT\u003e; // produces values from [T.Zero;maxValue)\r\n    public T Next\u003cT\u003e(T minValue, T maxValue) where T : IBinaryInteger\u003cT\u003e; // produces values from [minValue;maxValue)\r\n    public T NextFloat\u003cT\u003e() where T:IBinaryFloatingPointIeee754\u003cT\u003e // produces values from [0.0;1.0), can\u0027t have the same name :(\r\n}    \r\n```\r\nBasically, `Next\u003cT\u003e` for binary integers should produce values in the same range as existing methods, i.e., `Random.Next\u003cSystem.Int32\u003e()` should behave the same way `Random.Next()` behaves now.\r\n\r\n#### Other questions\r\n1. To implement `Next(min, max)` for binary integers current implementation uses the range hit test, utilizing `Log2Ceiling`. Do we have `Log2Ceiling` for every binary integer type? Or `Log2` + `PopCount`?\r\n2. To produce `[0.0; 1.0)` uniform distribution current implementation uses dyadic rationals, utilizing type-specific bit-twiddling. Do we have required constants to implement this bit-twiddling in a generic way?\r\n\r\nP.S. Maybe it is useful to provide raw span filling method in API, e.g.:\r\n```csharp\r\npublic class Random\r\n{\r\n    public void Fill\u003cT\u003e(ref T storage) where T: unmanaged;\r\n}\r\n```      ",
                                           "updatedAt":  "2022-09-12T20:15:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USVYU",
                                           "createdAt":  "2023-02-02T17:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1WtWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "koszeggy",
                                                                               "createdAt":  "2023-02-02T23:02:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "koszeggy",
                                           "body":  "~Before adding newer and newer members to `Random` please consider the API suggestion I proposed in #60549.~\r\n\r\n\u003e~ℹ️ **Background Info**: The problem is that since C# 2.0 adding new virtual members to `Random` is a breaking change for derived `Random` classes because until the creator of the derived class can release a new version of their library the non-overridden new methods will fall back to the legacy `Random` behavior.~\r\n\r\n**~Breaking Issue Example:~**\r\n\r\n~The last good example is the introduction of `NextInt64` and `NextSingle` methods. I have a [`SecureRandom`](https://docs.kgysoft.net/corelibraries/html/T_KGySoft_Security_Cryptography_SecureRandom.htm) class ([among](https://docs.kgysoft.net/corelibraries/html/T_KGySoft_CoreLibraries_FastRandom.htm) [others](https://docs.kgysoft.net/corelibraries/html/T_KGySoft_CoreLibraries_ThreadSafeRandom.htm)). When .NET 6 was released with the new `NextInt64` overloads, and before I could release a new version with the new overloads (or even after, if someone targeted .NET 6 without upgrading my libraries), `SecureRandom.NextInt64` failed to return cryptographically secure results.~\r\n\r\n~Even worse (though the issue stands also without this addendum), I actually have a lot of [extension methods](https://docs.kgysoft.net/corelibraries/html/T_KGySoft_CoreLibraries_RandomExtensions.htm), for `Random`, including some [`NextInt64`](https://docs.kgysoft.net/corelibraries/html/M_KGySoft_CoreLibraries_RandomExtensions_NextInt64.htm) overloads that returned secure results before .NET 6 but when `Random.NextInt64` has been introduced, it was not the case anymore until I upgraded my libraries.~\r\n\r\n**Possible Solutions:**\r\n\r\n*A.* Instead of new `Random` members please introduce new extension methods that rely on the already existing members of any `Random` implementation (eg. `NextBytes`). Just like @DrkWzrd, I also offer my [`RandomExtensions`](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/master/KGySoft.CoreLibraries/CoreLibraries/_Extensions/RandomExtensions.cs) for any possible help/inspiration. [Here](https://dotnetfiddle.net/EPHRIx) is a living online example as well.\r\n\r\n*B.* As I proposed in #60549, make it possible for a derived implementation to call a protected base constructor that uses an implementation where all virtual members rely on the `Sample` method as it was in C# 1.x. This not just prevents unnecessary seed initialization in base but also makes the possible new members forward compatible. The non-overridden members will maybe just be a little less optimized until the library is upgraded ~but will not fall back to the legacy implementation~. I actually even prepared a [pull request](https://github.com/koszeggy/runtime/commit/2cea116d9ef71a3a3a0dd021030ae0dc6f4042fa), in which I followed @GrabYourPitchforks\u0027 [API review comments](https://github.com/dotnet/runtime/issues/60549#issuecomment-970584280), but then unfortunately @stephentoub thought this API was [not necessary](https://github.com/dotnet/runtime/issues/60549#issuecomment-1051319668) after all. But now that we face new `Random` methods again and the same issues can be expected I kindly ask you to reconsider this statement.\r\n\r\n**Disclaimer:**\r\n\r\nThis API proposal does not indicate the new `Next\u003cT\u003e` methods as virtual ones. If they are really non-virtual, then maybe my concerns are not that relevant in this particular case. Still, it would be really helpful to consider my proposal as it addresses the unnecessary allocations issue as well.\r\n\r\n----\r\n\r\n***Correction:* I remembered incorrectly: The non-derived compatible implementation of the new `NextInt64` method falled back to use multiple `Next` caused only a performance issue for my `SecureRandom` class but did not affect security. Meaning, my proposed API is no longer needed to implemented before this proposal. It would be only a solution for the unnecessary allocations and slow instantiation, which an independent issue from the new virtual methods. I apologize for creating an unnecessary noise in this issue.**\r\n",
                                           "updatedAt":  "2023-02-02T23:02:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USYsp",
                                           "createdAt":  "2023-02-02T17:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e because until the creator of the derived class can release a new version of their library the non-overridden new method will fall back to the legacy Random behavior.\r\n\r\nAny new virtuals that are added delegate to an existing abstract/virtual on the type.  In the case of the NextInt64 you mentioned, for example, it would delegate to the existing virtual Next(int), calling a derived type\u0027s implementation if it existed.  So I\u0027m not sure what you mean about it falling back to legacy behavior.",
                                           "updatedAt":  "2023-02-02T17:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USaAV",
                                           "createdAt":  "2023-02-02T17:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1Vfsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2023-02-02T17:38:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We have also not historically considered adding new virtual members to be a breaking change. That is exactly how we have to version types (otherwise we\u0027d end up with `RandomEx`, `RandomV5`, etc) and we have nearly always reserved the right to extend our types with additional functionality where appropriate.\r\n",
                                           "updatedAt":  "2023-02-02T17:29:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USeHC",
                                           "createdAt":  "2023-02-02T17:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1WtXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "koszeggy",
                                                                               "createdAt":  "2023-02-02T23:02:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "koszeggy",
                                           "body":  "\u003e  In the case of the NextInt64 you mentioned, for example, it would delegate to the existing virtual Next(int), calling a derived type\u0027s implementation if it existed.\r\n\r\nOops, I remembered incorrectly, I apologize for that part. I just remembered that it ends up calling [`Net5Compatible.NextUInt64`](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Random.Net5CompatImpl.cs,78). As it routes back to `Next` the insecure part is not true, sorry for not double checking my memories.\r\n\r\nBut it still caused two issues:\r\n1. Initialized the Marvin seed unnecessarily\r\n2. Replaced my alternative implementation with four `Next` calls, which is suboptimal\r\n\r\nWhile 2. was necessary due to the nature of method resolution (so the extension method was no longer picked) my proposed special protected constructor could partly solve this half of the problem as well (using one `Sample` call instead of four `Next`s). And it would also fix 1, which is still not solved.\r\n\r\nI hope you can accept my thoughts with these corrections now.",
                                           "updatedAt":  "2023-02-02T17:44:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USfO_",
                                           "createdAt":  "2023-02-02T17:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e But it still caused two issues: 1) Initialized the Marvin seed unnecessarily 2) Replaced my alternative implementation with four Next calls, which is suboptimal\r\n\r\nFor (1), what \"marvin seed\" are you referring to?  The addition of these virtuals doesn\u0027t introduce any new seed.  There\u0027s the existing concern you previously raised about the base ctor\u0027s initializing the state array and which we debated at length on a different issue.  The addition of these virtuals neither fixes that nor makes that any worse.\r\n\r\nFor (2), the nature of these being virtual is what lets you address that.  When you update your implementation to override the new virtuals, you get to supply a more optimal implementation for your derived type, and until then, it\u0027s a functional implementation.",
                                           "updatedAt":  "2023-02-02T17:47:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USk0e",
                                           "createdAt":  "2023-02-02T18:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1WtYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "koszeggy",
                                                                               "createdAt":  "2023-02-02T23:02:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "koszeggy",
                                           "body":  "\u003e what \"marvin seed\" are you referring to?\r\n\r\nI mean [this](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Random.Net5CompatImpl.cs,107) initialization. Sorry again for being inaccurate. This issue still stands for all derived types and is independent from overriding virtual members.\r\n\r\n\u003e For (2), the nature of these being virtual is what lets you address that.\r\n\r\nYes and I agreed on that. I just mentioned that maybe it could be a good option to [rely](https://github.com/koszeggy/runtime/commit/2cea116d9ef71a3a3a0dd021030ae0dc6f4042fa#diff-19af1353e0a3f716745078b1ab702fb51d17fac211ac3fa5123752a6631fb2f8R27) on `Sample` until I have a chance to override the new members. But this part is less important, it\u0027s just a (possibly) positive side effect of the proposed solution for being able to avoid the seed initialization.",
                                           "updatedAt":  "2023-02-02T18:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT3LZ",
                                           "createdAt":  "2023-02-02T23:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1WuQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "koszeggy",
                                                                               "createdAt":  "2023-02-02T23:08:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "koszeggy",
                                           "body":  "As I was mistaken with the security aspect, of course it\u0027s not necessary anymore to implement my proposal before adding new virtual members. I added a correction to my original [comment](https://github.com/dotnet/runtime/issues/75431#issuecomment-1414092308). Sorry for the unwanted noise in this issue. I really feel embarrassed.",
                                           "updatedAt":  "2023-02-02T23:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZa3m",
                                           "createdAt":  "2023-02-03T14:31:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks.",
                                           "updatedAt":  "2023-02-03T14:31:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACF0",
                                           "createdAt":  "2023-08-26T21:44:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "How would this actually be implemented? This seems impossible in the general case. Even if we have separate methods for `IBinaryInteger` and `IFloatingPointIeee754`, how would e.g. the integer one be implemented? There\u0027s no way to get the size of the `T` given an `IBinaryInteger` (and it can even represent a variable-sized integer, like `BigInteger`). There would have to be a new `IFixedLengthBinaryInteger` interface that would expose a static `Size` property, in order for the random generator to know how many bytes to generate.",
                                           "updatedAt":  "2023-08-26T21:45:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACNY",
                                           "createdAt":  "2023-08-26T21:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Unless the plan is to only support a fixed number of specific types, as `Vector\u003cT\u003e` does. But then why have the method be generic at all instead of having overloads/method groups for each type?",
                                           "updatedAt":  "2023-08-26T21:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACN-",
                                           "createdAt":  "2023-08-26T21:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e There\u0027s no way to get the size of the T given an IBinaryInteger\r\n\r\nThe T can be constrained to both IBinaryInteger and IMinMaxValue, in which case you have both GetByteCount and MaxValue.",
                                           "updatedAt":  "2023-08-26T21:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACR0",
                                           "createdAt":  "2023-08-26T21:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "I see, thanks. What about the floating point case?",
                                           "updatedAt":  "2023-08-26T21:50:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACTi",
                                           "createdAt":  "2023-08-26T21:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "I think it might be a good idea to prototype this to make sure that it really is feasible.",
                                           "updatedAt":  "2023-08-26T21:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lACod",
                                           "createdAt":  "2023-08-26T22:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODE4v7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2023-08-26T22:03:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I think it might be a good idea to prototype this to make sure that it really is feasible.\r\n\r\nUncompiled, untested, certainly possibility for optimization, and purely for demonstrative purposes:\r\n```C#\r\nstatic T GetNext\u003cT\u003e(T maxValue) where T : IBinaryInteger\u003cT\u003e\r\n{\r\n    int maxBytes = (int)Math.Ceiling(maxValue.GetShortestBitLength() / 8.0);\r\n    Span\u003cbyte\u003e span = maxBytes \u003c= 256 ? stackalloc byte[maxBytes] : new byte[maxBytes];\r\n\r\n    while (true)\r\n    {\r\n        Random.Shared.NextBytes(span);\r\n        T newValue = T.ReadLittleEndian(span, true);\r\n        if (newValue \u003c maxValue)\r\n        {\r\n            return newValue;\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-08-26T22:02:39Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "[API Proposal]: Random.Next\u003cT\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77633",
        "createdAt":  "2022-10-29T15:09:17Z",
        "number":  77633,
        "author":  "mrj001",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-15T23:55:03Z",
        "body":  "The method ApproxEqual uses a tolerance of 1e-15 for testing equality of log results.\r\nhttps://github.com/dotnet/runtime/blob/9ed32f4ab89b24b14ab83c5982cb728131a28f24/src/libraries/System.Runtime.Numerics/tests/BigInteger/log.cs#L240\r\n\r\nI have found some values for which this tolerance is not met.  These integers are below 1\u003c\u003c53, so I would expect them to be represented exactly in a double, and therefore produce exactly the same results as Math.Log.\r\n\r\nThe following code demonstrates:\r\n\r\n```\r\nusing System.Numerics;\r\n\r\ndouble tolerance = double.Parse(\"1e-15\");\r\ndouble diff;\r\n\r\nConsole.WriteLine(\"Log Comparison\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes++)\r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double dblLog = Math.Log(n);\r\n   double biLog = BigInteger.Log(n);\r\n   diff = dblLog - biLog;\r\n   Console.WriteLine($\"{zeroes,2} {n,16} {dblLog,19} {biLog, 19} {diff,19}\");\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   Console.WriteLine($\"{zeroes,2} {n,16} {dblLog,19} {biLog, 19} {diff,19}\");\r\n}\r\n\r\nConsole.WriteLine(\"Base 10: 1st way\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes ++) \r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double expectedLog = Math.Log(n, 10);\r\n   double actualLog = BigInteger.Log(n, 10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   expectedLog = Math.Log(n, 10);\r\n   actualLog = BigInteger.Log(n, 10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n}\r\n\r\nConsole.WriteLine(\"Base 10: 2nd way\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes ++) \r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double expectedLog = Math.Log(n) / Math.Log(10);\r\n   double actualLog = BigInteger.Log(n) / Math.Log(10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   expectedLog = Math.Log(n) / Math.Log(10);\r\n   actualLog = BigInteger.Log(n) / Math.Log(10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n}\r\n```\r\n\r\nIt produces this output:\r\n\r\n\u003e Log Comparison\r\n\u003e  1                9  2.1972245773362196  2.1972245773362196                   0\r\n\u003e  1               10  2.1972245773362196  2.1972245773362196                   0\r\n\u003e  2               99    4.59511985013459    4.59511985013459                   0\r\n\u003e  2              100    4.59511985013459    4.59511985013459                   0\r\n\u003e  3              999   6.906754778648554   6.906754778648554                   0\r\n\u003e  3             1000   6.906754778648554   6.906754778648554                   0\r\n\u003e  4             9999    9.21024036697585    9.21024036697585                   0\r\n\u003e  4            10000    9.21024036697585    9.21024036697585                   0\r\n\u003e  5            99999  11.512915464920228  11.512915464920228                   0\r\n\u003e  5           100000  11.512915464920228  11.512915464920228                   0\r\n\u003e  6           999999  13.815509557963773  13.815509557963773                   0\r\n\u003e  6          1000000  13.815509557963773  13.815509557963773                   0\r\n\u003e  7          9999999  16.118095550958316  16.118095550958316                   0\r\n\u003e  7         10000000  16.118095550958316  16.118095550958316                   0\r\n\u003e  8         99999999  18.420680733952366  18.420680733952366                   0\r\n\u003e  8        100000000  18.420680733952366  18.420680733952366                   0\r\n\u003e  9        999999999   20.72326583594641   20.72326583594641                   0\r\n\u003e  9       1000000000   20.72326583594641   20.72326583594641                   0\r\n\u003e 10       9999999999  23.025850929840455   23.02585092984046 -3.552713678800501E-15\r\n\u003e 10      10000000000  23.025850929840455   23.02585092984046 -3.552713678800501E-15\r\n\u003e 11      99999999999  25.328436022924503    25.3284360229245 3.552713678800501E-15\r\n\u003e 11     100000000000  25.328436022924503    25.3284360229245 3.552713678800501E-15\r\n\u003e 12     999999999999   27.63102111592755   27.63102111592755                   0\r\n\u003e 12    1000000000000   27.63102111592755   27.63102111592755                   0\r\n\u003e 13    9999999999999  29.933606208922495   29.93360620892249 3.552713678800501E-15\r\n\u003e 13   10000000000000  29.933606208922495   29.93360620892249 3.552713678800501E-15\r\n\u003e 14   99999999999999   32.23619130191663  32.236191301916634 -7.105427357601002E-15\r\n\u003e 14  100000000000000   32.23619130191663  32.236191301916634 -7.105427357601002E-15\r\n\u003e 15  999999999999999  34.538776394910684  34.538776394910684                   0\r\n\u003e 15 1000000000000000  34.538776394910684  34.538776394910684                   0\r\n\u003e Base 10: 1st way\r\n\u003e 10\t10000000000\t1.7763568394002505E-15\r\n\u003e 11\t99999999999\t3.552713678800501E-15\r\n\u003e 11\t100000000000\t1.7763568394002505E-15\r\n\u003e 14\t99999999999999\t1.7763568394002505E-15\r\n\u003e 14\t100000000000000\t1.7763568394002505E-15\r\n\u003e 15\t999999999999999\t1.7763568394002505E-15\r\n\u003e 15\t1000000000000000\t1.7763568394002505E-15\r\n\u003e Base 10: 2nd way\r\n\u003e 11\t99999999999\t1.7763568394002505E-15\r\n\u003e 12\t1000000000000\t1.7763568394002505E-15\r\n\u003e 13\t9999999999999\t1.7763568394002505E-15\r\n\u003e 13\t10000000000000\t1.7763568394002505E-15\r\n\u003e 14\t99999999999999\t3.552713678800501E-15\r\n\u003e 14\t100000000000000\t3.552713678800501E-15\r\n\r\nAll the non-zero differences have a greater absolute value than 1e-15, as used in ApproxEqual.\r\n\r\nFor the natural logs, why is there any difference?  These values are less than 1\u003c\u003c53, and so can be represented exactly in a double, and BigInteger.Log delegates to Math.Log.\r\n\r\nSince there is no difference at all in the results of BigInteger.Log(10) and Math.Log(10), I believe that there should not be differences in the base 10 logs.\r\n\r\nI don\u0027t think it should make a difference whether I call BigInteger.Log10(n) or BigInteger.Log(n, 10), but it does. \r\n\r\nEdit: forgot to put in the dotnet version\r\n```\r\n$ dotnet --version\r\n6.0.402\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWgDQiw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NPVbe",
                                           "createdAt":  "2022-10-29T15:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-29T15:09:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NPX7h",
                                           "createdAt":  "2022-10-29T15:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe method ApproxEqual uses a tolerance of 1e-15 for testing equality of log results.\r\nhttps://github.com/dotnet/runtime/blob/9ed32f4ab89b24b14ab83c5982cb728131a28f24/src/libraries/System.Runtime.Numerics/tests/BigInteger/log.cs#L240\r\n\r\nI have found some values for which this tolerance is not met.  These integers are below 1\u003c\u003c53, so I would expect them to be represented exactly in a double, and therefore produce exactly the same results as Math.Log.\r\n\r\nThe following code demonstrates:\r\n\r\n```\r\nusing System.Numerics;\r\n\r\ndouble tolerance = double.Parse(\"1e-15\");\r\ndouble diff;\r\n\r\nConsole.WriteLine(\"Log Comparison\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes++)\r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double dblLog = Math.Log(n);\r\n   double biLog = BigInteger.Log(n);\r\n   diff = dblLog - biLog;\r\n   Console.WriteLine($\"{zeroes,2} {n,16} {dblLog,19} {biLog, 19} {diff,19}\");\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   Console.WriteLine($\"{zeroes,2} {n,16} {dblLog,19} {biLog, 19} {diff,19}\");\r\n}\r\n\r\nConsole.WriteLine(\"Base 10: 1st way\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes ++) \r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double expectedLog = Math.Log(n, 10);\r\n   double actualLog = BigInteger.Log(n, 10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   expectedLog = Math.Log(n, 10);\r\n   actualLog = BigInteger.Log(n, 10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n}\r\n\r\nConsole.WriteLine(\"Base 10: 2nd way\");\r\nfor (int zeroes = 1; zeroes \u003c= 15; zeroes ++) \r\n{\r\n   long n = long.Parse(new string(\u00279\u0027, zeroes));\r\n   double expectedLog = Math.Log(n) / Math.Log(10);\r\n   double actualLog = BigInteger.Log(n) / Math.Log(10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\n   n = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\n   expectedLog = Math.Log(n) / Math.Log(10);\r\n   actualLog = BigInteger.Log(n) / Math.Log(10);\r\n   diff = Math.Abs(expectedLog - actualLog);\r\n   if (diff \u003e tolerance)\r\n      Console.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n}\r\n```\r\n\r\nIt produces this output:\r\n\r\n\u003e Log Comparison\r\n\u003e  1                9  2.1972245773362196  2.1972245773362196                   0\r\n\u003e  1               10  2.1972245773362196  2.1972245773362196                   0\r\n\u003e  2               99    4.59511985013459    4.59511985013459                   0\r\n\u003e  2              100    4.59511985013459    4.59511985013459                   0\r\n\u003e  3              999   6.906754778648554   6.906754778648554                   0\r\n\u003e  3             1000   6.906754778648554   6.906754778648554                   0\r\n\u003e  4             9999    9.21024036697585    9.21024036697585                   0\r\n\u003e  4            10000    9.21024036697585    9.21024036697585                   0\r\n\u003e  5            99999  11.512915464920228  11.512915464920228                   0\r\n\u003e  5           100000  11.512915464920228  11.512915464920228                   0\r\n\u003e  6           999999  13.815509557963773  13.815509557963773                   0\r\n\u003e  6          1000000  13.815509557963773  13.815509557963773                   0\r\n\u003e  7          9999999  16.118095550958316  16.118095550958316                   0\r\n\u003e  7         10000000  16.118095550958316  16.118095550958316                   0\r\n\u003e  8         99999999  18.420680733952366  18.420680733952366                   0\r\n\u003e  8        100000000  18.420680733952366  18.420680733952366                   0\r\n\u003e  9        999999999   20.72326583594641   20.72326583594641                   0\r\n\u003e  9       1000000000   20.72326583594641   20.72326583594641                   0\r\n\u003e 10       9999999999  23.025850929840455   23.02585092984046 -3.552713678800501E-15\r\n\u003e 10      10000000000  23.025850929840455   23.02585092984046 -3.552713678800501E-15\r\n\u003e 11      99999999999  25.328436022924503    25.3284360229245 3.552713678800501E-15\r\n\u003e 11     100000000000  25.328436022924503    25.3284360229245 3.552713678800501E-15\r\n\u003e 12     999999999999   27.63102111592755   27.63102111592755                   0\r\n\u003e 12    1000000000000   27.63102111592755   27.63102111592755                   0\r\n\u003e 13    9999999999999  29.933606208922495   29.93360620892249 3.552713678800501E-15\r\n\u003e 13   10000000000000  29.933606208922495   29.93360620892249 3.552713678800501E-15\r\n\u003e 14   99999999999999   32.23619130191663  32.236191301916634 -7.105427357601002E-15\r\n\u003e 14  100000000000000   32.23619130191663  32.236191301916634 -7.105427357601002E-15\r\n\u003e 15  999999999999999  34.538776394910684  34.538776394910684                   0\r\n\u003e 15 1000000000000000  34.538776394910684  34.538776394910684                   0\r\n\u003e Base 10: 1st way\r\n\u003e 10\t10000000000\t1.7763568394002505E-15\r\n\u003e 11\t99999999999\t3.552713678800501E-15\r\n\u003e 11\t100000000000\t1.7763568394002505E-15\r\n\u003e 14\t99999999999999\t1.7763568394002505E-15\r\n\u003e 14\t100000000000000\t1.7763568394002505E-15\r\n\u003e 15\t999999999999999\t1.7763568394002505E-15\r\n\u003e 15\t1000000000000000\t1.7763568394002505E-15\r\n\u003e Base 10: 2nd way\r\n\u003e 11\t99999999999\t1.7763568394002505E-15\r\n\u003e 12\t1000000000000\t1.7763568394002505E-15\r\n\u003e 13\t9999999999999\t1.7763568394002505E-15\r\n\u003e 13\t10000000000000\t1.7763568394002505E-15\r\n\u003e 14\t99999999999999\t3.552713678800501E-15\r\n\u003e 14\t100000000000000\t3.552713678800501E-15\r\n\r\nAll the non-zero differences have a greater absolute value than 1e-15, as used in ApproxEqual.\r\n\r\nFor the natural logs, why is there any difference?  These values are less than 1\u003c\u003c53, and so can be represented exactly in a double, and BigInteger.Log delegates to Math.Log.\r\n\r\nSince there is no difference at all in the results of BigInteger.Log(10) and Math.Log(10), I believe that there should not be differences in the base 10 logs.\r\n\r\nI don\u0027t think it should make a difference whether I call BigInteger.Log10(n) or BigInteger.Log(n, 10), but it does. \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emrj001\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-29T15:40:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PRAyc",
                                           "createdAt":  "2022-11-28T22:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "\u003e I don\u0027t think it should make a difference whether I call BigInteger.Log10(n) or BigInteger.Log(n, 10), but it does.\r\n\r\nStill wrapping my head around the rest of your issue, but this stood out to me. Do you have an example of this discrepancy, because based on the source code these two should be identical: https://source.dot.net/#System.Runtime.Numerics/System/Numerics/BigInteger.cs,863",
                                           "updatedAt":  "2022-11-28T22:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PVMoW",
                                           "createdAt":  "2022-11-29T16:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrj001",
                                           "body":  "It\u0027s buried in the Base 10 1st way and 2nd way outputs, and not easy to see.  Here is a piece of code that specifically targets that bit:\r\n```\r\nusing System.Numerics;\r\n\r\ndouble diff;\r\nint zeroes = 14;\r\nlong n = long.Parse(new string(\u00279\u0027, zeroes));\r\n\r\nConsole.WriteLine(\"Base 10: 1st way\");\r\ndouble expectedLog = Math.Log(n, 10);\r\ndouble actualLog = BigInteger.Log(n, 10);\r\ndiff = Math.Abs(expectedLog - actualLog);\r\nConsole.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\nn = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\nexpectedLog = Math.Log(n, 10);\r\nactualLog = BigInteger.Log(n, 10);\r\ndiff = Math.Abs(expectedLog - actualLog);\r\nConsole.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\nConsole.WriteLine(\"Base 10: 2nd way\");\r\nn = long.Parse(new string(\u00279\u0027, zeroes));\r\nexpectedLog = Math.Log(n) / Math.Log(10);\r\nactualLog = BigInteger.Log(n) / Math.Log(10);\r\ndiff = Math.Abs(expectedLog - actualLog);\r\nConsole.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n\r\nn = long.Parse(\"1\" + new string(\u00270\u0027, zeroes));\r\nexpectedLog = Math.Log(n) / Math.Log(10);\r\nactualLog = BigInteger.Log(n) / Math.Log(10);\r\ndiff = Math.Abs(expectedLog - actualLog);\r\nConsole.WriteLine($\"{zeroes}\\t{n}\\t{diff}\");\r\n```\r\n\r\nAnd its output:\r\n\r\n\u003e Base 10: 1st way\r\n\u003e 14\t99999999999999\t1.7763568394002505E-15\r\n\u003e 14\t100000000000000\t1.7763568394002505E-15\r\n\u003e Base 10: 2nd way\r\n\u003e 14\t99999999999999\t3.552713678800501E-15\r\n\u003e 14\t100000000000000\t3.552713678800501E-15\r\n\u003e\r\nMy expectation was the output for both should be the same, since `BigInteger.Log(10) == Math.Log(10)` per the Log Comparison section in my initial post.\r\n",
                                           "updatedAt":  "2022-11-29T16:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PVgPu",
                                           "createdAt":  "2022-11-29T17:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "I think I\u0027m confused because you never call the `BigInteger.Log10(n)` API in your examples. Is that a typo or am I misunderstanding?",
                                           "updatedAt":  "2022-11-29T17:43:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Parbk",
                                           "createdAt":  "2022-11-30T16:02:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwdEyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-11-30T17:13:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mrj001",
                                           "body":  "Yes, I think that\u0027s a typo, and it should have said that I expected `BigInteger.Log(n, 10)` and `BigInteger.Log(n) / Math.Log(10)` to produce the exact same results.\r\n",
                                           "updatedAt":  "2022-11-30T16:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pa_1b",
                                           "createdAt":  "2022-11-30T17:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwdFJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-11-30T17:14:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "In \"real math\", `Log(x) / Log(y)` is equivalent to `Log(x, y)`. However, that isn\u0027t the case for \"computer math\".\r\n\r\nComputers operate on a finite domain, with fixed-sized or memory limited types, overflow, underflow, and often some form of implicit rounding after operations.\r\n\r\nBecause of this, there may be subtle imprecision and error introduced for any \"multi-step\" operation that causes it to differ from an API which does the same as a \"single step\". Of course what exactly an API does under the covers could still be the naive multi-step equivalent without accounting for any error, so it is up to the developer to read the documentation to determine what guarantees are present, if any.\r\n\r\n",
                                           "updatedAt":  "2022-11-30T17:06:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PbAyW",
                                           "createdAt":  "2022-11-30T17:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "-- Put another way, \"real math\" ensures that `a + (b + c)` is the same as `(a + b) + c`. However, in computer math these may differ. This is likewise why operations like `FusedMultiplyAdd` exist, because they ensure that `(a * b) + c` is done as a single operation with 1 rounding step. Where-as the naive same approach will round twice, introducing error. For example, `(1e308 * 2) - 1e308` is `PositiveInfinity` where-as `FusedMultipleAdd(1e308, 2, -1e308)` is `1e308`.",
                                           "updatedAt":  "2022-11-30T17:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pdix0",
                                           "createdAt":  "2022-12-01T04:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrj001",
                                           "body":  "@tannergooding, I believe I see my problems now.\r\n\r\nWhen I originally looked into the BigInteger.Log method, I found it was delegating the calculation of the log to Math.Log.  Since double precision has 53 bits of mantissa, my expectation _was_ that the [BigInteger.Log](https://github.com/dotnet/runtime/blob/91f114b5364dd06c40f7f240827162d9f2a8a5cf/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L845) method would return exactly the same results as Math.Log for integers up to 53 bits in size.  As demonstrated above, it does not, which lead to this issue.\r\n\r\nHowever, I noticed this evening that the _sign field is a 32-bit integer, and not a 64-bit integer as I had thought.  Therefore, the relevant line of the BigInteger.Log method is [this one](https://github.com/dotnet/runtime/blob/91f114b5364dd06c40f7f240827162d9f2a8a5cf/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L860).  This means that exact values of BigInteger.Log can only be expected up to 31 bits rather than 53.\r\n\r\nMy second error was in interpreting the tolerance applied by ApproxEqual - it is a ratio, not a difference.  So the ratio of expected to actual must be within 1e-15 of 1.0, not the difference as I used in my original example.\r\n\r\nSo one last question: Is it reasonable to improve the exact values of logs from 31 bits to 53?",
                                           "updatedAt":  "2022-12-01T04:15:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PieU0",
                                           "createdAt":  "2022-12-01T21:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "If you are asking whether we can improve BigInteger.Log\u0027s precision, I would guess that it\u0027s possible, but probably not a current priority. Improving precision of old APIs is technically a breaking change, and always has the potential to invalidate assumptions people have had for years, so we have to tread carefully. We have an eventual BigInteger refactor as one of our future goals in this area (which could include this improvement) but we can\u0027t commit to anything at the moment.",
                                           "updatedAt":  "2022-12-01T21:00:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aANCL",
                                           "createdAt":  "2023-04-15T23:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "speshuric",
                                           "body":  "I\u0027ve written draft of `Log` that handles cases when N\u003culong.MaxValue. To demonstration purposes I\u0027ve placed here the same `Log` as in `BigInteger` (initial checks are skipped) and the proposed one with commented changes. \r\nAll results for parameters up to ulong.MaxValue match to `Math.Log` results. Higher parameters do not match to `Math.Log` but match to `BigInteger.Log`.\r\nAs a performance bonus `Math.Log` called only once when N\u003culong.MaxValue but I didn\u0027t compare performance with BDN yet. If this approach is approved I\u0027ll check performance, write additional tests and make PR.\r\n\r\n\u003cdetails\u003e\u003csummary\u003eClick to expand and show the code\u003c/summary\u003e\r\n\u003cp\u003e\r\n\r\n```csharp\r\nusing System.Numerics;\r\n\r\nstatic double Log(uint[]? _bits, int _sign, double baseValue)\r\n{\r\n    // Note: some checks from original Log are skipped!\r\n\r\n    if (_bits == null)\r\n        return Math.Log(_sign, baseValue);\r\n\r\n    ulong h = _bits[_bits.Length - 1];\r\n    ulong m = _bits.Length \u003e 1 ? _bits[_bits.Length - 2] : 0;\r\n    ulong l = _bits.Length \u003e 2 ? _bits[_bits.Length - 3] : 0;\r\n\r\n    // Measure the exact bit count\r\n    int c = BitOperations.LeadingZeroCount((uint)h);\r\n    long b = (long)_bits.Length * 32 - c;\r\n\r\n    // Extract most significant bits\r\n    ulong x = (h \u003c\u003c 32 + c) | (m \u003c\u003c c) | (l \u003e\u003e 32 - c);\r\n\r\n    // Let v = value, b = bit count, x = v/2^b-64\r\n    // log ( v/2^b-64 * 2^b-64 ) = log ( x ) + log ( 2^b-64 )\r\n    return Math.Log(x, baseValue) + (b - 64) / Math.Log(baseValue, 2);\r\n}\r\n\r\nstatic double Log_new(uint[]? _bits, int _sign, double baseValue)\r\n{\r\n    // Note: some checks from original Log are skipped!\r\n\r\n    if (_bits == null)\r\n        return Math.Log(_sign, baseValue);\r\n    if (_bits.Length == 1) // Diff1: Handle Length == 1\r\n        return Math.Log(_bits[0], baseValue);\r\n    if (_bits.Length == 2) // Diff2: Handle Length == 2\r\n        return Math.Log((((ulong)_bits[1]) \u003c\u003c 32) | _bits[0], baseValue);\r\n\r\n    // Take last 3 digits\r\n    ulong h = _bits[^1]; // Diff3: use ^ notation\r\n    ulong m = _bits[^2];\r\n    ulong l = _bits[^3];\r\n\r\n    // Measure the exact bit count\r\n    int unusedHighBits = BitOperations.LeadingZeroCount((uint)h); // Diff4: Cosmetic - rename variable\r\n    long bitLength = (long)_bits.Length * 32 - unusedHighBits; // Diff5: Cosmetic - rename variable\r\n\r\n    // Extract most significant bits\r\n    ulong x = (h \u003c\u003c 32 + unusedHighBits) | (m \u003c\u003c unusedHighBits) | (l \u003e\u003e 32 - unusedHighBits);\r\n\r\n    // Let v = value, b = bit count, x = v/2^b-64\r\n    // log ( v/2^b-64 * 2^b-64 ) = log ( x ) + log ( 2^b-64 ) = log ( x ) + (b-64) * log ( 2 )\r\n\r\n    return Math.Log(x, baseValue) + (bitLength - 64) * Math.Log(2, baseValue); // Diff6: Used * instead of / , result is the same\r\n}\r\n\r\nstatic BigInteger ConstructValue(BigInteger baseValue, int exponentValue, int shift) =\u003e\r\n    BigInteger.Pow(baseValue, exponentValue) + shift;\r\n\r\n// only positives are handled!\r\nstatic (uint[]?, int) DeconstructValue(BigInteger testValue)\r\n{\r\n    if (testValue \u003c= int.MaxValue) return (null, (int)testValue);\r\n    int bitBength = (int)testValue.GetBitLength();\r\n    int length = (bitBength - 1) / 32 + 1;\r\n    long div = 1L \u003c\u003c 32;\r\n    uint[] res = new uint[length];\r\n\r\n    for (int i = 0; i\u003clength; i++)\r\n    {\r\n        res[i] = (uint) (testValue % div);\r\n        testValue = testValue / div;\r\n    }\r\n\r\n    return (res, 1);\r\n}\r\n\r\nstatic void PrintTest(BigInteger testValue, double[] bases)\r\n{\r\n    ulong testValueUL = testValue \u003c= ulong.MaxValue ? (ulong)testValue : 0;\r\n    double testValueD = (double)testValue;\r\n    Console.WriteLine($\"Value: {testValue}\");\r\n\r\n    for (int i = 0; i \u003c bases.Length; i++)\r\n    {\r\n        double currentbase = bases[i];\r\n        double dl = Math.Log(testValueD, currentbase);\r\n        Console.Write($\"base {currentbase}: {dl}\");\r\n\r\n        if (testValueUL \u003e 0)\r\n        {\r\n            double ull = Math.Log(testValueUL, currentbase);\r\n            double difful = Math.Abs(dl - ull);\r\n            Console.Write($\"\\t{ull}\\t{difful}\");\r\n        }\r\n\r\n        // This commented code just to check that BigInteger.Log equals to local Log\r\n\r\n        //double bil = BigInteger.Log(testValue, exponent);\r\n        //double diffbi = Math.Abs(dl - bil);\r\n        //Console.Write($\"\\t{bil}\\t{diffbi}\");\r\n\r\n        (uint[]? d_bits, int d_sign) = DeconstructValue(testValue);\r\n\r\n        double log_old = Log(d_bits, d_sign, currentbase);\r\n        double difflog_old = Math.Abs(dl - log_old);\r\n        Console.Write($\"\\t{log_old}\\t{difflog_old}\");\r\n\r\n        double log_new = Log_new(d_bits, d_sign, currentbase);\r\n        double difflog_new = Math.Abs(dl - log_new);\r\n        Console.Write($\"\\t{log_new}\\t{difflog_new}\");\r\n\r\n        Console.WriteLine();\r\n    }\r\n}\r\n\r\ndouble[] bases = { 2, 0.5, 4, 0.25, Math.Sqrt(2), Math.Sqrt(Math.Sqrt(2)),  Math.E, 1 / Math.E, Math.E * Math.E, 1 / (Math.E * Math.E), 10, 0.1, 100, 0.01 };\r\n\r\nBigInteger testValue =\r\n  ConstructValue(10, 14, -1);\r\n//  ConstructValue(10, 100, 0);\r\n//  ConstructValue(2, 512, 0);\r\n//  ConstructValue(3, 512, 0);\r\nPrintTest(testValue, bases);\r\n\r\n```\r\n\r\n\u003c/p\u003e\r\n\u003c/details\u003e ",
                                           "updatedAt":  "2023-04-15T23:55:02Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "BigInteger.Log issues",
        "labels":  [
                       "enhancement",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77969",
        "createdAt":  "2022-11-07T11:50:44Z",
        "number":  77969,
        "author":  "gfoidl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrkTHA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2022-11-07T18:30:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xqrzd",
                                            "createdAt":  "2022-11-22T16:03:34Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-19T12:38:02Z",
        "body":  "https://github.com/dotnet/runtime/pull/67939 added `IBinaryInteger\u003cT\u003e.WriteLittleEndian` as default interface method around `TryWriteLittleEndian` which is [implemented by the numeric types](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Numerics/IBinaryInteger.cs,1af7c8501ad6bd32,references).\r\n\r\nThe problem with the DIM is that value types get boxed, thus leading to unexpected allocations as encountered in https://github.com/dotnet/orleans/pull/8100#discussion_r1015299807.\r\n\r\nRepro:\r\n```c#\r\nusing System.Numerics;\r\n\r\nSpan\u003cbyte\u003e span = stackalloc byte[128];\r\nint value = 42;\r\n\r\nfor (int i = 0; i \u003c 1_000_000; ++i)\r\n{\r\n    WriteLittleEndian(span, value);\r\n}\r\n\r\nint collections = GC.CollectionCount(0);\r\nConsole.WriteLine($\"Collected: {(collections == 0 ? \"no\" : \"yes\")}\");\r\n\r\nstatic void WriteLittleEndian\u003cT\u003e(Span\u003cbyte\u003e buffer, T value) where T : struct, IBinaryInteger\u003cT\u003e\r\n{\r\n    value.WriteLittleEndian(buffer);\r\n}\r\n```\r\n\r\nMitigation is\r\n```diff\r\nstatic void WriteLittleEndian\u003cT\u003e(Span\u003cbyte\u003e buffer, T value) where T : struct, IBinaryInteger\u003cT\u003e\r\n{\r\n-    value.WriteLittleEndian(buffer);\r\n+    value.TryWriteLittleEndian(buffer, out _);\r\n}\r\n```\r\nBut that is non-intuitive.\r\n\r\nIt would be better to either remove the DIM and implement that method on the concrete types (code duplication) or to make it a static virtual interface method. The latter would be a breaking change and for .NET 7 it\u0027s too late (I fear).\r\nOr there\u0027s some compiler magic to undo the boxing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZG4Rkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5N0Dh6",
                                           "createdAt":  "2022-11-07T11:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-07T11:50:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N0hud",
                                           "createdAt":  "2022-11-07T13:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/67939 added `IBinaryInteger\u003cT\u003e.WriteLittleEndian` as default interface method around `TryWriteLittleEndian` which is [implemented by the numeric types](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Numerics/IBinaryInteger.cs,1af7c8501ad6bd32,references).\r\n\r\nThe problem with the DIM is that value types get boxed, thus leading to unexpected allocations as encountered in https://github.com/dotnet/orleans/pull/8100#discussion_r1015299807.\r\n\r\nRepro:\r\n```c#\r\nusing System.Numerics;\r\n\r\nSpan\u003cbyte\u003e span = stackalloc byte[128];\r\nint value = 42;\r\n\r\nfor (int i = 0; i \u003c 1_000_000; ++i)\r\n{\r\n    WriteLittleEndian(span, value);\r\n}\r\n\r\nint collections = GC.CollectionCount(0);\r\nConsole.WriteLine($\"Collected: {(collections == 0 ? \"no\" : \"yes\")}\");\r\n\r\nstatic void WriteLittleEndian\u003cT\u003e(Span\u003cbyte\u003e buffer, T value) where T : struct, IBinaryInteger\u003cT\u003e\r\n{\r\n    value.WriteLittleEndian(buffer);\r\n}\r\n```\r\n\r\nMitigation is\r\n```diff\r\nstatic void WriteLittleEndian\u003cT\u003e(Span\u003cbyte\u003e buffer, T value) where T : struct, IBinaryInteger\u003cT\u003e\r\n{\r\n-    value.WriteLittleEndian(buffer);\r\n+    value.TryWriteLittleEndian(buffer, out _);\r\n}\r\n```\r\nBut that is non-intuitive.\r\n\r\nIt would be better to either remove the DIM and implement that method on the concrete types (code duplication) or to make it a static virtual interface method. The latter would be a breaking change and for .NET 7 it\u0027s too late (I fear).\r\nOr there\u0027s some compiler magic to undo the boxing.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egfoidl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-07T13:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N7EkB",
                                           "createdAt":  "2022-11-08T14:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "I think there\u0027s a chance for JIT to optimize. \n\nSeems that the JIT cannot inline a DIM where the interface is generic:\n\nhttps://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHunHiUGAWQAUASg5ceUgJIAxCBAA8ASwB2GAHwMEDALwNVMAO4N5EMQG5JU7sXIBOYQgB0AFRi4MwlKVGir1FIAvjQh1DSeUACuYBimCgwgDHIKKuoaNJzh1GE0ahgwUABm2GAwyWaKrhnUWVL5DO6ewg0I4rpaCAFBQA===\n\nhttps://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHunHiUGAWQAUASg5ceUgJIAxCBAA8ASwB2GAHwMEDALwNVMAO4N5EMQG5JU7sXIBOYQgB0AFRi4MwlKVGir1FIAvjQh1DSeUACuYBimCgwgDHIKKuoaNJyBPGpxKUq5Gm4eXrna4rpaCAFhNLkwUABm2GAwyWaKrhnUWVJl7p7CZQj+oUA==\n\n/cc: @EgorBo ",
                                           "updatedAt":  "2022-11-08T14:44:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VBZE6",
                                           "createdAt":  "2023-02-10T22:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDnWuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2023-08-14T20:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Assuming the JIT approach does not work, we will likely implement these explicitly on the numeric types on .NET 8 to avoid this performance loss.",
                                           "updatedAt":  "2023-02-10T22:34:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAdxc",
                                           "createdAt":  "2023-08-14T18:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The JIT can do things here but the types can also provide explicit implementations for these methods that do the same thing as the DIM.\r\n\r\nIt\u0027s a \"fix anytime\" issue, contributions are welcome.",
                                           "updatedAt":  "2023-08-14T18:15:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kbhGT",
                                           "createdAt":  "2023-08-19T12:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfoidl",
                                           "body":  "\u003e It\u0027s a \"fix anytime\" issue, contributions are welcome.\r\n\r\nI\u0027ll look into this, but can\u0027t say when (maybe in September)",
                                           "updatedAt":  "2023-08-19T12:38:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Perf-trap with `IBinaryInteger\u003cT\u003e.WriteLittleEndian`",
        "labels":  [
                       "area-System.Numerics",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80876",
        "createdAt":  "2023-01-19T20:44:46Z",
        "number":  80876,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:13:18Z",
        "body":  "All 4 runs in https://github.com/dotnet/runtime/blob/f8218f9c4aaf4d6725524dc5d9e14c985e0f1b51/src/libraries/System.Numerics.Vectors/tests/Matrix4x4Tests.cs#L79 \r\nfail where an actual value is 0.\r\n\r\n```\r\nExpected: 1.00000012\r\nActual:   0\r\n```\r\n\r\n```\r\nExpected: 3.14343429\r\nActual:   0\r\n```\r\n\r\n```\r\nExpected: 1\r\nActual:   0\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU01gTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TTWBM",
                                           "createdAt":  "2023-01-19T20:44:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAll 4 runs in https://github.com/dotnet/runtime/blob/f8218f9c4aaf4d6725524dc5d9e14c985e0f1b51/src/libraries/System.Numerics.Vectors/tests/Matrix4x4Tests.cs#L79 \r\nfail where an actual value is 0.\r\n\r\n```\r\nExpected: 1.00000012\r\nActual:   0\r\n```\r\n\r\n```\r\nExpected: 3.14343429\r\nActual:   0\r\n```\r\n\r\n```\r\nExpected: 1\r\nActual:   0\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-19T20:44:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[iOS] Matrix4x4Tests.Matrix4x4IndexerSetTest test fails",
        "labels":  [
                       "area-System.Numerics",
                       "disabled-test",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81376",
        "createdAt":  "2023-01-30T19:47:14Z",
        "number":  81376,
        "author":  "dakersnar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHgGdA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Zintom",
                                            "createdAt":  "2023-01-30T20:25:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jeffhandley",
                                            "createdAt":  "2023-01-30T21:13:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "KTSnowy",
                                            "createdAt":  "2023-01-30T23:43:19Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "KTSnowy",
                                            "createdAt":  "2023-01-30T23:43:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quixoticaxis",
                                            "createdAt":  "2023-01-31T00:24:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2023-01-31T06:51:29Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2023-01-31T06:51:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2023-01-31T06:51:44Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2023-01-31T06:51:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KTSnowy",
                                            "createdAt":  "2023-02-01T00:55:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-02-01T01:19:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-02-01T17:02:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-02-01T17:02:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frankbuckley",
                                            "createdAt":  "2023-02-02T13:43:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2023-02-05T13:36:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Squirrelies",
                                            "createdAt":  "2023-03-12T01:41:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2023-05-26T15:33:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "orthoxerox",
                                            "createdAt":  "2023-06-13T12:20:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "crookseta",
                                            "createdAt":  "2023-11-18T22:57:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2023-12-27T00:20:44Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2023-12-27T00:20:46Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2023-12-27T00:20:49Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2023-12-27T00:20:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikhail-khalizev",
                                            "createdAt":  "2024-03-08T15:44:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eydelrivero",
                                            "createdAt":  "2024-03-10T16:10:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olivier-spinelli",
                                            "createdAt":  "2024-03-28T12:00:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tommo56700",
                                            "createdAt":  "2024-04-01T16:02:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-07T01:06:21Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-07-30T13:01:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2024-08-01T02:49:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2024-08-10T13:09:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DerPurp",
                                            "createdAt":  "2025-01-04T09:26:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coltonk9043",
                                            "createdAt":  "2025-03-03T20:06:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "coltonk9043",
                                            "createdAt":  "2025-03-03T20:06:34Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "coltonk9043",
                                            "createdAt":  "2025-03-03T20:06:35Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "coltonk9043",
                                            "createdAt":  "2025-03-03T20:06:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2025-04-01T07:12:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sdcb",
                                            "createdAt":  "2025-06-25T03:43:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2025-07-18T02:56:33Z"
                                        }
                                    ],
                          "totalCount":  39
                      },
        "updatedAt":  "2025-09-09T12:20:07Z",
        "body":  "### Background and motivation\r\n\r\nThis is a restructuring of the original API proposal here: https://github.com/dotnet/runtime/issues/69777\r\n\r\nThe existing `System.Decimal` type does not conform to the IEEE standard for decimal floating-point types. We have no plans to rehash `System.Decimal`, but adding `Decimal32`, `Decimal64`, and `Decimal128` in addition would allow users to work within a standard that is being adopted by other languages and frameworks. There is also a future where hardware support for these types is more widely adopted, and having IEEE-conforming types will allow us to users to take advantage of performance gains.\r\n\r\n\r\nFor reference, here is a chart comparing the existing System.Decimal type to the IEEE types:\r\nDecimal   Comparison Chart | System.Decimal | Decimal128 | Decimal64 | Decimal32\r\n-- | -- | -- | -- | --\r\nSize | 128 bits | 128 bits | 64 bits | 32 bits\r\nMax   value | ~7.9e28 | ~9.9e6144 | ~9.9e384 | ~9.9e96\r\nMin   value | ~-7.9e28 | ~-9.9e6144 | ~-9.9e384 | ~-9.9e96\r\nSmallest   magnitude non-zero value | 1e-28 | 1e-6176 | 1e-398 | 1e-101\r\nDecimal   digits of precision | 28 | 34 | 16 | 7\r\n\r\n\r\n\r\n\r\n### Alternative Designs\r\n\r\n- Notably, a few APIs below have been annotated with `PLATINUM`. These APIs represent high-implementation-cost functionality that is only \"recommended\" by IEEE. These are APIs that we might want eventually, as implementing all of them will allow these types to inherit from `IFloatingPointIeee754` instead of just `IFloatingPoint`. Given the implementation cost, we are targeting shipping a smaller surface for .NET 8 that does not include the `PLATINUM` APIs.\r\n- While this proposal covers all three types, there is an argument for focusing on one of them for .NET 8. The implementation cost of adding all three isn\u0027t exactly 3x the cost of adding one, but it isn\u0027t completely trivial either.\r\n- Do we want a constructor? Decimal128 can sometimes use the `.123m` literal syntax (because it represents a superset of System.Decimal), but otherwise the only real way to accurately create these types is via parsing. EDIT: yes, added constructor\r\n\r\n### Risks/Considerations\r\n\r\n- There is a potential risk when it comes to code size, especially for `Decimal128`, as the current lack of hardware support will require the below APIs to be implemented in software.\r\n- These must be implemented such that it is easy to wire up hardware support if/when it becomes more widespread.\r\n- There is potential for confusion with these coexisting with `System.Decimal`. We are mitigating this by placing these types in `System.Numerics`. Clear documentation will be required.\r\n\r\n### API Proposal\r\n\r\n`Decimal32` is shown, but the API surfaces for `Decimal64` and `Decimal128` are nearly identical, bar some differences in the conversions (which are noted below). This proposal is for all three types.\r\n\r\n```C#\r\nnamespace System.Numerics\r\n{\r\n\r\n    /// \u003csummary\u003eDefines an IEEE 754 floating-point type that is represented in a base-10 format.\u003c/summary\u003e\r\n    /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n    public interface IDecimalFloatingPointIeee754\u003cTSelf\u003e // PLATINUM\r\n        : IFloatingPointIeee754\u003cTSelf\u003e\r\n        where TSelf : IDecimalFloatingPointIeee754\u003cTSelf\u003e\r\n    {\r\n        // IEEE Spec 5.3.2\r\n        static abstract TSelf Quantize(TSelf x, TSelf y);\r\n        static abstract TSelf Quantum(TSelf x);\r\n\r\n        // IEEE Spec 5.7.3\r\n        static abstract bool SameQuantum(TSelf x, TSelf y);\r\n    }\r\n\r\n    //\r\n    // Summary:\r\n    //     Represents a 32-bit IEEE decimal floating-point number\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public readonly struct Decimal32\r\n        : IComparable\u003cDecimal32\u003e,\r\n          IComparable,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cDecimal32\u003e,\r\n          IEquatable\u003cDecimal32\u003e,\r\n          IFloatingPoint\u003cDecimal32\u003e,/*PLATINUM: Replace with IDecimalFloatingPointIeee754\u003cDecimal32\u003e,*/\r\n          IMinMaxValue\u003cDecimal32\u003e\r\n    {\r\n        internal readonly uint _value; // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        public Decimal32(int significand, int exponent); // NOTE: params are (long, int) for Decimal64 and (Int128, int) for Decimal128\r\n\r\n        //\r\n        // Parsing (INumberBase, IParsable, ISpanParsable, other)\r\n        //\r\n\r\n        public static Decimal32 Parse(string s);\r\n        public static Decimal32 Parse(string s, NumberStyles style);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(string s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style = DefaultParseStyle, IFormatProvider? provider = null);\r\n        public static Decimal32 Parse(string s, NumberStyles style, IFormatProvider? provider);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n\r\n        //\r\n        // Misc. Methods (including IComparable, IEquatable, other)\r\n        //\r\n\r\n        public int CompareTo(object? obj);\r\n        public int CompareTo(Decimal32 other);\r\n        public override bool Equals([NotNullWhen(true)] object? obj);\r\n        public bool Equals(Decimal32 other);\r\n        public override int GetHashCode();\r\n        // 5.5.2 of the IEEE Spec\r\n        public static uint EncodeDecimal(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeDecimal(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static uint EncodeBinary(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeBinary(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        //\r\n        // Formatting (IFormattable, ISpanFormattable, other)\r\n        //\r\n        \r\n        public override string ToString();\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\r\n        public string ToString(IFormatProvider? provider);\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\r\n        public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, [StringSyntax(StringSyntaxAttribute.NumericFormat)] ReadOnlySpan\u003cchar\u003e format = default, IFormatProvider? provider = null);\r\n\r\n        //\r\n        // Explicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is lossy)\r\n        //\r\n\r\n        public static explicit operator Decimal32(int value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(uint value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nint value);  // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nuint value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(long value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(ulong value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Int128 value);\r\n        public static explicit operator Decimal32(UInt128 value);\r\n        public static explicit operator Decimal32(Half value);\r\n        public static explicit operator Decimal32(float value);\r\n        public static explicit operator Decimal32(double value);\r\n        public static explicit operator Decimal32(decimal value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Decimal64 value);\r\n        public static explicit operator Decimal32(Decimal128 value);\r\n\r\n        //\r\n        // Explicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is lossy)\r\n        // - Includes a \"checked\" conversion if T cannot represent infinity and NaN\r\n        //\r\n        public static explicit operator byte(Decimal32 value);\r\n        public static explicit operator checked byte(Decimal32 value);\r\n        public static explicit operator sbyte(Decimal32 value);\r\n        public static explicit operator checked sbyte(Decimal32 value);\r\n        public static explicit operator char(Decimal32 value);\r\n        public static explicit operator checked char(Decimal32 value);\r\n        public static explicit operator short(Decimal32 value);\r\n        public static explicit operator checked short(Decimal32 value);\r\n        public static explicit operator ushort(Decimal32 value);\r\n        public static explicit operator checked ushort(Decimal32 value);\r\n        public static explicit operator int(Decimal32 value);\r\n        public static explicit operator checked int(Decimal32 value);\r\n        public static explicit operator uint(Decimal32 value);\r\n        public static explicit operator checked uint(Decimal32 value);\r\n        public static explicit operator nint(Decimal32 value);        \r\n        public static explicit operator checked nint(Decimal32 value);\r\n        public static explicit operator nuint(Decimal32 value);\r\n        public static explicit operator checked nuint(Decimal32 value);\r\n        public static explicit operator long(Decimal32 value);\r\n        public static explicit operator checked long(Decimal32 value);\r\n        public static explicit operator ulong(Decimal32 value);\r\n        public static explicit operator checked ulong(Decimal32 value);\r\n        public static explicit operator Int128(Decimal32 value);       \r\n        public static explicit operator checked Int128(Decimal32 value);\r\n        public static explicit operator UInt128(Decimal32 value);\r\n        public static explicit operator checked UInt128(Decimal32 value);\r\n        public static explicit operator Half(Decimal32 value);\r\n        public static explicit operator float(Decimal32 value);\r\n        public static explicit operator double(Decimal32 value);\r\n        public static explicit operator decimal(Decimal32 value); // Doesn\u0027t have a \"checked\" for historical reasons\r\n\r\n\r\n        //\r\n        // Implicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is not lossy)\r\n        //\r\n        public static implicit operator Decimal32(byte value);\r\n        public static implicit operator Decimal32(sbyte value);\r\n        public static implicit operator Decimal32(char value);\r\n        public static implicit operator Decimal32(short value);\r\n        public static implicit operator Decimal32(ushort value);\r\n\r\n        //\r\n        // Implicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is not lossy)\r\n        //\r\n        public static implicit operator Decimal64(Decimal32 value);\r\n        public static implicit operator Decimal128(Decimal32 value);\r\n\r\n        //\r\n        // IAdditionOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IAdditiveIdentity\r\n        //\r\n        static Decimal32 IAdditiveIdentity\u003cDecimal32, Decimal32\u003e.AdditiveIdentity { get; }\r\n\r\n\r\n        //\r\n        // IComparisonOperators\r\n        //\r\n        public static bool operator \u003c(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003c=(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IDecimalFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Quantize(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Quantum(Decimal32 x);\r\n        public static bool SameQuantum(Decimal32 x, Decimal32 y);\r\n\r\n        //\r\n        // IDecrementOperators\r\n        //\r\n        public static Decimal32 operator --(Decimal32 value);\r\n\r\n        //\r\n        // IDivisionOperators\r\n        //\r\n        public static Decimal32 operator /(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IEqualityOperators\r\n        //\r\n        public static bool operator ==(Decimal32 left, Decimal32 right);\r\n        public static bool operator !=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IExponentialFunctions\r\n        //\r\n        public static Decimal32 Exp(Decimal32 x); // PLATINUM\r\n        public static Decimal32 ExpM1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2M1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10M1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IFloatingPoint\r\n        //\r\n        public static Decimal32 Ceiling(Decimal32 x);\r\n        public static Decimal32 Floor(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x, int digits);\r\n        public static Decimal32 Round(Decimal32 x, MidpointRounding mode);\r\n        public static Decimal32 Round(Decimal32 x, int digits, MidpointRounding mode);\r\n        public static Decimal32 Truncate(Decimal32 x);\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentByteCount();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentShortestBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandByteCount();\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n\r\n        //\r\n        // IFloatingPointConstants\r\n        //\r\n        public static Decimal32 E { get; }\r\n        public static Decimal32 Pi { get; }\r\n        public static Decimal32 Tau { get; }\r\n\r\n        //\r\n        // IFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Epsilon { get; }\r\n        public static Decimal32 NaN { get; }\r\n        public static Decimal32 NegativeInfinity { get; }\r\n        public static Decimal32 NegativeZero { get; }\r\n        public static Decimal32 PositiveInfinity { get; }\r\n        public static Decimal32 Atan2(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan2Pi(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 BitDecrement(Decimal32 x);\r\n        public static Decimal32 BitIncrement(Decimal32 x);\r\n        public static Decimal32 FusedMultiplyAdd(Decimal32 left, Decimal32 right, Decimal32 addend);\r\n        public static Decimal32 Ieee754Remainder(Decimal32 left, Decimal32 right);\r\n        public static int ILogB(Decimal32 x);\r\n        public static Decimal32 Lerp(Decimal32 value1, Decimal32 value2, Decimal32 amount);\r\n        public static Decimal32 ReciprocalEstimate(Decimal32 x);\r\n        public static Decimal32 ReciprocalSqrtEstimate(Decimal32 x);\r\n        public static Decimal32 ScaleB(Decimal32 x, int n);\r\n        // public static Decimal32 Compound(Half x, Decimal32 n); (Already approved in API review but not implemented yet) // PLATINUM\r\n\r\n        //\r\n        // IHyperbolicFunctions\r\n        //\r\n        public static Decimal32 Acosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atanh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tanh(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IIncrementOperators\r\n        //\r\n        public static Decimal32 operator ++(Decimal32 value);\r\n\r\n        //\r\n        // ILogarithmicFunctions\r\n        //\r\n        public static Decimal32 Log(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log(Decimal32 x, Decimal32 newBase); // PLATINUM\r\n        public static Decimal32 Log10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 LogP1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2P1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log10P1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IMinMaxValue\r\n        //\r\n        public static Decimal32 MaxValue { get; }\r\n        public static Decimal32 MinValue { get; }\r\n\r\n        //\r\n        // IModulusOperators\r\n        //\r\n        public static Decimal32 operator %(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IMultiplicativeIdentity\r\n        //\r\n        public static Decimal32 MultiplicativeIdentity { get; }\r\n\r\n        //\r\n        // IMultiplyOperators\r\n        //\r\n        public static Decimal32 operator *(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // INumber\r\n        //\r\n        public static Decimal32 Clamp(Decimal32 value, Decimal32 min, Decimal32 max);\r\n        public static Decimal32 CopySign(Decimal32 value, Decimal32 sign);\r\n        public static Decimal32 Max(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Min(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinNumber(Decimal32 x, Decimal32 y);\r\n        public static int Sign(Decimal32 value);\r\n\r\n\r\n        //\r\n        // INumberBase (well defined/commonly used values)\r\n        //\r\n        public static Decimal32 One { get; }\r\n        static int INumberBase\u003cDecimal32\u003e.Radix; // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 Zero { get; }\r\n        public static Decimal32 Abs(Decimal32 value);\r\n        public static Decimal32 CreateChecked\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateSaturating\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateTruncating\u003cTOther\u003e(TOther value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsCanonical(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        static bool INumberBase\u003cDecimal32\u003e.IsComplexNumber(Decimal32 value);\r\n        public static bool IsEvenInteger(Decimal32 value);\r\n        public static bool IsFinite(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsImaginaryNumber(Decimal32 value);\r\n        public static bool IsInfinity(Decimal32 value);\r\n        public static bool IsInteger(Decimal32 value);\r\n        public static bool IsNaN(Decimal32 value);\r\n        public static bool IsNegative(Decimal32 value);\r\n        public static bool IsNegativeInfinity(Decimal32 value);\r\n        public static bool IsNormal(Decimal32 value);\r\n        public static bool IsOddInteger(Decimal32 value);\r\n        public static bool IsPositive(Decimal32 value);\r\n        public static bool IsPositiveInfinity(Decimal32 value);\r\n        public static bool IsRealNumber(Decimal32 value);\r\n        public static bool IsSubnormal(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsZero(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 MaxMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromChecked\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromSaturating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromTruncating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToChecked\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToSaturating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToTruncating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n\r\n        //\r\n        // IPowerFunctions\r\n        //\r\n        public static Decimal32 Pow(Decimal32 x, Decimal32 y); // PLATINUM\r\n\r\n        //\r\n        // IRootFunctions\r\n        //\r\n        public static Decimal32 Cbrt(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Hypot(Decimal32 x, Decimal32 y); // PLATINUM\r\n        public static Decimal32 RootN(Decimal32 x, int n); // PLATINUM\r\n        public static Decimal32 Sqrt(Decimal32 x);\r\n\r\n        //\r\n        // ISignedNumber\r\n        //\r\n        public static Decimal32 NegativeOne { get; }\r\n\r\n        //\r\n        // ISubtractionOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // ITrigonometricFunctions\r\n        //\r\n        public static Decimal32 Acos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AcosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asin(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AsinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AtanPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 CosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sin(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 Sin, Decimal32 Cos) SinCos(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 SinPi, Decimal32 CosPi) SinCosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 SinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 TanPi(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IUnaryNegationOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 value);\r\n\r\n        //\r\n        // IUnaryPlusOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 value);\r\n    }\r\n}\r\n\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcUxNTg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5T_z6d",
                                           "createdAt":  "2023-01-30T19:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThis is a restructuring of the original API proposal here: https://github.com/dotnet/runtime/issues/69777\r\n\r\nThe existing `System.Decimal` type does not conform to the IEEE standard for decimal floating-point types. We have no plans to rehash `System.Decimal`, but adding `Decimal32`, `Decimal64`, and `Decimal128` in addition would allow users to work within a standard that is being adopted by other languages and frameworks. There is also a future where hardware support for these types is more widely adopted, and having IEEE-conforming types will allow us to users to take advantage of performance gains.\r\n\r\n### Alternative Designs\r\n\r\n- Notably, a few APIs below have been annotated with `PLATINUM`. These APIs represent high-implementation-cost functionality that is only \"recommended\" by IEEE. These are APIs that we might want eventually, as implementing all of them will allow these types to inherit from `IFloatingPointIeee754` instead of just `IFloatingPoint`. Given the implementation cost, we are targeting shipping a smaller surface for .NET 8 that does not include the `PLATINUM` APIs.\r\n- While this proposal covers all three types, there is an argument for focusing on one of them for .NET 8. The implementation cost of adding all three isn\u0027t exactly 3x the cost of adding one, but it isn\u0027t completely trivial either.\r\n\r\n### Risks\r\n\r\n- There is a potential risk when it comes to code size, especially for `Decimal128`, as the current lack of hardware support will require the below APIs to be implemented in software.\r\n- These must be implemented with future hardware support integration in mind.\r\n- There is potential for confusion with these coexisting with `System.Decimal`. We are mitigating this by placing these types in `System.Numerics`. Clear documentation will be required.\r\n\r\n### API Proposal\r\n\r\n`Decimal32` is shown, but the API surfaces for `Decimal64` and `Decimal128` are nearly identical, bar some differences in the conversions (which are noted below). This proposal is for all three types.\r\n\r\n```C#\r\nnamespace System.Numerics\r\n{\r\n\r\n    /// \u003csummary\u003eDefines an IEEE 754 floating-point type that is represented in a base-10 format.\u003c/summary\u003e\r\n    /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n    public interface IDecimalFloatingPointIeee754\u003cTSelf\u003e // PLATINUM\r\n        : IFloatingPointIeee754\u003cTSelf\u003e\r\n        where TSelf : IDecimalFloatingPointIeee754\u003cTSelf\u003e\r\n    {\r\n        // IEEE Spec 5.3.2\r\n        static abstract TSelf Quantize(TSelf x, TSelf y);\r\n        static abstract TSelf Quantum(TSelf x);\r\n\r\n        // IEEE Spec 5.7.3\r\n        static abstract bool SameQuantum(TSelf x, TSelf y);\r\n    }\r\n\r\n    //\r\n    // Summary:\r\n    //     Represents a 32-bit IEEE decimal floating-point number\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public readonly struct Decimal32\r\n        : IComparable\u003cDecimal32\u003e,\r\n          IComparable,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cDecimal32\u003e,\r\n          IEquatable\u003cDecimal32\u003e,\r\n          IFloatingPoint\u003cDecimal32\u003e,/*PLATINUM: Replace with IDecimalFloatingPointIeee754\u003cDecimal32\u003e,*/\r\n          IMinMaxValue\u003cDecimal32\u003e\r\n    {\r\n        internal readonly uint _value;\r\n\r\n        //\r\n        // Parsing (INumberBase, IParsable, ISpanParsable)\r\n        //\r\n\r\n        public static Decimal32 Parse(string s);\r\n        public static Decimal32 Parse(string s, NumberStyles style);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(string s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style = DefaultParseStyle, IFormatProvider? provider = null);\r\n        public static Decimal32 Parse(string s, NumberStyles style, IFormatProvider? provider);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n\r\n        //\r\n        // Misc. Methods (including IComparable, IEquatable)\r\n        //\r\n\r\n        public int CompareTo(object? obj);\r\n        public int CompareTo(Decimal32 other);\r\n        public override bool Equals([NotNullWhen(true)] object? obj);\r\n        public bool Equals(Decimal32 other);\r\n        public override int GetHashCode();\r\n        // 5.5.2 of the IEEE Spec\r\n        public static uint EncodeDecimal(Decimal32 x);\r\n        public static Decimal32 DecodeDecimal(uint x);\r\n        public static uint EncodeBinary(Decimal32 x);\r\n        public static Decimal32 DecodeBinary(uint x);\r\n\r\n        //\r\n        // Formatting (IFormattable, ISpanFormattable)\r\n        //\r\n        \r\n        public override string ToString();\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\r\n        public string ToString(IFormatProvider? provider);\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\r\n        public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, [StringSyntax(StringSyntaxAttribute.NumericFormat)] ReadOnlySpan\u003cchar\u003e format = default, IFormatProvider? provider = null);\r\n\r\n        //\r\n        // Explicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is lossy)\r\n        //\r\n\r\n        public static explicit operator Decimal32(int value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(uint value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nint value);  // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nuint value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(long value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(ulong value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Int128 value);\r\n        public static explicit operator Decimal32(UInt128 value);\r\n        public static explicit operator Decimal32(Half value);\r\n        public static explicit operator Decimal32(float value);\r\n        public static explicit operator Decimal32(double value);\r\n        public static explicit operator Decimal32(decimal value);\r\n        public static explicit operator Decimal32(Decimal64 value);\r\n        public static explicit operator Decimal32(Decimal128 value);\r\n\r\n        //\r\n        // Explicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is lossy)\r\n        // - Includes a \"checked\" conversion if T cannot represent infinity and NaN\r\n        //\r\n        public static explicit operator byte(Decimal32 value);\r\n        public static explicit operator checked byte(Decimal32 value);\r\n        public static explicit operator sbyte(Decimal32 value);\r\n        public static explicit operator checked sbyte(Decimal32 value);\r\n        public static explicit operator char(Decimal32 value);\r\n        public static explicit operator checked char(Decimal32 value);\r\n        public static explicit operator short(Decimal32 value);\r\n        public static explicit operator checked short(Decimal32 value);\r\n        public static explicit operator ushort(Decimal32 value);\r\n        public static explicit operator checked ushort(Decimal32 value);\r\n        public static explicit operator int(Decimal32 value);\r\n        public static explicit operator checked int(Decimal32 value);\r\n        public static explicit operator uint(Decimal32 value);\r\n        public static explicit operator checked uint(Decimal32 value);\r\n        public static explicit operator nint(Decimal32 value);        \r\n        public static explicit operator checked nint(Decimal32 value);\r\n        public static explicit operator nuint(Decimal32 value);\r\n        public static explicit operator checked nuint(Decimal32 value);\r\n        public static explicit operator long(Decimal32 value);\r\n        public static explicit operator checked long(Decimal32 value);\r\n        public static explicit operator ulong(Decimal32 value);\r\n        public static explicit operator checked ulong(Decimal32 value);\r\n        public static explicit operator Int128(Decimal32 value);       \r\n        public static explicit operator checked Int128(Decimal32 value);\r\n        public static explicit operator UInt128(Decimal32 value);\r\n        public static explicit operator checked UInt128(Decimal32 value);\r\n        public static explicit operator Half(Decimal32 value);\r\n        public static explicit operator float(Decimal32 value);\r\n        public static explicit operator double(Decimal32 value);\r\n        public static explicit operator decimal(Decimal32 value); // Doesn\u0027t have a \"checked\" for historical reasons\r\n\r\n\r\n        //\r\n        // Implicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is not lossy)\r\n        //\r\n        public static implicit operator Decimal32(byte value);\r\n        public static implicit operator Decimal32(sbyte value);\r\n        public static implicit operator Decimal32(char value);\r\n        public static implicit operator Decimal32(short value);\r\n        public static implicit operator Decimal32(ushort value);\r\n\r\n        //\r\n        // Implicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is not lossy)\r\n        //\r\n        public static implicit operator Decimal64(Decimal32 value);\r\n        public static implicit operator Decimal128(Decimal32 value);\r\n\r\n        //\r\n        // IAdditionOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IAdditiveIdentity\r\n        //\r\n        static Decimal32 IAdditiveIdentity\u003cDecimal32, Decimal32\u003e.AdditiveIdentity;\r\n\r\n\r\n        //\r\n        // IComparisonOperators\r\n        //\r\n        public static bool operator \u003c(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003c=(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IDecimalFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Quantize(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Quantum(Decimal32 x);\r\n        public static bool SameQuantum(Decimal32 x, Decimal32 y);\r\n\r\n        //\r\n        // IDecrementOperators\r\n        //\r\n        public static Decimal32 operator --(Decimal32 value);\r\n\r\n        //\r\n        // IDivisionOperators\r\n        //\r\n        public static Decimal32 operator /(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IEqualityOperators\r\n        //\r\n        public static bool operator ==(Decimal32 left, Decimal32 right);\r\n        public static bool operator !=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IExponentialFunctions\r\n        //\r\n        public static Decimal32 Exp(Decimal32 x); // PLATINUM\r\n        public static Decimal32 ExpM1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2M1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10M1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IFloatingPoint\r\n        //\r\n        public static Decimal32 Ceiling(Decimal32 x);\r\n        public static Decimal32 Floor(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x, int digits);\r\n        public static Decimal32 Round(Decimal32 x, MidpointRounding mode);\r\n        public static Decimal32 Round(Decimal32 x, int digits, MidpointRounding mode);\r\n        public static Decimal32 Truncate(Decimal32 x);\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentByteCount();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentShortestBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandByteCount();\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n\r\n        //\r\n        // IFloatingPointConstants\r\n        //\r\n        public static Decimal32 E;\r\n        public static Decimal32 Pi;\r\n        public static Decimal32 Tau;\r\n\r\n        //\r\n        // IFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Epsilon;\r\n        public static Decimal32 NaN;\r\n        public static Decimal32 NegativeInfinity;\r\n        public static Decimal32 NegativeZero;\r\n        public static Decimal32 PositiveInfinity;\r\n        public static Decimal32 Atan2(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan2Pi(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 BitDecrement(Decimal32 x);\r\n        public static Decimal32 BitIncrement(Decimal32 x);\r\n        public static Decimal32 FusedMultiplyAdd(Decimal32 left, Decimal32 right, Decimal32 addend);\r\n        public static Decimal32 Ieee754Remainder(Decimal32 left, Decimal32 right);\r\n        public static int ILogB(Decimal32 x);\r\n        public static Decimal32 Lerp(Decimal32 value1, Decimal32 value2, Decimal32 amount);\r\n        public static Decimal32 ReciprocalEstimate(Decimal32 x);\r\n        public static Decimal32 ReciprocalSqrtEstimate(Decimal32 x);\r\n        public static Decimal32 ScaleB(Decimal32 x, int n);\r\n        // public static Decimal32 Compound(Half x, Decimal32 n); (Already approved in API review but not implemented yet) // PLATINUM\r\n\r\n        //\r\n        // IHyperbolicFunctions\r\n        //\r\n        public static Decimal32 Acosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atanh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tanh(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IIncrementOperators\r\n        //\r\n        public static Decimal32 operator ++(Decimal32 value);\r\n\r\n        //\r\n        // ILogarithmicFunctions\r\n        //\r\n        public static Decimal32 Log(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log(Decimal32 x, Decimal32 newBase); // PLATINUM\r\n        public static Decimal32 Log10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 LogP1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2P1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log10P1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IMinMaxValue\r\n        //\r\n        public static Decimal32 MaxValue;\r\n        public static Decimal32 MinValue;\r\n\r\n        //\r\n        // IModulusOperators\r\n        //\r\n        public static Decimal32 operator %(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IMultiplicativeIdentity\r\n        //\r\n        public static Decimal32 MultiplicativeIdentity;\r\n\r\n        //\r\n        // IMultiplyOperators\r\n        //\r\n        public static Decimal32 operator *(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // INumber\r\n        //\r\n        public static Decimal32 Clamp(Decimal32 value, Decimal32 min, Decimal32 max);\r\n        public static Decimal32 CopySign(Decimal32 value, Decimal32 sign);\r\n        public static Decimal32 Max(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Min(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinNumber(Decimal32 x, Decimal32 y);\r\n        public static int Sign(Decimal32 value);\r\n\r\n\r\n        //\r\n        // INumberBase (well defined/commonly used values)\r\n        //\r\n        public static Decimal32 One;\r\n        static int INumberBase\u003cDecimal32\u003e.Radix; // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 Zero;\r\n        public static Decimal32 Abs(Decimal32 value);\r\n        public static Decimal32 CreateChecked\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateSaturating\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateTruncating\u003cTOther\u003e(TOther value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsCanonical(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        static bool INumberBase\u003cDecimal32\u003e.IsComplexNumber(Decimal32 value);\r\n        public static bool IsEvenInteger(Decimal32 value);\r\n        public static bool IsFinite(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsImaginaryNumber(Decimal32 value);\r\n        public static bool IsInfinity(Decimal32 value);\r\n        public static bool IsInteger(Decimal32 value);\r\n        public static bool IsNaN(Decimal32 value);\r\n        public static bool IsNegative(Decimal32 value);\r\n        public static bool IsNegativeInfinity(Decimal32 value);\r\n        public static bool IsNormal(Decimal32 value);\r\n        public static bool IsOddInteger(Decimal32 value);\r\n        public static bool IsPositive(Decimal32 value);\r\n        public static bool IsPositiveInfinity(Decimal32 value);\r\n        public static bool IsRealNumber(Decimal32 value);\r\n        public static bool IsSubnormal(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsZero(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 MaxMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromChecked\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromSaturating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromTruncating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToChecked\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToSaturating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToTruncating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n\r\n        //\r\n        // IPowerFunctions\r\n        //\r\n        public static Decimal32 Pow(Decimal32 x, Decimal32 y); // PLATINUM\r\n\r\n        //\r\n        // IRootFunctions\r\n        //\r\n        public static Decimal32 Cbrt(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Hypot(Decimal32 x, Decimal32 y); // PLATINUM\r\n        public static Decimal32 RootN(Decimal32 x, int n); // PLATINUM\r\n        public static Decimal32 Sqrt(Decimal32 x);\r\n\r\n        //\r\n        // ISignedNumber\r\n        //\r\n        public static Decimal32 NegativeOne;\r\n\r\n        //\r\n        // ISubtractionOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // ITrigonometricFunctions\r\n        //\r\n        public static Decimal32 Acos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AcosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asin(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AsinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AtanPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 CosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sin(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 Sin, Decimal32 Cos) SinCos(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 SinPi, Decimal32 CosPi) SinCosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 SinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 TanPi(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IUnaryNegationOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 value);\r\n\r\n        //\r\n        // IUnaryPlusOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 value);\r\n    }\r\n}\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edakersnar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-30T19:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAckk",
                                           "createdAt":  "2023-01-30T21:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e These must be implemented with future hardware support integration in mind.\r\n\r\nThis is a bit strong. In order for customers to benefit from future hardware these APIs must be implemented. The above implies these APIs should be implemented because of future hardware which doesn\u0027t seem correct. This is an increasingly niche API surface area and I think we should determine a customer and if it is a current need for .NET 8 or perhaps a future release.",
                                           "updatedAt":  "2023-01-30T21:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAets",
                                           "createdAt":  "2023-01-30T21:56:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1Fkig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-01-30T21:57:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "@AaronRobinsonMSFT Let me adjust my wording, what I meant to imply with that bullet point was that *if* we are going to implement these types, we must implement them with future hardware support in mind. In other words, we should implement them in such a way that, if hardware support is eventually released and widespread, we can easily wire these up to those intrinsics.",
                                           "updatedAt":  "2023-01-30T21:56:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAexn",
                                           "createdAt":  "2023-01-30T21:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsDU4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-30T04:07:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e This is a bit strong. In order for customers to benefit from future hardware these APIs must be implemented.\r\n\r\n@AaronRobinsonMSFT, I think you\u0027re misunderstanding the statement here.\r\n\r\nThe statement is one around ensuring we consider that there are two backing encodings for decimal (one oriented towards software and another towards hardware) and that we should ensure our API surface isn\u0027t forcing one or the other.\r\n\r\nSuch hardware supporting the IEEE 754 decimal types already exists and has been in production use at the enterprise level for years (namely IBM PowerPC). \r\n\r\n\u003e This is an increasingly niche API surface area and I think we should determine a customer and if it is a current need for .NET 8 or perhaps a future release.\r\n\r\nI likewise think this is a misunderstanding. We have had `decimal` since .NET v1.0 and since its introduction developers having been asking for extended functionality that cannot be provided by that type (namely because it has a strict 1-to-1 requirement with the underlying DECIMAL/CY type in Win32).\r\n\r\nThe IEEE 754 decimal types are an industry standard that has already been proven to be successful, which has been an ABI standard for over 12 years, and which is actively getting first class support in a number of other languages.\r\n\r\nThis points towards it being a viable answer towards both the perf and extension points customers have already been asking for around `System.Decimal` which we\u0027ve not been able to provide.",
                                           "updatedAt":  "2023-01-30T21:57:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAhiH",
                                           "createdAt":  "2023-01-30T22:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e The statement is one around ensuring we consider that there are two backing encodings for decimal (one oriented towards software and another towards hardware) and that we should ensure our API surface isn\u0027t forcing one or the other.\r\n\r\nGotcha. That makes sense. @dakersnar\u0027s statement also helped to clarify that.",
                                           "updatedAt":  "2023-01-30T22:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBNi6",
                                           "createdAt":  "2023-01-31T01:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "Copying my comment from #79004 and adding a little more context.\r\n\r\nI\u0027m the current lead developer of [Otterkit](https://github.com/otterkit/otterkit), a free and open source COBOL compiler for dotnet (Implementing the COBOL 2022 standard). We\u0027re looking forward to being able to use these types in our compiler.\r\n\r\nWe are currently PInvoking calls to the mpdecimal library to provide this functionality on dotnet, but that makes the build process much more complicated and hurts portability. Having these types available directly on C# would be awesome for our project.\r\n\r\nThe reason for this is that COBOL relies heavily on decimal arithmetic, the COBOL standard requires support for the Decimal128 type for its standard-decimal arithmetic mode, and requires a decimal implementation with at least 31 digits of precision for its native arithmetic mode. The decimal type we have in C# right now is not compatible with these requirements.\r\n\r\nOur COBOL runtime library only requires the Decimal128 type, both the Decimal32 and Decimal64 use a truncated Decimal128. This works quite well because all of these types\u0027 max/min values only contains 9s and an exponent (`+-99999...E+-...`). There doesn\u0027t seem to be a downside to this as long as the Decimal128 implementation is performant enough, and the truncation and overflow checks matches the IEEE requirements for those types\u0027 max/min values. The final value is then stored in Decimal32 and Decimal64 formats, but the math itself is done as if it was a Decimal128.\r\n\r\n-----\r\n\r\nHi @dakersnar, COBOL provides some of those math functions with its intrinsic functions, and implementing those is required by the COBOL standard. The mpdecimal library that we\u0027re using unfortunately does not completely provide that functionality so we had to implement it ourselves in the runtime library (mpdecimal doesn\u0027t provide trigonometric functions).\r\n\r\nBecause of the COBOL standard\u0027s requirements we would require support for the `IExponentialFunctions`, `ILogarithmicFunctions`, `IPowerFunctions`, `IRootFunctions`, `ITrigonometricFunctions`. \r\n\r\nCOBOL itself does not provide support for anything from `IHyperbolicFunctions` so we would not require support for it.\r\n\r\nHaving those directly in C# would be awesome, we would be able to provide that COBOL functionality in our compiler in a way that is compatible with C#, and might make it easier to implement our COBOL \u003c=\u003e C# Bridge in the future.\r\n\r\nI\u0027m not sure if I\u0027m allowed to request any extra functionality for this, but if possible, would there be a way to support UTF-8 encoded `ToSpan` and `FromSpan` methods for these types? Otterkit heavily depends on `Span\u003cbyte\u003e` and `Memory\u003cbyte\u003e` for every COBOL data type, every type is implemented using UTF-8 encoded Spans. Using `Span\u003cchar\u003e` would not work due to COBOL\u0027s very specific picture formatting rules.",
                                           "updatedAt":  "2023-01-31T02:56:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBRcc",
                                           "createdAt":  "2023-01-31T01:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3pNRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-01-31T05:30:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-01-31T06:14:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-01-31T06:56:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2023-01-31T16:08:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-02-02T18:50:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-02-14T21:05:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Squirrelies",
                                                                               "createdAt":  "2023-03-12T01:44:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "richlander",
                                           "body":  "\u003e I\u0027m not sure if I\u0027m allowed to request any extra functionality for this\r\n\r\nPlease consider yourself \"allowed\". I\u0027m sure the team would appreciate knowing more about your needs, particularly to the end of influencing their design and prioritization.",
                                           "updatedAt":  "2023-01-31T01:41:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFn-G",
                                           "createdAt":  "2023-01-31T17:11:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1LvgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2023-01-31T17:27:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-02-01T00:07:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "@KTSnowy just so I can fully understand your scenario, let me outline a few possibilities: \r\n\r\n1. We ship _only_ Decimal64, _without_ the Platinum APIs, in .NET 8.\r\n2. We ship Decimal128, _without_ the Platinum APIs, in .NET 8.\r\n3. We ship Decimal128, _with_ the Platinum APIs, in .NET 8. \r\n\r\nAt which level does it become _feasible_ for you to plug our types into your project, if only to test the ease of integration and measure performance? Following that, at which level does it become _beneficial_ to plug the types into your project? Obviously, it sounds like level 3 is what you would most prefer. In the event level 3 is not feasible for this release cycle, is there a \"half measure\" for .NET 8 that you would still be able to use?\r\n\r\nEdit: Additionally, I want to note that .NET does not currently support some aspects of the IEEE spec including global rounding modes, floating-point exceptions, and flag setting. Does your project require these features?",
                                           "updatedAt":  "2023-01-31T21:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHn8U",
                                           "createdAt":  "2023-02-01T00:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "Hi @dakersnar, it would become both feasible and beneficial to plug these types into our compiler at level 2, but only if there is support for UTF-8 encoded Spans (from Span and to Span conversions).\r\n\r\nThe COBOL standard requires support for the Decimal128 type. At level 1 we won\u0027t be able to use them due to the Decimal64 format only supporting 16 decimal digits.\r\n\r\nAt level 2 with UTF-8 Spans support we could move most of our mpdecimal calls to the .NET 8 implementation, we could also temporarily use the Platinum APIs functionality from mpdecimal until there is support in the .NET runtime for them.\r\n\r\nThis would mostly depend on the UTF-8 `Span\u003cbyte\u003e` support. \r\n\r\nWithout it, PInvoking into mpdecimal to provide the Platinum APIs functionality would become a lot more expensive. Having to convert from and to a string and passing them through PInvoke would be much more expensive than the byte pointers that we\u0027re currently using.\r\n\r\nWithout conversions for UTF-8 encoded Spans, it would only be feasible at level 3.\r\n\r\n\u003e Edit: Additionally, I want to note that .NET does not currently support some aspects of the IEEE spec including global rounding modes, floating-point exceptions, and flag setting. Does your project require these features?\r\n\r\nOur compiler can generate calls to the local rounding methods to \"emulate\" the global rounding modes at compile time, so this won\u0027t be an issue, but it would be awesome to have those if it\u0027s possible to support them.\r\n\r\nThe exceptions and flags are also not required, COBOL has a very different way of handling exceptions so we won\u0027t be able to directly use C# exceptions.\r\n\r\n",
                                           "updatedAt":  "2023-02-01T00:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHsUc",
                                           "createdAt":  "2023-02-01T01:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "\u003e At which level does it become feasible for you to plug our types into your project, if only to test the ease of integration and measure performance?\r\n\r\nI\u0027d be happy to help with performance and ease of integration tests. Just let me know if there\u0027s any specific way or specific tool that you\u0027d like us to use to measure performance.",
                                           "updatedAt":  "2023-02-01T01:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ULq7_",
                                           "createdAt":  "2023-02-01T16:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "\u003e Having to convert from and to a string and passing them through PInvoke would be much more expensive than the byte pointers that we\u0027re currently using.\r\n\r\nWould the \"EncodeBinary\" and/or \"EncodeDecimal\" APIs proposed above work for your scenario? That would get you the raw bit representation of the Decimal128, either as a UInt128 or two ulongs, depending on what API review decides.",
                                           "updatedAt":  "2023-02-01T16:26:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UMb2I",
                                           "createdAt":  "2023-02-01T18:44:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "\u003e Would the \"EncodeBinary\" and/or \"EncodeDecimal\" APIs proposed above work for your scenario?\r\n\r\nIt wouldn\u0027t work completely, we still need a \"byte array-like\" representation of the Decimal128 to apply formatting to.\r\n\r\nUsing `Span\u003cbyte\u003e` and `Memory\u003cbyte\u003e` was the most performant way we found to store and format COBOL types with the picture clause requirements, so even if we find a way to convert the raw bits into UTF-8 bytes we\u0027d still need a \"Parse\" and \"TryParse\" that can accept the UTF-8 bytes back, or a way to turn those bytes back into the raw bit representation.\r\n\r\nIdeally we\u0027d like a \"ToSpan\", \"Parse\" and \"TryParse\" that can return and accept UTF-8 encoded `Span\u003cbyte\u003e`, but we\u0027re not sure if we can request this and if this extra functionality would be too much work to implement. Please let us know if this would be feasible.",
                                           "updatedAt":  "2023-02-01T18:44:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UMk6Z",
                                           "createdAt":  "2023-02-01T19:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1QLWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-02-01T19:17:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@dakersnar Looks like they want `Utf8Parser` and `Utf8Formatter` to be updated at the same time that these types come online. That\u0027s where all our other UTF-8 parsing / emitting functionality sits. (We don\u0027t tend to put these APIs directly on the numeric types themselves.)",
                                           "updatedAt":  "2023-02-01T19:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UMxtf",
                                           "createdAt":  "2023-02-01T19:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2jguA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-02-01T21:40:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-02-02T18:51:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-02-22T14:49:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I think we should consider `IUtf8Parsable` and `IUtf8Formattable` instead. That makes it more general purpose and allows any type to opt-in.\r\n\r\n~~Will open a proposal~~ https://github.com/dotnet/runtime/issues/81500",
                                           "updatedAt":  "2023-02-01T20:27:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UuCMe",
                                           "createdAt":  "2023-02-07T19:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Another consideration: reading another recent thread, I was reminded that we expose a public constructor for `Int128`/`UInt128` as they are not primitive types. Internally, while working on the implementation for `DecimalXX`, I\u0027ve been taking advantage of an internal constructor: `DecimalXX(sign, exp, significand)`. Should we consider exposing something like this publicly?\r\n\r\nNotably, with the current shape, users can only create these types in the following ways:\r\n- Parsing in a string of text. This works for all cases but is a bit clunky.\r\n- Converting from another type, such as `decimal` or `float`. This is not ideal, as both of those types have a different set of representable values.",
                                           "updatedAt":  "2023-02-07T19:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vc4R1",
                                           "createdAt":  "2023-02-16T19:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "* `Quantize` doesn\u0027t really make sense to any of us, but is the verb from the spec, so it\u0027s what we should use\r\n* `Quantum` is lacking a verb, so it should be `GetQuantum`, similarly `SameQuantum` should be `HaveSameQuantum`\r\n* `EncodeDecimal` (and friends) don\u0027t play well with generic math.  Consider an interfacable overload in the future, such as `static int EncodeDecimal(TSelf value, Span\u003cbyte\u003e destination\u003e)`\r\n* A constructor that takes in pseudo-scientific notation seems to make sense, e.g. `new Decimal32(-1000, -3)` for `-1.000`, but the parts need naming\r\n\r\nSince we lost quorum before finalizing the ctor-vs-named-static point (and the names of the parameters), and the pattern for the conversion operators, we\u0027ll need to discuss this again before approval.\r\n\r\n```C#\r\nnamespace System.Numerics\r\n{\r\n\r\n    /// \u003csummary\u003eDefines an IEEE 754 floating-point type that is represented in a base-10 format.\u003c/summary\u003e\r\n    /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n    public interface IDecimalFloatingPointIeee754\u003cTSelf\u003e // PLATINUM\r\n        : IFloatingPointIeee754\u003cTSelf\u003e\r\n        where TSelf : IDecimalFloatingPointIeee754\u003cTSelf\u003e\r\n    {\r\n        // IEEE Spec 5.3.2\r\n        static abstract TSelf Quantize(TSelf x, TSelf y);\r\n        static abstract TSelf GetQuantum(TSelf x);\r\n\r\n        // IEEE Spec 5.7.3\r\n        static abstract bool HaveSameQuantum(TSelf x, TSelf y);\r\n    }\r\n\r\n    //\r\n    // Summary:\r\n    //     Represents a 32-bit IEEE decimal floating-point number\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public readonly struct Decimal32\r\n        : IComparable\u003cDecimal32\u003e,\r\n          IComparable,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cDecimal32\u003e,\r\n          IEquatable\u003cDecimal32\u003e,\r\n          IFloatingPoint\u003cDecimal32\u003e,/*PLATINUM: Replace with IDecimalFloatingPointIeee754\u003cDecimal32\u003e,*/\r\n          IMinMaxValue\u003cDecimal32\u003e\r\n    {\r\n        internal readonly uint _value; // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        //\r\n        // Parsing (INumberBase, IParsable, ISpanParsable, other)\r\n        //\r\n\r\n        public static Decimal32 Parse(string s);\r\n        public static Decimal32 Parse(string s, NumberStyles style);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(string s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style = DefaultParseStyle, IFormatProvider? provider = null);\r\n        public static Decimal32 Parse(string s, NumberStyles style, IFormatProvider? provider);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n\r\n        //\r\n        // Misc. Methods (including IComparable, IEquatable, other)\r\n        //\r\n\r\n        public int CompareTo(object? obj);\r\n        public int CompareTo(Decimal32 other);\r\n        public override bool Equals([NotNullWhen(true)] object? obj);\r\n        public bool Equals(Decimal32 other);\r\n        public override int GetHashCode();\r\n        // 5.5.2 of the IEEE Spec\r\n        public static uint EncodeDecimal(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeDecimal(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static uint EncodeBinary(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeBinary(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        //\r\n        // Formatting (IFormattable, ISpanFormattable, other)\r\n        //\r\n        \r\n        public override string ToString();\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\r\n        public string ToString(IFormatProvider? provider);\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\r\n        public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, [StringSyntax(StringSyntaxAttribute.NumericFormat)] ReadOnlySpan\u003cchar\u003e format = default, IFormatProvider? provider = null);\r\n\r\n        //\r\n        // Explicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is lossy)\r\n        //\r\n\r\n        public static explicit operator Decimal32(int value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(uint value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nint value);  // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nuint value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(long value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(ulong value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Int128 value);\r\n        public static explicit operator Decimal32(UInt128 value);\r\n        public static explicit operator Decimal32(Half value);\r\n        public static explicit operator Decimal32(float value);\r\n        public static explicit operator Decimal32(double value);\r\n        public static explicit operator Decimal32(decimal value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Decimal64 value);\r\n        public static explicit operator Decimal32(Decimal128 value);\r\n\r\n        //\r\n        // Explicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is lossy)\r\n        // - Includes a \"checked\" conversion if T cannot represent infinity and NaN\r\n        //\r\n        public static explicit operator byte(Decimal32 value);\r\n        public static explicit operator checked byte(Decimal32 value);\r\n        public static explicit operator sbyte(Decimal32 value);\r\n        public static explicit operator checked sbyte(Decimal32 value);\r\n        public static explicit operator char(Decimal32 value);\r\n        public static explicit operator checked char(Decimal32 value);\r\n        public static explicit operator short(Decimal32 value);\r\n        public static explicit operator checked short(Decimal32 value);\r\n        public static explicit operator ushort(Decimal32 value);\r\n        public static explicit operator checked ushort(Decimal32 value);\r\n        public static explicit operator int(Decimal32 value);\r\n        public static explicit operator checked int(Decimal32 value);\r\n        public static explicit operator uint(Decimal32 value);\r\n        public static explicit operator checked uint(Decimal32 value);\r\n        public static explicit operator nint(Decimal32 value);        \r\n        public static explicit operator checked nint(Decimal32 value);\r\n        public static explicit operator nuint(Decimal32 value);\r\n        public static explicit operator checked nuint(Decimal32 value);\r\n        public static explicit operator long(Decimal32 value);\r\n        public static explicit operator checked long(Decimal32 value);\r\n        public static explicit operator ulong(Decimal32 value);\r\n        public static explicit operator checked ulong(Decimal32 value);\r\n        public static explicit operator Int128(Decimal32 value);       \r\n        public static explicit operator checked Int128(Decimal32 value);\r\n        public static explicit operator UInt128(Decimal32 value);\r\n        public static explicit operator checked UInt128(Decimal32 value);\r\n        public static explicit operator Half(Decimal32 value);\r\n        public static explicit operator float(Decimal32 value);\r\n        public static explicit operator double(Decimal32 value);\r\n        public static explicit operator decimal(Decimal32 value); // Doesn\u0027t have a \"checked\" for historical reasons\r\n\r\n\r\n        //\r\n        // Implicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is not lossy)\r\n        //\r\n        public static implicit operator Decimal32(byte value);\r\n        public static implicit operator Decimal32(sbyte value);\r\n        public static implicit operator Decimal32(char value);\r\n        public static implicit operator Decimal32(short value);\r\n        public static implicit operator Decimal32(ushort value);\r\n\r\n        //\r\n        // Implicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is not lossy)\r\n        //\r\n        public static implicit operator Decimal64(Decimal32 value);\r\n        public static implicit operator Decimal128(Decimal32 value);\r\n\r\n        //\r\n        // IAdditionOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IAdditiveIdentity\r\n        //\r\n        static Decimal32 IAdditiveIdentity\u003cDecimal32, Decimal32\u003e.AdditiveIdentity { get; }\r\n\r\n\r\n        //\r\n        // IComparisonOperators\r\n        //\r\n        public static bool operator \u003c(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003c=(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IDecimalFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Quantize(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Quantum(Decimal32 x);\r\n        public static bool SameQuantum(Decimal32 x, Decimal32 y);\r\n\r\n        //\r\n        // IDecrementOperators\r\n        //\r\n        public static Decimal32 operator --(Decimal32 value);\r\n\r\n        //\r\n        // IDivisionOperators\r\n        //\r\n        public static Decimal32 operator /(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IEqualityOperators\r\n        //\r\n        public static bool operator ==(Decimal32 left, Decimal32 right);\r\n        public static bool operator !=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IExponentialFunctions\r\n        //\r\n        public static Decimal32 Exp(Decimal32 x); // PLATINUM\r\n        public static Decimal32 ExpM1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2M1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10M1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IFloatingPoint\r\n        //\r\n        public static Decimal32 Ceiling(Decimal32 x);\r\n        public static Decimal32 Floor(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x, int digits);\r\n        public static Decimal32 Round(Decimal32 x, MidpointRounding mode);\r\n        public static Decimal32 Round(Decimal32 x, int digits, MidpointRounding mode);\r\n        public static Decimal32 Truncate(Decimal32 x);\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentByteCount();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentShortestBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandByteCount();\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n\r\n        //\r\n        // IFloatingPointConstants\r\n        //\r\n        public static Decimal32 E { get; }\r\n        public static Decimal32 Pi { get; }\r\n        public static Decimal32 Tau { get; }\r\n\r\n        //\r\n        // IFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Epsilon { get; }\r\n        public static Decimal32 NaN { get; }\r\n        public static Decimal32 NegativeInfinity { get; }\r\n        public static Decimal32 NegativeZero { get; }\r\n        public static Decimal32 PositiveInfinity { get; }\r\n        public static Decimal32 Atan2(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan2Pi(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 BitDecrement(Decimal32 x);\r\n        public static Decimal32 BitIncrement(Decimal32 x);\r\n        public static Decimal32 FusedMultiplyAdd(Decimal32 left, Decimal32 right, Decimal32 addend);\r\n        public static Decimal32 Ieee754Remainder(Decimal32 left, Decimal32 right);\r\n        public static int ILogB(Decimal32 x);\r\n        public static Decimal32 Lerp(Decimal32 value1, Decimal32 value2, Decimal32 amount);\r\n        public static Decimal32 ReciprocalEstimate(Decimal32 x);\r\n        public static Decimal32 ReciprocalSqrtEstimate(Decimal32 x);\r\n        public static Decimal32 ScaleB(Decimal32 x, int n);\r\n        // public static Decimal32 Compound(Half x, Decimal32 n); (Already approved in API review but not implemented yet) // PLATINUM\r\n\r\n        //\r\n        // IHyperbolicFunctions\r\n        //\r\n        public static Decimal32 Acosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atanh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tanh(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IIncrementOperators\r\n        //\r\n        public static Decimal32 operator ++(Decimal32 value);\r\n\r\n        //\r\n        // ILogarithmicFunctions\r\n        //\r\n        public static Decimal32 Log(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log(Decimal32 x, Decimal32 newBase); // PLATINUM\r\n        public static Decimal32 Log10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 LogP1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2P1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log10P1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IMinMaxValue\r\n        //\r\n        public static Decimal32 MaxValue { get; }\r\n        public static Decimal32 MinValue { get; }\r\n\r\n        //\r\n        // IModulusOperators\r\n        //\r\n        public static Decimal32 operator %(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IMultiplicativeIdentity\r\n        //\r\n        public static Decimal32 MultiplicativeIdentity { get; }\r\n\r\n        //\r\n        // IMultiplyOperators\r\n        //\r\n        public static Decimal32 operator *(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // INumber\r\n        //\r\n        public static Decimal32 Clamp(Decimal32 value, Decimal32 min, Decimal32 max);\r\n        public static Decimal32 CopySign(Decimal32 value, Decimal32 sign);\r\n        public static Decimal32 Max(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Min(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinNumber(Decimal32 x, Decimal32 y);\r\n        public static int Sign(Decimal32 value);\r\n\r\n\r\n        //\r\n        // INumberBase (well defined/commonly used values)\r\n        //\r\n        public static Decimal32 One { get; }\r\n        static int INumberBase\u003cDecimal32\u003e.Radix; // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 Zero { get; }\r\n        public static Decimal32 Abs(Decimal32 value);\r\n        public static Decimal32 CreateChecked\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateSaturating\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateTruncating\u003cTOther\u003e(TOther value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsCanonical(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        static bool INumberBase\u003cDecimal32\u003e.IsComplexNumber(Decimal32 value);\r\n        public static bool IsEvenInteger(Decimal32 value);\r\n        public static bool IsFinite(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsImaginaryNumber(Decimal32 value);\r\n        public static bool IsInfinity(Decimal32 value);\r\n        public static bool IsInteger(Decimal32 value);\r\n        public static bool IsNaN(Decimal32 value);\r\n        public static bool IsNegative(Decimal32 value);\r\n        public static bool IsNegativeInfinity(Decimal32 value);\r\n        public static bool IsNormal(Decimal32 value);\r\n        public static bool IsOddInteger(Decimal32 value);\r\n        public static bool IsPositive(Decimal32 value);\r\n        public static bool IsPositiveInfinity(Decimal32 value);\r\n        public static bool IsRealNumber(Decimal32 value);\r\n        public static bool IsSubnormal(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsZero(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 MaxMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromChecked\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromSaturating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromTruncating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToChecked\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToSaturating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToTruncating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n\r\n        //\r\n        // IPowerFunctions\r\n        //\r\n        public static Decimal32 Pow(Decimal32 x, Decimal32 y); // PLATINUM\r\n\r\n        //\r\n        // IRootFunctions\r\n        //\r\n        public static Decimal32 Cbrt(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Hypot(Decimal32 x, Decimal32 y); // PLATINUM\r\n        public static Decimal32 RootN(Decimal32 x, int n); // PLATINUM\r\n        public static Decimal32 Sqrt(Decimal32 x);\r\n\r\n        //\r\n        // ISignedNumber\r\n        //\r\n        public static Decimal32 NegativeOne { get; }\r\n\r\n        //\r\n        // ISubtractionOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // ITrigonometricFunctions\r\n        //\r\n        public static Decimal32 Acos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AcosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asin(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AsinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AtanPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 CosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sin(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 Sin, Decimal32 Cos) SinCos(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 SinPi, Decimal32 CosPi) SinCosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 SinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 TanPi(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IUnaryNegationOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 value);\r\n\r\n        //\r\n        // IUnaryPlusOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 value);\r\n    }\r\n}\r\n\r\n```",
                                           "updatedAt":  "2023-02-16T19:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VxAWD",
                                           "createdAt":  "2023-02-21T18:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "* `Quantize` doesn\u0027t really make sense to any of us, but is the verb from the spec, so it\u0027s what we should use\r\n* `Quantum` is lacking a verb, so it should be `GetQuantum`, similarly `SameQuantum` should be `HaveSameQuantum`\r\n* `EncodeDecimal` (and friends) don\u0027t play well with generic math.  Consider an interfacable overload in the future, such as `static int EncodeDecimal(TSelf value, Span\u003cbyte\u003e destination\u003e)`\r\n* On day 2 we resumed to talk about the public constructor.  It looks good as proposed `([equal signed integral type] significand, int exponent)`.\r\n\r\nSince we lost quorum before finalizing the ctor-vs-named-static point (and the names of the parameters), and the pattern for the conversion operators, we\u0027ll need to discuss this again before approval.\r\n\r\n```C#\r\nnamespace System.Numerics\r\n{\r\n\r\n    /// \u003csummary\u003eDefines an IEEE 754 floating-point type that is represented in a base-10 format.\u003c/summary\u003e\r\n    /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n    public interface IDecimalFloatingPointIeee754\u003cTSelf\u003e // PLATINUM\r\n        : IFloatingPointIeee754\u003cTSelf\u003e\r\n        where TSelf : IDecimalFloatingPointIeee754\u003cTSelf\u003e\r\n    {\r\n        // IEEE Spec 5.3.2\r\n        static abstract TSelf Quantize(TSelf x, TSelf y);\r\n        static abstract TSelf GetQuantum(TSelf x);\r\n\r\n        // IEEE Spec 5.7.3\r\n        static abstract bool HaveSameQuantum(TSelf x, TSelf y);\r\n    }\r\n\r\n    //\r\n    // Summary:\r\n    //     Represents a 32-bit IEEE decimal floating-point number\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public readonly struct Decimal32\r\n        : IComparable\u003cDecimal32\u003e,\r\n          IComparable,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cDecimal32\u003e,\r\n          IEquatable\u003cDecimal32\u003e,\r\n          IFloatingPoint\u003cDecimal32\u003e,/*PLATINUM: Replace with IDecimalFloatingPointIeee754\u003cDecimal32\u003e,*/\r\n          IMinMaxValue\u003cDecimal32\u003e\r\n    {\r\n        internal readonly uint _value; // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        public Decimal32(int significand, int exponent); // NOTE: params are (long, int) for Decimal64 and (Int128, int) for Decimal128\r\n\r\n        //\r\n        // Parsing (INumberBase, IParsable, ISpanParsable, other)\r\n        //\r\n        \r\n\r\n        public static Decimal32 Parse(string s);\r\n        public static Decimal32 Parse(string s, NumberStyles style);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(string s, IFormatProvider? provider);\r\n        public static Decimal32 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style = DefaultParseStyle, IFormatProvider? provider = null);\r\n        public static Decimal32 Parse(string s, NumberStyles style, IFormatProvider? provider);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n        public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out Decimal32 result);\r\n\r\n        //\r\n        // Misc. Methods (including IComparable, IEquatable, other)\r\n        //\r\n\r\n        public int CompareTo(object? obj);\r\n        public int CompareTo(Decimal32 other);\r\n        public override bool Equals([NotNullWhen(true)] object? obj);\r\n        public bool Equals(Decimal32 other);\r\n        public override int GetHashCode();\r\n        // 5.5.2 of the IEEE Spec\r\n        public static uint EncodeDecimal(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeDecimal(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static uint EncodeBinary(Decimal32 x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n        public static Decimal32 DecodeBinary(uint x); // NOTE: this is a ulong for Decimal64, and a UInt128 for Decimal128\r\n\r\n        //\r\n        // Formatting (IFormattable, ISpanFormattable, other)\r\n        //\r\n        \r\n        public override string ToString();\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\r\n        public string ToString(IFormatProvider? provider);\r\n        public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\r\n        public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, [StringSyntax(StringSyntaxAttribute.NumericFormat)] ReadOnlySpan\u003cchar\u003e format = default, IFormatProvider? provider = null);\r\n\r\n        //\r\n        // Explicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is lossy)\r\n        //\r\n\r\n        public static explicit operator Decimal32(int value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(uint value); // NOTE: Decimal64 and Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nint value);  // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(nuint value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(long value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(ulong value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Int128 value);\r\n        public static explicit operator Decimal32(UInt128 value);\r\n        public static explicit operator Decimal32(Half value);\r\n        public static explicit operator Decimal32(float value);\r\n        public static explicit operator Decimal32(double value);\r\n        public static explicit operator Decimal32(decimal value); // NOTE: Decimal128 will have this as *implicit*\r\n        public static explicit operator Decimal32(Decimal64 value);\r\n        public static explicit operator Decimal32(Decimal128 value);\r\n\r\n        //\r\n        // Explicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is lossy)\r\n        // - Includes a \"checked\" conversion if T cannot represent infinity and NaN\r\n        //\r\n        public static explicit operator byte(Decimal32 value);\r\n        public static explicit operator checked byte(Decimal32 value);\r\n        public static explicit operator sbyte(Decimal32 value);\r\n        public static explicit operator checked sbyte(Decimal32 value);\r\n        public static explicit operator char(Decimal32 value);\r\n        public static explicit operator checked char(Decimal32 value);\r\n        public static explicit operator short(Decimal32 value);\r\n        public static explicit operator checked short(Decimal32 value);\r\n        public static explicit operator ushort(Decimal32 value);\r\n        public static explicit operator checked ushort(Decimal32 value);\r\n        public static explicit operator int(Decimal32 value);\r\n        public static explicit operator checked int(Decimal32 value);\r\n        public static explicit operator uint(Decimal32 value);\r\n        public static explicit operator checked uint(Decimal32 value);\r\n        public static explicit operator nint(Decimal32 value);        \r\n        public static explicit operator checked nint(Decimal32 value);\r\n        public static explicit operator nuint(Decimal32 value);\r\n        public static explicit operator checked nuint(Decimal32 value);\r\n        public static explicit operator long(Decimal32 value);\r\n        public static explicit operator checked long(Decimal32 value);\r\n        public static explicit operator ulong(Decimal32 value);\r\n        public static explicit operator checked ulong(Decimal32 value);\r\n        public static explicit operator Int128(Decimal32 value);       \r\n        public static explicit operator checked Int128(Decimal32 value);\r\n        public static explicit operator UInt128(Decimal32 value);\r\n        public static explicit operator checked UInt128(Decimal32 value);\r\n        public static explicit operator Half(Decimal32 value);\r\n        public static explicit operator float(Decimal32 value);\r\n        public static explicit operator double(Decimal32 value);\r\n        public static explicit operator decimal(Decimal32 value); // Doesn\u0027t have a \"checked\" for historical reasons\r\n\r\n\r\n        //\r\n        // Implicit Convert To Decimal32\r\n        // (T -\u003e Decimal32 is not lossy)\r\n        //\r\n        public static implicit operator Decimal32(byte value);\r\n        public static implicit operator Decimal32(sbyte value);\r\n        public static implicit operator Decimal32(char value);\r\n        public static implicit operator Decimal32(short value);\r\n        public static implicit operator Decimal32(ushort value);\r\n\r\n        //\r\n        // Implicit Convert From Decimal32\r\n        // (Decimal32 -\u003e T is not lossy)\r\n        //\r\n        public static implicit operator Decimal64(Decimal32 value);\r\n        public static implicit operator Decimal128(Decimal32 value);\r\n\r\n        //\r\n        // IAdditionOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IAdditiveIdentity\r\n        //\r\n        static Decimal32 IAdditiveIdentity\u003cDecimal32, Decimal32\u003e.AdditiveIdentity { get; }\r\n\r\n\r\n        //\r\n        // IComparisonOperators\r\n        //\r\n        public static bool operator \u003c(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003c=(Decimal32 left, Decimal32 right);\r\n        public static bool operator \u003e=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IDecimalFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Quantize(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Quantum(Decimal32 x);\r\n        public static bool SameQuantum(Decimal32 x, Decimal32 y);\r\n\r\n        //\r\n        // IDecrementOperators\r\n        //\r\n        public static Decimal32 operator --(Decimal32 value);\r\n\r\n        //\r\n        // IDivisionOperators\r\n        //\r\n        public static Decimal32 operator /(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IEqualityOperators\r\n        //\r\n        public static bool operator ==(Decimal32 left, Decimal32 right);\r\n        public static bool operator !=(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IExponentialFunctions\r\n        //\r\n        public static Decimal32 Exp(Decimal32 x); // PLATINUM\r\n        public static Decimal32 ExpM1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp2M1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Exp10M1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IFloatingPoint\r\n        //\r\n        public static Decimal32 Ceiling(Decimal32 x);\r\n        public static Decimal32 Floor(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x);\r\n        public static Decimal32 Round(Decimal32 x, int digits);\r\n        public static Decimal32 Round(Decimal32 x, MidpointRounding mode);\r\n        public static Decimal32 Round(Decimal32 x, int digits, MidpointRounding mode);\r\n        public static Decimal32 Truncate(Decimal32 x);\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentByteCount();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetExponentShortestBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandBitLength();\r\n        int IFloatingPoint\u003cDecimal32\u003e.GetSignificandByteCount();\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteExponentLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandBigEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n        bool IFloatingPoint\u003cDecimal32\u003e.TryWriteSignificandLittleEndian(Span\u003cbyte\u003e destination, out int bytesWritten);\r\n\r\n        //\r\n        // IFloatingPointConstants\r\n        //\r\n        public static Decimal32 E { get; }\r\n        public static Decimal32 Pi { get; }\r\n        public static Decimal32 Tau { get; }\r\n\r\n        //\r\n        // IFloatingPointIeee754\r\n        //\r\n        public static Decimal32 Epsilon { get; }\r\n        public static Decimal32 NaN { get; }\r\n        public static Decimal32 NegativeInfinity { get; }\r\n        public static Decimal32 NegativeZero { get; }\r\n        public static Decimal32 PositiveInfinity { get; }\r\n        public static Decimal32 Atan2(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan2Pi(Decimal32 y, Decimal32 x); // PLATINUM\r\n        public static Decimal32 BitDecrement(Decimal32 x);\r\n        public static Decimal32 BitIncrement(Decimal32 x);\r\n        public static Decimal32 FusedMultiplyAdd(Decimal32 left, Decimal32 right, Decimal32 addend);\r\n        public static Decimal32 Ieee754Remainder(Decimal32 left, Decimal32 right);\r\n        public static int ILogB(Decimal32 x);\r\n        public static Decimal32 Lerp(Decimal32 value1, Decimal32 value2, Decimal32 amount);\r\n        public static Decimal32 ReciprocalEstimate(Decimal32 x);\r\n        public static Decimal32 ReciprocalSqrtEstimate(Decimal32 x);\r\n        public static Decimal32 ScaleB(Decimal32 x, int n);\r\n        // public static Decimal32 Compound(Half x, Decimal32 n); (Already approved in API review but not implemented yet) // PLATINUM\r\n\r\n        //\r\n        // IHyperbolicFunctions\r\n        //\r\n        public static Decimal32 Acosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atanh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cosh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sinh(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tanh(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IIncrementOperators\r\n        //\r\n        public static Decimal32 operator ++(Decimal32 value);\r\n\r\n        //\r\n        // ILogarithmicFunctions\r\n        //\r\n        public static Decimal32 Log(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log(Decimal32 x, Decimal32 newBase); // PLATINUM\r\n        public static Decimal32 Log10(Decimal32 x); // PLATINUM\r\n        public static Decimal32 LogP1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log2P1(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Log10P1(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IMinMaxValue\r\n        //\r\n        public static Decimal32 MaxValue { get; }\r\n        public static Decimal32 MinValue { get; }\r\n\r\n        //\r\n        // IModulusOperators\r\n        //\r\n        public static Decimal32 operator %(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // IMultiplicativeIdentity\r\n        //\r\n        public static Decimal32 MultiplicativeIdentity { get; }\r\n\r\n        //\r\n        // IMultiplyOperators\r\n        //\r\n        public static Decimal32 operator *(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // INumber\r\n        //\r\n        public static Decimal32 Clamp(Decimal32 value, Decimal32 min, Decimal32 max);\r\n        public static Decimal32 CopySign(Decimal32 value, Decimal32 sign);\r\n        public static Decimal32 Max(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 Min(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinNumber(Decimal32 x, Decimal32 y);\r\n        public static int Sign(Decimal32 value);\r\n\r\n\r\n        //\r\n        // INumberBase (well defined/commonly used values)\r\n        //\r\n        public static Decimal32 One { get; }\r\n        static int INumberBase\u003cDecimal32\u003e.Radix; // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 Zero { get; }\r\n        public static Decimal32 Abs(Decimal32 value);\r\n        public static Decimal32 CreateChecked\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateSaturating\u003cTOther\u003e(TOther value);\r\n        public static Decimal32 CreateTruncating\u003cTOther\u003e(TOther value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsCanonical(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        static bool INumberBase\u003cDecimal32\u003e.IsComplexNumber(Decimal32 value);\r\n        public static bool IsEvenInteger(Decimal32 value);\r\n        public static bool IsFinite(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsImaginaryNumber(Decimal32 value);\r\n        public static bool IsInfinity(Decimal32 value);\r\n        public static bool IsInteger(Decimal32 value);\r\n        public static bool IsNaN(Decimal32 value);\r\n        public static bool IsNegative(Decimal32 value);\r\n        public static bool IsNegativeInfinity(Decimal32 value);\r\n        public static bool IsNormal(Decimal32 value);\r\n        public static bool IsOddInteger(Decimal32 value);\r\n        public static bool IsPositive(Decimal32 value);\r\n        public static bool IsPositiveInfinity(Decimal32 value);\r\n        public static bool IsRealNumber(Decimal32 value);\r\n        public static bool IsSubnormal(Decimal32 value);\r\n        static bool INumberBase\u003cDecimal32\u003e.IsZero(Decimal32 value); // Note: this ideally should be exposed implicitly as it is required by IEEE\r\n        public static Decimal32 MaxMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MaxMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitude(Decimal32 x, Decimal32 y);\r\n        public static Decimal32 MinMagnitudeNumber(Decimal32 x, Decimal32 y);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromChecked\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromSaturating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertFromTruncating\u003cTOther\u003e(TOther value, out Decimal32 result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToChecked\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToSaturating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n        static bool INumberBase\u003cDecimal32\u003e.TryConvertToTruncating\u003cTOther\u003e(Decimal32 value, [MaybeNullWhen(false)] out TOther result);\r\n\r\n        //\r\n        // IPowerFunctions\r\n        //\r\n        public static Decimal32 Pow(Decimal32 x, Decimal32 y); // PLATINUM\r\n\r\n        //\r\n        // IRootFunctions\r\n        //\r\n        public static Decimal32 Cbrt(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Hypot(Decimal32 x, Decimal32 y); // PLATINUM\r\n        public static Decimal32 RootN(Decimal32 x, int n); // PLATINUM\r\n        public static Decimal32 Sqrt(Decimal32 x);\r\n\r\n        //\r\n        // ISignedNumber\r\n        //\r\n        public static Decimal32 NegativeOne { get; }\r\n\r\n        //\r\n        // ISubtractionOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 left, Decimal32 right);\r\n\r\n        //\r\n        // ITrigonometricFunctions\r\n        //\r\n        public static Decimal32 Acos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AcosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Asin(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AsinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Atan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 AtanPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Cos(Decimal32 x); // PLATINUM\r\n        public static Decimal32 CosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Sin(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 Sin, Decimal32 Cos) SinCos(Decimal32 x); // PLATINUM\r\n        public static (Decimal32 SinPi, Decimal32 CosPi) SinCosPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 SinPi(Decimal32 x); // PLATINUM\r\n        public static Decimal32 Tan(Decimal32 x); // PLATINUM\r\n        public static Decimal32 TanPi(Decimal32 x); // PLATINUM\r\n\r\n        //\r\n        // IUnaryNegationOperators\r\n        //\r\n        public static Decimal32 operator -(Decimal32 value);\r\n\r\n        //\r\n        // IUnaryPlusOperators\r\n        //\r\n        public static Decimal32 operator +(Decimal32 value);\r\n    }\r\n}\r\n\r\n```",
                                           "updatedAt":  "2023-02-21T18:16:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNfnK",
                                           "createdAt":  "2023-03-22T16:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5DdLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-04-02T02:28:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Although the Decimal32, Decimal64, and Decimal128 APIs have been approved as shown above, we will not be able to finish the implementation, testing, and integration of these types during .NET 8. I\u0027m moving this proposal to _Future_, and we will consider it during our .NET 9 planning.\r\n\r\nNote that this is **not** being marked as https://github.com/dotnet/runtime/labels/help%20wanted because even with an implementation, the review, testing, and integration work could not be done during this release.\r\n\r\n/cc @KTSnowy ",
                                           "updatedAt":  "2023-03-22T16:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZAHtp",
                                           "createdAt":  "2023-04-02T02:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "Hey @jeffhandley, in the meantime would it be alright if I used the same API described here for our own IEEE decimal library for C#?\r\n\r\nDoes this API have any license attached to it?",
                                           "updatedAt":  "2023-04-02T02:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZANXR",
                                           "createdAt":  "2023-04-02T05:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "You can use the same license the code is under.",
                                           "updatedAt":  "2023-04-02T05:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZFdsE",
                                           "createdAt":  "2023-04-03T16:10:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KTSnowy",
                                           "body":  "@bartonjs I would recommend changing the UInt128 `_value` to two ulong fields for the Decimal128 API. This would be more consistent with how Int128 and UInt128 are defined (as far as I know).\r\n\r\n```csharp\r\ninternal readonly ulong _upper;\r\ninternal readonly ulong _lower;\r\n```\r\n\r\nThis would allow easier marshalling of the Decimal128 struct to native code, because there\u0027s no guarantee that a C compiler has support for a `uint128_t` or similar. On Windows for example, `stdint.h` with Microsoft\u0027s C compiler does not have support for 128-bit integers.\r\n\r\nUsing UInt128 directly instead of two ulongs would make marshalling to C/C++ only available on compilers that support 128-bit integers.",
                                           "updatedAt":  "2023-04-03T16:10:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZFrrh",
                                           "createdAt":  "2023-04-03T16:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5U0Pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-04-03T16:54:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KTSnowy",
                                                                               "createdAt":  "2023-04-05T22:17:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "@KTSnowy I think those are mostly in the proposal to show that the type has internal fields (which makes the type ineligible for \"C# Definite Assignment\").  The actual implementation will probably take marshalling into account.  But, good observation.",
                                           "updatedAt":  "2023-04-03T16:52:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sLkdq",
                                           "createdAt":  "2023-11-16T18:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODM0c7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wldbaig",
                                                                               "createdAt":  "2023-11-16T18:15:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eydelrivero",
                                           "body":  "Hi!, we\u0027re looking forward to being able to use these new decimal data types. We are building a financial application that needs to handle a big numbers (it can be trillions) and also needs to support a high number of decimals, making `System.Decimal` too small for our purposes. Is there an ETA when we can start seeing this added to the runtime?",
                                           "updatedAt":  "2023-11-16T18:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sLzJh",
                                           "createdAt":  "2023-11-16T18:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e @bartonjs I would recommend changing the UInt128 `_value` to two ulong fields for the Decimal128 API. This would be more consistent with how Int128 and UInt128 are defined (as far as I know).\r\n\u003e \r\n\u003e ```cs\r\n\u003e internal readonly ulong _upper;\r\n\u003e internal readonly ulong _lower;\r\n\u003e ```\r\n\u003e \r\n\u003e This would allow easier marshalling of the Decimal128 struct to native code, because there\u0027s no guarantee that a C compiler has support for a `uint128_t` or similar. On Windows for example, `stdint.h` with Microsoft\u0027s C compiler does not have support for 128-bit integers.\r\n\u003e \r\n\u003e Using UInt128 directly instead of two ulongs would make marshalling to C/C++ only available on compilers that support 128-bit integers.\r\n\r\n`Decimal128` and the others will correspond to the C `_Decimal128` family of types in interop scenarios.",
                                           "updatedAt":  "2023-11-16T18:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vFzqM",
                                           "createdAt":  "2023-12-20T03:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RaymondHuy",
                                           "body":  "Hi @tannergooding  @jeffhandley is it ok for me to work on this, I intend to implement a part of it (without PLATINUM api).",
                                           "updatedAt":  "2023-12-20T03:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vGKeI",
                                           "createdAt":  "2023-12-20T05:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdTldw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2024-04-07T15:50:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@RaymondHuy You are free to start working on this effort as it has been marked \"approved\". I would suggest the following to ensure a productive experience.\r\n\r\n* Keep PRs small and targeted.\r\n*  Ensure PRs have testing.\r\n* Initial PRs should front load needed testing/validation infrastructure. Focus on validation early so code reviewers have additional confidence and can suggest cases during feature development.\r\n* PRs with just test infrastructure are acceptable as long as they are runtime agnostic (i.e., mono, CoreCLR, NativeAOT)\r\n* Keep in mind that doing the whole thing yourself is not needed. The community is here to help you and that means when putting up PRs endevour to create a path for those who come after you or want to build on your work.",
                                           "updatedAt":  "2023-12-20T05:39:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vGOdm",
                                           "createdAt":  "2023-12-20T06:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdRXNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-12-20T06:05:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2023-12-20T06:16:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-12-21T11:23:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2023-12-26T07:50:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-04-07T01:04:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e You are free to start working on this effort as it has been marked \"approved\"\r\n\r\nPlease note that while this particular issue is fine to pick up, an issue simply being marked \"approved\" does not mean we would take any PR on the feature. It is at the discretion of the individual area owners and we have explicit guidance specifically targeted towards \"big\" features like this one asking for coordination with the area owners: https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md\r\n\r\nIn an ideal scenario, the process is typically:\r\n1. An issue exists for a known bug or approved API\r\n2. An interested user indicates they would like to work on the issue\r\n  2A. Issues marked `help wanted` are particularly applicable here\r\n3. The area owners indicate what the overall work needed is and provide any guidance as to how it is expected to be implemented, reviewed, etc\r\n4. The user indicates they are still willing to pick up the issue and it is assigned out to them\r\n\r\n---------------------------------------------------------------\r\n\r\nIn this particular case, there is a known good implementation by Intel that we would like to port to .NET: https://www.netlib.org/misc/intel/ -- It is made available under the BSD 3-Clause License\r\n\r\nWe can do this work \"incrementally\" in that there is:\r\n1. A raw interchange type (simply the type + basic support for `IEquatable`, `IComparable`, `GetHashCode`, `ToString`, and `Parse`; similarly to how we exposed `System.Half` in .NET 5)\r\n2. Additionally expose barebones arithmetic functionality (add, subtract, multiply, divide, negate, etc)\r\n3. Additionally expose core math operations (conversions, BitIncrement/Decrement, Abs, Min, Max, etc)\r\n4. Additionally expose complex math operations (log, exp, sin, cos, tan, etc)\r\n\r\nThe prioritization of types would be `Decimal128`, then `Decimal64`, then `Decimal32`. The first two are \"required\" by IEEE 754, the latter is \"optional\". They are done from largest to smallest because that addresses the most commonly requested user scenario first (give additional math operations on decimal types, which can\u0027t be achieved for `System.Decimal` due to its fixed and limited format) and gives performance as a secondary goal where the smaller types and less precision can be taken advantage of in specialized scenarios.\r\n\r\nThere are notably two formats that these decimal types can be encoded as:\r\n1. Decimal Encoding\r\n2. Binary Encoding\r\n\r\nGiven we are implementing this in software, following the binary encoding is desirable and is what the Intel based implementation is centered around.\r\n\r\nThe Intel implementation also uses some fairly large tables in its implementation. Depending on the total impact, we may end up wanting to deviate from that to save space at the cost of some performance. It is something that will need to be measured and decided upon.\r\n\r\nIf you would still like to pick up the issue, please let me know and I can assign it out. Myself and the other area owners ( @dotnet/area-system-numerics ) will be available to answer questions and help you through the process as needed.",
                                           "updatedAt":  "2023-12-20T06:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vKBdO",
                                           "createdAt":  "2023-12-20T17:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e There are notably two formats that these decimal types can be encoded as:\r\n\u003e \r\n\u003e 1. Decimal Encoding\r\n\u003e 2. Binary Encoding\r\n\u003e \r\n\u003e Given we are implementing this in software, following the binary encoding is desirable and is what the Intel based implementation is centered around.\r\n\r\nFor context, according to [LLVMs discourse](https://discourse.llvm.org/t/rfc-decimal-floating-point-support-iso-iec-ts-18661-2-and-c23/62152), GCC and Clang do Binary on XArch and Decimal on other platforms for the C23 `_Decimal*` types:\r\n```\r\nThere are four modes:\r\n\r\nno\r\nDFP support is not enabled.\r\nThis is the default for targets other than x86, x86_64, Power, and z/Architecture.\r\n\r\nyes\r\nDFP support is enabled, value representation is BID for x86 and x86_64 targets and DPD for all other targets.\r\nThis is the default for most x86, x86_64, Power, and z/Architecture targets.\r\n\r\nbid\r\nDFP support is enabled, BID is used for value representation.\r\n\r\ndpd\r\nDFP support is enabled, DPD is used for value representation.\r\n```",
                                           "updatedAt":  "2023-12-20T21:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vK6tB",
                                           "createdAt":  "2023-12-20T21:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "That would be incorrect.\r\n\r\nArm explicitly documents that decimal support is done using the binary based encoding: https://github.com/ARM-software/abi-aa/blob/2982a9f3b512a5bfdc9e3fea5d3b298f9165c36b/aapcs64/aapcs64.rst#decimal-floating-point\r\n\u003e The AAPCS permits use of Decimal Floating Point numbers encoded using the BID format as specified in IEEE 754-2008. Unless explicitly noted elsewhere, Decimal floating-point objects should be treated in exactly the same way as (binary) Floating Point objects for the purposes of structure layout, parameter passing, and result return.\r\n\u003e\r\n\u003e Note\r\n\u003e There is no support in the AArch64 ISA for Decimal Floating Point, so all operations must be emulated in software.\r\n\r\nThe same goes for the x86-64 SysV ABI specification (used by Linux systems): https://gitlab.com/x86-psABIs/x86-64-ABI\r\n\u003e | C | sizeof | alignment (bytes) | AMD64 Architecture) |\r\n\u003e | -- | -- | -- | -- |\r\n\u003e | _Decimal32 | 4 | 4 | 32bit BID (IEEE-754R) |\r\n\u003e | _Decimal64 | 8 | 8 | 64bit BID (IEEE-754R) |\r\n\u003e | _Decimal128 | 16 | 16 | 128bit BID (IEEE-754R) |\r\n\u003e\r\n\u003e • Arguments of types _Float16, float, double, _Decimal32, _Decimal64 and __m64 are\r\nin class SSE.\r\n\u003e • Arguments of types __float128, _Decimal128 and __m128 are split into two halves.\r\nThe least significant ones belong to class SSE, the most significant one to class\r\nSSEUP.\r\n\r\nThe intent of the specification is that any software based implementation is done using the binary encoding where it is more efficient. There is no need for our software based support to then support anything except for the binary based encoding as no platforms should be using it if they provide hardware support, where the decimal based encoding should be used instead and the APIs would be handled instrinsically.",
                                           "updatedAt":  "2023-12-20T21:01:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vL4Ki",
                                           "createdAt":  "2023-12-21T02:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RaymondHuy",
                                           "body":  "Thanks for your replies, I have been contributing to System.Text.Json area so the process sounds familiar with me. I intend to start like your suggestion @tannergooding , you can assign me this issue.  :wink:",
                                           "updatedAt":  "2023-12-21T02:21:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xPPEe",
                                           "createdAt":  "2024-01-19T06:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RaymondHuy",
                                           "body":  "Hi @tannergooding  I wonder about this case:\r\n\r\n`\r\nvar number = new Decimal(12345678, 0);\r\n`\r\n\r\nAs you see the `significand` exceeds 7 digits precision. How we should handle it ? throw overflow exception or rounding it to `1234567 * 10^1` like `new Decimal(1234567, 1)`",
                                           "updatedAt":  "2024-01-19T06:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTE1O",
                                           "createdAt":  "2024-01-19T17:39:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "IEEE 754 requires that inputs are taken as given, computed as if to infinite precision and unbounded range, and then rounded to the nearest representable result.\r\n\r\nThus `new Decimal32(12345678, 0)` is equivalent to the literal `12345678e0` which is simply `12345678 * 10^0` or just `12345678`. Since `decimal32` only supports 7 digits, it can only represent `12345670` or `12345680`, since the latter is closer to the infinitely precise result, it would be the correct answer. Something like `12345675` which is halfway between both would use `tied to even` rounding mode and also become `12345680`, while `12345685` would become `12345680` as well, not `12345690`",
                                           "updatedAt":  "2024-01-19T17:39:35Z"
                                       }
                                   ],
                         "totalCount":  32
                     },
        "title":  "[API Proposal]: Add Decimal32, Decimal64, and Decimal128 from the IEEE 754-2019 standard.",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84855",
        "createdAt":  "2023-04-14T19:07:20Z",
        "number":  84855,
        "author":  "speshuric",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-11T19:07:35Z",
        "body":  "### Description\r\n\r\n`System.Numerics.BigInteger` has a number of methods that look for the first zero (or first non-zero) element. This is usually done by looping through the span/array. It seems that most of them can be rewritten by `Span.LastIndexOfAnyExcept()` (or similar methods) - this method can be faster than plain loop. Isolated tests show improvement up to 8 times on modern x64 (but any distinct case need clarification).\r\n\r\n\u003cdetails\u003e\u003csummary\u003eClick here to expand and show examples\u003c/summary\u003e\r\n\u003cp\u003e\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L424-L427\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L503-L505\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L544-L545\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L589-L591\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L641-L645\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L1387-L1390\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L1545-L1550\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3093-L3101\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3540-L3544\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3599-L3606\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3840-L3847\r\n\r\nMay be I miss some of them. May be some of them shouldn\u0027t use span memory extension methods.\r\n\u003c/p\u003e\r\n\u003c/details\u003e\r\n\r\n\r\n### Configuration\r\nCurrent main branch\r\n\r\n### Regression?\r\nNo\r\n\r\n### Data\r\nWill be provided\r\n\r\n### Analysis\r\nWill be provided\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObk-fSg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8wbj",
                                           "createdAt":  "2023-04-14T19:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n`System.Numerics.BigInteger` has a number of methods that look for the first zero (or first non-zero) element. This is usually done by looping through the span/array. It seems that most of them can be rewritten by `Span.LastIndexOfAnyExcept()` (or similar methods) - this method can be faster than plain loop. Isolated tests show improvement up to 8 times on modern x64 (but any distinct case need clarification).\r\n\r\n\u003cdetails\u003e\u003csummary\u003eClick here to expand and show examples\u003c/summary\u003e\r\n\u003cp\u003e\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L424-L427\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L503-L505\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L544-L545\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L589-L591\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L641-L645\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L1387-L1390\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L1545-L1550\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3093-L3101\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3540-L3544\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3599-L3606\r\n\r\nhttps://github.com/dotnet/runtime/blob/bed0ec0d196c9f85b9154d71e2e164bc46b7b0a5/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs#L3840-L3847\r\n\r\nMay be I miss some of them. May be some of them shouldn\u0027t use span memory extension methods.\r\n\u003c/p\u003e\r\n\u003c/details\u003e\r\n\r\n\r\n### Configuration\r\nCurrent main branch\r\n\r\n### Regression?\r\nNo\r\n\r\n### Data\r\nWill be provided\r\n\r\n### Analysis\r\nWill be provided\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003espeshuric\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-14T19:07:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAiQn",
                                           "createdAt":  "2023-08-14T18:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "General perf optimization. Contributions welcome anytime",
                                           "updatedAt":  "2023-08-14T18:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kc_93",
                                           "createdAt":  "2023-08-20T16:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommysor",
                                           "body":  "@speshuric @tannergooding I made an attempt with the first example given by @speshuric.\r\nEdit: Info in this post is obsolete, see conclusion in pr #90960\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eEdit: this is the original post\u003c/summary\u003e\r\n\r\nTurns out there is a question of what cases should this be optimized for?\r\n_Edit_: Potentially worth it to add special cases for a few more elements.  \r\n_Edit2_: I may have answered my own question in next post.\r\n\r\nCase: Array contains no zero elements at end =\u003e equal between Current and proposed.\r\nCase: Array contains between 1 and 3 zero elements at end =\u003e Current is faster.\r\nCase: Array contains 4 zero elements at end =\u003e equal between Current and proposed.\r\nCase: Array contains 5 or more zero elements at end =\u003e proposed is faster (increasing advantage with more zero elements).\r\n\r\n\"proposed\" in previous paragraph benchmarked as \"SpanIndexOfOpt\" (using `LastIndexOfAnyExcept` with a special case for \"last element is not zero\").  \r\nProposed matches performance when nothing should change (assumed most common case).  \r\nSacrifice ~1ns and decreasing on low number of zeroes (assumed common).  \r\nGain ever more on higher number of zeroes (assumed ever decreasing probability).  \r\n_Note_: I don\u0027t have a solid basis for how common the cases are. I generally assume 0 is more common than 1, which is more common than 2, and so on.\r\n\r\nMethods benchmarked:\r\n``` csharp\r\n    // Benchmarked as \"Current\"\r\n    public static int Current(uint[] val)\r\n    {\r\n        int len = val.Length - 1;\r\n        while (len \u003e= 0 \u0026\u0026 val[len] == 0) len--;\r\n        len++;\r\n        return len;\r\n    }\r\n    // Benchmarked as \"SpanIndexOf\"\r\n    public static int UsingLastIndexOfAnyExcept(uint[] val)\r\n    {\r\n        int len = val.AsSpan().LastIndexOfAnyExcept((uint)0);\r\n        len++;\r\n        return len;\r\n    }\r\n    // Benchmarked as \"SpanIndexOfOpt\"\r\n    public static int UsingLastIndexOfAnyExcept_WithOptimizedNoZeroes(uint[] val)\r\n    {\r\n        int len = val.Length;\r\n        if (val[len - 1] == 0)\r\n        {\r\n            len = val.AsSpan().LastIndexOfAnyExcept((uint)0);\r\n            len++;\r\n        }\r\n        return len;\r\n    }\r\n```\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eDetails about benchmarks\u003c/summary\u003e\r\n\r\nBenchmarks have been run in Github Codespace (so not ideal, but seems mostly consistent between runs with a few weird ones each run).  \r\nSpeed determined by number of zero elements at end, array length irrelevant (at least up to array length ~~256~~ 8192).  \r\nBenchmark code available in my fork: https://github.com/tommysor/runtime/pull/1\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.13.5, OS=ubuntu 22.04 (container)\r\nAMD EPYC 7763, 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=8.0.100-preview.7.23376.3\r\n  [Host]     : .NET 8.0.0 (8.0.23.37506), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 8.0.0 (8.0.23.37506), X64 RyuJIT AVX2\r\n\r\n\r\n```\r\n|         Method | NumberOfZeroElements |       Mean |     Error |    StdDev |     Median | Ratio | RatioSD | Allocated | Alloc Ratio |\r\n|--------------- |--------------------- |-----------:|----------:|----------:|-----------:|------:|--------:|----------:|------------:|\r\n|        **Current** |                    **0** |  **0.3356 ns** | **0.0261 ns** | **0.0244 ns** |  **0.3308 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                    0 |  2.1166 ns | 0.0161 ns | 0.0135 ns |  2.1201 ns |  6.35 |    0.36 |         - |          NA |\r\n| SpanIndexOfOpt |                    0 |  0.3846 ns | 0.0234 ns | 0.0207 ns |  0.3780 ns |  1.14 |    0.11 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                    **1** |  **1.2683 ns** | **0.0322 ns** | **0.0302 ns** |  **1.2552 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                    1 |  2.1783 ns | 0.0754 ns | 0.0705 ns |  2.1786 ns |  1.72 |    0.05 |         - |          NA |\r\n| SpanIndexOfOpt |                    1 |  2.4456 ns | 0.0527 ns | 0.0440 ns |  2.4341 ns |  1.93 |    0.05 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                    **2** |  **1.5833 ns** | **0.0234 ns** | **0.0207 ns** |  **1.5852 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                    2 |  2.1301 ns | 0.0361 ns | 0.0301 ns |  2.1251 ns |  1.35 |    0.02 |         - |          NA |\r\n| SpanIndexOfOpt |                    2 |  2.4193 ns | 0.0268 ns | 0.0237 ns |  2.4154 ns |  1.53 |    0.03 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                    **4** |  **2.4688 ns** | **0.0624 ns** | **0.0553 ns** |  **2.4572 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                    4 |  2.1418 ns | 0.0470 ns | 0.0417 ns |  2.1334 ns |  0.87 |    0.03 |         - |          NA |\r\n| SpanIndexOfOpt |                    4 |  2.4967 ns | 0.0658 ns | 0.0583 ns |  2.4825 ns |  1.01 |    0.04 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                    **5** |  **2.7909 ns** | **0.0225 ns** | **0.0188 ns** |  **2.7849 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                    5 |  2.1674 ns | 0.0619 ns | 0.0579 ns |  2.1833 ns |  0.77 |    0.02 |         - |          NA |\r\n| SpanIndexOfOpt |                    5 |  2.4543 ns | 0.0379 ns | 0.0355 ns |  2.4488 ns |  0.88 |    0.02 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                   **32** | **17.3713 ns** | **0.3158 ns** | **0.2800 ns** | **17.2381 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                   32 |  4.7153 ns | 0.0524 ns | 0.0514 ns |  4.6984 ns |  0.27 |    0.00 |         - |          NA |\r\n| SpanIndexOfOpt |                   32 |  4.3488 ns | 0.0542 ns | 0.0423 ns |  4.3512 ns |  0.25 |    0.00 |         - |          NA |\r\n|                |                      |            |           |           |            |       |         |           |             |\r\n|        **Current** |                   **64** | **31.5755 ns** | **0.4968 ns** | **0.4404 ns** | **31.4325 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n|    SpanIndexOf |                   64 |  8.0636 ns | 0.3448 ns | 1.0165 ns |  7.3931 ns |  0.24 |    0.02 |         - |          NA |\r\n| SpanIndexOfOpt |                   64 |  6.6606 ns | 0.0644 ns | 0.0603 ns |  6.6317 ns |  0.21 |    0.00 |         - |          NA |\r\n\r\nWeirdness in this particular run:\r\n`NumberOfZeroElements` of 32 and 64 taking _less_ time for `SpanIndexOfOpt` than `SpanIndexOf` despite doing the exact same thing with an additional check.\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-11T18:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kjysN",
                                           "createdAt":  "2023-08-21T22:02:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommysor",
                                           "body":  "Edit: Info in this post is obsolete, see conclusion in pr #90960\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eEdit: this is the original post\u003c/summary\u003e\r\n\r\nFor the first example, based on the unit tests (most use random byte arrays), it seems \"no zeroes\" or \"one zero\" are _much_ more common than the rest. A tail of a few cases each up to 24 zeroes and a single example with 136 zeroes.\r\n\r\nFor that case, new proposed would be optimized for the \"no zeroes\" and \"1 zero\" cases.  \r\nCase of \"no zeroes\" being equally fast as current (diff in benchmark below is an artifact of this specific run).  \r\nCase of \"1 zero\" being slightly faster than current (diff is less than in benchmark below, estimate real ratio of ~0.8).\r\nUsing the Span method to speed up the tail methods.  \r\n2-4 zeroes slower, 5+ zeroes progressively faster (greater advantage over current).\r\n\r\n```csharp\r\n    // Benchmarked as \"SpanIndexOfOpt1\"\r\n    public static int UsingLastIndexOfAnyExcept_WithOptimizedUpTo1Zeroes(uint[] val)\r\n    {\r\n        int len = val.Length;\r\n        if (val[len - 1] == 0)\r\n        {\r\n            len--;\r\n            if (len \u003e 0 \u0026\u0026 val[len - 1] == 0)\r\n            {\r\n                len = val.AsSpan().LastIndexOfAnyExcept((uint)0);\r\n                len++;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n```\r\n\u003c/details\u003e\r\n\u003cdetails\u003e\r\n\u003csummary\u003eDetails about benchmarks and frequency of zeroes\u003c/summary\u003e\r\n\r\n### Frequency of zeroes\r\nOut of 10,000,000 random byte arrays, not a single one had more than 1 zero (no zeroes most common by far).  \r\n\r\nIn unit tests they are much more common, either intentionally for tests or when involved in multiplication.  \r\nAnd (I think) when picking a number close to a power of 2 (lots of 1 bits in a row, or lots of 0 bits in a row).  \r\n\r\nFor frequency in unit tests I modified the code to fail the test if the number of zeroes was equal to X.  \r\nNumber of zeroes to number of tests\r\n-  0 =\u003e failed=\"321\"\r\n-  1 =\u003e failed=\"211\"\r\n-  2 =\u003e failed=\"2\"\r\n-  3 =\u003e failed=\"3\"\r\n-  4 =\u003e failed=\"7\"\r\n-  5 =\u003e failed=\"5\"\r\n-  6 =\u003e failed=\"7\"\r\n-  7 =\u003e failed=\"3\"\r\n-  8 =\u003e failed=\"1\"\r\n-  9 =\u003e failed=\"7\"\r\n- 10 =\u003e failed=\"2\"\r\n- 11 =\u003e failed=\"4\"\r\n- 12 =\u003e failed=\"4\"\r\n- 13 =\u003e failed=\"2\"\r\n- 14 =\u003e failed=\"6\"\r\n- 15 =\u003e failed=\"1\"\r\n- 16 =\u003e failed=\"5\"\r\n- 17 =\u003e failed=\"5\"\r\n- 18 =\u003e failed=\"3\"\r\n- 19 =\u003e failed=\"3\"\r\n- 20 =\u003e failed=\"7\"\r\n- 21 =\u003e failed=\"6\"\r\n- 22 =\u003e failed=\"1\"\r\n- 23 =\u003e failed=\"4\"\r\n- 24 =\u003e failed=\"2\"\r\n- more than 24 =\u003e failed=\"1\" (136 zeroes)\r\n\r\n### Benchmark new proposed\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.13.5, OS=ubuntu 22.04 (container)\r\nAMD EPYC 7763, 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=8.0.100-preview.7.23376.3\r\n  [Host]     : .NET 8.0.0 (8.0.23.37506), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 8.0.0 (8.0.23.37506), X64 RyuJIT AVX2\r\n\r\n\r\n```\r\n|          Method | NumberOfZeroElements |       Mean |     Error |    StdDev |     Median | Ratio | RatioSD | Allocated | Alloc Ratio |\r\n|---------------- |--------------------- |-----------:|----------:|----------:|-----------:|------:|--------:|----------:|------------:|\r\n|         **Current** |                    **0** |  **0.4317 ns** | **0.0287 ns** | **0.0255 ns** |  **0.4226 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    0 |  0.3327 ns | 0.0341 ns | 0.0302 ns |  0.3211 ns |  0.77 |    0.09 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **1** |  **1.2739 ns** | **0.0507 ns** | **0.0450 ns** |  **1.2651 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    1 |  0.6671 ns | 0.0299 ns | 0.0265 ns |  0.6687 ns |  0.52 |    0.03 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **2** |  **1.6342 ns** | **0.0643 ns** | **0.0836 ns** |  **1.6175 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    2 |  2.7661 ns | 0.0580 ns | 0.0514 ns |  2.7485 ns |  1.70 |    0.10 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **3** |  **1.9835 ns** | **0.0708 ns** | **0.0727 ns** |  **1.9864 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    3 |  2.7824 ns | 0.0598 ns | 0.0530 ns |  2.7919 ns |  1.40 |    0.06 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **4** |  **2.5026 ns** | **0.0798 ns** | **0.0666 ns** |  **2.4757 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    4 |  2.9106 ns | 0.0918 ns | 0.2268 ns |  2.8355 ns |  1.22 |    0.15 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **5** |  **2.8263 ns** | **0.0749 ns** | **0.0625 ns** |  **2.8155 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    5 |  2.7813 ns | 0.0749 ns | 0.0625 ns |  2.7813 ns |  0.98 |    0.02 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **6** |  **3.4840 ns** | **0.1021 ns** | **0.1135 ns** |  **3.4294 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    6 |  2.8140 ns | 0.0890 ns | 0.1093 ns |  2.7808 ns |  0.81 |    0.04 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **7** |  **3.8893 ns** | **0.1014 ns** | **0.0899 ns** |  **3.8689 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    7 |  2.7446 ns | 0.0482 ns | 0.0427 ns |  2.7490 ns |  0.71 |    0.02 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                    **8** |  **4.4150 ns** | **0.1131 ns** | **0.1003 ns** |  **4.3772 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                    8 |  3.1855 ns | 0.0733 ns | 0.0649 ns |  3.1672 ns |  0.72 |    0.02 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                   **16** |  **9.1404 ns** | **0.1010 ns** | **0.0895 ns** |  **9.1174 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                   16 |  3.7654 ns | 0.1053 ns | 0.1369 ns |  3.7446 ns |  0.42 |    0.02 |         - |          NA |\r\n|                 |                      |            |           |           |            |       |         |           |             |\r\n|         **Current** |                   **24** | **12.9521 ns** | **0.1947 ns** | **0.1726 ns** | **12.9232 ns** |  **1.00** |    **0.00** |         **-** |          **NA** |\r\n| SpanIndexOfOpt1 |                   24 |  4.1487 ns | 0.0877 ns | 0.0820 ns |  4.1530 ns |  0.32 |    0.01 |         - |          NA |\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-11T18:56:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uT59K",
                                           "createdAt":  "2023-12-11T19:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommysor",
                                           "body":  "@adamsitnik @tannergooding \r\nShould this issue be closed or changed based the conclusion in pr #90960 ?\r\nI only looked at the first example given in the original post. But my basic assumption would be that the conclusion holds for the other examples as well.",
                                           "updatedAt":  "2023-12-11T19:07:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "System.Numerics.BigInteger: use LastIndexOfAnyExcept (when relevant)",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87171",
        "createdAt":  "2023-06-06T14:41:26Z",
        "number":  87171,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3XbRw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephentoub",
                                            "createdAt":  "2023-06-06T14:43:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-06-06T18:05:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-04-20T19:54:34Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-07-24T22:53:35Z",
        "body":  "### Summary\r\n\r\nUp through .NET 7 we have the provided UTF-16 based parsing functionality in the form of various `Parse` and `TryParse` APIs exposed as static methods on the respective types. In .NET 7 this support was expanded via the new `IParsable` and `ISpanParsable` interface and some additional numeric specific APIs on `INumberBase` that take a `NumberStyles` parameter.\r\n\r\nWe have also provided `Utf8Parser` which gives access to UTF-8 based parsing functionality for a limited subset of scenarios and which has a core differing behavior in that rather than treating the input as invalid after the first invalid character, it is instead treated as \"end of input\".\r\n\r\nIn .NET 8, we have again expanded the core support to provide `IUtf8SpanParsable` and some additional methods on `INumberBase` which provides parity to the UTF-16 scenarios. However, there still remains a divergence in that `UTF8Parser` still supports treating the first invalid character specially and there is no equivalent functionality for `UTF-16` or for `UTF-8` when using the new interfaces/APIs.\r\n\r\nIt is proposed that we then provide a new `NumberStyles` option that allows access to this functionality for `UTF-16` or `UTF-8` scenarios via the new interfaces/types. This would make `Utf8Parser` and `Utf8Formatter` both \"functionally obsolete\" even if we do not actually mark them as such.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Globalization\r\n{\r\n    [Flags]\r\n    public partial enum NumberStyles\r\n    {\r\n        AllowTrailingInvalidCharacters = 0x800\r\n    }\r\n}\r\n\r\nnamespace System.Numerics\r\n{\r\n    public static virtual bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int charsConsumed);\r\n\r\n    public static virtual bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int charsConsumed);\r\n    \r\n    public static virtual bool TryParse(ReadOnlySpan\u003cbyte\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int bytesConsumed);\r\n}\r\n```\r\n\r\nWe would then remove `api-approved` from proposals such as https://github.com/dotnet/runtime/issues/73842 given that it provides no new functionality. -- Even if this proposal is rejected, there needs to be a determination if APIs are exposed on `Utf8Formatter` given that it is effectively just a mirror for `Utf8Parser` and doesn\u0027t actually provide access to any functionality that can not be done using `IUtf8SpanFormattable`\r\n\r\nGiven that the current requirement is that unsupported/unrecognized `NumberStyles` throw an `ArgumentException`, we can reasonably provide a default implementation since the only valid `bytesConsumed`/`charsConsumed` will be \"everything\" or \"nothing\". The implementor would be expected to override the DIM if and when they add support for `AllowTrailingInvalidCharacters`\r\n\r\n### Alternative Names\r\n\r\nThere are several potential other names that we could choose from, ranging in verbosity and total clarity on what\u0027s being allowed:\r\n* AllowTrailingCharacters\r\n* AllowTrailingAny\r\n* AllowInvalidCharacterForEndOfString\r\n* StopOnFirstInvalidCharacter\r\n* etc",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkWgZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eHBNN",
                                           "createdAt":  "2023-06-06T14:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Summary\r\n\r\nUp through .NET 7 we have the provided UTF-16 based parsing functionality in the form of various `Parse` and `TryParse` APIs exposed as static methods on the respective types. In .NET 7 this support was expanded via the new `IParsable` and `ISpanParsable` interface and some additional numeric specific APIs on `INumberBase` that take a `NumberStyles` parameter.\r\n\r\nWe have also provided `Utf8Parser` which gives access to UTF-8 based parsing functionality for a limited subset of scenarios and which has a core differing behavior in that rather than treating the input as invalid after the first invalid character, it is instead treated as \"end of input\".\r\n\r\nIn .NET 8, we have again expanded the core support to provide `IUtf8SpanParsable` and some additional methods on `INumberBase` which provides parity to the UTF-16 scenarios. However, there still remains a divergence in that `UTF8Parser` still supports treating the first invalid character specially and there is no equivalent functionality for `UTF-16` or for `UTF-8` when using the new interfaces/APIs.\r\n\r\nIt is proposed that we then provide a new `NumberStyles` option that allows access to this functionality for `UTF-16` or `UTF-8` scenarios via the new interfaces/types. This would make `Utf8Parser` and `Utf8Formatter` both \"functionally obsolete\" even if we do not actually mark them as such.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Globalization\r\n{\r\n    [Flags]\r\n    public partial enum NumberStyles\r\n    {\r\n        AllowTrailingInvalidCharacters = 0x800\r\n    }\r\n}\r\n\r\nnamespace System.Numerics\r\n{\r\n    public static virtual bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int charsConsumed);\r\n\r\n    public static virtual bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int charsConsumed);\r\n    \r\n    public static virtual bool TryParse(ReadOnlySpan\u003cbyte\u003e s, NumberStyles style, IFormatProvider? provider, [MaybeNullWhen(false)] out TSelf result, out int bytesConsumed);\r\n}\r\n```\r\n\r\nWe would then remove `api-approved` from proposals such as https://github.com/dotnet/runtime/issues/73842 given that it provides no new functionality. -- Even if this proposal is rejected, there needs to be a determination if APIs are exposed on `Utf8Formatter` given that it is effectively just a mirror for `Utf8Parser` and doesn\u0027t actually provide access to any functionality that can not be done using `IUtf8SpanFormattable`\r\n\r\nGiven that the current requirement is that unsupported/unrecognized `NumberStyles` throw an `ArgumentException`, we can reasonably provide a default implementation since the only valid `bytesConsumed`/`charsConsumed` will be \"everything\" or \"nothing\". The implementor would be expected to override the DIM if and when they add support for `AllowTrailingInvalidCharacters`\r\n\r\n### Alternative Names\r\n\r\nThere are several potential other names that we could choose from, ranging in verbosity and total clarity on what\u0027s being allowed:\r\n* AllowTrailingCharacters\r\n* AllowTrailingAny\r\n* AllowInvalidCharacterForEndOfString\r\n* StopOnFirstInvalidCharacter\r\n* etc\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `api-ready-for-review`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-06T14:41:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fUtPY",
                                           "createdAt":  "2023-06-20T18:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=K-IlNtfztE0\u0026t=0h53m52s)\n\n* Looks good as proposed\r\n* For the default implementation we have three options:\r\n    1. `TryParse` throws for `AllowTrailingInvalidCharacters`\r\n    2. `TryParse` delegates to `Parse` masking off `AllowTrailingInvalidCharacters`\r\n    3. `TryParse` delegates to `Parse` without masking and assumes `Parse` will throw when it doesn\u0027t understand `AllowTrailingInvalidCharacters`\r\n* We decided for option (3)\r\n\r\n```C#\r\nnamespace System.Globalization\r\n{\r\n    [Flags]\r\n    public partial enum NumberStyles\r\n    {\r\n        AllowTrailingInvalidCharacters = 0x800\r\n    }\r\n}\r\n\r\nnamespace System.Numerics\r\n{\r\n    public interface INumberBase\u003cTSelf\u003e\r\n    {\r\n        public static virtual bool TryParse([NotNullWhen(true)] string? s,\r\n                                            NumberStyles style,\r\n                                            IFormatProvider? provider,\r\n                                            [MaybeNullWhen(false)] out TSelf result,\r\n                                            out int charsConsumed);\r\n        public static virtual bool TryParse(ReadOnlySpan\u003cchar\u003e s,\r\n                                            NumberStyles style,\r\n                                            IFormatProvider? provider,\r\n                                            [MaybeNullWhen(false)] out TSelf result,\r\n                                            out int charsConsumed); \r\n        public static virtual bool TryParse(ReadOnlySpan\u003cbyte\u003e s,\r\n                                            NumberStyles style,\r\n                                            IFormatProvider? provider,\r\n                                            [MaybeNullWhen(false)] out TSelf result,\r\n                                            out int bytesConsumed);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-06-20T18:18:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iRaBl",
                                           "createdAt":  "2023-07-24T22:53:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Not going to have time to land this one for .NET 8, we\u0027ll be able to take a PR for it anytime after main opens for .NET 9 changes next month.",
                                           "updatedAt":  "2023-07-24T22:53:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Provide a new NumberStyles option to stop parsing after the first invalid character",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89173",
        "createdAt":  "2023-07-19T09:38:52Z",
        "number":  89173,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-08T19:17:05Z",
        "body":  "The System.Runtime and System.Runtime.Numerics work items consistently fail on the [linux outerloop pipeline](https://dev.azure.com/dnceng-public/public/_build?definitionId=127\u0026_a=summary):\r\n\r\n```\r\n/root/helix/work/workitem/e /root/helix/work/workitem/e\r\n  Discovering: System.Runtime.Numerics.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Numerics.Tests (found 7 of 562 test cases)\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 2)\r\n./RunTests.sh: line 168:    22 Killed                  \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Runtime.Numerics.Tests.runtimeconfig.json --depsfile System.Runtime.Numerics.Tests.deps.json xunit.console.dll System.Runtime.Numerics.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem/e\r\n----- end Fri 07 Jul 2023 11:41:50 AM UTC ----- exit code 137 ----------------------------------------------------------\r\nexit code 137 means SIGKILL Killed eg by kill\r\n```\r\n\r\nLooking further down in the log we can see that they\u0027ve been killed by the Out of Memory (OOM) killer:\r\n\r\n```\r\n[ 2661.445879] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/docker/6a407bb075622c6a7f6a9a7b88ddd30217d8294911afde258ca18d342721bf3b,task=dotnet,pid=25681,uid=1000\r\n[ 2661.445924] Out of memory: Killed process 25681 (dotnet) total-vm:273925828kB, anon-rss:7218652kB, file-rss:0kB, shmem-rss:14728kB, UID:1000 pgtables:14564kB oom_score_adj:0\r\n```\r\n\r\nThis has been going on for as long as there are logs in AzDO (June 19th).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpiT8ZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h20o_",
                                           "createdAt":  "2023-07-19T09:38:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/runtime-infrastructure\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe System.Runtime and System.Runtime.Numerics work items consistently fail on the linux outerloop pipeline:\r\n\r\n```\r\n/root/helix/work/workitem/e /root/helix/work/workitem/e\r\n  Discovering: System.Runtime.Numerics.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Numerics.Tests (found 7 of 562 test cases)\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 2)\r\n./RunTests.sh: line 168:    22 Killed                  \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Runtime.Numerics.Tests.runtimeconfig.json --depsfile System.Runtime.Numerics.Tests.deps.json xunit.console.dll System.Runtime.Numerics.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem/e\r\n----- end Fri 07 Jul 2023 11:41:50 AM UTC ----- exit code 137 ----------------------------------------------------------\r\nexit code 137 means SIGKILL Killed eg by kill\r\n```\r\n\r\nLooking further down in the log we can see that they\u0027ve been killed by the Out of Memory (OOM) killer:\r\n\r\n```\r\n[ 2661.445879] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/docker/6a407bb075622c6a7f6a9a7b88ddd30217d8294911afde258ca18d342721bf3b,task=dotnet,pid=25681,uid=1000\r\n[ 2661.445924] Out of memory: Killed process 25681 (dotnet) total-vm:273925828kB, anon-rss:7218652kB, file-rss:0kB, shmem-rss:14728kB, UID:1000 pgtables:14564kB oom_score_adj:0\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eakoeplinger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-linux`, `area-Infrastructure`, `runtime-coreclr`, `blocking-clean-ci-optional`, `blocking-outerloop`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-19T09:38:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kBGm8",
                                           "createdAt":  "2023-08-14T20:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Unlikely a product bug - issue with test that needs to be better conditioned for its environment.",
                                           "updatedAt":  "2023-08-14T20:26:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mJPxk",
                                           "createdAt":  "2025-04-08T19:17:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "If it\u0027s marked \"future\", it must not be blocking.",
                                           "updatedAt":  "2025-04-08T19:17:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "OOM on outerloop-linux runs of runtime-libraries-coreclr pipeline on System.Runtime.Tests and System.Runtime.Numerics.Tests",
        "labels":  [
                       "area-System.Numerics",
                       "os-linux",
                       "test-bug",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93513",
        "createdAt":  "2023-10-14T10:22:12Z",
        "number":  93513,
        "author":  "xoofx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD7NHw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "tgjones",
                                            "createdAt":  "2023-10-14T15:58:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2023-10-15T10:07:52Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "FlashyDJ",
                                            "createdAt":  "2023-10-15T14:10:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Wenveo",
                                            "createdAt":  "2023-10-19T12:44:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-10-26T16:02:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "dotlogix",
                                            "createdAt":  "2023-12-20T02:07:19Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-12-29T17:16:00Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "CreoOne",
                                            "createdAt":  "2024-02-08T11:33:19Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "nietras",
                                            "createdAt":  "2024-03-03T09:35:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "trympet",
                                            "createdAt":  "2025-06-15T12:03:47Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-07-20T22:53:53Z",
        "body":  "### Background and motivation\r\n\r\nSeveral math vectorized functions operating on Span are being added System.Numerics.Tensors TensorPrimitives #92219 and there is a plan to augment them with #93286.\r\n\r\nThough, the current public API limits to Span usage and so limits reusability/composability \r\n of higher-level functions. Similarly, the current implementation is done with internal private operators while there is a proposal to make these operators with their interface public #93217. In addition, we should consider surfacing directly the Math functions associated to them, while these operators would call these vectorized math functions.\r\n\r\nAlso, Vectorized math functions can be heavily used and are useful outside of Tensor scenarios, like 2D/3D runtime calculation. For example, Unity has been using such vectorized math functions in [Unity.Mathematics](https://github.com/Unity-Technologies/Unity.Mathematics) though the implementation through the Burst compiler was redirected to the C++ [SLEEF library](https://github.com/shibatch/sleef). Bringing such vectorized math functions directly to .NET would remove entirely the need for such native dependency and would open more scenarios for optimizations.\r\n\r\nThe idea would be to bring these reusable vectorized Math functions to the following types:\r\n\r\nFor both `\u003cfloat\u003e` and `\u003cdouble\u003e`:\r\n- `System.Runtime.Intrinsics.Vector64`\r\n- `System.Runtime.Intrinsics.Vector128`\r\n- `System.Runtime.Intrinsics.Vector256`\r\n- `System.Runtime.Intrinsics.Vector512`\r\n\r\nFor `System.Numerics` Vector types\r\n- `System.Numerics.Vector`\r\n- `System.Numerics.Vector2`\r\n- `System.Numerics.Vector3`\r\n- `System.Numerics.Vector4`\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector64\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atanh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Sinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tanh(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AcosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asin(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AsinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AtanPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e CosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e DegreesToRadians(Vector64\u003cfloat\u003e degrees);\r\n    public static Vector64\u003cfloat\u003e RadiansToDegrees(Vector64\u003cfloat\u003e radians);\r\n    public static Vector64\u003cfloat\u003e Sin(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e Sin, Vector64\u003cfloat\u003e Cos) SinCos(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e SinPi, Vector64\u003cfloat\u003e CosPi) SinCosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e SinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e TanPi(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e newBase);\r\n    public static Vector64\u003cfloat\u003e LogP1(Vector64\u003cfloat\u003e x) =\u003e Log(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log2P1(Vector64\u003cfloat\u003e x) =\u003e Log2(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log10P1(Vector64\u003cfloat\u003e x) =\u003e Log10(x + Vector64\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Exp(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e ExpM1(Vector64\u003cfloat\u003e x) =\u003e Exp(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp2M1(Vector64\u003cfloat\u003e x) =\u003e Exp2(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp10M1(Vector64\u003cfloat\u003e x) =\u003e Exp10(x) - Vector64\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Pow(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Cbrt(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Hypot(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n    public static Vector64\u003cfloat\u003e RootN(Vector64\u003cfloat\u003e x, int n);\r\n    public static Vector64\u003cfloat\u003e Sqrt(Vector64\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, int digits);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector64\u003cfloat\u003e Truncate(Vector64\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector64\u003cfloat\u003e Atan2(Vector64\u003cfloat\u003e y, Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atan2Pi(Vector64\u003cfloat\u003e y, Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e BitDecrement(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e BitIncrement(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e FusedMultiplyAdd(Vector64\u003cfloat\u003e left, Vector64\u003cfloat\u003e right, Vector64\u003cfloat\u003e addend);\r\n    public static Vector64\u003cfloat\u003e Lerp(Vector64\u003cfloat\u003e value1, Vector64\u003cfloat\u003e value2, Vector64\u003cfloat\u003e amount);\r\n    public static Vector64\u003cfloat\u003e ReciprocalEstimate(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e ReciprocalSqrtEstimate(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Acosh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Asinh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atanh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Cosh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Sinh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Tanh(Vector64\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Acos(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AcosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Asin(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AsinPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atan(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AtanPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Cos(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e CosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e DegreesToRadians(Vector64\u003cdouble\u003e degrees);\r\n    public static Vector64\u003cdouble\u003e RadiansToDegrees(Vector64\u003cdouble\u003e radians);\r\n    public static Vector64\u003cdouble\u003e Sin(Vector64\u003cdouble\u003e x);\r\n    public static (Vector64\u003cdouble\u003e Sin, Vector64\u003cdouble\u003e Cos) SinCos(Vector64\u003cdouble\u003e x);\r\n    public static (Vector64\u003cdouble\u003e SinPi, Vector64\u003cdouble\u003e CosPi) SinCosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e SinPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Tan(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e TanPi(Vector64\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Log(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e newBase);\r\n    public static Vector64\u003cdouble\u003e LogP1(Vector64\u003cdouble\u003e x) =\u003e Log(x + Vector64\u003cdouble\u003e.One);\r\n    public static Vector64\u003cdouble\u003e Log2(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log2P1(Vector64\u003cdouble\u003e x) =\u003e Log2(x + Vector64\u003cdouble\u003e.One);\r\n    public static Vector64\u003cdouble\u003e Log10(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log10P1(Vector64\u003cdouble\u003e x) =\u003e Log10(x + Vector64\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Exp(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e ExpM1(Vector64\u003cdouble\u003e x) =\u003e Exp(x) - Vector64\u003cdouble\u003e.One;\r\n    public static Vector64\u003cdouble\u003e Exp2(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Exp2M1(Vector64\u003cdouble\u003e x) =\u003e Exp2(x) - Vector64\u003cdouble\u003e.One;\r\n    public static Vector64\u003cdouble\u003e Exp10(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Exp10M1(Vector64\u003cdouble\u003e x) =\u003e Exp10(x) - Vector64\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Pow(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Cbrt(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Hypot(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e y);\r\n    public static Vector64\u003cdouble\u003e RootN(Vector64\u003cdouble\u003e x, int n);\r\n    public static Vector64\u003cdouble\u003e Sqrt(Vector64\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, int digits);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector64\u003cdouble\u003e Truncate(Vector64\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector64\u003cdouble\u003e Atan2(Vector64\u003cdouble\u003e y, Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atan2Pi(Vector64\u003cdouble\u003e y, Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e BitDecrement(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e BitIncrement(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e FusedMultiplyAdd(Vector64\u003cdouble\u003e left, Vector64\u003cdouble\u003e right, Vector64\u003cdouble\u003e addend);\r\n    public static Vector64\u003cdouble\u003e Lerp(Vector64\u003cdouble\u003e value1, Vector64\u003cdouble\u003e value2, Vector64\u003cdouble\u003e amount);\r\n    public static Vector64\u003cdouble\u003e ReciprocalEstimate(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e ReciprocalSqrtEstimate(Vector64\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector64\u003cT\u003e Clamp\u003cT\u003e(Vector64\u003cT\u003e value, Vector64\u003cT\u003e min, Vector64\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e CopySign\u003cT\u003e(Vector64\u003cT\u003e value, Vector64\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MaxNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector64\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinMagnitude\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector128\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atanh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Sinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tanh(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AcosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asin(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AsinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AtanPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e CosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e DegreesToRadians(Vector128\u003cfloat\u003e degrees);\r\n    public static Vector128\u003cfloat\u003e RadiansToDegrees(Vector128\u003cfloat\u003e radians);\r\n    public static Vector128\u003cfloat\u003e Sin(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e Sin, Vector128\u003cfloat\u003e Cos) SinCos(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e SinPi, Vector128\u003cfloat\u003e CosPi) SinCosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e SinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e TanPi(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e newBase);\r\n    public static Vector128\u003cfloat\u003e LogP1(Vector128\u003cfloat\u003e x) =\u003e Log(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log2P1(Vector128\u003cfloat\u003e x) =\u003e Log2(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log10P1(Vector128\u003cfloat\u003e x) =\u003e Log10(x + Vector128\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Exp(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e ExpM1(Vector128\u003cfloat\u003e x) =\u003e Exp(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp2M1(Vector128\u003cfloat\u003e x) =\u003e Exp2(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp10M1(Vector128\u003cfloat\u003e x) =\u003e Exp10(x) - Vector128\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Pow(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Cbrt(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Hypot(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n    public static Vector128\u003cfloat\u003e RootN(Vector128\u003cfloat\u003e x, int n);\r\n    public static Vector128\u003cfloat\u003e Sqrt(Vector128\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, int digits);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector128\u003cfloat\u003e Truncate(Vector128\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector128\u003cfloat\u003e Atan2(Vector128\u003cfloat\u003e y, Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atan2Pi(Vector128\u003cfloat\u003e y, Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e BitDecrement(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e BitIncrement(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e FusedMultiplyAdd(Vector128\u003cfloat\u003e left, Vector128\u003cfloat\u003e right, Vector128\u003cfloat\u003e addend);\r\n    public static Vector128\u003cfloat\u003e Lerp(Vector128\u003cfloat\u003e value1, Vector128\u003cfloat\u003e value2, Vector128\u003cfloat\u003e amount);\r\n    public static Vector128\u003cfloat\u003e ReciprocalEstimate(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e ReciprocalSqrtEstimate(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Acosh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Asinh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atanh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Cosh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Sinh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Tanh(Vector128\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Acos(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AcosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Asin(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AsinPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atan(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AtanPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Cos(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e CosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e DegreesToRadians(Vector128\u003cdouble\u003e degrees);\r\n    public static Vector128\u003cdouble\u003e RadiansToDegrees(Vector128\u003cdouble\u003e radians);\r\n    public static Vector128\u003cdouble\u003e Sin(Vector128\u003cdouble\u003e x);\r\n    public static (Vector128\u003cdouble\u003e Sin, Vector128\u003cdouble\u003e Cos) SinCos(Vector128\u003cdouble\u003e x);\r\n    public static (Vector128\u003cdouble\u003e SinPi, Vector128\u003cdouble\u003e CosPi) SinCosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e SinPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Tan(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e TanPi(Vector128\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Log(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e newBase);\r\n    public static Vector128\u003cdouble\u003e LogP1(Vector128\u003cdouble\u003e x) =\u003e Log(x + Vector128\u003cdouble\u003e.One);\r\n    public static Vector128\u003cdouble\u003e Log2(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log2P1(Vector128\u003cdouble\u003e x) =\u003e Log2(x + Vector128\u003cdouble\u003e.One);\r\n    public static Vector128\u003cdouble\u003e Log10(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log10P1(Vector128\u003cdouble\u003e x) =\u003e Log10(x + Vector128\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Exp(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e ExpM1(Vector128\u003cdouble\u003e x) =\u003e Exp(x) - Vector128\u003cdouble\u003e.One;\r\n    public static Vector128\u003cdouble\u003e Exp2(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Exp2M1(Vector128\u003cdouble\u003e x) =\u003e Exp2(x) - Vector128\u003cdouble\u003e.One;\r\n    public static Vector128\u003cdouble\u003e Exp10(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Exp10M1(Vector128\u003cdouble\u003e x) =\u003e Exp10(x) - Vector128\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Pow(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Cbrt(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Hypot(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e y);\r\n    public static Vector128\u003cdouble\u003e RootN(Vector128\u003cdouble\u003e x, int n);\r\n    public static Vector128\u003cdouble\u003e Sqrt(Vector128\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, int digits);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector128\u003cdouble\u003e Truncate(Vector128\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector128\u003cdouble\u003e Atan2(Vector128\u003cdouble\u003e y, Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atan2Pi(Vector128\u003cdouble\u003e y, Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e BitDecrement(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e BitIncrement(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e FusedMultiplyAdd(Vector128\u003cdouble\u003e left, Vector128\u003cdouble\u003e right, Vector128\u003cdouble\u003e addend);\r\n    public static Vector128\u003cdouble\u003e Lerp(Vector128\u003cdouble\u003e value1, Vector128\u003cdouble\u003e value2, Vector128\u003cdouble\u003e amount);\r\n    public static Vector128\u003cdouble\u003e ReciprocalEstimate(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e ReciprocalSqrtEstimate(Vector128\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector128\u003cT\u003e Clamp\u003cT\u003e(Vector128\u003cT\u003e value, Vector128\u003cT\u003e min, Vector128\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e CopySign\u003cT\u003e(Vector128\u003cT\u003e value, Vector128\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MaxNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector128\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinMagnitude\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector256\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atanh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Sinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tanh(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AcosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asin(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AsinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AtanPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e CosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e DegreesToRadians(Vector256\u003cfloat\u003e degrees);\r\n    public static Vector256\u003cfloat\u003e RadiansToDegrees(Vector256\u003cfloat\u003e radians);\r\n    public static Vector256\u003cfloat\u003e Sin(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e Sin, Vector256\u003cfloat\u003e Cos) SinCos(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e SinPi, Vector256\u003cfloat\u003e CosPi) SinCosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e SinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e TanPi(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e newBase);\r\n    public static Vector256\u003cfloat\u003e LogP1(Vector256\u003cfloat\u003e x) =\u003e Log(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log2P1(Vector256\u003cfloat\u003e x) =\u003e Log2(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log10P1(Vector256\u003cfloat\u003e x) =\u003e Log10(x + Vector256\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Exp(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e ExpM1(Vector256\u003cfloat\u003e x) =\u003e Exp(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp2M1(Vector256\u003cfloat\u003e x) =\u003e Exp2(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp10M1(Vector256\u003cfloat\u003e x) =\u003e Exp10(x) - Vector256\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Pow(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Cbrt(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Hypot(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n    public static Vector256\u003cfloat\u003e RootN(Vector256\u003cfloat\u003e x, int n);\r\n    public static Vector256\u003cfloat\u003e Sqrt(Vector256\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, int digits);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector256\u003cfloat\u003e Truncate(Vector256\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector256\u003cfloat\u003e Atan2(Vector256\u003cfloat\u003e y, Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atan2Pi(Vector256\u003cfloat\u003e y, Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e BitDecrement(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e BitIncrement(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e FusedMultiplyAdd(Vector256\u003cfloat\u003e left, Vector256\u003cfloat\u003e right, Vector256\u003cfloat\u003e addend);\r\n    public static Vector256\u003cfloat\u003e Lerp(Vector256\u003cfloat\u003e value1, Vector256\u003cfloat\u003e value2, Vector256\u003cfloat\u003e amount);\r\n    public static Vector256\u003cfloat\u003e ReciprocalEstimate(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e ReciprocalSqrtEstimate(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Acosh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Asinh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atanh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Cosh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Sinh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Tanh(Vector256\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Acos(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AcosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Asin(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AsinPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atan(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AtanPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Cos(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e CosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e DegreesToRadians(Vector256\u003cdouble\u003e degrees);\r\n    public static Vector256\u003cdouble\u003e RadiansToDegrees(Vector256\u003cdouble\u003e radians);\r\n    public static Vector256\u003cdouble\u003e Sin(Vector256\u003cdouble\u003e x);\r\n    public static (Vector256\u003cdouble\u003e Sin, Vector256\u003cdouble\u003e Cos) SinCos(Vector256\u003cdouble\u003e x);\r\n    public static (Vector256\u003cdouble\u003e SinPi, Vector256\u003cdouble\u003e CosPi) SinCosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e SinPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Tan(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e TanPi(Vector256\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Log(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e newBase);\r\n    public static Vector256\u003cdouble\u003e LogP1(Vector256\u003cdouble\u003e x) =\u003e Log(x + Vector256\u003cdouble\u003e.One);\r\n    public static Vector256\u003cdouble\u003e Log2(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log2P1(Vector256\u003cdouble\u003e x) =\u003e Log2(x + Vector256\u003cdouble\u003e.One);\r\n    public static Vector256\u003cdouble\u003e Log10(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log10P1(Vector256\u003cdouble\u003e x) =\u003e Log10(x + Vector256\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Exp(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e ExpM1(Vector256\u003cdouble\u003e x) =\u003e Exp(x) - Vector256\u003cdouble\u003e.One;\r\n    public static Vector256\u003cdouble\u003e Exp2(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Exp2M1(Vector256\u003cdouble\u003e x) =\u003e Exp2(x) - Vector256\u003cdouble\u003e.One;\r\n    public static Vector256\u003cdouble\u003e Exp10(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Exp10M1(Vector256\u003cdouble\u003e x) =\u003e Exp10(x) - Vector256\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Pow(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Cbrt(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Hypot(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e y);\r\n    public static Vector256\u003cdouble\u003e RootN(Vector256\u003cdouble\u003e x, int n);\r\n    public static Vector256\u003cdouble\u003e Sqrt(Vector256\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, int digits);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector256\u003cdouble\u003e Truncate(Vector256\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector256\u003cdouble\u003e Atan2(Vector256\u003cdouble\u003e y, Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atan2Pi(Vector256\u003cdouble\u003e y, Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e BitDecrement(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e BitIncrement(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e FusedMultiplyAdd(Vector256\u003cdouble\u003e left, Vector256\u003cdouble\u003e right, Vector256\u003cdouble\u003e addend);\r\n    public static Vector256\u003cdouble\u003e Lerp(Vector256\u003cdouble\u003e value1, Vector256\u003cdouble\u003e value2, Vector256\u003cdouble\u003e amount);\r\n    public static Vector256\u003cdouble\u003e ReciprocalEstimate(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e ReciprocalSqrtEstimate(Vector256\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector256\u003cT\u003e Clamp\u003cT\u003e(Vector256\u003cT\u003e value, Vector256\u003cT\u003e min, Vector256\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e CopySign\u003cT\u003e(Vector256\u003cT\u003e value, Vector256\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MaxNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector256\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinMagnitude\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector512\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atanh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Sinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tanh(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AcosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asin(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AsinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AtanPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e CosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e DegreesToRadians(Vector512\u003cfloat\u003e degrees);\r\n    public static Vector512\u003cfloat\u003e RadiansToDegrees(Vector512\u003cfloat\u003e radians);\r\n    public static Vector512\u003cfloat\u003e Sin(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e Sin, Vector512\u003cfloat\u003e Cos) SinCos(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e SinPi, Vector512\u003cfloat\u003e CosPi) SinCosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e SinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e TanPi(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e newBase);\r\n    public static Vector512\u003cfloat\u003e LogP1(Vector512\u003cfloat\u003e x) =\u003e Log(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log2P1(Vector512\u003cfloat\u003e x) =\u003e Log2(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log10P1(Vector512\u003cfloat\u003e x) =\u003e Log10(x + Vector512\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Exp(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e ExpM1(Vector512\u003cfloat\u003e x) =\u003e Exp(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp2M1(Vector512\u003cfloat\u003e x) =\u003e Exp2(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp10M1(Vector512\u003cfloat\u003e x) =\u003e Exp10(x) - Vector512\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Pow(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Cbrt(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Hypot(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n    public static Vector512\u003cfloat\u003e RootN(Vector512\u003cfloat\u003e x, int n);\r\n    public static Vector512\u003cfloat\u003e Sqrt(Vector512\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, int digits);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector512\u003cfloat\u003e Truncate(Vector512\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector512\u003cfloat\u003e Atan2(Vector512\u003cfloat\u003e y, Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atan2Pi(Vector512\u003cfloat\u003e y, Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e BitDecrement(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e BitIncrement(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e FusedMultiplyAdd(Vector512\u003cfloat\u003e left, Vector512\u003cfloat\u003e right, Vector512\u003cfloat\u003e addend);\r\n    public static Vector512\u003cfloat\u003e Lerp(Vector512\u003cfloat\u003e value1, Vector512\u003cfloat\u003e value2, Vector512\u003cfloat\u003e amount);\r\n    public static Vector512\u003cfloat\u003e ReciprocalEstimate(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e ReciprocalSqrtEstimate(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Acosh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Asinh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atanh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Cosh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Sinh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Tanh(Vector512\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Acos(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AcosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Asin(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AsinPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atan(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AtanPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Cos(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e CosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e DegreesToRadians(Vector512\u003cdouble\u003e degrees);\r\n    public static Vector512\u003cdouble\u003e RadiansToDegrees(Vector512\u003cdouble\u003e radians);\r\n    public static Vector512\u003cdouble\u003e Sin(Vector512\u003cdouble\u003e x);\r\n    public static (Vector512\u003cdouble\u003e Sin, Vector512\u003cdouble\u003e Cos) SinCos(Vector512\u003cdouble\u003e x);\r\n    public static (Vector512\u003cdouble\u003e SinPi, Vector512\u003cdouble\u003e CosPi) SinCosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e SinPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Tan(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e TanPi(Vector512\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Log(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e newBase);\r\n    public static Vector512\u003cdouble\u003e LogP1(Vector512\u003cdouble\u003e x) =\u003e Log(x + Vector512\u003cdouble\u003e.One);\r\n    public static Vector512\u003cdouble\u003e Log2(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log2P1(Vector512\u003cdouble\u003e x) =\u003e Log2(x + Vector512\u003cdouble\u003e.One);\r\n    public static Vector512\u003cdouble\u003e Log10(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log10P1(Vector512\u003cdouble\u003e x) =\u003e Log10(x + Vector512\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Exp(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e ExpM1(Vector512\u003cdouble\u003e x) =\u003e Exp(x) - Vector512\u003cdouble\u003e.One;\r\n    public static Vector512\u003cdouble\u003e Exp2(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Exp2M1(Vector512\u003cdouble\u003e x) =\u003e Exp2(x) - Vector512\u003cdouble\u003e.One;\r\n    public static Vector512\u003cdouble\u003e Exp10(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Exp10M1(Vector512\u003cdouble\u003e x) =\u003e Exp10(x) - Vector512\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Pow(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Cbrt(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Hypot(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e y);\r\n    public static Vector512\u003cdouble\u003e RootN(Vector512\u003cdouble\u003e x, int n);\r\n    public static Vector512\u003cdouble\u003e Sqrt(Vector512\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, int digits);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector512\u003cdouble\u003e Truncate(Vector512\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector512\u003cdouble\u003e Atan2(Vector512\u003cdouble\u003e y, Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atan2Pi(Vector512\u003cdouble\u003e y, Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e BitDecrement(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e BitIncrement(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e FusedMultiplyAdd(Vector512\u003cdouble\u003e left, Vector512\u003cdouble\u003e right, Vector512\u003cdouble\u003e addend);\r\n    public static Vector512\u003cdouble\u003e Lerp(Vector512\u003cdouble\u003e value1, Vector512\u003cdouble\u003e value2, Vector512\u003cdouble\u003e amount);\r\n    public static Vector512\u003cdouble\u003e ReciprocalEstimate(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e ReciprocalSqrtEstimate(Vector512\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector512\u003cT\u003e Clamp\u003cT\u003e(Vector512\u003cT\u003e value, Vector512\u003cT\u003e min, Vector512\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e CopySign\u003cT\u003e(Vector512\u003cT\u003e value, Vector512\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MaxNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector512\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinMagnitude\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atanh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Sinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tanh(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AcosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asin(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AsinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AtanPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e CosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e DegreesToRadians(Vector\u003cfloat\u003e degrees);\r\n    public static Vector\u003cfloat\u003e RadiansToDegrees(Vector\u003cfloat\u003e radians);\r\n    public static Vector\u003cfloat\u003e Sin(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e Sin, Vector\u003cfloat\u003e Cos) SinCos(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e SinPi, Vector\u003cfloat\u003e CosPi) SinCosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e SinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e TanPi(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e newBase);\r\n    public static Vector\u003cfloat\u003e LogP1(Vector\u003cfloat\u003e x) =\u003e Log(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log2P1(Vector\u003cfloat\u003e x) =\u003e Log2(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log10P1(Vector\u003cfloat\u003e x) =\u003e Log10(x + Vector\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Exp(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e ExpM1(Vector\u003cfloat\u003e x) =\u003e Exp(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp2M1(Vector\u003cfloat\u003e x) =\u003e Exp2(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp10M1(Vector\u003cfloat\u003e x) =\u003e Exp10(x) - Vector\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Pow(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Cbrt(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Hypot(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n    public static Vector\u003cfloat\u003e RootN(Vector\u003cfloat\u003e x, int n);\r\n    public static Vector\u003cfloat\u003e Sqrt(Vector\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, int digits);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector\u003cfloat\u003e Truncate(Vector\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector\u003cfloat\u003e Atan2(Vector\u003cfloat\u003e y, Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atan2Pi(Vector\u003cfloat\u003e y, Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e BitDecrement(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e BitIncrement(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e FusedMultiplyAdd(Vector\u003cfloat\u003e left, Vector\u003cfloat\u003e right, Vector\u003cfloat\u003e addend);\r\n    public static Vector\u003cfloat\u003e Lerp(Vector\u003cfloat\u003e value1, Vector\u003cfloat\u003e value2, Vector\u003cfloat\u003e amount);\r\n    public static Vector\u003cfloat\u003e ReciprocalEstimate(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e ReciprocalSqrtEstimate(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Acosh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Asinh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atanh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Cosh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Sinh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Tanh(Vector\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Acos(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AcosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Asin(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AsinPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atan(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AtanPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Cos(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e CosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e DegreesToRadians(Vector\u003cdouble\u003e degrees);\r\n    public static Vector\u003cdouble\u003e RadiansToDegrees(Vector\u003cdouble\u003e radians);\r\n    public static Vector\u003cdouble\u003e Sin(Vector\u003cdouble\u003e x);\r\n    public static (Vector\u003cdouble\u003e Sin, Vector\u003cdouble\u003e Cos) SinCos(Vector\u003cdouble\u003e x);\r\n    public static (Vector\u003cdouble\u003e SinPi, Vector\u003cdouble\u003e CosPi) SinCosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e SinPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Tan(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e TanPi(Vector\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Log(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e newBase);\r\n    public static Vector\u003cdouble\u003e LogP1(Vector\u003cdouble\u003e x) =\u003e Log(x + Vector\u003cdouble\u003e.One);\r\n    public static Vector\u003cdouble\u003e Log2(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log2P1(Vector\u003cdouble\u003e x) =\u003e Log2(x + Vector\u003cdouble\u003e.One);\r\n    public static Vector\u003cdouble\u003e Log10(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log10P1(Vector\u003cdouble\u003e x) =\u003e Log10(x + Vector\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Exp(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e ExpM1(Vector\u003cdouble\u003e x) =\u003e Exp(x) - Vector\u003cdouble\u003e.One;\r\n    public static Vector\u003cdouble\u003e Exp2(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Exp2M1(Vector\u003cdouble\u003e x) =\u003e Exp2(x) - Vector\u003cdouble\u003e.One;\r\n    public static Vector\u003cdouble\u003e Exp10(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Exp10M1(Vector\u003cdouble\u003e x) =\u003e Exp10(x) - Vector\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Pow(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Cbrt(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Hypot(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e y);\r\n    public static Vector\u003cdouble\u003e RootN(Vector\u003cdouble\u003e x, int n);\r\n    public static Vector\u003cdouble\u003e Sqrt(Vector\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, int digits);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector\u003cdouble\u003e Truncate(Vector\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector\u003cdouble\u003e Atan2(Vector\u003cdouble\u003e y, Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atan2Pi(Vector\u003cdouble\u003e y, Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e BitDecrement(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e BitIncrement(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e FusedMultiplyAdd(Vector\u003cdouble\u003e left, Vector\u003cdouble\u003e right, Vector\u003cdouble\u003e addend);\r\n    public static Vector\u003cdouble\u003e Lerp(Vector\u003cdouble\u003e value1, Vector\u003cdouble\u003e value2, Vector\u003cdouble\u003e amount);\r\n    public static Vector\u003cdouble\u003e ReciprocalEstimate(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e ReciprocalSqrtEstimate(Vector\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector\u003cT\u003e Clamp\u003cT\u003e(Vector\u003cT\u003e value, Vector\u003cT\u003e min, Vector\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector\u003cT\u003e CopySign\u003cT\u003e(Vector\u003cT\u003e value, Vector\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MaxNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinMagnitude\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector2\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector2 Epsilon { get; }\r\n    public static Vector2 NaN { get; }\r\n    public static Vector2 NegativeInfinity { get; }\r\n    public static Vector2 NegativeZero { get; }\r\n    public static Vector2 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector2 E { get; }\r\n    public static Vector2 Pi { get; }\r\n    public static Vector2 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector2 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Acosh(Vector2 x);\r\n    public static Vector2 Asinh(Vector2 x);\r\n    public static Vector2 Atanh(Vector2 x);\r\n    public static Vector2 Cosh(Vector2 x);\r\n    public static Vector2 Sinh(Vector2 x);\r\n    public static Vector2 Tanh(Vector2 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Acos(Vector2 x);\r\n    public static Vector2 AcosPi(Vector2 x);\r\n    public static Vector2 Asin(Vector2 x);\r\n    public static Vector2 AsinPi(Vector2 x);\r\n    public static Vector2 Atan(Vector2 x);\r\n    public static Vector2 AtanPi(Vector2 x);\r\n    public static Vector2 Cos(Vector2 x);\r\n    public static Vector2 CosPi(Vector2 x);\r\n    public static Vector2 DegreesToRadians(Vector2 degrees);\r\n    public static Vector2 RadiansToDegrees(Vector2 radians);\r\n    public static Vector2 Sin(Vector2 x);\r\n    public static (Vector2 Sin, Vector2 Cos) SinCos(Vector2 x);\r\n    public static (Vector2 SinPi, Vector2 CosPi) SinCosPi(Vector2 x);\r\n    public static Vector2 SinPi(Vector2 x);\r\n    public static Vector2 Tan(Vector2 x);\r\n    public static Vector2 TanPi(Vector2 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Log(Vector2 x);\r\n    public static Vector2 Log(Vector2 x, Vector2 newBase);\r\n    public static Vector2 LogP1(Vector2 x) =\u003e Log(x + Vector2.One);\r\n    public static Vector2 Log2(Vector2 x);\r\n    public static Vector2 Log2P1(Vector2 x) =\u003e Log2(x + Vector2.One);\r\n    public static Vector2 Log10(Vector2 x);\r\n    public static Vector2 Log10P1(Vector2 x) =\u003e Log10(x + Vector2.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Exp(Vector2 x);\r\n    public static Vector2 ExpM1(Vector2 x) =\u003e Exp(x) - Vector2.One;\r\n    public static Vector2 Exp2(Vector2 x);\r\n    public static Vector2 Exp2M1(Vector2 x) =\u003e Exp2(x) - Vector2.One;\r\n    public static Vector2 Exp10(Vector2 x);\r\n    public static Vector2 Exp10M1(Vector2 x) =\u003e Exp10(x) - Vector2.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Pow(Vector2 x, Vector2 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Cbrt(Vector2 x);\r\n    public static Vector2 Hypot(Vector2 x, Vector2 y);\r\n    public static Vector2 RootN(Vector2 x, int n);\r\n    public static Vector2 Sqrt(Vector2 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector2 Round(Vector2 x);\r\n    public static Vector2 Round(Vector2 x, int digits);\r\n    public static Vector2 Round(Vector2 x, MidpointRounding mode);\r\n    public static Vector2 Round(Vector2 x, int digits, MidpointRounding mode);\r\n    public static Vector2 Truncate(Vector2 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector2 Atan2(Vector2 y, Vector2 x);\r\n    public static Vector2 Atan2Pi(Vector2 y, Vector2 x);\r\n    public static Vector2 BitDecrement(Vector2 x);\r\n    public static Vector2 BitIncrement(Vector2 x);\r\n    public static Vector2 FusedMultiplyAdd(Vector2 left, Vector2 right, Vector2 addend);\r\n    public static Vector2 Lerp(Vector2 value1, Vector2 value2, Vector2 amount);\r\n    public static Vector2 ReciprocalEstimate(Vector2 x);\r\n    public static Vector2 ReciprocalSqrtEstimate(Vector2 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector2 Clamp(Vector2 value, Vector2 min, Vector2 max);\r\n    public static Vector2 CopySign(Vector2 value, Vector2 sign);\r\n    public static Vector2 MaxNumber(Vector2 x, Vector2 y);\r\n    public static Vector2 MinNumber(Vector2 x, Vector2 y);\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector2 MaxMagnitude(Vector2 x, Vector2 y);\r\n    public static Vector2 MaxMagnitudeNumber(Vector2 x, Vector2 y);\r\n    public static Vector2 MinMagnitude(Vector2 x, Vector2 y);\r\n    public static Vector2 MinMagnitudeNumber(Vector2 x, Vector2 y); \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector3\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector3 Epsilon { get; }\r\n    public static Vector3 NaN { get; }\r\n    public static Vector3 NegativeInfinity { get; }\r\n    public static Vector3 NegativeZero { get; }\r\n    public static Vector3 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector3 E { get; }\r\n    public static Vector3 Pi { get; }\r\n    public static Vector3 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector3 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Acosh(Vector3 x);\r\n    public static Vector3 Asinh(Vector3 x);\r\n    public static Vector3 Atanh(Vector3 x);\r\n    public static Vector3 Cosh(Vector3 x);\r\n    public static Vector3 Sinh(Vector3 x);\r\n    public static Vector3 Tanh(Vector3 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Acos(Vector3 x);\r\n    public static Vector3 AcosPi(Vector3 x);\r\n    public static Vector3 Asin(Vector3 x);\r\n    public static Vector3 AsinPi(Vector3 x);\r\n    public static Vector3 Atan(Vector3 x);\r\n    public static Vector3 AtanPi(Vector3 x);\r\n    public static Vector3 Cos(Vector3 x);\r\n    public static Vector3 CosPi(Vector3 x);\r\n    public static Vector3 DegreesToRadians(Vector3 degrees);\r\n    public static Vector3 RadiansToDegrees(Vector3 radians);\r\n    public static Vector3 Sin(Vector3 x);\r\n    public static (Vector3 Sin, Vector3 Cos) SinCos(Vector3 x);\r\n    public static (Vector3 SinPi, Vector3 CosPi) SinCosPi(Vector3 x);\r\n    public static Vector3 SinPi(Vector3 x);\r\n    public static Vector3 Tan(Vector3 x);\r\n    public static Vector3 TanPi(Vector3 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Log(Vector3 x);\r\n    public static Vector3 Log(Vector3 x, Vector3 newBase);\r\n    public static Vector3 LogP1(Vector3 x) =\u003e Log(x + Vector3.One);\r\n    public static Vector3 Log2(Vector3 x);\r\n    public static Vector3 Log2P1(Vector3 x) =\u003e Log2(x + Vector3.One);\r\n    public static Vector3 Log10(Vector3 x);\r\n    public static Vector3 Log10P1(Vector3 x) =\u003e Log10(x + Vector3.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Exp(Vector3 x);\r\n    public static Vector3 ExpM1(Vector3 x) =\u003e Exp(x) - Vector3.One;\r\n    public static Vector3 Exp2(Vector3 x);\r\n    public static Vector3 Exp2M1(Vector3 x) =\u003e Exp2(x) - Vector3.One;\r\n    public static Vector3 Exp10(Vector3 x);\r\n    public static Vector3 Exp10M1(Vector3 x) =\u003e Exp10(x) - Vector3.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Pow(Vector3 x, Vector3 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Cbrt(Vector3 x);\r\n    public static Vector3 Hypot(Vector3 x, Vector3 y);\r\n    public static Vector3 RootN(Vector3 x, int n);\r\n    public static Vector3 Sqrt(Vector3 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector3 Round(Vector3 x);\r\n    public static Vector3 Round(Vector3 x, int digits);\r\n    public static Vector3 Round(Vector3 x, MidpointRounding mode);\r\n    public static Vector3 Round(Vector3 x, int digits, MidpointRounding mode);\r\n    public static Vector3 Truncate(Vector3 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector3 Atan2(Vector3 y, Vector3 x);\r\n    public static Vector3 Atan2Pi(Vector3 y, Vector3 x);\r\n    public static Vector3 BitDecrement(Vector3 x);\r\n    public static Vector3 BitIncrement(Vector3 x);\r\n    public static Vector3 FusedMultiplyAdd(Vector3 left, Vector3 right, Vector3 addend);\r\n    public static Vector3 Lerp(Vector3 value1, Vector3 value2, Vector3 amount);\r\n    public static Vector3 ReciprocalEstimate(Vector3 x);\r\n    public static Vector3 ReciprocalSqrtEstimate(Vector3 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector3 Clamp(Vector3 value, Vector3 min, Vector3 max);\r\n    public static Vector3 CopySign(Vector3 value, Vector3 sign);\r\n    public static Vector3 MaxNumber(Vector3 x, Vector3 y);\r\n    public static Vector3 MinNumber(Vector3 x, Vector3 y);\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector3 MaxMagnitude(Vector3 x, Vector3 y);\r\n    public static Vector3 MaxMagnitudeNumber(Vector3 x, Vector3 y);\r\n    public static Vector3 MinMagnitude(Vector3 x, Vector3 y);\r\n    public static Vector3 MinMagnitudeNumber(Vector3 x, Vector3 y); \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector4\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector4 Epsilon { get; }\r\n    public static Vector4 NaN { get; }\r\n    public static Vector4 NegativeInfinity { get; }\r\n    public static Vector4 NegativeZero { get; }\r\n    public static Vector4 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector4 E { get; }\r\n    public static Vector4 Pi { get; }\r\n    public static Vector4 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector4 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Acosh(Vector4 x);\r\n    public static Vector4 Asinh(Vector4 x);\r\n    public static Vector4 Atanh(Vector4 x);\r\n    public static Vector4 Cosh(Vector4 x);\r\n    public static Vector4 Sinh(Vector4 x);\r\n    public static Vector4 Tanh(Vector4 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Acos(Vector4 x);\r\n    public static Vector4 AcosPi(Vector4 x);\r\n    public static Vector4 Asin(Vector4 x);\r\n    public static Vector4 AsinPi(Vector4 x);\r\n    public static Vector4 Atan(Vector4 x);\r\n    public static Vector4 AtanPi(Vector4 x);\r\n    public static Vector4 Cos(Vector4 x);\r\n    public static Vector4 CosPi(Vector4 x);\r\n    public static Vector4 DegreesToRadians(Vector4 degrees);\r\n    public static Vector4 RadiansToDegrees(Vector4 radians);\r\n    public static Vector4 Sin(Vector4 x);\r\n    public static (Vector4 Sin, Vector4 Cos) SinCos(Vector4 x);\r\n    public static (Vector4 SinPi, Vector4 CosPi) SinCosPi(Vector4 x);\r\n    public static Vector4 SinPi(Vector4 x);\r\n    public static Vector4 Tan(Vector4 x);\r\n    public static Vector4 TanPi(Vector4 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Log(Vector4 x);\r\n    public static Vector4 Log(Vector4 x, Vector4 newBase);\r\n    public static Vector4 LogP1(Vector4 x) =\u003e Log(x + Vector4.One);\r\n    public static Vector4 Log2(Vector4 x);\r\n    public static Vector4 Log2P1(Vector4 x) =\u003e Log2(x + Vector4.One);\r\n    public static Vector4 Log10(Vector4 x);\r\n    public static Vector4 Log10P1(Vector4 x) =\u003e Log10(x + Vector4.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Exp(Vector4 x);\r\n    public static Vector4 ExpM1(Vector4 x) =\u003e Exp(x) - Vector4.One;\r\n    public static Vector4 Exp2(Vector4 x);\r\n    public static Vector4 Exp2M1(Vector4 x) =\u003e Exp2(x) - Vector4.One;\r\n    public static Vector4 Exp10(Vector4 x);\r\n    public static Vector4 Exp10M1(Vector4 x) =\u003e Exp10(x) - Vector4.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Pow(Vector4 x, Vector4 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Cbrt(Vector4 x);\r\n    public static Vector4 Hypot(Vector4 x, Vector4 y);\r\n    public static Vector4 RootN(Vector4 x, int n);\r\n    public static Vector4 Sqrt(Vector4 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector4 Round(Vector4 x);\r\n    public static Vector4 Round(Vector4 x, int digits);\r\n    public static Vector4 Round(Vector4 x, MidpointRounding mode);\r\n    public static Vector4 Round(Vector4 x, int digits, MidpointRounding mode);\r\n    public static Vector4 Truncate(Vector4 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector4 Atan2(Vector4 y, Vector4 x);\r\n    public static Vector4 Atan2Pi(Vector4 y, Vector4 x);\r\n    public static Vector4 BitDecrement(Vector4 x);\r\n    public static Vector4 BitIncrement(Vector4 x);\r\n    public static Vector4 FusedMultiplyAdd(Vector4 left, Vector4 right, Vector4 addend);\r\n    public static Vector4 Lerp(Vector4 value1, Vector4 value2, Vector4 amount);\r\n    public static Vector4 ReciprocalEstimate(Vector4 x);\r\n    public static Vector4 ReciprocalSqrtEstimate(Vector4 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector4 Clamp(Vector4 value, Vector4 min, Vector4 max);\r\n    public static Vector4 CopySign(Vector4 value, Vector4 sign);\r\n    public static Vector4 MaxNumber(Vector4 x, Vector4 y);\r\n    public static Vector4 MinNumber(Vector4 x, Vector4 y);\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector4 MaxMagnitude(Vector4 x, Vector4 y);\r\n    public static Vector4 MaxMagnitudeNumber(Vector4 x, Vector4 y);\r\n    public static Vector4 MinMagnitude(Vector4 x, Vector4 y);\r\n    public static Vector4 MinMagnitudeNumber(Vector4 x, Vector4 y); \r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar c = Vector128.Cos(Vector128.Create\u003cfloat\u003e(2.0f));\r\n```\r\n\r\n### Alternative Designs\r\n\r\nIt is unclear if implementing these functions on these types is the best place. It is also unclear if we could use Math interface on Vector64/128/256/512, though ideally we would like to limit to e.g `Vector64/128/256\u003cfloat\u003e`.\r\n\r\n### Risks\r\n\r\nIt is a new API so there is little risk, apart the fact that some functions might be more challenging to implement in a vectorized form.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhl7ktw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pEg3Q",
                                           "createdAt":  "2023-10-14T10:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nSeveral math vectorized functions operating on Span are being added System.Numerics.Tensors TensorPrimitives #92219 and there is a plan to augment them with #93286.\r\n\r\nThough, the current public API limits to Span usage and so limits reusability/composability \r\n of higher-level functions. Similarly, the current implementation is done with internal private operators while there is a proposal to make these operators public #93217. Instead, we should consider surfacing directly the Math functions associated to them, while these operators would call these vectorized math functions.\r\n\r\nAlso, Vectorized math functions can be heavily used and are useful outside of Tensor scenarios, like 2D/3D runtime calculation. For example, Unity has been using such vectorized math functions in [Unity.Mathematics](https://github.com/Unity-Technologies/Unity.Mathematics) though the implementation through the Burst compiler was redirected to the C++ [SLEEF library](https://github.com/shibatch/sleef). Bringing such vectorized math functions directly to .NET would remove entirely the need for such native dependency and would open more scenarios for optimizations.\r\n\r\nThe idea would be to bring these reusable vectorized Math functions to the following types:\r\n\r\n- `System.Runtime.Intrinsics.Vector64`\r\n- `System.Runtime.Intrinsics.Vector128`\r\n- `System.Runtime.Intrinsics.Vector256`\r\n- `System.Runtime.Intrinsics.Vector512`\r\n- `System.Numerics.Vector`\r\n- `System.Numerics.Vector2`\r\n- `System.Numerics.Vector3`\r\n- `System.Numerics.Vector4`\n\n### API Proposal\n\n```csharp\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector64\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atanh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Sinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tanh(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AcosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asin(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AsinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AtanPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e CosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e DegreesToRadians(Vector64\u003cfloat\u003e degrees) =\u003e degrees * System.Runtime.Intrinsics.Vector64.Create\u003cfloat\u003e(MathF.PI) / System.Runtime.Intrinsics.Vector64.Create\u003cfloat\u003e(180.0f);\r\n    public static Vector64\u003cfloat\u003e RadiansToDegrees(Vector64\u003cfloat\u003e radians) =\u003e radians * System.Runtime.Intrinsics.Vector64.Create\u003cfloat\u003e(180.0f) / System.Runtime.Intrinsics.Vector64.Create\u003cfloat\u003e(MathF.PI);\r\n    public static Vector64\u003cfloat\u003e Sin(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e Sin, Vector64\u003cfloat\u003e Cos) SinCos(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e SinPi, Vector64\u003cfloat\u003e CosPi) SinCosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e SinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e TanPi(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e newBase);\r\n    public static Vector64\u003cfloat\u003e LogP1(Vector64\u003cfloat\u003e x) =\u003e Log(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log2P1(Vector64\u003cfloat\u003e x) =\u003e Log2(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log10P1(Vector64\u003cfloat\u003e x) =\u003e Log10(x + Vector64\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Exp(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e ExpM1(Vector64\u003cfloat\u003e x) =\u003e Exp(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp2M1(Vector64\u003cfloat\u003e x) =\u003e Exp2(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp10M1(Vector64\u003cfloat\u003e x) =\u003e Exp10(x) - Vector64\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Pow(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Cbrt(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Hypot(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n    public static Vector64\u003cfloat\u003e RootN(Vector64\u003cfloat\u003e x, int n);\r\n    public static Vector64\u003cfloat\u003e Sqrt(Vector64\u003cfloat\u003e x);\r\n}\r\npublic static class Vector128\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atanh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Sinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tanh(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AcosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asin(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AsinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AtanPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e CosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e DegreesToRadians(Vector128\u003cfloat\u003e degrees) =\u003e degrees * System.Runtime.Intrinsics.Vector128.Create\u003cfloat\u003e(MathF.PI) / System.Runtime.Intrinsics.Vector128.Create\u003cfloat\u003e(180.0f);\r\n    public static Vector128\u003cfloat\u003e RadiansToDegrees(Vector128\u003cfloat\u003e radians) =\u003e radians * System.Runtime.Intrinsics.Vector128.Create\u003cfloat\u003e(180.0f) / System.Runtime.Intrinsics.Vector128.Create\u003cfloat\u003e(MathF.PI);\r\n    public static Vector128\u003cfloat\u003e Sin(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e Sin, Vector128\u003cfloat\u003e Cos) SinCos(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e SinPi, Vector128\u003cfloat\u003e CosPi) SinCosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e SinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e TanPi(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e newBase);\r\n    public static Vector128\u003cfloat\u003e LogP1(Vector128\u003cfloat\u003e x) =\u003e Log(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log2P1(Vector128\u003cfloat\u003e x) =\u003e Log2(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log10P1(Vector128\u003cfloat\u003e x) =\u003e Log10(x + Vector128\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Exp(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e ExpM1(Vector128\u003cfloat\u003e x) =\u003e Exp(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp2M1(Vector128\u003cfloat\u003e x) =\u003e Exp2(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp10M1(Vector128\u003cfloat\u003e x) =\u003e Exp10(x) - Vector128\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Pow(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Cbrt(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Hypot(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n    public static Vector128\u003cfloat\u003e RootN(Vector128\u003cfloat\u003e x, int n);\r\n    public static Vector128\u003cfloat\u003e Sqrt(Vector128\u003cfloat\u003e x);\r\n}\r\n\r\npublic static class Vector256\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atanh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Sinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tanh(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AcosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asin(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AsinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AtanPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e CosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e DegreesToRadians(Vector256\u003cfloat\u003e degrees) =\u003e degrees * System.Runtime.Intrinsics.Vector256.Create\u003cfloat\u003e(MathF.PI) / System.Runtime.Intrinsics.Vector256.Create\u003cfloat\u003e(180.0f);\r\n    public static Vector256\u003cfloat\u003e RadiansToDegrees(Vector256\u003cfloat\u003e radians) =\u003e radians * System.Runtime.Intrinsics.Vector256.Create\u003cfloat\u003e(180.0f) / System.Runtime.Intrinsics.Vector256.Create\u003cfloat\u003e(MathF.PI);\r\n    public static Vector256\u003cfloat\u003e Sin(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e Sin, Vector256\u003cfloat\u003e Cos) SinCos(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e SinPi, Vector256\u003cfloat\u003e CosPi) SinCosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e SinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e TanPi(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e newBase);\r\n    public static Vector256\u003cfloat\u003e LogP1(Vector256\u003cfloat\u003e x) =\u003e Log(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log2P1(Vector256\u003cfloat\u003e x) =\u003e Log2(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log10P1(Vector256\u003cfloat\u003e x) =\u003e Log10(x + Vector256\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Exp(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e ExpM1(Vector256\u003cfloat\u003e x) =\u003e Exp(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp2M1(Vector256\u003cfloat\u003e x) =\u003e Exp2(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp10M1(Vector256\u003cfloat\u003e x) =\u003e Exp10(x) - Vector256\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Pow(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Cbrt(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Hypot(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n    public static Vector256\u003cfloat\u003e RootN(Vector256\u003cfloat\u003e x, int n);\r\n    public static Vector256\u003cfloat\u003e Sqrt(Vector256\u003cfloat\u003e x);\r\n}\r\n\r\npublic static class Vector512\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atanh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Sinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tanh(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AcosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asin(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AsinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AtanPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e CosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e DegreesToRadians(Vector512\u003cfloat\u003e degrees) =\u003e degrees * System.Runtime.Intrinsics.Vector512.Create\u003cfloat\u003e(MathF.PI) / System.Runtime.Intrinsics.Vector512.Create\u003cfloat\u003e(180.0f);\r\n    public static Vector512\u003cfloat\u003e RadiansToDegrees(Vector512\u003cfloat\u003e radians) =\u003e radians * System.Runtime.Intrinsics.Vector512.Create\u003cfloat\u003e(180.0f) / System.Runtime.Intrinsics.Vector512.Create\u003cfloat\u003e(MathF.PI);\r\n    public static Vector512\u003cfloat\u003e Sin(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e Sin, Vector512\u003cfloat\u003e Cos) SinCos(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e SinPi, Vector512\u003cfloat\u003e CosPi) SinCosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e SinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e TanPi(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e newBase);\r\n    public static Vector512\u003cfloat\u003e LogP1(Vector512\u003cfloat\u003e x) =\u003e Log(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log2P1(Vector512\u003cfloat\u003e x) =\u003e Log2(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log10P1(Vector512\u003cfloat\u003e x) =\u003e Log10(x + Vector512\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Exp(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e ExpM1(Vector512\u003cfloat\u003e x) =\u003e Exp(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp2M1(Vector512\u003cfloat\u003e x) =\u003e Exp2(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp10M1(Vector512\u003cfloat\u003e x) =\u003e Exp10(x) - Vector512\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Pow(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Cbrt(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Hypot(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n    public static Vector512\u003cfloat\u003e RootN(Vector512\u003cfloat\u003e x, int n);\r\n    public static Vector512\u003cfloat\u003e Sqrt(Vector512\u003cfloat\u003e x);\r\n}\r\n```\r\n\r\nAnd for `Vector2/3/4`:\r\n\r\n```c#\r\nnamespace System.Numerics;\r\n\r\npublic static class Vector\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atanh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Sinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tanh(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AcosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asin(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AsinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AtanPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e CosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e DegreesToRadians(Vector\u003cfloat\u003e degrees) =\u003e degrees * System.Numerics.Vector.Create\u003cfloat\u003e(MathF.PI) / System.Numerics.Vector.Create\u003cfloat\u003e(180.0f);\r\n    public static Vector\u003cfloat\u003e RadiansToDegrees(Vector\u003cfloat\u003e radians) =\u003e radians * System.Numerics.Vector.Create\u003cfloat\u003e(180.0f) / System.Numerics.Vector.Create\u003cfloat\u003e(MathF.PI);\r\n    public static Vector\u003cfloat\u003e Sin(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e Sin, Vector\u003cfloat\u003e Cos) SinCos(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e SinPi, Vector\u003cfloat\u003e CosPi) SinCosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e SinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e TanPi(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e newBase);\r\n    public static Vector\u003cfloat\u003e LogP1(Vector\u003cfloat\u003e x) =\u003e Log(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log2P1(Vector\u003cfloat\u003e x) =\u003e Log2(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log10P1(Vector\u003cfloat\u003e x) =\u003e Log10(x + Vector\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Exp(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e ExpM1(Vector\u003cfloat\u003e x) =\u003e Exp(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp2M1(Vector\u003cfloat\u003e x) =\u003e Exp2(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp10M1(Vector\u003cfloat\u003e x) =\u003e Exp10(x) - Vector\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Pow(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Cbrt(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Hypot(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n    public static Vector\u003cfloat\u003e RootN(Vector\u003cfloat\u003e x, int n);\r\n    public static Vector\u003cfloat\u003e Sqrt(Vector\u003cfloat\u003e x);\r\n}\r\n\r\npublic struct Vector2 : \r\n    IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n    ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n    ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n    IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n    IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n    IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e,\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Acosh(Vector2 x);\r\n    public static Vector2 Asinh(Vector2 x);\r\n    public static Vector2 Atanh(Vector2 x);\r\n    public static Vector2 Cosh(Vector2 x);\r\n    public static Vector2 Sinh(Vector2 x);\r\n    public static Vector2 Tanh(Vector2 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Acos(Vector2 x);\r\n    public static Vector2 AcosPi(Vector2 x);\r\n    public static Vector2 Asin(Vector2 x);\r\n    public static Vector2 AsinPi(Vector2 x);\r\n    public static Vector2 Atan(Vector2 x);\r\n    public static Vector2 AtanPi(Vector2 x);\r\n    public static Vector2 Cos(Vector2 x);\r\n    public static Vector2 CosPi(Vector2 x);\r\n    public static Vector2 DegreesToRadians(Vector2 degrees);\r\n    public static Vector2 RadiansToDegrees(Vector2 radians);\r\n    public static Vector2 Sin(Vector2 x);\r\n    public static (Vector2 Sin, Vector2 Cos) SinCos(Vector2 x);\r\n    public static (Vector2 SinPi, Vector2 CosPi) SinCosPi(Vector2 x);\r\n    public static Vector2 SinPi(Vector2 x);\r\n    public static Vector2 Tan(Vector2 x);\r\n    public static Vector2 TanPi(Vector2 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Log(Vector2 x);\r\n    public static Vector2 Log(Vector2 x, Vector2 newBase);\r\n    public static Vector2 LogP1(Vector2 x) =\u003e Log(x + Vector2.One);\r\n    public static Vector2 Log2(Vector2 x);\r\n    public static Vector2 Log2P1(Vector2 x) =\u003e Log2(x + Vector2.One);\r\n    public static Vector2 Log10(Vector2 x);\r\n    public static Vector2 Log10P1(Vector2 x) =\u003e Log10(x + Vector2.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Exp(Vector2 x);\r\n    public static Vector2 ExpM1(Vector2 x) =\u003e Exp(x) - Vector2.One;\r\n    public static Vector2 Exp2(Vector2 x);\r\n    public static Vector2 Exp2M1(Vector2 x) =\u003e Exp2(x) - Vector2.One;\r\n    public static Vector2 Exp10(Vector2 x);\r\n    public static Vector2 Exp10M1(Vector2 x) =\u003e Exp10(x) - Vector2.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Pow(Vector2 x, Vector2 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector2\u003e\r\n    public static Vector2 Cbrt(Vector2 x);\r\n    public static Vector2 Hypot(Vector2 x, Vector2 y);\r\n    public static Vector2 RootN(Vector2 x, int n);\r\n    public static Vector2 Sqrt(Vector2 x);\r\n}\r\n\r\npublic struct Vector3 : \r\n    IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n    ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n    ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n    IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n    IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n    IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e,\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Acosh(Vector3 x);\r\n    public static Vector3 Asinh(Vector3 x);\r\n    public static Vector3 Atanh(Vector3 x);\r\n    public static Vector3 Cosh(Vector3 x);\r\n    public static Vector3 Sinh(Vector3 x);\r\n    public static Vector3 Tanh(Vector3 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Acos(Vector3 x);\r\n    public static Vector3 AcosPi(Vector3 x);\r\n    public static Vector3 Asin(Vector3 x);\r\n    public static Vector3 AsinPi(Vector3 x);\r\n    public static Vector3 Atan(Vector3 x);\r\n    public static Vector3 AtanPi(Vector3 x);\r\n    public static Vector3 Cos(Vector3 x);\r\n    public static Vector3 CosPi(Vector3 x);\r\n    public static Vector3 DegreesToRadians(Vector3 degrees);\r\n    public static Vector3 RadiansToDegrees(Vector3 radians);\r\n    public static Vector3 Sin(Vector3 x);\r\n    public static (Vector3 Sin, Vector3 Cos) SinCos(Vector3 x);\r\n    public static (Vector3 SinPi, Vector3 CosPi) SinCosPi(Vector3 x);\r\n    public static Vector3 SinPi(Vector3 x);\r\n    public static Vector3 Tan(Vector3 x);\r\n    public static Vector3 TanPi(Vector3 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Log(Vector3 x);\r\n    public static Vector3 Log(Vector3 x, Vector3 newBase);\r\n    public static Vector3 LogP1(Vector3 x) =\u003e Log(x + Vector3.One);\r\n    public static Vector3 Log2(Vector3 x);\r\n    public static Vector3 Log2P1(Vector3 x) =\u003e Log2(x + Vector3.One);\r\n    public static Vector3 Log10(Vector3 x);\r\n    public static Vector3 Log10P1(Vector3 x) =\u003e Log10(x + Vector3.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Exp(Vector3 x);\r\n    public static Vector3 ExpM1(Vector3 x) =\u003e Exp(x) - Vector3.One;\r\n    public static Vector3 Exp2(Vector3 x);\r\n    public static Vector3 Exp2M1(Vector3 x) =\u003e Exp2(x) - Vector3.One;\r\n    public static Vector3 Exp10(Vector3 x);\r\n    public static Vector3 Exp10M1(Vector3 x) =\u003e Exp10(x) - Vector3.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Pow(Vector3 x, Vector3 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector3\u003e\r\n    public static Vector3 Cbrt(Vector3 x);\r\n    public static Vector3 Hypot(Vector3 x, Vector3 y);\r\n    public static Vector3 RootN(Vector3 x, int n);\r\n    public static Vector3 Sqrt(Vector3 x);\r\n}\r\n\r\npublic struct Vector4 : \r\n    IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n    ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n    ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n    IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n    IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n    IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e,\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Acosh(Vector4 x);\r\n    public static Vector4 Asinh(Vector4 x);\r\n    public static Vector4 Atanh(Vector4 x);\r\n    public static Vector4 Cosh(Vector4 x);\r\n    public static Vector4 Sinh(Vector4 x);\r\n    public static Vector4 Tanh(Vector4 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Acos(Vector4 x);\r\n    public static Vector4 AcosPi(Vector4 x);\r\n    public static Vector4 Asin(Vector4 x);\r\n    public static Vector4 AsinPi(Vector4 x);\r\n    public static Vector4 Atan(Vector4 x);\r\n    public static Vector4 AtanPi(Vector4 x);\r\n    public static Vector4 Cos(Vector4 x);\r\n    public static Vector4 CosPi(Vector4 x);\r\n    public static Vector4 DegreesToRadians(Vector4 degrees);\r\n    public static Vector4 RadiansToDegrees(Vector4 radians);\r\n    public static Vector4 Sin(Vector4 x);\r\n    public static (Vector4 Sin, Vector4 Cos) SinCos(Vector4 x);\r\n    public static (Vector4 SinPi, Vector4 CosPi) SinCosPi(Vector4 x);\r\n    public static Vector4 SinPi(Vector4 x);\r\n    public static Vector4 Tan(Vector4 x);\r\n    public static Vector4 TanPi(Vector4 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Log(Vector4 x);\r\n    public static Vector4 Log(Vector4 x, Vector4 newBase);\r\n    public static Vector4 LogP1(Vector4 x) =\u003e Log(x + Vector4.One);\r\n    public static Vector4 Log2(Vector4 x);\r\n    public static Vector4 Log2P1(Vector4 x) =\u003e Log2(x + Vector4.One);\r\n    public static Vector4 Log10(Vector4 x);\r\n    public static Vector4 Log10P1(Vector4 x) =\u003e Log10(x + Vector4.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Exp(Vector4 x);\r\n    public static Vector4 ExpM1(Vector4 x) =\u003e Exp(x) - Vector4.One;\r\n    public static Vector4 Exp2(Vector4 x);\r\n    public static Vector4 Exp2M1(Vector4 x) =\u003e Exp2(x) - Vector4.One;\r\n    public static Vector4 Exp10(Vector4 x);\r\n    public static Vector4 Exp10M1(Vector4 x) =\u003e Exp10(x) - Vector4.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Pow(Vector4 x, Vector4 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector4\u003e\r\n    public static Vector4 Cbrt(Vector4 x);\r\n    public static Vector4 Hypot(Vector4 x, Vector4 y);\r\n    public static Vector4 RootN(Vector4 x, int n);\r\n    public static Vector4 Sqrt(Vector4 x);\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n// Fancy the value\r\nvar c = new MyFancyCollection\u003cint\u003e();\r\nc.Fancy(42);\r\n\r\n// Getting the values out\r\nforeach (var v in c)\r\n    Console.WriteLine(v);\r\n```\r\n\n\n### Alternative Designs\n\nIt is unclear if implementing these functions on these types is the best place. It is also unclear if we could use Math interface on Vector64/128/256/512, though ideally we would like to limit to e.g `Vector64/128/256\u003cfloat\u003e`.\r\n\r\nThis proposal is only valid for `float` for now. Implementation for `double`, or even `half` could be added later.\n\n### Risks\n\nIt is a new API so there is little risk, apart the fact that some functions might be more challenging to implement in a vectorized form.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exoofx\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-14T10:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pEij_",
                                           "createdAt":  "2023-10-14T10:26:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJu1xA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "tgjones",
                                                                               "createdAt":  "2023-10-14T15:59:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "cc: @tgjones as we have been discussing about such APIs in the past months.",
                                           "updatedAt":  "2023-10-14T10:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pEvel",
                                           "createdAt":  "2023-10-14T11:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Instead\r\n\r\nYou\u0027re proposing this _instead_ of the other issues? Why? Did you mean _in addition to_? ",
                                           "updatedAt":  "2023-10-14T11:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pEvkQ",
                                           "createdAt":  "2023-10-14T11:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e You\u0027re proposing this instead of the other issues? Why? Did you mean in addition to?\r\n\r\nOh, completely, that was _in addition_, just corrected. The operators are as much important to compose them for batching.",
                                           "updatedAt":  "2023-10-14T11:51:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFJfj",
                                           "createdAt":  "2023-10-14T14:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJud0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-14T14:56:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I think that this should also cover `double` variants here.",
                                           "updatedAt":  "2023-10-14T14:44:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFKC-",
                                           "createdAt":  "2023-10-14T14:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJud0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-14T14:56:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes, we should cover `double` here for parity. That then matches how `Ceiling` and `Floor` are handled as well.\r\n\r\nOtherwise the list generally LGTM. I\u0027ll go through it again on Monday and see about getting it marked ready for review. That also gives a chance for more input to be provided.",
                                           "updatedAt":  "2023-10-14T14:55:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFKJb",
                                           "createdAt":  "2023-10-14T14:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Yes, we should cover double here for parity. That then matches how Ceiling and Floor are handled as well.\r\n\r\nShould I duplicate all the API with double and add them in the description, or I would just mention in the description that the same API with double would be added?",
                                           "updatedAt":  "2023-10-14T14:57:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFKeL",
                                           "createdAt":  "2023-10-14T15:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJuedA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-14T15:04:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Ideally duplicate them in the actual proposal. Otherwise the approver needs to spend the time in API review writing them all out live 😅 ",
                                           "updatedAt":  "2023-10-14T15:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFKxS",
                                           "createdAt":  "2023-10-14T15:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Just added `double` method signatures to the proposal.",
                                           "updatedAt":  "2023-10-14T15:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFLX0",
                                           "createdAt":  "2023-10-14T15:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "You\u0027ve missed `Vector\u003cdouble\u003e` overloads.",
                                           "updatedAt":  "2023-10-14T15:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pFLk5",
                                           "createdAt":  "2023-10-14T15:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e You\u0027ve missed `Vector\u003cdouble\u003e` overloads.\r\n\r\nOops, good catch, added. 🙂",
                                           "updatedAt":  "2023-10-14T15:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pdZUB",
                                           "createdAt":  "2023-10-18T21:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@xoofx, looks like the following would also be \"missing\" (where `T` is `float` or `double` and `Vector\u003cT\u003e` is all vector types):\r\n```csharp\r\n// IFloatingPoint\u003cTSelf\u003e\r\nVector\u003cT\u003e Round(Vector\u003cT\u003e x);\r\nVector\u003cT\u003e Round(Vector\u003cT\u003e x, int digits);\r\nVector\u003cT\u003e Round(Vector\u003cT\u003e x, MidpointRounding mode);\r\nVector\u003cT\u003e Round(Vector\u003cT\u003e x, int digits, MidpointRounding mode);\r\nVector\u003cT\u003e Truncate(Vector\u003cT\u003e x);\r\n\r\n// IFloatingPointIeee754\u003cTSelf\u003e\r\nVector\u003cT\u003e Atan2(Vector\u003cT\u003e y, Vector\u003cT\u003e x);\r\nVector\u003cT\u003e Atan2Pi(Vector\u003cT\u003e y, Vector\u003cT\u003e x);\r\nVector\u003cT\u003e BitDecrement(Vector\u003cT\u003e x);\r\nVector\u003cT\u003e BitIncrement(Vector\u003cT\u003e x);\r\nVector\u003cT\u003e FusedMultiplyAdd(Vector\u003cT\u003e left, Vector\u003cT\u003e right, Vector\u003cT\u003e addend);\r\nVector\u003cT\u003e Lerp(Vector\u003cT\u003e value1, Vector\u003cT\u003e value2, Vector\u003cT\u003e amount);\r\nVector\u003cT\u003e ReciprocalEstimate(Vector\u003cT\u003e x);\r\nVector\u003cT\u003e ReciprocalSqrtEstimate(Vector\u003cT\u003e x);\r\n```\r\n\r\nAdditionally:\r\n```csharp\r\n// IFloatingPointIeee754\u003cTSelf\u003e\r\nVector\u003cint\u003e ILogB(Vector\u003cfloat\u003e x);\r\nVector\u003clong\u003e ILogB(Vector\u003cdouble\u003e x);\r\n\r\n// IFloatingPointIeee754\u003cTSelf\u003e\r\nVector\u003cfloat\u003e ScaleB(Vector\u003cfloat\u003e x, Vector\u003cint\u003e n);\r\nVector\u003cdouble\u003e ScaleB(Vector\u003cdouble\u003e x, Vector\u003clong\u003e n);\r\n```\r\n\r\nThen there are some that can work for any type, including integers:\r\n```csharp\r\n// INumber\u003cT\u003e -- these also work for integer types\r\nVector\u003cT\u003e Clamp(Vector\u003cT\u003e value, Vector\u003cT\u003e min, Vector\u003cT\u003e max);\r\nVector\u003cT\u003e CopySign(Vector\u003cT\u003e value, Vector\u003cT\u003e sign);\r\nVector\u003cT\u003e MaxNumber(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\nVector\u003cT\u003e MinNumber(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\n\r\n// INumberBase\u003cT\u003e -- these also work for integer types\r\nVector\u003cT\u003e MaxMagnitude(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\nVector\u003cT\u003e MaxMagnitudeNumber(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\nVector\u003cT\u003e MinMagnitude(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\nVector\u003cT\u003e MinMagnitudeNumber(Vector\u003cT\u003e x, Vector\u003cT\u003e y);\r\n```\r\n\r\nAs well as some common queries that might be beneficial to get masks for/around (these are on `INumberBase\u003cT\u003e` to facilitate generic programming):\r\n```csharp\r\nIsEvenInteger\r\nIsFinite\r\nIsInfinity\r\nIsInteger\r\nIsNaN\r\nIsNegative\r\nIsNegativeInfinity\r\nIsNormal\r\nIsOddInteger\r\nIsPositive\r\nIsPositiveInfinity\r\nIsPow2\r\nIsRealNumber\r\nIsSubnormal\r\n```\r\n\r\n---------------\r\n\r\n`FusedMultiplyAdd` is an interesting one where exposed as `Fused` it needs to be a fused operation. This means it can be incredibly slow on older hardware.\r\n\r\nA `MultiplyAddUnsafe` which can do the faster of `(a * b) + c` or `fma(a, b, c)` may also be desirable.\r\n\r\nThe same in principle goes for `Max` and `Min` where they are technically unsafe today and should\u0027ve been `MaxUnsafe` and `MinUnsafe`. The core API should then be deterministic.",
                                           "updatedAt":  "2023-10-18T21:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pvcl1",
                                           "createdAt":  "2023-10-22T09:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e looks like the following would also be \"missing\" (where T is float or double and Vector\u003cT\u003e is all vector types):\r\n\r\nI have updated the description adding the missing functions. It\u0027s not complete for e.g Vector2/3/4 as adding `INumberBase` is requiring more methods (`Abs`, `CreateChecked`...etc.)\r\n\r\nI\u0027m now using a t4 template available with gist [here](https://gist.github.com/xoofx/e4f5e21495104e2183c402575d32accd), as it becomes too laborious to track all these APIs correctly. 😅 \r\n\r\n\u003e As well as some common queries that might be beneficial to get masks for/around (these are on INumberBase\u003cT\u003e to facilitate generic programming):\r\n\r\nWhat would be the type of the results for e.g `Vector64/128/256/512`, `\u003cfloat\u003e` and `\u003cdouble\u003e`?",
                                           "updatedAt":  "2023-10-22T09:35:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p2XK4",
                                           "createdAt":  "2023-10-23T19:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK3Rgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-25T08:20:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e It\u0027s not complete for e.g Vector2/3/4 as adding INumberBase is requiring more methods (Abs, CreateChecked...etc.)\r\n\r\nWe can\u0027t/shouldn\u0027t implement `IFloatingPointIeee754\u003cT\u003e` because vectors, at least from the API sense, aren\u0027t exactly numbers. They are more like tuples of numbers.\r\n\r\nI\u0027d probably leave the question of actually implementing the various interfaces to a separate PR/consideration. I\u0027d expect the \"right\" way to do this is some kind of new `IVector\u003cTSelf, T\u003e` interface which itself implements many of those other interfaces.\r\n\r\n\u003e What would be the type of the results for e.g Vector64/128/256/512, \u003cfloat\u003e and \u003cdouble\u003e?\r\n\r\nIt would be the same as APIs like `Vector128.GreaterThan` in that it takes in `Vector128\u003cT\u003e` and returns `Vector128\u003cT\u003e`. That then is either `Zero` or `AllBitsSet` per element, allowing it to be used as part of `ConditionalSelect`, blending, masking, and other related operations.",
                                           "updatedAt":  "2023-10-23T19:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p93-R",
                                           "createdAt":  "2023-10-24T18:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK3V2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-25T08:29:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=O9v-lgJkqm8\u0026t=1h27m26s)\n\nLooks good as proposed. Modulo some generic constraints specified on non-generic methods.\r\n\r\n```C#\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector64\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atanh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cosh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Sinh(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tanh(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Acos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AcosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Asin(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AsinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e AtanPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Cos(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e CosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e DegreesToRadians(Vector64\u003cfloat\u003e degrees);\r\n    public static Vector64\u003cfloat\u003e RadiansToDegrees(Vector64\u003cfloat\u003e radians);\r\n    public static Vector64\u003cfloat\u003e Sin(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e Sin, Vector64\u003cfloat\u003e Cos) SinCos(Vector64\u003cfloat\u003e x);\r\n    public static (Vector64\u003cfloat\u003e SinPi, Vector64\u003cfloat\u003e CosPi) SinCosPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e SinPi(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Tan(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e TanPi(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e newBase);\r\n    public static Vector64\u003cfloat\u003e LogP1(Vector64\u003cfloat\u003e x) =\u003e Log(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log2P1(Vector64\u003cfloat\u003e x) =\u003e Log2(x + Vector64\u003cfloat\u003e.One);\r\n    public static Vector64\u003cfloat\u003e Log10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Log10P1(Vector64\u003cfloat\u003e x) =\u003e Log10(x + Vector64\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Exp(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e ExpM1(Vector64\u003cfloat\u003e x) =\u003e Exp(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp2(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp2M1(Vector64\u003cfloat\u003e x) =\u003e Exp2(x) - Vector64\u003cfloat\u003e.One;\r\n    public static Vector64\u003cfloat\u003e Exp10(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Exp10M1(Vector64\u003cfloat\u003e x) =\u003e Exp10(x) - Vector64\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Pow(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cfloat\u003e\u003e\r\n    public static Vector64\u003cfloat\u003e Cbrt(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Hypot(Vector64\u003cfloat\u003e x, Vector64\u003cfloat\u003e y);\r\n    public static Vector64\u003cfloat\u003e RootN(Vector64\u003cfloat\u003e x, int n);\r\n    public static Vector64\u003cfloat\u003e Sqrt(Vector64\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, int digits);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector64\u003cfloat\u003e Round(Vector64\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector64\u003cfloat\u003e Truncate(Vector64\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector64\u003cfloat\u003e Atan2(Vector64\u003cfloat\u003e y, Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e Atan2Pi(Vector64\u003cfloat\u003e y, Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e BitDecrement(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e BitIncrement(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e FusedMultiplyAdd(Vector64\u003cfloat\u003e left, Vector64\u003cfloat\u003e right, Vector64\u003cfloat\u003e addend);\r\n    public static Vector64\u003cfloat\u003e Lerp(Vector64\u003cfloat\u003e value1, Vector64\u003cfloat\u003e value2, Vector64\u003cfloat\u003e amount);\r\n    public static Vector64\u003cfloat\u003e ReciprocalEstimate(Vector64\u003cfloat\u003e x);\r\n    public static Vector64\u003cfloat\u003e ReciprocalSqrtEstimate(Vector64\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Acosh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Asinh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atanh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Cosh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Sinh(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Tanh(Vector64\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Acos(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AcosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Asin(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AsinPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atan(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e AtanPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Cos(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e CosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e DegreesToRadians(Vector64\u003cdouble\u003e degrees);\r\n    public static Vector64\u003cdouble\u003e RadiansToDegrees(Vector64\u003cdouble\u003e radians);\r\n    public static Vector64\u003cdouble\u003e Sin(Vector64\u003cdouble\u003e x);\r\n    public static (Vector64\u003cdouble\u003e Sin, Vector64\u003cdouble\u003e Cos) SinCos(Vector64\u003cdouble\u003e x);\r\n    public static (Vector64\u003cdouble\u003e SinPi, Vector64\u003cdouble\u003e CosPi) SinCosPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e SinPi(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Tan(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e TanPi(Vector64\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Log(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e newBase);\r\n    public static Vector64\u003cdouble\u003e LogP1(Vector64\u003cdouble\u003e x) =\u003e Log(x + Vector64\u003cdouble\u003e.One);\r\n    public static Vector64\u003cdouble\u003e Log2(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log2P1(Vector64\u003cdouble\u003e x) =\u003e Log2(x + Vector64\u003cdouble\u003e.One);\r\n    public static Vector64\u003cdouble\u003e Log10(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Log10P1(Vector64\u003cdouble\u003e x) =\u003e Log10(x + Vector64\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Exp(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e ExpM1(Vector64\u003cdouble\u003e x) =\u003e Exp(x) - Vector64\u003cdouble\u003e.One;\r\n    public static Vector64\u003cdouble\u003e Exp2(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Exp2M1(Vector64\u003cdouble\u003e x) =\u003e Exp2(x) - Vector64\u003cdouble\u003e.One;\r\n    public static Vector64\u003cdouble\u003e Exp10(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Exp10M1(Vector64\u003cdouble\u003e x) =\u003e Exp10(x) - Vector64\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Pow(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector64\u003cdouble\u003e\u003e\r\n    public static Vector64\u003cdouble\u003e Cbrt(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Hypot(Vector64\u003cdouble\u003e x, Vector64\u003cdouble\u003e y);\r\n    public static Vector64\u003cdouble\u003e RootN(Vector64\u003cdouble\u003e x, int n);\r\n    public static Vector64\u003cdouble\u003e Sqrt(Vector64\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, int digits);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector64\u003cdouble\u003e Round(Vector64\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector64\u003cdouble\u003e Truncate(Vector64\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector64\u003cdouble\u003e Atan2(Vector64\u003cdouble\u003e y, Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e Atan2Pi(Vector64\u003cdouble\u003e y, Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e BitDecrement(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e BitIncrement(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e FusedMultiplyAdd(Vector64\u003cdouble\u003e left, Vector64\u003cdouble\u003e right, Vector64\u003cdouble\u003e addend);\r\n    public static Vector64\u003cdouble\u003e Lerp(Vector64\u003cdouble\u003e value1, Vector64\u003cdouble\u003e value2, Vector64\u003cdouble\u003e amount);\r\n    public static Vector64\u003cdouble\u003e ReciprocalEstimate(Vector64\u003cdouble\u003e x);\r\n    public static Vector64\u003cdouble\u003e ReciprocalSqrtEstimate(Vector64\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector64\u003cT\u003e Clamp\u003cT\u003e(Vector64\u003cT\u003e value, Vector64\u003cT\u003e min, Vector64\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e CopySign\u003cT\u003e(Vector64\u003cT\u003e value, Vector64\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MaxNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector64\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinMagnitude\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector64\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector64\u003cT\u003e x, Vector64\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector128\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atanh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cosh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Sinh(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tanh(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Acos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AcosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Asin(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AsinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e AtanPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Cos(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e CosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e DegreesToRadians(Vector128\u003cfloat\u003e degrees);\r\n    public static Vector128\u003cfloat\u003e RadiansToDegrees(Vector128\u003cfloat\u003e radians);\r\n    public static Vector128\u003cfloat\u003e Sin(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e Sin, Vector128\u003cfloat\u003e Cos) SinCos(Vector128\u003cfloat\u003e x);\r\n    public static (Vector128\u003cfloat\u003e SinPi, Vector128\u003cfloat\u003e CosPi) SinCosPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e SinPi(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Tan(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e TanPi(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e newBase);\r\n    public static Vector128\u003cfloat\u003e LogP1(Vector128\u003cfloat\u003e x) =\u003e Log(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log2P1(Vector128\u003cfloat\u003e x) =\u003e Log2(x + Vector128\u003cfloat\u003e.One);\r\n    public static Vector128\u003cfloat\u003e Log10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Log10P1(Vector128\u003cfloat\u003e x) =\u003e Log10(x + Vector128\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Exp(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e ExpM1(Vector128\u003cfloat\u003e x) =\u003e Exp(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp2(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp2M1(Vector128\u003cfloat\u003e x) =\u003e Exp2(x) - Vector128\u003cfloat\u003e.One;\r\n    public static Vector128\u003cfloat\u003e Exp10(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Exp10M1(Vector128\u003cfloat\u003e x) =\u003e Exp10(x) - Vector128\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Pow(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cfloat\u003e\u003e\r\n    public static Vector128\u003cfloat\u003e Cbrt(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Hypot(Vector128\u003cfloat\u003e x, Vector128\u003cfloat\u003e y);\r\n    public static Vector128\u003cfloat\u003e RootN(Vector128\u003cfloat\u003e x, int n);\r\n    public static Vector128\u003cfloat\u003e Sqrt(Vector128\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, int digits);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector128\u003cfloat\u003e Round(Vector128\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector128\u003cfloat\u003e Truncate(Vector128\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector128\u003cfloat\u003e Atan2(Vector128\u003cfloat\u003e y, Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e Atan2Pi(Vector128\u003cfloat\u003e y, Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e BitDecrement(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e BitIncrement(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e FusedMultiplyAdd(Vector128\u003cfloat\u003e left, Vector128\u003cfloat\u003e right, Vector128\u003cfloat\u003e addend);\r\n    public static Vector128\u003cfloat\u003e Lerp(Vector128\u003cfloat\u003e value1, Vector128\u003cfloat\u003e value2, Vector128\u003cfloat\u003e amount);\r\n    public static Vector128\u003cfloat\u003e ReciprocalEstimate(Vector128\u003cfloat\u003e x);\r\n    public static Vector128\u003cfloat\u003e ReciprocalSqrtEstimate(Vector128\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Acosh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Asinh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atanh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Cosh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Sinh(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Tanh(Vector128\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Acos(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AcosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Asin(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AsinPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atan(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e AtanPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Cos(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e CosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e DegreesToRadians(Vector128\u003cdouble\u003e degrees);\r\n    public static Vector128\u003cdouble\u003e RadiansToDegrees(Vector128\u003cdouble\u003e radians);\r\n    public static Vector128\u003cdouble\u003e Sin(Vector128\u003cdouble\u003e x);\r\n    public static (Vector128\u003cdouble\u003e Sin, Vector128\u003cdouble\u003e Cos) SinCos(Vector128\u003cdouble\u003e x);\r\n    public static (Vector128\u003cdouble\u003e SinPi, Vector128\u003cdouble\u003e CosPi) SinCosPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e SinPi(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Tan(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e TanPi(Vector128\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Log(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e newBase);\r\n    public static Vector128\u003cdouble\u003e LogP1(Vector128\u003cdouble\u003e x) =\u003e Log(x + Vector128\u003cdouble\u003e.One);\r\n    public static Vector128\u003cdouble\u003e Log2(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log2P1(Vector128\u003cdouble\u003e x) =\u003e Log2(x + Vector128\u003cdouble\u003e.One);\r\n    public static Vector128\u003cdouble\u003e Log10(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Log10P1(Vector128\u003cdouble\u003e x) =\u003e Log10(x + Vector128\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Exp(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e ExpM1(Vector128\u003cdouble\u003e x) =\u003e Exp(x) - Vector128\u003cdouble\u003e.One;\r\n    public static Vector128\u003cdouble\u003e Exp2(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Exp2M1(Vector128\u003cdouble\u003e x) =\u003e Exp2(x) - Vector128\u003cdouble\u003e.One;\r\n    public static Vector128\u003cdouble\u003e Exp10(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Exp10M1(Vector128\u003cdouble\u003e x) =\u003e Exp10(x) - Vector128\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Pow(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector128\u003cdouble\u003e\u003e\r\n    public static Vector128\u003cdouble\u003e Cbrt(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Hypot(Vector128\u003cdouble\u003e x, Vector128\u003cdouble\u003e y);\r\n    public static Vector128\u003cdouble\u003e RootN(Vector128\u003cdouble\u003e x, int n);\r\n    public static Vector128\u003cdouble\u003e Sqrt(Vector128\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, int digits);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector128\u003cdouble\u003e Round(Vector128\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector128\u003cdouble\u003e Truncate(Vector128\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector128\u003cdouble\u003e Atan2(Vector128\u003cdouble\u003e y, Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e Atan2Pi(Vector128\u003cdouble\u003e y, Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e BitDecrement(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e BitIncrement(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e FusedMultiplyAdd(Vector128\u003cdouble\u003e left, Vector128\u003cdouble\u003e right, Vector128\u003cdouble\u003e addend);\r\n    public static Vector128\u003cdouble\u003e Lerp(Vector128\u003cdouble\u003e value1, Vector128\u003cdouble\u003e value2, Vector128\u003cdouble\u003e amount);\r\n    public static Vector128\u003cdouble\u003e ReciprocalEstimate(Vector128\u003cdouble\u003e x);\r\n    public static Vector128\u003cdouble\u003e ReciprocalSqrtEstimate(Vector128\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector128\u003cT\u003e Clamp\u003cT\u003e(Vector128\u003cT\u003e value, Vector128\u003cT\u003e min, Vector128\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e CopySign\u003cT\u003e(Vector128\u003cT\u003e value, Vector128\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MaxNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector128\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinMagnitude\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector128\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector128\u003cT\u003e x, Vector128\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector256\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atanh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cosh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Sinh(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tanh(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Acos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AcosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Asin(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AsinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e AtanPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Cos(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e CosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e DegreesToRadians(Vector256\u003cfloat\u003e degrees);\r\n    public static Vector256\u003cfloat\u003e RadiansToDegrees(Vector256\u003cfloat\u003e radians);\r\n    public static Vector256\u003cfloat\u003e Sin(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e Sin, Vector256\u003cfloat\u003e Cos) SinCos(Vector256\u003cfloat\u003e x);\r\n    public static (Vector256\u003cfloat\u003e SinPi, Vector256\u003cfloat\u003e CosPi) SinCosPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e SinPi(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Tan(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e TanPi(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e newBase);\r\n    public static Vector256\u003cfloat\u003e LogP1(Vector256\u003cfloat\u003e x) =\u003e Log(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log2P1(Vector256\u003cfloat\u003e x) =\u003e Log2(x + Vector256\u003cfloat\u003e.One);\r\n    public static Vector256\u003cfloat\u003e Log10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Log10P1(Vector256\u003cfloat\u003e x) =\u003e Log10(x + Vector256\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Exp(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e ExpM1(Vector256\u003cfloat\u003e x) =\u003e Exp(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp2(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp2M1(Vector256\u003cfloat\u003e x) =\u003e Exp2(x) - Vector256\u003cfloat\u003e.One;\r\n    public static Vector256\u003cfloat\u003e Exp10(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Exp10M1(Vector256\u003cfloat\u003e x) =\u003e Exp10(x) - Vector256\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Pow(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cfloat\u003e\u003e\r\n    public static Vector256\u003cfloat\u003e Cbrt(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Hypot(Vector256\u003cfloat\u003e x, Vector256\u003cfloat\u003e y);\r\n    public static Vector256\u003cfloat\u003e RootN(Vector256\u003cfloat\u003e x, int n);\r\n    public static Vector256\u003cfloat\u003e Sqrt(Vector256\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, int digits);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector256\u003cfloat\u003e Round(Vector256\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector256\u003cfloat\u003e Truncate(Vector256\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector256\u003cfloat\u003e Atan2(Vector256\u003cfloat\u003e y, Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e Atan2Pi(Vector256\u003cfloat\u003e y, Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e BitDecrement(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e BitIncrement(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e FusedMultiplyAdd(Vector256\u003cfloat\u003e left, Vector256\u003cfloat\u003e right, Vector256\u003cfloat\u003e addend);\r\n    public static Vector256\u003cfloat\u003e Lerp(Vector256\u003cfloat\u003e value1, Vector256\u003cfloat\u003e value2, Vector256\u003cfloat\u003e amount);\r\n    public static Vector256\u003cfloat\u003e ReciprocalEstimate(Vector256\u003cfloat\u003e x);\r\n    public static Vector256\u003cfloat\u003e ReciprocalSqrtEstimate(Vector256\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Acosh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Asinh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atanh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Cosh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Sinh(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Tanh(Vector256\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Acos(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AcosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Asin(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AsinPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atan(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e AtanPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Cos(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e CosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e DegreesToRadians(Vector256\u003cdouble\u003e degrees);\r\n    public static Vector256\u003cdouble\u003e RadiansToDegrees(Vector256\u003cdouble\u003e radians);\r\n    public static Vector256\u003cdouble\u003e Sin(Vector256\u003cdouble\u003e x);\r\n    public static (Vector256\u003cdouble\u003e Sin, Vector256\u003cdouble\u003e Cos) SinCos(Vector256\u003cdouble\u003e x);\r\n    public static (Vector256\u003cdouble\u003e SinPi, Vector256\u003cdouble\u003e CosPi) SinCosPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e SinPi(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Tan(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e TanPi(Vector256\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Log(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e newBase);\r\n    public static Vector256\u003cdouble\u003e LogP1(Vector256\u003cdouble\u003e x) =\u003e Log(x + Vector256\u003cdouble\u003e.One);\r\n    public static Vector256\u003cdouble\u003e Log2(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log2P1(Vector256\u003cdouble\u003e x) =\u003e Log2(x + Vector256\u003cdouble\u003e.One);\r\n    public static Vector256\u003cdouble\u003e Log10(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Log10P1(Vector256\u003cdouble\u003e x) =\u003e Log10(x + Vector256\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Exp(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e ExpM1(Vector256\u003cdouble\u003e x) =\u003e Exp(x) - Vector256\u003cdouble\u003e.One;\r\n    public static Vector256\u003cdouble\u003e Exp2(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Exp2M1(Vector256\u003cdouble\u003e x) =\u003e Exp2(x) - Vector256\u003cdouble\u003e.One;\r\n    public static Vector256\u003cdouble\u003e Exp10(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Exp10M1(Vector256\u003cdouble\u003e x) =\u003e Exp10(x) - Vector256\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Pow(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector256\u003cdouble\u003e\u003e\r\n    public static Vector256\u003cdouble\u003e Cbrt(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Hypot(Vector256\u003cdouble\u003e x, Vector256\u003cdouble\u003e y);\r\n    public static Vector256\u003cdouble\u003e RootN(Vector256\u003cdouble\u003e x, int n);\r\n    public static Vector256\u003cdouble\u003e Sqrt(Vector256\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, int digits);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector256\u003cdouble\u003e Round(Vector256\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector256\u003cdouble\u003e Truncate(Vector256\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector256\u003cdouble\u003e Atan2(Vector256\u003cdouble\u003e y, Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e Atan2Pi(Vector256\u003cdouble\u003e y, Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e BitDecrement(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e BitIncrement(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e FusedMultiplyAdd(Vector256\u003cdouble\u003e left, Vector256\u003cdouble\u003e right, Vector256\u003cdouble\u003e addend);\r\n    public static Vector256\u003cdouble\u003e Lerp(Vector256\u003cdouble\u003e value1, Vector256\u003cdouble\u003e value2, Vector256\u003cdouble\u003e amount);\r\n    public static Vector256\u003cdouble\u003e ReciprocalEstimate(Vector256\u003cdouble\u003e x);\r\n    public static Vector256\u003cdouble\u003e ReciprocalSqrtEstimate(Vector256\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector256\u003cT\u003e Clamp\u003cT\u003e(Vector256\u003cT\u003e value, Vector256\u003cT\u003e min, Vector256\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e CopySign\u003cT\u003e(Vector256\u003cT\u003e value, Vector256\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MaxNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector256\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinMagnitude\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector256\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector256\u003cT\u003e x, Vector256\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector512\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atanh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cosh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Sinh(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tanh(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Acos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AcosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Asin(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AsinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e AtanPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Cos(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e CosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e DegreesToRadians(Vector512\u003cfloat\u003e degrees);\r\n    public static Vector512\u003cfloat\u003e RadiansToDegrees(Vector512\u003cfloat\u003e radians);\r\n    public static Vector512\u003cfloat\u003e Sin(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e Sin, Vector512\u003cfloat\u003e Cos) SinCos(Vector512\u003cfloat\u003e x);\r\n    public static (Vector512\u003cfloat\u003e SinPi, Vector512\u003cfloat\u003e CosPi) SinCosPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e SinPi(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Tan(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e TanPi(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e newBase);\r\n    public static Vector512\u003cfloat\u003e LogP1(Vector512\u003cfloat\u003e x) =\u003e Log(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log2P1(Vector512\u003cfloat\u003e x) =\u003e Log2(x + Vector512\u003cfloat\u003e.One);\r\n    public static Vector512\u003cfloat\u003e Log10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Log10P1(Vector512\u003cfloat\u003e x) =\u003e Log10(x + Vector512\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Exp(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e ExpM1(Vector512\u003cfloat\u003e x) =\u003e Exp(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp2(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp2M1(Vector512\u003cfloat\u003e x) =\u003e Exp2(x) - Vector512\u003cfloat\u003e.One;\r\n    public static Vector512\u003cfloat\u003e Exp10(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Exp10M1(Vector512\u003cfloat\u003e x) =\u003e Exp10(x) - Vector512\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Pow(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cfloat\u003e\u003e\r\n    public static Vector512\u003cfloat\u003e Cbrt(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Hypot(Vector512\u003cfloat\u003e x, Vector512\u003cfloat\u003e y);\r\n    public static Vector512\u003cfloat\u003e RootN(Vector512\u003cfloat\u003e x, int n);\r\n    public static Vector512\u003cfloat\u003e Sqrt(Vector512\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, int digits);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector512\u003cfloat\u003e Round(Vector512\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector512\u003cfloat\u003e Truncate(Vector512\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector512\u003cfloat\u003e Atan2(Vector512\u003cfloat\u003e y, Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e Atan2Pi(Vector512\u003cfloat\u003e y, Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e BitDecrement(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e BitIncrement(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e FusedMultiplyAdd(Vector512\u003cfloat\u003e left, Vector512\u003cfloat\u003e right, Vector512\u003cfloat\u003e addend);\r\n    public static Vector512\u003cfloat\u003e Lerp(Vector512\u003cfloat\u003e value1, Vector512\u003cfloat\u003e value2, Vector512\u003cfloat\u003e amount);\r\n    public static Vector512\u003cfloat\u003e ReciprocalEstimate(Vector512\u003cfloat\u003e x);\r\n    public static Vector512\u003cfloat\u003e ReciprocalSqrtEstimate(Vector512\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Acosh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Asinh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atanh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Cosh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Sinh(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Tanh(Vector512\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Acos(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AcosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Asin(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AsinPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atan(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e AtanPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Cos(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e CosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e DegreesToRadians(Vector512\u003cdouble\u003e degrees);\r\n    public static Vector512\u003cdouble\u003e RadiansToDegrees(Vector512\u003cdouble\u003e radians);\r\n    public static Vector512\u003cdouble\u003e Sin(Vector512\u003cdouble\u003e x);\r\n    public static (Vector512\u003cdouble\u003e Sin, Vector512\u003cdouble\u003e Cos) SinCos(Vector512\u003cdouble\u003e x);\r\n    public static (Vector512\u003cdouble\u003e SinPi, Vector512\u003cdouble\u003e CosPi) SinCosPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e SinPi(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Tan(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e TanPi(Vector512\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Log(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e newBase);\r\n    public static Vector512\u003cdouble\u003e LogP1(Vector512\u003cdouble\u003e x) =\u003e Log(x + Vector512\u003cdouble\u003e.One);\r\n    public static Vector512\u003cdouble\u003e Log2(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log2P1(Vector512\u003cdouble\u003e x) =\u003e Log2(x + Vector512\u003cdouble\u003e.One);\r\n    public static Vector512\u003cdouble\u003e Log10(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Log10P1(Vector512\u003cdouble\u003e x) =\u003e Log10(x + Vector512\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Exp(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e ExpM1(Vector512\u003cdouble\u003e x) =\u003e Exp(x) - Vector512\u003cdouble\u003e.One;\r\n    public static Vector512\u003cdouble\u003e Exp2(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Exp2M1(Vector512\u003cdouble\u003e x) =\u003e Exp2(x) - Vector512\u003cdouble\u003e.One;\r\n    public static Vector512\u003cdouble\u003e Exp10(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Exp10M1(Vector512\u003cdouble\u003e x) =\u003e Exp10(x) - Vector512\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Pow(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector512\u003cdouble\u003e\u003e\r\n    public static Vector512\u003cdouble\u003e Cbrt(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Hypot(Vector512\u003cdouble\u003e x, Vector512\u003cdouble\u003e y);\r\n    public static Vector512\u003cdouble\u003e RootN(Vector512\u003cdouble\u003e x, int n);\r\n    public static Vector512\u003cdouble\u003e Sqrt(Vector512\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, int digits);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector512\u003cdouble\u003e Round(Vector512\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector512\u003cdouble\u003e Truncate(Vector512\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector512\u003cdouble\u003e Atan2(Vector512\u003cdouble\u003e y, Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e Atan2Pi(Vector512\u003cdouble\u003e y, Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e BitDecrement(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e BitIncrement(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e FusedMultiplyAdd(Vector512\u003cdouble\u003e left, Vector512\u003cdouble\u003e right, Vector512\u003cdouble\u003e addend);\r\n    public static Vector512\u003cdouble\u003e Lerp(Vector512\u003cdouble\u003e value1, Vector512\u003cdouble\u003e value2, Vector512\u003cdouble\u003e amount);\r\n    public static Vector512\u003cdouble\u003e ReciprocalEstimate(Vector512\u003cdouble\u003e x);\r\n    public static Vector512\u003cdouble\u003e ReciprocalSqrtEstimate(Vector512\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector512\u003cT\u003e Clamp\u003cT\u003e(Vector512\u003cT\u003e value, Vector512\u003cT\u003e min, Vector512\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e CopySign\u003cT\u003e(Vector512\u003cT\u003e value, Vector512\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MaxNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector512\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinMagnitude\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector512\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector512\u003cT\u003e x, Vector512\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Runtime.Intrinsics;\r\n\r\npublic static class Vector\r\n{\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atanh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cosh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Sinh(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tanh(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Acos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AcosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Asin(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AsinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e AtanPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Cos(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e CosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e DegreesToRadians(Vector\u003cfloat\u003e degrees);\r\n    public static Vector\u003cfloat\u003e RadiansToDegrees(Vector\u003cfloat\u003e radians);\r\n    public static Vector\u003cfloat\u003e Sin(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e Sin, Vector\u003cfloat\u003e Cos) SinCos(Vector\u003cfloat\u003e x);\r\n    public static (Vector\u003cfloat\u003e SinPi, Vector\u003cfloat\u003e CosPi) SinCosPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e SinPi(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Tan(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e TanPi(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e newBase);\r\n    public static Vector\u003cfloat\u003e LogP1(Vector\u003cfloat\u003e x) =\u003e Log(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log2P1(Vector\u003cfloat\u003e x) =\u003e Log2(x + Vector\u003cfloat\u003e.One);\r\n    public static Vector\u003cfloat\u003e Log10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Log10P1(Vector\u003cfloat\u003e x) =\u003e Log10(x + Vector\u003cfloat\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Exp(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e ExpM1(Vector\u003cfloat\u003e x) =\u003e Exp(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp2(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp2M1(Vector\u003cfloat\u003e x) =\u003e Exp2(x) - Vector\u003cfloat\u003e.One;\r\n    public static Vector\u003cfloat\u003e Exp10(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Exp10M1(Vector\u003cfloat\u003e x) =\u003e Exp10(x) - Vector\u003cfloat\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Pow(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cfloat\u003e\u003e\r\n    public static Vector\u003cfloat\u003e Cbrt(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Hypot(Vector\u003cfloat\u003e x, Vector\u003cfloat\u003e y);\r\n    public static Vector\u003cfloat\u003e RootN(Vector\u003cfloat\u003e x, int n);\r\n    public static Vector\u003cfloat\u003e Sqrt(Vector\u003cfloat\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, int digits);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, MidpointRounding mode);\r\n    public static Vector\u003cfloat\u003e Round(Vector\u003cfloat\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector\u003cfloat\u003e Truncate(Vector\u003cfloat\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector\u003cfloat\u003e Atan2(Vector\u003cfloat\u003e y, Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e Atan2Pi(Vector\u003cfloat\u003e y, Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e BitDecrement(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e BitIncrement(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e FusedMultiplyAdd(Vector\u003cfloat\u003e left, Vector\u003cfloat\u003e right, Vector\u003cfloat\u003e addend);\r\n    public static Vector\u003cfloat\u003e Lerp(Vector\u003cfloat\u003e value1, Vector\u003cfloat\u003e value2, Vector\u003cfloat\u003e amount);\r\n    public static Vector\u003cfloat\u003e ReciprocalEstimate(Vector\u003cfloat\u003e x);\r\n    public static Vector\u003cfloat\u003e ReciprocalSqrtEstimate(Vector\u003cfloat\u003e x);\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Acosh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Asinh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atanh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Cosh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Sinh(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Tanh(Vector\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Acos(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AcosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Asin(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AsinPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atan(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e AtanPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Cos(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e CosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e DegreesToRadians(Vector\u003cdouble\u003e degrees);\r\n    public static Vector\u003cdouble\u003e RadiansToDegrees(Vector\u003cdouble\u003e radians);\r\n    public static Vector\u003cdouble\u003e Sin(Vector\u003cdouble\u003e x);\r\n    public static (Vector\u003cdouble\u003e Sin, Vector\u003cdouble\u003e Cos) SinCos(Vector\u003cdouble\u003e x);\r\n    public static (Vector\u003cdouble\u003e SinPi, Vector\u003cdouble\u003e CosPi) SinCosPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e SinPi(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Tan(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e TanPi(Vector\u003cdouble\u003e x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Log(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e newBase);\r\n    public static Vector\u003cdouble\u003e LogP1(Vector\u003cdouble\u003e x) =\u003e Log(x + Vector\u003cdouble\u003e.One);\r\n    public static Vector\u003cdouble\u003e Log2(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log2P1(Vector\u003cdouble\u003e x) =\u003e Log2(x + Vector\u003cdouble\u003e.One);\r\n    public static Vector\u003cdouble\u003e Log10(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Log10P1(Vector\u003cdouble\u003e x) =\u003e Log10(x + Vector\u003cdouble\u003e.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Exp(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e ExpM1(Vector\u003cdouble\u003e x) =\u003e Exp(x) - Vector\u003cdouble\u003e.One;\r\n    public static Vector\u003cdouble\u003e Exp2(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Exp2M1(Vector\u003cdouble\u003e x) =\u003e Exp2(x) - Vector\u003cdouble\u003e.One;\r\n    public static Vector\u003cdouble\u003e Exp10(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Exp10M1(Vector\u003cdouble\u003e x) =\u003e Exp10(x) - Vector\u003cdouble\u003e.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Pow(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Runtime.Intrinsics.Vector\u003cdouble\u003e\u003e\r\n    public static Vector\u003cdouble\u003e Cbrt(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Hypot(Vector\u003cdouble\u003e x, Vector\u003cdouble\u003e y);\r\n    public static Vector\u003cdouble\u003e RootN(Vector\u003cdouble\u003e x, int n);\r\n    public static Vector\u003cdouble\u003e Sqrt(Vector\u003cdouble\u003e x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, int digits);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, MidpointRounding mode);\r\n    public static Vector\u003cdouble\u003e Round(Vector\u003cdouble\u003e x, int digits, MidpointRounding mode);\r\n    public static Vector\u003cdouble\u003e Truncate(Vector\u003cdouble\u003e x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector\u003cdouble\u003e Atan2(Vector\u003cdouble\u003e y, Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e Atan2Pi(Vector\u003cdouble\u003e y, Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e BitDecrement(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e BitIncrement(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e FusedMultiplyAdd(Vector\u003cdouble\u003e left, Vector\u003cdouble\u003e right, Vector\u003cdouble\u003e addend);\r\n    public static Vector\u003cdouble\u003e Lerp(Vector\u003cdouble\u003e value1, Vector\u003cdouble\u003e value2, Vector\u003cdouble\u003e amount);\r\n    public static Vector\u003cdouble\u003e ReciprocalEstimate(Vector\u003cdouble\u003e x);\r\n    public static Vector\u003cdouble\u003e ReciprocalSqrtEstimate(Vector\u003cdouble\u003e x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector\u003cT\u003e Clamp\u003cT\u003e(Vector\u003cT\u003e value, Vector\u003cT\u003e min, Vector\u003cT\u003e max) where T: unmanaged;\r\n    public static Vector\u003cT\u003e CopySign\u003cT\u003e(Vector\u003cT\u003e value, Vector\u003cT\u003e sign) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MaxNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector\u003cT\u003e MaxMagnitude\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MaxMagnitudeNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinMagnitude\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged;\r\n    public static Vector\u003cT\u003e MinMagnitudeNumber\u003cT\u003e(Vector\u003cT\u003e x, Vector\u003cT\u003e y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector2\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector2 Epsilon { get; }\r\n    public static Vector2 NaN { get; }\r\n    public static Vector2 NegativeInfinity { get; }\r\n    public static Vector2 NegativeZero { get; }\r\n    public static Vector2 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector2 E { get; }\r\n    public static Vector2 Pi { get; }\r\n    public static Vector2 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector2 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Acosh(Vector2 x);\r\n    public static Vector2 Asinh(Vector2 x);\r\n    public static Vector2 Atanh(Vector2 x);\r\n    public static Vector2 Cosh(Vector2 x);\r\n    public static Vector2 Sinh(Vector2 x);\r\n    public static Vector2 Tanh(Vector2 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Acos(Vector2 x);\r\n    public static Vector2 AcosPi(Vector2 x);\r\n    public static Vector2 Asin(Vector2 x);\r\n    public static Vector2 AsinPi(Vector2 x);\r\n    public static Vector2 Atan(Vector2 x);\r\n    public static Vector2 AtanPi(Vector2 x);\r\n    public static Vector2 Cos(Vector2 x);\r\n    public static Vector2 CosPi(Vector2 x);\r\n    public static Vector2 DegreesToRadians(Vector2 degrees);\r\n    public static Vector2 RadiansToDegrees(Vector2 radians);\r\n    public static Vector2 Sin(Vector2 x);\r\n    public static (Vector2 Sin, Vector2 Cos) SinCos(Vector2 x);\r\n    public static (Vector2 SinPi, Vector2 CosPi) SinCosPi(Vector2 x);\r\n    public static Vector2 SinPi(Vector2 x);\r\n    public static Vector2 Tan(Vector2 x);\r\n    public static Vector2 TanPi(Vector2 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Log(Vector2 x);\r\n    public static Vector2 Log(Vector2 x, Vector2 newBase);\r\n    public static Vector2 LogP1(Vector2 x) =\u003e Log(x + Vector2.One);\r\n    public static Vector2 Log2(Vector2 x);\r\n    public static Vector2 Log2P1(Vector2 x) =\u003e Log2(x + Vector2.One);\r\n    public static Vector2 Log10(Vector2 x);\r\n    public static Vector2 Log10P1(Vector2 x) =\u003e Log10(x + Vector2.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Exp(Vector2 x);\r\n    public static Vector2 ExpM1(Vector2 x) =\u003e Exp(x) - Vector2.One;\r\n    public static Vector2 Exp2(Vector2 x);\r\n    public static Vector2 Exp2M1(Vector2 x) =\u003e Exp2(x) - Vector2.One;\r\n    public static Vector2 Exp10(Vector2 x);\r\n    public static Vector2 Exp10M1(Vector2 x) =\u003e Exp10(x) - Vector2.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Pow(Vector2 x, Vector2 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector2\u003e\r\n    public static Vector2 Cbrt(Vector2 x);\r\n    public static Vector2 Hypot(Vector2 x, Vector2 y);\r\n    public static Vector2 RootN(Vector2 x, int n);\r\n    public static Vector2 Sqrt(Vector2 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector2 Round(Vector2 x);\r\n    public static Vector2 Round(Vector2 x, int digits);\r\n    public static Vector2 Round(Vector2 x, MidpointRounding mode);\r\n    public static Vector2 Round(Vector2 x, int digits, MidpointRounding mode);\r\n    public static Vector2 Truncate(Vector2 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector2 Atan2(Vector2 y, Vector2 x);\r\n    public static Vector2 Atan2Pi(Vector2 y, Vector2 x);\r\n    public static Vector2 BitDecrement(Vector2 x);\r\n    public static Vector2 BitIncrement(Vector2 x);\r\n    public static Vector2 FusedMultiplyAdd(Vector2 left, Vector2 right, Vector2 addend);\r\n    public static Vector2 Lerp(Vector2 value1, Vector2 value2, Vector2 amount);\r\n    public static Vector2 ReciprocalEstimate(Vector2 x);\r\n    public static Vector2 ReciprocalSqrtEstimate(Vector2 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector2 Clamp(Vector2 value, Vector2 min, Vector2 max) where T: unmanaged;\r\n    public static Vector2 CopySign(Vector2 value, Vector2 sign) where T: unmanaged;\r\n    public static Vector2 MaxNumber(Vector2 x, Vector2 y) where T: unmanaged;\r\n    public static Vector2 MinNumber(Vector2 x, Vector2 y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector2 MaxMagnitude(Vector2 x, Vector2 y) where T: unmanaged;\r\n    public static Vector2 MaxMagnitudeNumber(Vector2 x, Vector2 y) where T: unmanaged;\r\n    public static Vector2 MinMagnitude(Vector2 x, Vector2 y) where T: unmanaged;\r\n    public static Vector2 MinMagnitudeNumber(Vector2 x, Vector2 y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector3\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector3 Epsilon { get; }\r\n    public static Vector3 NaN { get; }\r\n    public static Vector3 NegativeInfinity { get; }\r\n    public static Vector3 NegativeZero { get; }\r\n    public static Vector3 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector3 E { get; }\r\n    public static Vector3 Pi { get; }\r\n    public static Vector3 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector3 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Acosh(Vector3 x);\r\n    public static Vector3 Asinh(Vector3 x);\r\n    public static Vector3 Atanh(Vector3 x);\r\n    public static Vector3 Cosh(Vector3 x);\r\n    public static Vector3 Sinh(Vector3 x);\r\n    public static Vector3 Tanh(Vector3 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Acos(Vector3 x);\r\n    public static Vector3 AcosPi(Vector3 x);\r\n    public static Vector3 Asin(Vector3 x);\r\n    public static Vector3 AsinPi(Vector3 x);\r\n    public static Vector3 Atan(Vector3 x);\r\n    public static Vector3 AtanPi(Vector3 x);\r\n    public static Vector3 Cos(Vector3 x);\r\n    public static Vector3 CosPi(Vector3 x);\r\n    public static Vector3 DegreesToRadians(Vector3 degrees);\r\n    public static Vector3 RadiansToDegrees(Vector3 radians);\r\n    public static Vector3 Sin(Vector3 x);\r\n    public static (Vector3 Sin, Vector3 Cos) SinCos(Vector3 x);\r\n    public static (Vector3 SinPi, Vector3 CosPi) SinCosPi(Vector3 x);\r\n    public static Vector3 SinPi(Vector3 x);\r\n    public static Vector3 Tan(Vector3 x);\r\n    public static Vector3 TanPi(Vector3 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Log(Vector3 x);\r\n    public static Vector3 Log(Vector3 x, Vector3 newBase);\r\n    public static Vector3 LogP1(Vector3 x) =\u003e Log(x + Vector3.One);\r\n    public static Vector3 Log2(Vector3 x);\r\n    public static Vector3 Log2P1(Vector3 x) =\u003e Log2(x + Vector3.One);\r\n    public static Vector3 Log10(Vector3 x);\r\n    public static Vector3 Log10P1(Vector3 x) =\u003e Log10(x + Vector3.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Exp(Vector3 x);\r\n    public static Vector3 ExpM1(Vector3 x) =\u003e Exp(x) - Vector3.One;\r\n    public static Vector3 Exp2(Vector3 x);\r\n    public static Vector3 Exp2M1(Vector3 x) =\u003e Exp2(x) - Vector3.One;\r\n    public static Vector3 Exp10(Vector3 x);\r\n    public static Vector3 Exp10M1(Vector3 x) =\u003e Exp10(x) - Vector3.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Pow(Vector3 x, Vector3 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector3\u003e\r\n    public static Vector3 Cbrt(Vector3 x);\r\n    public static Vector3 Hypot(Vector3 x, Vector3 y);\r\n    public static Vector3 RootN(Vector3 x, int n);\r\n    public static Vector3 Sqrt(Vector3 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector3 Round(Vector3 x);\r\n    public static Vector3 Round(Vector3 x, int digits);\r\n    public static Vector3 Round(Vector3 x, MidpointRounding mode);\r\n    public static Vector3 Round(Vector3 x, int digits, MidpointRounding mode);\r\n    public static Vector3 Truncate(Vector3 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector3 Atan2(Vector3 y, Vector3 x);\r\n    public static Vector3 Atan2Pi(Vector3 y, Vector3 x);\r\n    public static Vector3 BitDecrement(Vector3 x);\r\n    public static Vector3 BitIncrement(Vector3 x);\r\n    public static Vector3 FusedMultiplyAdd(Vector3 left, Vector3 right, Vector3 addend);\r\n    public static Vector3 Lerp(Vector3 value1, Vector3 value2, Vector3 amount);\r\n    public static Vector3 ReciprocalEstimate(Vector3 x);\r\n    public static Vector3 ReciprocalSqrtEstimate(Vector3 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector3 Clamp(Vector3 value, Vector3 min, Vector3 max) where T: unmanaged;\r\n    public static Vector3 CopySign(Vector3 value, Vector3 sign) where T: unmanaged;\r\n    public static Vector3 MaxNumber(Vector3 x, Vector3 y) where T: unmanaged;\r\n    public static Vector3 MinNumber(Vector3 x, Vector3 y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector3 MaxMagnitude(Vector3 x, Vector3 y) where T: unmanaged;\r\n    public static Vector3 MaxMagnitudeNumber(Vector3 x, Vector3 y) where T: unmanaged;\r\n    public static Vector3 MinMagnitude(Vector3 x, Vector3 y) where T: unmanaged;\r\n    public static Vector3 MinMagnitudeNumber(Vector3 x, Vector3 y) where T: unmanaged; \r\n}\r\n\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector4\r\n{\r\n    // IFloatingPointIeee754\r\n    public static Vector4 Epsilon { get; }\r\n    public static Vector4 NaN { get; }\r\n    public static Vector4 NegativeInfinity { get; }\r\n    public static Vector4 NegativeZero { get; }\r\n    public static Vector4 PositiveInfinity { get; }\r\n\r\n    // IFloatingPointConstants\r\n    public static Vector4 E { get; }\r\n    public static Vector4 Pi { get; }\r\n    public static Vector4 Tau { get; }\r\n\r\n    // INumberBase\r\n    public static Vector4 Radix { get; }\r\n\r\n    // Equivalent implementing IHyperbolicFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Acosh(Vector4 x);\r\n    public static Vector4 Asinh(Vector4 x);\r\n    public static Vector4 Atanh(Vector4 x);\r\n    public static Vector4 Cosh(Vector4 x);\r\n    public static Vector4 Sinh(Vector4 x);\r\n    public static Vector4 Tanh(Vector4 x);\r\n\r\n    // Equivalent implementing ITrigonometricFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Acos(Vector4 x);\r\n    public static Vector4 AcosPi(Vector4 x);\r\n    public static Vector4 Asin(Vector4 x);\r\n    public static Vector4 AsinPi(Vector4 x);\r\n    public static Vector4 Atan(Vector4 x);\r\n    public static Vector4 AtanPi(Vector4 x);\r\n    public static Vector4 Cos(Vector4 x);\r\n    public static Vector4 CosPi(Vector4 x);\r\n    public static Vector4 DegreesToRadians(Vector4 degrees);\r\n    public static Vector4 RadiansToDegrees(Vector4 radians);\r\n    public static Vector4 Sin(Vector4 x);\r\n    public static (Vector4 Sin, Vector4 Cos) SinCos(Vector4 x);\r\n    public static (Vector4 SinPi, Vector4 CosPi) SinCosPi(Vector4 x);\r\n    public static Vector4 SinPi(Vector4 x);\r\n    public static Vector4 Tan(Vector4 x);\r\n    public static Vector4 TanPi(Vector4 x);\r\n\r\n    // Equivalent implementing ILogarithmicFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Log(Vector4 x);\r\n    public static Vector4 Log(Vector4 x, Vector4 newBase);\r\n    public static Vector4 LogP1(Vector4 x) =\u003e Log(x + Vector4.One);\r\n    public static Vector4 Log2(Vector4 x);\r\n    public static Vector4 Log2P1(Vector4 x) =\u003e Log2(x + Vector4.One);\r\n    public static Vector4 Log10(Vector4 x);\r\n    public static Vector4 Log10P1(Vector4 x) =\u003e Log10(x + Vector4.One);\r\n\r\n    // Equivalent implementing IExponentialFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Exp(Vector4 x);\r\n    public static Vector4 ExpM1(Vector4 x) =\u003e Exp(x) - Vector4.One;\r\n    public static Vector4 Exp2(Vector4 x);\r\n    public static Vector4 Exp2M1(Vector4 x) =\u003e Exp2(x) - Vector4.One;\r\n    public static Vector4 Exp10(Vector4 x);\r\n    public static Vector4 Exp10M1(Vector4 x) =\u003e Exp10(x) - Vector4.One;\r\n\r\n    // Equivalent implementing IPowerFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Pow(Vector4 x, Vector4 y);\r\n\r\n    // Equivalent implementing IRootFunctions\u003cSystem.Numerics.Vector4\u003e\r\n    public static Vector4 Cbrt(Vector4 x);\r\n    public static Vector4 Hypot(Vector4 x, Vector4 y);\r\n    public static Vector4 RootN(Vector4 x, int n);\r\n    public static Vector4 Sqrt(Vector4 x);\r\n\r\n    // IFloatingPoint\u003cTSelf\u003e\r\n    public static Vector4 Round(Vector4 x);\r\n    public static Vector4 Round(Vector4 x, int digits);\r\n    public static Vector4 Round(Vector4 x, MidpointRounding mode);\r\n    public static Vector4 Round(Vector4 x, int digits, MidpointRounding mode);\r\n    public static Vector4 Truncate(Vector4 x);\r\n\r\n    // IFloatingPointIeee754\u003cTSelf\u003e\r\n    public static Vector4 Atan2(Vector4 y, Vector4 x);\r\n    public static Vector4 Atan2Pi(Vector4 y, Vector4 x);\r\n    public static Vector4 BitDecrement(Vector4 x);\r\n    public static Vector4 BitIncrement(Vector4 x);\r\n    public static Vector4 FusedMultiplyAdd(Vector4 left, Vector4 right, Vector4 addend);\r\n    public static Vector4 Lerp(Vector4 value1, Vector4 value2, Vector4 amount);\r\n    public static Vector4 ReciprocalEstimate(Vector4 x);\r\n    public static Vector4 ReciprocalSqrtEstimate(Vector4 x);\r\n\r\n    // INumber\u003cT\u003e -- these also work for integer types\r\n    public static Vector4 Clamp(Vector4 value, Vector4 min, Vector4 max) where T: unmanaged;\r\n    public static Vector4 CopySign(Vector4 value, Vector4 sign) where T: unmanaged;\r\n    public static Vector4 MaxNumber(Vector4 x, Vector4 y) where T: unmanaged;\r\n    public static Vector4 MinNumber(Vector4 x, Vector4 y) where T: unmanaged;\r\n\r\n    // INumberBase\u003cT\u003e -- these also work for integer types\r\n    public static Vector4 MaxMagnitude(Vector4 x, Vector4 y) where T: unmanaged;\r\n    public static Vector4 MaxMagnitudeNumber(Vector4 x, Vector4 y) where T: unmanaged;\r\n    public static Vector4 MinMagnitude(Vector4 x, Vector4 y) where T: unmanaged;\r\n    public static Vector4 MinMagnitudeNumber(Vector4 x, Vector4 y) where T: unmanaged; \r\n}\r\n```",
                                           "updatedAt":  "2023-10-24T18:56:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qBesA",
                                           "createdAt":  "2023-10-25T08:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Looks good as proposed. Modulo some generic constraints specified on non-generic methods.\r\n\r\nGood catch, I removed the leftovers of `where T: unmanaged` and updated the issue description.",
                                           "updatedAt":  "2023-10-25T08:30:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Euf7A",
                                           "createdAt":  "2024-07-13T05:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqSCrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2024-07-13T07:56:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-07-18T03:57:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is simply tracking the work to be completed still. Items that have an open PR but which are not yet merged will not be checked off.\n\n#### IHyperbolicFunctions - floating-point types\n- [ ] Acosh\n- [ ] Asinh\n- [ ] Atanh\n- [ ] Cosh\n- [ ] Sinh\n- [ ] Tanh\n\n#### ITrigonometricFunctions - floating-point types\n- [ ] Acos\n- [ ] AcosPi\n- [ ] Asin\n- [ ] AsinPi\n- [ ] Atan\n- [ ] AtanPi\n- [x] Cos\n- [ ] CosPi\n- [x] DegreesToRadians\n- [x] RadiansToDegrees\n- [x] Sin\n- [x] SinCos\n- [ ] SinCosPi\n- [ ] SinPi\n- [ ] Tan\n- [ ] TanPi\n\n#### ILogarithmicFunctions - floating-point types\n- [ ] Log (base)\n- [x] Log\n- [ ] LogP1\n- [x] Log2\n- [ ] Log2P1\n- [ ] Log10\n- [ ] Log10P1\n\n#### IExponentialFunctions - floating-point types\n- [x] Exp\n- [ ] ExpM1\n- [ ] Exp2\n- [ ] Exp2M1\n- [ ] Exp10\n- [ ] Exp10M1\n\n#### IPowerFunctions - floating-point types\n- [ ] Pow\n\n#### IRootFunctions - floating-point types\n- [ ] Cbrt\n- [x] Hypot\n- [ ] RootN\n- [x] Sqrt\n\n#### IFloatingPoint - floating-point types\n- [x] Round\n- [ ] Round (digits)\n- [x] Round (midpoint)\n- [ ] Round (digits, midpoint)\n- [x] Truncate\n\n#### IFloatingPointIeee754 - floating-point types\n- [ ] Atan2\n- [ ] Atan2Pi\n- [ ] BitDecrement\n- [ ] BitIncrement\n- [x] FusedMultiplyAdd\n- [x] Lerp\n- [ ] ReciprocalEstimate\n- [ ] ReciprocalSqrtEstimate\n\n#### INumber- floating-point and integer types\n- [x] Clamp\n- [x] ClampNative\n- [x] CopySign\n- [x] MaxNative\n- [x] MaxNumber\n- [x] MinNative\n- [x] MinNumber\n\n#### INumberBase - floating-point and integer types\n- [ ] IsCanonical\n- [ ] IsComplexNumber\n- [x] IsEvenInteger\n- [x] IsFinite\n- [ ] IsImaginaryNumber\n- [x] IsInfinity\n- [x] IsInteger\n- [x] IsNaN\n- [x] IsNegative\n- [x] IsNegativeInfinity\n- [x] IsNormal\n- [x] IsOddInteger\n- [x] IsPositive\n- [x] IsPositiveInfinity\n- [ ] IsRealNumber\n- [x] IsSubnormal\n- [x] IsZero\n- [x] MaxMagnitude\n- [x] MaxMagnitudeNumber\n- [x] MinMagnitude\n- [x] MinMagnitudeNumber\n- [x] MultiplyAddEstimate\n\n#### IFloatingPointConstants - only Vector2/3/4\n- [x] Epsilon\n- [x] NaN\n- [x] NegativeInfinity\n- [x] NegativeZero\n- [x] PositiveInfinity\n- [x] E\n- [x] Pi\n- [x] Tau",
                                           "updatedAt":  "2025-07-12T16:59:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FGZPq",
                                           "createdAt":  "2024-07-17T11:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Laksen",
                                           "body":  "What about `INumber.Sign(TSelf value)`? Was that omitted due to the return type?",
                                           "updatedAt":  "2024-07-17T11:09:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIsHy",
                                           "createdAt":  "2024-07-17T15:51:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqP1IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Laksen",
                                                                               "createdAt":  "2024-07-17T17:27:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-07-18T00:34:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e What about INumber.Sign(TSelf value)? Was that omitted due to the return type?\r\n\r\nIt was omitted because its mostly a legacy concept and is almost always better replaced with `CopySign` or one of the explicit query APIs like `IsZero`, `IsPositive`, or `IsNegative` instead (noting that `0` is positive and `-0` is negative). It also doesn\u0027t have \"defined\" behavior for cases like `NaN` (and throws, which isn\u0027t acceptable for a SIMD API that is often processing arbitrary inputs).",
                                           "updatedAt":  "2024-07-17T15:51:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GXuS3",
                                           "createdAt":  "2024-07-28T06:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODr1vKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2024-07-28T06:52:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Since new APIs not yet done will carry forward into 10.0.0, I\u0027m changing the milestone so this effort continues.",
                                           "updatedAt":  "2024-07-28T06:48:45Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[API Proposal]: Math float vectorized functions for Vector64/128/256/512 and  Vector2/3/4",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93568",
        "createdAt":  "2023-10-16T18:57:17Z",
        "number":  93568,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCLGFA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thatbakamono",
                                            "createdAt":  "2023-10-16T19:04:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2023-10-16T19:07:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2023-10-16T21:07:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2023-10-16T23:11:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2023-10-19T07:06:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ruihan-Yin",
                                            "createdAt":  "2023-10-23T20:42:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2023-11-18T15:21:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NetMage",
                                            "createdAt":  "2024-02-13T21:51:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xpl0itR",
                                            "createdAt":  "2024-02-22T05:25:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "silkfire",
                                            "createdAt":  "2024-03-16T01:50:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "crozone",
                                            "createdAt":  "2024-05-10T05:27:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anatawa12",
                                            "createdAt":  "2024-07-25T01:56:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2024-08-18T11:55:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenMcLean",
                                            "createdAt":  "2025-04-02T15:33:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ghost4Man",
                                            "createdAt":  "2025-04-02T15:57:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-04-03T01:00:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "squeakyneb",
                                            "createdAt":  "2025-05-08T16:31:36Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-09-01T19:24:02Z",
        "body":  "## Background and Motivation\r\n\r\nMost computer hardware implements division as a `truncated division`. Correspondingly, many languages implement their division (`x / y`) and remainder (`x % y`) support following this. However, some languages default to `floored division` and have their remainder be the counterpart to this instead. This ultimately has the same behavior as `truncated` when the signs of `x` and `y` match, but a different result when the signs do not. Some other languages still may use other types of rounding in their division operations which may include `Euclidean`, `Ceiling`, or `Rounded`.\r\n\r\nThere are ultimately benefits and drawbacks to each of the approaches and what is correct for one scenario may not be correct for all. Likewise, while computing any of them is fairly trivial, the most efficient implementation is often non-obvious. As such, it is proposed we expose a set of new APIs that allow developers to pick the one that is right for them.\r\n\r\n## Proposed API\r\n\r\n```csharp\r\nnamespace System.Numerics;\r\n\r\npublic enum DivisionRounding\r\n{\r\n    Truncate = 0,        // Towards Zero\r\n    Floor = 1,           // Towards -Infinity\r\n    Ceiling = 2,         // Towards +Infinity\r\n    AwayFromZero = 3,    // Away from Zero\r\n    Euclidean = 4,       // floor(x / abs(n)) * sign(n)\r\n}\r\n\r\npublic partial interface IBinaryInteger\u003cT\u003e\r\n{\r\n    // Existing:\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right);\r\n\r\n    // Proposed:\r\n    static virtual TSelf Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual TSelf Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n```\r\n\r\n-- These APIs would have DIMs and would be publicly implemented on the built-in types that implement `IBinaryInteger`, such as `Int32`, `Int64`, and `Byte`.\r\n\r\n## Additional Considerations\r\n\r\nThe following gives an overview of the most common variations of the remainder (or modulo) operation: https://en.wikipedia.org/wiki/Modulo#Variants_of_the_definition\r\n\r\nThe following gives some examples of what is used for various languages: https://en.wikipedia.org/wiki/Modulo#In_programming_languages\r\n\r\nRust is experimenting with its own similar APIs via the `int_roundings` feature, which expands on some of the existing support like `rem_euclid`: https://doc.rust-lang.org/std/primitive.i32.html#method.div_floor and https://github.com/rust-lang/rust/issues/88581\r\n\r\nIt may be desirable to also support this functionality for floating-point, but it can be quite a bit more expensive to support there.\r\n\r\nThe general terminology in this space is incredibly overloaded. Several languages use competing terminology, but a general consistency is that `rem` is often referring to remainder of `truncated division` and `mod` is referring to the remainder of `floored division`. We may want to consider or incorporate this into the naming to help users identify the one they want.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa0Q79Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pNUjD",
                                           "createdAt":  "2023-10-16T18:57:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nMost computer hardware implements division as a `truncated division`. Correspondingly, many languages implement their division (`x / y`) and remainder (`x % y`) support following this. However, some languages default to `floored division` and have their remainder be the counterpart to this instead. This ultimately has the same behavior as `truncated` when the signs of `x` and `y` match, but a different result when the signs do not. Some other languages still may use other types of rounding in their division operations which may include `Euclidean`, `Ceiling`, or `Rounded`.\r\n\r\nThere are ultimately benefits and drawbacks to each of the approaches and what is correct for one scenario may not be correct for all. Likewise, while computing any of them is fairly trivial, the most efficient implementation is often non-obvious. As such, it is proposed we expose a set of new APIs that allow developers to pick the one that is right for them.\r\n\r\n## Proposed API\r\n\r\n```csharp\r\nnamespace System.Numerics;\r\n\r\npublic enum DivisionRounding\r\n{\r\n    Truncate = 0,        // Towards Zero\r\n    Floor = 1,           // Towards -Infinity\r\n    Ceiling = 2,         // Towards +Infinity\r\n    AwayFromZero = 3,    // Away from Zero\r\n    Euclidean = 4,       // floor(x / abs(n)) * sign(n)\r\n}\r\n\r\npublic partial interface IBinaryInteger\u003cT\u003e\r\n{\r\n    // Existing:\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right);\r\n\r\n    // Proposed:\r\n    static virtual TSelf Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual TSelf Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n```\r\n\r\n-- These APIs would have DIMs and would be publicly implemented on the built-in types that implement `IBinaryInteger`, such as `Int32`, `Int64`, and `Byte`.\r\n\r\n## Additional Considerations\r\n\r\nThe following gives an overview of the most common variations of the remainder (or modulo) operation: https://en.wikipedia.org/wiki/Modulo#Variants_of_the_definition\r\n\r\nThe following gives some examples of what is used for various languages: https://en.wikipedia.org/wiki/Modulo#In_programming_languages\r\n\r\nRust is experimenting with its own similar APIs via the `int_roundings` feature, which expands on some of the existing support like `rem_euclid`: https://doc.rust-lang.org/std/primitive.i32.html#method.div_floor and https://github.com/rust-lang/rust/issues/88581\r\n\r\nIt may be desirable to also support this functionality for floating-point, but it can be quite a bit more expensive to support there.\r\n\r\nThe general terminology in this space is incredibly overloaded. Several languages use competing terminology, but a general consistency is that `rem` is often referring to remainder of `truncated division` and `mod` is referring to the remainder of `floored division`. We may want to consider or incorporate this into the naming to help users identify the one they want.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-16T18:57:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pNVBS",
                                           "createdAt":  "2023-10-16T18:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This would be a replacement for https://github.com/dotnet/csharplang/issues/7599, which was rejected by the language in https://github.com/dotnet/csharplang/blob/main/meetings/2023/LDM-2023-10-16.md#new-operator--for-canonical-modulus-operations",
                                           "updatedAt":  "2023-10-16T18:58:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pNXi0",
                                           "createdAt":  "2023-10-16T19:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Can #65408 be closed as a duplicate with this?",
                                           "updatedAt":  "2023-10-16T19:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pNgQ-",
                                           "createdAt":  "2023-10-16T19:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERW4Kw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "squeakyneb",
                                                                               "createdAt":  "2025-05-08T16:32:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "There was mention of floating-point support and whether/when it would be added. I for one would definitely make use of it!",
                                           "updatedAt":  "2023-10-16T19:33:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pN_lM",
                                           "createdAt":  "2023-10-16T21:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "Ideally, this would be on `INumber`, since that\u0027s where `IModulusOperators` is provided. The issue is that it\u0027s not possible to implement as a `static virtual` for all `INumbers` with a default implementation (with proper rounding). It would be better if it was split into a separate interface, which was then implemented by default by `IBinaryInteger`, and  `IFloatingPoint` (I would think it should be possible to implement correctly here, since it could be done similar to `Math.IEEERemainder`). Ideally all the integral types, floating point types, and `decimal` would implement this interface.\r\n\r\nWhen the operation is needed, it could be used like so, without losing the ability to overload by other types which provide it (like floats):\r\n```csharp\r\nstatic T SomeCalculation\u003cT\u003e(T a, T b) where T : INumber\u003cT\u003e, IRoundableDivisionFunctions\u003cT\u003e\r\n{\r\n    return T.Divide(T.CreateChecked(2) * a, b, DivisionRounding.Floor);\r\n}\r\n```\r\n\r\nThe changes should be updated like so imo:\r\n```csharp\r\nnamespace System.Numerics;\r\n\r\npublic enum DivisionRounding\r\n{\r\n    Truncate = 0,        // Towards Zero\r\n    Floor = 1,           // Towards -Infinity\r\n    Ceiling = 2,         // Towards +Infinity\r\n    AwayFromZero = 3,    // Away from Zero\r\n    Euclidean = 4,       // floor(x / abs(n)) * sign(n)\r\n}\r\n\r\npublic partial interface IRoundableDivisionFunctions\u003cTSelf\u003e where TSelf : IRoundableDivisionFunctions\u003cTSelf\u003e\r\n{\r\n    static abstract TSelf Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static abstract TSelf Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n\r\npublic partial interface IBinaryInteger\u003cTSelf\u003e\r\n    : IRoundableDivisionFunctions\u003cTSelf\u003e // added\r\n{\r\n    // Existing:\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right);\r\n\r\n    // Proposed: (default implementations)\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static (TSelf Quotient, TSelf Remainder) IRoundableDivisionFunctions\u003cTSelf\u003e.DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n\r\npublic partial interface IFloatingPoint\u003cTSelf\u003e\r\n    : IRoundableDivisionFunctions\u003cTSelf\u003e // added\r\n{\r\n    // Proposed: (default implementations)\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static (TSelf Quotient, TSelf Remainder) IRoundableDivisionFunctions\u003cTSelf\u003e.DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n\r\n//and also provide a default implementation in IFloatingPointIeee754, IBinaryFloatingPointIeee754 - this allows us to optimise those cases in the future without breaking changes if we add them now\r\npublic partial interface IFloatingPointIeee754\u003cTSelf\u003e\r\n    : IRoundableDivisionFunctions\u003cTSelf\u003e // added\r\n{\r\n    // Proposed: (default implementations)\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static (TSelf Quotient, TSelf Remainder) IRoundableDivisionFunctions\u003cTSelf\u003e.DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\npublic partial interface IBinaryFloatingPointIeee754\u003cTSelf\u003e\r\n    : IRoundableDivisionFunctions\u003cTSelf\u003e // added\r\n{\r\n    // Proposed: (default implementations)\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static (TSelf Quotient, TSelf Remainder) IRoundableDivisionFunctions\u003cTSelf\u003e.DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static TSelf IRoundableDivisionFunctions\u003cTSelf\u003e.Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n```\r\n\r\nWe should implement \u0026 expose public APIs it on all the integral types: `Byte`, `SByte`, `Int16`, `UInt16`, `Int32`, `UInt32`, `IntPtr`, `UIntPtr`, `Int64`, `UInt64`, `Int128`, `UInt128`; all floating point types `Half`, `Single`, `NFloat`, `Double`; and `Decimal` and `BigInteger`. (Am I missing any others?) (It may actually be possible to implement for `Complex` also, since the operation would be clear with the `DivisionRounding` mode set)\r\n\r\nAlso, should this be called just `Divide`, that may be a bit unclear for floats, but the `DivisionRounding` parameter may make it obvious enough?\r\n\r\nAlso, should we have IEEERounding as a division rounding mode? I don\u0027t really see why not, assuming it\u0027s useful to some people.",
                                           "updatedAt":  "2023-10-16T21:10:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p83EN",
                                           "createdAt":  "2023-10-24T16:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Ideally, this would be on INumber, since that\u0027s where IModulusOperators is provided.\r\n\r\nProviding `DivRem` on general numbers is difficult due to how it would have to behave on floating-point types. That is, it doesn\u0027t perform the normal division operator, but rather a rounded division operation. It then can\u0027t provide a DIM implementation, as indicated.\r\n\r\n\u003e It would be better if it was split into a separate interface\r\n\r\nProviding a separate interface here is likewise a bit problematic. It likely couldn\u0027t provided `DivRem` due to the issue mentioned previously with floating-point. Rather, it could only provide `Divide` and `Remainder` operations.\r\n\r\nThe DIMs on floating-point are themselves somewhat problematic due to double rounding that can occur (leading to incorrect results) and the implication of what a rounding mode on a division operation means in that context. -- Rounding on floating-point operations may be believed to change it from \"to nearest, ties to even\" to the indicated mode instead and not to be returning an integral result rounded in that direction.\r\n\r\nI think this is one of the cases where providing a uniform API surface between integral and floating-point isn\u0027t possible and that floating-point needs to be considered separately.",
                                           "updatedAt":  "2023-10-24T16:07:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p83l_",
                                           "createdAt":  "2023-10-24T16:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027m marking this as `ready-for-review` as the floating-point questions and even whether an interface exists won\u0027t be blocked by this. We can minimally discuss it as part of API review and we can separately continue the discussion on how to appropriately expose this functionality for floating-point in a way that meaningfully works.",
                                           "updatedAt":  "2023-10-24T16:08:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rO0l9",
                                           "createdAt":  "2023-11-07T16:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMA8VA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2023-11-07T16:24:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Doesn\u0027t using an enumeration make this less trim friendly? As opposed to something akin to `DivRem_Truncate`.",
                                           "updatedAt":  "2023-11-07T16:09:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rPGTy",
                                           "createdAt":  "2023-11-07T16:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMA-xQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-11-07T16:30:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "+1 to Aarons comment. Ultimately the implementation of the `DivRem` will have a switch somewhere in it, and implement 5 different ways based on the enum value. But if I only use `DivRem(.., .., Truncate)` in my app, the trimmer will still have to keep all the other 4 algorithms as well, since it can\u0027t figure out how to remove cases from that switch. Given that it seems to be expected that some of the division modes are rarely used, ideally we would design the API in such a way those could be trimmed away even if the app does use the `DivRem` on one of the rounding modes.\r\n\r\nThis can be achieved by either a new method for each mode, or a new interface for each mode.",
                                           "updatedAt":  "2023-11-07T16:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rPJ7y",
                                           "createdAt":  "2023-11-07T16:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Doesn\u0027t using an enumeration make this less trim friendly?\r\n\r\nIt should realistically depend on how it\u0027s implemented. \r\n\r\nAt the end of the day, .NET uses enums for many reasons/scenarios, including cases like this. We should not be forcing our APIs into less flexible or less ideal solutions to accommodate the tooling and should rather be updating the tooling to reasonably accommodate regular .NET APIs.\r\n\r\nNotably, in this case, coming up with `n` different public API names, that are logically consistent and make sense is difficult. We don\u0027t use underscores and won\u0027t start here. It also makes it incredibly difficult for users who need to pass down dynamic modes, support source generation, and other considerations to make the right thing happen.\r\n\r\nThere may still be a good middle ground and we might find `n` different public names that fit the bill here. But, the trimmer should itself really be able to do \"basic things\" like see `DivRem(x, y, DivisionRounding.Name)` and then see the implementation is `switch(mode) { case Name: InternalMethodFoo(x, y); }` and trim it down to calling `InternalMethodFoo(x, y)` directly. So that it isn\u0027t negatively impacting size in the common case.\r\n\r\n",
                                           "updatedAt":  "2023-11-07T16:35:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rPSMJ",
                                           "createdAt":  "2023-11-07T16:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e At the end of the day, .NET uses enums for many reasons/scenarios, including cases like this. \r\n\r\nThis is true for heavy use and/or common APIs. The proposed API is arguably not going to be common or see a lot of heavy use. and will not have anywhere near the visibility of others where the priority is UX.\r\n\r\n\u003e We should not be forcing our APIs into less flexible or less ideal solutions to accommodate the tooling and should rather be updating the tooling to reasonably accommodate regular .NET APIs.\r\n\r\nThis happens a lot, especially in lower level or uncommon APIs. The numerics works has introduced a lot of added pressure on trimmer scenarios and where possible it seems prudent to understand the trades off and have the discussion.",
                                           "updatedAt":  "2023-11-07T16:42:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rPZdL",
                                           "createdAt":  "2023-11-07T16:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMlKdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2023-11-07T17:05:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xpl0itR",
                                                                               "createdAt":  "2024-02-22T05:32:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crozone",
                                                                               "createdAt":  "2024-05-10T05:30:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ghost4Man",
                                                                               "createdAt":  "2025-04-02T15:55:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Yes, and I\u0027m not saying we shouldn\u0027t have that discussion.\r\n\r\nI\u0027m simply saying that the overall view of \"what can the trimmer currently handle\" should not be the main impact of how we design APIs. If a reasonably smart trimmer could handle the scenario and that scenario is itself reasonably common in existing .NET code; then we should ensure a relevant issue exists to track that being handled so that it gets handled. We should then do what the best thing for the API is.\r\n\r\nWe should only be taking limitations of the tooling into account for scenarios that can never be reasonably handled or which go against our existing common design practices. I would, in no way, view simplistic inlining and dead code elimination based on a constant input to be \"unreasonable\", particularly when the main job of a trimmer is in fact \"dead code elimination\".\r\n\r\n\u003e The proposed API is arguably not going to be common or see a lot of heavy use. and will not have anywhere near the visibility of others where the priority is UX.\r\n\r\nThat\u0027s essentially impossible to determine until after the API has shipped. This feature has, for several years now, been one of the more requested scenarios in dotnet/csharplang and which has garnered repeated interest in dotnet/runtime as well.\r\n\r\nAcross the various issues that have led up to this proposal, there has been a significantly higher than average number of upvotes and interest, showing that it is clearly desired and wanted by end users; particularly `remainder of floored division` (commonly called `mod`).\r\n\r\nThere will be a non-trivial number of users that adopt this as soon as its available. There will then be many other places that are able to simplify their existing hand coded algorithms (in the BCL, in ML.NET, and in other repos in the broader community) where the other common division/remainder operations are also used.\r\n\r\n\r\n",
                                           "updatedAt":  "2023-11-07T16:55:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rQ7XS",
                                           "createdAt":  "2023-11-07T19:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODursKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xpl0itR",
                                                                               "createdAt":  "2024-02-22T05:46:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crozone",
                                                                               "createdAt":  "2024-05-10T05:32:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexRadch",
                                                                               "createdAt":  "2024-08-19T01:12:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://youtu.be/5FVp8Mjuoog?t=2428)\r\n\r\n* Looks good as proposed\r\n* This implies those three methods become public statics on the primitives, such as `int`\r\n\r\n```C#\r\nnamespace System.Numerics;\r\n\r\npublic enum DivisionRounding\r\n{\r\n    Truncate = 0,\r\n    Floor = 1,\r\n    Ceiling = 2,\r\n    AwayFromZero = 3,\r\n    Euclidean = 4,\r\n}\r\n\r\npublic partial interface IBinaryInteger\u003cT\u003e\r\n{\r\n    // Existing:\r\n    // static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right);\r\n\r\n    static virtual TSelf Divide(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual (TSelf Quotient, TSelf Remainder) DivRem(TSelf left, TSelf right, DivisionRounding mode);\r\n    static virtual TSelf Remainder(TSelf left, TSelf right, DivisionRounding mode);\r\n}\r\n```",
                                           "updatedAt":  "2023-11-08T19:38:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rRDv1",
                                           "createdAt":  "2023-11-07T19:10:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMlQ7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yaakov-h",
                                                                               "createdAt":  "2023-11-09T03:49:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2024-03-16T01:51:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crozone",
                                                                               "createdAt":  "2024-05-10T05:32:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kezzyhko",
                                                                               "createdAt":  "2025-04-02T16:06:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Noting that we did discuss the point on trimming support and the pros/cons.\r\n\r\nThe overall minimal size of the APIs in question, the cost of exposing 18 new public methods per primitive type, and that we have prior art in the Math APIs for taking rounding mode as an enum won out.",
                                           "updatedAt":  "2023-11-07T19:10:05Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Provide support for alternative rounding modes for division and remainder of division.",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96295",
        "createdAt":  "2023-12-24T07:06:27Z",
        "number":  96295,
        "author":  "iamcarbon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAXTIQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2023-12-24T17:46:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-12-25T06:43:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zintom",
                                            "createdAt":  "2023-12-25T08:10:40Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Zintom",
                                            "createdAt":  "2023-12-25T08:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-12-26T19:44:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-01-02T07:13:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-01-02T07:13:04Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "martindevans",
                                            "createdAt":  "2024-01-16T03:28:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "4creators",
                                            "createdAt":  "2024-06-05T17:57:20Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "4creators",
                                            "createdAt":  "2024-06-05T17:57:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ds5678",
                                            "createdAt":  "2024-06-22T14:58:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2024-11-30T19:11:10Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "xoofx",
                                            "createdAt":  "2025-03-21T15:21:03Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-09-20T09:48:32Z",
        "body":  "### Background and motivation\r\n\r\nThe bfloat16 type provides the same number range as the 32-bit IEEE 754 single-precision floating point type, but with a reduced precision (24 bits -\u003e 8 bits). This is useful for machine learning to improve memory utilization, and can be used to accelerate AI workloads via AVC-512 BP / and ARMv8.6-A instructions.\r\n\r\nAdding this type would allow us to implement these new instructions sets, and provide a common base type for various machine learning libraries.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Numerics\r\n{\r\n    public readonly struct BFloat16\r\n      : IComparable,\r\n        IComparable\u003cBFloat16\u003e,\r\n        IEquatable\u003cBFloat16\u003e\r\n    {\r\n        public static BFloat16 Epsilon { get; }\r\n        public static BFloat16 MinValue { get; }\r\n        public static BFloat16 MaxValue { get; }\r\n                \r\n        // Casting\r\n        public static explicit operator BFloat16(float value);\r\n        public static explicit operator BFloat16(double value);\r\n        public static explicit operator float(BFloat16 value);\r\n        public static explicit operator double(BFloat16 value);\r\n\r\n        // Comparison\r\n        public int CompareTo(object value);\r\n        public int CompareTo(BFloat16 value);\r\n        public static bool operator ==(BFloat16 left, BFloat16 right);\r\n        public static bool operator !=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e=(BFloat16 left, BFloat16 right);\r\n\r\n        // Equality\r\n        public bool Equals(BFloat16 obj);\r\n        public override bool Equals(object? obj);\r\n        public override int GetHashCode();\r\n        \r\n        // ToString override\r\n        public override string ToString();\r\n    }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nBFloat16 bf16 = (BFloat16)1.0f; \r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdvwnug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vXkRi",
                                           "createdAt":  "2023-12-24T07:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe bfloat16 type provides the same number range as the 32-bit IEEE 754 single-precision floating point type, but with a reduced precision (24 bits -\u003e 8 bits). This is useful for machine learning to improve memory utilization, and can be used to accelerate AI workloads via AVC-512 BP / and ARMv8.6-A instructions.\r\n\r\nAdding this type would allow us to implement these new instructions sets, and provide a common base type for various machine learning libraries.\n\n### API Proposal\n\n```csharp\r\nnamespace System\r\n{\r\n    public readonly struct BFloat16 : IComparable, IFormattable, IComparable\u003cBFloat16\u003e, IEquatable\u003cBFloat16\u003e, IConvertible, ISpanFormattable, IUtf8SpanFormattable\r\n    {\r\n        public static readonly BFloat16 MinValue;\r\n        public static readonly BFloat16 MaxValue;\r\n                \r\n        public static bool IsNegative(BFloat16 h);\r\n        public static BFloat16 Parse(string s);\r\n        public static BFloat16 Parse(string s, NumberStyles style);\r\n        public static BFloat16 Parse(string s, NumberStyles style, IFormatProvider provider);\r\n        public static BFloat16 Parse(string s, IFormatProvider provider);\r\n        public static BFloat16 Parse(ReadOnlySpan\u003cchar\u003e s);\r\n        public static BFloat16 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style);\r\n        public static BFloat16 Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider provider);\r\n        public static BFloat16 Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider provider);\r\n        public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider provider);\r\n        public static bool TryParse(string s, out BFloat16 result);\r\n        public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out BFloat16 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, out BFloat16 result);\r\n        public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider provider, out BFloat16 result);\r\n        public int CompareTo(object value);\r\n        public int CompareTo(BFloat16 value);\r\n        public bool Equals(BFloat16 obj);\r\n        public override bool Equals(object obj);\r\n        public override int GetHashCode();\r\n        public TypeCode GetTypeCode();\r\n        public string ToString(IFormatProvider provider);\r\n        public string ToString(string format);\r\n        public string ToString(string format, IFormatProvider provider);\r\n        public override string ToString();\r\n        public static explicit operator BFloat16(float value);\r\n        public static explicit operator float(BFloat16 value);\r\n        public static bool operator ==(BFloat16 left, BFloat16 right);\r\n        public static bool operator !=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e=(BFloat16 left, BFloat16 right);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nBFloat16 bf16 = 1.0f; \r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eiamcarbon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-24T07:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYDp1",
                                           "createdAt":  "2023-12-24T19:03:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkrp5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iamcarbon",
                                                                               "createdAt":  "2023-12-25T01:54:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-26T19:44:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-01-02T07:13:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rhuijben",
                                                                               "createdAt":  "2024-02-22T21:27:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "4creators",
                                                                               "createdAt":  "2024-06-05T17:57:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "This should probably expose the whole API surface that Half has, including all the operators like addition and such even if they\u0027re not accelerated by most hardware.",
                                           "updatedAt":  "2023-12-24T19:03:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYG6j",
                                           "createdAt":  "2023-12-24T20:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "@MichalPetryka Updated to implement the IFloatingPoint\u003cTSelf\u003e interface, along with its operators. These can likely also forward to MathF / float, like Half by default.",
                                           "updatedAt":  "2023-12-24T20:44:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYHcj",
                                           "createdAt":  "2023-12-24T21:02:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Updated to implement the IFloatingPoint interface, along with its operators\r\n\r\nYou\u0027ve missed `IMinMaxValue\u003cBFloat16\u003e`, which `Half` has.",
                                           "updatedAt":  "2023-12-24T21:02:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYXYP",
                                           "createdAt":  "2023-12-25T01:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "The proposal has been updated to include the IMinMaxValue\u003cBFloat16\u003e interface. Note: the API is limited to public members. There are various INumber and IFloatingPoint members that are not listed, but will need explicit implementations to participate in the generic math system. @MichalPetryka Let me know if you spot any other missing public members.",
                                           "updatedAt":  "2023-12-25T01:55:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYYj8",
                                           "createdAt":  "2023-12-25T02:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e The proposal has been updated to include the IMinMaxValue interface. Note: the API is limited to public members. There are various INumber and IFloatingPoint members that are not listed, but will need explicit implementations to participate in the generic math system. @MichalPetryka Let me know if you spot any other missing public members.\r\n\r\n`Unary Negation Operators` seems to have the unary plus.",
                                           "updatedAt":  "2023-12-25T02:04:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYaTL",
                                           "createdAt":  "2023-12-25T02:19:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "\u003e `Unary Negation Operators` seems to have the unary plus.\r\n\r\nFixed.\r\n",
                                           "updatedAt":  "2023-12-25T02:19:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYsxq",
                                           "createdAt":  "2023-12-25T05:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODR7Wjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-12-25T06:43:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2024-01-10T16:52:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e This should probably expose the whole API surface that Half has, including all the operators like addition and such even if they\u0027re not accelerated by most hardware.\r\n\r\nI don\u0027t think mathematic functions should be implemented. They are likely not supported by hardware, nor required by any specification.\r\nThe first version of Half in .NET 5 is only a transport type, with no IEEE754 function implemented.\r\n\r\nI\u0027d expect it to implement only conversion operators, and basic arithmetic operators only:\r\n```\r\n// comparable, equatable, parsing and formatting omitted\r\nIMinMaxValue\r\nIBinaryNumber\r\nIFloatingPoint\r\n```",
                                           "updatedAt":  "2023-12-25T05:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vZIWV",
                                           "createdAt":  "2023-12-25T08:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "I believe there\u0027s still value implementing the Trigonometric \u0026 Hyperbolic functions as this type maintains the full Float32 range.\r\n\r\nConverting a BFloat16 to a Single can also be done in a few shift operations. This operation is much slower on the Half type.\r\n\r\n```csharp\r\npublic unsafe static float BFloat16ToSingle(ushort bfloat16)\r\n{\r\n    int f32Value  = \r\n        (bfloat16 \u0026 0x8000) \u003c\u003c 16 |                      // sign bit\r\n        ((bfloat16 \u0026 0x7FFF) + 0x1C000) \u003c\u003c 13; // exponent and mantissa\r\n\r\n    return *(float*)\u0026f32Value;\r\n}\r\n```\r\n\r\nARM also provides the accelerated BFCVT function to convert a Single back to a Float16.\r\n\r\nHowever, I agree they are non-essential.",
                                           "updatedAt":  "2023-12-25T08:45:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vaCVN",
                                           "createdAt":  "2023-12-25T19:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODREjog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-01-03T02:11:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e I don\u0027t think mathematic functions should be implemented. They are likely not supported by hardware, nor required by any specification.\r\n\u003e The first version of Half in .NET 5 is only a transport type, with no IEEE754 function implemented.\r\n\r\nI think it\u0027s worth noting that proposed API surface isn\u0027t necessarily the one that\u0027s initially implemented as it was noted in #81376.\r\nAs such, I think that unless the decision would be to never add the full set of operations (which seems unlikely since hardware is already starting to expose them), API review should see the final surface during review, even if its implementation would be partial initially.\r\n\r\n\u003e Let me know if you spot any other missing public members.\r\n\r\n[Diffing with Half seems to still show some missing members.](https://www.diffchecker.com/1CaedzR0/)",
                                           "updatedAt":  "2023-12-25T19:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vcgD4",
                                           "createdAt":  "2023-12-26T19:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQuHFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2023-12-28T17:50:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "\u003e ```cs\r\n\u003e public unsafe static float BFloat16ToSingle(ushort bfloat16)\r\n\u003e {\r\n\u003e     int f32Value  = \r\n\u003e         (bfloat16 \u0026 0x8000) \u003c\u003c 16 |                      // sign bit\r\n\u003e         ((bfloat16 \u0026 0x7FFF) + 0x1C000) \u003c\u003c 13; // exponent and mantissa\r\n\u003e \r\n\u003e     return *(float*)\u0026f32Value;\r\n\u003e }\r\n\u003e ```\r\n\r\nThis seems like needlessly complicated to read, and generates worse codegen than is needed. A bfloat16 is just a truncated binary32:\r\n\r\n```cs\r\npublic static float BFloat16ToBinary32(ushort value)\r\n{\r\n    uint temp = (uint)value \u003c\u003c 16;\r\n    return Unsafe.As\u003cuint, float\u003e(ref temp);\r\n}\r\n```",
                                           "updatedAt":  "2023-12-26T19:51:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vut3s",
                                           "createdAt":  "2024-01-02T20:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODR7XGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2024-01-10T16:53:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e API review should see the final surface during review\r\n\r\nThis isn\u0027t important to API review. The potential for operators to be added later is generally not a major consideration in the exposure of a type. We almost never know the \"full\" surface area, and while it might be relevant to consider whether additional APIs are planned, they really only limit the ability to cleanly implement/expose the initial surface.\r\n\r\n---------------------\r\n\r\nThis type is not really a core/common type and isn\u0027t even strictly \"well spec\u0027d\" in the same way the IEEE 754 types are. It likely should exist in the `System.Numerics` namespace (much as the new `Decimal32/64/128` types will be).\r\n\r\nIt should initially only cover itself as a minimal interchange type with the relevant conversion APIs. That is going to be the 99% use case and is the only case that will be hardware accelerated for the near future. I\u0027m fine with separately considering the expansion of this to support the full set of `IBinaryFloatingPointIeee754\u003cT\u003e` members, but that should be split out and separate from the mainline consideration. Such members would only be convenience APIs for `upcast to float, do the operation, downcast to bfloat` after all and in many cases would be the less efficient way to operate on the data (typical usage in AI/ML/GPU is to upcast a vector\u0027s worth of these values, operate on them as float end to end, and then downcast when storing back to memory/disk).\r\n\r\n\u003e A bfloat16 is just a truncated binary32\r\n\r\nNotably this is not universally true. It was initially introduced using truncation, but there are a number of different hardware implementations nowadays and some use ties to even (IEEE 754 default, which Google TPU uses) or round to odd (ARM), etc.\r\n\r\nWe should likely default to truncation, but its possible we need additional APIs to support other rounding modes.",
                                           "updatedAt":  "2024-01-02T20:33:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v13-e",
                                           "createdAt":  "2024-01-04T05:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "@tannergooding Thanks for the comments! I update the proposal to use the System.Numerics namespace and scaled back the surface area to be used as a minimal interchange type. ",
                                           "updatedAt":  "2024-01-04T05:51:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wA7qb",
                                           "createdAt":  "2024-01-05T21:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUTNIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iamcarbon",
                                                                               "createdAt":  "2024-01-27T09:58:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "These should notably be properties since its a trivial constant over a value type and can avoid the static initializer:\r\n\u003e public static BFloat16 Epsilon { get; }\r\n\u003e public static BFloat16 MinValue { get; }\r\n\u003e public static BFloat16 MaxValue { get; }\r\n\r\nWe also need the conversion from `double` for parity\r\n\u003e public static explicit operator BFloat16(double value);",
                                           "updatedAt":  "2024-01-05T21:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wDPj_",
                                           "createdAt":  "2024-01-07T00:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Does it make sense to require explicit upcasting to float and double as all bfloat16s are perfectly representable as binary32 and binary64?",
                                           "updatedAt":  "2024-01-07T00:51:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wDPrS",
                                           "createdAt":  "2024-01-07T00:53:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODReXTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-07T00:53:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Implicit casts can introduce potential versioning concerns and so it depends a bit. It will likely be a discussion point in the API review.",
                                           "updatedAt":  "2024-01-07T00:53:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zxZqO",
                                           "createdAt":  "2024-02-13T19:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=9qhbPMCwFuM\u0026t=1h30m45s)\n\nLooks good as proposed.  Also with whatever level of generic math (and public visibility thereof) is appropriate.  (`IFloatingPointIeee754\u003cBFloat16\u003e`, most probably)\r\n\r\n```C#\r\nnamespace System.Numerics\r\n{\r\n    public readonly struct BFloat16\r\n      : IComparable,\r\n        IComparable\u003cBFloat16\u003e,\r\n        IEquatable\u003cBFloat16\u003e\r\n    {\r\n        public static BFloat16 Epsilon { get; }\r\n        public static BFloat16 MinValue { get; }\r\n        public static BFloat16 MaxValue { get; }\r\n                \r\n        // Casting\r\n        public static explicit operator BFloat16(float value);\r\n        public static explicit operator BFloat16(double value);\r\n        public static explicit operator float(BFloat16 value);\r\n        public static explicit operator double(BFloat16 value);\r\n\r\n        // Comparison\r\n        public int CompareTo(object value);\r\n        public int CompareTo(BFloat16 value);\r\n        public static bool operator ==(BFloat16 left, BFloat16 right);\r\n        public static bool operator !=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003c=(BFloat16 left, BFloat16 right);\r\n        public static bool operator \u003e=(BFloat16 left, BFloat16 right);\r\n\r\n        // Equality\r\n        public bool Equals(BFloat16 obj);\r\n        public override bool Equals(object? obj);\r\n        public override int GetHashCode();\r\n        \r\n        // ToString override\r\n        public override string ToString();\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-02-13T20:05:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50TzaB",
                                           "createdAt":  "2024-02-18T14:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Which assembly should it belong to? Should it be in S.R.Numerics like Complex?\r\n\r\nSince there are hardware acceleration for it, it should likely be in CoreLib.",
                                           "updatedAt":  "2024-02-18T14:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5297bz",
                                           "createdAt":  "2024-03-13T21:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Shouldn\u0027t it be called BHalf, since there\u0027s Half, Single \u0026 Double as opposed to Float16, Float32 and Float64?",
                                           "updatedAt":  "2024-03-13T21:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5298lr",
                                           "createdAt":  "2024-03-13T22:01:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "```c#\r\n        // Casting\r\n        public static explicit operator BFloat16(float value);\r\n        public static explicit operator BFloat16(double value);\r\n        public static explicit operator float(BFloat16 value);\r\n        public static explicit operator double(BFloat16 value);\r\n```\r\nCorrect me if I\u0027m wrong, but isn\u0027t it the case that every `BFloat16` can be losslessly converted to a `float` and `double`? If so, why aren\u0027t those conversions implicit? Also, aren\u0027t conversions to and from `Half` needed as well?",
                                           "updatedAt":  "2024-03-13T22:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc529-Y9",
                                           "createdAt":  "2024-03-13T22:03:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Also, for those conversion that are not lossless, shouldn\u0027t there be checked and unchecked versions?",
                                           "updatedAt":  "2024-03-13T22:03:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc529_qv",
                                           "createdAt":  "2024-03-13T22:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Implicit casts can introduce potential versioning concerns and so it depends a bit. It will likely be a discussion point in the API review.\r\n\r\nWhat are those versioning concerns? It\u0027s a little unfortunate to have those be explicit not only because you have to add a cast, but because the conversion being explicit makes me (and I assume others as well) think that it cannot be safely converted, when in fact it can be. It\u0027s really counterintuitive for them to be explicit.",
                                           "updatedAt":  "2024-03-13T22:07:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52-FV7",
                                           "createdAt":  "2024-03-13T22:16:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Shouldn\u0027t it be called BHalf, since there\u0027s Half, Single \u0026 Double as opposed to Float16, Float32 and Float64?\r\n\r\nNo, the industry standard names for the types are `BFloat16`, `Half`, `Single`, and `Double`. The \"spec\" names are `brain float16`, `binary16`, `binary32`, and `binary64`\r\n\r\n\u003e Also, for those conversion that are not lossless, shouldn\u0027t there be checked and unchecked versions?\r\n\r\nChecked vs unchecked normally only exist where a conversion can throw. Floating-point conversions never throw and have 1 strictly defined behavior, which is round to nearest representable.\r\n\r\nYou theoretically could expose the optional IEEE 754 support for raising an \"inexact exception\", but that throws for almost every operation you can imagine, even `1 / 10` or `0.1 + 0.2` results in an inexact result (even when accounting for the actual underlying values represented not being `0.1` and `0.2`).\r\n\r\n\u003e What are those versioning concerns?\r\n\r\nLanguage primitive types get special handling and precedence for conversions. There are many cases where this can negatively impact overload resolution either by new ambiguities caused by new implicit conversions or by the wrong overload being silently selected.\r\n\r\nA simple example is if you have `double M(double x)` and call `double x = M(5)` it will call the only overload. However, if you then expose `float M(float x)`, the call will now call the overload that takes `float` and silently upcast the result back to `double`, so not only do you have a change in precision (which for large `int` is potentially lossy when cast to `float`), but it is a silent change in precision due to the upcast of the `float` result back to `double`.\r\n\r\nSimilar issues exist when introducing new APIs around `Half` or `BFloat16` where they have implicit conversions to `float` (or other primitive types) and especially if they have any implicit conversions from other primitive types. For that reason, we explicitly made the casts on `Half` explicit and made a similar decision for `float`, as it avoids an entire class of issues and helps make the operation that much more explicit.",
                                           "updatedAt":  "2024-03-13T22:16:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52-JTR",
                                           "createdAt":  "2024-03-13T22:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Checked vs unchecked normally only exist where a conversion can throw. Floating-point conversions never throw and have 1 strictly defined behavior, which is round to nearest representable.\r\n\r\nWait, uh? 😟 I assumed until now that in a checked context, if I cast a numeric type and the value can\u0027t fit into the new type, it throws. Now I could have bugs in my code I guess :/ But thanks for letting me know.\r\n\r\n\u003e A simple example is if you have double M(double x) and call double x = M(5) it will call the only overload. However, if you then expose float M(float x), the call will now call the overload that takes float and silently upcast the result back to double, so not only do you have a change in precision (which for large int is potentially lossy when cast to float), but it is a silent change in precision due to the upcast of the float result back to double.\r\n\r\nThis seems like an argument against all implicit conversions altogether. But the language has them and people are used to them. So it seems weird that some numeric types would have them and others would not, for a reason that applies to all of them.\r\n\r\nIf they were really so bad, why would they exist in the language? For one reason or another, they made the call about them existing and about numeric types having them. So I feel like we should follow that to be consistent. I get the argument about being explicit about things, but it\u0027s still weird for them to be explicit as it makes me think wait, this is dangerous and I have to have extra scrutiny here as there can be either an exception or a loss of precision due to an explicit cast. When in fact there can\u0027t be and it\u0027s completely safe. I wish there was a special syntax for conversions that made you be explicit about them, just like explicit conversions, but would only allow conversions that are \"implicit\"/safe. But there isn\u0027t :( For better or worse, we have what we have in the language, but people (including me) have gotten used to what we have so I still feel like there should be consistency instead of banishing certain language features that we don\u0027t like for new code, even though they\u0027re used all over the place in existing code and will always be as they\u0027ll always be implicit conversions for the builtin types and other existing types that have them, and they\u0027ll always be this weird inconsistency that makes people stop and wonder why it\u0027s there. I just associate explicit conversions with conversions that aren\u0027t safe, because if they were safe, they would be implicit - that\u0027s the way it has always been (apart from that one mistake of `int` and `float`).",
                                           "updatedAt":  "2024-03-13T22:54:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52-O8s",
                                           "createdAt":  "2024-03-13T22:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "If this is really the decision for all conversions to be explicit going forward regardless of whether they\u0027re safe or not, please, at least add doc comments and documentation pages for those conversions saying whether they *are* actually safe or not.",
                                           "updatedAt":  "2024-03-13T23:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52-XBJ",
                                           "createdAt":  "2024-03-13T23:08:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Wait, uh? 😟 I assumed until now that in a checked context, if I cast a numeric type and the value can\u0027t fit into the new type, it throws. Now I could have bugs in my code I guess :/ But thanks for letting me know.\r\n\r\nChecked has always really pertained to overflow/underflow and not necessarily towards \"representable\". The simplest example is that `checked(5 / 2)` does not throw, it simply returns `2` even though the actual answer of `2.5` is not representable.\r\n\r\nLikewise `checked((float)double.MaxValue)` does not throw because the specification requires it take the value as given, perform the operation as if to infinite precision and unbounded range, and then round to the nearest representable result. For `float`, this happens to be `PositiveInfinity` which is a representable value and therefore it does not throw.\r\n\r\nfloating-point to integer conversions do throw for `checked` if the value can\u0027t be represented, as that would overflow. Integer to floating-point conversions do not, even though many inputs will result in a loss of precision.\r\n\r\n\u003e This seems like an argument against all implicit conversions altogether.\r\n\r\nIn some ways, yes. There are many languages that explicitly do not provide implicit conversions because of these issues.\r\n\r\n\u003e But the language has them and people are used to them. So it seems weird that some numeric types would have them and others would not, for a reason that applies to all of them.\r\n\r\nYes, and so our decision on whether to use implicit conversions or not is based around the likelihood people will run into issues/pits of failure.\r\n\r\nThere are many cases where implicit conversions are good and where we would expose them for new types; this just doesn\u0027t happen to be one of them due to it being a more esoteric user-defined type that needs to interplay with multiple built-in types (which have special conversion precedence rules) and being used in scenarios where a new overload causing a silent loss of precision could be both easily missed and have a large negative impact were it to make it production.\r\n\r\nThat is to say, we don\u0027t only make the decision to expose implicit conversions based on whether or not something is lossless. We have to also account for how that is likely to be used or impact other existing overloads, especially for more common types, and how likely it is to be exposed as an overload for those other types. This case has both of those as fairly likely, especially in domains where the combination of perf and precision are often competing with eachother.\r\n\r\nWe can always expose the implicit conversions later given enough feedback, but we can\u0027t take them away  once they are exposed. So defaulting to explicit here is the better/safer option and won\u0027t be overly negative, particularly given the primary domains are going to involve using vectors and require explicit conversions anyways.",
                                           "updatedAt":  "2024-03-13T23:08:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52-YfC",
                                           "createdAt":  "2024-03-13T23:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Checked has always really pertained to overflow/underflow and not necessarily towards \"representable\". The simplest example is that checked(5 / 2) does not throw, it simply returns 2 even though the actual answer of 2.5 is not representable.\r\n\r\nRight, but I would consider converting an `int` that\u0027s outside of the range of `short`, to `short`, to be an overflow. Isn\u0027t it?\r\n\r\n\u003e The simplest example is that checked(5 / 2) does not throw\r\n\r\nI guess I wouldn\u0027t consider that to be an overflow, I wouldn\u0027t expect that to throw as that\u0027s what integer division is defined as. But I would consider casting a `double` to a `float` that\u0027s too large for a `float` to be a kind of overflow.\r\n\r\nBut thanks for letting me know about the semantics (or lack of thereof) of `checked` and floating point numbers. I guess I have to be careful and write my own utilities for floating point conversions that are really actually checked.\r\n\r\nEDIT:\r\nOh, `float.CreateChecked` isn\u0027t checked either 😲 damn.",
                                           "updatedAt":  "2024-03-13T23:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52_Ce6",
                                           "createdAt":  "2024-03-14T01:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaj7bQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-03-14T11:02:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Zintom",
                                                                               "createdAt":  "2024-03-14T12:33:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I guess I wouldn\u0027t consider that to be an overflow, I wouldn\u0027t expect that to throw as that\u0027s what integer division is defined as. But I would consider casting a double to a float that\u0027s too large for a float to be a kind of overflow.\r\n\r\nOf sorts, but that\u0027s the intent of `PositiveInfinity` and `NegativeInfinity`. They exist to represent a value that overflowed past the finite range. Its overall more performant, avoids needing to check every single operation while still propagating the relevant information such that checking once at the end of the algorithm is typically sufficient instead. And most importantly, it allows float/double to represent values and arithmetic operations that are critical for scientific applications, games, machine learning, and in general higher level mathematics. -- `NaN` and `Negative Zero` exist for much the same reason, to represent values that escape the \"real\" number domain or which round towards zero, but may have actually been less than `Epsilon`.\r\n\r\nIt really just falls out that there is no value that can overflow, because its always representable as infinity, which is unlike integers which can only represent finite values.",
                                           "updatedAt":  "2024-03-14T01:38:55Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "[API Proposal]: BFloat16",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97780",
        "createdAt":  "2024-01-31T18:52:28Z",
        "number":  97780,
        "author":  "bartonjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-28T05:18:37Z",
        "body":  "### Description\n\nTrying to use BigInteger for test authoring is currently impeded by it asserting.\n\n### Reproduction Steps\n\n```C#\r\nbyte[] buf = new byte[2048 \u003e\u003e 3];\r\nbuf[1] = 2;\r\nbuf.AsSpan(2, 8).Fill(1);\r\nBigInteger m = new BigInteger(buf, true, true);\r\nBigInteger e = 65537;\r\n\r\nbuf = new byte[]\r\n{\r\n    0xB1, 0x7C, 0xEE, 0x77, 0xB4, 0x59, 0xA4, 0x65,\r\n    0x92, 0x8D, 0x7F, 0x55, 0x77, 0x80, 0x39, 0xBA,\r\n    0x22, 0xBA, 0x29, 0xA5, 0xFF, 0xE5, 0x53, 0xFB,\r\n    0x40, 0x98, 0xA8, 0x35, 0xE5, 0x2D, 0x0A, 0xDC,\r\n    0x85, 0x17, 0x6E, 0xE4, 0xD6, 0x93, 0x82, 0x20,\r\n    0x71, 0x8D, 0xE9, 0xDD, 0xC9, 0xD5, 0xBD, 0x30,\r\n    0x47, 0xEE, 0x59, 0xB9, 0xE6, 0xA8, 0x79, 0x9E,\r\n    0x47, 0x96, 0x8E, 0x63, 0xCD, 0xA6, 0x28, 0x9D,\r\n    0x7B, 0x6D, 0x83, 0xAA, 0x68, 0xE2, 0x46, 0xD6,\r\n    0x1C, 0x8C, 0x2B, 0xA1, 0xC4, 0x04, 0x12, 0xAE,\r\n    0x61, 0x07, 0xAF, 0x6F, 0xE9, 0x2B, 0x48, 0x5C,\r\n    0xCA, 0xC2, 0x0E, 0x52, 0x71, 0x21, 0x03, 0xE0,\r\n    0x05, 0x1C, 0x07, 0xC0, 0x56, 0xFD, 0x8A, 0x61,\r\n    0x7A, 0x95, 0x39, 0x4B, 0xAA, 0x5A, 0x9D, 0x03,\r\n    0x6D, 0x7A, 0x51, 0x3E, 0x7A, 0xE4, 0xAB, 0xED,\r\n    0xB4, 0x0A, 0x88, 0x80, 0x3C, 0x07, 0xED, 0x19,\r\n    0x21, 0xA2, 0xDC, 0xD7, 0x9C, 0x3F, 0x3B, 0x19,\r\n    0x59, 0x33, 0x39, 0x8A, 0x25, 0xDB, 0xCE, 0x8D,\r\n    0x8E, 0x10, 0xDA, 0xB1, 0x38, 0x32, 0xCA, 0x59,\r\n    0xA1, 0x69, 0x3C, 0x23, 0x76, 0x50, 0x37, 0xB3,\r\n    0xBF, 0x73, 0x58, 0x77, 0x38, 0xC5, 0x16, 0x03,\r\n    0x60, 0x36, 0x0D, 0x31, 0x8C, 0xBE, 0xA5, 0x12,\r\n    0x2F, 0xE5, 0x16, 0xAD, 0x1C, 0x80, 0x01, 0x50,\r\n    0xEB, 0x3C, 0x86, 0x79, 0x22, 0xD3, 0x7F, 0xD4,\r\n    0x90, 0x85, 0xB8, 0xEB, 0xB0, 0x7D, 0xD8, 0xC8,\r\n    0x8B, 0xBB, 0x88, 0xBE, 0xFE, 0xB8, 0xBA, 0xAD,\r\n    0x61, 0xC7, 0xF9, 0x68, 0x20, 0xB2, 0xA9, 0x1D,\r\n    0xB4, 0xDC, 0xB0, 0x5B, 0xC7, 0xB3, 0xF2, 0x83,\r\n    0x35, 0x43, 0xB0, 0xAE, 0x19, 0x2B, 0xA6, 0xFA,\r\n    0x88, 0x48, 0xB9, 0xFB, 0xB3, 0xCD, 0xF8, 0xA9,\r\n    0x9C, 0x20, 0x6F, 0x63, 0x23, 0xE5, 0xC2, 0x85,\r\n    0xCD, 0x75, 0x7A, 0x55, 0x04, 0xA4, 0x08, 0x99,\r\n};\r\n\r\nBigInteger n = new BigInteger(buf, true, true);\r\nBigInteger c = BigInteger.ModPow(m, e, n);\r\n```\n\n### Expected behavior\n\nNo assertion.\n\n### Actual behavior\n\n```\r\nProcess terminated. Assertion failed.\r\n     at System.Numerics.BigIntegerCalculator.SubtractSelf(Span`1 left, ReadOnly\r\n  Span`1 right) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.AddSub.cs:line 135\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.SubMod(Span`1 left, Re\r\n  adOnlySpan`1 right, ReadOnlySpan`1 modulus, Int32 k) in C:\\git\\bartonjs\\runti\r\n  me.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalc\r\n  ulator.FastReducer.cs:line 114\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.Reduce(Span`1 value) i\r\n  n C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\\r\n  Numerics\\BigIntegerCalculator.FastReducer.cs:line 61\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, FastReducer\u0026 reducer, Span`1 result, Int32 resultLength,\r\n   Span`1 temp) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.PowMod.cs:line 539\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, ReadOnlySpan`1 modulus, Span`1 temp, Span`1 bits) in C:\\\r\n  git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numer\r\n  ics\\BigIntegerCalculator.PowMod.cs:line 416\r\n     at System.Numerics.BigIntegerCalculator.Pow(ReadOnlySpan`1 value, UInt32 p\r\n  ower, ReadOnlySpan`1 modulus, Span`1 bits) in C:\\git\\bartonjs\\runtime.3\\src\\l\r\n  ibraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalculator.Pow\r\n  Mod.cs:line 243\r\n     at System.Numerics.BigInteger.ModPow(BigInteger value, BigInteger exponent\r\n  , BigInteger modulus) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runti\r\n  me.Numerics\\src\\System\\Numerics\\BigInteger.cs:line 1005\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nDefinitely happens on bc0b28f564f0f3fdfa0c0856bd1b3b38d5371c4d on both osx and win.  The osx build merged up through 3bf9beecd5f68a59fc407488ce8120ee3d4240c7 (main as of about an hour ago) and still sees the assert.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc2B_Kw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ybMfR",
                                           "createdAt":  "2024-01-31T18:52:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTrying to use BigInteger for test authoring is currently impeded by it asserting.\n\n### Reproduction Steps\n\n```C#\r\nbyte[] buf = new byte[2048 \u003e\u003e 3];\r\nbuf[1] = 2;\r\nbuf.AsSpan(2, 8).Fill(1);\r\nBigInteger m = new BigInteger(buf, true, true);\r\nBigInteger e = 65537;\r\n\r\nbuf = new byte[]\r\n{\r\n    0xB1, 0x7C, 0xEE, 0x77, 0xB4, 0x59, 0xA4, 0x65,\r\n    0x92, 0x8D, 0x7F, 0x55, 0x77, 0x80, 0x39, 0xBA,\r\n    0x22, 0xBA, 0x29, 0xA5, 0xFF, 0xE5, 0x53, 0xFB,\r\n    0x40, 0x98, 0xA8, 0x35, 0xE5, 0x2D, 0x0A, 0xDC,\r\n    0x85, 0x17, 0x6E, 0xE4, 0xD6, 0x93, 0x82, 0x20,\r\n    0x71, 0x8D, 0xE9, 0xDD, 0xC9, 0xD5, 0xBD, 0x30,\r\n    0x47, 0xEE, 0x59, 0xB9, 0xE6, 0xA8, 0x79, 0x9E,\r\n    0x47, 0x96, 0x8E, 0x63, 0xCD, 0xA6, 0x28, 0x9D,\r\n    0x7B, 0x6D, 0x83, 0xAA, 0x68, 0xE2, 0x46, 0xD6,\r\n    0x1C, 0x8C, 0x2B, 0xA1, 0xC4, 0x04, 0x12, 0xAE,\r\n    0x61, 0x07, 0xAF, 0x6F, 0xE9, 0x2B, 0x48, 0x5C,\r\n    0xCA, 0xC2, 0x0E, 0x52, 0x71, 0x21, 0x03, 0xE0,\r\n    0x05, 0x1C, 0x07, 0xC0, 0x56, 0xFD, 0x8A, 0x61,\r\n    0x7A, 0x95, 0x39, 0x4B, 0xAA, 0x5A, 0x9D, 0x03,\r\n    0x6D, 0x7A, 0x51, 0x3E, 0x7A, 0xE4, 0xAB, 0xED,\r\n    0xB4, 0x0A, 0x88, 0x80, 0x3C, 0x07, 0xED, 0x19,\r\n    0x21, 0xA2, 0xDC, 0xD7, 0x9C, 0x3F, 0x3B, 0x19,\r\n    0x59, 0x33, 0x39, 0x8A, 0x25, 0xDB, 0xCE, 0x8D,\r\n    0x8E, 0x10, 0xDA, 0xB1, 0x38, 0x32, 0xCA, 0x59,\r\n    0xA1, 0x69, 0x3C, 0x23, 0x76, 0x50, 0x37, 0xB3,\r\n    0xBF, 0x73, 0x58, 0x77, 0x38, 0xC5, 0x16, 0x03,\r\n    0x60, 0x36, 0x0D, 0x31, 0x8C, 0xBE, 0xA5, 0x12,\r\n    0x2F, 0xE5, 0x16, 0xAD, 0x1C, 0x80, 0x01, 0x50,\r\n    0xEB, 0x3C, 0x86, 0x79, 0x22, 0xD3, 0x7F, 0xD4,\r\n    0x90, 0x85, 0xB8, 0xEB, 0xB0, 0x7D, 0xD8, 0xC8,\r\n    0x8B, 0xBB, 0x88, 0xBE, 0xFE, 0xB8, 0xBA, 0xAD,\r\n    0x61, 0xC7, 0xF9, 0x68, 0x20, 0xB2, 0xA9, 0x1D,\r\n    0xB4, 0xDC, 0xB0, 0x5B, 0xC7, 0xB3, 0xF2, 0x83,\r\n    0x35, 0x43, 0xB0, 0xAE, 0x19, 0x2B, 0xA6, 0xFA,\r\n    0x88, 0x48, 0xB9, 0xFB, 0xB3, 0xCD, 0xF8, 0xA9,\r\n    0x9C, 0x20, 0x6F, 0x63, 0x23, 0xE5, 0xC2, 0x85,\r\n    0xCD, 0x75, 0x7A, 0x55, 0x04, 0xA4, 0x08, 0x99,\r\n};\r\n\r\nBigInteger n = new BigInteger(buf, true, true);\r\nBigInteger c = BigInteger.ModPow(m, e, n);\r\n```\n\n### Expected behavior\n\nNo assertion.\n\n### Actual behavior\n\n```\r\nProcess terminated. Assertion failed.\r\n     at System.Numerics.BigIntegerCalculator.SubtractSelf(Span`1 left, ReadOnly\r\n  Span`1 right) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.AddSub.cs:line 135\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.SubMod(Span`1 left, Re\r\n  adOnlySpan`1 right, ReadOnlySpan`1 modulus, Int32 k) in C:\\git\\bartonjs\\runti\r\n  me.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalc\r\n  ulator.FastReducer.cs:line 114\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.Reduce(Span`1 value) i\r\n  n C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\\r\n  Numerics\\BigIntegerCalculator.FastReducer.cs:line 61\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, FastReducer\u0026 reducer, Span`1 result, Int32 resultLength,\r\n   Span`1 temp) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.PowMod.cs:line 539\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, ReadOnlySpan`1 modulus, Span`1 temp, Span`1 bits) in C:\\\r\n  git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numer\r\n  ics\\BigIntegerCalculator.PowMod.cs:line 416\r\n     at System.Numerics.BigIntegerCalculator.Pow(ReadOnlySpan`1 value, UInt32 p\r\n  ower, ReadOnlySpan`1 modulus, Span`1 bits) in C:\\git\\bartonjs\\runtime.3\\src\\l\r\n  ibraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalculator.Pow\r\n  Mod.cs:line 243\r\n     at System.Numerics.BigInteger.ModPow(BigInteger value, BigInteger exponent\r\n  , BigInteger modulus) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runti\r\n  me.Numerics\\src\\System\\Numerics\\BigInteger.cs:line 1005\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nDefinitely happens on bc0b28f564f0f3fdfa0c0856bd1b3b38d5371c4d on both osx and win.  The osx build merged up through 3bf9beecd5f68a59fc407488ce8120ee3d4240c7 (main as of about an hour ago) and still sees the assert.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebartonjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-31T18:52:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zOV1D",
                                           "createdAt":  "2024-02-08T00:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Tentatively marked this as 9.0.0. If it\u0027s not fully blocking though, we\u0027ll move it to Future.",
                                           "updatedAt":  "2024-02-08T00:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zOZMj",
                                           "createdAt":  "2024-02-08T00:14:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV7urg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2024-02-08T00:15:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "This is blocking test authoring for https://github.com/dotnet/runtime/pull/97738; so, yes, it\u0027s \"fully blocking\"",
                                           "updatedAt":  "2024-02-08T00:14:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zUOTw",
                                           "createdAt":  "2024-02-08T18:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It appears that there is a flaw in the `SubMod` implementation in the \"FastReducer\" algorithm:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9367edc6fbd500e45cf80b3f00135de771766620/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.FastReducer.cs#L102-L114\r\n\r\nin that it incorrectly assumes that `left` is greater than or equal to `right` after truncating to the `k` least significant digits of the representation. The FastReducer was introduced as a performance optimization in https://github.com/dotnet/corefx/pull/2182. \r\n\r\n## Minimal Reproduction\r\n\r\n```C#\r\nBigInteger modulus = (BigInteger)3 \u003c\u003c 1024;\r\nBigInteger value = modulus;\r\nint exponent = 2;\r\n\r\nBigInteger.ModPow(value, exponent, value); // Assertion failure in debug builds\r\n```\r\n\r\nIt should be noted that superficially, the result appears to be correct using the following validation logic:\r\n\r\n```C#\r\nBigInteger result = BigInteger.ModPow(value, exponent, modulus);\r\n\r\nBigInteger expectedResult = 1;\r\nfor (int i = 0; i \u003c exponent; i++)\r\n{\r\n    expectedResult = (expectedResult * value) % modulus;\r\n}\r\n\r\nAssert.Equal(expectedResult, result); // Passes for given inputs\r\n```\r\n\r\nHowever, I don\u0027t think it would be safe to simply comment out the asserts. The `SubtractSelf` algorithm --where the assertion is failing-- has not been designed for cases where `left \u003c right`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/9367edc6fbd500e45cf80b3f00135de771766620/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.AddSub.cs#L132-L162\r\n\r\nThe final assert checking that `carry == 0` also ends up failing. It isn\u0027t clear to me whether the final result is accidentally correct for the particular examined inputs or because it happens to work with the invariants required by this particular implementation of Barrett\u0027s algorithm.",
                                           "updatedAt":  "2024-02-08T18:36:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zVNKo",
                                           "createdAt":  "2024-02-08T21:10:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWE_4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2024-02-08T22:20:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I fuzzed the .NET 8 implementation with FsCheck, using parameters that trigger the assert failing:\r\n\r\n```C#\r\nusing FsCheck;\r\nusing FsCheck.Fluent;\r\nusing System.Numerics;\r\n\r\nConfig configuration = Config.Quick.WithMaxTest(10_000_000);\r\n\r\nParallel.For(0, Environment.ProcessorCount, i =\u003e\r\n{\r\n    Prop.ForAll\u003c(int, int, byte)\u003e(t =\u003e ModPowPropertyTest(t.Item1, t.Item2, t.Item3))\r\n        .Check(configuration);\r\n});\r\n\r\nstatic bool ModPowPropertyTest(int valueSeed, int modulusSpread, ushort exponent)\r\n{\r\n    if (Math.Abs(valueSeed) \u003c 2 || exponent \u003c 2)\r\n    {\r\n        return true; // Skip trivial values\r\n    }\r\n\r\n    // Arrange\r\n    BigInteger value = (BigInteger)valueSeed \u003c\u003c 1024; // To trigger the bug, uint[] representation needs to start with at least 32 zeros.\r\n    BigInteger modulus = value + modulusSpread; // The modulus must be approximately the same size as the value.\r\n\r\n    // Act\r\n    BigInteger result = BigInteger.ModPow(value, exponent, modulus);\r\n\r\n    // Assert\r\n    BigInteger expectedResult = 1;\r\n    for (int i = 0; i \u003c exponent; i++)\r\n    {\r\n        expectedResult = (expectedResult * value) % modulus;\r\n    }\r\n\r\n    return expectedResult == result;\r\n}\r\n```\r\n\r\nAfter 160 million runs, no invalid outputs were detected. @jeffhandley I think we could try removing the asserts to unblock @bartonjs\u0027s work.",
                                           "updatedAt":  "2024-02-09T09:51:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zVORG",
                                           "createdAt":  "2024-02-08T21:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e  BigInteger value = (BigInteger)valueSeed \u003c\u003c 1024; // To trigger the bug, uint[] representation needs to start with at least 32 zeros.\r\n   \r\n\r\nIf keeping a bit set in the least significant segment works around the problem, I\u0027ll give that a go.",
                                           "updatedAt":  "2024-02-08T21:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zVQlj",
                                           "createdAt":  "2024-02-08T21:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "It seems to be more nuanced than just keeping a low bit set, since the number described by\r\n\r\n```C#\r\nbyte[] buf = new byte[2048 \u003e\u003e 3];\r\nbuf[1] = 2;\r\nbuf.AsSpan(2, 8).Fill(1);\r\nbuf[^1] = 1;\r\n```\r\n\r\nstill asserted; but `00 02 01 01 01 01 ... 01 01 01 01` didn\u0027t). So it\u0027s probably a \"can\u0027t have a chunk of all zeros\" where chunk is, presumably, defined.",
                                           "updatedAt":  "2024-02-08T21:22:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zVi34",
                                           "createdAt":  "2024-02-08T22:23:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "```C#\r\nbyte[] buf = new byte[2048 \u003e\u003e 3];\r\nbuf[1] = 2;\r\nbuf.AsSpan(2, 8).Fill(1);\r\n```\r\n\r\nyields\r\n\r\n```\r\n Process terminated. Assertion failed.\r\n     at System.Numerics.BigIntegerCalculator.SubtractSelf(Span`1 left, ReadOnly\r\n  Span`1 right) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.AddSub.cs:line 135\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.SubMod(Span`1 left, Re\r\n  adOnlySpan`1 right, ReadOnlySpan`1 modulus, Int32 k) in C:\\git\\bartonjs\\runti\r\n  me.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalc\r\n  ulator.FastReducer.cs:line 114\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.Reduce(Span`1 value) i\r\n  n C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\\r\n  Numerics\\BigIntegerCalculator.FastReducer.cs:line 61\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, FastReducer\u0026 reducer, Span`1 result, Int32 resultLength,\r\n   Span`1 temp) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.PowMod.cs:line 539\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, ReadOnlySpan`1 modulus, Span`1 temp, Span`1 bits) in C:\\\r\n  git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numer\r\n  ics\\BigIntegerCalculator.PowMod.cs:line 416\r\n     at System.Numerics.BigIntegerCalculator.Pow(ReadOnlySpan`1 value, UInt32 p\r\n  ower, ReadOnlySpan`1 modulus, Span`1 bits) in C:\\git\\bartonjs\\runtime.3\\src\\l\r\n  ibraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalculator.Pow\r\n  Mod.cs:line 243\r\n     at System.Numerics.BigInteger.ModPow(BigInteger value, BigInteger exponent\r\n  , BigInteger modulus) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runti\r\n  me.Numerics\\src\\System\\Numerics\\BigInteger.cs:line 1005\r\n```\r\n\r\nadding in `buf[^1] = 1`\r\n\r\nyields\r\n\r\n```\r\n  Process terminated. Assertion failed.\r\n     at System.Numerics.BigIntegerCalculator.SubtractSelf(Span`1 left, ReadOnly\r\n  Span`1 right) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.AddSub.cs:line 135\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.SubMod(Span`1 left, Re\r\n  adOnlySpan`1 right, ReadOnlySpan`1 modulus, Int32 k) in C:\\git\\bartonjs\\runti\r\n  me.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalc\r\n  ulator.FastReducer.cs:line 114\r\n     at System.Numerics.BigIntegerCalculator.FastReducer.Reduce(Span`1 value) i\r\n  n C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\\r\n  Numerics\\BigIntegerCalculator.FastReducer.cs:line 61\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, FastReducer\u0026 reducer, Span`1 result, Int32 resultLength,\r\n   Span`1 temp) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numer\r\n  ics\\src\\System\\Numerics\\BigIntegerCalculator.PowMod.cs:line 539\r\n     at System.Numerics.BigIntegerCalculator.PowCore(Span`1 value, Int32 valueL\r\n  ength, UInt32 power, ReadOnlySpan`1 modulus, Span`1 temp, Span`1 bits) in C:\\\r\n  git\\bartonjs\\runtime.3\\src\\libraries\\System.Runtime.Numerics\\src\\System\\Numer\r\n  ics\\BigIntegerCalculator.PowMod.cs:line 416\r\n     at System.Numerics.BigIntegerCalculator.Pow(ReadOnlySpan`1 value, UInt32 p\r\n  ower, ReadOnlySpan`1 modulus, Span`1 bits) in C:\\git\\bartonjs\\runtime.3\\src\\l\r\n  ibraries\\System.Runtime.Numerics\\src\\System\\Numerics\\BigIntegerCalculator.Pow\r\n  Mod.cs:line 243\r\n     at System.Numerics.BigInteger.ModPow(BigInteger value, BigInteger exponent\r\n  , BigInteger modulus) in C:\\git\\bartonjs\\runtime.3\\src\\libraries\\System.Runti\r\n  me.Numerics\\src\\System\\Numerics\\BigInteger.cs:line 1005\r\n```\r\n\r\nWhich looks the same to me.",
                                           "updatedAt":  "2024-02-08T22:23:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zYH8r",
                                           "createdAt":  "2024-02-09T10:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The two inputs trigger the same condition. TL;DR the implementation calculates the value $n^2$ and then [attempts to subtract from it](https://github.com/dotnet/runtime/blob/9367edc6fbd500e45cf80b3f00135de771766620/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.FastReducer.cs#L61-L62)  a value $q_2$ that is known to be smaller than that square (modulo $m + 1$). The problem is that it does so by applying a performance optimization [that truncates the input values](https://github.com/dotnet/runtime/blob/9367edc6fbd500e45cf80b3f00135de771766620/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigIntegerCalculator.FastReducer.cs#L104-L112) down to the $\\log (m + 1)$ least significant digits, however this truncation operation can invalidate the original assumption that $n^2 \\ge q_2$.\r\n\r\nIf the least significant digits of the input value $n$ are zero, or almost zero, then squaring that value will essentially double the number of least significant digits that are zero, which triggers the above condition.",
                                           "updatedAt":  "2024-02-09T10:52:44Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "BigInteger.ModPow asserting in SubtractSelf",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101873",
        "createdAt":  "2024-05-04T10:32:59Z",
        "number":  101873,
        "author":  "mikernet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-20T03:18:46Z",
        "body":  "### Description\r\n\r\nThere are inconsistencies with how `NumberStyles.AllowLeadingWhite` and `AllowTrailingWhite` behave. Incorrect handling of the former means that if a user has their system set to use this standard available format in Windows, numbers can never be parsed back from that string representation:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/1700111/47e3a085-d213-4321-8048-1f9e959a8497)\r\n\r\nThis seems rather problematic, i.e. if an application is displaying numeric values in a textbox using the user\u0027s preferred format, which is typically what is done, then it will fail to convert that value back to its numeric type.\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nvar style = NumberStyles.AllowLeadingWhite |\r\n    NumberStyles.AllowTrailingWhite |\r\n    NumberStyles.AllowLeadingSign |\r\n    NumberStyles.AllowTrailingSign;\r\n\r\nint.Parse(\"123 -\", style) // Ok with AllowTrailingWhite\r\nint.Parse(\"- 123\", style) // Always throws, even with AllowLeadingWhite \r\n```\r\n\r\nThis next inconsistency is likely related, and although it is less problematic (since the standard formats don\u0027t put spaces here), it is still an odd inconsistency:\r\n```cs\r\nvar style = NumberStyles.AllowLeadingWhite |\r\n    NumberStyles.AllowTrailingWhite |\r\n    NumberStyles.AllowParenthesis;\r\n\r\nint.Parse(\"(123   )\", style) // Ok with AllowTrailingWhite\r\nint.Parse(\"(   123)\", style) // Always throws, even with AllowLeadingWhite \r\n```\r\n\r\n### Expected behavior\r\n\r\nThe first issue with the sign should be fixed so that `AllowLeadingWhite` allows whitespace to lead the number after the sign.\r\n\r\nThe second issue I\u0027m a bit agnostic about, but I thought I should mention it. It\u0027s probably too late to make it stricter and not allow spaces on either side, so either loosen the behavior so whitespace can lead the number after the opening parenthesis (which may just happen naturally as part of the fix to the first issue), or leave it as-is.\r\n\r\n### Actual behavior\r\n\r\nSee above.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhZFKbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc580yK_",
                                           "createdAt":  "2024-05-04T14:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-04T14:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580yNC",
                                           "createdAt":  "2024-05-04T14:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Not sure whether number parsing should be labeled numerics",
                                           "updatedAt":  "2024-05-04T14:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FkEcC",
                                           "createdAt":  "2024-07-20T01:38:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-20T01:38:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FkFWK",
                                           "createdAt":  "2024-07-20T01:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-20T01:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FkFfl",
                                           "createdAt":  "2024-07-20T01:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jeffhandley I moved the area back to numeric. It is parsing issue with numeric which need to consider the globalization settings. I can help with any globalization guidance as needed. ",
                                           "updatedAt":  "2024-07-20T01:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FkUps",
                                           "createdAt":  "2024-07-20T03:18:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "OK, thanks for the course correction there, @tarekgh.",
                                           "updatedAt":  "2024-07-20T03:18:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Negative numeric parsing inconsistencies / can\u0027t parse standard Windows format option",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102669",
        "createdAt":  "2024-05-24T17:43:33Z",
        "number":  102669,
        "author":  "ShivangiReja",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4MnCg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "annelo-msft",
                                            "createdAt":  "2024-05-24T20:19:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-05-24T23:45:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-05-28T05:27:28Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-08-13T18:27:32Z",
        "body":  "### Background and motivation\r\n\r\nCurrently, AI libraries in the .NET ecosystem, e.g. OpenAI, Azure AI Search, use `ReadOnlyMemory\u003cfloat\u003e` to represent embedding vectors. However, embeddings can be of narrower types such as `int8`, `int16`, `float16`, etc., which consume less memory, providing both cost and performance benefits. This proposal aims to introduce a versatile container for embeddings that can handle various data types, enabling more efficient memory usage and broader interoperability among different services (e.g., retrieving vectors from services like OpenAI and storing them in vector databases like Azure Search). \r\n\r\n### API Proposal\r\n\r\n```csharp\r\n// package: ?\r\nnamespace System.Numerics; // another options: System.AI\r\n\r\npublic abstract class EmbeddingVector\r\n{\r\n    public virtual EmbeddingVector\u003cT\u003e To\u003cT\u003e();\r\n    \r\n    public static EmbeddingVector FromJson(ReadOnlyMemory\u003cbyte\u003e utf8Json);\r\n    public static EmbeddingVector FromBase64(ReadOnlyMemory\u003cbyte\u003e utf8Base64)\r\n    public static EmbeddingVector\u003cT\u003e FromScalars\u003cT\u003e(ReadOnlyMemory\u003cT\u003e scalars)\r\n\r\n    // possible additions:\r\n    // public string ModelName { get; protected set; }\r\n    // public string Precision { get; protected set; }\r\n    // public abstract int Length { get; }\r\n\r\n    public abstract void Write(Stream stream, string format);\r\n}\r\n\r\npublic sealed class EmbeddingVector\u003cT\u003e : EmbeddingVector\r\n{\r\n    public EmbeddingVector(ReadOnlyMemory\u003cT\u003e scalars);\r\n    public ReadOnlyMemory\u003cT\u003e Scalars { get; } \r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nEmbeddingVector vector = EmbeddingVector.FromJson(\"[-0.0026168018,-0.024089903,0.03355637]\"u8.ToArray());\r\nEmbeddingVector\u003cfloat\u003e floats = vector.To\u003cfloat\u003e();\r\nforeach(float scalar in  floats.Scalars.Span)\r\n{\r\n    Console.WriteLine(scalar);\r\n}\r\n```\r\n\r\nHere\u0027s how we can use it with OpenAI, which returns a base64 encoded string:\r\n\r\n```csharp\r\nEmbeddingClient client = new(\"text-embedding-ada-002\", Environment.GetEnvironmentVariable(\"OPENAI-API-KEY\"));\r\nClientResult\u003cEmbedding\u003e response = client.GenerateEmbedding(\"Top hotel in town\");\r\n```\r\n\r\nAnd here\u0027s how we can use it with Azure Search, which returns a JSON array:\r\n\r\n```csharp\r\n// Get embedding from OpenAI\r\nEmbeddingClient client = new(\"text-embedding-ada-002\", Environment.GetEnvironmentVariable(\"OPENAI-API-KEY\"));\r\nEmbedding embedding = client.GenerateEmbedding(\"Top hotel in town\");\r\nEmbeddingVector vector = embedding.Vector;\r\n\r\n// Call Azure AI Search passing in the vector\r\nUri endpoint = new(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\r\nAzureKeyCredential credential = new AzureKeyCredential(Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\"));\r\nSearchClient searchClient = new SearchClient(endpoint, \"mysearchindex\", credential);\r\n\r\nResponse\u003cSearchResults\u003cHotel\u003e\u003e response = searchClient.Search\u003cHotel\u003e(\r\n        new SearchOptions\r\n        {\r\n            VectorSearch = new()\r\n            {\r\n                Queries = { new VectorizedQuery(vector) { KNearestNeighborsCount = 3, Fields = { \"DescriptionVector\" } } }\r\n            }\r\n        });\r\n```\r\n\r\nFor end-to-end working examples, please see: [EmbeddingType/Program.cs](https://github.com/ShivangiReja/EmbeddingType/blob/master/EmbeddingType/Program.cs)\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\n### Discussion Points\r\n\r\n- Should FromBase64 take a parameter specifying endianness?\r\n- Which datatypes in addition to float and Half should we support? Int16? Byte, SByte?\r\n- Should we take endianness parameter to FromBase64? Supposedly OpenAI sends floats little-endian\r\n- Do we want specialized vector of bits?\r\n- Do we want to add support for slicing?\r\n- Do we like the name EmbeddingVector? Do we like the namespace?\r\n- What\u0027s the package this ships in?\r\n- Do we want to add property ModelName? Lenght? Precision? any others. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfwrb4A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-9kSb",
                                           "createdAt":  "2024-05-24T17:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-24T17:44:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-_OIo",
                                           "createdAt":  "2024-05-24T23:13:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "annelo-msft",
                                           "body":  "I\u0027m interesting in whether we\u0027d consider an alternate name for the type of `VectorEmbedding` (instead of `EmbeddingVector`).  My understanding is that there are multiple meanings for \"embeddings\" in the deep-learning space, so \"embedding\" here is a noun and \"vector\" is the adjective that differentiates which type of embedding you\u0027re referring to.\r\n\r\nAs a higher-level point, as we add types to the BCL that map to concepts in AI/ML, it feels like there\u0027s value in having their names align well with the terminology used for the same concepts.  One benefit of this might be that folks searching online for more information about what the type represents would more easily land on documentation from the broader ML community.  For this one, I found many articles referencing \"vector embeddings\" but few on \"embedding vectors.\"",
                                           "updatedAt":  "2024-05-24T23:13:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_ClTK",
                                           "createdAt":  "2024-05-25T18:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtBbOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Giorgi",
                                                                               "createdAt":  "2024-05-25T19:57:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-05-27T03:52:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2024-05-27T17:05:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2024-06-06T22:00:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2024-08-06T19:35:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Is there reason to have this in the BCL rather than a standalone library?",
                                           "updatedAt":  "2024-05-25T18:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Ctvg",
                                           "createdAt":  "2024-05-25T19:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjPFGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2024-05-26T01:39:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Giorgi",
                                           "body":  "Why not make it part of [SmartComponents.LocalEmbeddings](https://github.com/dotnet-smartcomponents/smartcomponents/blob/main/docs/local-embeddings.md)?",
                                           "updatedAt":  "2024-05-25T19:58:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Add Vector Embedding Type",
        "labels":  [
                       "api-needs-work",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103141",
        "createdAt":  "2024-06-06T20:34:38Z",
        "number":  103141,
        "author":  "Charlieface",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4wfqg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-07T12:57:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-07T13:33:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-06-20T04:06:41Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-14T18:19:48Z",
        "body":  "### Background and motivation\r\n\r\n`System.Numerics` and the interface operators feature has allowed us to generic-ize over arbitrary numerical types, to use operators and functions such as `+` `*` `Zero`. One of those interfaces is `IBitwiseOperators`, which allows the operators `\u0026` `|` `^` and `~`. This is implemented by all the integer types.\r\n\r\nI propose that `Boolean` should implement this as well, even though it doesn\u0027t implement any other `Numerics` interfaces. It does have all those operators, and this would allow it to be used anywhere that you specify `IBitwiseOperators`.\r\n\r\nThe motivation is writing generic code that can do arbitrary bitwise operations. For example, I\u0027d like the following LINQ extension, which mimics the `bit_and` aggregate function in some SQL implementations.\r\n```cs\r\npublic static T BitAnd\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IBitwiseOperators\u003cT, T, T\u003e =\u003e\r\n    source.Aggregate((prev, next) =\u003e prev \u0026 next);\r\n```\r\nBut this won\u0027t work with `bool` and requires a separate implementation just for it.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Represents a boolean (\u003csee langword=\"true\"/\u003e or \u003csee langword=\"false\"/\u003e) value.\r\n    /// \u003c/summary\u003e\r\n    [Serializable]\r\n    [TypeForwardedFrom(\"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\")]\r\n    public readonly struct Boolean\r\n        : IComparable,\r\n          IConvertible,\r\n          IComparable\u003cbool\u003e,\r\n          IEquatable\u003cbool\u003e,\r\n+         IBitwiseOperators\u003cbool, bool, bool\u003e,\r\n          ISpanParsable\u003cbool\u003e\r\n```\r\n```csharp\r\n        static bool IBitwiseOperators\u003cbool, bool, bool\u003e.operator \u0026(bool left, bool right) =\u003e left \u0026\u0026 right;\r\n\r\n        static bool IBitwiseOperators\u003cbool, bool, bool\u003e.operator |(bool left, bool right) =\u003e left || right;\r\n\r\n        static bool IBitwiseOperators\u003cbool, bool, bool\u003e.operator ^(bool left, byte right) =\u003e left ^ right;\r\n\r\n        static bool IBitwiseOperators\u003cbool, bool, bool\u003e.operator ~(bool value) =\u003e ~value;\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nAs mentioned, bit aggregation operations are the most useful usage. `ReadOnlySpan` would be good to implement for also\r\n```csharp\r\npublic static T BitAnd\u003cT\u003e(this ReadOnlySpan\u003cT\u003e source) where T : IBitwiseOperators\u003cT, T, T\u003e\r\n{\r\n    if (source.Length == 0)\r\n        return default;\r\n\r\n    var value = source[0];\r\n    for (var i = 1; i \u003c source.Length; i++)\r\n        value \u0026= source[i];\r\n\r\n    return value\r\n}\r\n```\r\nMerge adjacent runs using `\u0026`\r\n```csharp\r\npublic static IEnumerable\u003cT\u003e MergeAnd\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IBitwiseOperators\u003cT, T, T\u003e\r\n{\r\n    using var enumer = source.GetEnumerator();\r\n    while (enumer.MoveNext())\r\n    {\r\n        var left = enumer.Current;\r\n        if (!enumer.MoveNext()) throw new InvalidOperationException(\"Not even number of elements\");\r\n        var right = enumer.Current;\r\n        yield return left \u0026 right;\r\n    }\r\n}\r\n```\r\nAn `IMP` function (logical implication)\r\n```csharp\r\npublic static T Imp\u003cT\u003e(T left, T right) where T : IBitwiseOperators\u003cT, T, T\u003e =\u003e ~left | right;\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nWhat happens to the C#/Roslyn compiler in the presence of such functions, where `bool` is used directly? Does it use those functions, or is it hard-coded to use IL bytecode instead? This would be a similar problem to any other of the numeric interfaces, if it is actually an issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtftIVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AWbV3",
                                           "createdAt":  "2024-06-06T20:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-06T20:35:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AWeGw",
                                           "createdAt":  "2024-06-06T20:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I believe that this was considered and rejected at some point, cc @tannergooding ",
                                           "updatedAt":  "2024-06-06T20:42:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AX-sR",
                                           "createdAt":  "2024-06-07T03:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Note that bitwise operators on `bool` does not short-circuit, unlike the logical operators. Sometimes they are used intentionally. So `operator \u0026(bool left, bool right) =\u003e left \u0026\u0026 right` is incorrect and confusing.",
                                           "updatedAt":  "2024-06-07T03:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Adr9x",
                                           "createdAt":  "2024-06-07T17:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "@huoyaoyuan \r\n\r\n\u003e Note that bitwise operators on `bool` does not short-circuit, unlike the logical operators. Sometimes they are used intentionally. So `operator \u0026(bool left, bool right) =\u003e left \u0026\u0026 right` is incorrect and confusing.\r\n\r\nThe fact that `\u0026\u0026` is used internally in the function seems immaterial to me, it will still be non-short-circuiting (and therefore side-affecting) in the case of functions. Only for variables and fields being passed in then the JIT and/or CPU could still short-circuit it, as it is not side-affecting.\r\n\r\nThe instances when `\u0026` and `|` are used on purpose are small enough that you would want to know exactly what the CPU is doing anyway (eg cryptography side-channel problems).",
                                           "updatedAt":  "2024-06-07T17:45:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AdvKc",
                                           "createdAt":  "2024-06-07T17:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODk-dKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-07T19:22:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I believe that this was considered and rejected at some point, cc @tannergooding\r\n\r\nIt wasn\u0027t outright rejected, it was just considered out of scope for the initial `Generic Math` feature work since it wasn\u0027t directly related to numeric types. The same was true for implementing `IEqualityOperators` on other types.\r\n\r\nI\u0027d in general be fine with taking this back to API review and think it would fit in well with some of the `Tensor\u003cT\u003e` work that\u0027s happening as it would allow `Tensor\u003cbool\u003e` to work with the helpers like `Tensor.And`.\r\n\r\nCC. @stephentoub for secondary input.",
                                           "updatedAt":  "2024-06-07T17:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ad1xO",
                                           "createdAt":  "2024-06-07T18:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "What\u0027s the most derived numeric abstraction we might consider for bool? IBitwiseOperators fits the mould, technically speaking we could go as far as having it implement IBinaryInteger (in the sense of boolean operations being the same as modular arithmetic mod 2)",
                                           "updatedAt":  "2024-06-07T18:16:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ad2Om",
                                           "createdAt":  "2024-06-07T18:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Should this be using explicit interface implementations?",
                                           "updatedAt":  "2024-06-07T18:17:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ad4-d",
                                           "createdAt":  "2024-06-07T18:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t think we\u0027d want `IBinaryInteger`, unlike `char` which explicitly has support for the full set of numeric operators in C# and which often warrants using those; `bool` really only supports the bitwise and equality operators.\r\n\r\nThere\u0027s also a lot of subtle quirks that come into play with regards to how IL vs C# view `bool`. Where IL says `0` is `false` and `any other bit pattern` is `true`, while C# says `0` is `false`, `1` is `true`, and `any other bit pattern` is `undefined`.\r\n\r\nThis can lead to quirks in some cases since `2` is a valid `bool` in IL and so from that perspective, `x + y` should be equivalent to operating over `byte`, but that breaks for various downstream operations and expectations when encountered.\r\n\r\nSo, I think we\u0027d only want to implement the underlying interfaces that make sense and then only the APIs which are appropriately constrained could be invoked (which we already try to fit the minimum interface set needed).",
                                           "updatedAt":  "2024-06-07T18:26:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AhTUZ",
                                           "createdAt":  "2024-06-08T22:41:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlHBBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-10T12:43:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "@eiriktsarpalis (also @huoyaoyuan relevant to what we mentioned):\r\n\r\n\u003e What\u0027s the most derived numeric abstraction we might consider for bool? IBitwiseOperators fits the mould, technically speaking we could go as far as having it implement IBinaryInteger (in the sense of boolean operations being the same as modular arithmetic mod 2)\r\n\r\nI think there are a couple of completely missing interfaces here as well, because `\u0026\u0026` and `||` short-circuiting [are implemented in C#](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#12143-user-defined-conditional-logical-operators) via `true` and `false` operators.\r\n```cs\r\npublic interface ITruthOperators\u003cTSelf\u003e\r\n    where TSelf : ITruthOperators\u003cTSelf\u003e\r\n{\r\n    static abstract bool operator true(TSelf val);\r\n\r\n    static abstract bool operator false(TSelf val);\r\n\r\n    static abstract TSelf operator !(TSelf val);\r\n}\r\n\r\npublic interface ITruthIdentity\u003cTSelf\u003e\r\n    where TSelf : ITruthIdentity\u003cTSelf\u003e\r\n{\r\n    static TSelf TruthyIdentity { get; }\r\n\r\n    static TSelf FalseyIdentity { get; }\r\n}\r\n```\r\nAnd then `bool` would have:\r\n```cs\r\n    public static bool operator true(bool val) =\u003e val;\r\n\r\n    public static bool operator false(bool val) =\u003e !val;\r\n\r\n    public static bool operator !(bool val) =\u003e !val;\r\n\r\n    public static bool TruthyIdentity =\u003e true;\r\n\r\n    public static bool FalseyIdentity =\u003e false;\r\n```\r\nThis would allow short-circuiting `\u0026\u0026` and `||` operators to work on anything implementing both `ITruthOperators` and `IBitwiseOperators`.\r\n\r\nHaving said that, I tried it, see [this fiddle](https://dotnetfiddle.net/xm6rsv), and for unclear reasons I got CS0217: `In order to be applicable as a short circuit operator a user-defined logical operator (\u0027IBitwiseOperators\u003cT, T, T\u003e.operator \u0026(T, T)\u0027) must have the same return type and parameter types`",
                                           "updatedAt":  "2024-06-09T23:39:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FkU0z",
                                           "createdAt":  "2024-07-20T03:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Because of the potential alignment with `Tensor\u003cbool\u003e` here, I\u0027m putting this into the 10.0.0 milestone so we make sure to consider it for the release. If that alignment with Tensor doesn\u0027t materialize though, we might move this back to Future.",
                                           "updatedAt":  "2024-07-20T03:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc616ePU",
                                           "createdAt":  "2025-07-09T10:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "@jeffhandley \nIs this going to happen for 10.0? It would help me a lot in a particular project I\u0027m working on, where I want to be able to abstract over `bool` and some other types which \"represent\" a `bool` (expression-style stuff).\n\nIt seems from [that issue in C# linked above](https://github.com/dotnet/roslyn/issues/74000) that C# definitely requires the operators to all be directly in the same interface (ie no inheritance). So I say we should change this proposal to the following:\n```cs\npublic interface ITruthOperators\u003cTSelf\u003e : IBitwiseOperators\u003cTSelf, TSelf, TSelf\u003e\n    where TSelf : ITruthOperators\u003cTSelf\u003e\n{\n    static abstract bool operator true(TSelf val);\n\n    static abstract bool operator false(TSelf val);\n\n    static abstract TSelf operator !(TSelf val);\n\n    static TSelf TruthyIdentity { get; }\n\n    static TSelf FalseyIdentity { get; }\n\n    // redeclare IBitwiseOperators functions due to the C# issue\n    static abstract TSelf operator \u0026(TSelf left, TSelf right);\n\n    static abstract TSelf operator |(TSelf left, TSelf right);\n\n    static abstract TSelf operator ^(TSelf left, TSelf right);\n\n    static abstract TSelf operator ~(TSelf value);\n}\n```\n",
                                           "updatedAt":  "2025-07-09T10:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc618huo",
                                           "createdAt":  "2025-07-09T12:46:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "System.Boolean implementing IBitwiseOperators is unlikely to be completed in .NET 10\n\nWe will not be defining a new interface that redecorates the bitwise operators, this is problematic for many reasons and would significantly hurt UX as devs wanting to support types providing such operators would now need two implementations.\n\nThe appropriate thing if you want short-circuiting to work would be to open the proposal for a language change against dotnet/csharplang as suggested by Jared in the C# issue.\n\nIt is not likely that the core libraries would provide some common interface for supporting “Boolean like types”, this isn’t something that commonly comes up or that will be particularly usable in common generic contexts. Developers are free to define their own interfaces, extension operators, and similar to support their app/library specific needs\n\n",
                                           "updatedAt":  "2025-07-09T12:46:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc618z-Q",
                                           "createdAt":  "2025-07-09T13:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "@tannergooding I actually don\u0027t think it needs re-implementation. It looks like you can just define it once per class, like other interface implementations where there are duplicate definitions.\n```cs\npublic class MyBool(bool value) : ITruthOperators\u003cMyBool\u003e\n{\n    public bool Value {get;} = value;\n\n    public static bool operator true(MyBool val) =\u003e val.Value;\n\n    public static bool operator false(MyBool val) =\u003e !val.Value;\n\n    public static MyBool operator !(MyBool val) =\u003e new(!val.Value);\n\n    public static MyBool TruthyIdentity { get; } = new(true);\n\n    public static MyBool FalseyIdentity { get; } = new(false);\n\n    public static MyBool operator \u0026(MyBool left, MyBool right) =\u003e new(left.Value \u0026 right.Value);\n\n    public static MyBool operator |(MyBool left, MyBool right) =\u003e new(left.Value | right.Value);\n\n    public static MyBool operator ^(MyBool left, MyBool right) =\u003e new(left.Value ^ right.Value);\n\n    public static MyBool operator ~(MyBool value) =\u003e new(!value.Value);\n}\n```\nSee [fiddle](https://dotnetfiddle.net/P47COG).",
                                           "updatedAt":  "2025-07-09T13:10:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc619L27",
                                           "createdAt":  "2025-07-09T13:39:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The \"reimplementation\" is the minimum `new slot` definitions that would be required in your `ITruthOperators` interface. This requires such an interface to define a DIM over the `IBitwiseOperators\u003cT, T, T\u003e` definitions.",
                                           "updatedAt":  "2025-07-09T13:39:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc619Sfk",
                                           "createdAt":  "2025-07-09T13:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "I\u0027m not sure what you mean. Yes, they are `new slot`, but they are implemented by only one function in the actual `MyBool` class.\n\nWhy is a DIM necessary here? I couldn\u0027t even find a way to explicitly implement the two interfaces with different methods, the compiler doesn\u0027t accept explicit implementations for statics, so there\u0027s no way for a class to split the implementation anyway, and to be honest I\u0027m not sure why we need to care about someone splitting the implementation.",
                                           "updatedAt":  "2025-07-09T13:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc619kXZ",
                                           "createdAt":  "2025-07-09T14:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Developers already provide methods such as:\n```csharp\npublic static void M\u003cT\u003e(T x, T y)\n    where T : IBitwiseOperators\u003cT, T, T\u003e\n{\n    ...\n}\n```\n\nIf you simply define a new `ITruthOperators` that defines its own `operator \u0026` and friends, then developers need to also expose the following. This is generally undesirable and also often not possible without getting creative with names due to inability to overload based on generic constraint.\n```\npublic static void M\u003cT\u003e(T x, T y)\n    where T : ITruthOperators\u003cT\u003e\n{\n    ...\n}\n```\n\nTherefore, `ITruthOperators` would have to expose its own `operator \u0026` in addition to implementing `IBitwiseOperators\u003cT, T, T\u003e`. This functionally creates a `new slot` and so `ITruthOperators` would want to use a DIM to ensure that the underlying `IBitwiseOperators` is still implemented and behaving correctly in all scenarios: `static TSelf IBitwiseOperators\u003cTSelf, TSelf, TSelf\u003e.operator \u0026(TSelf left, TSelf right) =\u003e left \u0026 right;`\n\nAll of this is generally undesirable compared to the language allowing the expected behavior.",
                                           "updatedAt":  "2025-07-09T14:06:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61-l7L",
                                           "createdAt":  "2025-07-09T15:28:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "\u003e so `ITruthOperators` would want to use a DIM to ensure that the underlying `IBitwiseOperators` is still implemented and behaving correctly in all scenarios\n\nI don\u0027t see how that follows from the preceding. Why does it need the DIM to enforce that, given that the implementing class can only implement the function once? You just need a `newslot` redefinition, the class will only define the function once to implement both slots. Can you give me an example where this could fall down?\n\nI totally agree that modifying the language is a much better solution. I\u0027m just putting this option out there in case the lang team make that difficult.",
                                           "updatedAt":  "2025-07-09T15:28:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61-uSk",
                                           "createdAt":  "2025-07-09T15:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e  I\u0027m just putting this option out there in case the lang team make that difficult.\n\nIt\u0027s a non-starter from the perspective of the libraries team. We do not plan on exposing such an interface in box.\n\n\u003e Why does it need the DIM to enforce that, given that the implementing class can only implement the function once?\n\nMultiple languages exist, not just C#, and many do not implicitly bind against all matching signatures like C# does. The DIM is necessary to ensure that *all* languages behave correctly in the face of such new slot definitions; otherwise developers will have to explicitly bind against both the `IBitwiseOperators` and the `ITruthOperators` interfaces, leading to additional risk and unnecessary complexity.\n",
                                           "updatedAt":  "2025-07-09T15:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61-0hV",
                                           "createdAt":  "2025-07-09T15:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "Any case, I\u0027ve got an example where it could break down. Where there is a class `Base : IBitwiseOperators\u003cBase, Base, Base\u003e` and a derived class `Derived : Base, ITruthOperators\u003cDerived\u003e`, and the implementation is different.\n\nSee [this fiddle](https://dotnetfiddle.net/F0R3As) for an example. I agree this could be problematic, and I also didn\u0027t know the behaviour of other languages re multiple interfaces. I think VB requires separate `Implements` marking for each slot IIRC.",
                                           "updatedAt":  "2025-07-09T15:46:48Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "[API Proposal]: Boolean should implement IBitwiseOperators",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104076",
        "createdAt":  "2024-06-11T08:30:12Z",
        "number":  104076,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:19:50Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"TigerUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":false,\"Mono\":true,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"LLVM:true\",\"MonoAOT:true\",\"MonoInterpreter:false\",\"RunKind:micro_mono\"]},\"RegressionDate\":\"2024-06-03T18:35:27\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_BitOperations\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[LeadingZeroCount_uint - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BitOperations.LeadingZeroCount_uint.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.BitOperations/Perf_BitOperations.cs#L19-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0pdG1Wuq9KQbRjwKDdSlfxAEKVm9w2F8V2dG1vzYT47dhpKWsnjfAS2SfnnHvs3JsRcG0JBEijn/1kdxkQsIHFPJ1AoVgcsyBVRoJpk5UGBQS7rAFxmWQVj2Ch2xnwVLcFR7lH7FOSoYHEuGoMJQuD1XE3aLKAk3CLxpY9BW2uuADv+Sa4KbUB0bqyAggT3fJvdWsMtJgN0FwXQNygkro1dIVRLr8CqXPlos4sSvM3w8TKcyUXuLQbwbfgXIkC82o3UikE31n8iwUGHT0Nnj+lHA6/jP7QycLT5JGSqn89/S/+pTRABYF7bnQLnut/CB30CWW6EQhMSM2EM3ugQg2iMGX4SN1XplGDdqn0ML8V1Qetw/+oL+QSJdThjpdqWhb1qFmpMeH5mJRQHqkr/FDOCdP3uZrzHO8rrI5s0pnUrXCxci3pxkRWPbzb1VVfAk1VsVntTsjUyW4MFwV7zVJuwE9b2Ik63YOoe3B4OI1Oe53j3lG3dXZ6chKdHb2Mol4U+RLaCsEJ74FxWs4EX4WVoU/QZC8abF7uVWhup6zpO+mzBQvOpyD1w03oI/IEtM1NTC51Gj44yRrv37ohXDqnV40mq6y8cfyOEGSal1vEX1a18ZHJvQNi/oxJxsmwOzQZC7W7PNDxVtNkq0TlVsh4P1O5xnW8DuGIBk0OcfDWXZ37r5SbrZewUOqGx3SRo4n5CnTjN878iwf5BAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 367.02 ns | 456.62 ns | 1.24 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[TrailingZeroCount_ulong - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BitOperations.TrailingZeroCount_ulong.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.BitOperations/Perf_BitOperations.cs#L79-#L89\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0pdF1augpVCqIbgw3WrXQVDyBUecltcpE/omt7aybEb8fOSlk3aYSXyD4+59wT595MgRtHIEFZ8+wnuymBgB06FPkcKs3SlEW5tgrsPjllUUK0yzokrrKy4RGszH4JPDf7kqN6QJxQVqKFzPpqDBWLo/VoGHVZxEn6RWfLXoCx51xC8HwbXdbGguydOwmEmemFU9ObAa2Wh2gvKiBuUSt/QBwFquIrkD7SPuvSCa2KvynmTh1ptcLCbSTfoiMtKxTNbqpziL6z9BeLLHp6Hj1/Snl29mX6h04OniZPtdKTi8V/8U+VBaoI/HOjW3Fh/iH00CdU+UYgMSO9lN7sngoNyMrW8SP1RNtOC9qpNmfiWjaftA3/ozlWBSpow50VelFX7ahlbTDjYkZa6oC0FZ7UV4T5B6GvuMDbBmsjmw/mbSscr31T+kFRTRfv9nXTmEALXW1WuzOy8LJLy2XF3rCcWwjzFg+SwXAvGe71+4vk9XgwGh8c9PqD4XDUH71MknGShBLGSckJb4FxKpaSr+PGMCToshcddlU/qNDdzlk3dNJnBw68T0X6h5/RR+Q5GCdsSj51Ht97kzt8cu3HsPBOrzpd1lgF4/Q9Iahc1FskXFazCZHJnwGx8I5ZycmyG7Qli42/PDDpVtNl60wLJ1X6MFN9h5v0LoQnWrQC0uidvzr/Z6k32yBhsTKdgJlKoE35GkznN2ofrzb7BAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 374.80 ns | 442.65 ns | 1.18 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[LeadingZeroCount_ulong - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BitOperations.LeadingZeroCount_ulong.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.BitOperations/Perf_BitOperations.cs#L31-#L41\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/aMBR9n7T/4LeEjUJggCakTAPWrd2gZRTtYdOETHJJPPkjurZbUk377bMDY4VKXfYS2SfnnHvs3JsZUG0RBEijn/0kdzkgkLFlPF1AoUgckyBVRoJpo5WGCQiOWWOkMskrHsJGt3OgqW4LyuQJcYRJzgwkxlUjTJIw2A56QZMEFIVbNA7sJWhzRQV4z7fBTakNiNaVFYAs0S3/VrfmgJvVmJnrApAapqRuTV1hJrOvgGqiXNSV5Upmf0MsrJwouWGZ3Su+BRMlCsar3UylEHwn8S8SGOboafD8KeV0+mX2h44WnibPlFSj6+V/8S+lASwQ3HOv21Cu/yF00Ccm071AsATVSjizByqmQRSmDB+pR8o0atAulZ7yW1F90Tr8j/pcZkxCHe48U8uyqEfNS80SyueohPJIXeFFuUaWfuBqTTm7r7A6skV3UbfC+db1pJsTWTXxcVtXjQm4VMV+dTwiSye7MVQU5A1JqQE/bmE36vbOot5Zp7OMXg+7g2G/3+oOOlHU6b+MomEU+RLaCkGR3QOhmK0E3YaVoU/QJC8aZF2eVGgexqzpO+mzBQvOp0D1w43oI/ICtOUmRpc6DR+cZIePbt0UZs7pVaNJKitvHL9HBjLl5QHxl1VtfGR07wCJP2OSUzTkjpmchNpdHuj4oGmSbaK4FTI+zVTucB3vQjiiYYZDHLxzV+d+LOV+6yUklLrhMV1wZmK6Bd34DeIPnCj6BAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 364.93 ns | 451.19 ns | 1.24 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BitOperations_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BitOperations_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BitOperations_3.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BitOperations.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_BitOperations*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_BitOperations* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_BitOperations*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_BitOperations* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_BitOperations.LeadingZeroCount_uint\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_BitOperations.TrailingZeroCount_ulong\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_BitOperations.LeadingZeroCount_ulong\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Double\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithFormat(value%3a%20-1.7976931348623157E%2b308%2c%20format%3a%20%22E%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L65-#L69\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D9ZukrCsS9PSrpWC6LZuDFYYXQQXCE1uctoY+SM6trdmQvx2nKyUfUgj3ET2m+c95/jEJzOg2iIIkEa/+EluCkAgh5bxfA6lIklCvFwZCWYfrTRMgPeQOkQqs6LhEJZ6vwCa631BmXwETjArmIHMuGyESeJ760HfC4lHUbhFsKVT0OYjFVDHfOtdVtqA6NSi7lwALq+OlV1w6KTq0iCTq6/MFCcKBTX+NeUWxmSv2xmOhoNRr9vrHwziXvf1cLrbiw5Csmy4MdmZ7gR/y5tbeaTkkq0sUsOU1N+8IyVKxpvdTOXgfSfJL+IZ5vDce/mc8/z8y+wPjhaeh2dKqsmn9L/4M2kASwT33PiWlOt/GJ30gcl8YxAsQ3UlXLB7LqZBlKbyn7gnygQtsDOlz/m1aL51G/69nsoVk9CGvViptCrboUWlWUb5BSqhaqWt8V21QJafcrWgnN02WhvbPJ63zTBdl4BugmRzvR9e+CPlpgswVeVm9XB4Ume7NFSU5A3JqYF6EP04ivt7UX+v202jg3E8HHfjTjTqRYNRvBtF4yiqU2grBEV2C4Ti6krQtd8ErCsIyauALKpHGcLtAIb1TfpswYKLU6L64Yb3CTwHbblJ0FWd+/dOcqdPrgHpykXqBSFpQtWBkxNkIHNebZW6Wc2mLhndO0BSnzErKBpy40ac+No1D3Sy9YRknSluhUwe11Td6Tq5K8KBhhkOiXfsWud+OdVmW1uIL3VQa7rkzCR0DTr4DQIofFUUBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 222.68 ns | 257.90 ns | 1.16 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22R%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L65-#L69\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJAlmXpmVDlYLoPhmsMLoIHhCa3OS2MfJHdG1vzYT47dhZKWsnjfAS2SfnnHt945MJUG0RBEijn/0ktxUgkEPLeDmFWpEsI0GpjASzh1YaJiDYZB0ilUXV8hDmeq8CWuo9QZncIo6xqJiBwrhqhEkSBsv9YRCTgKJwi2jNzkGbj1SA93wbXDXagOh5UPcuAefXx8rOOPRydWWQycVXZqpThYKa8IZyCyPSTwfDVzGZt+CI7Ex3or+9TK08UnLOFhapYUrqb8GREjXj7W6iSgi+k+wXCQxz9DJ4/pTy4uLL5A8dLTxNniipxp/y/+KfSwNYI7jnSjenXP9D6KAPTJYrgWAFqmvhzB6omAZRmyZ8pB4rE3WgnSt9wW9E+2G78N/rE7lgErpwLxcqb+pu1KrRrKD8EpVQHukqfNfMkJVnXM0oZ3ct1kU2TaddK5wsa0AXF9ne5c3bfaRclABzVa9Wm0nJnezKUFGTN6SkBnzqwjRJh7vJcLffz5PXo/Rg1E976WA/SQ8GL5NklCS+hLZCUGR3QCgurgVdhq2h7yAmLyIya7YqxOu0xf4mfbZgwfnUqH64pD4iT0FbbjJ0XZfhg5Pc4+MbQLpwToMoJq2VN85OkYEsebNG/LDajW8Z3TtA4s9YVBQNuXV5JqF2wwOdrTUxWRaKWyGz7Z6ae1xn9004omGGQxYcu9G5/0uz2noJCaWOPKZrzkxGl6Cj336TgXEBBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 140.90 ns | 171.83 ns | 1.22 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithCultureInfo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithCultureInfo(value%3a%2012345%2c%20culture%3a%20zh).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L56-#L60\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0JZF2alQ0qBdF1GwxaGF0EDwhNbnLbGPkjura3pkL8duy0lH1II7xE9vE55147Pp4C1RZBgDT6yU9yUwECObaMlzOoFckyEpTKSDD7aKVhAoK7rGOksqhaHsJC71dAS70vKJP3iCMsKmagMK4aYZKEwepwEMQkoCjcINqxc9DmIxXgPd8El402IHoe1L0LwMXVibJzDr1cXRpkcvmVmWpsubc9lwsVXlNuYUj66cHgRUyKzcqQrKvob0MzK8dKLtjSIjVMSf0tGCtRM97OpqqE4DvJfpHAMEcvg6ePKSeTL9M/dLTwOHmqpBp9yv+Lfy4NYI3gvlvdgnL9D6GDPjBZbgWCFaiuhDO7pWIaRG2a8IF6pEzUgXau9IRfi/bvduG/16dyySR04V4sVd7U3ahVo1lB+QUqoTzSVfiumSMr33I1p5ytW6yLbJbOulY4XdWALjOyvdB3r/hYuTwB5qreju7GJXeyS0NFTV6Tkhrw0QvTJB3sJYO9fj9PXg7To2E/7R0cpunR4NXzJBkmiS+hrRAU2RoIxeWVoKuwNfQdxORZRObNvQrxLnKxv0mfLVhwPjWqHy6uD8gz0C5UGbquy/DWTjb46BqQLp3TQRST1sobZ2fIQJa82SH+sNqJbxndGiDxeywqiobcuFCTULvDA53tNDFZFYpbIbP7PTUbXGebJhzRMMMhC07c0blHptlOvYSEUkce0zVnJqMr0NFvDP5PuQYFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 138.38 ns | 169.57 ns | 1.23 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithFormat(value%3a%201.7976931348623157E%2b308%2c%20format%3a%20%22G%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L65-#L69\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D9ZukrCsS9JuXSsF0Y1tDFYYXQQXCE1uctoY+SM6trdmQvx2nKyUfUgj3ET2m+c95/jEJ1Og2iIIkEa/+EluSkAgh5bxYgaVImlKvEIZCWYXrTRMgPeQOkQq87LlEBZ6twRa6F1BmXwETjAvmYHcuGyESeJ7q/2BFxKPonCLYENnoM1HKqCJ+ca7rLUB0WtE3bsAXFy9VXbOoZepS4NMLr8yU54oFNT415RbGJO4NxwN90f9uD842E/68d7weLsfHYRk0WJjsnW6FfytbmblkZILtrRIDVNSf/OOlKgYb3dTVYD3naS/iGeYwwvv5XPO8/Mv0z84WngeniqpJp+y/+LPpAGsENxz7VtQrv9hdNIHJou1QbAc1ZVwwe65mAZRmdp/4p4oE3TAzpQ+59ei/dRd+Pf6WC6ZhC7sxVJlddUNLWvNcsovUAnVKF2N7+o5suKUqznl7LbVuthmyaxrhuNVBegGSLa3++F9P1JuuAAzVa1XD2cnc7ZLQ0VFXpOCGmjm0E+iZLATDXbiOIsOxslwHCe9wSgejvaS7SgaR1GTQlshKLJbIBSXV4Ku/DZgU0FIXgVkXj/KEG7mL2xu0mcLFlycCtUPN7tP4Bloy02KrurCv3eSO31yDUiXLlI/CEkbqgmcniADWfB6ozTNajdNyejeAZLmjHlJ0ZAbN+HE1655oNONJySrXHErZPq4pvpO1+ldEQ40zHBIvbeude6PU6+3jYX4UgeNpivOTEpXoIPfPIxbgRMFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 281.70 ns | 319.75 ns | 1.14 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithCultureInfo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithCultureInfo(value%3a%20-1.7976931348623157E%2b308%2c%20culture%3a%20zh).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L56-#L60\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0Jy7o07dqtUhBdt8FghdJF8IDQ5Ca3jZE/omtnaybEb8dOS9mHNMJLZJ+cc+71jU+mQHWFIEAa/eInuS0AgZxUjOdzKBVJEuLlykgwB1hJwwR4D1knSGVWNDyEpT4ogOb6QFAmHxHHmBXMQGZsNcIk8b31oO+FxKMo7CLYsVPQ5iMV4DzfeFe1NiA6DtSdGeDy+lRVCw6dVF0ZZHL1lZliUnFneyGXyr+hvIIR2e92hsfDwXGv2+sfDeJe93B4tteLjkKSbcgjclcEf3ucV3Ki5JKtKqSGKam/eRMlSsab3VTl4H0nyS/iGWbpuffyOeXl5ZfpHzpW8Dx5qqQaf0r/i38hDWCJYJ9b3ZJy/Q+hhT4wmW8FgmWoroU1u6diGkRpav+JeqxM0IJ2ofQlvxHNB2/Df6/P5IpJaMOdrVRal+2oRa1ZRvkMlVAOaSt8Vy+Q5W+5WlDO7hqsjWwez9tWOFuXgDZGsrnjD2/9RNmIAaaq3K4eJii1sitDRUlek5wacGn04yju70f9/W43jY5G8XDUjTuDOD4+HPT3omgURa6EroSgyO6AUFxdC7r2G0PXQUheBWRRP6oQ7lIYupv0uYIKrE+J6odN8BPyHLQNVYK269y/d5INPr4BpCvr1AtC0lg54+QcGcic1zvEDavZuJbRvgMk7oxZQdGQW5tz4ms7PNDJThOSdaZ4JWTyuKd6g+tk04QlGmY4JN6pHZ3979TbrZMQX+rAYbrkzCR0DTr4DdN3/aEZBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 293.86 ns | 324.00 ns | 1.10 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L48-#L51\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D75LAl2bdh2bKgXRfQCDFkobcYNQ5SanjZE/omO7aybEb8dOS1k7aYSbyH7zvOccn/hkDFRbBAHS6Gc/yV0BCOTSMp5PoVQkSUiQKyPBdNBKwwQEh9QlUpkVNYew1J0CaK47gjJ5BA4xK5iBzLhshEkSBptX/aBFAorCLaI9nYI2n6gAH/NNMKu0AdH2om5PAJfza2UXHNqpmhlkchWuKbcwIN3eaf8s+pt0auWVkku2skgNU1J/C66UKBmvd2OVQ/CdJL9IYJjD8+D5U87R6Ov4D44WnobHSqrh5/S/+FtpAEsE99z5lpTrfxid9JHJfGcQLEM1Fy7YAxfTIEpThY/cQ2WiBtit0iO+FvUXbMJ/0DdyxSQ0YScrlVZlM7SoNMson6ASyitNje+rBbL8HVcLytl9rTWxTXvTphluNiWgmwtZX9rDa3yl3MwApqrcrQ5HInW2maGiJK9JTg348Qp7ca9/EvdPut00vhj0zgfdXvv8LL6I4/7LOB7EsU+hrRAU2T0Qiqu5oJuwDugraJEXEVlURxla+7Fq+Zv0xYIFF6dE9cON5CN4Ctpyk6CrOg8fnGSrD9eAdOUinUYtUofygZO3yEDmvNorvln1xpeM7h0g8WfMCoqG3DFTkFC75oFO9p4W2WSKWyGT45qqra6TbREONMxwSIJr1zr3I6l2W28hodSR13TJmUnoBnT0G6j/P9fqBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 140.93 ns | 172.84 ns | 1.23 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22E%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L65-#L69\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUa2/TMBT9jsR/sPYlCWRd2nUPKgXRvWDQwmgj+IDQ5Ca3jZEf0bXdNRPit2OnpewhjfAlsk/OOff6xidjoNoiCJBGP/tJbkpAICeW8WIClSJpSoJCGQlmD600TEBwn3WCVOZlw0OY670SaKH3BGXyAXGIeckM5MZVI0ySMFgd9oOYBBSFW0RbdgbafKQCvOebYFprA6LjQd25Apxfnyk749DJ1NQgk4uvzJQXCgU14ZJyCwPS7e33D2Iyb8AB2Tnfif72MrHyVMk5W1ikhimpvwWnSlSMN7uxKiD4TtJfJDDM0Yvg+VPK0ejL+A8dLTxNHiuphp+y/+JfSgNYIbjnRjenXP9D6KAPTBYbgWA5qmvhzO6omAZRmTp8pB4qE7WgXSo94kvRfNg2/Pf6XC6YhDbcq4XK6qodtaw1yym/QiWUR9oK39UzZMVbrmaUs9sGayOb9CZtK5yvKkAXF9nc5fu3+1S5KAFmqtqs7iclc7KpoaIir0lBDfjUhb2k199N+rvdbpYcD3pHg26vc3x0tH/46uBlkgySxJfQVgiK7BYIxcW1oKuwMfQdxORFRGb1gwrxNm2xv0mfLVhwPhWqHy6pj8gT0JabFF3XRXjnJGt8uASkC+e0H8WksfLG6QUykAWvt4gfVrPxLaN7B0j8GfOSoiE3Ls8k1G54oNOtJiarXHErZPqwp3qN63TdhCMaZjikwZkbnfu/1Jutl5BQ6shjuuLMpHQFOvoNkSML1gEFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 204.85 ns | 242.46 ns | 1.18 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToString(value%3a%201.7976931348623157E%2b308).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L48-#L51\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D75LwrouaUq7VQqi+4LBCqOLuEFocpPTxsgf0bG9NRPit2NnpexDGuEmst887znHJz6ZAdUWQYA0+sVPclMBAjm0jJdzqBXJMhKUykgwe2ilYQKCh9QhUllULYew1HsV0FLvCcrkI3CKRcUMFMZlI0ySMFiPhkGPBBSFW0RbOgdtPlEBPubb4LLRBkTfi7p/Abi8OlZ2waGfq0uDTK7Ca8otTEjSHx+MRwdpkg73R4M0eT0+2Unj/ehvGXMrj5RcspVFapiS+ltwpETNeLubqRKC7yT7RQLDHF4GL59znp9/nf3B0cLz8ExJNf2c/xd/Jg1gjeCeG9+Scv0Po5M+MlluDIIVqK6EC3bPxTSI2jThE/dUmagDdqb0Ob8W7Tftwn/QJ3LFJHRhL1Yqb+puaNVoVlB+gUoor3Q1vm8WyMp3XC0oZ7et1sU2H8y7ZjhZ14BuUmR7jR9e7CPlpggwV/Vm9XBIcme7NFTU5A0pqQE/cOEgHgx34+FukuTx/mQwniRpP04ORnE62InjSRz7FNoKQZHdAqG4uhJ0HbYBfQU98ioii+ZRht520Hr+Jn2xYMHFqVH9cEP6BJ6Dttxk6Kouw3snudOn14B05SKlUY+0oXzg7BQZyJI3W8U3q934ktG9AyT+jEVF0ZAbZioSatc80NnW0yPrQnErZPa4puZO19ldEQ40zHDIgmPXOvdraTZbbyGh1JHXdM2ZyegadPQb/t+pS/wEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 283.86 ns | 329.50 ns | 1.16 | 0.04 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Double.ToStringWithFormat(value%3a%201.7976931348623157E%2b308%2c%20format%3a%20%22R%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Double.cs#L65-#L69\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D9ZukrCsS5qybpWC6LZuDFYYXQQXCE1uctoY+SM6drZmQvx27KyUfUgj3ET2m+c95/jEJ1OgukYQII1+8ZPclIBADmvGixlUiqQp8QplJJhdrKVhAryH1CFSmZcth7DQuyXQQu8KyuQjcIx5yQzkxmYjTBLfW+0NvJB4FIVdBBs6A20+UgEu5lvvstEGRM+JuncBuLg6VvWcQy9TlwaZXH5lpjxRKKjxrymvYUTi3vBguHeQxMlgf6+fxK+Hk+0k2g/JosVGZGu2FfytblbLIyUXbFkjNUxJ/c07UqJivN1NVQHed5L+Ip5hFi+8l885z8+/TP/gWMPz8FRJNf6U/Rd/Jg1ghWCfa9+Ccv0Po5U+MFmsDYLlqK6EDXbPxTSIyjT+E/dYmaADdqb0Ob8W7afuwr/XE7lkErqwF0uVNVU3tGw0yym/QCWUU7oa3zVzZMUpV3PK2W2rdbHN+rOuGSarCtAOkGxv98P7fqTscAFmqlqvHs5OZm2XhoqKvCEFNeDm0O9H/cFONNiJ4yzaH/WHozjpxcMk7kcH21E0iiKXQtdCUGS3QCgurwRd+W1AV0FIXgVk3jzKEG7mL3Q36XMNNdg4FaofdnafwDPQNTcp2qoL/95J7vTxNSBd2khJEJI2lAucniADWfBmo7hmtRtXMtp3gMSdMS8pGnJjJ5z42jYPdLrxhGSVK14LmT6uqbnTdXpXhAUNMxxS79i2zv5xmvXWWYgvdeA0XXFmUroCHfwGj0VVYhMFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 284.34 ns | 319.48 ns | 1.12 | 0.02 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_4.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_5.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_6.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_7.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_8.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double_9.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Double.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Double*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Tests.Perf_Double* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Double*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Tests.Perf_Double* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Double.ToStringWithFormat(value: -1.7976931348623157E+308, format: \"E\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithFormat(value: 12345, format: \"R\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithCultureInfo(value: 12345, culture: zh)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithFormat(value: 1.7976931348623157E+308, format: \"G\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithCultureInfo(value: -1.7976931348623157E+308, culture: zh)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithFormat(value: 12345, format: \"E\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToString(value: 1.7976931348623157E+308)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Double.ToStringWithFormat(value: 1.7976931348623157E+308, format: \"R\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Single\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%203.4028235E%2b38%2c%20format%3a%20%22G17%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJwrIua8vWVQqiG/uCFkobwQNClZvcNkb+iK6drZkQvx07K2XtpBFeIvv4nHOvHR+PgOoSQYA0+sVPcpcDAjkrGc8mUCgSx8TLlJFgDrGUhgnwtllnSGWa1zyEhT7MgWb6UFAmd4gDTHNmIDW2GmGS+N7quOuFxKMo7CDYsBPQ5iMV4DzfetNKGxAtB+rWGHAxmzK55NBK1NSgHX5lJr9UKKjxbykvoU86rW7U7rU7ry/2O72QLOrFPtm7OjrZC/52NSnluZILtiyRGqak/uadK1EwXs9GKgPvO4l/Ec8wS8+8l88ph8Mvoz90LOF58khJNfiU/Bf/RhrAAsF+17oF5fofQgt9YDJbCwRLUc2ENXukYhpEYSr/iXqgTNCAdqP0kN+K+hc34b/XF3LJJDThjpcqqYpm1LzSLKV8jEoohzQVXldzZNkVV3PK2X2NNZFN2pOmFS5WBaANjqxv9fY9P1c2VICJKtaj7cwkVjY1VBTkDcmoAZc/vx21uwdR9+DoKIl6/fZJv3vcOrXYaa+3H0X9KHIldCkERXYPhOJyJujKrw1dByF5FZB5tVMh3OQudDfpcwklWJ8C1Q+b2SfkCeiSmxht15n/aCcP+OAWkC6tUycISW3ljONLZCAzXm0Qd1j1xLWMdg2QuD2mOUVD7myyia/t4YGON5qQrFLFSyHj3Z6qB1zHD01YomGGQ+y9s0dnX5pqPXUS4ksdOEwXnJmYrkAHvwGv9AEfCwUAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 252.50 ns | 288.20 ns | 1.14 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%203.4028235E%2b38%2c%20format%3a%20%22E%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJwrI2SwsrlYLoRgeDFUYbwQNCk5vcNkb+iK6drpkQvx07LWXdpBFeIvv4nHOvHR9PgOoKQYA0+slPclMAAjmtGM+nUCqSJMTLlZFgulhJwwR4+6xTpDIrGh7CQncLoLnuCsrkPeIIs4IZyIytRpgkvrd+0fdC4lEUdhDs2Clo85EKcJ6vvVmtDYiOA3XnCnBxPWNyyaGTqplBO/zKTHGuUFDjryivYEh6nX4UD+Le8/FhbxCSRbM4JAfjg+BvT9NKnim5YMsKqWFK6m/emRIl481sonLwvpPkF/EMs/Tce/qY8vLyy+QPHSt4nDxRUo0+pf/Fv5AGsESw361uQbn+h9BCH5jMtwLBMlTXwprdUTENojS1/0A9UiZoQbtQ+pKvRPOD2/Df67FcMgltuFdLldZlO2pRa5ZRfoVKKIe0Fb6r58jyt1zNKWe3DdZGNo2nbSuM1yWgjY1s7vT+LT9TNlKAqSq3o/3EpFY2M1SU5BXJqQGXPj+O4v5R1D86Pk6jwTA+GfZPOlHvZTwYDA6jaBhFroSuhKDIboFQXF4LuvYbQ9dBSJ4FZF7fqxDuUhe6m/S5ggqsT4nqh03sA/IUdMVNgrbr3L+zkw0+WgHSpXXqBSFprJxxco4MZM7rHeIOq5m4ltGuARK3x6ygaMiNzTXxtT080MlOE5J1pnglZHK/p3qD62TThCUaZjgk3ht7dPadqbdTJyG+1IHDdMmZSegadPAbaoPlHgkFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 192.62 ns | 236.71 ns | 1.23 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToString(value%3a%20-3.4028235E%2b38).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L46-#L49\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D75Lwro2TcNWVQqiKwMGK5Q24gahyk1OGyN/RMdO10yI346dlrIPaYSb6PjN855z7PhkClRXCAKk0c9+kpsCEMhFxXg+h1KRJCFerowE08NKGibAu09dIJVZ0XAIa90rgOa6JyiTD8AxZgUzkBlbjTBJfG93Fnsd4lEUNgiOdArafKICXM7X3qLWBkTXibo7A1wvF0xuOHRTtTBoQ39LeQUjcjroxmE0jAYvL08Gw+Bv9XklJ0qu2aZCapiS+ps3UaJkvFlNVQ7ed5L8Ip5hFs+95085r6+/Tv/gWMHT8FRJNf6c/hd/JQ1giWCfB9+acv0Po5U+MpkfDIJlqJbCJrvjYhpEaWr/kXusTNACu1L6mm9F8ynb8B/0pdwwCW3Y2UalddkOLWrNMspnqIRySlvj+3qFLH/H1YpydttobWzzaN62wuWuBLQDIpvbe/8+T5QdHsBUlYfo/myk1rYwVJTkFcmpATdnfhRG8WkYn/b7aTgcReej+LzbPxvG0SA+CcNRGLoSuhKCIrsFQnGzFHTnNwldBx3yIiCr+kGFznG+Ou4mfamgApunRPXDzuYjeA664iZB23Xu39nJXh9vAenGZhoEHdKkcomTt8hA5rw+Ku6wmoVrGe07QOL2mBUUDblhpiC+tocHOjl6OmSXKV4JmTzsqd7rOtk3YUHDDIfEe2OPzv5R6sPSWYgvdeA0XXJmEroDHfwGITU9MPMEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 206.54 ns | 248.95 ns | 1.21 | 0.04 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%203.4028235E%2b38%2c%20format%3a%20%22R%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJwrI2awMrlYLoRgeDFUYbwQNCk5vcNkb+iK6drpkQvx07LWXdpBFeIvv4nHOvHR9PgOoKQYA0+slPclMAAjmtGM+nUCqSJMTLlZFgulhJwwR4+6xTpDIrGh7CQncLoLnuCsrkPeIIs4IZyIytRpgkvrd+EXsh8SgKOwh27BS0+UgFOM/X3qzWBkTHgbpzBbi4njG55NBJ1cygHX5lpjhXKKjxV5RXMCT9Thz1Br3+8/FhfxCSRbM4JAfTg+BvT9NKnim5YMsKqWFK6m/emRIl481sonLwvpPkF/EMs/Tce/qY8vLyy+QPHSt4nDxRUo0+pf/Fv5AGsESw361uQbn+h9BCH5jMtwLBMlTXwprdUTENojS1/0A9UiZoQbtQ+pKvRPOD2/Df67FcMgltuFdLldZlO2pRa5ZRfoVKKIe0Fb6r58jyt1zNKWe3DdZGNu1N21YYr0tAGxvZ3On9W36mbKQAU1VuR/uJSa1sZqgoySuSUwMufX4v6sVHUXx0fJxGg2HvZBifdPpRFL+M+4dRNIwiV0JXQlBkt0AoLq8FXfuNoesgJM8CMq/vVQh3qQvdTfpcQQXWp0T1wyb2AXkKuuImQdt17t/ZyQYfrQDp0jr1g5A0Vs44OUcGMuf1DnGH1Uxcy2jXAInbY1ZQNOTG5pr42h4e6GSnCck6U7wSMrnfU73BdbJpwhINMxwS7409OvvO1NupkxBf6sBhuuTMJHQNOvgNbH8SzAkFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 201.52 ns | 247.55 ns | 1.23 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22R%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJAlmbdek2KgXRlW0MWihtBA8ITV5y2xj5I7p2umZC/HbstJR9SCO8RNcn55x77fhkAlRXCAKk0c9+kpsCEMhpxXg+g1KRJCFerowE08VKGibAu886RSqzouEhLHS3AJrrrqBMPiAOMSuYgczYboRJ4nvro9gLiUdR2CLYsVPQ5iMV4DzfePNaGxAdB+rOFHBxNWdyyaGTqrlBW35lpjhXKKjxV5RXMCAHvcO4H5JFAw7I3mwv+DvLrJIjJRdsWSE1TEn9zRspUTLerCYqB+87SX4RzzBLz73nTynH4y+TP3Ss4GnyREk1/JT+F/9SGsASwT63ugXl+h9CC31gMt8KBMtQXQlrdkfFNIjS1P4j9VCZoAXtUukxX4nmw7bhv9dncskktOFOlyqty3bUotYso3yKSiiHtBW+q6+R5RdcXVPObhusjWzWm7XtcLYuAW1cZHOX79/ukbJRAkxVua3uJyW1srmhoiSvSU4NuNT5vagX70fx/sFBGp0MeseD+LgTx/3+0cmrl1E0iCLXQldCUGS3QCgurwRd+42hmyAkLwJyXT/oEO7SFrqb9LmCCqxPieqHTeoj8gx0xU2Cdurcv7OTDT5cAdKldToMQtJYOePkHBnInNc7xB1Ws3Ajo30HSNwes4KiITc2z8TX9vBAJztNSNaZ4pWQycOZ6g2uk80QlmiY4ZB4b+3R2f9LvV06CfGlDhymS85MQtegg9+EcWsyAQUAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 142.06 ns | 179.25 ns | 1.26 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22G17%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJAlmXdt06KgXRjW0MWihtBA8IVV5y2xj5I7p2umZC/HbstJS1k0Z4ia5Pzjn32vHJCKguEQRIo5/9JHc5IJDzkvFsAoUicUy8TBkJ5ghLaZgAb5d1jlSmec1DmOujHGimjwRlco84wDRnBlJjuxEmie+tTrteSDyKwhbBlp2ANh+pAOf5xptW2oBoOVC3xoDz2ZTJBYdWoqYGbfmVmfxKoaDGX1JeQp+0O8fdk5DMa7BPDq7bvYPg7zSTUl4oOWeLEqlhSupv3oUSBeP1aqQy8L6T+BfxDLP0zHv+lHI4/DL6Q8cSniaPlFSDT8l/8W+kASwQ7HOjm1Ou/yG00Acms41AsBTVTFizByqmQRSm8h+pB8oEDWg3Sg/5UtSftgn/vb6UCyahCXe8UElVNKPmlWYp5WNUQjmkqfBddYssu+bqlnJ2X2NNZJPOpGmHy1UBaAMj69u8e78vlA0TYKKKTbWblcTKpoaKgrwmGTXgcud3ok73MOoetttJdNbv9PrdXuvkVees1zt9GUX9KHItdCkERXYPhOJiJujKrw3dBCF5EZDbaq9DuM1b6G7S5xJKsD4Fqh82q4/IE9AlNzHaqTP/wU7W+GAJSBfW6TgISW3ljOMrZCAzXm0Rd1j1wo2M9h0gcXtMc4qG3NlEE1/bwwMdbzUhWaWKl0LG+zNVa1zH6yEs0TDDIfbe2qOzf5hqs3QS4ksdOEwXnJmYrkAHvwHvIfXdAwUAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 231.39 ns | 266.11 ns | 1.15 | 0.07 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22G%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJAlmXdqGDSkF0YxuDFUobwQNCk5fcJkb+iK6drpkQvx07LWXdpBFeouuTc869dnwyAaprBAHS6Cc/yU0JCOS4ZjyfQaVIkhAvV0aCOcBaGibA22UdI5VZ2fIQFvqgBJrrA0GZvEccY1YyA5mx3QiTxPdWw9gLiUdR2CLYslPQ5iMV4DzfePNGGxA9B+reFHBxNWey4NBL1dygLb8yU54pFNT4S8prGJH+4DB+EZJFC47I3vle8HeWWS1PlFywokZqmJL6m3eiRMV4u5qoHLzvJPlFPMMsPfeePqa8vPwy+UPHGh4nT5RU40/pf/EvpAGsEOxzo1tQrv8htNAHJvONQLAM1ZWwZndUTIOoTOM/UI+VCTrQLpS+5EvRftgu/Pf6VBZMQhfutFBpU3Wjlo1mGeVTVEI5pKvwXXONLD/n6ppydttiXWSzwaxrh9NVBWjjItu7vHu7T5SNEmCqqk21m5TUyuaGioq8Jjk14FLnD6JBvB/F+/1+Gr0cDY5G8VHv6DDuvxoOn0fRKIpcC10LQZHdAqFYXAm68ltDN0FIngXkurnXIdymLXQ36XMNNVifCtUPm9QH5BnompsE7dS5f2cna3y8BKSFdToMQtJaOePkDBnInDdbxB1Wu3Ajo30HSNwes5KiITc2z8TX9vBAJ1tNSFaZ4rWQyf2ZmjWuk/UQlmiY4ZB4b+3R2f9Ls1k6CfGlDhymK85MQlegg98COAruAQUAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 148.60 ns | 180.38 ns | 1.21 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithCultureInfo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithCultureInfo(value%3a%2012345%2c%20culture%3a%20zh).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L54-#L58\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0JZF2alXVUCqIrGwxaGG0EDwhNXnKbGPkjuna2ZkL8duy0lLWTRniJ7ONzzr12fDwDqmsEAdLoJz/JbQkI5LRmPJ9DpUiSEC9XRoI5xFoaJsDbZZ0ilVnZ8hCW+rAEmutDQZncI44xK5mBzNhqhEnie6vjgRcSj6Kwg2DLTkGbj1SA83ztLRptQPQcqHuXgMurBZMFh16qFgbt8Csz5aTmzvZCLpV/Q3kNI9KPjwYvQpKtV0bkrgz+NjSv5UTJJStqpIYpqb95EyUqxtvZTOXgfSfJL+IZZum59/Qx5XT6ZfaHjjU8Tp4pqcaf0v/iX0gDWCHY70a3pFz/Q2ihD0zmG4FgGaorYc3uqZgGUZnGf6AeKxN0oF0oPeU3ov27Xfjv9ZksmIQu3MtCpU3VjVo2mmWUX6ISyiFdhe+aa2T5W66uKWd3LdZFNo/nXSucrSpAmxnZXujdKz5RNk+Aqao2o924pFa2MFRU5BXJqQEXPT+O4sFBNDjo99PoZBQPR4Nh72QY90+OXz6PolEUuRK6FoIiuwNCsbgSdOW3hq6DkDwLyHWzVyHcRi50N+lzDTVYnwrVDxvXB+Q5aBuqBG3XuX9vJ2t8fANIC+t0FISktXLGyTkykDlvtog7rHbiWka7BkjcHrOSoiG3NtTE1/bwQCdbTUhWmeK1kMl+T80a18m6CUs0zHBIvDf26Owj02ymTkJ8qQOH6Yozk9AV6OA3R6VTxwYFAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 141.18 ns | 170.30 ns | 1.21 | 0.05 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToString(value%3a%203.4028235E%2b38).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L46-#L49\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D75Lwro2SwrrKgXRlQ4GLZQ24gahyU1OGyN/RMdO10yI346dlbIPaYSb6PjN855z7PhkBlRXCAKk0c9+kusCEMh5xXi+gFKRJCFerowE08NKGibAu0+dI5VZ0XAIa90rgOa6JyiTD8ARZgUzkBlbjTBJfG/3qu91iEdR2CA40Clo84kKcDnfeMtaGxBdJ+ruHHB9tWRyw6GbqqVBG/pbyisYkrjbD6NBFL+cHMWD4G/xRSXHSq7ZpkJqmJL6mzdWomS8Wc1UDt53kvwinmEWz73nTzmn06+zPzhW8DQ8U1KNPqf/xV9KA1gi2Ofet6Zc/8NopY9M5nuDYBmqK2GT3XExDaI0tf/IPVImaIFdKj3lW9F8yTb8Bz2RGyahDTvfqLQu26FFrVlG+RyVUE5pa3xfr5Dl77haUc5uGq2NbREt2laY7EpAOx+yubz3r/NY2dkBTFW5j+6PRmptS0NFSV6TnBpwY+ZHYdQ/DvvHJydpOBhGp8P+affsbBBH/fgoDIdh6EroSgiK7AYIxc2VoDu/Seg66JAXAVnVDyp0DuPVcTfpSwUV2Dwlqh92NB/BC9AVNwnarnP/zk5u9dEWkG5spjjokCaVS5xcIAOZ8/qguMNqFq5ltO8AidtjVlA05JqZgvjaHh7o5ODpkF2meCVk8rCn+lbXyW0TFjTMcEi8t/bo7A+l3i+dhfhSB07TJWcmoTvQwW/8W3Bf8gQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 199.01 ns | 239.20 ns | 1.20 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringWithFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%20-3.4028235E%2b38%2c%20format%3a%20%22G%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L63-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/WHtJwrIuTcuoKgXRjW0MWhhtBA8IVW5y2xj5I7p2umZC/HbsrJR1k0Z4iezjc869dnw8AaorBAHS6Gc/yU0BCOS0YjyfQqlIkhAvV0aCOcZKGibA22edIpVZ0fAQlvq4AJrrY0GZfEAcYVYwA5mx1QiTxPc2J30vJB5FYQfBjp2CNh+pAOf5xpvV2oDoOFB3rgGX8xmTKw6dVM0M2uFXZooLhYIaf015BUNy1Ov0o3gQ916eH/YGIVk2q0NycHkQ/G1qWskzJZdsVSE1TEn9zTtTomS8mU1UDt53kvwinmGWnnvPn1KOx18mf+hYwdPkiZJq9Cn9L/6VNIAlgv1udUvK9T+EFvrAZL4VCJahmgtrdk/FNIjS1P4j9UiZoAXtSukxX4vmD7fhv9fncsUktOFer1Ral+2oRa1ZRvk1KqEc0lb4rl4gyy+5WlDObhusjWwaT9tWON+UgDY3srnU+9f8TNlMAaaq3I72I5Na2cxQUZLXJKcGXPz8OIr7R1H/qNtNo8EwfjXsDzrdXhx1T+LDKBpGkSuhKyEoslsgFFdzQTd+Y+g6CMmLgCzqBxXCXexCd5M+V1CB9SlR/bCRfUSegq64SdB2nfv3dnKHj9aAdGWdekFIGitnnFwgA5nzeoe4w2omrmW0a4DE7TErKBpyY4NNfG0PD3Sy04RkkyleCZk87Km+w3Vy14QlGmY4JN5be3T2oam3UychvtSBw3TJmUnoBnTwG4GSw1cKBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 208.50 ns | 250.74 ns | 1.20 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Single.cs#L46-#L49\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCXRtlpatqhREV8YYtFDaiDcIVW5ybYz8Jzo7XTMhPjt2WsraSSO8ic5Pfs/d2fFlAlSXCAKk0c9+krscEMhVyXg2g0KROCZepowE08FSGibAO6aukMo0rzmEle7kQDPdEZTJE3CIac4MpMZWI0wS39te9LwW8SgKGwQHOgFtPlEBLucbb15pA6LtRN2eAq4WcybXHNqJmhu0ob+hvIQBOY+6vVfB36KzUo6UXLF1idQwJfU3b6REwXi9mqgMvO8k/kU8wyyeec+fco7HXyd/cCzhaXiipBp+Tv6Lv5UGsECwz71vRbn+h9FKH5nM9gbBUlQLYZM9cDENojCV/8g9VCZogN0qPeYbUX/BJvwHfS3XTEITdrpWSVU0Q/NKs5TyKSqhnNLU+L5aIstuuFpSzu5rrYltFs2aVrjeFoB2LmR9aY+v8UjZmQFMVLGPjkcisba5oaIgr0lGDbjx8qMw6p2FvbPz8yTsD6LLQa/fji7D6KLffRmGgzB0JXQpBEV2D4TieiHo1q8Tug5a5EVAltVJhdZhrFruJn0poQSbp0D1w47kI3gGuuQmRtt15j/YyU4fbgDp2mbqBi1Sp3KJ43fIQGa8OijusOqFaxntO0Di9pjmFA25YyYnvraHBzo+eFpkmypeChmf9lTtdB3vmrCgYYZD7L21R2d/JNV+6SzElzpwmi44MzHdgg5+AxzH9NPqBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 139.45 ns | 172.92 ns | 1.24 | 0.03 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_4.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_5.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_6.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_7.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_8.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_9.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_10.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single_11.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Single.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Single*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Tests.Perf_Single* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Single*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Tests.Perf_Single* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Single.ToStringWithFormat(value: 3.4028235E+38, format: \"G17\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: 3.4028235E+38, format: \"E\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToString(value: -3.4028235E+38)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: 3.4028235E+38, format: \"R\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: 12345, format: \"R\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: 12345, format: \"G17\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: 12345, format: \"G\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithCultureInfo(value: 12345, culture: zh)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToString(value: 3.4028235E+38)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToStringWithFormat(value: -3.4028235E+38, format: \"G\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Single.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkCC1SQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhS0",
                                           "createdAt":  "2024-06-11T08:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Benchstone.BenchI.Ackermann\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Test - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/Benchstone.BenchI.Ackermann.Test.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Benchstones/BenchI/Ackermann.cs#L26-#L33\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCWRtWlpWVQqiLQMKLYwQ8QahyU2ujcF/orOzNRPis2OnpaydNMKb6Hz5Pc+dHV+WQHWFIEAa/egnuSkAgUwrxvMESkXimHi5MhJMFytpmADvmJoilVnRcAhr3S2A5rorKJMn4ASzghnIjK1GmCS+t30+8ELiURQ2CA50Ctp8oAKc50tvCtZeGyWh04TzziT7ASiolB1H/q2SVHKm5JptKqSGKam/ejMlSsab1VLl4H0j8S/iGWbx3Hv8kHKx+LL8g2MFD8NLJdXkY/pf/FwawBLBPve6NeX6H0Kbes9kvhcIlqG6EtbsjoppEKWp/XvqiTJBC2yu9IJfi+aTteHf6Qu5YRLasJcbldZlO7SoNcsov0QllMu0Fb6tV8jyN1ytKGe3Ta6NLOknbStcbEtAOwiyuaXH93am7JAApqrcR8czkFrZZ0NFSV6QnBpw8+T3o/7gLBqc9XppNBr3z8fDYacXnY+Go/7TKBpHkSuhKyEoslsgFDdXgm79xtB1EJInAVnVJxXCwxyF7iZ9qqAC61Oi+m5n8B6cgK64idF2nft3drLLT64B6cY6PQtC0lg54/g1MpA5rw8Zd1jNwrWM9h0gcXvMCoqG3DBTEF/bwwMdHzQh2WaKV0LGpz3Vu7yOd01Y0DDDIfZe2aOzf456v3QS4ksduJwuOTMx3YIOfgOH49ol2wQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 4.05 μs | 5.07 μs | 1.25 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchstone.BenchI.Ackermann_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchstone.BenchI.Ackermann.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchstone.BenchI.Ackermann*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Benchstone.BenchI.Ackermann* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchstone.BenchI.Ackermann*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Benchstone.BenchI.Ackermann* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Benchstone.BenchI.Ackermann.Test\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Span.Sorting\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[BubbleSortSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/Span.Sorting.BubbleSortSpan(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Span/Sorting.cs#L42-#L44\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TQBB8R+I/3JttcBMnpCVEMiIJLRQSKInFC0LVxd7Yh+7D2ju3cYX47dw5ITSpVMyLdTuemd1b73oOVFcIAqTRT36S2wIQyKRiPFtAqUgcEy9TRoLpYiUNE+AdsiZIZVo0PIS17hZAM90VlMkj4hjTghlIjc1GmCS+tzkbeCHxKAp7CPbsBLT5RAU4zzfesqSys1RomMw7k2q14uAiB/tLdgcjctrrB39zLSo5VXLN8gqpYUrqb95UiZLxJpqrDLzvJP5FPMMsPfOePqaczb7O/9CxgsfJcyXV+HPyX/xLaQBLBPvc6daU638ILfSRyWwnECxFdS2s2T0V0yBKU/sP1GNlgha0S6Vn/EY0H64N/4M+lzmT0IZ7laukLttRi1qzlPIrVEI5pK3wfb1Clr3jakU5u2uwNrJFf9E2w/mmBLTrIJtZPZzeqbKrApiocnc63ITEypaGipK8Jhk14LbK70f9wUk0OOn1kmg46g9HUdTpDYYvz16dPo8iG7kUuhKCop16QjG/FnTjN4augpA8C8iqPsoQ7rcpdJP0pYIKrE+J6ofdxAfkBeiKmxht1Zl/7yZbfHwDSHPr9CIISWPljOMLZCAzXu8R16wmcCWjfQdI3B3TgqIht8wUxNe2eaDjvSYkm1TxSsj4uKZ6i+t4W4QlGmY4xN5b2zr7/6h3oZMQX+rAYbrkzMR0Azr4DfWBXG7hBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 255.11 μs | 273.06 μs | 1.07 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.Sorting_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.Sorting.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.Sorting*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Span.Sorting* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.Sorting*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Span.Sorting* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Span.Sorting.BubbleSortSpan(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Benchstone.BenchI.AddArray2\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Test - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/Benchstone.BenchI.AddArray2.Test.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Benchstones/BenchI/AddArray2.cs#L94-#L95\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCWRtVsroKgXRlgGFFkaJeIPQ5CbXxsh/orO9NRPis2OnpaydNMKb6Hz5Pc+dHV/mQLVFECCNfvST3JSAQMaW8WIBlSJpSoJCGQmmi1YaJiA4pMZIZV42HMJKd0ughe4KyuQROMK8ZAZy46oRJkkYbM76QUwCisIF0Z7OQJuPVID3fBWMwdlroyR0mnDaGRXOC2nd63jyb5WFlRMlV2xtkRqmpP4WTJSoGG9Wc1VA8J2kv0hgmMOL4PFDytns6/wPjhYehudKqtGn7L/4qTSAFYJ77nQryvU/hC71gcliJxAsR3UlnNkdFdMgKlOH99QjZaIW2FTpGb8WzSdrw7/XF3LNJLRhL9cqq6t2aFlrllN+iUoon2krfFcvkRVvuVpSzm6bXBvZordoW+FiUwG6QZDNLT28txPlhgQwU9UuOpyBzMm+GCoq8pIU1ICfp7CX9PonSf/k9DRLBsPeYJi86Jw+HyTnZ+dPk2SYJL6EtkJQZLdAKK6vBN2EjaHvICZPIrKsjyrE+zmK/U36bMGC86lQ/XAzeA9egLbcpOi6LsI7O9nmR9eAdO2cnkUxaay8cfoGGciC1/uMP6xm4VtG9w6Q+D3mJUVDbpgpSajd4YFO95qYbHLFrZDpcU/1Nq/TbRMONMxwSIPX7ujcn6PeLb2EhFJHPqcrzkxKN6Cj332U/tbbBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 10.66 ms | 13.95 ms | 1.31 | 0.15 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchstone.BenchI.AddArray2_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchstone.BenchI.AddArray2.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchstone.BenchI.AddArray2*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Benchstone.BenchI.AddArray2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchstone.BenchI.AddArray2*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter Benchstone.BenchI.AddArray2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Benchstone.BenchI.AddArray2.Test\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in PerfLabTests.CastingPerf\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[CheckObjIsInterfaceNo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.CheckObjIsInterfaceNo.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L321-#L328\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCWRt1rUTTAqiK2MU2q2UiDcITW5yTTz8Jzo7WzNN++zYaSlrJ40gRZH95PfcnR2fp0B1hSBAGv3intwWgEBOK8azOZSKxDHxMmUkmC5W0jAB3i51ilSmRcMhLHW3AJrprqBM7oFDTAtmIDU2G2GS+N7quO+FxKMo7CDY0gloc0EFuJjvvRngckIXTtSdEdWGydxpnVEB6a/LxfVYj6WxAk3hQv3NOa/kSMklyyukhimpf3gjJUrGm9lUZeD9JPED8QyzeOa9fM45mXyf/sGxgufhqZJqeJn8F98soUSw741vSbn+h9FKX5jMNgbBUlRXwgZ75GIaRGlq/4l7qEzQAhsrPeE3ovmBbfjP+kzmTEIbdparpC7boUWtWUr5DJVQTmlr/FQvkGXnXC0oZ3eN1sY2783bZjhblYC2LWRzZndP8UjZlgFMVLkZ7XZEYm3fDBUleUcyasB1l9+Lev2DqH9weJhEb0569nnb6Q+iwfHg6HUUnUSRS6ErISiyOyAU8ytBV34T0FUQklcBWdR7GcJtV4XuJH2toAIbp0R1bTvyCTwHXXETo6068x+tZK0PbwBpbiMdBSFpQrnA8UdkIDNebxW3Wc3ElYz2GyBxa0wLiobcMlMQX9vNAx1vPSFZpYpXQsb7NdVrXcfrIixomOEQex/s1tl7pN5MnYX4UgdO0yVnJqYr0MFvCb5SlekEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 43.82 μs | 87.45 μs | 2.00 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[CheckArrayIsInterfaceNo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.CheckArrayIsInterfaceNo.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L369-#L376\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUXW/TMBSG75H4D75LAlmbduFjk4LoygaFdpQScYPQ5CanicEf0bGzNRPit2OnpaydNIIURfab5z3n2PHxDKiuEQRIox/9JDclIJCzmvF8AZUiSUK8XBkJpo+1NEyAt0+dIZVZ2XIIK90vgea6LyiTB+AIs5IZyIzNRpgkvrd+Hnsh8SgKOwh2dAraXFIBLuZrbw64mtKlE3VvTLVhsnBab1xC9mOESJuJnkhjJZrBpfqbdVHLsZIrVtRIDVNSf/XGSlSMt7OZysH7RpJfxDPM4rn3+CHndPpl9gfHGh6GZ0qq0cf0v/h2CRWCfW99K8r1P4xW+sBkvjUIlqG6EjbYHRfTICrT+PfcI2WCDthE6Sm/Fu0v7MK/1+eyYBK6sPNCpU3VDS0bzTLK56iEckpX47tmiSx/y9WScnbbal1si+Gia4bzdQVoG0O2p3b/HI+VbRrAVFXb0X5PpNb22VBRkVckpwZcf/nDaBgfRfHRYJBGL0+H9jnpPTs5fjGI46dRdBpFLoWuhaDIboFQLK4EXfttQFdBSJ4EZNkcZAh3fRW6k/SphhpsnArVd9uT9+AF6JqbBG3VuX9nJRt9dA1ICxvpOAhJG8oFTi6Qgcx5s1PcZrUTVzLab4DErTErKRpyw0xJfG03D3Sy84RknSleC5kc1tRsdJ1sirCgYYZD4r2xW2dvkmY7dRbiSx04TVecmYSuQQe/AfxEfg3rBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 88.35 μs | 132.18 μs | 1.50 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[FooObjIsDescendant - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.FooObjIsDescendant.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L200-#L205\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0JZG3aVbBNCqLrPii0rJSIF4QmN7lNPPkjuna2Zpr227HTUtZOGkGKIvvknHOvHR9PgeoKQYA0+tUDuSsAgZxWjGdzKBWJY+JlykgwXaykYQK8XdYpUpkWDQ9hqbsF0Ex3BWVyjzjEtGAGUmOrESaJ763eDbyQeBSFHQRbdgLafKUCnOdHbwa4nNCFA3VnRLVhMndY50Kpq8XNWJ+BTkFmVJq/BeeVHCm5ZHmF1DAl9U9vpETJeDObqgy8XyR+JJ5hlp55r19STiY/pn/oWMHL5KmSaniV/Bd/LA1giWDfG92Scv0PoYW+MJltBIKlqK6FNXuiYhpEaWr/mXqoTNCCNlZ6wm9F8/fa8D/rc5kzCW24s1wlddmOWtSapZTPUAnlkLbCT/UCWXbJ1YJydt9gbWTz/rxthfNVCWgzIZsDu3uER8rmBTBR5Wa0G4fEyr4bKkrygWTUgIuW34/6g4NocNDrJdHRSd8+x533vePD3lHvbRSdRJEroSshKLJ7IBTza0FXfmPoOgjJm4As6r0K4TZSoTtJ3yqowPqUqG5sHJ+R56ArbmK0XWf+k5Ws8eEtIM2t02EQksbKGccXyGwIeb1F3GY1E9cy2m+AxK0xLSgacsdMQXxtNw90vNWEZJUqXgkZ7/dUr3Edr5uwRMMMh9g7s1tnL5F6M3US4ksdOEyXnJmYrkAHvwGxR4gI5gQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 147.02 μs | 180.74 μs | 1.23 | 0.05 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[CheckIsInstAnyIsInterfaceNo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.CheckIsInstAnyIsInterfaceNo.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L345-#L352\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCWRtVgraJgXRlQGFdpQS8QahyU2uicF/orO9NRPis2OnpaydNIIURfaT33N3dnyeAdUWQYA0+tFPclMBAjm3jBcLqBVJUxIUykgwfbTSMAHBPnWOVOZVyyGsdL8CWui+oEwegCPMK2YgNy4bYZKEwfrFMIhJQFG4QbSjM9DmkgrwMV8Fc8DVlC69qHtjqg2Tpdd64wryHxM9kdqMZOMHxsk0h0v1N/PCyrGSK1ZapIYpqb8GYyVqxtvZTBUQfCPpLxIY5vAiePyQczr9MvuDo4WH4ZmSavQx+y++XUKN4N5b34py/Q+jkz4wWWwNguWoroQLdsfFNIjaNOE990iZqAM2UXrKr0X7G7vw7/WFLJmELuy8VFlTd0OrRrOc8jkqobzS1fiuWSIr3nK1pJzdtloX22Kw6JrhYl0DuuaQ7cndP8tj5RoHMFP1drTfF5mzfTZU1OQlKagB32PhIBkMj5Lh0fFxlpycDdxz2jsZDk6Hz4+fJslZkvgU2gpBkd0CoVheCboO24C+gpg8iciyOcgQ73or9ifpkwULLk6N6rvry3vwArTlJkVXdRHeWclGH10D0tJFehbFpA3lA6dvkIEseLNT/Ga1E18yum+AxK8xrygacsNMRULtNg90uvPEZJ0rboVMD2tqNrpON0U40DDDIQ1eu61zt0mznXoLCaWOvKZrzkxK16Cj33128DHvBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 43.77 μs | 87.36 μs | 2.00 | 0.02 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_2.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_3.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_4.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.CastingPerf*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter PerfLabTests.CastingPerf* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.CastingPerf*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter PerfLabTests.CastingPerf* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### PerfLabTests.CastingPerf.CheckObjIsInterfaceNo\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf.CheckArrayIsInterfaceNo\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf.FooObjIsDescendant\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf.CheckIsInstAnyIsInterfaceNo\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Stack - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEachNonGeneric(Int32).Stack(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEachNonGeneric.cs#L67-#L75\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TQBB8R+I/3JttSBMnKSFEuCIN/YKmlCTiBaHqam/jg/uw9s5tXCF+O3tuCG0qFfNi3Y1nZvfOs54CtyWCAu3ss5/sJgcEtl8Kmc2gMCxJWJAZp8F1sNROKAgesvaR6zSveQhXtpMDz2xHcaG3iGNMc+EgdVSNCc3CYDXYDVos4KhoEW3YC7DujCvwnu+CeWUdqPbESElaYbRtnzhA7uDQ4AFP8zOjj0ADivTtiXb93l577nj6I5yLWxixV91e9LeRWaknRl+JZUkG3utrMDGqELLeTU0GwTeW/GKBE0TPgudPKU9Pv0z/0LGEp8lTo8340+K/+HQcwAKBnmvdFZf2H0KCPgqdrQVKpGguFJndUwkLqnBV+Eg9Ni5qQDsx9lReq/qrNuF/sAd6KTQ04Z4vzaIqmlHzyoqUy3M0ynikqfC4ukSRHUlzyaW4rbEmsllv1rTCwaqgQPqZ8kF+GO2JoTkCXJhivXo4JguSUYBVwfZYRin3Ixf24t7uTry70+0u4uGoNxz1B+1Bd9h//WbwMo5HcexL2FIpjpR6xnF5ofgqrA19By32ImKX1VaF1mbUWj5Jn0sogXwKNN9p1B6RZ2BL6RKkrrPw3knu8PE1DeWSnPpRi9VW3jg5RAE6k9UG8ZdVb3zLSO8AmT9jmnN07Ea4nIWWLg9sstG02Co1slQ62e6pusNtctcEEZ1wEpLgPV0d/Vyq9dZLWKht5DFbSOESvgIb/QZ//owZ/gQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.86 μs | 2.12 μs | 1.14 | 0.08 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEachNonGeneric%28Int32%29_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEachNonGeneric%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.IterateForEachNonGeneric\u0026lt;Int32\u0026gt;.Stack(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [59e8bbcf83b664c3de6cfa553d9bbfad76578765](https://github.com/dotnet/runtime/commit/59e8bbcf83b664c3de6cfa553d9bbfad76578765)\nCompare | [9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c](https://github.com/dotnet/runtime/commit/9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/59e8bbcf83b664c3de6cfa553d9bbfad76578765...9d02188cdd26d4dfc26e3f9d4e843c6ae78c1b1c)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Globalization.Tests.Perf_NumberCultureInfo\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_NumberCultureInfo.ToString(culturestring%3a%20da).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.NumberCultureInfo.cs#L25-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUUW/TMBDH35H4Dn5LAlmbdaVslYLoygaFdpQ24gWhyk2ujVFsR2d7aybEZ8dOS1k7aYSXyL78/v87O3eZAFUGgYPQ6tlPcpcDArk0rMhmUEoSx8TLpBag22iEZhy8Q+oSqUjzmkNYqXYONFNtTpk4AgeY5kxDqm02wgTxvU2v64XEo8jtItjTCSh9Qzk4z7fevFIaeOt9IZe0YPdUMylaDlGtKeBqcWP4EnBoCuc7EivZSuRcIxNrP90GVb3rk4wGf0uaGTGUYsXWBmtL9c0bSl6yot5NZAbedxL/Ip5mFs+8508px+Ovkz84GngankghB5+T/+JHQgOWCPa5061oof4htKFPTGQ7AWcpygW3Zg9UTAEvdeU/Ug+kDhpgI6nGxS2vv28T/qO6EmsmoAk7XcukKpuheaVYSospSi5dpKnwQ7VElh30VhPZrDNrmuFqUwLaqRF1Sx82+VDaiQJMZLlbHQ5MYmVzTXlJ3tje1eCGz+9Ene5J1D05PU2i837nvN+9aL3uvbronXVeRlE/ilwKZTinyO6BUFwvON34taGrICQvArKsjjKE+6ELXSd9MWDA+pQof9iBfQTPQNnRitFWnfkPTrKND24B6do6nQUhqa2ccXyNDERWVPuIu6x640pG+w6QuDOmOUVN7pjOia/s5YGK95qQbFJZGC7i45qqbVzF2yIsqJkuIPbe2auzv5lqt3US4gsVuJgqC6ZjugEV/AZa1Z5lCAUAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 157.23 ns | 197.97 ns | 1.26 | 0.05 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_NumberCultureInfo.ToString(culturestring%3a%20fr).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.NumberCultureInfo.cs#L25-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUUW/TMBDH35H4Dn5LAlmblajaKgXRlQGFdpQ24gWhyk0uiVFsR2dnaybEZ8dOS1k7aYSXyHf5/f93dnyZA1U1Ageh1bOf5K4ABHJVszJdQiVJFBEnlVqA7mMtNOPgHFNXSEVStBxCpvoF0FT1OWXiBBxjUjANiTbVCBPEdbbD0PGJQ5GbhXegY1D6hnKwnm+cVaM08N77Um5oye6pZlL0LKJ6C8BsfVPzDeCkLq3vVGSyF8uVRiZyN9klVRuNSIbe35aWtZhIkbG8xtZSfXMmklesbKO5TMH5TqJfxNHM4Knz/CnlbPZ1/gfHGp6G51LI8ef4v/ip0IAVgnnudRkt1T+EJvWJiXQv4CxBuebG7IGKKeCVbtxH6rHUXgdsKtWsvOXt9+3Cf1TXImcCurCLXMZN1Q0tGsUSWi5QcmkzXYUfmg2y9OhudZEtB8uuFa63FaCZGtFe6eNLPpFmogBjWe1XxwMTG9lKU16R1ySlGuzwuYNgEJ4F4dn5eRxcjAYXo/Cydzkcnodh+DIIRkFgS6iac4rsHgjFfM3p1m0NbQc+eeGRTXNSwT8MnW9v0pcaajA+FcofZmAfwUtQZrQiNF2n7oOd7PLjW0CaG6dXnk9aK2scvUMGIi2bQ8YeVhvYltG8AyR2j0lBUZM7pgviKnN4oKKDxifbRJY1F9FpT80ur6JdEwbUTJcQOW/N0ZnfTLMPrYS4Qnk2p6qS6YhuQXm/AdeKk50IBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 160.72 ns | 196.99 ns | 1.23 | 0.03 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_NumberCultureInfo_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_NumberCultureInfo_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_11_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_NumberCultureInfo.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Globalization.Tests.Perf_NumberCultureInfo*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Globalization.Tests.Perf_NumberCultureInfo* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Globalization.Tests.Perf_NumberCultureInfo*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Globalization.Tests.Perf_NumberCultureInfo* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Globalization.Tests.Perf_NumberCultureInfo.ToString(culturestring: da)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Globalization.Tests.Perf_NumberCultureInfo.ToString(culturestring: fr)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2024-06-11T08:30:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhS7",
                                           "createdAt":  "2024-06-14T04:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Could the regressions in `Perf_Single`, `Perf_Double`, `Perf_NumberCultureInfo` be related to https://github.com/dotnet/runtime/pull/102683 @huoyaoyuan ? It looks like there was a discussion on the PR about possible perf implications for Mono. Is the regression expected @fanyang-mono ?\r\n\r\nArm64 Mono AOT-llvm regressions: https://github.com/dotnet/perf-autofiling-issues/issues/36103",
                                           "updatedAt":  "2024-06-14T05:09:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhS9",
                                           "createdAt":  "2024-06-14T05:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The original PR has benchmark on mono and didn\u0027t see such regressions on other formats and values: https://github.com/dotnet/runtime/pull/102683#issuecomment-2143455603\r\n\r\nI\u0027ll run with the exact values from performance repo again.",
                                           "updatedAt":  "2024-06-14T05:32:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTE",
                                           "createdAt":  "2024-06-14T05:52:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e The original PR has benchmark on mono and didn\u0027t see such regressions on other formats and values: [dotnet/runtime#102683 (comment)](https://github.com/dotnet/runtime/pull/102683#issuecomment-2143455603)\r\n\u003e \r\n\u003e I\u0027ll run with the exact values from performance repo again.\r\n\r\nThank you, you can try using https://github.com/dotnet/performance/blob/main/scripts/benchmarks_local.py script to run the selected microbenchmarks on different commits (note, it currently doesn\u0027t support a diff between AOT runs so it has to be calculate) There is a [Readme](https://github.com/dotnet/performance/blob/main/scripts/BENCHMARKS_LOCAL_README.md) with instructions on how to use it. cc: @LoopedBard3 ",
                                           "updatedAt":  "2024-06-14T06:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTL",
                                           "createdAt":  "2024-06-15T05:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I had some trouble building with benchmark_local.py, just manually comparing the commits `a4407a106f883a6593105a660d44da6f8fa4017c` and `555dde482e5e76bc0563757b53baee9f0d859a4b`.\r\n\r\nResults for `a4407a106f883a6593105a660d44da6f8fa4017c` (After merge):\r\n\r\n\u003cdetails\u003e\r\n\r\n| Method                  | Job        | OutlierMode | MemoryRandomization | value                    | format | culture | Mean            | Error         | StdDev        | Median          | Min             | Max             | Gen0   | Allocated |\r\n|------------------------ |----------- |------------ |-------------------- |------------------------- |------- |-------- |----------------:|--------------:|--------------:|----------------:|----------------:|----------------:|-------:|----------:|\r\n| Parse                   | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157e+308 | ?      | ?       |       126.47 ns |      0.676 ns |      0.633 ns |       126.45 ns |       125.33 ns |       128.00 ns |      - |         - |\r\n| TryParse                | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157e+308 | ?      | ?       |       124.03 ns |      0.651 ns |      0.609 ns |       123.75 ns |       123.03 ns |       125.03 ns |      - |         - |\r\n| Parse                   | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157e+308  | ?      | ?       |       129.35 ns |     10.418 ns |     11.997 ns |       126.99 ns |       123.90 ns |       180.09 ns |      - |         - |\r\n| TryParse                | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157e+308  | ?      | ?       |       123.77 ns |      1.088 ns |      1.018 ns |       123.76 ns |       121.67 ns |       125.45 ns |      - |         - |\r\n| Parse                   | Job-ALNGBP | DontRemove  | True                | 12345                    | ?      | ?       |        77.39 ns |      0.474 ns |      0.443 ns |        77.36 ns |        76.61 ns |        78.22 ns |      - |         - |\r\n| TryParse                | Job-ALNGBP | DontRemove  | True                | 12345                    | ?      | ?       |        77.42 ns |      0.482 ns |      0.451 ns |        77.59 ns |        76.63 ns |        78.11 ns |      - |         - |\r\n| IsNaN                   | Job-LOLVAE | Default     | Default             | NaN                      | ?      | ?       | 1,576,629.60 ns | 16,269.034 ns | 15,218.064 ns | 1,570,184.69 ns | 1,560,424.06 ns | 1,611,865.31 ns |      - |       2 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | E      | ?       |       198.98 ns |      1.220 ns |      1.141 ns |       199.15 ns |       196.00 ns |       200.55 ns | 0.0128 |      56 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | F50    | ?       |    32,328.03 ns |    271.606 ns |    254.060 ns |    32,360.89 ns |    31,860.61 ns |    32,813.43 ns | 0.1297 |     744 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | G      | ?       |       287.88 ns |      3.412 ns |      3.192 ns |       289.45 ns |       281.24 ns |       291.60 ns | 0.0173 |      72 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | G17    | ?       |       263.73 ns |      2.204 ns |      2.061 ns |       264.20 ns |       259.10 ns |       266.38 ns | 0.0171 |      72 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | R      | ?       |       289.88 ns |      3.318 ns |      3.104 ns |       289.08 ns |       285.72 ns |       297.82 ns | 0.0174 |      72 B |\r\n| ToStringWithCultureInfo | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | ?      | zh      |       284.67 ns |      3.312 ns |      3.098 ns |       283.81 ns |       279.49 ns |       291.88 ns | 0.0173 |      72 B |\r\n| ToString                | Job-ALNGBP | DontRemove  | True                | -1.7976931348623157E+308 | ?      | ?       |       287.34 ns |      0.974 ns |      0.911 ns |       287.27 ns |       285.58 ns |       289.39 ns | 0.0173 |      72 B |\r\n| IsNaN                   | Job-LOLVAE | Default     | Default             | 0                        | ?      | ?       | 1,578,909.75 ns |  5,812.875 ns |  5,437.367 ns | 1,579,611.88 ns | 1,569,534.38 ns | 1,587,322.50 ns |      - |       2 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 12345                    | E      | ?       |       187.74 ns |      1.869 ns |      1.748 ns |       187.81 ns |       184.26 ns |       191.71 ns | 0.0112 |      48 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 12345                    | F50    | ?       |       609.38 ns |      6.156 ns |      5.759 ns |       610.33 ns |       600.17 ns |       617.71 ns | 0.0311 |     136 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 12345                    | G      | ?       |       159.66 ns |      3.085 ns |      3.030 ns |       159.54 ns |       154.74 ns |       166.89 ns | 0.0071 |      32 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 12345                    | G17    | ?       |       372.65 ns |      4.898 ns |      4.581 ns |       372.69 ns |       365.90 ns |       382.80 ns | 0.0073 |      32 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 12345                    | R      | ?       |       157.86 ns |      2.119 ns |      1.983 ns |       157.81 ns |       153.06 ns |       160.91 ns | 0.0076 |      32 B |\r\n| ToStringWithCultureInfo | Job-ALNGBP | DontRemove  | True                | 12345                    | ?      | zh      |       155.51 ns |      1.678 ns |      1.570 ns |       155.24 ns |       153.41 ns |       157.69 ns | 0.0075 |      32 B |\r\n| ToString                | Job-ALNGBP | DontRemove  | True                | 12345                    | ?      | ?       |       153.96 ns |      2.055 ns |      1.922 ns |       153.85 ns |       150.05 ns |       157.32 ns | 0.0074 |      32 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | E      | ?       |       191.94 ns |      3.031 ns |      2.835 ns |       192.16 ns |       185.47 ns |       197.49 ns | 0.0113 |      48 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | F50    | ?       |    32,225.35 ns |    381.669 ns |    357.014 ns |    32,125.21 ns |    31,734.57 ns |    33,000.68 ns | 0.1278 |     744 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | G      | ?       |       286.48 ns |      3.008 ns |      2.814 ns |       287.07 ns |       280.52 ns |       290.44 ns | 0.0174 |      72 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | G17    | ?       |       265.71 ns |      3.678 ns |      3.440 ns |       265.49 ns |       259.59 ns |       275.35 ns | 0.0170 |      72 B |\r\n| ToStringWithFormat      | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | R      | ?       |       295.14 ns |      3.140 ns |      2.937 ns |       294.29 ns |       291.84 ns |       301.26 ns | 0.0174 |      72 B |\r\n| ToStringWithCultureInfo | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | ?      | zh      |       287.96 ns |      5.406 ns |      5.057 ns |       286.22 ns |       280.15 ns |       296.43 ns | 0.0170 |      72 B |\r\n| ToString                | Job-ALNGBP | DontRemove  | True                | 1.7976931348623157E+308  | ?      | ?       |       287.89 ns |      3.275 ns |      3.064 ns |       286.80 ns |       283.82 ns |       293.56 ns | 0.0163 |      72 B |\r\n\r\n\u003c/details\u003e\r\n\r\nResults for `555dde482e5e76bc0563757b53baee9f0d859a4b` (Before merge):\r\n\r\n\u003cdetails\u003e\r\n\r\n| Method                  | Job        | OutlierMode | MemoryRandomization | value                    | format | culture | Mean            | Error        | StdDev       | Median          | Min             | Max             | Gen0   | Allocated |\r\n|------------------------ |----------- |------------ |-------------------- |------------------------- |------- |-------- |----------------:|-------------:|-------------:|----------------:|----------------:|----------------:|-------:|----------:|\r\n| Parse                   | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157e+308 | ?      | ?       |       126.93 ns |     1.087 ns |     1.017 ns |       126.58 ns |       125.10 ns |       128.33 ns |      - |         - |\r\n| TryParse                | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157e+308 | ?      | ?       |       126.47 ns |     0.557 ns |     0.521 ns |       126.60 ns |       125.53 ns |       127.50 ns |      - |         - |\r\n| Parse                   | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157e+308  | ?      | ?       |       127.95 ns |     0.768 ns |     0.718 ns |       127.93 ns |       126.46 ns |       129.28 ns |      - |         - |\r\n| TryParse                | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157e+308  | ?      | ?       |       122.27 ns |     1.852 ns |     1.733 ns |       123.14 ns |       118.89 ns |       124.19 ns |      - |         - |\r\n| Parse                   | Job-TTTZYP | DontRemove  | True                | 12345                    | ?      | ?       |        76.50 ns |     1.453 ns |     1.359 ns |        76.11 ns |        75.12 ns |        80.45 ns |      - |         - |\r\n| TryParse                | Job-TTTZYP | DontRemove  | True                | 12345                    | ?      | ?       |        74.88 ns |     1.029 ns |     0.963 ns |        74.73 ns |        73.41 ns |        76.58 ns |      - |         - |\r\n| IsNaN                   | Job-TEQVAO | Default     | Default             | NaN                      | ?      | ?       | 1,566,314.42 ns | 3,930.789 ns | 3,484.542 ns | 1,565,279.06 ns | 1,561,193.75 ns | 1,573,641.88 ns |      - |       2 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | E      | ?       |       198.04 ns |     2.621 ns |     2.451 ns |       197.74 ns |       195.12 ns |       204.71 ns | 0.0127 |      56 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | F50    | ?       |    34,178.47 ns |   735.195 ns |   846.652 ns |    34,508.87 ns |    32,447.92 ns |    34,931.41 ns | 0.1299 |     744 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | G      | ?       |       286.63 ns |     1.626 ns |     1.521 ns |       286.63 ns |       282.45 ns |       289.58 ns | 0.0173 |      72 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | G17    | ?       |       263.57 ns |     1.688 ns |     1.579 ns |       263.21 ns |       261.43 ns |       267.93 ns | 0.0168 |      72 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | R      | ?       |       289.32 ns |     1.933 ns |     1.808 ns |       289.16 ns |       286.58 ns |       292.85 ns | 0.0174 |      72 B |\r\n| ToStringWithCultureInfo | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | ?      | zh      |       285.50 ns |     1.880 ns |     1.758 ns |       285.51 ns |       281.62 ns |       288.28 ns | 0.0173 |      72 B |\r\n| ToString                | Job-TTTZYP | DontRemove  | True                | -1.7976931348623157E+308 | ?      | ?       |       285.61 ns |     1.176 ns |     1.100 ns |       285.42 ns |       284.06 ns |       288.04 ns | 0.0171 |      72 B |\r\n| IsNaN                   | Job-TEQVAO | Default     | Default             | 0                        | ?      | ?       | 1,590,207.21 ns | 5,467.024 ns | 5,113.858 ns | 1,590,451.25 ns | 1,579,600.00 ns | 1,597,880.00 ns |      - |       2 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 12345                    | E      | ?       |       184.10 ns |     2.447 ns |     2.289 ns |       184.45 ns |       180.76 ns |       188.04 ns | 0.0112 |      48 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 12345                    | F50    | ?       |       583.29 ns |     5.609 ns |     5.247 ns |       581.82 ns |       574.89 ns |       593.43 ns | 0.0322 |     136 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 12345                    | G      | ?       |       155.27 ns |     1.181 ns |     1.105 ns |       154.77 ns |       154.29 ns |       157.71 ns | 0.0075 |      32 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 12345                    | G17    | ?       |       360.51 ns |     1.653 ns |     1.546 ns |       361.16 ns |       356.68 ns |       363.27 ns | 0.0073 |      32 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 12345                    | R      | ?       |       156.85 ns |     0.792 ns |     0.741 ns |       157.00 ns |       155.59 ns |       158.23 ns | 0.0076 |      32 B |\r\n| ToStringWithCultureInfo | Job-TTTZYP | DontRemove  | True                | 12345                    | ?      | zh      |       151.58 ns |     0.445 ns |     0.416 ns |       151.37 ns |       150.89 ns |       152.27 ns | 0.0073 |      32 B |\r\n| ToString                | Job-TTTZYP | DontRemove  | True                | 12345                    | ?      | ?       |       151.66 ns |     0.533 ns |     0.498 ns |       151.73 ns |       150.62 ns |       152.36 ns | 0.0073 |      32 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | E      | ?       |       186.51 ns |     0.921 ns |     0.861 ns |       186.22 ns |       185.29 ns |       188.16 ns | 0.0113 |      48 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | F50    | ?       |    32,306.26 ns |   167.847 ns |   157.004 ns |    32,318.58 ns |    32,046.27 ns |    32,515.91 ns | 0.1281 |     744 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | G      | ?       |       283.88 ns |     4.037 ns |     3.776 ns |       284.95 ns |       276.21 ns |       288.82 ns | 0.0170 |      72 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | G17    | ?       |       257.50 ns |     2.654 ns |     2.482 ns |       258.13 ns |       251.57 ns |       260.13 ns | 0.0174 |      72 B |\r\n| ToStringWithFormat      | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | R      | ?       |       284.75 ns |     5.005 ns |     4.682 ns |       284.70 ns |       275.10 ns |       292.99 ns | 0.0170 |      72 B |\r\n| ToStringWithCultureInfo | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | ?      | zh      |       292.01 ns |     3.279 ns |     3.067 ns |       292.11 ns |       287.17 ns |       297.15 ns | 0.0174 |      72 B |\r\n| ToString                | Job-TTTZYP | DontRemove  | True                | 1.7976931348623157E+308  | ?      | ?       |       286.36 ns |     5.454 ns |     5.102 ns |       285.15 ns |       280.24 ns |       294.59 ns | 0.0172 |      72 B |\r\n\r\n\u003c/details\u003e\r\n\r\nThe difference is generally less than 5%, so it doesn\u0027t seem to be caused by https://github.com/dotnet/runtime/pull/102683",
                                           "updatedAt":  "2024-06-15T05:04:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTZ",
                                           "createdAt":  "2024-06-17T10:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e I had some trouble building with benchmark_local.py, just manually comparing the commits `a4407a106f883a6593105a660d44da6f8fa4017c` and `555dde482e5e76bc0563757b53baee9f0d859a4b`.\r\n\u003e \r\n\u003e Results for `a4407a106f883a6593105a660d44da6f8fa4017c` (After merge):\r\n\u003e \r\n\u003e Results for `555dde482e5e76bc0563757b53baee9f0d859a4b` (Before merge):\r\n\u003e \r\n\u003e The difference is generally less than 5%, so it doesn\u0027t seem to be caused by [dotnet/runtime#102683](https://github.com/dotnet/runtime/pull/102683)\r\n\r\nCould you please share what issues did you encounter?\r\n\r\nI would use something like: `python3 benchmarks_local.py --commits a4407a106f883a6593105a660d44da6f8fa4017c 555dde482e5e76bc0563757b53baee9f0d859a4b  --run-types MonoAOTLLVM --filter \"*Perf_Double.ToString*\"` to run the `Perf_Double.ToString*` microbenchmarks.",
                                           "updatedAt":  "2024-06-17T10:10:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTg",
                                           "createdAt":  "2024-06-18T03:01:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027m using the similar command line with `--allow-non-admin-execution`. It fails for the `pack` step with following errors:\r\n\r\n```\r\n[INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : The following files are missing entries in the templated manifest: [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n[INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : llc.exe [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n[INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : opt.exe. Add these file names with extensions to the \u0027PlatformManifestFileEntry\u0027 item group for the runtime pack and corresponding ref pack to include them in the platform manifest. [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n```\r\n\r\nCan you confirm that the regression is unrelated to https://github.com/dotnet/runtime/pull/102683?",
                                           "updatedAt":  "2024-06-18T03:01:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTi",
                                           "createdAt":  "2024-06-18T08:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e I\u0027m using the similar command line with `--allow-non-admin-execution`. It fails for the `pack` step with following errors:\r\n\u003e \r\n\u003e ```\r\n\u003e [INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : The following files are missing entries in the templated manifest: [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n\u003e [INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : llc.exe [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n\u003e [INFO] C:\\Users\\Meow\\.nuget\\packages\\microsoft.dotnet.sharedframework.sdk\\9.0.0-beta.24281.1\\targets\\sharedfx.targets(296,5): error : opt.exe. Add these file names with extensions to the \u0027PlatformManifestFileEntry\u0027 item group for the runtime pack and corresponding ref pack to include them in the platform manifest. [C:\\Users\\Meow\\runtime\\runtime\\src\\installer\\pkg\\sfx\\Microsoft.NETCore.App\\Microsoft.NETCore.App.Runtime.sfxproj]\r\n\u003e ```\r\n\u003e \r\n\u003e Can you confirm that the regression is unrelated to [dotnet/runtime#102683](https://github.com/dotnet/runtime/pull/102683)?\r\n\r\nThank you for the error log. It looks similar to https://github.com/dotnet/runtime/issues/103486. Do you think it could be related @LoopedBard3 ?\r\n\r\nI\u0027ve done a quick run with `sudo` and got:\r\n```\r\n| Method                  | value                    | format | culture | Mean        | Error     | StdDev    | Median      | Min         | Max         | Gen0   | Allocated |\r\n|------------------------ |------------------------- |------- |-------- |------------:|----------:|----------:|------------:|------------:|------------:|-------:|----------:|\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | E      | ?       |    230.2 ns |   2.93 ns |   2.74 ns |    229.3 ns |    227.6 ns |    237.0 ns | 0.0129 |      56 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | F50    | ?       | 24,636.6 ns | 206.05 ns | 192.74 ns | 24,556.4 ns | 24,446.0 ns | 25,197.7 ns | 0.1956 |     744 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G      | ?       |    312.7 ns |   4.43 ns |   4.14 ns |    311.3 ns |    308.5 ns |    324.5 ns | 0.0172 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G17    | ?       |    292.8 ns |   2.50 ns |   2.34 ns |    292.2 ns |    290.0 ns |    299.0 ns | 0.0164 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | R      | ?       |    306.8 ns |   3.82 ns |   3.57 ns |    306.0 ns |    303.7 ns |    316.4 ns | 0.0163 |      72 B |\r\n| ToStringWithCultureInfo | -1.7976931348623157E+308 | ?      | zh      |    307.5 ns |   3.37 ns |   3.15 ns |    306.8 ns |    303.3 ns |    316.0 ns | 0.0174 |      72 B |\r\n| ToString                | -1.7976931348623157E+308 | ?      | ?       |    305.0 ns |   2.14 ns |   2.00 ns |    304.4 ns |    302.4 ns |    310.7 ns | 0.0174 |      72 B |\r\n| ToStringWithFormat      | 12345                    | E      | ?       |    218.9 ns |   1.52 ns |   1.42 ns |    218.4 ns |    217.6 ns |    223.4 ns | 0.0108 |      48 B |\r\n| ToStringWithFormat      | 12345                    | F50    | ?       |    597.6 ns |   7.77 ns |   7.27 ns |    595.3 ns |    588.4 ns |    615.1 ns | 0.0304 |     136 B |\r\n| ToStringWithFormat      | 12345                    | G      | ?       |    140.9 ns |   1.93 ns |   1.80 ns |    140.3 ns |    139.3 ns |    145.8 ns | 0.0075 |      32 B |\r\n| ToStringWithFormat      | 12345                    | G17    | ?       |    257.2 ns |   3.50 ns |   3.27 ns |    256.3 ns |    254.9 ns |    268.2 ns | 0.0075 |      32 B |\r\n| ToStringWithFormat      | 12345                    | R      | ?       |    142.3 ns |   1.78 ns |   1.67 ns |    141.8 ns |    140.5 ns |    145.9 ns | 0.0075 |      32 B |\r\n| ToStringWithCultureInfo | 12345                    | ?      | zh      |    140.9 ns |   1.85 ns |   1.73 ns |    140.6 ns |    138.9 ns |    146.2 ns | 0.0075 |      32 B |\r\n| ToString                | 12345                    | ?      | ?       |    139.1 ns |   1.33 ns |   1.24 ns |    138.6 ns |    138.1 ns |    142.5 ns | 0.0075 |      32 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | E      | ?       |    207.4 ns |   3.64 ns |   3.41 ns |    206.1 ns |    205.0 ns |    217.6 ns | 0.0107 |      48 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | F50    | ?       | 25,054.9 ns | 842.28 ns | 969.97 ns | 24,493.2 ns | 24,407.7 ns | 28,158.3 ns | 0.1956 |     744 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G      | ?       |    298.3 ns |   4.52 ns |   4.23 ns |    296.5 ns |    294.8 ns |    309.4 ns | 0.0172 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G17    | ?       |    281.6 ns |   3.36 ns |   3.14 ns |    281.1 ns |    278.6 ns |    290.7 ns | 0.0166 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | R      | ?       |    298.0 ns |   4.09 ns |   3.83 ns |    296.9 ns |    294.2 ns |    308.4 ns | 0.0170 |      72 B |\r\n| ToStringWithCultureInfo | 1.7976931348623157E+308  | ?      | zh      |    307.2 ns |   2.83 ns |   2.65 ns |    306.3 ns |    303.8 ns |    312.6 ns | 0.0166 |      72 B |\r\n| ToString                | 1.7976931348623157E+308  | ?      | ?       |    300.5 ns |   5.17 ns |   4.84 ns |    298.9 ns |    296.4 ns |    312.5 ns | 0.0166 |      72 B |\r\n```\r\n\r\nand \r\n```\r\n| Method                  | value                    | format | culture | Mean        | Error     | StdDev    | Median      | Min         | Max         | Gen0   | Allocated |\r\n|------------------------ |------------------------- |------- |-------- |------------:|----------:|----------:|------------:|------------:|------------:|-------:|----------:|\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | E      | ?       |    285.6 ns |   5.49 ns |   5.13 ns |    284.4 ns |    279.3 ns |    296.0 ns | 0.0127 |      56 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | F50    | ?       | 24,635.2 ns | 427.95 ns | 400.31 ns | 24,470.8 ns | 24,345.2 ns | 25,663.1 ns | 0.0989 |     744 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G      | ?       |    396.5 ns |   4.04 ns |   3.78 ns |    395.5 ns |    393.4 ns |    408.9 ns | 0.0163 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G17    | ?       |    380.3 ns |   5.20 ns |   4.86 ns |    379.0 ns |    374.1 ns |    392.0 ns | 0.0164 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | R      | ?       |    371.0 ns |   2.26 ns |   2.12 ns |    371.0 ns |    367.8 ns |    375.4 ns | 0.0167 |      72 B |\r\n| ToStringWithCultureInfo | -1.7976931348623157E+308 | ?      | zh      |    369.2 ns |   4.19 ns |   3.92 ns |    367.6 ns |    366.3 ns |    380.9 ns | 0.0174 |      72 B |\r\n| ToString                | -1.7976931348623157E+308 | ?      | ?       |    369.4 ns |   5.73 ns |   5.36 ns |    367.9 ns |    364.4 ns |    385.2 ns | 0.0161 |      72 B |\r\n| ToStringWithFormat      | 12345                    | E      | ?       |    278.2 ns |   2.33 ns |   2.18 ns |    277.4 ns |    275.8 ns |    283.6 ns | 0.0113 |      48 B |\r\n| ToStringWithFormat      | 12345                    | F50    | ?       |    624.6 ns |  12.55 ns |  12.89 ns |    622.5 ns |    608.5 ns |    655.1 ns | 0.0306 |     136 B |\r\n| ToStringWithFormat      | 12345                    | G      | ?       |    200.9 ns |   3.23 ns |   3.02 ns |    200.0 ns |    197.7 ns |    207.7 ns | 0.0073 |      32 B |\r\n| ToStringWithFormat      | 12345                    | G17    | ?       |    295.4 ns |   9.66 ns |  11.12 ns |    291.7 ns |    288.5 ns |    339.3 ns | 0.0067 |      32 B |\r\n| ToStringWithFormat      | 12345                    | R      | ?       |    205.2 ns |   4.30 ns |   4.95 ns |    203.6 ns |    200.4 ns |    217.7 ns | 0.0075 |      32 B |\r\n| ToStringWithCultureInfo | 12345                    | ?      | zh      |    202.5 ns |   4.07 ns |   3.81 ns |    200.8 ns |    198.9 ns |    212.8 ns | 0.0072 |      32 B |\r\n| ToString                | 12345                    | ?      | ?       |    195.6 ns |   1.31 ns |   1.23 ns |    195.2 ns |    194.2 ns |    197.9 ns | 0.0072 |      32 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | E      | ?       |    270.9 ns |   1.95 ns |   1.83 ns |    270.2 ns |    268.5 ns |    274.3 ns | 0.0109 |      48 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | F50    | ?       | 24,587.2 ns | 214.57 ns | 200.71 ns | 24,505.6 ns | 24,411.7 ns | 25,138.2 ns | 0.1950 |     744 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G      | ?       |    354.2 ns |   6.75 ns |   6.31 ns |    352.6 ns |    348.5 ns |    372.8 ns | 0.0165 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G17    | ?       |    342.4 ns |   6.53 ns |   6.42 ns |    340.1 ns |    335.3 ns |    361.4 ns | 0.0164 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | R      | ?       |    370.1 ns |   5.50 ns |   5.14 ns |    368.0 ns |    365.8 ns |    382.3 ns | 0.0174 |      72 B |\r\n| ToStringWithCultureInfo | 1.7976931348623157E+308  | ?      | zh      |    354.9 ns |  11.71 ns |  13.48 ns |    350.1 ns |    342.6 ns |    389.4 ns | 0.0172 |      72 B |\r\n| ToString                | 1.7976931348623157E+308  | ?      | ?       |    364.6 ns |   5.38 ns |   5.03 ns |    362.5 ns |    359.8 ns |    379.1 ns | 0.0164 |      72 B |\r\n```\r\nLooks like there is a measurable regression between the 2 commits.\r\n",
                                           "updatedAt":  "2024-06-18T13:17:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxhTs",
                                           "createdAt":  "2024-06-18T18:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LoopedBard3",
                                           "body":  "Yup, I think the error looks related to https://github.com/dotnet/runtime/issues/103486, or at the very least another set of files that need to be added to the list.",
                                           "updatedAt":  "2024-06-18T18:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cxhuu",
                                           "createdAt":  "2024-06-27T07:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-27T07:46:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DUX26",
                                           "createdAt":  "2024-07-02T13:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "@huoyaoyuan In my last comment I shared the results reproducing the regression. Do you need any more assistance with measurements or something else?",
                                           "updatedAt":  "2024-07-02T13:25:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DUtlD",
                                           "createdAt":  "2024-07-02T13:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoFktw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-02T16:47:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-02T16:47:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I were just busy these days. Will try to run it tomorrow.",
                                           "updatedAt":  "2024-07-02T13:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D3w_v",
                                           "createdAt":  "2024-07-07T12:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODowmmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-08T07:56:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027m finally able to execute the benchmark script under WSL. On Windows it continuously fails with different attempts.\r\n\r\n```\r\n| Method                  | value                    | format | culture | Mean        | Error     | StdDev    | Median      | Min         | Max         | Gen0   | Allocated |\r\n|------------------------ |------------------------- |------- |-------- |------------:|----------:|----------:|------------:|------------:|------------:|-------:|----------:|\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | E      | ?       |    179.2 ns |   1.23 ns |   1.15 ns |    179.5 ns |    176.7 ns |    181.5 ns | 0.0128 |      56 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | F50    | ?       | 16,429.3 ns | 163.75 ns | 153.18 ns | 16,419.9 ns | 16,100.6 ns | 16,710.7 ns | 0.1941 |     744 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G      | ?       |    268.3 ns |   2.78 ns |   2.60 ns |    267.5 ns |    264.6 ns |    274.8 ns | 0.0173 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G17    | ?       |    252.3 ns |   2.48 ns |   2.32 ns |    252.7 ns |    248.1 ns |    256.9 ns | 0.0172 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | R      | ?       |    267.2 ns |   2.89 ns |   2.70 ns |    267.1 ns |    263.9 ns |    274.6 ns | 0.0174 |      72 B |\r\n| ToStringWithCultureInfo | -1.7976931348623157E+308 | ?      | zh      |    260.4 ns |   3.86 ns |   3.61 ns |    260.6 ns |    254.2 ns |    265.8 ns | 0.0167 |      72 B |\r\n| ToString                | -1.7976931348623157E+308 | ?      | ?       |    265.8 ns |   2.56 ns |   2.40 ns |    266.0 ns |    261.3 ns |    270.9 ns | 0.0171 |      72 B |\r\n| ToStringWithFormat      | 12345                    | E      | ?       |    174.0 ns |   2.91 ns |   2.72 ns |    173.7 ns |    168.8 ns |    179.1 ns | 0.0113 |      48 B |\r\n| ToStringWithFormat      | 12345                    | F50    | ?       |    486.4 ns |   5.71 ns |   5.34 ns |    486.0 ns |    479.0 ns |    497.3 ns | 0.0324 |     136 B |\r\n| ToStringWithFormat      | 12345                    | G      | ?       |    130.1 ns |   1.86 ns |   1.74 ns |    130.7 ns |    126.0 ns |    132.0 ns | 0.0074 |      32 B |\r\n| ToStringWithFormat      | 12345                    | G17    | ?       |    180.1 ns |   1.84 ns |   1.72 ns |    180.0 ns |    177.2 ns |    183.0 ns | 0.0070 |      32 B |\r\n| ToStringWithFormat      | 12345                    | R      | ?       |    125.2 ns |   0.76 ns |   0.71 ns |    125.3 ns |    123.6 ns |    126.5 ns | 0.0076 |      32 B |\r\n| ToStringWithCultureInfo | 12345                    | ?      | zh      |    124.0 ns |   1.28 ns |   1.20 ns |    123.9 ns |    122.8 ns |    127.0 ns | 0.0075 |      32 B |\r\n| ToString                | 12345                    | ?      | ?       |    125.2 ns |   1.00 ns |   0.93 ns |    125.1 ns |    124.0 ns |    127.8 ns | 0.0076 |      32 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | E      | ?       |    171.5 ns |   1.35 ns |   1.26 ns |    171.2 ns |    169.5 ns |    174.6 ns | 0.0110 |      48 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | F50    | ?       | 16,602.1 ns | 136.96 ns | 128.12 ns | 16,572.9 ns | 16,435.3 ns | 16,886.5 ns | 0.1939 |     744 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G      | ?       |    268.0 ns |  16.09 ns |  18.53 ns |    262.6 ns |    258.7 ns |    332.3 ns | 0.0166 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G17    | ?       |    247.9 ns |   2.17 ns |   2.03 ns |    247.4 ns |    245.2 ns |    251.6 ns | 0.0169 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | R      | ?       |    261.4 ns |   3.42 ns |   3.20 ns |    261.2 ns |    257.5 ns |    267.9 ns | 0.0169 |      72 B |\r\n| ToStringWithCultureInfo | 1.7976931348623157E+308  | ?      | zh      |    258.3 ns |   2.36 ns |   2.21 ns |    258.1 ns |    254.4 ns |    263.0 ns | 0.0165 |      72 B |\r\n| ToString                | 1.7976931348623157E+308  | ?      | ?       |    261.1 ns |   1.56 ns |   1.45 ns |    261.1 ns |    257.2 ns |    263.6 ns | 0.0166 |      72 B |\r\n```\r\n\r\n```\r\n| Method                  | value                    | format | culture | Mean         | Error      | StdDev     | Median       | Min          | Max          | Gen0   | Allocated |\r\n|------------------------ |------------------------- |------- |-------- |-------------:|-----------:|-----------:|-------------:|-------------:|-------------:|-------:|----------:|\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | E      | ?       |    145.27 ns |   1.992 ns |   1.864 ns |    145.16 ns |    142.53 ns |    149.13 ns | 0.0129 |      56 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | F50    | ?       | 16,306.43 ns | 193.665 ns | 181.154 ns | 16,302.42 ns | 16,015.62 ns | 16,591.64 ns | 0.1941 |     744 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G      | ?       |    240.99 ns |   2.381 ns |   2.228 ns |    240.78 ns |    237.48 ns |    246.65 ns | 0.0174 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | G17    | ?       |    228.99 ns |   1.918 ns |   1.794 ns |    228.77 ns |    224.88 ns |    231.88 ns | 0.0173 |      72 B |\r\n| ToStringWithFormat      | -1.7976931348623157E+308 | R      | ?       |    240.31 ns |   1.715 ns |   1.604 ns |    240.50 ns |    238.19 ns |    243.45 ns | 0.0172 |      72 B |\r\n| ToStringWithCultureInfo | -1.7976931348623157E+308 | ?      | zh      |    233.90 ns |   1.246 ns |   1.166 ns |    233.24 ns |    232.64 ns |    235.74 ns | 0.0168 |      72 B |\r\n| ToString                | -1.7976931348623157E+308 | ?      | ?       |    235.46 ns |   1.461 ns |   1.366 ns |    235.62 ns |    233.16 ns |    237.81 ns | 0.0170 |      72 B |\r\n| ToStringWithFormat      | 12345                    | E      | ?       |    138.85 ns |   1.330 ns |   1.245 ns |    138.59 ns |    137.37 ns |    142.61 ns | 0.0112 |      48 B |\r\n| ToStringWithFormat      | 12345                    | F50    | ?       |    498.15 ns |   5.174 ns |   4.839 ns |    497.46 ns |    491.25 ns |    508.22 ns | 0.0325 |     136 B |\r\n| ToStringWithFormat      | 12345                    | G      | ?       |     97.19 ns |   1.147 ns |   1.072 ns |     97.30 ns |     94.87 ns |     99.38 ns | 0.0075 |      32 B |\r\n| ToStringWithFormat      | 12345                    | G17    | ?       |    140.31 ns |   1.938 ns |   1.813 ns |    139.93 ns |    137.99 ns |    144.45 ns | 0.0076 |      32 B |\r\n| ToStringWithFormat      | 12345                    | R      | ?       |     94.63 ns |   1.437 ns |   1.344 ns |     94.68 ns |     92.69 ns |     96.52 ns | 0.0076 |      32 B |\r\n| ToStringWithCultureInfo | 12345                    | ?      | zh      |     94.01 ns |   0.834 ns |   0.780 ns |     93.91 ns |     93.02 ns |     95.11 ns | 0.0075 |      32 B |\r\n| ToString                | 12345                    | ?      | ?       |     92.90 ns |   1.219 ns |   1.140 ns |     93.02 ns |     91.46 ns |     95.43 ns | 0.0076 |      32 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | E      | ?       |    141.11 ns |   1.295 ns |   1.211 ns |    140.91 ns |    139.41 ns |    143.57 ns | 0.0113 |      48 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | F50    | ?       | 16,351.35 ns | 114.370 ns | 106.982 ns | 16,356.80 ns | 16,169.31 ns | 16,532.19 ns | 0.1937 |     744 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G      | ?       |    227.34 ns |   2.033 ns |   1.901 ns |    228.01 ns |    222.82 ns |    229.60 ns | 0.0173 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | G17    | ?       |    217.83 ns |   1.664 ns |   1.556 ns |    217.88 ns |    214.59 ns |    220.59 ns | 0.0168 |      72 B |\r\n| ToStringWithFormat      | 1.7976931348623157E+308  | R      | ?       |    232.44 ns |   2.088 ns |   1.953 ns |    232.74 ns |    227.63 ns |    235.68 ns | 0.0167 |      72 B |\r\n| ToStringWithCultureInfo | 1.7976931348623157E+308  | ?      | zh      |    225.95 ns |   2.621 ns |   2.452 ns |    226.27 ns |    222.08 ns |    229.61 ns | 0.0166 |      72 B |\r\n| ToString                | 1.7976931348623157E+308  | ?      | ?       |    227.49 ns |   2.401 ns |   2.245 ns |    227.78 ns |    222.42 ns |    231.75 ns | 0.0173 |      72 B |\r\n```\r\n\r\nYes the regression can be confirmed.",
                                           "updatedAt":  "2024-07-07T12:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D3xHl",
                                           "createdAt":  "2024-07-07T12:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Analysis: there are many leaf calls of `TNumber.IsXXX` etc. If mono fails to inline and devirtualize all of them, it can be a source of regression, especially for regular (small) precision.",
                                           "updatedAt":  "2024-07-07T12:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D7HQX",
                                           "createdAt":  "2024-07-08T08:08:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Thank you for investigating. It\u0027s definitely possible but I cannot tell with certainty if they get inlined/devirtualized from top of my head.\r\n\r\nAnother idea I got when looking at your PR was the change from using `TryRunDouble`/`TryRunHalf` to generic `TryRun\u003cTNumber\u003e`. In many scenarios, the Mono LLVM codegen fallbacks to Mono mini codegen (much less optimized) when encountered with generics so eventually causing worse code to be generated. (fyi: @steveisok)",
                                           "updatedAt":  "2024-07-08T08:08:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E7goM",
                                           "createdAt":  "2024-07-16T07:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "It\u0027s closed to feature complete for .NET 9. Should we go with the regression, or revert the overloads for `float` and `double`? The generic version can be used for less-important types, including `Half` and `BFloat16`.\r\n\r\n/cc @fanyang-mono ",
                                           "updatedAt":  "2024-07-16T07:17:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FHwkp",
                                           "createdAt":  "2024-07-17T14:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "@huoyaoyuan Before answering your question, I would like to understand the purpose of your PR. Was the goal to simplify the library code or to enhance CoreCLR performance? If it was to simplify the library code, I would say revert the change, as ~20% regression is quite significant.\r\n\r\nAnother thing that I don\u0027t understand was that on you PR, you did run the microbenchmarks for Mono AOT and didn\u0027t see significant change there. But here you were able to see the regression when you run them again. I wonder what you did differently?",
                                           "updatedAt":  "2024-07-17T14:00:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIEAc",
                                           "createdAt":  "2024-07-17T14:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqJ51A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2024-07-17T15:09:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Was the goal to simplify the library code or to enhance CoreCLR performance?\r\n\r\nIt was simplification. I did not want to duplicate all the methods for another time when adding BFloat16. I think it should be fine to use the generic version for Half and BFloat16 since they are less important.\r\n\r\n\u003e Another thing that I don\u0027t understand was that on you PR, you did run the microbenchmarks for Mono AOT and didn\u0027t see significant change there. But here you were able to see the regression when you run them again. I wonder what you did differently?\r\n\r\nThe manual test was on Windows, and the script driven test was on WSL. Maybe the build on Windows is not clean and messed up.",
                                           "updatedAt":  "2024-07-17T14:36:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIOzM",
                                           "createdAt":  "2024-07-17T14:55:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODq5lwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-17T15:57:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2024-07-17T15:59:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2024-07-20T03:25:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I think in this case there\u0027s a small enough amount of code and this is a core enough API that duplicating it is \"ok\".\r\n\r\nBut notably this is just another scenario where there\u0027s a fairly substantial amount of code that needs to exist per supported `T` (around 200 lines) and the `T` we have to support is frequently 2 (byte and char), 3 (float, double, Half; potentially BFloat16 and others in the future), 10 (byte/sbyte, short/ushort, int/uint, long/ulong, nint/nuint), or even the full set of primitives. Generics are the solution to not only avoid this duplication, but also to increase maintainability and reduce the risk of bugs. There\u0027s many other scenarios where duplicating the code is not feasible or adds too much risk and so it is not always going to be a viable workaround to ensure that the Mono performance doesn\u0027t regress.\r\n\r\nIt would be great if we could take another look at what it would take to add even basic generic specialization support to Mono and try to prioritize that work as I expect it would have substantial improvements to the ecosystem and likely give Mono some reasonable size improvements on top of that. Even if the feature was scoped to only work for corelib using an internal `[MonoSpecialization(typeof(...)]` attribute so we could explicitly list the finite set of encounterable `T`, I think that would provide substantial wins and solve the more immediate problem.\r\n\r\nCC. @stephentoub, @jeffhandley as an FYI",
                                           "updatedAt":  "2024-07-17T15:17:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIZSc",
                                           "createdAt":  "2024-07-17T15:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "@huoyaoyuan It would be nice to get the PR of reverting merged before Preview7 snap (July 19), if possible.",
                                           "updatedAt":  "2024-07-17T15:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIn_a",
                                           "createdAt":  "2024-07-17T15:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqKW2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-17T15:56:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2024-07-17T15:59:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I\u0027ll try to get code ready tomorrow (July 18 morning US time).",
                                           "updatedAt":  "2024-07-17T15:43:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FZSBc",
                                           "createdAt":  "2024-07-19T03:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODq5mDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2024-07-20T03:26:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I would say that the 20% regression in floating number formatting microbenchmarks is acceptable. The scenarios targeted by Mono are very unlikely to be dominated by floating point number formatting. It is not a regression with significant customer impact.\r\n\r\nThe generic code should be smaller. I would expect that the change is a small improvement for IL-only binary size that is also important metric for scenarios targeted by Mono.\r\n\r\nAs Tanner pointed out, the patterns used by the offending PR is used in many places throughout the libraries. If Mono is not able to handle it well, it is a much bigger problem that floating point number formatting microbenchmarks. We should be looking at each case individually, but I do not think it makes sense to try to preserve unnaturally written code to prevent regressions at all costs.\r\n\r\n\u003e It would be great if we could take another look at what it would take to add even basic generic specialization support to Mono\r\n\r\nIt may help here and there, but I do not think it would fix the structural problem that a lot of new code is leveraging advanced RyuJIT optimizations. I believe that we will need to eventually figure out how to leverage RyuJIT here. It is not feasible to replay the RyuJIT investments in Mono codegens.",
                                           "updatedAt":  "2024-07-19T03:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FZeXa",
                                           "createdAt":  "2024-07-19T03:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e As Tanner pointed out, the patterns used by the offending PR is used in many places throughout the libraries. If Mono is not able to handle it well, it is a much bigger problem that floating point number formatting microbenchmarks.\r\n\r\nAnother case is the auxiliary `IUtfChar` type for UTF-8/UTF-16 unification. It\u0027s used much more intensively. Microbenchmark shows that coreclr appears to handle `IBinaryInteger` well. If mono can also handle it equivalently, switching to public type will help types outside CoreLib, namely BigInteger.\n\nIt should be another problem of generic specialization pattern though.",
                                           "updatedAt":  "2024-07-19T03:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FZlyO",
                                           "createdAt":  "2024-07-19T04:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e The generic code should be smaller. I would expect that the change is a small improvement for IL-only binary size that is also important metric for scenarios targeted by Mono.\r\n\r\nI believe the issue (and would appreciate confirmation from @fanyang-mono or @matouskozak) is that this is hitting the general USG (Universal Shared Generics) paths for Mono and so it actually results in a non-trivial increase to size (see also https://github.com/dotnet/runtime/issues/104952).\r\n\r\nDue to the lack of specialization, the USG paths for value types on Mono also end up being slower and lead to these types of perf slowdowns. To my understanding, MonoAOT also doesn\u0027t utilize any logic similar to NativeAOT and so is unable to discern when a given generic will only ever be encountered by a finite set of types, this causes it to generate code to handle any value type rather than the finite set that will actually be encountered for typical scenarios.\r\n\r\nThe believe is then that having a way to propagate this information to Mono and have it take advantage of that would go a long way towards mitigating these types of regressions.\r\n\r\n\u003e I believe that we will need to eventually figure out how to leverage RyuJIT here. It is not feasible to replay the RyuJIT investments in Mono codegens.\r\n\r\n👍, it is definitely a significant amount of work to mirror optimizations between all the possible backends (RyuJIT, MonoJIT, MonoInterpreter, MonoLLVM, etc). The wins when we have mirrored key optimizations have typically been positive when done, however, and I\u0027d imagine we want to continue targeting key scenarios for the foreseeable future (at least until we are at a point where an alternative is viable), so I\u0027m mostly just trying to call out the places that I believe would have the biggest impact based on my understanding of the problem space.",
                                           "updatedAt":  "2024-07-19T04:10:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FZtiT",
                                           "createdAt":  "2024-07-19T04:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqjdKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2024-07-19T04:36:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I believe the issue (and would appreciate confirmation from @fanyang-mono or @matouskozak) is that this is hitting the general USG (Universal Shared Generics) paths for Mono\r\n\r\nYes, it would be good to confirm the root cause.\r\n\r\nThe USG fallbacks typically introduce much worse regressions than 20%. Given that the regression is relatively small, my assumption was that it is caused by inliner and optimizer limitations.",
                                           "updatedAt":  "2024-07-19T04:34:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F3sye",
                                           "createdAt":  "2024-07-23T18:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrPAwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-07-23T18:40:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "I will need to analyze to generated code closely to confirm that. Will report back later.",
                                           "updatedAt":  "2024-07-23T18:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H0jzh",
                                           "createdAt":  "2024-08-09T20:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODto7Og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-08-12T07:41:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "I conducted my investigation based on microbenchmark [System.Tests.Perf_Single.ToStringWithFormat(value: 12345, format: \"R\")](https://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu%2022.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Single.ToStringWithFormat(value%3a%2012345%2c%20format%3a%20%22R%22).html). It regressed 26% after @huoyaoyuan \u0027s formatting PR.\r\n\r\nThe major regression caused by the JIT/code running time of the newly introduced methods highlighted on the right-hand side of the following screenshot.\r\n\u003cimg width=\"1598\" alt=\"Screenshot 2024-08-09 at 3 24 17 PM\" src=\"https://github.com/user-attachments/assets/03a59f1f-542f-4240-92ed-8cc78c238e8c\"\u003e\r\n\r\nThose methods are all generic methods which are not AOT\u0027ed. Mono doesn\u0027t have tiered JIT. I am not sure what kind of optimizations we could add to Mono JIT to make these extra methods calls go away. @lambdageek Feel free to comment, if you have more thoughts on this.",
                                           "updatedAt":  "2024-08-09T20:41:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H00Gx",
                                           "createdAt":  "2024-08-09T21:17:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Some of the other functions in there are also fairly hot.\r\n\r\nCases like `new Vector\u003cbyte\u003e`, `SpanHelpers.Fill`, `Unsafe.Bitcast`, etc. Many of them are intrinsic to Mono, so it\u0027s interesting that they are being left in as calls, right?",
                                           "updatedAt":  "2024-08-09T21:17:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QILVJ",
                                           "createdAt":  "2024-10-16T22:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "For .NET 9, we\u0027ll accept this regression as it is. The risk from the regression is impact to high volume number parsing type apps on Mono AOT, which should be a low risk. We will leave this open for .NET 10, ideally with a JIT investigation for why these didn\u0027t quality for AOT compiliation.",
                                           "updatedAt":  "2024-10-16T22:15:46Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "[mono][Perf] MonoAOT `Perf_Single` and `Perf_Double` Regressions on 6/3/2024 6:35:27 PM",
        "labels":  [
                       "arch-arm64",
                       "area-System.Numerics",
                       "os-linux",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-mono",
                       "needs-further-triage",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103347",
        "createdAt":  "2024-06-12T15:12:55Z",
        "number":  103347,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:01:29Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=768837\u0026view=results\r\nBuild error leg or test failing: System.Tests.HalfTests.ExplicitConversion_FromSingle\r\nPull request: \r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"ErrorPattern\": \"FAIL.*System.Tests.HalfTests.ExplicitConversion_FromSingle\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=768837\r\n**Error message validated:** `[FAIL.*System.Tests.HalfTests.ExplicitConversion_FromSingle`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/8/2024 7:39:18 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\r\n```\r\n[14:40:21] info: [FAIL] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[14:40:21] info: Assert.Equal() Failure: Values differ\r\n[14:40:21] info: Expected:   NaN\r\n[14:40:21] info: Actual:     NaN\r\n[14:40:21] info:    at System.AssertExtensions.Equal(Half expected, Half actual)\r\n[14:40:21] info:    at System.Tests.HalfTests.ExplicitConversion_FromSingle(Single f, Half expected)\r\n[14:40:21] info:    at System.Object.InvokeStub_HalfTests.ExplicitConversion_FromSingle(Object , Span`1 )\r\n[14:40:21] info:    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n[14:40:21] info: [FAIL] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[14:40:21] info: Assert.Equal() Failure: Values differ\r\n[14:40:21] info: Expected:   NaN\r\n[14:40:21] info: Actual:     NaN\r\n[14:40:21] info:    at System.AssertExtensions.Equal(Half expected, Half actual)\r\n[14:40:21] info:    at System.Tests.HalfTests.ExplicitConversion_FromSingle(Single f, Half expected)\r\n[14:40:21] info:    at System.Object.InvokeStub_HalfTests.ExplicitConversion_FromSingle(Object , Span`1 )\r\n[14:40:21] info:    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152061](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152061)|dotnet/runtime|[WasmTestOnV8-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152061\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31825302\u0026resultId=176088)|dotnet/runtime#113385|\r\n|[1151823](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151823)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151823\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31819568\u0026resultId=196666)|dotnet/runtime#119826|\r\n|[1151435](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151435)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151435\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31809040\u0026resultId=196665)|dotnet/runtime#119833|\r\n|[1150109](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150109)|dotnet/runtime|[WasmTestOnV8-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150109\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31769214\u0026resultId=176088)|dotnet/runtime#119786|\r\n|[1149008](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31735918\u0026resultId=186346)|dotnet/runtime#119599|\r\n|[1142958](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142958)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142958\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31513342\u0026resultId=196387)|dotnet/runtime#119480|\r\n|[1142816](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142816)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142816\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31509556\u0026resultId=196524)|dotnet/runtime#119477|\r\n|[1142176](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142176)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142176\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31483738\u0026resultId=196524)|dotnet/runtime#119354|\r\n|[1140813](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140813)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140813\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31435042\u0026resultId=186345)|dotnet/runtime#119410|\r\n|[1138603](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138603)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138603\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31364542\u0026resultId=197041)|dotnet/runtime#119310|\r\n|[1136810](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136810)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136810\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31303068\u0026resultId=196506)|dotnet/runtime#118991|\r\n|[1135819](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135819)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135819\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31268500\u0026resultId=196506)|dotnet/runtime#118097|\r\n|[1135770](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135770)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135770\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31267230\u0026resultId=186328)|dotnet/runtime#119226|\r\n|[1132026](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132026)|dotnet/runtime|[WasmTestOnChrome-ST-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132026\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31149356\u0026resultId=186321)|dotnet/runtime#119093|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|5|14|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvCgSlQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6A8UE8",
                                           "createdAt":  "2024-06-12T15:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-12T15:13:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A8Ujw",
                                           "createdAt":  "2024-06-12T15:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-12T15:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GoXZA",
                                           "createdAt":  "2024-07-30T16:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This issue is matching to tests jobs which log test names.  Need to further constrain the match.",
                                           "updatedAt":  "2024-07-30T16:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hj8d9",
                                           "createdAt":  "2024-08-07T21:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Just hit this in #106040 for WasmTestOnChrome-ST-System.Runtime.Tests\r\nconfig: net9.0-browser-Release-wasm-Mono_Release-WasmTestOnChrome\r\n```\r\n[18:27:21] info: [STRT] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[18:27:21] info: [FAIL] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[18:27:21] info: Assert.Equal() Failure: Values differ\r\n[18:27:21] info: Expected:   NaN\r\n[18:27:21] info: Actual:     NaN\r\n[18:27:21] info:    at System.AssertExtensions.Equal(Half expected, Half actual)\r\n[18:27:21] info:    at System.Tests.HalfTests.ExplicitConversion_FromSingle(Single f, Half expected)\r\n[18:27:21] info:    at System.Object.InvokeStub_HalfTests.ExplicitConversion_FromSingle(Object , Span`1 )\r\n[18:27:21] info:    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n[18:27:21] info: [STRT] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[18:27:21] info: [FAIL] System.Tests.HalfTests.ExplicitConversion_FromSingle(f: NaN, expected: NaN)\r\n[18:27:21] info: Assert.Equal() Failure: Values differ\r\n[18:27:21] info: Expected:   NaN\r\n[18:27:21] info: Actual:     NaN\r\n[18:27:21] info:    at System.AssertExtensions.Equal(Half expected, Half actual)\r\n[18:27:21] info:    at System.Tests.HalfTests.ExplicitConversion_FromSingle(Single f, Half expected)\r\n[18:27:21] info:    at System.Object.InvokeStub_HalfTests.ExplicitConversion_FromSingle(Object , Span`1 )\r\n[18:27:21] info:    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\r\nNot sure why it didn\u0027t match in build analysis",
                                           "updatedAt":  "2024-08-07T21:10:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hj9tV",
                                           "createdAt":  "2024-08-07T21:09:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The test here should likely be filtered out on WASM for the time being, with a tracking issue against it.\r\n\r\nWASM isn\u0027t technically doing anything wrong here, normalizing `NaN` is fully allowed by the IEEE 754 spec. However, it is undesirable and not recommended for most cases and should typically be avoided if possible.\r\n\r\nWASM also has instructions that should guarantee the underlying bits are preserved, so it should be possible for it to be preserved and match the behavior of other targets (both for RyuJIT and Mono).",
                                           "updatedAt":  "2024-08-07T21:09:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hr_gr",
                                           "createdAt":  "2024-08-08T18:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Hm the weird thing here is that this seems to be an intermittent failure. I\u0027ve checked and we definitely have passing runs of the test on the exact same config.",
                                           "updatedAt":  "2024-08-08T18:51:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HsAQX",
                                           "createdAt":  "2024-08-08T18:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Is there perhaps a difference in the WASM version or configuration options for the failing platform as compared to others?\r\n\r\nMaybe some machine specific issue that\u0027s only triggering in some scenarios?",
                                           "updatedAt":  "2024-08-08T18:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HsBeG",
                                           "createdAt":  "2024-08-08T18:56:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtUGKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2024-08-08T19:00:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "the tests are running in containers on the same helix queue so even the VM/machine should be the same...\r\n\r\nPassing run: https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-106013-merge-6f4bade3cf974edcb8/WasmTestOnChrome-ST-System.Runtime.Tests/1/console.3fb2056a.log?helixlogtype=result\r\n\r\nFailing run: https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-106040-merge-0b77eabb49f848cab5/WasmTestOnChrome-ST-System.Runtime.Tests/1/console.5edeb661.log?helixlogtype=result\r\n\r\nThe only difference is the order of the tests, but I\u0027m having a hard time imagining how that could be relevant",
                                           "updatedAt":  "2024-08-08T18:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HsDsC",
                                           "createdAt":  "2024-08-08T19:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "~~hm one interesting thing is that the failing run reports _two_ tests that failed i.e. five total, but the passing run only ran four NaN tests...~~ that seems just a log quirk, the testResult.xml only contains four NaN tests and two of them failing.",
                                           "updatedAt":  "2024-08-09T13:04:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HzFaq",
                                           "createdAt":  "2024-08-09T16:25:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "According to Kusto test data this started happening on or before 2024-06-06.\r\nI also found that it\u0027s happening on Windows-based containers too so it\u0027s not related to the underlying OS.\r\n\r\nGiven it\u0027s only happening intermittently and doesn\u0027t appear to be a blocker for 9.0 I\u0027m moving it to 10.0",
                                           "updatedAt":  "2024-08-09T17:41:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jj719",
                                           "createdAt":  "2024-08-23T22:48:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Couple of things could be responsible which might be explained by the test order:\r\n1. jiterp might be kicking in\r\n2. browser JIT might be kicking in\r\n\r\nBut I\u0027d like to push back against hte idea that bitwise comparison of two NaNs is a good idea.  there are many NaN bitpatterns; all are semantically indistinguishable.  Reasonable code should not depend on the bit pattern staying identical after computation",
                                           "updatedAt":  "2024-08-23T22:48:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jj-8i",
                                           "createdAt":  "2024-08-23T23:09:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e But I\u0027d like to push back against hte idea that bitwise comparison of two NaNs is a good idea. there are many NaN bitpatterns; all are semantically indistinguishable. Reasonable code should not depend on the bit pattern staying identical after computation\r\n\r\nThis is a core thing frequently depended upon for SIMD, NaN boxing, etc. It also follows the IEEE 754 \"recommended\" guidelines, even if it\u0027s not strictly required by the IEEE 754 spec.\r\n\r\nThe WASM 1.0 and 2.0 specs similarly:\r\n* distinguish `canonical NaN` from `arithmetic NaN` (a nan with payload `n`)\r\n* provide explicit APIs for getting the bits of any `NaN`\r\n  * `fbits(+/-nan(n))` is defined as `fsign(+/-) * 1^expon(n) * ibits(sinif(n))`\r\n  * which is to say, its doing `BitConverter.SingleToInt32Bits` or `BitConverter.DoubleToInt64Bits` or vice-versa\r\n* recommend that operators propagate `NaN` payloads (matching the IEEE 754 recommendation)\r\n* provides explicit support for specifying the payload of a `NaN`\r\n\r\nHowever, the WASM specs do notably explicitly allow non-determinism for `fneg`, `fabs`, and `fcopysign`; explicitly specifying that the sign and payload of the result are non-deterministic\r\n\r\nSo while a given implementation is technically allowed to do \"other things\" (such as always canonicalizing NaN), its highly irregular to do so and that\u0027s why we have tests that validate such conversions are preserving bits and propagating payloads as expected. -- It\u0027s also notably cheaper to propagate and to preserve NaN as is then it is to canonicalize (particularly for things like `fbits`), so there\u0027s really no reason for a browser to deviate here",
                                           "updatedAt":  "2024-08-23T23:10:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NTjzi",
                                           "createdAt":  "2024-09-24T09:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@tannergooding @lambdageek what are the next steps here ?",
                                           "updatedAt":  "2024-09-24T09:12:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Phcl8",
                                           "createdAt":  "2024-10-11T18:13:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Should the milestone be 10? This is hitting 9.0 PRs too. Example: \n\n- 9.0 PR: https://github.com/dotnet/runtime/pull/108326\n- Job: https://dev.azure.com/dnceng-public/public/_build/results?buildId=839877\u0026view=logs\u0026j=d4e38924-13a0-58bd-9074-6a4810543e7c\u0026t=7a581d54-fbdb-5b9d-4377-cc346f489112\u0026l=104\n- Log: https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-108326-merge-06a2d595e69e44cd8b/WasmTestOnV8-ST-System.Runtime.Tests/1/console.46ef387c.log?helixlogtype=result",
                                           "updatedAt":  "2024-10-11T18:13:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68D2rv",
                                           "createdAt":  "2025-08-05T13:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "There are AOT and Interp cases. Does trier-up to jiterp make a difference ?\nSpec is at https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation\n\nWhy this is only failing for `Half` ? \nWhy we don\u0027t see similar problems for `HalfTests.ExplicitConversion_FromDouble` ?\nWhy we don\u0027t see similar problems for float and double tests ?\n\nI wonder if this is emcc/lib-c problem or browser or mono problem. \nHow is mono interp on wasm different from interp on other targets ?\n\nWhat would be simplest JS or C code that could reproduce it ?\nAlso what typically triggers different behavior ? It seems we are only failing the C# test sometimes.\n",
                                           "updatedAt":  "2025-08-05T13:03:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68FNia",
                                           "createdAt":  "2025-08-05T14:32:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "`Half` doesn\u0027t have direct WASM support, it\u0027s via software. So I expect this is rather an issue with one of the calls made by the software implementation: \u003chttps://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Half.cs,620\u003e\n\nThis could include `Max`, `BitConverter.UInt32BitsToSingle`, `BitConverter.SingleToUInt32Bits`, or `Abs`.\n\nThe conversion from double isn\u0027t as optimized: \u003chttps://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Half.cs,571\u003e and isn\u0027t doing any calls like `Max` or `Abs`",
                                           "updatedAt":  "2025-08-05T14:32:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68KBKV",
                                           "createdAt":  "2025-08-05T21:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "moving to 11, given the non-deterministic behavior my guess is a chrome/v8 issue",
                                           "updatedAt":  "2025-08-05T21:44:30Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "[browser] HalfTests.ExplicitConversion_FromSingle failing due to NaN != NaN",
        "labels":  [
                       "arch-wasm",
                       "area-System.Numerics",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103605",
        "createdAt":  "2024-06-17T22:16:53Z",
        "number":  103605,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAKZDg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-17T22:59:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kyoyama-kazusa",
                                            "createdAt":  "2024-06-18T17:13:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2024-06-19T09:04:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2025-02-12T19:25:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uncheckederror",
                                            "createdAt":  "2025-02-13T01:12:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neptrue-Lin",
                                            "createdAt":  "2025-03-17T10:57:55Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-07-16T06:28:09Z",
        "body":  "e.g.\n```diff\npublic interface IAdditionOperators\u003cTSelf, TOther, TResult\u003e\n    where TSelf : IAdditionOperators\u003cTSelf, TOther, TResult\u003e?\n+   , allows ref struct\n+   where TOther : allows ref struct\n+   where TResult : allows ref struct\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh7Brmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BnKwf",
                                           "createdAt":  "2024-06-17T22:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-17T22:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BnLEY",
                                           "createdAt":  "2024-06-17T22:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGKKAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-06-17T22:59:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-06-18T01:09:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2024-06-18T01:22:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-06-18T10:19:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kyoyama-kazusa",
                                                                               "createdAt":  "2024-06-18T17:13:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2024-06-19T07:42:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2024-06-19T09:04:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IDisposable",
                                                                               "createdAt":  "2024-06-19T15:16:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2025-02-12T19:26:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "And related:\n```C#\nIParsable\nISpanParsable\nIUtf8SpanParsable\n```\n?",
                                           "updatedAt":  "2024-06-17T22:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HsGub",
                                           "createdAt":  "2024-08-08T19:10:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Moving this to .NET 10\r\n\r\nFor cases like `IParsable`, I think the answer is very clearly \"yes\".\r\n\r\nI think it also more broadly applies to the generic operator interfaces (`IAdditionOperators`), which shouldn\u0027t be problematic.\r\n\r\nFor the numeric interface (`INumber`) it likely needs a little bit of prototyping and proof of concept to validate things all work as expected and needs to consider how this impacts the ability to version the interfaces due to DIMs. I believe it should work out due to the recursive constraint, the fact that the methods are typically static, and that they take `TSelf` (not `INumber` or another interface which would require boxing), but we should confirm and document as part of that process.",
                                           "updatedAt":  "2024-08-08T19:10:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Should the generic math interfaces be updated with `allows ref struct`?",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103652",
        "createdAt":  "2024-06-18T08:35:02Z",
        "number":  103652,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:19:48Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"TigerUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":false,\"Mono\":true,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"LLVM:true\",\"MonoAOT:true\",\"MonoInterpreter:false\",\"RunKind:micro_mono\"]},\"RegressionDate\":\"2024-06-15T14:08:36\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [5ba3c05f3bf0ea789421c6e69d3983ecdc086f36](https://github.com/dotnet/runtime/commit/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36)\nCompare | [4834a507be8698d901ff36d10284ca8703743b93](https://github.com/dotnet/runtime/commit/4834a507be8698d901ff36d10284ca8703743b93)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36...4834a507be8698d901ff36d10284ca8703743b93)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_Vector2\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TransformNormalByMatrix3x2Benchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Vector2.TransformNormalByMatrix3x2Benchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Vector2.cs#L134-#L135\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXY/SQBR9N/E/zFuLdqELqISkRsBVVwGRbfbFGDK0Fzo6H82d6W67Mf52ZwriwiZrfWgz9845556Z3tsZUF0gCJBGP/lJbjNAIOOC8XQJuSJRRLxUGQmmg4U0TIB3jBojlUlW4xA2upMBTXVHUCZPgCNMMmYgMbYaYZL4Xvmy7wXEoyjsonVAx6DNnApwmm+8q0obEO15IQBZottuV7cXgJvVtRVT2G3H1oLeKBRz+1A+rmbUICt7ZXcM1pug+OOvl2UhJ0pu2LZAapiS+qs3USJnvI5mKgXvG4l+Ec8wC0+9p48xp9Pr2R84FvA4eKakGn2O/wt/KQ1gjmDfe96Gcv0Pok19YjLdEwRLUK2EFbvHYhpEbir/AXukTKsB7FLpKb8R9Ydtgv+oL+SWSWiCXWxVXOXNoFmlWUL5ApVQLtOU+KFaI0vfc7WmnN3VuSa0ZXfZtMJFmduGdWPlevm4uyfKjhJgrPL96nhSYku7MlTk5DVJqQE3dX437PbPwv7Z+SAOB8Nefxiet18Nuv1w8OJ5GA7D0JXQhbDdzu6AUNyuBC39WtA5CMizFllXJxWCw7QFrpO+FFCA1clRfbfD9QC8BF1wE6F1nfr3TrLLj24A6dYq9VoBqaWccPQOGciUV4eMu6w6cJbR7gESd8Yko2jILTMZ8bW9PNDRgROQMlG8EDI69VTt8jrambBAwwyHyHtrr87+X6p96CjEl7rlcjrnzES0BN36DTCqVEgBBQAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 4.13 ns | 8.43 ns | 2.04 | 0.10 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TransformByMatrix3x2Benchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Vector2.TransformByMatrix3x2Benchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Vector2.cs#L124-#L125\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVU0W7TMBR9R+If/JYUsjZLq2mrFERbBhu0o3TRXhCq3OS2McR2dG1vyYT4duyslLWTRniJ7JNzzj127s0MqDIIHIRWL36SuxwQyNiwIltAKUkcEy+TWoDuoRGacfD2WWOkIs0bHsJa9XKgmepxysQBcYRpzjSk2lYjTBDfq04GXkA8itwuOjt2AkpfUQ7O8613XSsNvHtlOCBLVde9Vd054Hp5Y80kRt3ERlBriXxcz6hGVvWraAw2Faf442+KhRETKdZsY5BqJoX66k0kL1nR7GYyA+8biX8RTzNLz7yXzymn05vZHzoaeJ48k0KOPif/xb8UGrBEsM+tbk0L9Q+hhT4xkW0FnKUol9yaPVIxBbzUtf9EPZK604J2KdW0uOXNJ23D/6jOxYYJaMOdb2RSl+2oea1YSos5Si4d0lZ4Ua+QZR8KuaIFu2+wNrJFtGhb4bwqbau6gXJdvN/XE2mHCDCR5Xa1PyOJlV1rykvyhmRUg5s3PwqjwVE4ODo+TcLTYX8wDI+7Z1H/7CTqvw7DYRi6Espw2+3sHgjFzZLTym8MXYKAvOqQVX1QIdjNWeA66YsBA9anRPndjtUT8gKUKXSMNnXmPzrJAz66BaQb69TvBKSxcsbxe2QgsqLeIe6ymo2LjPYdIHFnTHOKmtwxnRNf2csDFe80AalSWRgu4sNM9QOu4ocQlqiZLiD23tmrs3+Wert1EuIL1XGYKgumY1qB6vwGGJ9mO/sEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 4.50 ns | 9.47 ns | 2.10 | 0.11 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Vector2_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Vector2_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Vector2.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Vector2*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Vector2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Vector2*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Vector2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_Vector2.TransformNormalByMatrix3x2Benchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_Vector2.TransformByMatrix3x2Benchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [5ba3c05f3bf0ea789421c6e69d3983ecdc086f36](https://github.com/dotnet/runtime/commit/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36)\nCompare | [4834a507be8698d901ff36d10284ca8703743b93](https://github.com/dotnet/runtime/commit/4834a507be8698d901ff36d10284ca8703743b93)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36...4834a507be8698d901ff36d10284ca8703743b93)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_Vector3\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[AbsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Vector3.AbsBenchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Vector3.cs#L66-#L67\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUUW/TMBDH35H4Dn5LAlmbtWVUlYJoyxiDdpQu2gtClZtcG0NsR2d7aybEZ8dOS1k7aYSXyL78/v87O3eZAlUGgYPQ6tlPcpcDAhkZVmRzKCWJY+JlUgvQbTRCMw7eITVCKtK85hBWqp0DzVSbUyaOwCGmOdOQapuNMEF8b3PW80LiUeR2EezpBJS+ohyc51vvulIaeOvKcECWqpZ7q1ozwNXixppJ7LaGSzUCWwSn+ONv0rkRYylWbG2QaiaF+uqNJS9ZUe+mMgPvG4l/EU8zi2fe86eUk8nN9A+OBp6Gp1LI4efkv/hLoQFLBPvc6Va0UP8Q2tAnJrKdgLMU5YJbswcqpoCXuvIfqYdSBw2wS6kmxS2vv2AT/qM6F2smoAk7W8ukKpuheaVYSosZSi5dpKnwQ7VEll0UckkLdl/HmsjmnXnTDOeb0nammx/XtIdtPJZ2ZgATWe5WhyORWNm1prwkb0hGNbjx8jtRp3cS9U5O+0nUH3R7g85p66zf77163X0ZRYMocimU4bbb2T0QiusFpxu/NnQVhORFQJbVUYZwP1ah66QvBgxYnxLldztFj+A5KFPoGG3Vmf/gJNv48BaQrq1TNwhJbeWM4/fIQGRFtY+4y6o3rmS07wCJO2OaU9Tkjumc+MpeHqh4rwnJJpWF4SI+rqnaxlW8LcKCmukCYu+dvTr7I6l2WychvlCBi6myYDqmG1DBb4XOa8rqBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 3.81 ns | 8.96 ns | 2.35 | 0.18 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Vector3_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Vector3.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Vector3*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Vector3* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Vector3*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Vector3* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_Vector3.AbsBenchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [5ba3c05f3bf0ea789421c6e69d3983ecdc086f36](https://github.com/dotnet/runtime/commit/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36)\nCompare | [4834a507be8698d901ff36d10284ca8703743b93](https://github.com/dotnet/runtime/commit/4834a507be8698d901ff36d10284ca8703743b93)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36...4834a507be8698d901ff36d10284ca8703743b93)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_Matrix3x2\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[InvertBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Matrix3x2.InvertBenchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Matrix3x2.cs#L94-#L95\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVU0W7TMBR9R+If/JYEsja0GVSVgmjLGIV2lC7iBaHKTW4bQ2xH186WTIhvx05LWTtphJfIPjnn3GvnnsyBqhKBg9DqyU9ymwECGZcsT5dQSBJFxEmlFqC7WArNODjHrDFSkWQND2GjuhnQVHU5ZeKEOMIkYxoSbaoRJojrVC9DxycORW4W3oEdg9JXlIP1fONc10oD71yVHJAlqmPfqs4CcLOaU42s6le9zlTcAOoxmE44xR9/Ky9LMZFiw7YlUs2kUF+dieQFy5vdXKbgfCPRL+JoZuip8/Qx5Wz2Zf6HjiU8Tp5LIUef4v/iT4UGLBDMc6/b0Fz9Q2igj0ykewFnCcoVN2b3VEwBL3TtPlCPpPZa0KZSzfIb3nzGNvwP6kJsmYA23MVWxnXRjprViiU0X6Dk0iJthe/rNbL0MpdrmrO7BmsjW/aWbStcVIUZTxsiO7nHszyRJjiAsSz2q+NcxEZ2rSkvyGuSUg02Y24v6IVnQXj2YhAHg2E/HPZedcJBeH4eBM+DYBgEtoQquZl2dgeE4nbFaeU2hrYDnzzzyLo+qeAfsuXbSfpcQgnGp0D53eTyAXkJqsx1hKbr1L13kh0+MpGjW+PU93zSWFnj6B0yEGleHxB7Wc3GtozmHSCxZ0wyiprcMp0RV5nLAxUdND6pEpmXXESnPdU7XEW7JgxRM51D5Lw1V2f+JvV+ayXEFcqzmCpypiNagfJ+A2W2dWLvBAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 3.45 ns | 7.11 ns | 2.06 | 0.09 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[MultiplyByMatrixBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Matrix3x2.MultiplyByMatrixBenchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Matrix3x2.cs#L100-#L101\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0JZG3WVmVUCqIdAwbNKF3FC0KVm9w2Bn9E186WTIjfjp2WsnbSCC+RfXLOudfOPUmA6hJBgDT6yU9ymwMCmZSMZ3MoFIlj4mXKSDBdLKVhArxD1gSpTPOGh7DW3RxopruCMnlEHGOaMwOpsdUIk8T3quHAC4lHUdhFsGcvQJsrKsB5vvaua21AdK5KAchS3XFvdWcGuF4m1CCr+lWvk5TcsILXk3qLTcD2JCj++NvDvJTnSq7ZpkRqmJL6q3euRMF4s0tUBt43Ev8inmGWnnlPH1NOp1+SP3Qs4XFyoqQaf1r8F/9SGsACwT53ujXl+h9CC31kMtsJBEtRLYU1u6diGkRhav+BeqxM0IJ2qfSU34jmg7bhf9AXcsMktOHONmpRF+2oea1ZSvkMlVAOaSt8X6+QZe+4WlHO7hqsjWzem7etcFEVdlBdnNwMH071ubIRAlyoYrc6TMjCyq4NFQV5RTJqwKXN70W9wUk0ODk9W0Rno/5g1HvRGZ4Oh4Po5fMoGkWRK6FLYaed3QGhuFkKWvmNoesgJM8CsqqPKoT7lIVukj6XUIL1KVB9twl9QJ6DtgmL0Xad+fdOssXHN4B0Y536QUgaK2ccv0UGMuP1HnGX1Wxcy2jfARJ3xjSnaMgtMznxtb080PFeE5IqVbwUMj7uqd7iOt42YYmGGQ6x98Zenf2v1LutkxBf6sBhuuDMxLQCHfwGmrcg4/kEAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 16.25 ns | 19.51 ns | 1.20 | 0.12 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Matrix3x2_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Matrix3x2_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Matrix3x2.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Matrix3x2*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Matrix3x2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Matrix3x2*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Matrix3x2* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_Matrix3x2.InvertBenchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_Matrix3x2.MultiplyByMatrixBenchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [5ba3c05f3bf0ea789421c6e69d3983ecdc086f36](https://github.com/dotnet/runtime/commit/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36)\nCompare | [4834a507be8698d901ff36d10284ca8703743b93](https://github.com/dotnet/runtime/commit/4834a507be8698d901ff36d10284ca8703743b93)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36...4834a507be8698d901ff36d10284ca8703743b93)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_Matrix4x4\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[CreateBillboardBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_Matrix4x4.CreateBillboardBenchmark.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Numerics.Vectors/Perf_Matrix4x4.cs#L57-#L58\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpVUXW/TMBR9R+I/+C0JZG3WRmxUCqItAwbtKF3FC0KVm9w2Bn9E186WTIjfjp2WsnbSCC+RfXLOucfOvZkC1SWCAGn0k5/kNgcEMioZz+ZQKJIkxMuUkWC6WErDBHiHrBFSmeYND2GtuznQTHcFZfKIOMQ0ZwZSY6sRJonvVS9iLyQeRWEXwZ69AG2uqADn+dq7rrUB0bkqBSBLdce91Z0Z4Ho5pQZZFVdxZ4xADYwY5ytFMRuBjSQo/vgbYV7KsZJrtimRGqak/uqNlSgYb3ZTlYH3jSS/iGeYpWfe08eUk8mX6R86lvA4eaqkGn5a/Bf/UhrAAsE+d7o15fofQgt9ZDLbCQRLUS2FNbunYhpEYWr/gXqoTNCCdqn0hN+I5nu24X/QF3LDJLThzjZqURftqHmtWUr5DJVQDmkrfF+vkGXvuFpRzu4arI1s3pu3rXBRFbZP3TS5Fj5s6rGyEwS4UMVudTggCyu7NlQU5BXJbDu7YfN7US8+ieKT0/NFdD7ox4Pey85Z/zQ+650+j6JBFLkSuhS229kdEIqbpaCV3xi6BCF5FpBVfVQh3A9Z6DrpcwklWJ8C1Xc7oA/Ic9AlNwna1Jl/7yRbfHgDSDfWqR+EpLFyxslbZCAzXu8Rd1nNxkVG+w6QuDOmOUVDbpnJia/t5YFO9pqQVKnipZDJcaZ6i+tkG8ISDTMcEu+NvTr7W6l3WychvtSBw3TBmUloBTr4DR8ucN/4BAAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 41.59 ns | 45.02 ns | 1.08 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Matrix4x4_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_Matrix4x4.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Matrix4x4*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Matrix4x4* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_Matrix4x4*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter System.Numerics.Tests.Perf_Matrix4x4* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_Matrix4x4.CreateBillboardBenchmark\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [5ba3c05f3bf0ea789421c6e69d3983ecdc086f36](https://github.com/dotnet/runtime/commit/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36)\nCompare | [4834a507be8698d901ff36d10284ca8703743b93](https://github.com/dotnet/runtime/commit/4834a507be8698d901ff36d10284ca8703743b93)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/5ba3c05f3bf0ea789421c6e69d3983ecdc086f36...4834a507be8698d901ff36d10284ca8703743b93)\nConfigs | CompilationMode:tiered, LLVM:true, MonoAOT:true, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in SIMD.RayTracerBench\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Bench - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=true_MonoAOT=true_MonoInterpreter=false_RunKind=micro_mono/SIMD.RayTracerBench.Bench.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/SIMD/RayTracer/RayTracerBench.cs#L95-#L96\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACpWUb2/TMBDG3yPxHfwuCWRt1pYxKgXRdgM6WhhZxBuEJje5Nkb+E52drZkmPjt2WsraSSO8iezL73nu7NxlDlRXCAKk0c/uyW0BCGRcMZ4nUCoSx8TLlZFgulhJwwR4+9QYqcyKhkNY6m4BNNddQZk8AEeYFcxAZmw2wiTxvfXJwAuJR1HYRbCjU9DmMxXgPN95V9P5WSehdYo0AxyDTdZpnn/tk0pOlFyyVYXUMCX1d2+iRMl4s5urHLwfJP5FPMMsnnvPn1LOZt/mf3Cs4Gl4rqQafUn/i59KA1gi2OdWt6Rc/0NoQ5+YzLcCwTJU18KaPVAxDaI0tf9IPVImaIFNlZ7xG9F8qzb8hT6XKyahDXu5UmldtkOLWrOM8ktUQrlIW+HHeoEs/8DVgnJ218TayJJe0jbD+boEtBMgm/bcb9iJstMBmKpyu9pv/tTKrgwVJXlLcmrADZLfi3qDo2hwdHyaRqfD/mDYf905edN7dRxFL6NoGEUuha6EoMjugFBcXQu69htDV0FIXgRkUR9kCHcDFLpO+lpBBdanRPXTDt8jOAFdcROjrTr3H5xkEx/dANKVdeoHIWmsnHH8HhnInNe7iLusZuNKRvsOkLgzZgVFQ26ZKYiv7eWBjneakKwzxSsh48Oa6k1cx5siLGiY4RB7Z/bq7C+j3m6dhPhSBy6mS85MTNegg9/w74FF1AQAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 216.18 ms | 239.65 ms | 1.11 | 0.00 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/SIMD.RayTracerBench_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_18_2024/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dtrue_MonoAOT%3Dtrue_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/SIMD.RayTracerBench.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n   \u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Files either built locally (with build.(sh/cmd) or downloaded from payload above (if same system setup) (in this order))\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- AOT MONO build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release /p:CrossBuild=false /p:MonoLLVMUseCxx11Abi=false`\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory \nmkdir -p $RunDir/artifacts/bin/aot/sgen\nmkdir -p $RunDir/artifacts/bin/aot/pack\ncp -r $RunDir/artifacts/obj/mono/$RunOS.$RunArch.Release/mono/* $RunDir/artifacts/bin/aot/sgen\ncp -r $RunDir/artifacts/bin/microsoft.netcore.app.runtime.$RunOS-$RunArch/Release/* $RunDir/artifacts/bin/aot/pack\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027SIMD.RayTracerBench*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter SIMD.RayTracerBench* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir/artifacts/bin/aot/sgen/mini/mono-sgen --customruntimepack $RunDir/artifacts/bin/aot/pack --aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages --buildTimeout 1200\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create aot directory\nmkdir $RunDir\\artifacts\\bin\\aot\\sgen\nmkdir $RunDir\\artifacts\\bin\\aot\\pack\nxcopy $RunDir\\artifacts\\obj\\mono\\$RunOS.$RunArch.Release\\mono $RunDir\\artifacts\\bin\\aot\\sgen\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\microsoft.netcore.app.runtime.$RunOSId-$RunArch\\Release $RunDir\\artifacts\\bin\\aot\\pack\\ /e /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance \ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027SIMD.RayTracerBench*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack --aotcompilermode llvm --logBuildOutput --generateBinLog\"\n\n# Individual Commands:\n# Restore \ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter SIMD.RayTracerBench* --anyCategories Libraries Runtime \" --category-exclusion-filter NoAOT NoWASM --runtimes monoaotllvm --aotcompilerpath $RunDir\\artifacts\\bin\\aot\\sgen\\mini\\mono-sgen.exe --customruntimepack $RunDir\\artifacts\\bin\\aot\\pack -aotcompilermode llvm --logBuildOutput --generateBinLog \" --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages --buildTimeout 1200\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### SIMD.RayTracerBench.Bench\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiC2QXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Buw6u",
                                           "createdAt":  "2024-06-18T16:32:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-18T16:32:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Buw8z",
                                           "createdAt":  "2024-06-18T16:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Could it be related to https://github.com/dotnet/runtime/pull/103462 @tannergooding ?",
                                           "updatedAt":  "2024-06-18T16:32:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BuxpH",
                                           "createdAt":  "2024-06-18T16:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-18T16:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bu199",
                                           "createdAt":  "2024-06-18T16:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Possible improvements https://github.com/dotnet/perf-autofiling-issues/issues/36460 , https://github.com/dotnet/perf-autofiling-issues/issues/36502?",
                                           "updatedAt":  "2024-06-18T17:06:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B3iOa",
                                           "createdAt":  "2024-06-19T14:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "@matouskozak Did the same regression happen on arm64?",
                                           "updatedAt":  "2024-06-19T14:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B3p6r",
                                           "createdAt":  "2024-06-19T14:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmR3og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2024-06-19T17:35:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e @matouskozak Did the same regression happen on arm64?\r\n\r\nI\u0027ve only seen it on x64 so far.",
                                           "updatedAt":  "2024-06-19T14:25:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ILZBf",
                                           "createdAt":  "2024-08-12T18:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtz9Ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-08-13T10:35:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Moving this to .NET 10\r\n\r\nx64 is fairly low priority for Mono as is and we have a couple known issues being tracked around its SIMD support not working or generally not being available on some backends (it works for MonoLLVM but not for MonoJIT, for example).\r\n\r\nThere\u0027s planned work to improve this, iteratively, and we are seeing significant improvements for the higher priority Mono platforms (Arm64 and WASM) and the platforms where we know x64 is accelerated (such as MonoLLVM).\r\n\r\nCC. @matouskozak, please feel free to disagree in which case I can look at getting a more targeted fix in for MonoJIT x64",
                                           "updatedAt":  "2024-08-12T18:45:25Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[mono][Perf][x64] Matrix 3x2 Regressions on 6/15/2024 2:08:36 PM",
        "labels":  [
                       "area-System.Numerics",
                       "os-linux",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-mono",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104586",
        "createdAt":  "2024-07-09T04:00:36Z",
        "number":  104586,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:01:46Z",
        "body":  "```\r\n    System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat [FAIL]\r\n      System.OutOfMemoryException : Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n      Stack Trace:\r\n        /_/src/libraries/System.Private.CoreLib/src/System/String.cs(108,0): at System.String.Ctor(Char[] value, Int32 startIndex, Int32 length)\r\n        /_/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigNumber.cs(1181,0): at System.Numerics.BigNumber.FormatBigInteger(Boolean targetSpan, BigInteger value, String formatString, ReadOnlySpan`1 formatSpan, NumberFormatInfo info, Span`1 destination, Int32\u0026 charsWritten, Boolean\u0026 spanSuccess)\r\n        /_/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigNumber.cs(1001,0): at System.Numerics.BigNumber.FormatBigInteger(BigInteger value, String format, NumberFormatInfo info)\r\n        /_/src/libraries/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs(1582,0): at System.Numerics.BigInteger.ToString(String format)\r\n        /_/src/libraries/System.Runtime.Numerics/tests/BigInteger/BigIntegerToStringTests.cs(515,0): at System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=733224\r\nBuild error leg or test failing: System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat\r\nPull request: https://github.com/dotnet/runtime/pull/104501\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"ToString_ValidLargeFormat [FAIL]\", \"OutOfMemoryException\"],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=733224\r\n**Error message validated:** `[ToString_ValidLargeFormat [FAIL] OutOfMemoryException`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/9/2024 4:01:10 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152905](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152905)|dotnet/runtime|[System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152905\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31848534\u0026resultId=103263)||\r\n|[1143994](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994)|dotnet/runtime|[System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31552812\u0026resultId=104202)|dotnet/runtime#119523|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|2|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpiU2zQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EHAbB",
                                           "createdAt":  "2024-07-09T04:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-09T04:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mJTbN",
                                           "createdAt":  "2025-04-08T19:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Can\u0027t be blocking-outerloop if it\u0027s \"Future\"",
                                           "updatedAt":  "2025-04-08T19:24:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[outerloop] `System.Numerics.Tests.ToStringTest.ToString_ValidLargeFormat` faling with `OutOfMemoryException`",
        "labels":  [
                       "area-System.Numerics",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104588",
        "createdAt":  "2024-07-09T04:38:28Z",
        "number":  104588,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:01:47Z",
        "body":  "Perhaps related to https://github.com/dotnet/runtime/issues/98964\r\n\r\n```\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 2)\r\n./RunTests.sh: line 168:    21 Killed                  \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Runtime.Numerics.Tests.runtimeconfig.json --depsfile System.Runtime.Numerics.Tests.deps.json xunit.console.dll System.Runtime.Numerics.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing $RSP_FILE\r\n/root/helix/work/workitem/e\r\n----- end Mon Jul 8 23:40:00 UTC 2024 ----- exit code 137 ----------------------------------------------------------\r\nexit code 137 means SIGKILL Killed eg by kill\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=733224\r\nBuild error leg or test failing: System.Runtime.Numerics.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/104501\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"ErrorPattern\": \"Killed.+System\\\\.Runtime\\\\.Numerics\\\\.Tests\\\\.runtimeconfig\\\\.json.+OuterLoop\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=733224\r\n**Error message validated:** `[Killed.+System\\.Runtime\\.Numerics\\.Tests\\.runtimeconfig\\.json.+OuterLoop`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/9/2024 4:39:02 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153872](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153872)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153872\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31875040\u0026resultId=104547)||\r\n|[1153875](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153875)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153875\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31875002\u0026resultId=104547)||\r\n|[1152903](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152903)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152903\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31848362\u0026resultId=104533)||\r\n|[1152904](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152904)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152904\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31848322\u0026resultId=102627)||\r\n|[1151702](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151702)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151702\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31816290\u0026resultId=104547)||\r\n|[1151691](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151691)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151691\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31816178\u0026resultId=104547)||\r\n|[1150529](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150529)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150529\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31783324\u0026resultId=104547)||\r\n|[1150528](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150528)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150528\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31783296\u0026resultId=104547)||\r\n|[1149431](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149431)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149431\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31751558\u0026resultId=104547)||\r\n|[1148285](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148285)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148285\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31707490\u0026resultId=104547)||\r\n|[1148286](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148286)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148286\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31707384\u0026resultId=104547)||\r\n|[1147702](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147702)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147702\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31682792\u0026resultId=104795)||\r\n|[1147690](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147690)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147690\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31682758\u0026resultId=104547)||\r\n|[1147344](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147344)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147344\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31670090\u0026resultId=104533)||\r\n|[1147345](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147345)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147345\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31670092\u0026resultId=104547)||\r\n|[1146383](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146383)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146383\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31633340\u0026resultId=104547)||\r\n|[1146373](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146373)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146373\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31633318\u0026resultId=104547)||\r\n|[1146185](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146185)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146185\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31628158\u0026resultId=104547)|dotnet/runtime#119523|\r\n|[1145235](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145235)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145235\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31594916\u0026resultId=104547)||\r\n|[1145220](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145220)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145220\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31594832\u0026resultId=104547)||\r\n|[1144140](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144140)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144140\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31555526\u0026resultId=104547)||\r\n|[1144143](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144143)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144143\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31555504\u0026resultId=104533)||\r\n|[1143994](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31552364\u0026resultId=104534)|dotnet/runtime#119523|\r\n|[1143117](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143117)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143117\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31518502\u0026resultId=104547)||\r\n|[1143115](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143115)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143115\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31518424\u0026resultId=104547)||\r\n|[1141973](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141973)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141973\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31476796\u0026resultId=104547)||\r\n|[1141970](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141970)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141970\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31476770\u0026resultId=104547)||\r\n|[1141445](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141445)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141445\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31456168\u0026resultId=104547)||\r\n|[1141437](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141437)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141437\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31456132\u0026resultId=104547)||\r\n|[1141152](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141152)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141152\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31445926\u0026resultId=104547)||\r\n|[1141149](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141149)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141149\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31445898\u0026resultId=104547)||\r\n|[1140295](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140295)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140295\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31418486\u0026resultId=104547)||\r\n|[1140287](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140287)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140287\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31418424\u0026resultId=104547)||\r\n|[1139222](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139222)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139222\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31386376\u0026resultId=104547)||\r\n|[1139231](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139231)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139231\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31386332\u0026resultId=104533)||\r\n|[1138180](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138180)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138180\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31348076\u0026resultId=104533)||\r\n|[1138166](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138166)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138166\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31348046\u0026resultId=104547)||\r\n|[1136940](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136940)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136940\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31306434\u0026resultId=104547)||\r\n|[1136941](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136941)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136941\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31306390\u0026resultId=104547)||\r\n|[1136305](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136305)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136305\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31284954\u0026resultId=104547)||\r\n|[1136306](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136306)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136306\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31284926\u0026resultId=104547)||\r\n|[1135838](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135838)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135838\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31268638\u0026resultId=104533)||\r\n|[1135836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135836)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135836\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31268614\u0026resultId=104547)||\r\n|[1135582](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135582)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135582\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31259156\u0026resultId=104547)||\r\n|[1135590](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135590)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135590\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31259132\u0026resultId=104547)||\r\n|[1134933](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134933)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134933\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31239560\u0026resultId=104533)||\r\n|[1134928](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134928)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134928\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31239424\u0026resultId=104548)||\r\n|[1133939](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133939)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133939\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31208786\u0026resultId=104547)||\r\n|[1133936](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133936)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133936\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31208764\u0026resultId=104547)||\r\n|[1132986](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132986)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132986\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31177032\u0026resultId=104547)||\r\n|[1132987](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132987)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132987\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31177004\u0026resultId=104533)||\r\n|[1131991](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131991)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131991\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31145898\u0026resultId=104547)||\r\n|[1131988](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131988)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131988\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31145878\u0026resultId=104547)||\r\n|[1131085](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131085)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131085\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31118612\u0026resultId=104547)||\r\n|[1131088](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131088)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131088\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31118588\u0026resultId=104547)||\r\n|[1130645](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130645)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130645\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31102254\u0026resultId=104552)||\r\n|[1130643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130643)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130643\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31102218\u0026resultId=104560)||\r\n|[1130392](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130392)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130392\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31093202\u0026resultId=104547)||\r\n|[1130393](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130393)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130393\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31093182\u0026resultId=104533)||\r\n|[1129605](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129605)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129605\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31072882\u0026resultId=104547)||\r\n|[1129602](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129602)|dotnet/runtime|[System.Runtime.Numerics.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129602\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31072824\u0026resultId=104547)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|2|13|61|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOktH2-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EN1SJ",
                                           "createdAt":  "2024-07-09T16:49:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-09T16:49:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HsPaO",
                                           "createdAt":  "2024-08-08T19:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is no dump and the only hint as to why the SIGKILL might have been raised is\r\n\u003e dmesg: read kernel buffer failed: Operation not permitted\r\n\r\nThis seems like a more general flaky issue and not related to anything in the tests. I\u0027ve not been able to repro locally so there\u0027s not much that can be done without some additional context or a reliable repro",
                                           "updatedAt":  "2024-08-08T19:35:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S0fb4",
                                           "createdAt":  "2024-11-07T21:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This is the highest-hitting libraries known build issue. Worth a look if you can determine the cause.  https://helix.dot.net/BuildAnalysis/KnownIssues  @tannergooding @jeffhandley ",
                                           "updatedAt":  "2024-11-07T21:18:42Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[outerloop] System.Runtime.Numerics.Tests crash with exit code 137 in linux debug coreclr",
        "labels":  [
                       "area-System.Numerics",
                       "blocking-outerloop",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105307",
        "createdAt":  "2024-07-23T11:36:48Z",
        "number":  105307,
        "author":  "LEI-Hongfaan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T06:00:49Z",
        "body":  "### Background and motivation\n\nCertain architectures have specialized instructions to compute the AND NOT operation efficiently. By using these instructions, we can perform bitwise operations faster.\n\n### API Proposal\n\n```diff\r\n namespace System.Numerics.Tensors {\r\n   public static class TensorPrimitives {\r\n+    public static void BitwiseAndNot\u003cT\u003e(ReadOnlySpan\u003cT\u003e x, ReadOnlySpan\u003cT\u003e y, Span\u003cT\u003e destination) where T : System.Numerics.IBitwiseOperators\u003cT, T, T\u003e;\r\n+    public static void BitwiseAndNot\u003cT\u003e(ReadOnlySpan\u003cT\u003e x, T y, Span\u003cT\u003e destination) where T : System.Numerics.IBitwiseOperators\u003cT, T, T\u003e;\r\n+    public static void BitwiseAndNot\u003cT\u003e(T x, ReadOnlySpan\u003cT\u003e y, Span\u003cT\u003e destination) where T : System.Numerics.IBitwiseOperators\u003cT, T, T\u003e;\r\n   }\r\n }\r\n\r\n namespace System.Numerics {\r\n   public interface IBitwiseOperators\u003cTSelf,TOther,TResult\u003e where TSelf : IBitwiseOperators\u003cTSelf, TOther, TResult\u003e {\r\n+    public static abstract TResult BitwiseAndNot(TSelf left, TOther right);\r\n   }\r\n }\r\n```\r\n\n\n### API Usage\n\nFor example, when performing a bitwise AND operation on BigInteger values, if `x` is nonnegative and `y` is negative, then\r\n`x \u0026 y = x \u0026 ~(abs(y) - 1)`.\r\nIn code, this would look like:\r\n```csharp\r\nTensorPrimitives.BitwiseAndNot(xRemainingUpperBits, yRemainingUpperBits, resultRemainingUpperBits);\r\n```\n\n### Alternative Designs\n\n1. Use `AndNot` instead of `BitwiseAndNot`\r\n2. 1. Put the base case `BitwiseAndNot` in another interface.\r\n    2. Do not add additional constraints on T.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhldizA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Fz_bd",
                                           "createdAt":  "2024-07-23T11:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-23T11:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GV2LM",
                                           "createdAt":  "2024-07-27T07:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e `public static abstract TResult BitwiseAndNot(TSelf left, TOther right);`\r\n\r\nAdding `abstract` method is a breaking change and unacceptable. Instead, this should be a `static virtual` method with fallback implementation.\r\n",
                                           "updatedAt":  "2024-07-27T07:15:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add BitwiseAndNot To TensorPrimitives",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105759",
        "createdAt":  "2024-07-31T14:52:48Z",
        "number":  105759,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:22:10Z",
        "body":  "Several of the `Complex` APIs have overloads that take a `Complex` and a `double` which is intended to be an optimization as it can skip processing of the imaginary components. However, several of these implementations are not written optimally and are using branches or other checks that cause it to be much more expensive than the `Complex \u003cop\u003e Complex` counterpart.\r\n\r\nOne example of this is:\r\n```csharp\r\npublic static Complex operator *(Complex left, Complex right)\r\n{\r\n    // Multiplication:  (a + bi)(c + di) = (ac -bd) + (bc + ad)i\r\n    double result_realpart = (left.m_real * right.m_real) - (left.m_imaginary * right.m_imaginary);\r\n    double result_imaginarypart = (left.m_imaginary * right.m_real) + (left.m_real * right.m_imaginary);\r\n    return new Complex(result_realpart, result_imaginarypart);\r\n}\r\n\r\npublic static Complex operator *(Complex left, double right)\r\n{\r\n    if (!double.IsFinite(left.m_real))\r\n    {\r\n        if (!double.IsFinite(left.m_imaginary))\r\n        {\r\n            return new Complex(double.NaN, double.NaN);\r\n        }\r\n\r\n        return new Complex(left.m_real * right, double.NaN);\r\n    }\r\n\r\n    if (!double.IsFinite(left.m_imaginary))\r\n    {\r\n        return new Complex(double.NaN, left.m_imaginary * right);\r\n    }\r\n\r\n    return new Complex(left.m_real * right, left.m_imaginary * right);\r\n}\r\n```\r\n\r\nIn this case, the following implementation would be much more efficient and achieve the same thing (noting `x * 0` is required as `NaN * 0` and `Inf * 0` both produce `NaN`):\r\n```csharp\r\npublic static Complex operator *(Complex left, double right)\r\n{\r\n    // Multiplication:  (a + bi)(c + di) = (ac -bd) + (bc + ad)i\r\n    double result_realpart = (left.m_real * right) - (left.m_imaginary * 0);\r\n    double result_imaginarypart = (left.m_imaginary * right) + (left.m_real * 0);\r\n    return new Complex(result_realpart, result_imaginarypart);\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnQsBcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Gv7-p",
                                           "createdAt":  "2024-07-31T14:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Logging an issue to track this improvement as it needs to go in after main opens up for .NET 10 changes",
                                           "updatedAt":  "2024-07-31T14:53:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gv8By",
                                           "createdAt":  "2024-07-31T14:53:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-31T14:53:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzfUx",
                                           "createdAt":  "2024-07-31T23:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LEI-Hongfaan",
                                           "body":  "I wish you well. @tannergooding \r\n\r\nPeople have different beliefs. As a devotee of Lord Vishnu, I believe the best implementation of this method is:\r\n```csharp\r\npublic static Complex operator *(Complex left, double right)\r\n{\r\n    // Multiplication: (a + bi)(c) = (ac) + (bc)i\r\n    double result_realpart = left.m_real * right;\r\n    double result_imaginarypart = left.m_imaginary * right;\r\n    return new Complex(result_realpart, result_imaginarypart);\r\n}\r\n```\r\nrather than:\r\n```csharp\r\npublic static Complex operator *(Complex left, double right)\r\n{\r\n    // Multiplication: (a + bi)(c + di) = (ac - bd) + (bc + ad)i\r\n    double result_realpart = (left.m_real * right) - (left.m_imaginary * 0);\r\n    double result_imaginarypart = (left.m_imaginary * right) + (left.m_real * 0);\r\n    return new Complex(result_realpart, result_imaginarypart);\r\n}\r\n```\r\nI sincerely hope this API becomes more popular. If you look closely at my profile image, the lines on the sphere are not random; they represent trajectories of a quadratic differential on the Riemann sphere, an element of complex analysis. I have strong mathematical reasons to recommend my implementation. However, I understand that discussing mathematics might not be effective here, so let\u0027s talk about engineering.\r\n\r\nLet\u0027s examine the performance test data provided in the [link](https://github.com/LEI-Hongfaan/SimdComplexBenchmark1) (part 1). The current implementation, labeled S is being questioned. S2 and S3 are your planned new implementations, and S4 is our suggested implementation. By doing some basic arithmetic, if we subtract the Nop time of 337 ns, S2 takes 373 ns, while S4 takes 160 ns. This is more than twice as fast, which is quite reasonable.\r\n\r\nOf course, speed isn\u0027t the only factor to consider. I understand that the .NET team has valid reasons to believe their choice is the best, but our experts have reached a different conclusion. You might wonder why I am fixated on these seemingly trivial details. As I\u0027ve heard, the System.Numerics library is not a crucial part of the .NET ecosystem. The .NET team has more valuable and higher-priority issues to address. Frankly, the System.Numerics library is rarely used. Our experts\u0027 simple evaluation of it is \"No.\" We use our own libraries, as do others. Developers working on 3D, games, or other numerical computations typically use their own or third-party libraries. Those using the System.Numerics library are few and far between. From this perspective, it\u0027s understandable not to let these issues distract from more important matters.\r\n\r\nInterestingly, although we don\u0027t use the System.Numerics library in our products, we have a long list of its issues, which has been around for at least six years. It\u0027s quite embarrassing and regrettable that we haven\u0027t contributed to the .NET open-source repositories, even though we know these issues, have decent fixes, and are ready to open-source some parts of our work. I feel our people have lost their passion and confidence in .NET. The reasons are **_complex_**, and no one is to blame. Our experts might not match Microsoft\u0027s, and occasionally our opinions are dismissed as nonsense by Microsoft\u0027s experts, which might be true.\r\n\r\nAfter this long message, my simple goal is to ask you to reconsider.",
                                           "updatedAt":  "2024-07-31T23:17:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gzy1_",
                                           "createdAt":  "2024-08-01T00:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I believe the best implementation of this method is:\r\n\r\nThis implementation is not equivalent and causes it to produce a different result from `x * (Complex)y`, thus is not a valid implementation and is considered \"value changing\".\r\n\r\nWhile there are some languages, such as C, which allow differences between the `Complex \u003cop\u003e Complex` and `Complex \u003cop\u003e double` APIs for historical reasons, they often which explicitly call out that this leads to issues. For example, from Annex G.5 of the C language specification (which describes an IEEE 754 compliant implementation of `Complex` number types):\r\n\u003e For some operand types, the usual mathematical formula is problematic because of its treatment of infinities and because of undue overflow or underflow; in these cases the result satisfies certain properties (specified in G.5.1), but is not completely determined.\r\n\r\nIn .NET, we strive towards ensuring APIs are less surprising and more consistent by default and as such we expect that the `Complex \u003cop\u003e Complex` and `Complex \u003cop\u003e double` APIs behave consistently and as the algorithm for an unknown complex number is `(a + bi)(c + di) = (ac - bd) + (bc + ad)i`, the algorithm for a known real number `c + 0i` needs to produce the same answer and thus preserve the multiplication by `0` in case that `a` or `bi` is `Infinite` or `NaN`.\r\n\r\nIt is then allowed that the compiler optimize this in cases where it knows some of the inputs and can prove the computed result would be identical, such as if it knows `a` or `bi` is `finite`.\r\n\r\n\u003e As I\u0027ve heard, the System.Numerics library is not a crucial part of the .NET ecosystem.\r\n\r\nThe general numerics area is very much considered an important part of the ecosystem and is why significant investment has been made in the area; both in terms of perf improvements, new features such as `Generic Math`, and new APIs such as `Tensor\u003cT\u003e` or the various improvements that have been made to `Vector2/3/4`, `Quaternion`, `Plane`, `Matrix4x4`, etc.\r\n\r\nThe general area is broadly used throughout .NET for graphics processing, image manipulation, physics and game frameworks, AI, machine learning, UI, etc. Sometimes this is used for internal acceleration, sometimes for interchange between libraries, and more.\r\n\r\nThere are plans for further investment here for `Complex` as well, in the form of a new `Complex\u003cT\u003e where T : IFloatingPointIeee754\u003cT\u003e` type and it would continue following the same expectation that `Complex \u003cop\u003e double` is purely an optimization and is otherwise value preserving, thus computing the same result as `Complex \u003cop\u003e Complex`",
                                           "updatedAt":  "2024-08-01T00:43:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G2LgJ",
                                           "createdAt":  "2024-08-01T08:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LEI-Hongfaan",
                                           "body":  "Thank you for your response. Best wishes.\r\n\r\nFirstly, I am quite certain that our experts and some others (including myself, if I may) are already aware of several key points in your arguments. We are also pleased to hear about plans to implement `Complex\u003cT\u003e`.\r\n\r\nHowever, shifting our focus from `Complex\u003cT\u003e` to quaternions (`Quaternion`) or octonions (though they are less useful, and I might even throw in Clifford algebras just for fun), a question arises. Should we apply the same logic and arguments to quaternions, octonions, or other entities (among which only quaternions and matrices/tensors are of primary concern)? If the answer is \"Yes,\" we feel this could lead to an endless pit of performance and semantic issues.\r\n\r\nReturning to `Complex`, we know that besides the Cartesian coordinate representation based on real and imaginary parts, we also have the polar coordinate representation based on magnitude and angle (and matrices, if you prefer to skip the math part). We found that our recommended implementation can clumsily mimic the behavior of directed infinities (at least yielding signed infinities instead of NaNs). We can also classify the result of `Complex` * `Complex` as an error in the algorithm or implementation that fails to determine the sign of infinity. Of course, this has no practical use.\r\n\r\nAdditionally, people dislike polar coordinates because they perform poorly in addition and subtraction, which are more common than multiplication and division. However, this is not crucial; I mention it to broaden our perspective. (Note that we could store data in Cartesian coordinates and compute in polar coordinates, which is inefficient but helps us think about the problem.) More importantly, complex numbers also have a matrix representation. It is evident that even without considering complex numbers, matrices/tensors independently face the issue of scalar multiplication.\r\n\r\nSo, should we apply the same logic and arguments you proposed to matrices and tensors? If the answer is still \"Yes,\" I genuinely don\u0027t know how to respond. (On the other hand, if the answer is \"No,\" it won’t prompt us to switch to using `System.Numerics` in the near future, but it would be a good start.)\r\n\r\nValue changes due to algorithm choices and implementation details are common in practice. If this isn’t convincing enough, why not treat these overloads as independent functions rather than mixed versions optimized for performance? If it\u0027s for performance, why not fully optimize for performance? Conversely, if we consider these scalar multiplications (and divisions, if I forgot to mention earlier) as independent functions, then naturally, there is no issue of value changing. Just like matrices/tensors, viewing complex numbers as a vector space over real numbers is both obvious and solid.\r\n\r\nPlease believe me, the C/C++ developers and C# developers you mentioned didn\u0027t make these choices out of negligence or oversight, nor did they ignore IEEE or other standards, and it\u0027s certainly not just for historical reasons. If an implementation truly violates a standard, and we still choose it in many cases, I might reflect on whether the standard itself has bugs rather than the chosen implementation or semantics.\r\n\r\nFurthermore, I want to point out that we do not deny the reasonableness of the earlier .NET team\u0027s or contributors\u0027 judgment on this issue; we just believe it is not the best for .NET.\r\n\r\nI believe most of our arguments are already known to you, but for some reason, they seem to have not received enough attention. Therefore, I have highlighted a few points I find interesting and simply reiterated them. If you find any new information in them, I kindly ask you to reconsider.",
                                           "updatedAt":  "2024-08-01T08:27:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G6WBG",
                                           "createdAt":  "2024-08-01T16:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Designing APIs in the way you\u0027re requesting is not how .NET does things. The types of bugs that occur by violating these design practices are often significant and hard to diagnose, there are many well known cases of where and how languages/ecosystems have historically gotten this wrong and later opted to make intentional breaking changes to ensure correctness instead. These are often well known/documented to be caused by oversight, misunderstanding of the spec requirements or rationale, and even simply by good intentions because its believed to be okay for performance reasons when in practice performance is never more important than correctness. -- It\u0027s also important to note that the compilers often don\u0027t need such tricks for performance, they will typically do the right thing and the real world benefits tend to be negligible. There are many alternative ways to get the desired performance with the existing APIs exposed, especially when considering the broad support for inlining and constant folding that exists.\r\n\r\nIf you have a domain specific requirement for a different behavior, then that is what exposing your own type or your own helper/extension methods are for. Particularly with the existence of `Generic Math`, it is even easier to do this and integrate it into existing algorithms/APIs. As for the .NET types, we will continue to do the defined and expected behavior here, we will continue ensuring our APIs and overloads of APIs return correct, consistent, and deterministic results for a given process. We may expose APIs that do allow some semblance of optimized behavior, like `float.MultiplyAddEstimate` which is allowed to pick either `FusedMultiplyAdd(a, b, c)` or `(a * b) + c` based on what the hardware supports, but these will be rare and based on wide-spread need and data showing the benefit. Such APIs will be identified by a different name that makes callout to the fact it has different behavior.",
                                           "updatedAt":  "2024-08-01T16:09:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBa_E",
                                           "createdAt":  "2025-02-04T15:57:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffreySax",
                                           "body":  "@tannergooding One can argue that the floating-point zero is not the same as mathematical zero, but a \u0027directed\u0027 version of it, so that, for example `sqrt(-1+0i) == i` and `sqrt(-1-0i) == -i`. There\u0027s an interesting paper by William Kahan, \"Much ado about nothing\u0027s sign bit\" (https://people.freebsd.org/~das/kahan86branch.pdf) about the role of negative zero in complex computer arithmetic.\n\nFrom this point of view, multiplying by a real number is not quite the same as multiplying by the real number with zero imaginary part. The difference comes down to whether you simplify before or after you convert standard math to floating-point math. Both options have reasonable arguments for and against.\n\nMany languages simplify first: Fortran, C, Julia...\n\nThe choice you are making here is that multiplication by a real number must be exactly like multiplication by the real number converted to a complex number. I\u0027m fine with that choice, but this should be made explicit in the documentation.\n\nYou are still going to get some surprises. The biggest is that there are special methods for real arguments _but they don\u0027t do anything special_, i.e. they are basically redundant. Another is that it\u0027s not always true that `1 * x == x`, for example when `x = 1 + inf*i`.\n\nI also don\u0027t see why that cannot be made explicit in the implementation as well:\n\n```csharp\npublic static Complex operator *(Complex left, double right)\n{\n    return left * (Complex)right;\n}\n```\n\nI doubt if a hand-crafted version can be meaningfully faster.\n\nIn general, it would be very useful to have **a clear policy on numerical reproducibility**. With the explosion of platforms and platform-specific implementations (including different SIMD versions) that may even depend on memory alignment, this is even more important.\n\nMaking reproducibility guarantees can come at a significant cost: you usually have to settle for the slowest common denominator. Whether that cost is worth it depends on the application. The relatively few cases where it is shouldn\u0027t negatively impact the majority of cases where it doesn\u0027t matter if the last bit of `log(1.7374296064433465668e204` is rounded correctly.",
                                           "updatedAt":  "2025-02-04T15:57:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dCwFy",
                                           "createdAt":  "2025-02-04T18:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e One can argue that the floating-point zero is not the same as mathematical zero, but a \u0027directed\u0027 version of it, so that, for example sqrt(-1+0i) == i and sqrt(-1-0i) == -i. There\u0027s an interesting paper by William Kahan, \"Much ado about nothing\u0027s sign bit\" (https://people.freebsd.org/~das/kahan86branch.pdf) about the role of negative zero in complex computer arithmetic.\n\u003e\n\u003e From this point of view, multiplying by a real number is not quite the same as multiplying by the real number with zero imaginary part.\n\n@JeffreySax, yes `zero` in IEEE 754 floating-point is explicitly signed to allow for the preservation of directed rounding information.\n\nThus `x * 0` and `x * -0` are not always equivalent and the sign intentionally propagates. This also means that a real number is always of the form `x + 0i` and generally not considered if of the form` x - 0i`. This is correspondingly covered in the G annex of the C language specification where it strictly dictates that conversion produces an imaginary part of `positive zero`. -- In general one presumes that `+0` means it is likely true zero but could be a very small positive value that rounded towards zero. While one presumes that `-0` means that it was almost definitely a very small negative value that rounded towards zero, you generally don\u0027t accept that it is \"true zero\" because that is typically specially dictated to return `+0`.\n\n\u003e Many languages simplify first: Fortran, C, Julia...\n\n.NET has explicitly deviated from such decisions because of the types of issues they cause in real world code. The \"benefits\" of allowing fast math rarely show up outside of specific domains and more frequently do concretely cause issues, bugs, or even security vulnerabilities in a wide variety of other code. We do sometimes provide helper APIs that allow users to get \"fast math\" (generally exposed via `Name()` vs `NameEstimate()`) via explicit opt-in on a per-callsite basis, but by default we ensure that code that looks or is meant to be presumed compatible behaves the same.\n\nThis means that for basic arithmetic; `Complex * double` should be the same as `Complex * (Complex)double`. The compiler can then optimize away cases like `x * 0` in the case it knows `x` isn\u0027t inf/nan; otherwise its preserved and takes 3-4 extra cycles (about the cost of an L1 memory lookup) on almost any CPU from the past 15 years.\n\n\u003e In general, it would be very useful to have a clear policy on numerical reproducibility. \n\nWe can certainly document it in more places, but its not going to stop people opening issues like this and its not going to stop people from arguing that the policy we have is \"incorrect\". It very rarely comes up and is explained in threads like I\u0027ve done, so spending a significant amount of time writing out a more complete set of docs hasn\u0027t bubbled up in priority (and is unlikely to happen in the short term).\n\n\u003e With the explosion of platforms and platform-specific implementations (including different SIMD versions) that may even depend on memory alignment, this is even more important.\n\nNone of this is impactful for normal safe code in .NET. We already have a strong documented memory model, we already have made pushes for and guarantees around IEEE 754 determinism for various APIs/functions/types, and we have extensive SIMD support that is likewise used deterministically for exposed safe functions.\n\n\u003e Making reproducibility guarantees can come at a significant cost: you usually have to settle for the slowest common denominator. Whether that cost is worth it depends on the application.\n\nIt\u0027s generally the inverse, it almost never is significant. It might be significant to some microbenchmark, but that is rarely the bottleneck in a real application. Real applications don\u0027t run the same small method thousands of times with static inputs. They have dynamic inputs and while the do have hot methods that run much more frequently than other methods that isn\u0027t the only code running. Bottlenecks tend to be things like cache, memory, IO, or network bandwidth and not CPU compute time (particularly not instructions that take 1-3 cycles to execute), etc.",
                                           "updatedAt":  "2025-02-04T18:24:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Improve the perf of `Complex \u003cop\u003e double`",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105997",
        "createdAt":  "2024-08-05T22:01:04Z",
        "number":  105997,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:22:11Z",
        "body":  "```C#\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Numerics;\n\nBenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);\n\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\npublic partial class Tests\n{\n    private Complex _value = new Complex(1, 2);\n\n    [Benchmark]\n    public Complex Sin() =\u003e Complex.Sin(_value);\n\n    [Benchmark]\n    public Complex Cos() =\u003e Complex.Cos(_value);\n}\n```\n\nThis is what I currently see:\n\n| Method               | Toolchain | Mean       | Ratio |\n|--------------------- |---------- |-----------:|------:|\n| Sin                  | net8.0    | 21.8224 ns |  1.00 |\n| Sin                  | net9.0   | 36.2546 ns |  1.66 |\n|                      |           |            |       |\n| Cos                  | net8.0    | 21.8679 ns |  1.00 |\n| Cos                  | net9.0   | 37.5421 ns |  1.72 |\n\ncc: @tannergooding ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh3QMOQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HTWhI",
                                           "createdAt":  "2024-08-05T22:03:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "What OS is this on?",
                                           "updatedAt":  "2024-08-05T22:03:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTWnV",
                                           "createdAt":  "2024-08-05T22:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Windows 11",
                                           "updatedAt":  "2024-08-05T22:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTW3r",
                                           "createdAt":  "2024-08-05T22:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-05T22:04:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTYQ_",
                                           "createdAt":  "2024-08-05T22:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODs498Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-08-05T22:10:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This is likely caused by using `SinCos`, will take a look.\r\n\r\nMy guess is this is faster on Linux and that Windows is hitting one of the open issues like https://github.com/dotnet/runtime/issues/48776 or https://developercommunity.visualstudio.com/t/MSVCs-sincos-implementation-is-incorrec/10582378#T-ND10697989\r\n\r\nWill confirm and likely change the `SinCos` impl for Windows to just call Sin and Cos independently for now and track getting it back after the above are resolved",
                                           "updatedAt":  "2024-08-05T22:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HUMlB",
                                           "createdAt":  "2024-08-06T01:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffreySax",
                                           "body":  "Note also that in some cases, .NET 8.0 `Math.SinCos` produces slightly different (less accurate) results than .NET 9.0.\r\n\r\nFor example, for x = 1.57 (different from pi/2 by about 0.0007), the results are:\r\n\r\n.NET 8.0:\r\n```\r\nsin x = 0.9999996829318346\r\ncos x = 0.0007963267107331026\r\n```\r\n\r\n.NET 9.0 (preview 6):\r\n```\r\nsin x = 0.9999996829318346\r\ncos x = 0.0007963267107332633\r\n```\r\n\r\nCalling `Math.Sin` and `Math.Cos` separately gives the same result as .NET 9.0.",
                                           "updatedAt":  "2024-08-06T01:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZSjL",
                                           "createdAt":  "2024-08-06T15:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Note also that in some cases, .NET 8.0 Math.SinCos produces slightly different (less accurate) results than .NET 9.0.\r\n\r\nThis is  https://developercommunity.visualstudio.com/t/MSVCs-sincos-implementation-is-incorrec/10582378#T-ND10697989, which I linked above.\r\n\r\n--------------\r\n\r\n@stephentoub, I\u0027m not able to reproduce this; I also tested on my Intel 11900 and saw similar results\r\n\r\n### .NET 8 - AVX2\r\n\r\nBenchmarkDotNet v0.13.13-nightly.20240311.145, Windows 11 (10.0.26100.1301)\r\nAMD Ryzen 9 7950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK 9.0.100-preview.6.24328.19\r\n  [Host]     : .NET 8.0.5 (8.0.524.21615), X64 RyuJIT AVX2\r\n  Job-GCZARY : .NET 8.0.5 (8.0.524.21615), X64 RyuJIT AVX2\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250ms  MaxIterationCount=20\r\nMinIterationCount=15  WarmupCount=1\r\n\r\n| Method     | value                    | Mean      | Error     | StdDev    | Median    | Min       | Max       | Allocated |\r\n|----------- |------------------------- |----------:|----------:|----------:|----------:|----------:|----------:|----------:|\r\n| SinStephen | ?                        | 10.073 ns | 0.1431 ns | 0.1339 ns | 10.045 ns |  9.920 ns | 10.282 ns |         - |\r\n| CosStephen | ?                        |  9.587 ns | 0.0693 ns | 0.0649 ns |  9.552 ns |  9.522 ns |  9.720 ns |         - |\r\n| Cos        | \u003c0; 1\u003e                   |  6.704 ns | 0.0288 ns | 0.0240 ns |  6.713 ns |  6.656 ns |  6.725 ns |         - |\r\n| Sin        | \u003c0; 1\u003e                   |  6.862 ns | 0.0347 ns | 0.0325 ns |  6.842 ns |  6.830 ns |  6.924 ns |         - |\r\n| Cos        | \u003c1.23456789; 1.23456789\u003e |  9.964 ns | 0.0569 ns | 0.0532 ns |  9.975 ns |  9.900 ns | 10.040 ns |         - |\r\n| Sin        | \u003c1.23456789; 1.23456789\u003e | 10.281 ns | 0.0434 ns | 0.0406 ns | 10.278 ns | 10.184 ns | 10.349 ns |         - |\r\n| Cos        | \u003c1; 0\u003e                   |  9.254 ns | 0.0466 ns | 0.0436 ns |  9.261 ns |  9.193 ns |  9.323 ns |         - |\r\n| Sin        | \u003c1; 0\u003e                   |  9.256 ns | 0.0521 ns | 0.0462 ns |  9.235 ns |  9.210 ns |  9.364 ns |         - |\r\n| Cos        | \u003c1; 1\u003e                   |  9.949 ns | 0.0587 ns | 0.0550 ns |  9.926 ns |  9.879 ns | 10.043 ns |         - |\r\n| Sin        | \u003c1; 1\u003e                   |  9.922 ns | 0.0573 ns | 0.0536 ns |  9.893 ns |  9.869 ns | 10.040 ns |         - |\r\n| Cos        | \u003c1; 2\u003e                   | 10.342 ns | 0.0506 ns | 0.0474 ns | 10.320 ns | 10.284 ns | 10.441 ns |         - |\r\n| Sin        | \u003c1; 2\u003e                   |  9.872 ns | 0.0485 ns | 0.0453 ns |  9.871 ns |  9.804 ns |  9.947 ns |         - |\r\n\r\n### .NET 8 - AVX512\r\n\r\nBenchmarkDotNet v0.13.13-nightly.20240311.145, Windows 11 (10.0.26100.1301)\r\nAMD Ryzen 9 7950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK 9.0.100-preview.6.24328.19\r\n  [Host]     : .NET 8.0.5 (8.0.524.21615), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n  Job-JGPDSN : .NET 8.0.5 (8.0.524.21615), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250ms  MaxIterationCount=20\r\nMinIterationCount=15  WarmupCount=1\r\n\r\n| Method     | value                    | Mean      | Error     | StdDev    | Median    | Min       | Max       | Allocated |\r\n|----------- |------------------------- |----------:|----------:|----------:|----------:|----------:|----------:|----------:|\r\n| SinStephen | ?                        |  9.980 ns | 0.1542 ns | 0.1443 ns |  9.957 ns |  9.810 ns | 10.177 ns |         - |\r\n| CosStephen | ?                        |  9.777 ns | 0.0737 ns | 0.0689 ns |  9.758 ns |  9.684 ns |  9.909 ns |         - |\r\n| Cos        | \u003c0; 1\u003e                   |  6.687 ns | 0.0433 ns | 0.0405 ns |  6.691 ns |  6.632 ns |  6.743 ns |         - |\r\n| Sin        | \u003c0; 1\u003e                   |  6.627 ns | 0.0450 ns | 0.0421 ns |  6.600 ns |  6.580 ns |  6.695 ns |         - |\r\n| Cos        | \u003c1.23456789; 1.23456789\u003e | 10.395 ns | 0.0501 ns | 0.0469 ns | 10.414 ns | 10.310 ns | 10.436 ns |         - |\r\n| Sin        | \u003c1.23456789; 1.23456789\u003e |  9.851 ns | 0.0628 ns | 0.0587 ns |  9.856 ns |  9.767 ns |  9.951 ns |         - |\r\n| Cos        | \u003c1; 0\u003e                   |  9.139 ns | 0.0486 ns | 0.0455 ns |  9.143 ns |  9.074 ns |  9.203 ns |         - |\r\n| Sin        | \u003c1; 0\u003e                   |  9.650 ns | 0.0544 ns | 0.0509 ns |  9.648 ns |  9.580 ns |  9.743 ns |         - |\r\n| Cos        | \u003c1; 1\u003e                   | 10.348 ns | 0.0433 ns | 0.0405 ns | 10.352 ns | 10.247 ns | 10.405 ns |         - |\r\n| Sin        | \u003c1; 1\u003e                   | 10.031 ns | 0.0619 ns | 0.0579 ns | 10.036 ns |  9.964 ns | 10.128 ns |         - |\r\n| Cos        | \u003c1; 2\u003e                   | 10.340 ns | 0.0674 ns | 0.0630 ns | 10.359 ns | 10.250 ns | 10.415 ns |         - |\r\n| Sin        | \u003c1; 2\u003e                   | 10.152 ns | 0.0239 ns | 0.0187 ns | 10.143 ns | 10.133 ns | 10.186 ns |         - |\r\n\r\n### .NET 9 - AVX2\r\n\r\nBenchmarkDotNet v0.13.13-nightly.20240311.145, Windows 11 (10.0.26100.1301)\r\nAMD Ryzen 9 7950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK 9.0.100-preview.6.24328.19\r\n  [Host]     : .NET 9.0.0 (9.0.24.32707), X64 RyuJIT AVX2\r\n  Job-IXTZQT : .NET 9.0.0 (9.0.24.32707), X64 RyuJIT AVX2\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250ms  MaxIterationCount=20\r\nMinIterationCount=15  WarmupCount=1\r\n\r\n| Method     | value                    | Mean      | Error     | StdDev    | Median    | Min       | Max       | Allocated |\r\n|----------- |------------------------- |----------:|----------:|----------:|----------:|----------:|----------:|----------:|\r\n| SinStephen | ?                        |  9.911 ns | 0.1471 ns | 0.1304 ns |  9.866 ns |  9.796 ns | 10.186 ns |         - |\r\n| CosStephen | ?                        | 10.133 ns | 0.0711 ns | 0.0665 ns | 10.125 ns | 10.023 ns | 10.242 ns |         - |\r\n| Cos        | \u003c0; 1\u003e                   |  6.869 ns | 0.0546 ns | 0.0511 ns |  6.868 ns |  6.786 ns |  6.938 ns |         - |\r\n| Sin        | \u003c0; 1\u003e                   |  6.868 ns | 0.0501 ns | 0.0444 ns |  6.870 ns |  6.811 ns |  6.937 ns |         - |\r\n| Cos        | \u003c1.23456789; 1.23456789\u003e | 10.323 ns | 0.0657 ns | 0.0615 ns | 10.326 ns | 10.227 ns | 10.414 ns |         - |\r\n| Sin        | \u003c1.23456789; 1.23456789\u003e | 10.146 ns | 0.0598 ns | 0.0559 ns | 10.149 ns | 10.063 ns | 10.240 ns |         - |\r\n| Cos        | \u003c1; 0\u003e                   |  9.293 ns | 0.1028 ns | 0.0911 ns |  9.277 ns |  9.180 ns |  9.465 ns |         - |\r\n| Sin        | \u003c1; 0\u003e                   |  9.634 ns | 0.1120 ns | 0.1048 ns |  9.623 ns |  9.525 ns |  9.854 ns |         - |\r\n| Cos        | \u003c1; 1\u003e                   | 10.285 ns | 0.0676 ns | 0.0632 ns | 10.248 ns | 10.216 ns | 10.416 ns |         - |\r\n| Sin        | \u003c1; 1\u003e                   |  9.844 ns | 0.0584 ns | 0.0546 ns |  9.860 ns |  9.767 ns |  9.933 ns |         - |\r\n| Cos        | \u003c1; 2\u003e                   | 10.103 ns | 0.0757 ns | 0.0708 ns | 10.086 ns | 10.023 ns | 10.229 ns |         - |\r\n| Sin        | \u003c1; 2\u003e                   | 10.200 ns | 0.0905 ns | 0.0847 ns | 10.201 ns | 10.089 ns | 10.306 ns |         - |\r\n\r\n### .NET 9 - AVX512\r\n\r\nBenchmarkDotNet v0.13.13-nightly.20240311.145, Windows 11 (10.0.26100.1301)\r\nAMD Ryzen 9 7950X, 1 CPU, 32 logical and 16 physical cores\r\n.NET SDK 9.0.100-preview.6.24328.19\r\n  [Host]     : .NET 9.0.0 (9.0.24.32707), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n  Job-EAJRXI : .NET 9.0.0 (9.0.24.32707), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250ms  MaxIterationCount=20\r\nMinIterationCount=15  WarmupCount=1\r\n\r\n| Method     | value                    | Mean      | Error     | StdDev    | Median    | Min       | Max       | Allocated |\r\n|----------- |------------------------- |----------:|----------:|----------:|----------:|----------:|----------:|----------:|\r\n| SinStephen | ?                        | 10.247 ns | 0.0718 ns | 0.0561 ns | 10.248 ns | 10.171 ns | 10.333 ns |         - |\r\n| CosStephen | ?                        | 10.254 ns | 0.0503 ns | 0.0471 ns | 10.248 ns | 10.172 ns | 10.335 ns |         - |\r\n| Cos        | \u003c0; 1\u003e                   |  6.876 ns | 0.0306 ns | 0.0287 ns |  6.870 ns |  6.823 ns |  6.924 ns |         - |\r\n| Sin        | \u003c0; 1\u003e                   |  6.701 ns | 0.0380 ns | 0.0356 ns |  6.704 ns |  6.634 ns |  6.747 ns |         - |\r\n| Cos        | \u003c1.23456789; 1.23456789\u003e | 10.075 ns | 0.0737 ns | 0.0689 ns | 10.088 ns |  9.972 ns | 10.158 ns |         - |\r\n| Sin        | \u003c1.23456789; 1.23456789\u003e | 10.189 ns | 0.0825 ns | 0.0772 ns | 10.186 ns | 10.099 ns | 10.376 ns |         - |\r\n| Cos        | \u003c1; 0\u003e                   |  9.596 ns | 0.0541 ns | 0.0452 ns |  9.596 ns |  9.521 ns |  9.677 ns |         - |\r\n| Sin        | \u003c1; 0\u003e                   |  9.475 ns | 0.0490 ns | 0.0459 ns |  9.484 ns |  9.403 ns |  9.541 ns |         - |\r\n| Cos        | \u003c1; 1\u003e                   | 10.464 ns | 0.2140 ns | 0.2002 ns | 10.523 ns | 10.065 ns | 10.776 ns |         - |\r\n| Sin        | \u003c1; 1\u003e                   | 10.195 ns | 0.0693 ns | 0.0649 ns | 10.204 ns | 10.079 ns | 10.286 ns |         - |\r\n| Cos        | \u003c1; 2\u003e                   | 10.296 ns | 0.0640 ns | 0.0568 ns | 10.281 ns | 10.238 ns | 10.406 ns |         - |\r\n| Sin        | \u003c1; 2\u003e                   | 10.161 ns | 0.0638 ns | 0.0597 ns | 10.158 ns | 10.083 ns | 10.249 ns |         - |",
                                           "updatedAt":  "2024-08-06T15:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZTMl",
                                           "createdAt":  "2024-08-06T15:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This was using:\r\n```csharp\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// See the LICENSE file in the project root for more information.\r\n\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing BenchmarkDotNet.Attributes;\r\nusing MicroBenchmarks;\r\n\r\nnamespace System.Numerics.Tests\r\n{\r\n    [BenchmarkCategory(Categories.Libraries)]\r\n    public class Perf_Complex\r\n    {\r\n        public IEnumerable\u003cobject\u003e Values()\r\n        {\r\n            yield return new Complex(1.0, 0.0);\r\n            yield return new Complex(0.0, 1.0);\r\n            yield return new Complex(1.0, 1.0);\r\n            yield return new Complex(1.23456789, 1.23456789);\r\n\t\t\tyield return new Complex(1, 2);\r\n        }\r\n\r\n        [Benchmark]\r\n        [ArgumentsSource(nameof(Values))]\r\n        public Complex Cos(Complex value) =\u003e Complex.Cos(value);\r\n\r\n        [Benchmark]\r\n        [ArgumentsSource(nameof(Values))]\r\n        public Complex Sin(Complex value) =\u003e Complex.Sin(value);\r\n\r\n        private Complex _value = new Complex(1, 2);\r\n\r\n        [Benchmark]\r\n        public Complex SinStephen() =\u003e Complex.Sin(_value);\r\n\r\n        [Benchmark]\r\n        public Complex CosStephen() =\u003e Complex.Cos(_value);\r\n    }\r\n}\r\n```\r\n\r\nwhich I was working on adding to the dotnet/performance repo (wasn\u0027t planning on adding SinStephen/CosStephen, just added them locally when I couldn\u0027t repro initially)",
                                           "updatedAt":  "2024-08-06T15:21:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HcxXb",
                                           "createdAt":  "2024-08-07T01:50:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e This was using:\n\nI get this:\n\n| Method     | Runtime  | value                | Mean     | Ratio |\n|----------- |--------- |--------------------- |---------:|------:|\n| SinStephen | .NET 8.0 | ?                    | 22.17 ns |  1.00 |\n| SinStephen | .NET 9.0 | ?                    | 38.29 ns |  1.75 |\n|            |          |                      |          |       |\n| CosStephen | .NET 8.0 | ?                    | 22.21 ns |  1.00 |\n| CosStephen | .NET 9.0 | ?                    | 38.56 ns |  1.74 |\n|            |          |                      |          |       |\n| Cos        | .NET 8.0 | \u003c0; 1\u003e               | 14.54 ns |  1.00 |\n| Cos        | .NET 9.0 | \u003c0; 1\u003e               | 30.64 ns |  2.11 |\n|            |          |                      |          |       |\n| Sin        | .NET 8.0 | \u003c0; 1\u003e               | 15.04 ns |  1.00 |\n| Sin        | .NET 9.0 | \u003c0; 1\u003e               | 29.67 ns |  1.97 |\n|            |          |                      |          |       |\n| Cos        | .NET 8.0 | \u003c1.23(...)6789\u003e [24] | 22.05 ns |  1.00 |\n| Cos        | .NET 9.0 | \u003c1.23(...)6789\u003e [24] | 38.88 ns |  1.76 |\n|            |          |                      |          |       |\n| Sin        | .NET 8.0 | \u003c1.23(...)6789\u003e [24] | 21.94 ns |  1.00 |\n| Sin        | .NET 9.0 | \u003c1.23(...)6789\u003e [24] | 38.44 ns |  1.75 |\n|            |          |                      |          |       |\n| Cos        | .NET 8.0 | \u003c1; 0\u003e               | 17.79 ns |  1.00 |\n| Cos        | .NET 9.0 | \u003c1; 0\u003e               | 20.97 ns |  1.18 |\n|            |          |                      |          |       |\n| Sin        | .NET 8.0 | \u003c1; 0\u003e               | 17.61 ns |  1.00 |\n| Sin        | .NET 9.0 | \u003c1; 0\u003e               | 20.71 ns |  1.18 |\n|            |          |                      |          |       |\n| Cos        | .NET 8.0 | \u003c1; 1\u003e               | 22.11 ns |  1.00 |\n| Cos        | .NET 9.0 | \u003c1; 1\u003e               | 38.64 ns |  1.75 |\n|            |          |                      |          |       |\n| Sin        | .NET 8.0 | \u003c1; 1\u003e               | 22.11 ns |  1.00 |\n| Sin        | .NET 9.0 | \u003c1; 1\u003e               | 37.71 ns |  1.71 |\n|            |          |                      |          |       |\n| Cos        | .NET 8.0 | \u003c1; 2\u003e               | 22.15 ns |  1.00 |\n| Cos        | .NET 9.0 | \u003c1; 2\u003e               | 38.40 ns |  1.73 |\n|            |          |                      |          |       |\n| Sin        | .NET 8.0 | \u003c1; 2\u003e               | 22.12 ns |  1.00 |\n| Sin        | .NET 9.0 | \u003c1; 2\u003e               | 38.09 ns |  1.72 |\n\non this configuration:\n\n```\nBenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3958/23H2/2023Update/SunValley3)\nIntel Core i7-8700 CPU 3.20GHz (Coffee Lake), 1 CPU, 12 logical and 6 physical cores\n.NET SDK 9.0.100-preview.7.24373.4\n  [Host]     : .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX2\n  Job-WRZLJY : .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX2\n  Job-GMITOL : .NET 9.0.0 (9.0.24.36618), X64 RyuJIT AVX2\n```\n\nI tried again with a runtime built locally from latest in main, and I get basically the same thing:\n\n| Method     | Toolchain | value                | Mean     | Ratio |\n|----------- |---------- |--------------------- |---------:|------:|\n| SinStephen | net8.0    | ?                    | 21.62 ns |  1.00 |\n| SinStephen | CoreRun   | ?                    | 37.38 ns |  1.73 |\n|            |           |                      |          |       |\n| CosStephen | net8.0    | ?                    | 21.90 ns |  1.00 |\n| CosStephen | CoreRun   | ?                    | 37.69 ns |  1.72 |\n|            |           |                      |          |       |\n| Cos        | net8.0    | \u003c0; 1\u003e               | 14.64 ns |  1.00 |\n| Cos        | CoreRun   | \u003c0; 1\u003e               | 30.49 ns |  2.08 |\n|            |           |                      |          |       |\n| Sin        | net8.0    | \u003c0; 1\u003e               | 15.44 ns |  1.00 |\n| Sin        | CoreRun   | \u003c0; 1\u003e               | 29.71 ns |  1.92 |\n|            |           |                      |          |       |\n| Cos        | net8.0    | \u003c1.23(...)6789\u003e [24] | 21.77 ns |  1.00 |\n| Cos        | CoreRun   | \u003c1.23(...)6789\u003e [24] | 37.52 ns |  1.72 |\n|            |           |                      |          |       |\n| Sin        | net8.0    | \u003c1.23(...)6789\u003e [24] | 21.78 ns |  1.00 |\n| Sin        | CoreRun   | \u003c1.23(...)6789\u003e [24] | 37.36 ns |  1.71 |\n|            |           |                      |          |       |\n| Cos        | net8.0    | \u003c1; 0\u003e               | 17.74 ns |  1.00 |\n| Cos        | CoreRun   | \u003c1; 0\u003e               | 19.97 ns |  1.13 |\n|            |           |                      |          |       |\n| Sin        | net8.0    | \u003c1; 0\u003e               | 17.73 ns |  1.00 |\n| Sin        | CoreRun   | \u003c1; 0\u003e               | 20.33 ns |  1.15 |\n|            |           |                      |          |       |\n| Cos        | net8.0    | \u003c1; 1\u003e               | 22.13 ns |  1.00 |\n| Cos        | CoreRun   | \u003c1; 1\u003e               | 38.48 ns |  1.75 |\n|            |           |                      |          |       |\n| Sin        | net8.0    | \u003c1; 1\u003e               | 21.97 ns |  1.00 |\n| Sin        | CoreRun   | \u003c1; 1\u003e               | 37.89 ns |  1.72 |\n|            |           |                      |          |       |\n| Cos        | net8.0    | \u003c1; 2\u003e               | 21.94 ns |  1.00 |\n| Cos        | CoreRun   | \u003c1; 2\u003e               | 38.09 ns |  1.73 |\n|            |           |                      |          |       |\n| Sin        | net8.0    | \u003c1; 2\u003e               | 22.29 ns |  1.00 |\n| Sin        | CoreRun   | \u003c1; 2\u003e               | 38.17 ns |  1.71 |\n",
                                           "updatedAt":  "2024-08-07T01:50:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hc2Uq",
                                           "createdAt":  "2024-08-07T02:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Could you get the disassembly for the runs here? On my box, the codegen is nearly identical, the only difference is that .NET 8 has a `vzeroupper` emitted.\r\n\r\nSo, either you\u0027re getting pessimized due to lack of `vzeroupper` or you\u0027re likely being pessimized by the JCC erratum: https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/best-practices/mitigation-strategies-jcc-microcode.html\r\n\r\nMy guess is you\u0027re being impacted by the latter given that you\u0027re on `Coffee Lake` and `vzeroupper` has been highly optimized since `Skylake` (plus we\u0027re already zeroing the upper bits of all the used registers and `Cos+Sin` should be executing the internal AVX aware path themselves, so vzeroupper \"should\" be unnecessary).\r\n",
                                           "updatedAt":  "2024-08-07T02:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hc3vF",
                                           "createdAt":  "2024-08-07T02:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Via [DisassemblyDiagnoser]\n\n## .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX2\n```assembly\n; Tests.Cos(System.Numerics.Complex)\n       push      rbx\n       sub       rsp,70\n       vzeroupper\n       vmovaps   [rsp+60],xmm6\n       vmovaps   [rsp+50],xmm7\n       vmovaps   [rsp+40],xmm8\n       vmovaps   [rsp+30],xmm9\n       mov       rbx,rdx\n       vmovsd    xmm0,qword ptr [r8]\n       vmovsd    qword ptr [rsp+28],xmm0\n       vmovsd    xmm1,qword ptr [r8+8]\n       vmovaps   xmm0,xmm1\n       call      System.Math.Exp(Double)\n       vmovaps   xmm6,xmm0\n       vmovsd    xmm0,qword ptr [7FFF954A86A0]\n       vdivsd    xmm7,xmm0,xmm6\n       vsubsd    xmm0,xmm6,xmm7\n       vmovsd    xmm8,qword ptr [7FFF954A86A8]\n       vmulsd    xmm9,xmm0,xmm8\n       vmovsd    xmm0,qword ptr [rsp+28]\n       call      System.Math.Cos(Double)\n       vaddsd    xmm1,xmm6,xmm7\n       vmulsd    xmm1,xmm1,xmm8\n       vmulsd    xmm6,xmm0,xmm1\n       vmovsd    xmm0,qword ptr [rsp+28]\n       call      System.Math.Sin(Double)\n       vxorps    xmm0,xmm0,[7FFF954A86B0]\n       vmulsd    xmm0,xmm0,xmm9\n       vmovsd    qword ptr [rbx],xmm6\n       vmovsd    qword ptr [rbx+8],xmm0\n       mov       rax,rbx\n       vmovaps   xmm6,[rsp+60]\n       vmovaps   xmm7,[rsp+50]\n       vmovaps   xmm8,[rsp+40]\n       vmovaps   xmm9,[rsp+30]\n       add       rsp,70\n       pop       rbx\n       ret\n; Total bytes of code 184\n```\n**Extern method**\nSystem.Math.Exp(Double)\nSystem.Math.Cos(Double)\nSystem.Math.Sin(Double)\n\n## .NET 9.0.0 (9.0.24.36618), X64 RyuJIT AVX2\n```assembly\n; Tests.Cos(System.Numerics.Complex)\n       push      rbx\n       sub       rsp,60\n       vmovaps   [rsp+50],xmm6\n       mov       rbx,rdx\n       vmovsd    xmm0,qword ptr [r8]\n       vmovsd    xmm1,qword ptr [r8+8]\n       vmovsd    qword ptr [rsp+30],xmm1\n       lea       r8,[rsp+38]\n       lea       rdx,[rsp+40]\n       call      System.Math.SinCos(Double, Double*, Double*)\n       vmovsd    xmm0,qword ptr [rsp+40]\n       vmovsd    xmm1,qword ptr [rsp+38]\n       vmovsd    qword ptr [rsp+28],xmm0\n       vmovsd    qword ptr [rsp+20],xmm1\n       vmovsd    xmm0,qword ptr [rsp+30]\n       call      System.Math.Cosh(Double)\n       vmulsd    xmm6,xmm0,qword ptr [rsp+20]\n       vmovsd    xmm1,qword ptr [rsp+28]\n       vxorps    xmm1,xmm1,[7FFF8ACA9540]\n       vmovsd    qword ptr [rsp+48],xmm1\n       vmovsd    xmm0,qword ptr [rsp+30]\n       call      System.Math.Sinh(Double)\n       vmulsd    xmm0,xmm0,qword ptr [rsp+48]\n       vmovsd    qword ptr [rbx],xmm6\n       vmovsd    qword ptr [rbx+8],xmm0\n       mov       rax,rbx\n       vmovaps   xmm6,[rsp+50]\n       add       rsp,60\n       pop       rbx\n       ret\n; Total bytes of code 148\n```\n**Extern method**\nSystem.Math.SinCos(Double, Double*, Double*)\nSystem.Math.Cosh(Double)\nSystem.Math.Sinh(Double)\n\n",
                                           "updatedAt":  "2024-08-07T02:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HdAw5",
                                           "createdAt":  "2024-08-07T03:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Ah, I see. I was running the benchmark with the wrong 9.0 path and it was picking up an outdated library version. Doing a clean build fixed that and I get:\r\n\r\n| Method     | value                    | Mean     | Error    | StdDev   | Median   | Min      | Max      | Code Size | Allocated |\r\n|----------- |------------------------- |---------:|---------:|---------:|---------:|---------:|---------:|----------:|----------:|\r\n| SinStephen | ?                        | 20.26 ns | 0.269 ns | 0.252 ns | 20.21 ns | 19.74 ns | 20.65 ns |     127 B |         - |\r\n| CosStephen | ?                        | 20.29 ns | 0.256 ns | 0.239 ns | 20.30 ns | 19.94 ns | 20.59 ns |     147 B |         - |\r\n| Cos        | \u003c0; 1\u003e                   | 14.83 ns | 0.103 ns | 0.091 ns | 14.84 ns | 14.63 ns | 15.01 ns |     148 B |         - |\r\n| Sin        | \u003c0; 1\u003e                   | 14.72 ns | 0.130 ns | 0.121 ns | 14.72 ns | 14.56 ns | 14.93 ns |     128 B |         - |\r\n| Cos        | \u003c1.23456789; 1.23456789\u003e | 20.13 ns | 0.169 ns | 0.159 ns | 20.13 ns | 19.86 ns | 20.37 ns |     148 B |         - |\r\n| Sin        | \u003c1.23456789; 1.23456789\u003e | 19.64 ns | 0.041 ns | 0.034 ns | 19.63 ns | 19.60 ns | 19.71 ns |     128 B |         - |\r\n| Cos        | \u003c1; 0\u003e                   | 15.14 ns | 0.149 ns | 0.132 ns | 15.09 ns | 14.99 ns | 15.46 ns |     148 B |         - |\r\n| Sin        | \u003c1; 0\u003e                   | 29.21 ns | 0.678 ns | 0.781 ns | 29.37 ns | 27.11 ns | 30.27 ns |     128 B |         - |\r\n| Cos        | \u003c1; 1\u003e                   | 19.99 ns | 0.161 ns | 0.150 ns | 20.02 ns | 19.79 ns | 20.25 ns |     148 B |         - |\r\n| Sin        | \u003c1; 1\u003e                   | 20.03 ns | 0.130 ns | 0.115 ns | 20.01 ns | 19.83 ns | 20.26 ns |     128 B |         - |\r\n| Cos        | \u003c1; 2\u003e                   | 19.86 ns | 0.049 ns | 0.041 ns | 19.85 ns | 19.81 ns | 19.95 ns |     148 B |         - |\r\n| Sin        | \u003c1; 2\u003e                   | 19.81 ns | 0.148 ns | 0.138 ns | 19.86 ns | 19.62 ns | 19.98 ns |     128 B |         - |\r\n\r\n-----------\r\n\r\nThe reason for the regresion here is that .NET 9 changed from calling:\r\n```\r\ndouble p = Math.Exp(value.m_imaginary);\r\ndouble q = 1.0 / p;\r\ndouble sinh = (p - q) * 0.5;\r\ndouble cosh = (p + q) * 0.5;\r\n```\r\n\r\nTo instead doing (effectively):\r\n```csharp\r\ndouble sinh = Math.Sinh(value.m_imaginary);\r\ndouble cosh = Math.Cosh(value.m_imaginary);\r\n```\r\n\r\nThis can be reproduced in isolation via:\r\n```\r\npublic IEnumerable\u003cobject\u003e Values()\r\n{\r\n    yield return new Complex(1.0, 0.0);\r\n    yield return new Complex(0.0, 1.0);\r\n    yield return new Complex(1.0, 1.0);\r\n    yield return new Complex(1.23456789, 1.23456789);\r\n    yield return new Complex(1, 2);\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(Values))]\r\npublic Complex SinNet8(Complex value)\r\n{\r\n    double p = Math.Exp(value.Imaginary);\r\n    double q = 1.0 / p;\r\n    double sinh = (p - q) * 0.5;\r\n    double cosh = (p + q) * 0.5;\r\n    return new Complex(Math.Sin(value.Real) * cosh, Math.Cos(value.Real) * sinh);\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(Values))]\r\npublic Complex SinNet9(Complex value)\r\n{\r\n    (var sin, var cos) = Math.SinCos(value.Real);\r\n    return new Complex(sin * Math.Cosh(value.Imaginary), cos * Math.Sinh(value.Imaginary));\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(Values))]\r\npublic Complex SinNet9Individual(Complex value)\r\n{\r\n    return new Complex(Math.Sin(value.Real) * Math.Cosh(value.Imaginary), Math.Cos(Value.Real) * Math.Sinh(value.Imaginary));\r\n}\r\n```\r\n\r\nThe change was made to ensure more correct results, but is more expensive since we\u0027re computing the proper `sinh` and `cosh` independently. We could introduce some `SinhCosh` pair to reduce this cost and win that back but that\u0027s likely out of scope for .NET 9. I don\u0027t think we want to back out the change since its explicitly there to ensure we get more accurate results and correct edge case handling.",
                                           "updatedAt":  "2024-08-07T03:07:25Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Complex.Sin/Cos regressions in .NET 9",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106915",
        "createdAt":  "2024-08-24T04:57:15Z",
        "number":  106915,
        "author":  "hez2010",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:22:11Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe modulus operator for `{U}Int128` is too slow:\r\n\r\n```cs\r\npublic static UInt64 ModMul_1(UInt64 first, UInt64 second, UInt64 modulus)\r\n{\r\n    return unchecked((UInt64)((Math.BigMul(first, second) % modulus));\r\n}\r\n\r\npublic static UInt64 ModMul_2(UInt64 first, UInt64 second, UInt64 modulus)\r\n{\r\n    return unchecked((UInt64)(((UInt128)first * second) % modulus));\r\n}\r\n```\r\n\r\nInstead we can provide a fast path by using `DivRem` for cases where `modulus` falls in the range of `UInt64`. For example:\r\n\r\n```cs\r\npublic static UInt128 operator %(UInt128 left, UInt128 right)\r\n{\r\n    if (X86Base.X64.IsSupported)\r\n    {\r\n        if (right._upper == 0)\r\n        {\r\n            return X86Base.X64.DivRem(left._lower, left._upper, right._lower).Remainder;\r\n        }\r\n    }\r\n        \r\n    return left % right;\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 9 Preview 7\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Data\r\n\r\n```cs\r\npublic class ModMulModule\r\n{\r\n    [Benchmark]\r\n    [Arguments(0x123456789ABCDEF0, 0x123456789ABCDEF0, 0x123456789ABCDEF0)]\r\n    public UInt64 ModMul_Slow(UInt64 first, UInt64 second, UInt64 modulus)\r\n    {\r\n        return unchecked((UInt64)(((UInt128)first * second) % modulus));\r\n    }\r\n\r\n    [Benchmark]\r\n    [Arguments(0x123456789ABCDEF0, 0x123456789ABCDEF0, 0x123456789ABCDEF0)]\r\n    public UInt64 ModMul_Fast(UInt64 first, UInt64 second, UInt64 modulus)\r\n    {\r\n        return unchecked((UInt64)Mod((UInt128)first * second, modulus));\r\n    }\r\n\r\n    public static UInt128 Mod(UInt128 left, UInt128 right)\r\n    {\r\n        if (GetUpper(in right) == 0)\r\n        {\r\n            if (X86Base.X64.IsSupported)\r\n            {\r\n                return X86Base.X64.DivRem(GetLower(in left), GetUpper(in left), GetLower(in right)).Remainder;\r\n            }\r\n        }\r\n\r\n        return left % right;\r\n    }\r\n\r\n    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = \"_upper\")]\r\n    static extern ref UInt64 GetUpper(ref readonly UInt128 value);\r\n\r\n    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = \"_lower\")]\r\n    static extern ref UInt64 GetLower(ref readonly UInt128 value);\r\n}\r\n```\r\n\r\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.1457)\r\n13th Gen Intel Core i7-13700K, 1 CPU, 24 logical and 16 physical cores\r\n.NET SDK 9.0.100-preview.7.24407.12\r\n  [Host]     : .NET 9.0.0 (9.0.24.40507), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 9.0.0 (9.0.24.40507), X64 RyuJIT AVX2\r\n\r\n\r\n| Method      | Mean       | Error     | StdDev    |\r\n|------------ |-----------:|----------:|----------:|\r\n| ModMul_Slow | 15.2984 ns | 0.0508 ns | 0.0475 ns |\r\n| ModMul_Fast | 0.4423 ns | 0.0045 ns | 0.0042 ns |",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiZMPbw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Jkwxz",
                                           "createdAt":  "2024-08-24T05:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The issue here isn\u0027t really that there is no \"fast path\", it\u0027s that it\u0027s implemented as `left - (left / right) * right` when instead it should be computing the remainder as part of the division, where its essentially \"free\".\r\n\r\nThe cost is significantly higher with the multi-step process because we have to fallback to a full division and multiplication algorithm.",
                                           "updatedAt":  "2024-08-24T05:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jkw9v",
                                           "createdAt":  "2024-08-24T05:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-24T05:16:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Fast path for {U}Int128.operator % when the modulus is within UInt64",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107047",
        "createdAt":  "2024-08-27T17:09:13Z",
        "number":  107047,
        "author":  "masonwheeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6mkpQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-27T20:37:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karakasa",
                                            "createdAt":  "2024-08-29T12:54:43Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-09-17T07:49:57Z",
        "body":  "### Background and motivation\r\n\r\nInspired by this discussion:\r\nhttps://discord.com/channels/143867839282020352/169726586931773440/1278024117202718913\r\n\r\nThere doesn\u0027t appear to be any way to determine if a type `T where T: INumber\u003cT\u003e` is an integer type or a real/float type.  There\u0027s `INumberBase.IsInteger`, but that works on values, not types.  It\u0027s not possible to try an `is` cast to `IBinaryInteger\u003cT\u003e` or `IFloatingPoint\u003cT\u003e` because it won\u0027t compile, as `T` is not known to satisfy the necessary type constraints at compile-time.\r\n\r\n### API Proposal\r\n\r\nThere should be a way to answer this question.  There are two obvious solutions: by methods, or by marker interfaces.\r\n\r\n## Methods:\r\nAdd to `INumberBase\u003cTSelf\u003e`:\r\n\r\n```\r\n        /// \u003csummary\u003eReturns true if this type is any type of integer.\u003c/summary\u003e\r\n        static abstract bool IsIntegerType { get; }\r\n\r\n        /// \u003csummary\u003eReturns true if this type is any type of number that supports a decimal point.\u003c/summary\u003e\r\n        static abstract bool IsFloatType { get; }\r\n```\r\nWith corresponding implementations on the various existing types.\r\n\r\n-----\r\n\r\n## Marker Interfaces:\r\nAdd to IBinaryInteger.cs:\r\n```\r\n+     public interface IBinaryInteger\r\n+     { }\r\n     /// \u003csummary\u003eDefines an integer type that is represented in a base-2 format.\u003c/summary\u003e\r\n     /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n     public interface IBinaryInteger\u003cTSelf\u003e\r\n          : IBinaryNumber\u003cTSelf\u003e,\r\n-           IShiftOperators\u003cTSelf, int, TSelf\u003e\r\n+           IShiftOperators\u003cTSelf, int, TSelf\u003e,\r\n+           IBinaryInteger\r\n         where TSelf : IBinaryInteger\u003cTSelf\u003e?\r\n```\r\n\r\nAdd to IFloatingPoint.cs:\r\n```\r\n+     public interface IFloatingPoint\r\n+     { }\r\n     /// \u003csummary\u003eDefines a floating-point type.\u003c/summary\u003e\r\n     /// \u003ctypeparam name=\"TSelf\"\u003eThe type that implements the interface.\u003c/typeparam\u003e\r\n     public interface IFloatingPoint\u003cTSelf\u003e\r\n         : IFloatingPointConstants\u003cTSelf\u003e,\r\n           INumber\u003cTSelf\u003e,\r\n-          ISignedNumber\u003cTSelf\u003e\r\n+          ISignedNumber\u003cTSelf\u003e,\r\n+          IFloatingPoint \r\n        where TSelf : IFloatingPoint\u003cTSelf\u003e?\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n## Methods:\r\n```\r\nvoid TypeTester\u003cT\u003e(T value) where T: INumberBase\u003cT\u003e\r\n{\r\n   if (T.IsInteger)  //ideally the JIT would be aware of this during code generation\r\n   {\r\n      DoSomething();\r\n   }\r\n   else\r\n   {\r\n      DoSomethingElse();\r\n   }\r\n}\r\n```\r\n-----\r\n## Marker interfaces:\r\n```\r\nvoid TypeTester\u003cT\u003e(T value) where T: INumberBase\u003cT\u003e\r\n{\r\n   if (value is IBinaryInteger)  //ideally the JIT would be aware of this during code generation\r\n   {\r\n      DoSomething();\r\n   }\r\n   else\r\n   {\r\n      DoSomethingElse();\r\n   }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nIf https://github.com/dotnet/csharplang/discussions/6308 were to be implemented, it would cover this problem without requiring API changes.\r\n\r\n### Risks\r\n\r\nThe method solution would work well and be very discoverable, but would be a breaking change to any existing third-party types that implement `INumberBase`.  The marker interface solution, on the other hand, would not break backwards compatibility, but it would be less discoverable and (maybe?) more difficult for the JIT to optimize.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOijL1XA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6J3yYB",
                                           "createdAt":  "2024-08-27T17:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-27T17:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J373l",
                                           "createdAt":  "2024-08-27T17:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Wouldn\u0027t this be a breaking change for types already implementing the interface?",
                                           "updatedAt":  "2024-08-27T17:30:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J38SW",
                                           "createdAt":  "2024-08-27T17:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODv3bvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-08-27T18:14:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "@eiriktsarpalis The methods version would; the marker interface version would not, as I noted in the Risks section.",
                                           "updatedAt":  "2024-08-27T17:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J4DBJ",
                                           "createdAt":  "2024-08-27T17:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Talking with Mason in Discord a bit now to go over and get a better idea of the problem they\u0027re trying to solve.\r\n\r\nNotably we could expose these as DIMs: `static virtual bool IsIntegerType =\u003e false;`. The benefit being that it just works and doesn\u0027t need new marker interface, with the downside being that not all types may correctly report support until they manually update. You could also give it a DIM that uses reflection to ensure all types are accurate initially, etc. However, there\u0027s not a lot you can do practically speaking by just knowing the type is an integer type. That is, it doesn\u0027t give you access to any additional functions or guarantees of support/behavior.\r\n\r\nIn Mason\u0027s case, it sounds like using `INumberBase\u003cT\u003e.Parse(string s, NumberStyles style, IFormatProvider? provider)` (and the `TryParse` equivalent) might suffice instead. The main downside of this API being that there isn\u0027t an easy way to detect which `NumberStyles` support up front, but it does allow handling numbers as `Hex`, `Binary`, `Integer`, `Float`, etc.\r\n\r\nReally we just need a way to bridge generic constraints or some support for self types so that things like `if (T is IBinaryInteger\u003cT\u003e)` or similar can be checked without needing to go through reflection + MakeGenericType.",
                                           "updatedAt":  "2024-08-27T17:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J4EFT",
                                           "createdAt":  "2024-08-27T17:49:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-JFkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2024-08-27T17:54:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-27T20:37:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-12-09T07:16:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e Really we just need a way to bridge generic constraints or some support for self types so that things like `if (T is IBinaryInteger\u003cT\u003e)` or similar can be checked without needing to go through reflection + MakeGenericType.\r\n\r\nNotably, this would also require new syntax, as `type is type` is not currently supported by the C# language; only `value is type`.",
                                           "updatedAt":  "2024-08-27T17:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J4G2R",
                                           "createdAt":  "2024-08-27T17:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwMovQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2024-08-27T17:58:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-27T20:02:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-08-28T09:28:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karakasa",
                                                                               "createdAt":  "2024-08-29T12:54:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Right 👍, some of that is covered in https://github.com/dotnet/csharplang/discussions/6308\r\n\r\nTake any code snippets as basic pseudo-code and not necessarily as the suggested syntax for it",
                                           "updatedAt":  "2024-08-27T17:55:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KI3oO",
                                           "createdAt":  "2024-08-29T12:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "\u003e dotnet/csharplang#6308\r\n\r\nJust wonder: is it compiled into sth like `typeof(T1).IsAssignableFrom(typeof(T2))` or should new IL be introduced for better performance?",
                                           "updatedAt":  "2024-08-29T13:13:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KMvVc",
                                           "createdAt":  "2024-08-29T18:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwXY9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karakasa",
                                                                               "createdAt":  "2024-08-30T03:25:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "That would be determined at the point in time that the feature is implemented.\r\n\r\nIt\u0027s entirely possible that new `RuntimeHelpers.*` APIs are exposed which are intrinsic and the JIT recognizes to allow the pattern to work. It\u0027s entirely possible that some other alternative is done instead\r\n\r\nIt really depends on what the language wants to support and what the runtime team says is the best way to support it, at that point in time.",
                                           "updatedAt":  "2024-08-29T18:37:20Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Determine if a Generic Math type belongs to certain type categories",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107052",
        "createdAt":  "2024-08-27T19:12:41Z",
        "number":  107052,
        "author":  "masonwheeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-17T08:09:58Z",
        "body":  "### Background and motivation\r\n\r\nIt\u0027s currently not supported to parse a negative number from a hex or binary string.  For example: https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEBGAOlIE4AKASzwzIAUBDKAZxmoCI4SAGAdzQACUmQDiAGwjAWU2gC8WGWhDxkAcjgC2wGFADKGAJ5SY7MgCF6bE9r0HReHFKkBKdwG4gA\r\n\r\nAnd the `NumberStyles.BinaryNumber` and `NumberStyles.HexNumber` values cannot be combined with `NumberStyles.AllowLeadingSign`.  It would be nice to rectify this.\r\n\r\n### API Proposal\r\n\r\n[Per discussion of the issue in Discord](https://discord.com/channels/143867839282020352/169726586931773440/1278057870314963047), modify [`the NumberStyles enum`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Globalization/NumberStyles.cs) like so:\r\n\r\n```diff\r\n         /// \u003csummary\u003e\r\n         /// Indicates that the numeric string represents a binary value. Valid binary values include the numeric digits 0 and 1.\r\n         /// Strings that are parsed using this style do not employ a prefix; \"0b\" cannot be used. A string that is parsed with\r\n         /// the \u003csee cref=\"AllowBinarySpecifier\"/\u003e style will always be interpreted as a binary value. The only flags that can\r\n-        /// be combined with \u003csee cref=\"AllowBinarySpecifier\"/\u003e are \u003csee cref=\"AllowLeadingWhite\"/\u003e and \u003csee cref=\"AllowTrailingWhite\"/\u003e.\r\n-        /// The \u003csee cref=\"NumberStyles\"/\u003e enumeration includes a composite style, \u003csee cref=\"BinaryNumber\"/\u003e, that consists of\r\n-        /// these three flags.\r\n+        /// be combined with \u003csee cref=\"AllowBinarySpecifier\"/\u003e are \u003csee cref=\"AllowLeadingWhite\"/\u003e, \u003csee cref=\"AllowTrailingWhite\"/\u003e, and \u003csee cref=\"AllowLeadingSign\"/\u003e.\r\n+        /// The \u003csee cref=\"NumberStyles\"/\u003e enumeration includes two composite styles, \u003csee cref=\"BinaryNumber\"/\u003e, that consists of\r\n+        /// the first three of these flags, and \u003csee cref=\"SignedBinaryNumber\"/\u003e, that includes all four.\r\n         /// \u003c/summary\u003e\r\n         AllowBinarySpecifier = 0x00000400,\r\n\r\n         Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\r\n\r\n         HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\r\n\r\n+        SignedHexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier | AllowLeadingSign,\r\n\r\n         /// \u003csummary\u003eIndicates that the \u003csee cref=\"AllowLeadingWhite\"/\u003e, \u003csee cref=\"AllowTrailingWhite\"/\u003e, and \u003csee cref=\"AllowBinarySpecifier\"/\u003e styles are used. This is a composite number style.\u003c/summary\u003e\r\n         BinaryNumber = AllowLeadingWhite | AllowTrailingWhite | AllowBinarySpecifier,\r\n\r\n+        /// \u003csummary\u003eIndicates that the \u003csee cref=\"AllowLeadingWhite\"/\u003e, \u003csee cref=\"AllowTrailingWhite\"/\u003e, \u003csee cref=\"AllowBinarySpecifier\"/\u003e, and \u003csee cref=\"AllowLeadingSign\"/\u003e styles are used. This is a composite number style.\u003c/summary\u003e\r\n+        SignedBinaryNumber = AllowLeadingWhite | AllowTrailingWhite | AllowBinarySpecifier | AllowLeadingSign,\r\n```\r\n\r\n### API Usage\r\n\r\nint.Parse(\"-1010\", System.Globalization.NumberStyles.SignedBinaryNumber, null);\r\n\r\nEdge case specification:\r\n\r\nIn the current binary and hex parsing logic, a value larger than `T.MaxValue` will wrap around and parse as a negative number if its magnitude is not too high.  (ie. `80000000` is a valid hex value for `int.Parse`.)  With a signed number, this should not be valid, and should throw the appropriate exception.\r\n\r\nA negative binary or hex value that equates to `T.MinValue` should parse correctly.\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOirP4nA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6J6ymk",
                                           "createdAt":  "2024-08-28T01:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-28T01:10:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J6zaJ",
                                           "createdAt":  "2024-08-28T01:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This seems like an overall reasonable proposal and fits with the way many languages support hex and binary values for signed vs unsigned numbers. It is something that is not trivial to handle on your own, especially in generic contexts, due to the overflow scenario.\r\n\r\nWould like to get a second opinion from someone like @stephentoub or @GrabYourPitchforks before I mark it `ready-for-review`, however.\r\n",
                                           "updatedAt":  "2024-08-28T01:14:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ks7Qt",
                                           "createdAt":  "2024-09-03T17:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "What would be the downside of just updating HexNumber and BinaryNumber to include AllowLeadingSign rather than adding new values to the enum?",
                                           "updatedAt":  "2024-09-03T17:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ks_ic",
                                           "createdAt":  "2024-09-03T17:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw1iYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2024-09-03T17:20:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The issue ends up being how values like `FFFFFFFF` are interpreted.\r\n\r\nC# only supports what is conceptually `SignedHexNumber` and so this literal (`0xFFFFFFFF`) is always treated as `4,294,967,295`. Adding a sign then works just like decimal numbers and so adding a sign (`-0xFFFFFFFF)` always gives you `-4,294,967,295`\r\n\r\nHowever, `HexNumber` in .NET currently treats this as a \"raw bit representation\" and so it (parsing `FFFFFFFF`) is treated instead as `-1` for `int`. Having `-FFFFFFFF` produce `1` would then be confusing to most users and having `FFFFFFFF` vs `+FFFFFFFF` be different or `FFFFFFFF` vs `-FFFFFFFF` behave differently would be equally confusing.\r\n\r\nSo I believe if we were to support this, then we need to have either a net new named member `SignedHexNumber` and/or recognize `HexNumber | AllowLeadingSign` so that it works more like C# does, so that `FFFFFFFF` and `+FFFFFFFF` produce `4,294,967,295` and `-FFFFFFFF` produces `-4,294,967,295`. While keeping just `HexNumber` \"as is\" where its parsed as a representation of the raw bits, not with any sign.",
                                           "updatedAt":  "2024-09-03T17:19:47Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: New NumberStyles: SignedHexNumber and SignedBinaryNumber",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107276",
        "createdAt":  "2024-09-03T06:18:56Z",
        "number":  107276,
        "author":  "universorum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-17T07:50:00Z",
        "body":  "### Background and motivation\n\nConsider the string `Value: 0xff`. If the API only accept the string, we will need create the new string instance by `str[^2..]`.\r\n\r\nIn the API inside, many method like `ParseNumbers.StringToInt` (internal class) and `int.Parse` already accpet the `ReadOnlySpan\u003cchar\u003e` type. Why we cannot pass the `ReadOnlySpan\u003cchar\u003e` to API to avoid alloc?\r\n\r\n\r\nalso #22848\n\n### API Proposal\n\n```csharp\r\nnamespace System;\r\n\r\npublic static class Convert\r\n{\r\n    public static byte   ToByte(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static byte   ToByte(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static byte   ToByte(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static sbyte  ToSByte(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static sbyte  ToSByte(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static sbyte  ToSByte(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static short  ToInt16(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static short  ToInt16(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static short  ToInt16(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static ushort ToUInt16(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static ushort ToUInt16(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static ushort ToUInt16(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static int    ToInt32(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static int    ToInt32(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static int    ToInt32(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static uint   ToUInt32(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static uint   ToUInt32(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static uint   ToUInt32(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static long   ToInt64(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static long   ToInt64(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n    public static long   ToInt64(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static ulong  ToUInt64(ReadOnlySpan\u003cchar\u003e? value);\r\n    public static ulong  ToUInt64(ReadOnlySpan\u003cchar\u003e? value, IFormatProvider? provider);\r\n    public static ulong  ToUInt64(ReadOnlySpan\u003cchar\u003e? value, int fromBase);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar str = \"Value: 0xff\"\r\nlong result = Convert.ToInt64(str.AsSpan()[^2..], 16);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOirRD5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Kn-3R",
                                           "createdAt":  "2024-09-03T06:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-03T06:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kn_Hg",
                                           "createdAt":  "2024-09-03T06:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The Convert pattern is deprecated for a long time. But we do need a better way to convert with different bases.",
                                           "updatedAt":  "2024-09-03T06:54:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kn_3M",
                                           "createdAt":  "2024-09-03T06:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AmrAlSayed0",
                                           "body":  "@huoyaoyuan Out of curiosity, deprecated in favor of what?",
                                           "updatedAt":  "2024-09-03T06:56:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KoCBL",
                                           "createdAt":  "2024-09-03T07:02:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxQUBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2024-09-03T07:03:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-09-03T12:31:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-09-06T09:26:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e deprecated in favor of what?\r\n\r\n`Parse` methods on each type, like `int.Parse` and `int.TryParse`.",
                                           "updatedAt":  "2024-09-03T07:02:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KoDWJ",
                                           "createdAt":  "2024-09-03T07:05:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e But we do need a better way to convert with different bases.\r\n\r\nThis largely already exists. Convert only supports a fixed set of bases today: `2`, `8`, `10`, and `16`\r\n\r\nAll of these except octal (`8`) are supported via passing in the relevant `NumberStyles` options to the `int.Parse` and related APIs nowadays",
                                           "updatedAt":  "2024-09-03T07:06:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KoF2O",
                                           "createdAt":  "2024-09-03T07:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e All of these except octal (`8`) are supported via passing in the relevant `NumberStyles` options to the `int.Parse` and related APIs nowadays\r\n\r\nYes, but it\u0027s still gap we can improve: add octal options to `NumberStyles`, and dispatch `NumberStyles` based on numeric base values.",
                                           "updatedAt":  "2024-09-03T07:12:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KqA_q",
                                           "createdAt":  "2024-09-03T11:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e and dispatch NumberStyles based on numeric base values\n\nI don\u0027t think I\u0027ve ever seen a meaningful example where fromBase wasn\u0027t a constant. What\u0027s the scenario for this? ",
                                           "updatedAt":  "2024-09-03T11:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KtEPl",
                                           "createdAt":  "2024-09-03T17:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw4QmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2024-09-04T00:43:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Duplicate of #61397?",
                                           "updatedAt":  "2024-09-03T17:30:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: System.Convert base on ReadOnlySpan\u003cchar\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107407",
        "createdAt":  "2024-09-05T16:15:56Z",
        "number":  107407,
        "author":  "PavielKraskouski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-17T07:50:02Z",
        "body":  "### Background and motivation\n\nProjecting a point onto a plane is a basic operation that can be used in a variety of problems.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Numerics;\r\n\r\npublic struct Plane\r\n{\r\n    public static Vector3 Project(Plane plane, Vector3 point)\r\n    {\r\n        return point - (Vector3.Dot(plane.Normal, point) + plane.D) * plane.Normal;\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nVector3 point = new(1, 2, 3);\r\nPlane plane = new(Vector3.UnitY, -5);\r\nVector3 projectedPoint = Plane.Project(plane, point);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiwlwfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LAbPB",
                                           "createdAt":  "2024-09-05T16:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-05T16:16:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LBqca",
                                           "createdAt":  "2024-09-05T19:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Wouldn\u0027t this be more intuitive if it was an extension on `Vector` instead of a pure `static` method?\r\n\r\n```csharp\r\npublic static class VectorProjectionExtensions\r\n{\r\n    public static Vector3 ProjectOnto(this Vector3 point, Plane plane)\r\n```\r\n\r\n```csharp\r\nVector3 point = new(1, 2, 3);\r\nPlane plane = new(Vector3.UnitY, -5);\r\nVector3 projectedPoint = point.ProjectOnto(plane);\r\n```",
                                           "updatedAt":  "2024-09-05T19:19:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LB3o9",
                                           "createdAt":  "2024-09-05T19:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavielKraskouski",
                                           "body":  "In this case, it is better to make this method static for `Vector3`, similar to `Vector3.Transform` methods.\r\n\r\n``` csharp\r\nnamespace System.Numerics;\r\n\r\npublic struct Vector3\r\n{\r\n    public static Vector3 Project(Vector3 point, Plane plane);\r\n}\r\n```",
                                           "updatedAt":  "2024-09-05T19:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LCU_4",
                                           "createdAt":  "2024-09-05T21:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e In this case, it is better to make this method static for `Vector3`, similar to `Vector3.Transform` methods.\r\n\r\n@PavielKraskouski can you elaborate why it is better? Are you arguing just for consistency with `Vector3.Transform`, or is there more to it?\r\n\r\nI think the extension method approach not only makes this more intuitive to use, but also more discoverable.\r\n\r\nI do agree that `Vector3.Project` seems more intuitive than `Plane.Project` though as the latter gives the impression you are \"projecting the plane\", which is not really what is happening.\r\n",
                                           "updatedAt":  "2024-09-05T21:16:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LCXB-",
                                           "createdAt":  "2024-09-05T21:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxK8gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-05T21:53:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PavielKraskouski",
                                           "body":  "@julealgon My main argument is that .Net doesn\u0027t have a separate extension method class for vectors, so I think creating a class with one method is impractical. However, if .Net developers approve this method, they\u0027ll decide where to add it.",
                                           "updatedAt":  "2024-09-05T21:25:45Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Plane.Project",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107990",
        "createdAt":  "2024-09-18T16:40:13Z",
        "number":  107990,
        "author":  "lewing",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-21T00:02:23Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=811976\r\nBuild error leg or test failing: System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest\r\nPull request: https://github.com/dotnet/runtime/pull/107917\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=811976\r\n**Error message validated:** `[at System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/18/2024 4:40:32 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1138231](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138231)|dotnet/runtime|[System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138231\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31350890\u0026resultId=169802)|dotnet/runtime#119308|\r\n|[1134740](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134740)|dotnet/runtime|[System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134740\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31233146\u0026resultId=149708)|dotnet/runtime#119173|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|2|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkQMfew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MmrPc",
                                           "createdAt":  "2024-09-18T16:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T16:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RAx97",
                                           "createdAt":  "2024-10-23T17:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2024-10-23T17:12:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "failure in  System.Numerics.Tests.op_rightshiftTest.LargeNegativeBigIntegerShiftTest",
        "labels":  [
                       "area-System.Numerics",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109328",
        "createdAt":  "2024-10-29T08:40:16Z",
        "number":  109328,
        "author":  "BarionLP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8PnMA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jubruckne",
                                            "createdAt":  "2024-10-29T13:59:38Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-16T07:12:44Z",
        "body":  "It would be really nice if System.Numerics.Tensors.TensorPrimitives had partial derivative functions (gradient) for SoftMax and Sigmoid as they are commonly needed in machine learing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm3dMDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RphVT",
                                           "createdAt":  "2024-10-29T08:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-29T08:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RzbFH",
                                           "createdAt":  "2024-10-30T08:32:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lilinus",
                                           "body":  "What do you mean with derivative for SoftMax, since it is a vector-valued multivariate function? The Jacobian matrix?",
                                           "updatedAt":  "2024-10-30T08:32:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R051E",
                                           "createdAt":  "2024-10-30T10:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BarionLP",
                                           "body":  "\u003e What do you mean with derivative for SoftMax, since it is a vector-valued multivariate function? The Jacobian matrix?\n\nthe partial derivative used in backpropagation (gradient of each element)\n$$∂softmax(z)_i \\over ∂z_i$$",
                                           "updatedAt":  "2024-10-30T11:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R1Nlr",
                                           "createdAt":  "2024-10-30T11:11:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BarionLP",
                                           "body":  "thats what I\u0027m using in my little experiment (I\u0027m not an expert).\nhttps://gist.github.com/BarionLP/03f7dcd61d5d604a5ef36e303f990120\n$softmax(x_i)*(1−softmax(x_i))$",
                                           "updatedAt":  "2024-10-30T11:19:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bd0wM",
                                           "createdAt":  "2025-01-22T21:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BarionLP",
                                           "body":  "I\u0027m trying to add this, but i\u0027m not familiar enough with the operators structure in `System.Numerics.Tensors`. does someone know how to do this with the existing operators or do i need a new one?\n(preferably the version i shared in the gist as it is faster than $softmax(x_i)*(1−softmax(x_i))$ )",
                                           "updatedAt":  "2025-01-23T08:39:00Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "provide gradient function for SoftMax and Sigmoid in System.Numerics.Tensors.TensorPrimitives",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111234",
        "createdAt":  "2025-01-09T11:40:24Z",
        "number":  111234,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-16T04:33:28Z",
        "body":  "Most of these methods have a vectorized version in TensorPrimitives which could be used on `_bits` perhaps with some threshold on the size.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmqRLYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zxs8D",
                                           "createdAt":  "2025-01-09T11:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-09T11:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zytrl",
                                           "createdAt":  "2025-01-09T13:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECritQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-01-16T04:33:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Currently S.R.Numerics is inbox, and thus can\u0027t take a dependency on S.N.Tensors.\nThe optimization of BigInteger is still in the backlog. There are also other potential tasks.",
                                           "updatedAt":  "2025-01-09T13:44:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6apEtg",
                                           "createdAt":  "2025-01-16T04:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Moving into the Future milestone along with the other BigInteger items.",
                                           "updatedAt":  "2025-01-16T04:33:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Vectorize BigInteger\u0027s IBinaryInteger implementation",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111911",
        "createdAt":  "2025-01-14T08:32:42Z",
        "number":  111911,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T20:11:11Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Ubuntu2204\",\"Queue\":\"TigerUbuntu\",\"Frequency\":\"Weekly\",\"CoreClr\":false,\"Mono\":true,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"LLVM:false\",\"MonoAOT:false\",\"MonoInterpreter:false\",\"RunKind:micro_mono\"]},\"RegressionDate\":\"2025-01-10T20:45:38\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Tests.Perf_DateTimes\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[WriteDateTimes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.DateTimes.cs#L41-#L57\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/cPTFrciatBtiC7LEGBswVoHWaHucTHJpDY4d2RfWauO/c05bJODlHJ/vvvvu+2KQgDAQSHgrlttA2EwL3ND0OjjLX4HC9Cv6+uG9Iix0g2F67zXhn+v4yvlGEWGVw5UyARNY/tDtnTK6UqSdzaHwHU7Em+HA8DBVE3qexo9IDDCeZ/OTo9nsaHZSZKf5cZYfz6enZ9nr2dmrl1mWZ9lk3+mxddwoKkcWKfWdjf0H3G9e2XId3z3WIV2jqkLaKG0PBaWztV7FyVurGl2On8SFa1ptepYLV6HIQZBGj5VIQNzc3C1ipo5LxcTCWXf+pfgv98nyRq1Hjn+93Xb2s7ZVzPE47x4aLha/4jofkD7qQM7rUhmWUt1rWkc2ymvWPYyjJTKGZCeY7GPSayBjSPYLy92R7NeTu2MyHDxD6913LAmW6DWGBN512lTRsyWppk2ALepQRosvHGuJ/hZDZ+j8J3q1wuEgTZ/hcc1y7BHgBYMTKxpgNCJ3uSlNV+FoBGkKlxuGNAiuhlobxtJ2Ba5juyH0zZGQR1ux99G1cq08wSNvDeNdgTzQ3JTOdI2V/9Ld7vJB9ry5jjQZlCL+iSz3dn9doAqdxwYticlvmXuxcd4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.92 ms | 19.24 ms | 1.21 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDateTimes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted%3a%20True%2c%20SkipValidation%3a%20True).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.DateTimes.cs#L41-#L57\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS247TMBB9r9R/GPriVmSb9CJRBVliWZbrVqBttfu4MsmkNTh2ZE/YViz/zrhJkYCXcXw8lzPnxCABYSCQ8EpsjoGwnm7xQNOPwVn+ChSmX9BXD28U4VbXGKb3XhP+uY7fOl8rIixz2PoWE9h8182dMrpUpJ3t0Il4ORwYnqUqQs/D+BGJ68fzbL68mM0uZstttsoXWb5YTLP5KluuXjzPsjzLJn2lx8ZxoSgdWaTUtzbWn/t+9coW+/jusQrpHlUZ0lppe04onK30Lk4+WlXrYvxTXLm60ebEcu1KFDkI0uixFAmIm5u7dUQqZQJGYO2su/y8/Q/7YHmjxiPHv95uW/tJ2zJiPM67h5qTxa+4zjuk9zqQ87pQhpVU95r2kY3ymmUP4+iIjCHpBJOnmJw0kDEk/cKyO5J+Pdkdk+HgCRrvvmFBsEGvMSTwutWmjJZtSNVNAmxRizI6fOVYS/S3GFpDlz/Qqx0OB2n6BI97lqPvAM+4ObGiAUYjcteHwrQljkaQpnB94JYGwVVQacO9tN2Ba9luCKfiSMijLdn76FqxV57gkbeGcZcgzzQPhTNtbeW/dI8dHuSJN+eRJoNSxB+R5T721zWq0Hqs0ZKY/AYOWtuV3QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 17.31 ms | 20.78 ms | 1.20 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDateTimes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.DateTimes.cs#L41-#L57\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/cPTFrciSdB0MBVlijG0wVoHWanucTHJpDY4d2RfWiu2/c25TJODlHJ/vvvvu+2KQgDAQSHgnFttA2KRL3FB6HZzlr0Ah/Yq+fvigCJe6wZDee0345zq+dL5RRFgVcKlMwAQWP3R7p4yuFGln+/REvB0ODE9TNaHncfyKxAjj4/z45Gg6PZqeLPM3xSwvZrN0Ojt9dfp69jLPizyf9J0eW8eNonJkkTLf2dh/wP3mlS3X8d1jHbI1qipkjdL2UFA6W+tVnLy1qtHl+Jc4d02rzY7m3FUoChCk0WMlEhA3N3fzmKkj/ZiYO+vOviz/y32yvFHrkeNfb7ed/axtFXM8zruHhovFc1znCumjDuS8LpVhLdW9pnVko7xm4cM4eiJjSPaCyV1MdhrIGJJ+Ybk/kn49uT8mw8ETtN59x5JggV5jSOB9p00VTVuQatoE2KMOZfT43LGW6G8xdIbOfqJXKxwOsuwJHtcsR48ALxicWNEAoxG5i01pugpHI8gyuNgwpEFwNdTaMJa2K3Ad2w1h1xwJebQVex9dK9fKEzzy1jDeF8gDzU3pTNdY+S/d7T4f5I4315Emg1LEX5Hl3vbXOarQeWzQkpj8BvatLozfAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 16.27 ms | 19.39 ms | 1.19 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDateTimes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted%3a%20True%2c%20SkipValidation%3a%20False).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.DateTimes.cs#L41-#L57\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS72/TMBD9Xqn/w9EvbkXWpD+GIMgSY2yDsQq0VtvHySSX1uDYkX1hrdj+d85piwR8Ocfnu3fv3otBAsJAIOGdWO4CYT1e4ZbG18FZ/goUxl/RVw8fFOFK1xjG914T/rkOL52vFRGWOax8iwksf+jmThldKtLO5nCpTMCReNvvGR6mKkLP0/gViQGG02w6P5lMTibzVfY6n2X5bDaevjo9nU/fvMyyPMtGh06PjeNGUTqySKlvbew/4n7zyhab+O6xCukGVRnSWml7LCicrfQ6Tt5ZVeti+Eucu7rRpqO5cCWKHARp9FiKBMTNzd0iZqpIPyYWzrqzL6v/cp8sb9R45PjX221rP2tbxhyP8+6h5mLxHNe5QvqoAzmvC2VYSnWvaRPZKK9Z9zCMlsgYkr1gsotJp4GMITksLPdHclhP7o9Rv/cEjXffsSBYotcYEnjfalNGz5ak6iYB9qhFGS0+d6wl+lsMraGzn+jVGvu9NH2Cxw3LcUCAFwxOrGiAwYDcxbYwbYmDAaQpXGwZ0iC4CiptGEvbNbiW7YbQNUdCHm3J3kfXio3yBI+8NQz3BfJIc1s409ZW/kt3t88H2fHmOtJkUIr4J7Lcu8N1gSq0Hmu0JEa/AbfENi/eAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 17.28 ms | 21.15 ms | 1.22 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_DateTimes_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_DateTimes_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_DateTimes_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_DateTimes_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_DateTimes.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_DateTimes*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_DateTimes*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_DateTimes*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_DateTimes*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted: False, SkipValidation: True)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted: True, SkipValidation: True)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted: False, SkipValidation: False)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_DateTimes.WriteDateTimes(Formatted: True, SkipValidation: False)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SerializeToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToString(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L75-#L76\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS224TMRB9j5R/GPLiRGyzm6RAFeqK0lbl0lCpWbWPyN2dTYy8dmSPaQLl3xnnggS8jOXxzJk559ggAWEgkPBOzDeBsB2WuKbhp+DscI5eK6N/KNJ8K7kuDB+8Jkyvp1+iMerR4OmlIix1i7dNE5DOzv70Yenm5LVd9GeuxinMXfQVXqMdiLfdjuHZqiH0PLxmCGKI/rgYHx+NRkej47I4mU6K6eT1cHwyejU5fvOyKKZFMdh3elw5bhS1I4uU+2hT/wH30StbLdO7xybkS1R1yFul7aGgcrbRizR5Y1Wrq/5PceHalTZbrmldMQVBGj3WIgNxc3M/S5lGmYApMXPWnd+W/+U+Wma08sjxr7e7aD9rW6ccj/Pua8vF4leic430QQdyXlfKsJjqQdMybaO8ZqFDPzkkU8h2gsltzLYayBSyPWG5O7I9Pbk7Bt3OM6y8+4YVQfIGQwbvozZ1cm1Oql1lcK9MRJk8vnCsJfo7DNHQ+Xf0aoHdTp4/w9OS5dgjwAsGJ1Y0QK9H7mpdmVhjrwd5DldrhjQIroFGG8biLwAust0Qts1pIY+2Zu+Ta9VSeYInZg39XYE8rLmunImtlf+uu9nlg9zuzXWkyaAU6S+y3Jv9dYYqRI8tWhKD30A6dZrtAgAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 669.11 ns | 709.69 ns | 1.06 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToUtf8Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToUtf8Bytes(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L78-#L79\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSXW8aMRB8R+I/bHkxqBfuCFFCaRw1SaN+hUaCa/JYOXd74MpnI3uvgTb9713DUanty1pe787OztggAWEgkPBGLLaBsB7muKHhx+DscIFeK6N/KNJ8y7kuDB+8Joyv558bY9SjwfO3ijDXNd5VVUC6uPjTh7n7QtXkassj+jNX4hTmWBksIt5AvO52DM9XFaFnAiXDEMP0j7Pjk6PR6Gh0kmeT6Tibjk+H48nZq9Oz7GWWTbNs0HZ6XDtuFKUji5T6xsb+A+6jV7ZYxXePVUhXqMqQ1krbQ0HhbKWXcfLWqloX/Z/i2tVrbXb7Rr5iCoI0eixFAuL29n4WM5UyAWNi5qy7vMv/y32wvNHaI8e/3uaN/aRtGXM8zruvNReLX3Gdd0jvdSDndaEMC6oeNK0iG+U1ix360SUZQ7IXTO5istNAxpC0C8v9kbTryf0x6HaeYe3dNxYfoj8YErhqtCmjcwtS9TqBe2UalNHna8daop9jaAxdfkevltjtpOkzPK1YjhYBXjA4saIBej1yN5vCNCX2epCmcLNhSIPgKqi0YSxtl+AathvCrjkS8mhL9j66VqyUJ3jiraG/L5AHmpvCmaa28l+6230+yB1vriNNBqWI/5Hl3rbXGarQeKzRkhj8BiLGn/vxAgAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 483.52 ns | 519.24 ns | 1.07 | 0.00 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToUtf8Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToUtf8Bytes(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L78-#L79\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSXW8TMRB8j5T/YPLiRFxzlzYK4agr2lKVj4ZKzdE+IvduLzHy2Sd7TRMo/511ckECXtbyend2dsYakCF4ZIK95cutR2jGBWxw/NFbM16CU1KrHxIV3Qqq8+MHpxDi6+nnoLV81HD6TiIUqoHbuvaAZ2d/+qCwX7CeX2xpxHBhK8jZ0gZXwjWYEX/T72kaL2sER/MrQkFCGR5nx9OjyeRoMi2yeX6S5Sez8XQ+m716PXuZZXmWjbpOB62lRl5ZNICpCyb2H3AfnTTlOr47qH26Bln5tJHKHApKa2q1ipO3RjaqHP7kl7Zpld6tG+nynHFU4KDiCeM3N/eLmKml9hATC2vs+W3xX+6DoY1aBxT/ersL5pMyVczROGe/NlTMf8V1rgHfK4/WqVJq0lM+KFxHNtIp0toPo0kihmQvmNjFZKeBiCHpFhb7I+nWE/tj1O89s9bZb1Aii/aAT9hFULqKxi1RNm3C7qUOIKLNl5a0BHcHPmg8/w5OrqDfS9Nn9rQmOToE9oLAkRT1bDBAe7UpdahgMGBpyq42BKmB2ZrVShOWMitmA9nN/K45EnJgKvI+ulaupUP2RFuz4b5AHGhuSqtDY8S/dLf7vBc73lSHCjUIHr8jyb3trguQPjhowCAf/QatmmyL8AIAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 472.17 ns | 511.12 ns | 1.08 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToWriter(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS227TQBB9j5R/GPKyiXBjxy2oDd2K0lbcGiolVvuItvY4WbTejXbHNIHy78w6CRLwMivP5cyZc2yQgDAQSHgrFttA2IwL3ND4U3B2vECvldE/FGn+KrgvjB+8JozV8y+tMerR4Pm1Iix0g3d1HZAuLv7MYeG6dj+cuQqnMMfaYBnBRuJNv2d4uaq5zNsrxiDGGOZZfnI0mRxNTorsdHqcTY9fj1+d5Xl+dvoyy6ZZNtpPelw7HhSVI4uU+tbG+QPuo1e2XMW6xzqkK1RVSBul7aGhdLbWy7h5a1Wjy+FPceWatTbdsZGvmIIgjR4rkYC4vb2fxUytTMCYmDnrLu+K/3IfLV+09sjxr9q8tZ+1rWKO13n3teFm8Sue8x7pgw7kvC6VYTXVg6ZVZKO8ZqXDMFokY0h2gskuJp0GMoZkf7DcPcn+PLl7Rv3eM6y9+8biQzQHQwLvWm2qaNuCVLNO4F6ZFmU0+cqxlujnGFpDl9/RqyX2e2n6DE8rlmOPAC8YnFjRAIMBuZtNadoKBwNIU7jZMKRBcDXU2jCWtktwLdsNoRuOhDzair2PrpUr5Qme+GoY7hrkgeamdKZtrPyX7naXD7LjzX2kyaAU8Wdkubf7zxmq0Hps0JIY/QaRjqRD7gIAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 298.50 ns | 337.50 ns | 1.13 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToString(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L75-#L76\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS227bMAx9D5B/4PKiBHNjJw2CwKuKdV3RXZoVSIz2cVBtOtEgS4FEr8nW/fuoXAZse6EgijzkOUcGCQgDgYS3YrkLhM2wwC0NPwVnh0v0Whn9Q5HmW8F1YfjoNWF8vfjSGqOeDF68V4SFbvC+rgPS5eWfPizckry2q/7cVZjDAmuDZQQbiDfdjuHhqib0PL1iDGKM/jgbT85Go7PRpMhm+XmWn0+H09l0NhmPX2dZnmWDY6fHjeNGUTmySKlvbew/4T55Zct1fPdYh3SNqgppo7Q9FZTO1noVJ++sanTZ/ymuXbPRZk827ityEKTRYyUSEHd3D/OYqZUJGBNzZ93VffFf7qNlRhuPHP96W7T2s7ZVzPE47742XCx+RTq3SB90IOd1qQyrqR41reM2ymtWOvSjRTKG5CCY3Mdkr4GMITkSlocjOdKTh2PQ7bzAxrtvLD5EczAk8K7Vpoq2LUk1mwQelGlRRpOvHWuJfoGhNXT1Hb1aYbeTpi/wvGY5jgjwisGJFQ3Q65G72ZamrbDXgzSFmy1DGgRXQ60NY/EfANey3RD2zXEhj7Zi76Nr5Vp5gmdmDf1DgTytuS2daRsr/113d8gHud+b60iTQSniZ2S5d8frHFVoPTZoSQx+A5ccxmzuAgAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 668.95 ns | 721.41 ns | 1.08 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Nullable(DateTimeOffset)).SerializeToWriter(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSXW/TMBR9r9T/YPriVmRJunVjhHlijGl8rExao+0ReclNa+TYkX3NWhj/neu0RQJerpX7ce6550QDMgSPTLC3fLHxCG1awhrTT96adAFOSa1+SFT0VVKfTx+cQojVsy9Ba/mo4ey9RChVC7dN4wHPz//MQWn7djee2xoKtrDBVXANZsLfDAeadsuGqrS8JggkiPFhfjg7mE4PprMyPy2O8uLoJH11Ojt+fXzyMs+LPJ/sJh10lgZ5bdEAZi6YOL/HfXTSVKtYd9D4bAWy9lkrldk3VNY0ahk3b4xsVTX+yS9t2ynd3xrp8oJxVOCg5gnjNzf385hppPYQE3Nr7MVt+V/uo6GLOgcU/6rdBfNZmTrmaJ2zX1tq5r/iOdeAH5RH61QlNYkpHxSuIhvpFAntx9EhEUOyFUz0Mek1EDEku4PF9kl254ntMxkOnlnn7DeokEVvwCfsXVC6jq4tULZdwu6lDiCix5eWtAR3Bz5ovPgOTi5hOMiyZ/a0Ijl2COwFgSMp6tlohPZqXelQw2jEsoxdrQlSA7MNa5QmLGWWzAaym/l+OBJyYGryPrpWraRD9kRXs/G2QexpriurQ2vEv3Q327wXPW/qQ4UaBI//Ism92X3OQfrgoAWDfPIbOVk+Z+0CAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 299.06 ns | 335.89 ns | 1.12 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29_006.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Nullable%28DateTimeOffset%29%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToString(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToUtf8Bytes(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToUtf8Bytes(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToWriter(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToString(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Nullable\u0026lt;DateTimeOffset\u0026gt;\u0026gt;.SerializeToWriter(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Tests.Perf_Basic\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L94-#L126\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTXPTMBC9dyb/YclFyeDGdtOBxoxmaEvLVzMwTWiPHWGvE4EseaQ1TaD8d1ZOcgB8WMlP+/H2PYMEhIFAwmux2AbCZrLEDU0+BGf5FihMPqOvHy5U0OXk3mvC/vqF6vzF6Nr5RhFhVcC1MgETWHzX7Z0yulKknS1g6TtG3yhSC/0TC8iz+I3Fq8GR4dmqJvQ8nNORdIOjk+zk9DjPj/PTZXZWTLNiOpvkL/Oz2XT2PMsKLt1XemwdF4rKkUVKfWdj/aHvV69suY7vHuuQrlFVIW2UtoeE0tlar+LkrVWNLke/xKVrWm163nNXoShAkEaPlUhA3NzczSNSxzUjMHfWnX9a/oe9t7xR65HjX2+3nf2obRUxHufdQ8PJ4ndc5y3SOx3IeV0qE6W617SObJTXbEMYRYdkDMlOMNnHpNdAxpDsF5a7I9mvJ3fHeHD0BK1337AkWKDXGBK46LSplizZglTTJsCmdSij45eOtUR/i6EzdP4DvVrh4ChNn+BxzXLsO8Azbk6saIDhkNzVpjRdhcMhpClcbbilQXA11NpwL21X4Dq2G0JfHAl5tBV7H10r18oTPPLWMNolyAPNTelM11j5L93tDg+y5815pMmgFCxflHu7/52jCp3HBi2J8R8Q7E9e7QIAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 6.23 ms | 7.22 ms | 1.16 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20False%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L94-#L126\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR23LTMBB9z0z+YcmLksGNnQsMNaMZ2tKWSzMwTWgfO8JeJwJZ8khrmkD5d1ZO8gD4YSUf7eXsOQYJCAOBhDdiuQuE9XiFWxp/CM7yLVAYf0ZfPZyroIvxvdeE3fULVZOXwyvna0WEZQ4r32ICy++6uVNGl4q0szlcKRMYfqtILfVPzGGSxW8kXvd7hmeritDzcM5H0jUOp9l0fjKZnEzmq+xVPsvy2el4ejqdv5hNn2dZzqWHSo+N40JROrJIqW9trD/2/eqVLTbx3WMV0g2qMqS10vaYUDhb6XWcvLOq1sXwl7hwdaNNR3zhShQ5CNLosRQJiJubu0VEqrhQBBbOurNPq/+w95Y3ajxy/OvttrUftS0jxuO8e6g5WfyO61wjvdOBnNeFMlGqe02byEZ5zTaEYXRIxpDsBZNdTDoNZAzJYWG5P5LDenJ/jPq9J2i8+4YFwRK9xpDAeatNuWLJlqTqJgF2rUUZHb9wrCX6WwytobMf6NUa+700fYLHDctx6ADPuDmxogEGA3KX28K0JQ4GkKZwueWWBsFVUGnDvbRdg2vZbghdcSTk0ZbsfXSt2ChP8Mhbw3CfII80t4UzbW3lv3R3ezzIjjfnkSaDUrB8Ue7d4XeBKrQea7QkRn8AIq7dj+0CAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 7.92 ms | 8.91 ms | 1.12 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted%3a%20True%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L60-#L92\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR23LTMBB9z0z+YcmLksGNnctAa0YztKXl1gxME9rHjrDXiUCWPNKaJlD+nZWTPAB+WMlHezl7jkECwkAg4bVY7gJhPV7hlsYfgrN8CxTGn9FXDxcq6GJ87zVhd/1C1enw2vlaEWGZw8q3mMDyu27ulNGlIu3sEX2jSC31T8xhksVvJF71e4Ynq4rQ82hOR9I1DqfZdH4ymZxM5qvsNJ9l+exsPDt7MZ28nD/PspxLD5UeG8eFonRkkVLf2lh/7PvVK1ts4rvHKqQbVGVIa6XtMaFwttLrOHlnVa2L4S9x6epGm473wpUochCk0WMpEhA3N3eLiFTKBIzAwll3/mn1H/be8kaNR45/vd229qO2ZcR4nHcPNSeL33Gdt0jvdCDndaFMlOpe0yayUV6zCWEY/ZExJHvBZBeTTgMZQ3JYWO6P5LCe3B+jfu8JGu++YUGwRK8xJHDRalOuWLIlqbpJgE1rUUa/Lx1rif4WQ2vo/Ad6tcZ+L02f4HHDchw6wDNuTqxogMGA3NW2MG2JgwGkKVxtuaVBcBVU2nAvbdfgWrYbQlccCXm0JXsfXSs2yhM88tYw3CfII81t4UxbW/kv3d0eD7LjzXmkyaAULF+Ue3f4XaAKrccaLYnRH8/4Y6jrAgAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 7.62 ms | 8.59 ms | 1.13 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L60-#L92\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bH2hjSqW/CiQqCDQJE3SR4wWsZscA1Za2WwpUiBXjd2m/96lbB/a6rCkhvuYnTFIQBgIJLwRy10grMcr3NL4Q3CWb4HC+DP66vFCBV2MH7wm7K5fqDodXjtfKyIsc7hWJmACy++6uVdGl4q0szmsfMvoW0VqqX9iDpMsfiPxut8zPFpVhJ5nczqSrnE4zabzk8nkZDJfZaf5LMtnZ+NX2Ww+PZu+zLKcSw+VHhvHhaJ0ZJFS39pYf+z71StbbOK7xyqkG1RlSGul7TGhcLbS6zh5Z1Wti+EvcenqRpuO98KVKHIQpNFjKRIQt7f3i4hUcc0ILJx1559W/2HvLW/UeOT419tdaz9qW0aMx3n3WHOy+B3XuUF6pwM5rwtlolQPmjaRjfKaXQjDaJCMIdkLJruYdBrIGJLDwnJ/JIf15P4Y9XvP0Hj3DQuCJXqNIYGLVptyxZItSdVNAmxaizIafulYS/R3GFpD5z/QqzX2e2n6DE8bluPQAV5wc2JFAwwG5K62hWlLHAwgTeFqyy0Ngqug0oZ7absG17LdELriSMijLdn76FqxUZ7gibeG4T5BHmluC2fa2sp/6e72eJAdb84jTQalYPmi3LvD7wJVaD3WaEmM/gB7WbY67AIAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 6.16 ms | 7.16 ms | 1.16 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20True%2c%20SkipValidation%3a%20True%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L94-#L126\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTXPTMBC9Zyb/YclFyeDGdlqYYEYztKV8NgPThPbYEfY6EciSR1rTBMp/Z+UkB8CHlfy0H2/fM0hAGAgkvBLLXSBspivc0vRDcJZvgcL0M/r6/kIFXU7vvCbsr1+ozp+P3zjfKCKsClj5DhNYftftrTK6UqSdPaKvFaml/okF5Fn8JuLlcGB4tKoJPc/mdCTd4HiWzc5O8vwkP1tl8+I0K05fTJ/NZ/N8fvY0ywouPVR6bB0XisqRRUp9Z2P9se9Xr2y5ie8e65BuUFUhbZS2x4TS2Vqv4+SdVY0ux7/EpWtabXreC1ehKECQRo+VSEBcX98uIlIrEzACC2fd+afVf9h7yxu1Hjn+9XbT2Y/aVhHjcd7dN5wsfsd13iK904Gc16UyUao7TZvIRnnNLoRxNEjGkOwFk31Meg1kDMlhYbk/ksN6cn9MhoNHaL37hiXBEr3GkMBFp021YsmWpJo2ATatQxkNv3SsJfobDJ2h8x/o1RqHgzR9hIcNy3HoAE+4ObGiAUYjclfb0nQVjkaQpnC15ZYGwdVQa8O9tF2D69huCH1xJOTRVux9dK3cKE/wwFvDeJ8gjzS3pTNdY+W/dHd7PMieN+eRJoNSsHxR7t3hd4EqdB4btCQmfwC0h8kb7AIAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 7.75 ms | 8.56 ms | 1.11 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L94-#L126\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW/TMBR9n9T/cOmLW5E1aVcqFmSJbWzjYxVoLdvjZJKb1uDYkX3DWhj/neu0RQLycO0c349zzzFIQBgIJLwWi20grEdL3NDofXCWb4HC6BP66uFcBV2M7r0m7K6fqRrPBlfO14oIyxyulAmYwOKbbu6U0aUi7ewf+I0itdA/MIdxFr+heNU7MjxcVYSep3M+kq5xMMkm0+Px+Hg8XWYv85MsPzkdzU4n2YvZ9HmW5Vy6r/TYOC4UpSOLlPrWxvpD3y9e2WId3z1WIV2jKkNaK20PCYWzlV7FyVural0MfooLVzfadMTnrkSRgyCNHkuRgLi5uZtHpIoLRWDurDv7uPwPe2d5o8Yjx7/eblv7QdsyYjzOu4eak8WvuM410lsdyHldKBOlute0jmyU1+xDGESLZAzJTjDZxaTTQMaQ7BeWuyPZryd3x7B39ASNd1+xIFig1xgSOG+1KZcs2YJU3STArrUoo+UXjrVEf4uhNXT2Hb1aYe8oTZ/gcc1y7DvAM25OrGiAfp/c5aYwbYn9PqQpXG64pUFwFVTacC9tV+BathtCVxwJebQlex9dK9bKEzzy1jDYJcgDzU3hTFtb+S/d7Q4PsuPNeaTJoBQsX5R7u/+dowqtxxotieFvrhTHjO4CAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 6.39 ms | 7.36 ms | 1.15 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted%3a%20True%2c%20SkipValidation%3a%20False%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L60-#L92\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTXPTMBC9Zyb/YclFyeDGdltKMaMZ2tKWj2ZgmtAeO8JeJwJZ8khrmkD576yc5AD4sJKf9uPtewYJCAOBhDdivgmEzXSBa5p+CM7yLVCYfkZfP5yroMvpvdeE/fUL1afjK+cbRYRVAQvfYQLz77q9U0ZXirSzBVwpExh+q0jN9U8sIM/iNxGvhwPDo1VN6Hk25yPpBseH2eHxQZ4f5MeL7LQ4yoqjV9OXJ/mL7CR/nmUFl+4qPbaOC0XlyCKlvrOxft/3q1e2XMV3j3VIV6iqkDZK231C6Wytl3HyxqpGl+Nf4sI1rTY98ZmrUBQgSKPHSiQgbm7uZhGp40IRmDnrzj4t/sPeW96o9cjxr7fbzn7UtooYj/PuoeFk8Tuuc430TgdyXpfKRKnuNa0iG+U1uxDG0SAZQ7IVTPYx6TWQMSS7heX2SHbrye0xGQ6eoPXuG5YEc/QaQwLnnTbVgiWbk2raBNi1DmU0/MKxluhvMXSGzn6gV0scDtL0CR5XLMeuAzzj5sSKBhiNyF2uS9NVOBpBmsLlmlsaBFdDrQ330nYJrmO7IfTFkZBHW7H30bVypTzBI28N422C3NNcl850jZX/0t1s8SB73pxHmgxKwfJFuTe73xmq0Hls0JKY/AHgrq6x7AIAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 7.90 ms | 8.86 ms | 1.12 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteBasicUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20False%2c%20DataSize%3a%20100000).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Basic.cs#L60-#L92\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW/TMBR9r9T/cOmLW5E16VpNJcgS29j4WgVay/Y4meSmNTh2ZN+wFsZ/5zptkYA8XDvH9+PccwwSEAYCCa/EchcI6/EKtzR+H5zlW6Aw/oS+erhQQRfje68Ju+tnqubDa+drRYRlDtfKBExg+U03d8roUpF29g/8WpFa6h+YwySL30i87PcMz1YVoefhnI+kaxyeZqezk8nkZDJbZfN8muXTF+P59Cw7m02fZ1nOpYdKj43jQlE6skipb22sP/b94pUtNvHdYxXSDaoypLXS9phQOFvpdZy8s6rWxfCnuHR1o01HfOFKFDkI0uixFAmIm5u7RUSquFAEFs6684+r/7B3ljdqPHL86+22tR+0LSPG47x7qDlZ/IrrvEF6qwM5rwtlolT3mjaRjfKabQjD6JCMIdkLJruYdBrIGJLDwnJ/JIf15P4Y9XtP0Hj3FQuCJXqNIYGLVptyxZItSdVNAuxaizI6fulYS/S3GFpD59/RqzX2e2n6BI8bluPQAZ5xc2JFAwwG5K62hWlLHAwgTeFqyy0Ngqug0oZ7absG17LdELriSMijLdn76FqxUZ7gkbeG4T5BHmluC2fa2sp/6e72eJAdb84jTQalYPmi3LvD7wJVaD3WaEmMfgNvuPLH7QIAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 6.64 ms | 7.25 ms | 1.09 | 0.00 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_006.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_007.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic_008.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Basic.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_Basic*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: False, SkipValidation: True, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: True, SkipValidation: False, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted: True, SkipValidation: True, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted: False, SkipValidation: True, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: True, SkipValidation: True, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf16(Formatted: False, SkipValidation: False, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted: True, SkipValidation: False, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Basic.WriteBasicUtf8(Formatted: False, SkipValidation: False, DataSize: 100000)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnCoRNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEtv",
                                           "createdAt":  "2025-01-14T08:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern%3a%20%22(%3fi)Holmes%22%2c%20Options%3a%20NonBacktracking).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L193-#L195\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR227TQBB9j5R/GPxiR7ixc5EAIwvaEtGKhFZJVB6jxR4nS9e71u6YOqL9987m8gC8zGjncvbMOQoJCB1BDp/D1d4R1sM1djRc4rZVws66xqJz0mjHdUdueI+22nAXu82tLltHdr9ZcpoLvd2sdmiVKR6H16bVFN0LIrQ6gyD6JAc3RtXoghjuGvKAGXw3+koUj2Q5SL0dhB/7PcWMRMVrTKkUhCRrjMbpeHoxGl2Mpuv0fTZJs+loOJ1M3o0nH96maZamg9OmxcbwYlga0kiJZRa8f8b9aYUudr5vsXLJDkXpklpIfR4ojK7k1v+816KWRfQnvDZ1I5XwjBemxDCDkCRaLMMYwvn8YeErlVAOfWFhtLm8W/9Xu9V8EUvJ8a/estXfpC59jb+zZlPzcPjiz/mKdCMdGSsLob4IEj8k7TwbYaVj+SLvW+5DfBQsP8T4oEHuQ3w6OD+m+HRefkyDfu8ZGmt+YUGwQivRxXDVSlWuWbIVibqJ4UGoFnPv/MFRtEt0raLL32jFFvu9JHmGJzYdTwjwhsGJFXUQBGRmXaHaEoMAkgRmHUMqBFNBJRVjseVgWrYb3GHZE7KoS/beu1bshCV44qshOg7kZ5pdYVRb6/xfuvtj3eUH3jxHkhTmIcvn5d6fngsUrrVYo6Zw8AowF6eBAwMAAA==\u003e)\u003c/li\u003e\u003c/ul\u003e | 312.72 μs | 345.69 μs | 1.11 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern%3a%20%22(%3fi)Sherlock%7cHolmes%7cWatson%22%2c%20Options%3a%20NonBacktracking).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L193-#L195\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/TQBC9R8p/GHyxI9zYDkEgIwvaUtGKhFZJ1B6jxR4nS9e71u6YOiL8d2bzcQAus/J8vHnznhUSEDqCAj6Fy50jbMYr7Gm8wE2nhL3pW4vOSaMd5x258QPaes1V7Nd3uuoc2d16wc9M6M16uUWrTPk8vjadpuhBEKHVOQTRRzk6F/e3RjXo9k+CnNFBDPct+QU5fDP6SpTPZDlIvRmFH4YDxQxFzTBMsRKEJBuMJulkepFlF9l0lb7P36T5NBu/zbLJdPLudZrmaTo6TVpsDQ+GlSGNlFhmxfNn3O9W6HLr6xZrl2xRVC5phNTnhtLoWm785p0WjSyjX+G1aVqphGc8NxWGOYQk0WIVxhDOZo9zn6mFcugTc6PN5f3qv9yd5otYWo5/1Rad/ip15XO8zpp1w83hb3/OF6Rb6chYWQr1WZB4krT1bISVrKOLvI+FD/FRsOIQ44MGhQ/x6eDi+MSn84rjMxoO9tBa8wNLgiVaiS6Gq06qasWSLUk0bQyPQnVY+D/h4DDaBbpO0eVPtGKDw0GS7OGFfcYTArxicGJFHQQBmZu+VF2FQQBJAjc9QyoEU0MtFWOx5WA6thvcYdgTsqgr9t67Vm6FJXjhqyE6NhRnmn1pVNfo4l+6u2PeFQfe3EeSFBYhy+fl3p0+5yhcZ7FBTeHoD7tONJ0TAwAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 3.85 ms | 4.44 ms | 1.15 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?i)Holmes\", Options: NonBacktracking)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_RustLang_Sherlock.Count(Pattern: \"(?i)Sherlock|Holmes|Watson\", Options: NonBacktracking)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Decimal\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Decimal.ToString(value%3a%20123456.789).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Decimal.cs#L23-#L26\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW7bMAy9B8g/cLkowdzYTrItzSBgXVt0QxtsaIzuWGg2nWiQpUCi2wTr/r1U4hy2XSjoiXx8fJRBAsJAIOGTWO0DYTMu+B7G39HXj1dY6kaZceFW5LVdD5+UaXEB+WQ6e/d+/GF+PhIf+z3DLKom9ExTKULSDQ4n2WR2ludn+azI5otptphNx1k+P8/y6dssW2TZqKv0uHVcKCpHFin1rY31J96fXtlyE9891iHdoKpC2ihtTwmls7Vex857qxpdDn+LS9dstVGknV26CsUCBGn0WIkExN3dwzIitTIBI7B01l18K/7DvlqeaOuR419v96291baKGLfz7rHhZPEnjnOD9EUHcl6XylwpUj80baIa5XVwNgyj1zKG5GiYPMTk4IGMIekGlscj6caTx2PU773A1rtfWBKs0GsMCXxutakKtmxFqtkm8BB3JOMWLx17if4eQ2vo4gm9WmO/l6Yv8LxhOzoGeMPkxI4GGAzIXe9K01Y4GECawvWOKQ2Cq6HWhrn4E4Bred0QDsVRkEdb8e7j1sqN8gTPPDUMjwnyJHNXOtM2Vv4rd3/Egzzo5jzSZFAKti/ave+uS1Sh9digJTF6BYkIfae3AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 190.13 ns | 216.73 ns | 1.14 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Decimal_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Decimal.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Decimal*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Decimal*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Decimal*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Decimal*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Decimal.ToString(value: 123456.789)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_UInt64\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt64.ToString(value%3a%2018446744073709551615).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt64.cs#L27-#L30\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9V8p/GHJxIrbZ3XTziSxRSgWIRqAmlGNldmcTI68d2bNtIsp/Z5yPA3AZy+OZN2/es0ECwkAg4a1Y7gNhM1jxPQy+oq8fv32yNC4GK7ckr+2696RMi3PIp0UxnhRFNrmaZLPRKB/no75407kwDKdqQs94lSIk3WBvmA2Lyzy/zItVNp1fZfOiGEyHw2I2mr3OsnmW9U+dHreOG0XlyCKlvrWx/4z7wytbbuK7xzqkG1RVSBul7bmgdLbW6zh5b1Wjy94vceOarTaKtLMLV6GYgyCNHiuRgLi7e1jETK1MwJhYOOuuv6z+y7EI6LceOf71dt/az9pWMcfjvHtsuFj8jut8QPqoAzmvS2XeK1LfNW0iG+V1cDb0ougyhuQomDzE5KCBjCE5LSyPR3JaTx6PfufiBbbe/cSSYIleY0jgXatNtWLJlqSabQIP0S0Z7bxxrCX6ewytoesn9GqNnYs0fYHnDctxQoBXDE6saIBul9ztrjRthd0upCnc7hjSILgaam0Yi78DuJbthnBojoQ82oq9j66VG+UJnnlr6B0L5JnmrnSmbaz8l+7+mA/ywJvrSJNBKVi+KPf+dF2gCq3HBi2J/h/zSeqKwAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 162.80 ns | 239.72 ns | 1.47 | 0.08 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt64.TryFormat(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt64.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmLskR4JAlSmmhohGoOcpjZe72EiOfHa332kQt/x07Hw/Ay1oe7453ZgwyMHoGCe/FcucZ23EZ7n78Dam5/35teZ6PS9pdOWoVDx+U6bCAyXSWvxqJd/2eCQSqYaTAUCtG1i0Op9k0P5tMziZ5mb0pZlmR5+O3s8n89Tx/mWVFlo2Ok4QbFwZF7dgip9TZOH/i/UnKVuv4Ttj4dI2q9mmrtD01VM42ehV/3lnV6mr4JC5cu9FGsXZ24WoUBQjWSFiLBMTNzd0iIo0yHiOwcNadfy3/w4JspA1hqH+93Xb2i7Z1xMJ35O7b0Cx+RzmfkD9rz450pcxHxeqH5nXcRpH2zvphtFnGkhwMk/ua7D2QsSRHwfJwJEd58nCM+r1n2JD7hRXDEkmjT+BDp01dBsuWrNpNAncxHhkDvHDBS6Rb9J3h8wcktcJ+L02f4XEd7DgywItAzsFRD4MBu8ttZboaBwNIU7jcBkqD4BpotAlc2q7AdSFu8PvhuBChrUP2MbVqrYjhMaiG4aFBntbcVs50rZX/rrs74F7u9w59rNmgFMG+aPfueF2g8h1hi5bF6A8j03GysgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 40.65 ns | 66.41 ns | 1.63 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt64.TryFormat(value%3a%2018446744073709551615).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt64.cs#L33-#L35\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/YPLiRFxzvvaStIcsUUoLFY1ATSiPlbnbyxn57Gi91yZq+e/Y+XgAXtbyeHc8O2OAGIEnJtl7vth6gna8DHc//gZYP36/tTTNx0vc3jhsFQ2flOmgYNl5nk9neS5mZzNxMZlk02wy4u/6PRP4VE2AgbBSBKRbGJ6K0/wky06yfCnOizNR5JOxyMWFmM7eClEIMTpMIqxdGOSVIwuUYmfj/JH3JypbNvEdofZpA6ryaau0PTaUztZ6FX/eWtXqcvjCr1y71kaRdnbuKuAF46QBoeIJ43d3D/OI1Mp4iMDcWXf5dfkfFlwAXCOE+tfbfWe/aFtFLHyH7rENzfx3XOcT0GftyaEulfmoSP3Q1EQ1CrV31g+j6zKWZG+Y3NVk54GMJTksLPdHclhP7o9Rv/fK1uh+QUlsAajBJ+xDp021DJYtSLXrhD3EtGTM88oFLwHvwXeGLp8A1Qr6vTR9Zc9NsOPAwN4EcgqOejYYkLvelKarYDBgacquN4HSAHM1q7UJXNqumOtC3MzvhqMgBFuF7GNqZaOQ2HPYmg33DfIoc1M607VW/it3u8e93OkOfaTJgOTBvmj39nCdg/IdQguW+OgPzIZBpMECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 144.01 ns | 229.71 ns | 1.60 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt64.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt64.cs#L27-#L30\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4TMRC9R8o/DLk4EdvsJtlWZZElSqkKohGoCeVYmd3ZxMhrR/Zsm4jy74yzmwNwGcvjec9v3jNIQBgIJLwTq0MgbKZrvofpV/T147dPli7y6dqtyGu7GT8p02IBs/kiP5+It8OBYbyqCT0TVIqQdIPjeTbPz2azs1m+zi6LRVbk59NZvnhzMb98nWVFlk16pMedY6CoHFmk1Lc24k+8P7yy5Ta+e6xDukVVhbRR2p4GSmdrvYk/H6xqdDn+Ja5ds9NGkXZ26SoUBQjS6LESCYi7u4dl7NTKBIyNpbPu6sv6vx5vjX7nketfb/et/axtFXv8nXePDQ+L33GdW6SPOpDzulTmgyL1XdM2qlFeB2fDOLosY0k6w+SxJkcPZCxJv7DsjqRfT3bHZDh4gZ13P7EkWKHXGBJ432pTrdmyFalml8BDjEfG/K4de4n+HkNr6OoJvdrgcJCmL/C8ZTt6BnjF5MSOBhiNyN3sS9NWOBpBmsLNnikNgquh1oa5OH9wLccN4QiOgjzairOPqZVb5QmeeWsYdwPyJHNfOtM2Vv4r99D1gzzq5jnSZFAKti/afeivS1Sh9digJTH5A+q8vvaxAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 47.83 ns | 66.84 ns | 1.40 | 0.07 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt64_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt64_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt64_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt64_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt64.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt64*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt64*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt64*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt64*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_UInt64.ToString(value: 18446744073709551615)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt64.TryFormat(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt64.TryFormat(value: 18446744073709551615)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt64.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Enum\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString_Flags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Enum.ToString_Flags(value%3a%2032).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Enum.cs#L33-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GHJxIrbZzYdaCLJEKQEqGoGaqBwjszubGHntlT3bJqL974yzmwNwGWueZ57nvbFBAsJAIOG9WB8DYTXecB7G39GX26VtOHdr8trutp+M2oXhozINLmA2HYl3/Z5hAlUSemYoFCHpCofTbDq/mEwuJvNN9mYxyxbzq/Hk7eX88mr2OssWWTbqOj3WjhtF4cgipb6xsf/M+9Mrm+/jvccypHtURUgrpe25IHe21Lv48tGqSufD3+LGVbU2irSzK1egWIAgjR4LkYC4u3tYRaRUJmAEVs6662+b/7Bby4pqjxz/urtv7Fdti4jxc95tKy4WL1HOZ6QvOpDzOlfmoyL1Q9M+TqO8Ds6GYbRZxpC0hslTTE4eyBiSTrBsj6STJ9tj1O89Q+3dL8wJ1ug1hgQ+NNoUG7ZsTaqqE3iIu5FxgTeOvUR/j6ExdP2IXu2w30vTZ3jasx0dA7xicmJHAwwG5JaH3DQFDgaQprA8MKVBcCWU2jAXfwFwDa8bwqk5DuTRFrz7uLV8rzzBE6uGYVsgz2Mecmeaysp/xz22eJCnubmONBmUgu2Ldh+7dIUqNB4rtCRGfwB9TJ0ksgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 74.68 ns | 84.74 ns | 1.13 | 0.05 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString_Flags - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Enum.ToString_Flags(value%3a%2036).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Enum.cs#L33-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS227bMAx9D5B/4PIiB3Njp0l38SBgXZddsAYbmqB7DDSbjjXIkiHRbYJ1/z4ql4dtLxR4RB7xHMogAWEgkPBWrPaBsJ2sOQ+Tb+jrzcL2nLsVeW23mw9GbUPyoEyPBcxejMWb4cAwgaoJPTNUipB0i8llfjm/mE4vpvN1/qqY5cX85WSWX129nk+f53mR5+NTp8fOcaOoHFmkzPc29p95f3hlyybee6xD1qCqQtYqbc8FpbO13saX91a1ukx+iRvXdtoo0s4uXYWiAEEaPVYiBXF7e7+MSK1MwAgsnXXXX9f/YZ8tK+o8cvzr7q63X7StIsbPebdpuVj8jnI+In3SgZzXpTLvFanvmpo4jfI6OBuSaLOMIT0aJg8xPXggY0hPguXxSE/y5PEYDwdP0Hn3E0uCFXqNIYV3vTbVmi1bkWq7FO7jbmRc4I1jL9HfYegNXT+gV1scDrLsCR4btuPEAM+YnNjRAKMRucWuNH2FoxFkGSx2TGkQXA21NszFXwBcz+uGcGiOA3m0Fe8+bq1slCd4ZNWQHAvkecxd6UzfWvnvuPsjHuRhbq4jTQalYPui3ftTukQVeo8tWhLjPxA8w4uyAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 77.30 ns | 85.39 ns | 1.10 | 0.04 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString_Format_Flags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Enum.ToString_Format_Flags_Large(value%3a%20All%2c%20format%3a%20%22d%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Enum.cs#L70-#L77\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GPbiRGyzmyaiZJElQkkLIhGoicoxMruziZHXjuzZNhHlvzPOxwG4jDVfb2bes0ECwkAg4b1YHgJhM1ixHwbf0NfrmW3Zd0vy2m7Wd843itZ3Rm3Ceq78BntPyrRYwNSYFOpjuoCkSvriXbdjGFvVhJ7BK0VIusHedX49vhoOr4bjVf62GOXF+GYwmkxGb24mr/O8yPP+udPjznGjqBxZpMy3NvZfcH94ZcttzHusQ7ZFVYWsUdpeCkpna72Jkw9WNbrs/RK3rtlpo0g7u3AVigIEafRYiRTEfP64iJFamYAxsHDWTb+u/ot9tnzRziPbv3IPrf2ibRVjPM67dcPF4nc85x7pkw7kvC6V+ahIfde0jdsor4OzoRcVkNGkJ8Lk0aZHDmQ06flgeXrS83ny9PS7nRfYefcTS4Ileo0hhQ+tNtWKKVuSanYpPEalZNT21jGX6B8wtIamT+jVBrudLHuB5y3TcUaAVwxOzGiAJCE325emrTBJIMtgtmdIg+BqqLVhLP4d4FqWG8KxOS7k0VasfVSt3CpP8MxXQ+9UIC9r7ktn2sbKf9c9nOJBHvfmOtJkUAqmL9J9OLsLVKH12KAl0f8D5ac16c0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 65.04 ns | 84.93 ns | 1.31 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString_NonFlags_Large - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Enum.ToString_NonFlags_Large(value%3a%2042).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Enum.cs#L48-#L55\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTY/TMBC9V+p/GHpxK7JNWoq2KrLEspQF0QLaVsuxMskkMXLsyJ7stmL574z7cQAuY83zzPO8NzZIQBgIJLwVm0MgbMZbzsP4G/pyt7Qd525DXttq98XZD0ZVYbdSvsLhozIdLmA2HYk3/Z5hJlUSeqYqFCHpBofTbDq7mkyuJrNtNl+8yhaz6/HryXx+nc1eZtkiy0bnTo+t40ZROLJIqe9s7L/w/vDK5nW891iGtEZVhLRR2l4KcmdLXcWXD1Y1Oh/+EreuabVRpJ1duwLFAgRp9FiIBMRq9bCOSKlMwAisnXU3X7f/YZ8sK2o9cvzr7r6zn7UtIsbPebdruFj8jnLukD7qQM7rXJn3itR3TXWcRnkdnA3D6LeMITkZJo8xOXogY0jOguXpSM7y5OkY9XvP0Hr3E3OCDXqNIYF3nTbFli3bkGraBB7ibmTc5K1jL9HfY+gM3TyiVxX2e2n6DE8123FmgBdMTuxogMGA3HKfm67AwQDSFJZ7pjQIroRSG+bivwCu43VDODbHgTzagncft5bXyhM8sWoYngrkZcx97kzXWPnvuIcTHuRxbq4jTQalYPui3YdzukYVOo8NWhKjPxnwYoO7AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 55.70 ns | 63.00 ns | 1.13 | 0.05 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[InterpolateIntoString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Enum.InterpolateIntoString(value%3a%2032).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Enum.cs#L111-#L116\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW7bMAy9B8g/cLkowdzYSdNu8CBgXRd0QxtsaILuWGg2nWiQJUOi2wTr/r1U7By2XSiLfnx6fM8gAWEgkPBRrA+BsJ5u+B6m39FXj0vb1tOvltA3zihC/nRr8tpux0/KtJjD+XwiPgwHhnlUxTgmKhlIusbxPJsvzmazs9lik73Pz7N88W56ObuYLy4u32ZZnmWTftJj43hQlI4sUupbG+dPvD+9ssUu/vdYhXSHqgxprbQ9AQpnK72NLx+sqnUx/i2uXd1oVqydXbkSRQ6CNHosRQLi7u5hFTuVMgFjY+Wsu/q2+a/Xbe6R61//7lt7q20Ze/ycd481g8WfuM4N0hcdyHldKPNZkfqhaRfVKK+Ds2Ec3ZaxJJ1h8liTowcylqRfWHZH0q8nu2MyHLxA490vLAjW6DWGBD612pQbtmxNqm4SeIjZyJjjtWMv0d9jaA1dPaFXWxwO0vQFnndsR88Ab5ic2NEAoxG55b4wbYmjEaQpLPdMaRBcBZU2zMXhg2s5bgjH4SjIoy05+5hasVOe4Jm3hnEHkCeZ+8KZtrbyX7mHrh/kUTfjSJNBKdi+aPehv65QhdZjjZbE5BWFgu6AuQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 810.14 ns | 886.47 ns | 1.09 | 0.06 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum_005.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Enum.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Enum*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Enum*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Enum*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Enum*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Enum.ToString_Flags(value: 32)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Enum.ToString_Flags(value: 36)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Enum.ToString_Format_Flags_Large(value: All, format: \"d\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Enum.ToString_NonFlags_Large(value: 42)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Enum.InterpolateIntoString(value: 32)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in V8.Crypto.Support\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Bench - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/V8.Crypto.Support.Bench.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/V8/Crypto/Crypto.cs#L54-#L59\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwY7TMBC9V+o/DL24Fdkm2RaxFFlit6wAsRXStipHZJJJY+TYkT1hW7H8O+MmPQCXsTzzZua9NwYJCAOBhHdifzNf+1NLbr7t2tZ5mt+hLWrxdjwyjFMVoWdgqQhJNzi9zq6XV3l+lS932c1qka2Wb+bZYvE6z1+9zLJVls2GTo+t40ZROrJIqe9s7L/M/e4Vb4l1j1VIa1RlSBul7QVQOFvpQ9x8sqrRxfSXWLum1UaRdnbjShQrEKTRYykSEA8P+03MVMoEjImNs+72y+6/3CfLilqPHP+qPXb2s7ZlzPE67741DBa/o5wPSB91IOd1ocx7ReqrpjqyUV4HZ8M0uiljSHrD5DkmZw9kDMkgWPZPMsiT/TMbj56h9e4HFgRb9BpDAnedNuWOLduSatoE9sp0KHe8ZO3YS/SPGDpDtz/RqwOOR2n6DE812zFMgBc8nNjRAJMJuftjYboSJxNIU7g/8kiD4CqotOFZ2h7AdXxuCOfmSMijLfn28WpFrTzBE6uGaQ+QF5rHwpmusfJfuqc+H+SZN+NIk0Ep2L5o92n4blCFzmODlsTsD+tVfZ6ZAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 12.52 ms | 13.43 ms | 1.07 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/V8.Crypto.Support_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/V8.Crypto.Support.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027V8.Crypto.Support*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027V8.Crypto.Support*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027V8.Crypto.Support*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027V8.Crypto.Support*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### V8.Crypto.Support.Bench\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEtz",
                                           "createdAt":  "2025-01-14T08:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Version\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TryFormatL - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Version.TryFormatL.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Version.cs#L75-#L76\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/TMBC9V+p/ML24Fdkm3bYIiiyxLMuHaAXaRuW4MsmkMXLsaDxhG7H8d8b9OACXsfw87/nNGwskCAIJJd7IbR8ImmnO9zD9Clg97ACD8W6aY//eY6NpLV8PB5ZJuiJAZpWagEwD4+vsenE1m13NFnn2cjXPVsvl9MX81WK+nD/PslWWTc5MhNYzUZaeHFCKnYv8i+531K6o4ztCFdIadBnSRht3aSi8q8w+/tw73Zhi/Eve+qY1VhM73fgS5EpIMoBQykTI9Xq3iUilbYAIbLzzN1/y/7BPjidqEbj+9Xbfuc/GlRHj79A/NNwsf8dxPgB9NIE8mkLbd5r0N0N1dKPRBO/COEarYklOgaljTY4ZqFiS88DqdCTn8dTpmAwHT6JF/wMKEltAAyERbztjy5wj25Ju2kTstO1AxaXdes4S8B5CZ+nmJ6Dew3CQpk/iseY4zgriGYsTJxrEaET+7lDYroTRSKSpuDuwpAXhK1EZy1rG7YXveN0iHMnREIIrefdxa0WtkcQjTy3GpwZ1sXkovO0ap/6125/woI6+uY8MWVCS44tx9+frBnToEBpwJCd/AI1HWV2mAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 240.53 ns | 491.81 ns | 2.04 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[Ctor2 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Version.Ctor2.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Version.cs#L18-#L19\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXY/TMBB8r9T/sPTFrcg16ccdqMgSRzkB4irQtSqPJ5NsGiPHjuwN14rjv7Nu0gfgZS2vd8YzswYJCAOBhLdiewqE9XTH9zD9ir583KMP2tnpmpyfizfDgeF5VRJ6BhSKkHSN43k2X17NZlez5S57vVpkq+vr6aub+WJ5s3iZZassm/RIj41joCgcWaTUtzbiL7zfvbJ5Fd89liGtUBUhrZW2l4Hc2VIf4s8nq2qdj3+JtasbbRSxyI0rUKxAkEaPhUhA3N/vN7FTKhMwNjbOutsvu/96nyw7ajxy/evtobWftS1ij7/z7rHmYfE72vmA9FEHjkXnyrxXpL5pqqIa5XVwNoxjqjKWpAtMnmtyzkDGkvSGZXckvT3ZHZPh4Bka735gTrBFrzEk8K7VpthxZFtSdZPAXpkWZdzX2nGW6B8wtIZuf6JXBxwO0vQZniqOo2eAF0xOnGiA0Yjc3TE3bYGjEaQp3B2Z0iC4EkptmEvbA7iW1w3hDI6CPNqCdx+3llfKEzyxaxh3A/Ii85g709ZW/iv31PWDPOvmOdJkUAqOL8Z96q8bVKH1WKMlMfkD45Krz6ECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 12.31 ns | 13.48 ns | 1.10 | 0.07 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Ctor3 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Version.Ctor3.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Version.cs#L21-#L22\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwY7TMBC9V+o/DL24Fdkm3e1KbZEllrICxFagbVWOK5NMGiPHjuwJ24rl3xk36QG4jOXxvOf33hgkIAwEEt6K7SkQ1tMd38P0K/ryaY8+aGena3L+RrwZDgzPq5LQM6BQhKRrHF9n1/Or2exqNt9li9VNtrq9nS4Wy+VyPn+dZassm/RIj41joCgcWaTUtzbiL7zfvbJ5Fd89liGtUBUhrZW2l4Hc2VIf4s8nq2qdj3+JtasbbRSxyI0rUKxAkEaPhUhAPDzsN7FTKhMwNjbOursvu/96nyw7ajxy/evtsbWftS1ij7/z7qnmYfE72vmA9FEHjkXnyrxXpL5pqqIa5XVwNoxjqjKWpAtMnmtyzkDGkvSGZXckvT3ZHZPh4AUa735gTrBFrzEk8K7VpthxZFtSdZPAXpkWZdzX2nGW6B8xtIbufqJXBxwO0vQFniuOo2eAV0xOnGiA0Yjc/TE3bYGjEaQp3B+Z0iC4EkptmEvbA7iW1w3hDI6CPNqCdx+3llfKEzyzaxh3A/Ii85g709ZW/iv31PWDPOvmOdJkUAqOL8Z96q8bVKH1WKMlMfkDUDlwAaECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 13.92 ns | 15.18 ns | 1.09 | 0.08 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringL - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Version.ToStringL.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Version.cs#L60-#L61\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/TMBC9V+p/GHpxK7JNWgpaiiyxLCtAtAJto3JcmWTSGDl2ZE/YViz/nXGTHoDLWB7PG78PgwSEgUDCW7E7BcJmnvM9zL+irx726IN2dp67HXltDxvxZjwyjFEVoWdQqQhJNzhdZsvV1WJxtVjl2fX6RbZ++WqeZYvr18vV8yxbZ9lsQHpsHQNF6cgipb6zEX/Z+90rW9Tx3WMV0hpVGdJGaXsZKJyt9CH+fLKq0cX0l7h1TauNIia6dSWKNQjS6LEUCYjNZr+NnUqZgLGxddbdfMn/632yrKj1yPWvt/vOfta2jD3+zruHhofF7yjnA9JHHch5XSjzXpH6pqmObJTXwdkwjc7KWJLeMHmuydkDGUsyCJb9kQzyZH/MxqMnaL37gQXBDr3GkMC7TpsyZ8t2pJo2gb0yHcqY2a1jL9HfY+gM3fxErw44HqXpEzzWbMewAZ7xcmJHA0wm5O6OhelKnEwgTeHuyCsNgqug0oZ3ceTgOo4bwhkcCXm0JWcfUytq5QkeWTVM+wF5oXksnOkaK/+le+r7QZ558xxpMigF2xftPg3XLarQeWzQkpj9AV7pfDWlAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 366.76 ns | 616.37 ns | 1.68 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[Ctor4 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Version.Ctor4.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Version.cs#L24-#L25\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4TMRC9R8o/DLk4EdvspgmlCrJECRWgNgI1UThWZnc2a+S1V/YsTUT5946zmwNwGcvjec/vvTFIQBgIJLwXm2MgrKdbvofpN/Tl4w590M5OV+T8QrwbDgzPq5LQM6BQhKRrHF9ml4uL2exitthm18t5tnxzNc2u51dv59nrLFtm2aRHemwcA0XhyCKlvrURf+b94ZXNq/jusQxphaoIaa20PQ/kzpZ6H38+WlXrfPxbrFzdaKOIRa5dgWIJgjR6LEQC4v5+t46dUpmAsbF21t183f7X+2LZUeOR619vD62907aIPf7Ou8eah8WfaOcT0mcdOBadK/NRkfquqYpqlNfB2TCOqcpYki4wearJKQMZS9Iblt2R9PZkd0yGg2dovPuJOcEGvcaQwIdWm2LLkW1I1U0CO2ValHFfK8dZon/A0Bq6+YVe7XE4SNNneKo4jp4BXjE5caIBRiNyt4fctAWORpCmcHtgSoPgSii1YS5t9+BaXjeEEzgK8mgL3n3cWl4pT/DErmHcDcizzEPuTFtb+a/cY9cP8qSb50iTQSk4vhj3sb+uUYXWY42WxOQFpPDYDKECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.63 ns | 18.01 ns | 1.15 | 0.08 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version_005.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Version.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Version*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Version*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Version*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Version*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Version.TryFormatL\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Version.Ctor2\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Version.Ctor3\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Version.ToStringL\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Version.Ctor4\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Buffers.Text.Tests.Utf8FormatterTests\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[FormatterDecimal - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterDecimal(value%3a%20123456.789).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L46-#L49\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR247TMBB9r9R/GPriVmST9LJsG2SJvQJiK6RtWR6RSSatkS+VPdltxfLv2E2KBLyM5TMzZ2bOUUhA6Ak4vGOrgyfU6VVT1+h8usY9heDJp1+ont9ZpwURuhb6873BUmqhhk9CNVjAeDKdnb9JL+aLEXvb76kwQNShLEyoBCFJjcNJPpmdjcdn49k6nxfTvDhfpPnFdJFP89d5XuT5qOt0uLOhkVWWDFLmGhP7T7zfnTDlNuYd1j7boqh8poU0p4LSmlpu4uSDEVqWw5/s2uqdVIKkNUtbISuAkUSHFUuA3d8/LiNSC+UxAktr7OXn9X/YRxMu2jkM8a/cQ2M+SVNFLIxz9psOxexXPOc90gfpyTpZCnUjSHyVtI3bCCe9NX4YbeAxJK1g/BiTowY8hqQ7mLdP0p3H22fU773AztkfWBKs0En0CVw1UlXrINmKhN4l8Bg94tHAaxu0RPeAvlF0+YRObLDfy7IXeN4GOToGeBXIKSjqYTAge7svVVPhYABZBrf7QKkQbA21VIFLmg3YJtgN/tgcF3JoquB9dK3cCkfwHK6GYVvAT2vuS6sabfi/6x5a3PPj3qGOJCnkLMgX5T503yUK3zjUaIiNfgO6+LkW0gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 174.53 ns | 191.83 ns | 1.10 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt64 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L19-#L22\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW/bMAx8D5D/wOVFCebGTpqmmQcBa7vuA2swoMm6x0Gz6ViDLAUS3SZY999HxcmAbS8UdCSP5J1BAsJAIOGNWO0DYTO+bqsKfRivcUccAoXxF6oW75xvFBH6Dvrz/WhpPhs+KtNiDpPp+exiJF73e4aZVcV5pi4VIekGh9NsOjubTM4ms3W2yM+z/OLVeHI5v5xPFy+zLM+y0bHT49ZxoygdWaTUtzb2n3i/e2WLOuY9ViGtUZUhbZS2p4LC2Upv4uS9VY0uhj/FjWu22ijSzi5diSIHQRo9liIBcXf3sIxIpUzACCyddVef1/9hfCz6rUeOf+XuW/tJ2zJiPM67bw0Xi1/xnPdIH3Qg53WhzFtF6qumOm6jvA7OhmHUX8aQdILJQ0wOGsgYkuPBsnuS43mye0b93jNsvfuBBcEKvcaQwHWrTblmyVakmm0CD9EeGZ27cawl+nsMraGrR/Rqg/1emj7DU81yHBngBZMTKxpgMCB3uytMW+JgAGkKtzumNAiugkob5tJ2A65luyEcmuNCHm3J3kfXilp5gie+GoZdgTytuSucaRsr/1133+FBHvbmOtJkUAqWL8q9P36XqELrsUFLYvQbkDnE28sCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 40.14 ns | 56.69 ns | 1.41 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterUInt32 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt32(value%3a%204294967295).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L40-#L42\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRUW8aMQx+R+I/eLwEtCt3XGEUpkhru3abVjSp0O5xyu58kCmXoMTXgtb99zkcTNr24iif7c/29xkkIAwEEt6J5T4Q1sOrpqrQh+EKd8QhUBg+UHVx63ytiNC30J/vwydL53n/SZkG5zDOZ+PZm2k+mwzE227HML+quIoHlIqQdI39PMvHZ6PR2Wi8yi7m59l8Mhvm02mW5ZPXWTbPssGx0+PWcaMoHVmk1Dc29p94v3tli03Me6xCukFVhrRW2p4KCmcrvY6T91bVuuj/FNeu3mqjSDu7cCWKOQjS6LEUCYi7u8dFRCplAkZg4ay7/LL6D+OL0W89cvwrd9/Yz9qWEeNx3n2ruVj8iud8QPqoAzmvC2XeK1JfNW3iNsrr4GzoRxdkDEkrmDzE5KCBjCE5HizbJzmeJ9tn0O28wNa7H1gQLNFrDAlcNdqUK5ZsSareJvAYPZLRv2vHWqK/x9AYunxCr9bY7aTpCzxvWI4jA7xicmJFA/R65G52hWlK7PUgTeFmx5QGwVVQacNc2q7BNWw3hENzXMijLdn76FqxUZ7gma+GflsgT2vuCmea2sp/1923eJCHvbmONBmUguWLcu+P3wWq0His0ZIY/Aa3MZGy0QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 49.55 ns | 92.31 ns | 1.86 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt32 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value%3a%20-2147483648).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRUW8aMQx+R+I/eLwEtIM7ONZSpkhru26rVjSpsO5xyu58kCmXoMTXgtb+9zkcTNr24iif7c/29xkkIAwEEt6J5T4Q1qOrpqrQh9EKd8QhUBh9pWr2wflaEaFvoT/fW0v5pP+oTINzGE7G0/PpLD+bzgbibbdjmF9VXMUDSkVIusb+JJtMh+PxcDxdZbN5ns3fXIzy81l+kZ+9zrJ5lg2OnR63jhtF6cgipb6xsf/E+8MrW2xi3mMV0g2qMqS10vZUUDhb6XWcvLeq1kX/l7h29VYbRdrZhStRzEGQRo+lSEDc3T0sIlIpEzACC2fd5ZfVfxifjH7rkeNfufvGfta2jBiP8+57zcXiJZ7zEemTDuS8LpR5r0h907SJ2yivg7OhH12QMSStYPIQk4MGMobkeLBsn+R4nmyfQbfzDFvvfmJBsESvMSRw1WhTrliyJal6m8BDNElG/64da4n+HkNj6PIRvVpjt5Omz/C0YTmODPCKyYkVDdDrkbvZFaYpsdeDNIWbHVMaBFdBpQ1zabsG17DdEA7NcSGPtmTvo2vFRnmCJ74a+m2BPK25K5xpaiv/XXff4kEe9uY60mRQCpYvyr0/fheoQuOxRkti8Bu5YpMZ0QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 64.41 ns | 98.95 ns | 1.54 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterUInt64 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt64(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L26-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR0W4TMRB8j5R/WPLiRFxzl/QKaZAl2lKgohFSk5ZHZO72EiOfHdl7bSLaf2eduyABL2t5vDuenTFIQBgIJLwXy30grMeXTVWhD+MV7ohLoDC+p2r20flaEaFvoT/X+xtLb/LhozINzmEyPc3PRuJdv2eYWlXcwNylIiRd43CaTfOTyeRkkq+y2fw0m5+dj/PZJD9/O32dZfMsG3WTHreOB0XpyCKlvrFx/sj7wytbbOK7xyqkG1RlSGul7bGhcLbS6/jz3qpaF8Nf4srVW20UaWcXrkQxB0EaPZYiAXF7+7CISKVMwAgsnHUXX1f/Ybws+q1Hrn+93TX2i7ZlxPg7777X3Cxe4jqfkD7rQM7rQpkPitQ3TZuoRnkdnA3DGICMJWkNk4eaHDyQsSTdwrI9km492R6jfu8Ztt79xIJgiV5jSOCy0aZcsWVLUvU2gYcYj4zRXTn2Ev0dhsbQxSN6tcZ+L02f4WnDdnQM8IrJiR0NMBiQu94VpilxMIA0hesdUxoEV0GlDXNpuwbXcNwQDsNRkEdbcvYxtWKjPMETbw3DtkEeZe4KZ5rayn/l7ls8yINu7iNNBqVg+6Ld++66QBUajzVaEqPfVICnQ8wCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 40.66 ns | 56.57 ns | 1.39 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt32 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmLl8lBFmiLS1UNEJqQnlE5m4vMfLZJ3uvTUT5713nEiTgZS3P7s7uzhgkIAwEEt6L1T4QVsPLpizRh+Ead8QhUBh+pXJ+43yliNC30J/vraXJuP+oTIMLGI0n09lAvOt2DDOrkvNMXShC0hX2x9l4ejYanY2m62y+mGSL2dvhbD47n56/eZ1liywbHDs91o4bReHIIqW+sbH/xPvDK5tvY95jGdItqiKkldL2VJA7W+pNnLy3qtJ5/5e4clWtjSLt7NIVKBYgSKPHQiQg7u4elhEplQkYgaWz7uLL+j+Mj0Vfe+T4V+6+sZ+1LSLG47z7XnGx+B3P+Yj0SQdyXufKfFCkvmnaxm2U18HZ0I/6yxiSVjB5iMlBAxlDcjxYtk9yPE+2z6DbeYbau5+YE6zQawwJXDbaFGuWbEWqqhN4iPbI6NyVYy3R32NoDF08olcb7HbS9BmetizHkQFeMTmxogF6PXLXu9w0BfZ6kKZwvWNKg+BKKLVhLm034Bq2G8KhOS7k0RbsfXQt3ypP8MRXQ78tkKc1d7kzTWXlv+vuWzzIw95cR5oMSsHyRbn3x+8SVWg8VmhJDF4AiMIJa8sCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 35.03 ns | 53.82 ns | 1.54 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt64 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value%3a%20-9223372036854775808).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L19-#L22\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXY/TMBB8r9T/YPriVqRN+p0GWeLuuAPEVUjXcjwik2waI8eu7M1dK47/zrppkYCXtTy7O7s7owEZgkcm2Fu+OXqEenTdlCU4P9rCASl49KMvWKZ31tUSEVwL/fl+NLiY9Z+kbiBjw9VkMp0uJ8l0kc5ny+U8TdIBf9PtaBokSyqnSYVEQFVDf5JMZsPxeDiebZM0mybZfDVapKvleDx/nSRZkgzOnQ72lhp5YdEAxq4xof/C+91Jk1ch76D0cQWy8HEtlbkU5NaUahcmH42sVd7/yW9svVdaorJmbQvgGeOowEHBI8bv7x/XASml9hCAtTX26vP2P4xuB7d3QPGv3ENjPilTBIzGOfutpmL+K5zzHvCD8midyqV+J1F+VViFbaRT3hrfD3aIEKJWMHGK0UkDEUJ0Pli0T3Q+T7TPoNt5YXtnf0CObANOgY/YdaN0sSXJNijrfcQeg1siGHljSUtwD+AbjVdP4OQOup04fmHPFclxZmCviBxJUc96PbS3h1w3BfR6LI7Z7YEoNTBbslJp4lJmx2xDdjN/ag4LOTAFeR9cyyvpkD3T1azfFojLmofc6qY24t91jy3uxWlvqkOFGgQn+YLcx/N3DdI3DmowyAe/AWHXzM/aAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 168.72 ns | 196.93 ns | 1.17 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterDateTimeOffsetNow - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterDateTimeOffsetNow(value%3a%2012%2f30%2f2017%203%3a45%3a22%20AM%20-08%3a00).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L59-#L62\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/aMBB+r8R/uPES0AIJAUSbKdJo127TyioV1j1OXnIGT46N7EsBrfvvOxOYtO3lLH++++7u+6yRgNATFPA2Wh48YT28bqRE54cr3BMHT374heTlnXW1IELXQn+u7wThStX4IKVH+mx3vWehG8xhlCXjNMnS0QzG+WSaZxnMFzBIL/M07UdvOheamwvJFNy9YhZill6WZpPBaDQYTVacOU7z6dVwdjWdZePZ6zQNpadKh1vLhVFlySAlrjGh/sz73QlTbsK7Q+mTDYrKJ7VQ5pxQWiPVOnQ+GFGrsvczurH1VmlBypqFrTDKISKFDqsohuj+/mkRECm0xwAsrLHzh9V/2EfDG20dcvzr7bExn5SpAsbtnP1Wc3L0K6zzHumD8mSdKoVmPcVXRZswjXDKW+N7waIihLgVrDjG+KhBEUJ8Wrhoj/i0XtEe/c7FC2yd/YElwRKdQh/DdaN0FYxbkqi3MTwF14pg7o1lLdE9om80zZ/RiTV2LpLkBXYbluPEAK+YnFhRD90u2dt9qZsKu11IErjdM6VGsBKk0sylzBpsw3aDPxaHgRyair0PrpUb4Qh2vDX02oTiPOa+tLqpTfHvuIcW98Vxbs4jRRqLKHxHlvtwui5Q+MZhjYai/m9acdPf7gIAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 124.33 ns | 163.68 ns | 1.32 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt32 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value%3a%202147483647).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmLh801yBLtKVARSOkJpRHZO72EiOfHdl7bSLa/846lyABL2t5vDuenTFIQBgIJLwTy30grIdXTVWhD8MV7ohLoDD8SlX+wflaEaFvoT/XW0uTcf9RmQbnMB5NZ9N8cj6dDcTbbscwvaq4iflLRUi6xv44G0/PRqOz0XSV5fNJNn9zMczzi3x2PnudZfMsGxwnPW4dD4rSkUVKfWPj/In3h1e22MR3j1VIN6jKkNZK21ND4Wyl1/HnvVW1Lvq/xLWrt9oo0s4uXIliDoI0eixFAuLu7mERkUqZgBFYOOsuv6z+w3hj9FuPXP96u2/sZ23LiPF33n2vuVm8xHU+In3SgZzXhTLvFalvmjZRjfI6OBv6MQQZS9IaJg81OXggY0mOC8v2SI7ryfYYdDvPsPXuJxYES/QaQwJXjTblii1bkqq3CTzEjGSM79qxl+jvMTSGLh/RqzV2O2n6DE8btuPIAK+YnNjRAL0euZtdYZoSez1IU7jZMaVBcBVU2jCXtmtwDccN4TAcBXm0JWcfUys2yhM88dbQbxvkSeaucKaprfxX7r7Fgzzo5j7SZFAKti/avT9eF6hC47FGS2LwG9I96ovQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 55.32 ns | 96.95 ns | 1.75 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterUInt32 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt32(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L40-#L42\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8aMRB8R+I/bHkxqBfu+JKAylKTNP1QgioFkj5W7t0euPLZyN5LQE3+e9fcUanty1oe745nZwwSEAYCCe/F+hgIq+FVXZbow3CDB+ISKAwfqJx/dL5SROgb6M/14Yulybj/pEyNSxiNJ9PZQLzrdgxTq5IbmLtQhKQr7I+z8fRiNLoYTTfZfDnJlrPFcLFYzGfj7G2WLbNs0E563DseFIUji5T62sb5M+8Pr2y+i+8ey5DuUBUhrZS254bc2VJv489Hqyqd93+Ja1fttVGknV25AsUSBGn0WIgExN3d4yoipTIBI7By1l1+3fyH8bLo9x65/vV2X9tbbYuI8Xfefa+4WbzGdT4hfdaBnNe5Mh8UqW+adlGN8jo4G/oxABlL0hgmTzU5eSBjSdqFZXMk7XqyOQbdzgvsvfuJOcEavcaQwFWtTbFhy9akqn0CjzEeGaO7duwl+nsMtaHLJ/Rqi91Omr7A847taBngDZMTOxqg1yN3c8hNXWCvB2kKNwemNAiuhFIb5tJ2C67muCGchqMgj7bg7GNq+U55gmfeGvpNgzzLPOTO1JWV/8o9NniQJ93cR5oMSsH2RbuP7XWFKtQeK7QkBr8BbnA/9swCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 29.64 ns | 47.78 ns | 1.61 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterUInt64 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt64(value%3a%2018446744073709551615).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L26-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW/bMAx8D5D/oOVFDubGdup8NIOAtV23FWswoEm7x0Gz6USDLBkS3SZY+99HxcmAbS8UeCKP5J0GZAgemWDv+WrvEerRVVtV4PxoDTuk4NGPHrCaf7SulojgOuhP+nBrcJpHT1K3sGDZPM+nszxPZ+ez9GIyyabZZMjf9XuaJsmK6mlUKRFQ1RCN03F+lmVnWb5O54vzbJGmoyy7yMez6ds0pWx47HTQWGrkpUUDmLjWhP4T7w8nTbEN/w4qn2xBlj6ppTKngsKaSm3C5L2RtSqiX/za1o3SEpU1S1sCXzCOChyUPGb87u5xGZBKag8BWFpjL7+u/8PodnCNA4p//d235osyZcBonLPfayrmr+GcT4CflUfrVCH1B4nym8Jt2EY65a3xUfBDhBB3golDjA8aiBDi48Gie+LjeaJ7hv3eC2uc/QkFshU4BT5mV63S5ZokW6Gsm5g9BrdEcPLakpbg7sG3Gi+fwMkN9HtJ8sKetyTHkYG9IXIkRT0bDNDe7ArdljAYsCRhNzui1MBsxSqliUuZDbMt2c38oTks5MCU5H1wrdhKh+yZrmZRVyBOa+4Kq9vaiH/X3Xe4F4e9qQ4VahCc5Aty74/pEqRvHdRgkA9/A12Pu4rbAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 152.98 ns | 189.92 ns | 1.24 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[FormatterInt64 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value%3a%209223372036854775807).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/Utf8FormatterTests.cs#L19-#L22\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8aMRB8R+I/bHkxqBfuOCBQKktN0vRDDaoUaPpYuXd74MpnI3svATX9711zUKnty1o73p3dnTFIQBgIJLwRq0MgrIfXTVWhD8M17olDoDD8QtX8nfO1IkLfQn/Sj5YuJ/1HZRpcwKs8H49neTa+nE8ns9l0ns0G4nW3Y3iOqriaB5WKkHSN/TzLJxej0cVoss7mi/FokWXDPJ9NJ+PsZZZxNjh1etw5bhSlI4uU+sbG/jPvd69ssY3/HquQblGVIa2VtueCwtlKb+Lkg1W1Lvo/xY2rd9oo0s4uXYliAYI0eixFAuLu7mEZkUqZgBFYOuuuPq//w/h09DuPHP/6u2/sJ23LiPE4777VXCx+xXPeI33QgZzXhTJvFamvmrZxG+V1cDb0oxsyhqQVTB5jctRAxpCcDpbtk5zOk+0z6HaeYefdDywIVug1hgSuG23KNUu2IlXvEniIZsno441jLdHfY2gMXT2iVxvsdtL0GZ62LMeJAV4wObGiAXo9crf7wjQl9nqQpnC7Z0qD4CqotGEubTfgGrYbwrE5LuTRlux9dK3YKk/wxFdDvy2Q5zX3hTNNbeW/6x5aPMjj3lxHmgxKwfJFuQ+ndIkqNB5rtCQGvwEz1AQ22QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 148.02 ns | 184.54 ns | 1.25 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_006.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_007.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_008.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_009.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_010.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_011.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests_012.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Text.Tests.Utf8FormatterTests.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Buffers.Text.Tests.Utf8FormatterTests*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Buffers.Text.Tests.Utf8FormatterTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Buffers.Text.Tests.Utf8FormatterTests*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Buffers.Text.Tests.Utf8FormatterTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterDecimal(value: 123456.789)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt32(value: 4294967295)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value: -2147483648)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt64(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value: -9223372036854775808)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterDateTimeOffsetNow(value: 12/30/2017 3:45:22 AM -08:00)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt32(value: 2147483647)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt32(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterUInt64(value: 18446744073709551615)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Text.Tests.Utf8FormatterTests.FormatterInt64(value: 9223372036854775807)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Buffers.Tests.SearchValuesByteTests\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[IndexOfAny - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Tests.SearchValuesByteTests.IndexOfAny(Values%3a%20%22abcdefABCDEF0123456789%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/SearchValuesByteTests.cs#L52-#L53\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/aMBB+R+I/3PJi0FISUspaJksDyrZqRZUK6h4nN7kQT46N7EtLtO6/zybwsO3lrHx3993d90UhAaEj4PCJbVpHWI8WTVmidaOtx91og8Lm1ZNQDbpFS9ihd7rAw0M51+2gS80gEs95geV8sbxdfU7H2eXkavrh+iYaso/9nvJzRElo/aBCEJKscZCl2eRiPL4YT7bp9exyPEuzUXozvcqm2fs0naXp8NRpcW98IysMaaTENjr0n3mfrdB5FfIWS5dUKAqX1ELqc0FudCl3YXKrRS3zwS+2NPVeKkHS6LUpkM2AkUSLBYuB3d8/rQNSCuUwAGujzfxh+x92p/1Fe4s+/pV7bPQ3qYuA+XHW/Kh9MfsdzvmC9FU6MlbmQt0KEt8lVWEbYaUz2g2CGzyEuBOMH2N81ICHEJ8O5t0Tn87j3TPs995gb81PzAk2aCW6GBaNVMXWS7YhUe9jOFrGg5NL47VE+4iuUTR/QSt22O8lyRu8Vl6OEwO88+TkFXUQRWRWh1w1BUYRJAmsDp5SIZgSSqk8l9Q7MI23G9yxOSxk0f8vFoJreSUswau/GgZdAT+veciNamrN/1237XDHj3v7OpKkkDMvX5C7PX2uUbjGYo2a2PAPFELdvNkCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 298.70 ns | 421.96 ns | 1.41 | 0.14 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ContainsAny - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Tests.SearchValuesByteTests.ContainsAny(Values%3a%20%22abcdefABCDEF0123456789%c3%9c%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/SearchValuesByteTests.cs#L49-#L50\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/sLrQRhXrEddJVBCo7bgPNEaB2EiPBSOtLBYUaZCrxELTP+nf9MdKSvKh7WUJzr5mZyQgQbBIGHlHd61FqGerpizB2Nne4Xa2A27y6oHLBuyqRejRtVbIhbJL1U76XEYC/pgXUC5X69vN+zhJL+dvFlfXN79/BVP6djySbhUvEYzbVXAEFDVM0jidXyTJRTLfx9fZZZLF6SxNbhbx1eJ1HGdxPB06DRy1a6SFRgUYmUb5/vPcR8NVXvm8gdJGFfDCRrUjeC7ItSrFwW9uFa9FPvlB17o+CslRaLXVBdCMUBRgoKAhoXd3D1uPlFxa8MBWK738sv8P+6TcRUcDLv6Vu2/UZ6EKj7l1Rn+rXTH96c/5APhRWNRG5FzecuRfBVaeDTfCamUn3hDmQ9gLxroYdhowH8LhYNY/4XAe65/pePRCjkZ/hxzJDowAG5JVI2Sxd5LtkNfHkHSmMW/mWjstwdyDbSQun8DwA4xHUfRCnisnxzCBvHLDO8tJEKDenHLZFBAEJIrI5uRGSiC6JKWQbpZQB6IbZzexXbMnZEAVznvvWl5xg+TZXU0mfQE70zzlWja1Yv/SbXvcso63q0OBEhh18nm52+G7BW4bAzUopNM/CO145twCAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 341.23 ns | 389.25 ns | 1.14 | 0.14 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ContainsAny - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Tests.SearchValuesByteTests.ContainsAny(Values%3a%20%22abcdefABCDEF0123456789%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/SearchValuesByteTests.cs#L49-#L50\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/aMBC9I/EfprkY1CxJgLYslaUCSz/URZUWtD1W3mSyceXYyJ7sEnX732sncGh7Gctvvt68p5CA0BFw+MD2rSOsJ+umLNG6ycHjbrJHYfPqXqgG3bol7NGN0SSkdivdjvrcEiLxkBdYrtabm+3HNJvO5m/evltcR2P2fjhQfpEoCa3fVAhCkjWOpul0fpVlV9n8kC6Ws2yZTiezbDFNr+ev03SZpuNzp8Wj8Y2sMKSREtvo0H+Z+2CFzquQt1i6pEJRuKT29C4FudGlfAybWy1qmY9+sY2pj1IJkkbvTIFsCYwkWixYDOz29n4XkFIohwHYGW1W3w7/YV+0v+ho0ce/cneN/ip1ETC/zpoftS9mv8M5n5A+S0fGylyoG0Hiu6QqsBFWOqPdKNjBQ4h7wXgX404DHkJ8Ppj3T3w+j/fPeDh4gaM1PzEn2KOV6GJYN1IVBy/ZnkR9jKGzjAcrN8ZrifYOXaNo9YRWPOJwkCQv8Fx5Oc4T4JUf3hkOUURme8pVU2AUQZLA9uRHKgRTQimVnyX1I5jG2w2uaw6ELOrCex9cyythCZ791TDqC/iF5ik3qqk1/5du2+OOd7x9HUlSyJmXL8jdnr87FK6xWKMmNv4DEGAy+9oCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 337.98 ns | 395.99 ns | 1.17 | 0.13 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[IndexOfAny - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Buffers.Tests.SearchValuesByteTests.IndexOfAny(Values%3a%20%22abcdefABCDEF0123456789%c3%9c%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Buffers/SearchValuesByteTests.cs#L52-#L53\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW7bMAy9B8g/cL4owdzYTtOlyyBgSZptxRoUaILuOKg2HWuQpUCi1xjr/mR/sx+bFCeHbRcKfiQfyfeskIDQEXB4zzatI6xHi6Ys0brR1uNutEFh8+pRqAbdoiXs0Ftd4OG+nOt20KVmEImnvMByvljerD6k2fhycvVmev32969oyN71e8pPEiWh9aMKQUiyxsE4HU8usuwim2zT69llNkvHo0k2Ta+m09dpOkvT4anT4t74RlYY0kiJbXToP/M+WaHzKuQtli6pUBQuqYXU54Lc6FLuwuRWi1rmgx9saeq9VIKk0WtTIJsBI4kWCxYDu7t7XAekFMphANZGm/n99j/sVvuL9hZ9/Cv30OjPUhcB8+Os+Vr7YvYznPMR6ZN0ZKzMhboRJL5IqsI2wkpntBsEP3gIcScYP8b4qAEPIT4dzLsnPp3Hu2fY773A3ppvmBNs0Ep0MSwaqYqtl2xDot7HcDSNBy+XxmuJ9gFdo2j+Ha3YYb+XJC/wXHk5TgzwypOTV9RBFJFZHXLVFBhFkCSwOnhKhWBKKKXyXFLvwDTebnDH5rCQRf/HWAiu5ZWwBM/+ahh0Bfy85iE3qqk1/3fdtsMdP+7t60iSQs68fEHu9vS5RuEaizVqYsM/4eA2D9sCAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 302.37 ns | 423.44 ns | 1.40 | 0.14 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Tests.SearchValuesByteTests_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Tests.SearchValuesByteTests_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Tests.SearchValuesByteTests_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Tests.SearchValuesByteTests_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Buffers.Tests.SearchValuesByteTests.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Buffers.Tests.SearchValuesByteTests*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Buffers.Tests.SearchValuesByteTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Buffers.Tests.SearchValuesByteTests*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Buffers.Tests.SearchValuesByteTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Buffers.Tests.SearchValuesByteTests.IndexOfAny(Values: \"abcdefABCDEF0123456789\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Tests.SearchValuesByteTests.ContainsAny(Values: \"abcdefABCDEF0123456789Ü\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Tests.SearchValuesByteTests.ContainsAny(Values: \"abcdefABCDEF0123456789\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Buffers.Tests.SearchValuesByteTests.IndexOfAny(Values: \"abcdefABCDEF0123456789Ü\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEt5",
                                           "createdAt":  "2025-01-14T08:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice.Count(Options%3a%20NonBacktracking).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L112-#L123\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW/TMBR9r9T/YPriVmRNulaAiiyxjQomVobaajxWJrlpDY4d2dcsEdt/33XSPgAv1/K5X+eeowEZgkcm2Ae+bT1CNd1Bg9MNHIKWbtXUDrxX1njCPfrpN3DlnrLQ7G9NETy6dr/VKocuTG9sMDi+rzG2LNlXa65l/gsdBWUOE/5+ONC0U5YIjpYWEgFVBePL7HJxMZtdzBa77N1yPltmi2n2dp7N529eZ9kyyyanTge1pUZeWDSAqaN11H+e+8NJkx9j3kHp0yPIwqeVVOZckFtTqkPc3BpZqXz8h9/YqlZaRsZrWwBfMo4KHBQ8Yfzu7mEdkVJqDxFYW2Ov7nf/YbeGLiKxKP6V2wTzRZkiYrTO2X1Fxfw5nvMJ8LPyaJ3Kpf4oUX5XeIxspFOe5BtHZ0QMSS+Y6GLSaSBiSE4Hi/5JTueJ/pkMB0+sdvYn5Mi24BT4hF0HpYsdSbZFWdUJe5A6gIjedtaB24APGq9+g5MHGA7S9Ik9HkmO0wT2ioYjKerZaIR21eQ6FDAasTRlq4ZGamC2ZKXSNIssZzaQ3cx3zZGQA1OQ99G1/Cgdske6mo37AnGm2eRWh8qIf+m2Pe5Fx5vqUKEGwUm+KHd7+q5B+uCgAoN88gIADYwh5QIAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.85 secs | 2.12 secs | 1.14 | 0.14 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Count - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice.Count(Options%3a%20None).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.RegularExpressions/Perf.Regex.Industry.cs#L112-#L123\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/TMBC9V+p/ML24Fdkm7VYCBVliWSpYsWVRWy3HyiST1sixI3u8m4jlvzNO0wNwGctvvt68pwEZgkcm2Hu+6zxCPd9Di/MtHIOWbt02DrxX1njCPfr5N3DVgbLQHu5MGTy67rDTqoA+zG9tMDh9aDC25OyrNTDj78YjTYtkheBoUykRUNUwXWbL1dVicbVY7bO3+fUiz1bzxZvV8nqVvc6yPMtmQ6eDxlIjLy0awNTRDuq/zP3hpClOMe+g8ukJZOnTWipzKSisqdQxbu6MrFUx/cVvbd0oLSPNjS2B54yjAgclTxi/v3/cRKSS2kMENtbYm4f9f9idoYtIIYp/5bbBfFGmjBitc/ZQUzH/Hc/5BPhZebROFVJ/lCi/KzxFNtIpT5pNox0ihuQsmOhj0msgYkiGg8X5SYbzxPmZjUcvrHH2JxTIduAU+IR9CEqXe5Jsh7JuEvYodQARDe39ArcFHzTePIGTRxiP0vSFPZ9IjmECe0XDkRT1bDJBu24LHUqYTFiasnVLIzUwW7FKaZqlzJHZQHYz3zdHQg5MSd5H14qTdMie6Wo2PReIC822sDrURvxLtzvjXvS8qQ4VahCc5Ityd8N3A9IHBzUY5LM/4PYOzNoCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.82 secs | 2.13 secs | 1.17 | 0.17 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice.Count(Options: NonBacktracking)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.RegularExpressions.Tests.Perf_Regex_Industry_SliceSlice.Count(Options: None)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_DateTime\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_DateTime.ToString(format%3a%20%22G%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.DateTime.cs#L37-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/cOTFrciapBsVFFlijGmgrQKt0XicTHJpjRy7si9bK8Z/59ykD8DLWT5/993d99kgAWEgkPBBrA+BsJ2VfA+zb+ibx0+KsNQtzkq3Jq/tZtI43ypaQnKTTMX78cgwgWoIPTPUjCZGT+b5/OKsKM6KizJ/uzwvlvliVizmbxbFu9d5vszz6VDpcee4UNSOLFLmOxvrT7w/vLLVNr57bEK2RVWHrFXangCVs43exM4Hq1pdTX6JK9futFGknV25GsUSBGn0WIsUxN3dwypmGmUCxsTKWXf5tfwv98XyRjuPHP96u+/srbZ1zHE77x5bBovfcZ0bpM86kPO6UoZ1U981beM0yuvgbJhEmWUMaS+YPMb0qIGMIR0Wlv2RDuvJ/piORy+w8+4nVgRr9BpDCh87bepo0JpUu0vhQZkOZTTwyrGW6O8xdIYun9CrDY5HWfYCz1uWY2CAV0xOrGiAJCF3va9MV2OSQJbB9Z4pDYJroNGGudh+cB3bDeFYHAfyaGv2PrpWbZUneOatYdID5GnMfeVM11r577iHPh/kcW7GkSaDUsRvx3IfhusKVeg8tmhJTP8AnuBxF7ICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 395.10 ns | 419.67 ns | 1.06 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Year - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_DateTime.Year.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.DateTime.cs#L60-#L61\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/DLk4EdvsJi0FBVmilAoQjUBNVMSpMruzWSOvvbLHNBHl3xlnNwfgMpbfzDzPe2ODBISBQMIbsTkEwna+5XuYf0FfP7xThFvd4vwbKi9ej0eG61VN6Lmh4iRxcroslhdni8XZ4mJbvFqdL1bF5Xz58nxZXL54XhSropgNnR47x42icmSRch9t6j/xfvfKlk3Ke6xD3qCqQt4qbU8FpbO13qWXD1a1upz+Eteu7bRRpJ1duwrFCgRp9FiJDMTt7f06IbUyAROwdtZdfd7+h320rKjzyPGv3F20n7StEsbPeffQcrH4neS8R/qgAzmvS2XYJvVVU5OmUV4HZ8M0uSpTyHrD5DFmRw9kCtkgWPZHNsiT/TEbj56g8+4HlgQb9BpDBm+jNlXax4ZU22Vwr0xEmfZ17dhL9HcYoqGrn+jVDsejPH+Cx4btGBjgGZMTOxpgMiF3sy9NrHAygTyHmz1TGgRXQ60Nc2m7Axd53RCOzWkgj7bi3aetlY3yBI+sGqZ9gTyNuS+dia2V/4576PEgj3NzHWkyKEX6ZWz3YbiuUYXosUVLYvYHQpWstKECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 9.47 ns | 10.99 ns | 1.16 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_DateTime.ToString(format%3a%20%22r%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.DateTime.cs#L37-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GPbiRGyzm6RAFWSJUipAbQRqonKszO5sYuS1o/Fsm4j2vzPOxwG4jOXxmzcz79khA2Nk0PBBLXaRsR0t5R5H35Gah0+GcWlbHC3Dgsn61aAJ1BqeQUbZUL3v95wQmIaRhKEWNAt6MCkn52fj8dn4fFlezKbjWfl2NH03LSdvLl6X5awsh8dKwk2QQlUH9sgFdT7Vn3h/kvHVOr0TNrFYo6lj0RrrT4Aq+MauUuedN62tBr/VVWg31hm2wc9DjWoGii0S1ioHdXt7P0+ZxriIKTEPPlx+W/6X++plow2hxL/e7jp/Y32dctKOwkMrYPWS1vmM/MVGDmQr40Q388PyOk1jyMbg4yDJrFPID4Lpfcz3GugU8uPC+nDkx/X04Rj2e8+wofALK4YFksWYw8fOujoZtGDTbnK4N65DnQy8CqIl0h3GzvHlI5JZYb9XFM/wtBY5jgzwSshZFI2QZRyut5XraswyKAq43gqlQwgNNNYJl9gPoRO7Ie6L00CEvhbvk2vV2hDDk2wNgwNAn8bcVsF1rdf/jrs75KPezy04tuxQq/TtRO7d8TpHEzvCFj2r4R+qnAhysgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 115.39 ns | 173.22 ns | 1.50 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_DateTime.ToString(format%3a%20%22o%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.DateTime.cs#L37-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/4HxRgrmx02ZfHgSs64ptWIMNjdEdC82mEw2yZEh0m2Ddfx8VO4dtFwqiHh/J92SQgDAQSHgnNodA2C5KvofFN/TN/QdFWOoWF6XbkNd2O2ucbxUVkLhkLt5OJ4YJVEPomaFmNDF6dp6fr86Wy7PlqsxfFxfLIn+5WL3JX724WD7P8yLP52Olx85xoagdWaTM9zbWn3h/eGWrXXz32IRsh6oOWau0PQEqZxu9jZ0PVrW6mv0SV67ttFGknV27GkUBgjR6rEUK4ubmbh0zjTIBY2LtrLv8Wv6X+2x5o84jx7/ebnv7Rds65ridd/ctg8XvuM5HpE86kPO6UoZ1U9817eI0yuvgbJhFmWUM6SCYPMb0qIGMIR0XlsORjuvJ4ZhPJ0/QefcTK4INeo0hhfe9NnU0aEOq7VK4U6ZHGQ28cqwl+lsMvaHLB/Rqi9NJlj3B447lGBngGZMTKxogSchd7yvT15gkkGVwvWdKg+AaaLRhLrYfXM92QzgWx4E82pq9j65VO+UJHnlrmA0AeRpzXznTt1b+O+5hyAd5nJtxpMmgFPHbsdyH8bpGFXqPLVoS8z/uhO5RsgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 164.53 ns | 236.33 ns | 1.44 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_DateTime.ToString(format%3a%20%22s%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.DateTime.cs#L37-#L40\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/YH1Rgrmx0499eBCwriu2YQ1WNEZ3LDSbjjXIUiDRa4J1/31U7By2XSiIenwk35NBAsJAIOGdWO8DYbco+R4Wd+ibxw+KsNQdLkq3Jq/tZtY43ykqIAnJXLydTgwTqIbQM0PNaGL07Cw/uzhdLk+XF2X+ujhfFvnLxeWb8zy/fPUiz4s8n4+VHreOC0XtyCJlvrex/sj73StbtfHdYxOyFlUdsk5pewRUzjZ6Ezvvrep0Nfslrl231UaRdnblahQFCNLosRYpiNvbh1XMNMoEjImVs+7qa/lf7rPljbYeOf71dt/bL9rWMcftvHvsGCx+x3U+In3SgZzXlTKsm/qmqY3TKK+Ds2EWZZYxpINg8hDTgwYyhnRcWA5HOq4nh2M+nTzD1rsfWBGs0WsMKbzvtamjQWtS3TaFB2V6lNHAa8daor/H0Bu6+olebXA6ybJneGpZjpEBTpicWNEASULuZleZvsYkgSyDmx1TGgTXQKMNc7H94Hq2G8KhOA7k0dbsfXStapUneOKtYTYA5HHMXeVM31n577j7IR/kYW7GkSaDUsRvx3Lvx+sKVeg9dmhJzP8AejJz7rICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 102.96 ns | 173.35 ns | 1.68 | 0.02 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime_005.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_DateTime.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_DateTime*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_DateTime*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_DateTime*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_DateTime*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_DateTime.ToString(format: \"G\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_DateTime.Year\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_DateTime.ToString(format: \"r\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_DateTime.ToString(format: \"o\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_DateTime.ToString(format: \"s\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Tests.Perf_Deep\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Deep.cs#L61-#L91\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRS28TMRC+R8p/GHJxIrbZTRqJsMgSpS+gjUBNaI+V2Z1NDF57Zc/SRC3/nXE2OQCXsT2ex/cwSEAYCCS8F8tdIKzHK9zS+HNwlm+Bwvgr+urxArEZP3hNGG/fqJoPr5yvFRGWOVwpEzCB5U/d3CujS0Xa2RxWvsWReNfvGV6jKkLPe/gTSdc4nGbT2clkcjKZrbJ5fjrJs/l4Nn8zfTs5fZ1leZaNDp0eG8eNonRkkVLf2th/nPvdK1ts4r/HKqQbVGVIa6XtsaBwttLruHlnVa2L4bM4d3WjzR7lwpUochCk0WMpEhC3t/eLmKkiqZhYOOvOvqz+y32yzKjxyPGvv7vW3mhbxhyv8+6x5mLxO9K5RvqoAzmvC2UuFKkHTZuIRnnNiodhNEPGkHSCyX1M9hrIGJIDYdkdyYGe7I5Rv/cCjXc/sCBYotcYEvjQalOuWLIlqbpJgC1qUUZzzx1rif4OQ2vo7Bd6tcZ+L01f4GnDchwmwCseTqxogMGA3OW2MG2JgwGkKVxueaRBcBVU2vAsbdfgWrYbwr45AvJoS/Y+ulZslCd4YtYw7ArkEea2cKatrfwX7q7LB7nHzXWkyaAULF+Ue3d4LlCF1mONlsToD4at28fYAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.05 ms | 16.37 ms | 1.09 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20True).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Deep.cs#L93-#L123\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRS4/TMBC+V+p/GHpxK7JNWkpVgiyx7IPXVqBt2T2uTDJpDY4d2RO2Fct/Z5y2B+Aytsfz+B4GCQgDgYQ3YrUPhPV4jTsafwzO8i1QGH9BXz1cIjbje68J4+0rVZP58Nr5WhFhmcO1MgETWP3QzZ0yulSknc1h7Vscidf9nuE9qiL0vIg/kXSNw2k2nZ1NJmeT2Tpb5C8mebYYv3w1my/m0+dZlmfZ6NjpsXHcKEpHFin1rY39p7nfvLLFNv57rEK6RVWGtFbangoKZyu9iZv3VtW6GP4SF65utOlQLl2JIgdBGj2WIgFxc3O3jJkqkoqJpbPu/PP6v9wHy4wajxz/+rtt7Sdty5jjdd491Fwsfkc675De60DO60KZS0XqXtM2olFes+RhGN2QMSQHwWQXk04DGUNyJCwPR3KkJw/HqN97gsa771gQrNBrDAm8bbUp1yzZilTdJMAWtSijuxeOtUR/i6E1dP4Tvdpgv5emT/C4ZTmOE+AZDydWNMBgQO5qV5i2xMEA0hSudjzSILgKKm14lrYbcC3bDaFrjoA82pK9j64VW+UJHpk1DA8F8gRzVzjT1lb+C3d/yAfZ4eY60mRQCpYvyr0/PpeoQuuxRkti9AcuNYMe2QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.31 ms | 16.35 ms | 1.07 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDeepUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Deep.cs#L61-#L91\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bH2hjSqS7ASBoYJA0zz6itEidpNjwEormy1FCuSqsdHk37u05UPby5Ic7mN2xiABYSCQ8FYsd4GwSVe4pfRTcJZvgUL6FX39eIXYpg9eE8bbN6rn4xvnG0WEVQE3ygRMYPlTt/fK6EqRdraHJ+LNcGB4jqoJPQ/iXyTd4HiWz85OptOT6dkqnxen0yKfp+fz82k+y1/neZHnk77SY+u4UFSOLFLmOxvrj32/e2XLTfz3WIdsg6oKWaO0PSaUztZ6HSfvrGp0Of4tLl3TarOnuXAVigIEafRYiQTE7e39IiJ1pB+BhbPu4svqP+yj5Y1ajxz/+rvr7Gdtq4jxOO8eG04WL3Gd90gfdCDndanMlSL1oGkT2SivWfIwjm7IGJKDYHIfk70GMoakX1gejqRfTx6OyXDwDK13P7AkWKLXGBJ412lTrViyJammTYA96lBGdy8da4n+DkNn6OIXerXG4SDLnuFpw3L0HeAVNydWNMBoRO56W5quwtEIsgyut9zSILgaam24l7ZrcB3bDWFfHAl5tBV7H10rN8oTPPHWMD4kyCPNbelM11j5L93dAQ9yz5vzSJNBKVi+KPeufy5Qhc5jg5bE5A/PfBht2QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.66 ms | 16.75 ms | 1.07 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[WriteDeepUtf16 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted%3a%20False%2c%20SkipValidation%3a%20False).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Utf8JsonWriter/Perf.Deep.cs#L93-#L123\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTW8TMRC9R8p/GHJxIrbZ3bZCIcgSpV9AG4Ga0B4rszubGLz2yp6liVr+O+Ps5gBcxvbzfLx5zyABYSCQ8F4sd4Gwnq5wS9PPwVm+BQrTr+irxwvEZvrgNWG8faMqfzO+cr5WRFjO4UqZgAksf+rmXhldKtLO9vBEvBsODA9SFaHnSfyLpGscH2fHp0d5fpSfrrLZ/CSfZ7PpLM/e5vnJ6yybZ9mkr/TYOC4UpSOLlPrWxvpD3+9e2WIT/z1WId2gKkNaK20PCYWzlV7HyTural2Mn8W5qxtt9jQXrkQxB0EaPZYiAXF7e7+ISBXpR2DhrDv7svoP+2R5o8Yjx7/+7lp7o20ZMR7n3WPNyeJ3XOca6aMO5LwulLlQpB40bSIb5TVrHsbRDhlD0gkm9zHZayBjSPqFZXck/XqyOybDwQs03v3AgmCJXmNI4EOrTbliyZak6iYB9qhFGe09d6wl+jsMraGzX+jVGoeDNH2Bpw3L0XeAV9ycWNEAoxG5y21h2hJHI0hTuNxyS4PgKqi04V7arsG1bDeEfXEk5NGW7H10rdgoT/DEW8O4S5AHmtvCmba28l+6uw4Pcs+b80iTQSlYvij3rn8uUIXWY42WxOQP/ZdiqNoCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 15.79 ms | 16.83 ms | 1.07 | 0.00 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Deep_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Deep_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Deep_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Deep_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Tests.Perf_Deep.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Tests.Perf_Deep*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: True)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: True)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf8(Formatted: False, SkipValidation: False)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Tests.Perf_Deep.WriteDeepUtf16(Formatted: False, SkipValidation: False)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Document.Tests.Perf_DocumentParse\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Document.Tests.Perf_DocumentParse.Parse(IsDataIndented%3a%20False%2c%20TestRandomAccess%3a%20False%2c%20TestCase%3a%20Json400KB).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Document/DocumentParse.cs#L49-#L75\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS224aMRB9R+IfprwY1M1eCK2irSyVXJrSBDUClD5G7noWXHltZM82oCb/XnuBh7QvM/KZ25kz1khA6Ak4fGbLvSds0hXuKP3mrUmvbdU2aChAnnz6gK5+OmEPwnlMOzuc+WtBYmZkwFGW8EVojwnEqoUw0jbTqkLv3wSuhMcS4phJnt9djtinfk8HNqImdIGOFISkGhyO8/HkrCjOiskqvyjPi7LI0/Gk+HhRfHif52Wej46VDrc2FDJpySBlrjWx/tT3pxOm2sS4w9pnGxTSZ41Q5pRQWVOrdZy8N6JR1fAPu7LNVmlBypq5lchKYKTQoWQJsPv7x3lE6rhTBObW2On31X/YLIjitg6DfRNbtOZOGRmxMM7ZpyYks9e4zi3SV+XJOlUJHbX9oWgT2QingmJ+GG/Go0kOgvHOJp0GPJrkuDA/uOS4Hj+4Ub/3Altnf2FFsESn0Cdw2SotV0GyJYlmm8Cj0C3y7lY2aIlugb7VNP2NTqyx38uyF3jeBDmOHeBdaE5BUQ+DAdmbXaVbiYMBZBnc7EJLjWBrqJUOvZRZg23DucF3xZGQw/CDHMSrVRvhCJ7D1jA8JPATzV1lddsY/i/d/QH3vOMd8kiRRs6CfFHu/fE5R+Fbh/ELs9Ffqg4Xbv8CAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.73 ms | 2.90 ms | 1.06 | 0.06 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Document.Tests.Perf_DocumentParse_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Document.Tests.Perf_DocumentParse.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Document.Tests.Perf_DocumentParse*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Document.Tests.Perf_DocumentParse*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Document.Tests.Perf_DocumentParse*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Document.Tests.Perf_DocumentParse*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Document.Tests.Perf_DocumentParse.Parse(IsDataIndented: False, TestRandomAccess: False, TestCase: Json400KB)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEt7",
                                           "createdAt":  "2025-01-14T08:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Int32\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.ToString(value%3a%20-2147483648).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L29-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/DLk4EZvsbhJoCLJEKRUgGoGaVTlWZnc2MfLakT3bJqL9946zyQG4jOXnmTdv3tggAWEgkPBBrA+BsJkUfA+TH+jr+6+WZtNJ4dbktd0MH5RpcQnjaT6/mC9mb+eLkXjf7xkmUTWhZ5ZKEZJucDjNpvNxno/zeZEtlrN8mb+ZXOTZYjp79zrLllk2OlV63DkuFJUji5T61sb6M+8vr2y5je8e65BuUVUhbZS254TS2VpvYueDVY0uh3/ElWt22ijSzq5chWIJgjR6rEQC4ubmbhWRWpmAEVg56y6/F/9hPDv6nUeOf73dtvabtlXEuJ139w0ni+c4zmekLzqQ87pU5pMi9VPTNqpRXgdnwzBaLWNIOsPkMSZHD2QMyWlg2R3JaTzZHaN+7wl23v3GkmCNXmNI4GOrTVWwZWtSzS6Bu7gkGZd45dhL9LcYWkOXD+jVBvu9NH2Cxy3bcWKAV0xO7GiAwYDc9b40bYWDAaQpXO+Z0iC4GmptmIt/AbiW1w3hWBwFebQV7z5urdwqT/DIU8OwS5BnmfvSmbax8l+5hw4P8qib80iTQSnYvmj34XRdoQqtxwYtidELVKaKMbYCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 66.10 ns | 114.08 ns | 1.73 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.TryFormat(value%3a%20-2147483648).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L57-#L60\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4TMRC9R8o/DLk4EZvsbhIgBFmilAIVjUBNVI6V2Z1NjLx2NJ5tE9H+O3Z2cwAuY/l55nneewYZGD2DhPdiffSM9WQT7n7yHam6v7Y8m042dPzkqFY8fFCmwSWMp/n8zXwxez1fjMS7fs8EFlUxUqApFSPrGofTbDof5/k4n2+yxXKWL/NXk8U0z94uspdZtsyyUTdJuHdhUJSOLXJKjY3zZ96fpGyxi++ElU93qEqf1krbc0PhbKW38eejVbUuhr/Fpav32ijWzq5ciWIJgjUSliIBcXNzt4pIpYzHCKycdRffNv9hQTzSnjDUv95uG/tV2zJi4Tty93VoFs9RzmfkL9qzI10o81Gx+qF5F7dRpL2zfhi9lrEkrWHyVJOTBzKWpBMs2yPp5Mn2GPV7T7An9wsLhjWSRp/Ah0abchMsW7Oq9wncxZBkTPHSBS+RbtE3hi8ekNQW+700fYLHXbCjY4AXgZyDox4GA3ZXh8I0JQ4GkKZwdQiUBsFVUGkTuLTdgmtC3OBPw3EhQluG7GNqxU4Rw2NQDcO2QZ7XPBTONLWV/657bHEvT3uHPtZsUIpgX7T72F1XqHxDWKNlMfoDLgB45rcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 70.95 ns | 118.37 ns | 1.67 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.ToString(value%3a%202147483647).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L29-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GHJxIrbZjyw0DbJEKVVBbQRqonKszO5sYuS1I3u2TUT57x3n4wBcxvLzzJs3b2yQgDAQSPgoFrtA2I6XfA/j7+ibx6+WJsV46RbktV0Nn5TpcAZFXp6X08n78nwkPvR7hjlUQ+iZpFaEpFscFllRnuX5WV4us+lsks/yd+OLIp+W04u3WTbLstGx0uPGcaGoHVmk1Hc21p94f3plq3V899iEdI2qDmmrtD0lVM42ehU776xqdTX8La5cu9FGkXZ27moUMxCk0WMtEhB3dw/ziDTKBIzA3Fl3+W35H8ajo9945PjX231nb7WtI8btvHtsOVn8iePcIH3RgZzXlTKfFakfmtZRjfI6OBuG0WkZQ3IwTO5jsvdAxpAcB5aHIzmOJw/HqN97gY13v7AiWKDXGBL41GlTL9myBal2k8BD3JGMO7xy7CX6ewydocsn9GqF/V6avsDzmu04MsAbJid2NMBgQO56W5muxsEA0hSut0xpEFwDjTbMxZ8AXMfrhrAvjoI82pp3H7dWrZUneOapYXhIkCeZ28qZrrXyX7m7Ax7kXjfnkSaDUrB90e7d8TpHFTqPLVoSo1d6Fy8btQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 59.36 ns | 118.54 ns | 2.00 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.TryFormat(value%3a%202147483647).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L57-#L60\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmPnJqS5AlSmkB0QjUROWxMnd7iZHPjtZ7bSLKf8fOJQ/Ay1oe7453ZgwyMHoGCe/Ecu8Z2+kq3P30G1Lz+NnyrJiuaH/rqFU8flKmwzkUeXlRXs7Oy4uJeDscmECiGkYKLLViZN3iuMiK8izPz/JylV3OZ/k8P59mxazIyjevs2yeZZPjJOHWhUFRO7bIKXU2zp94f5Cy1Sa+EzY+3aCqfdoqbU8NlbONXsef91a1uhr/Eteu3WqjWDu7cDWKOQjWSFiLBMTd3cMiIo0yHiOwcNZdfV39hwXtSFvCUP96u+/sF23riIXvyD22oVn8jnI+In/Snh3pSpkPitV3zZu4jSLtnfXjaLWMJekNk4eaHDyQsSRHwbI/kqM82R+T4eAFtuR+YsWwRNLoE3jfaVOvgmVLVu02gYeYkYwhXrvgJdI9+s7w1ROSWuNwkKYv8LwJdhwZ4FUg5+Coh9GI3c2uMl2NoxGkKdzsAqVBcA002gQubdfguhA3+MNwXIjQ1iH7mFq1UcTwHFTDuG+QpzV3lTNda+W/6+573MvD3qGPNRuUItgX7d4frwtUviNs0bKY/AHs57sWtgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 50.58 ns | 115.93 ns | 2.29 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L29-#L31\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRS28TMRC+R8p/GHJxIrbZR1IoQZYopQJEI1CzKsfK7M4mRl47smfbRLT/veNscgAuY3k83/h7GCQgDAQSPojVPhC205LvYfoDfXP/1dKsmJZuRV7b9fhBmQ4XkBez+flEvB8ODMNVQ+gZXytC0i2Oi6yYn+X5WT4vs4vFLF/kb6b57Pztu+LidZYtsmxyRHrcOgaK2pFFSn1nI/6095dXttrEd49NSDeo6pC2StvTQOVso9fx571Vra7Gf8SVa7faKNLOLl2NYgGCNHqsRQLi5uZuGTuNMgFjY+msu/xe/tdj1ei3Hrn+9Xbb2W/a1rHH33l33/KweI5yPiN90YGc15UynxSpn5o2kY3yOjgbxtFkGUvSGyYPNTl4IGNJjoJlfyRHebI/JsPBE2y9+40VwQq9xpDAx06bumTLVqTabQJ3MR4Z47ty7CX6WwydocsH9GqNw0GaPsHjhu04boBXvJzY0QCjEbnrXWW6GkcjSFO43vFKg+AaaLThXZw/uI7jhnAAR0Iebc3Zx9SqjfIEj6waxv2APNHcVc50rZX/0t33/SAPvHmONBmUgu2Ldu+P1yWq0Hls0ZKYvAAZtcQXsAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.00 ns | 59.98 ns | 1.67 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int32.TryFormat(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int32.cs#L57-#L60\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR224TMRB9j5R/GPLiRGyzlwQEiyxRSrmIRqBmVR4rszubNfLa0Xi2TUT5d+xcHoCXsXw8c3zmHIMMjJ5Bwlux3nvGfl6Fu59/Q2rvP1teFPOK9h8c9YqnD8oMWEJeLJYvZuLNeGTCvGoZKRA0ipF1j9MiK5YXeX6RL6vsVbnIy/zlvMjz13mWP8+yMstmp0nCrQuDonFskVMabJw/8/4gZesuvhO2Pu1QNT7tlbbnhtrZVm/iz3urel1Pf4kr12+1UaydXbkGRQmCNRI2IgFxc3O3ikirjMcIrJx1l1+r/7CwNtKWMNS/3m4H+0XbJmLhO3L3fWgWv+M6H5E/ac+OdK3Me8Xqu+YuqlGkvbN+Gl2WsSRHw+ShJgcPZCzJaWF5PJLTevJ4zMajJ9iS+4k1wxpJo0/g3aBNUwXL1qz6bQJ3MR4Z87tywUukW/SD4csHJLXB8ShNn+CxC3acGOBZIOfgqIfJhN31rjZDg5MJpClc7wKlQXAttNoELm034IYQN/jDcBREaJuQfUyt7hQxPIatYXpskGeZu9qZobfyX7n7I+7lQXfoY80GpQj2Rbv3p+sKlR8Ie7QsZn8ANeNLx7ECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 32.30 ns | 59.44 ns | 1.84 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32_006.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int32.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int32*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int32*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int32*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int32*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Int32.ToString(value: -2147483648)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int32.TryFormat(value: -2147483648)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int32.ToString(value: 2147483647)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int32.TryFormat(value: 2147483647)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int32.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int32.TryFormat(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_String\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Replace_Char - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_String.Replace_Char(text%3a%20%22yfesgj0sg1ijslnjsb3uofdz3tbzf6ysgblu3at20nfab2wei1kxfbvsbpzwhanjczcqa2psra3aacxb67qnwbnfp2tok6v0a58lzfdql1fehvs91yzkt9xam7ahjbhvpd9edll13ab46i74ktwwgkgbi79.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.String.cs#L167-#L171\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVUy27dNhDdB8g/qN7cGHFiSdTTxQWapkFbNEGL2EiXAd+ixIf4kESp6b+XN3YWbTdDcDgzPHOGPJKGLFAfsnP2w+l+94Gq1w9p71//QR37fB+c0Pz1RzpLiOnntwN0LwKN4S672hn1fMw9L8TopR49Aoth5AABHazZPUdyATCUuWYQlRsVxRQZWj2aj22AesQHtrCcvYMAQhxR01q9Ic3mMpipWXNYd/JgxMqC0WH1fbEfU+gjVC0cRjSsM+kpkbIAEFWNaKspbBufOBJtX9KaT8ty0NXUVnU2dIASyNvDrIY2XcNV2FqQT8qXoo58FFXEc1mXXWubjq3D5g8ClD+GUC5Di/Ag+TTWVtsi9qqSvF033WFby7Zu4LTAxuyxn9oCqYh2r9WwxlVGQqupV3BRjEfS8TjEWKltnocyhN3E/hAygF2uhe19hczMFgM7K91hCC9t0/qhq7dYeYlJs7UL01QTGKFoADArLaeAYCSh9EezN8pUZdWCSMq24kcHwNwMI1BL2+JKVSZRVfsOhSjpkFNm9dIfY++2gKa6TTwLA2oEbFU2Y822zRZ2nzSjxHlld7YVCnRqmkwgrNX56poZUDfsHZkOHVzPttF5GUfuEOViyHWDZlQjtux1jZamxrSf6IiZYHGbsc/rRTmPumklTWVLsS0cpamtBNS8HkzuGOvdYBTixwG12G2L0Iis67px3yqMuTa7BIVhANZhWPOV5x3Xzh4R+i7PB7qFrQt641s9w7UrdCAzIU3ZdH0Ews4YFO3elQjQMjg0k0NQEyWBR5734QAtt2qoEJkLtPZSy9rX3UJQURz50IrSE1lrtA/jzo64HfRQc2VjLgDdV08A4513u+3HQa6T0ZrhFVVey0phJBQ5eJXuIIMdFYsMWzAXPjSoj2Xc02stWrrOdq52XLHSqZyVjVgdCCWrVY4MrqpVhCVCs2K7F6ObsG+EKieygHHFNMZyahvKV9oAaHQNG42i95XDE+1zPSs7g9rKhdVtoXzR5HupB2gp60C9waEqrFu6AJcFNOWauy41ILurm8xIcvn5d9nphE6nm0zT7dv+5el0ffr++TOZdASyQF0SEgIDDULRF2VeVq+K4lVRPeTdHSjuivZ1W9R5UYGXeX6X59dPmY7OJiWeiAmahlu36Ev+t7rIQY2Hy7mjzN8OFBJ/q6DQ3wKw0Uzwy827hkrgF3+d3ho1CwmDMPqDIfSUsAZBHSUJ/un9+08fLh4GpacXxwejzZvfH/7n+1WnjmZHk/3X2cdF/yY0ufjSdc58Vin49PelnZ9p+EX4YJzAUP4EA/xThOGCBjrhjfZJPn04X8zNI2Hnr/bmKwfni7l5avj8uNw8tXd+XK6fP/uSzc6MFIfsnjpB/U324yIkeUiU3Qeo5pvsE5QLPV90/K1JXFL3kfpFhjcrdZDT589ub79k25DoeKqQfZeKh8Soz66ugnkXsVwIvbrKbm+zd0lyZ0kzwzKWFCvFa56ZJY0781+TL4Bc0qY0+8vUcHoZIdtS19mLx4DzN5gRG7koff4v3P3R789fcae4IIKk51Oi70L3/rT9QKFfHFVUh9P1P3a1kUO5BgAA\u003e)\u003c/li\u003e\u003c/ul\u003e | 436.91 ns | 514.38 ns | 1.18 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_String_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_String.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_String*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_String*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_String*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_String*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_String.Replace_Char(text: \"yfesgj0sg1ijslnjsb3uofdz3tbzf6ysgblu3at20nfab2wei1kxfbvsbpzwhanjczcqa2psra3aacxb67qnwbnfp2tok6v0a58lzfdql1fehvs91yzkt9xam7ahjbhvpd9edll13ab46i74ktwwgkgbi792e5gkuuzevo5qm8qt83edag7zovoe686gmtw730kms2i5xgji4xcp25287q68fvhwszd3mszht2uh7bchlgkj5qnq1x9m4lg7vwn8cq5l756akua6oyx9k71bmxbysnmhvxvlxde4k9maumfgxd8gxhxx4mwpph2ttyox9zilt3ylv1q9s4bopfuoa8qlrzodg2q67sh85wx4slcd6w7ufnendaxai633ove2ktbaxdt2sz6y6mo42473xd274gz833p6hj3mu77c4m4od9e5s8btxleh0efqnu9zj9rwtbk5758lio35b3q426j5fwwq1qyknfedrsmqyfw1m38mkkotdf7n0vr6p3erhy8dkzntr9fwjrslxjgrbegih0n6bpb5bfuy55bu65ce9kejcfifxwpcs05umrsb8kvd64q2iwugbbi7vd35g5ho0rff9rhombgzzaniyq7bbjbqr88jyw4ccgnoyl31of3a5thv0vg08gnrqzxas800hewtw8tnwgw5pav81ntdpdd62689x3iqpc317y82b3e2trbpdzieoxldaz009tz37gqmh4bdp1bv9lnl5s58udb11z0h7i2sdl5nbyhjyfzxwzezmp4qx0i3eyvsd3fg8sryq9jhlvkonnfcvb4snl4mcbimdzg49tzdhqjmfxfcq3p1st6b9x2xyevo17evpqp4yc4f2rm0f26ivr3t2f5m0boc44vituxaovcqy1jrkcs6im2kdu3jvcexx2k76egve63aon5a6nbxss4rcke90npmqp35qluf571ms160y2nhaqef835wah41qru8tauu362v0r8konl8\", oldChar: \u0027b\u0027, newChar: \u0027+\u0027)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_UInt32\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt32.TryFormat(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt32.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bH2hjSqW5AdQqyDQNE0fSIwWsZoeA1Za2Swo0liuEhtN/r2kH4e2lyU43B3uzBhkYPQMEt6J1d4ztuMy3P34G1Lz8P2L5elkXNL+o6NW8fBRmQ4LyCfT2Xwk3vZ7JhCohpECQ60YWbc4nGST2UWeX+SzMntTTPMiX4znk3y+yBevs6zIstFpknDrwqCoHVvklDob58+8P0nZahPfCRufblDVPm2VtueGytlGr+PPe6taXQ1/iyvXbrVRrJ1duhpFAYI1EtYiAXF7e7+MSKOMxwgsnXWXX8v/sCAbaUsY6l9vd5290baOWPiO3EMbmsVLlPMJ+bP27EhXynxQrH5o3sRtFGnvrB9Gm2UsydEweajJwQMZS3ISLI9HcpInj8eo33uGLblfWDGskDT6BN532tRlsGzFqt0mcB/jkTHAKxe8RLpD3xm+fERSa+z30vQZnjbBjhMDvArkHBz1MBiwu95VpqtxMIA0hetdoDQIroFGm8Cl7RpcF+IGfxiOCxHaOmQfU6s2ihiegmoYHhvkec1d5UzXWvnvuvsj7uVh79DHmg1KEeyLdu9P1yUq3xG2aFmM/gD7MvAPsgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 31.20 ns | 57.94 ns | 1.86 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt32.ToString(value%3a%204294967295).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt32.cs#L27-#L30\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GHJxIrbZzUehG2SJUipAbQRqQjlWZnc2MfLakT3bJqL974yzmwNwGcvPM2/evLFBAsJAIOG9WB0CYT1e8z2Mv6GvHr5/sTSbjtduRV7bzfBRmQYXMJ/m8/zN22l+PhLv+j3DJKoi9MxSKkLSNQ6n2XR+NpmcTebr7GIxmywm+fg8v5jl2ex1li2ybNRVetw5LhSlI4uU+sbG+hPvT69ssY3vHquQblGVIa2VtqeEwtlKb2Lng1W1Loa/xZWrd9oo0s4uXYliAYI0eixFAuL29n4ZkUqZgBFYOusuv67/w3h09DuPHP96u2vsjbZlxLiddw81J4uXOM4npM86kPO6UOajIvVD0zaqUV4HZ8MwWi1jSFrD5DEmRw9kDEk3sGyPpBtPtseo33uGnXe/sCBYodcYEvjQaFOu2bIVqXqXwH3ckYxLvHLsJfo7DI2hy0f0aoP9Xpo+w9OW7egY4BWTEzsaYDAgd70vTFPiYABpCtd7pjQIroJKG+biTwCu4XVDOBZHQR5tybuPWyu2yhM88dQwbBPkSea+cKaprfxX7qHFgzzq5jzSZFAKti/afeiuS1Sh8VijJTH6A4wfbBW2AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 58.20 ns | 118.89 ns | 2.04 | 0.05 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt32.TryFormat(value%3a%204294967295).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt32.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmLunRJkGWKKV8iEag5iiPlbnbS4x8drTeaxNR/jt2LnkAXtbyeHe8M2OQgdEzSHgjVnvP2IyLcPfjr0j1w7dPls+n44L27x01ioePyrS4gHw6z+cXl9P5q5F43e+ZwKJqRgo0lWJk3eBwmk3zs8nkbJIX2WxxPllM5uOLyzyb5bOXWbbIstFxknDrwqCoHFvklFob50+8P0jZchPfCWufblBVPm2UtqeG0tlar+PPe6saXQ5/iWvXbLVRrJ1dugrFAgRrJKxEAuL29n4ZkVoZjxFYOuuuvhT/YUE70pYw1L/e7lr7WdsqYuE7cg9NaBa/o5wPyB+1Z0e6VOadYvVd8yZuo0h7Z/0wei1jSTrD5KEmBw9kLMlRsOyO5ChPdseo33uGLbmfWDKskDT6BN622lRFsGzFqtkmcB8zkjHFaxe8RLpD3xq+ekRSa+z30vQZnjbBjiMDvAjkHBz1MBiwu9mVpq1wMIA0hZtdoDQIroZam8Cl7RpcG+IGfxiOCxHaKmQfUys3ihiegmoYdg3ytOaudKZtrPx33X2He3nYO/SxZoNSBPui3fvjdYnKt4QNWhajP8+9Ob63AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 50.18 ns | 116.09 ns | 2.31 | 0.00 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt32.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt32.cs#L27-#L30\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4aMRC9I/EPUy4GdcPuAo3IVpaaplFaNahVoOkxcndnwZXXRvZsAmry7xnDcmh7Gcvjec9v3jNIQBgIJHwQy30gbMYrvofxd/T1w48vlqaT8cotyWu7Hj4q02IB+WQ6ezcS7/s9w3hVE3omqBQh6QaHk2wyO8vzs3y2yubFNC/yi/E8O59fnM/eZlmRZaMO6XHrGCgqRxYp9a2N+BPvL69suYnvHuuQblBVIW2UtqeB0tlar+PPe6saXQ7/iCvXbLVRpJ1duApFAYI0eqxEAuL29n4RO7UyAWNj4ay7/Lb6r8dbo9965PrX211rv2pbxR5/591Dw8PiJa5zg/RZB3Jel8p8UqR+atpENcrr4GwYRpdlLMnRMHmoycEDGUvSLSyPR9KtJ4/HqN97hq13v7EkWKLXGBL42GpTrdiyJalmm8B9jEfG/K4ce4n+DkNr6PIRvVpjv5emz/C0YTs6BnjD5MSOBhgMyF3vStNWOBhAmsL1jikNgquh1oa5OH9wLccN4QCOgjzairOPqZUb5QmeeGsYHgfkSeaudKZtrPxX7v7YD/Kgm+dIk0Ep2L5o9767LlCF1mODlsToFT8HOwuxAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 33.86 ns | 59.38 ns | 1.75 | 0.04 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt32_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt32_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt32_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt32_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt32.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt32*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt32*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt32*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt32*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_UInt32.TryFormat(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt32.ToString(value: 4294967295)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt32.TryFormat(value: 4294967295)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt32.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(Int32).SerializeToWriter(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRUW/TMBB+r9T/cPTFrciaNK0QKhgxxgSMVUhttD0ik1xaI8eO7AtrYfvvnNMWCXg5y3ff3X33fQYJCAOBhLdicwiEzbTAPU1vgrPTDXqtjP6pSPOvYFyY3ntNGKuvP1ma52/+gLBwfc2PV67CJayxNljGzol4NRwY3qRqLvOqShGSbnCcZ/niYja7mC2K7OVyPlvms+k8zxfzF/nzLFtm2eTU6bF13CgqRxYp9Z2N/ee537yy5S7WPdYh3aGqQtoobc+A0tlab+Pmg1WNLse/xJVrWm36yyJfsQRBGj1WIgFxe3u3iplamYAxsXLWXX4p/suxBuhbjxz/qq07+1nbKuZ4nXdfGwaLp3jOB6SPOpDzulTmvSJ1r2kX2SivWdYwjn7IGJKjYLKPSa+BjCE5HSyPT3I6Tx6fyXDwCK1331l8iOZgSOBdp01VsGQbUk2bwJ0yHcro6JVjLdGvMXSGLn+gV1scDtL0ER52LMdpAjzj4cSKBhiNyF3vS9NVOBpBmsL1nkcaBFdDrQ3P0nYLrmO7IfTNkZBHW7H30bVypzzBA18N4yNAnmnuS2e6xsp/6R6O+SB73owjTQalYPmi3IfTd4UqdB4btCQmvwFc/cyv2wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 127.73 ns | 138.60 ns | 1.09 | 0.02 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Int32%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;Int32\u0026gt;.SerializeToWriter(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEt_",
                                           "createdAt":  "2025-01-14T08:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Int64\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L26-#L28\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRS2/bMAy+B8h/4HJRgrmxnThBkUHAuq5YhzXo0BjdsdBsOtEgS4FEtwnW/fdSeRy2XSiI4kd9D4MEhIFAwkex2gfCdlzyPYy/o2+evlqaF+PSrchrux4+K9PhAvLJtJiNxId+zzBcNYSe8bUiJN3icJJNios8v8iLMrtcTPPFZDqe58XlbDZ/n2WLLBudkB63joGidmSRUt/ZiD/v/emVrTbx3WMT0g2qOqSt0vY8UDnb6HX8eW9Vq6vhb3Ht2q02irSzS1ejWIAgjR5rkYC4u3tcxk6jTMDYWDrrru7L/3qsGv3WI9e/3h46+03bOvb4O++eWh4Wf6KcL0i3OpDzulLmsyL1Q9MmslFeB2fDMJosY0mOhslDTQ4eyFiSk2B5PJKTPHk8Rv3eK2y9+4UVwQq9xpDAp06bumTLVqTabQKPMR4Z47t27CX6Bwydoatn9GqN/V6avsLLhu04bYB3vJzY0QCDAbmbXWW6GgcDSFO42fFKg+AaaLThXZw/uI7jhnAAR0Iebc3Zx9SqjfIEL6wahscBeaa5q5zpWiv/pbs/9oM88OY50mRQCrYv2r0/XZeoQuexRUti9AbIxCNmsAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 47.13 ns | 68.82 ns | 1.46 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.ToString(value%3a%209223372036854775807).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L26-#L28\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8aMRC9I+U/TLkY1A27LJAFKktN0yitGtQqoPQYubuz4MprI3s2ATX97x3zcWh7GcvjmTdv3rNBAsJAIOG9WO4DYTNY8T0MvqGvnz5buhoPVm5JXtt171mZFucwy/PRqMiz0dV0Mi6KyTQr+uLdRccwmKoJPaNVipB0g708y8eXw+HlcLzKpvPRcJ6PBkVeTLLZ7G2WzbOsf+r0uHXcKCpHFin1rY39Z9wfXtlyE9891iHdoKpC2ihtzwWls7Vex8l7qxpd9n6JG9dstVGknV24CsUcBGn0WIkExP394yJmamUCxsTCWXf9dfVfjjVAv/XI8a+3h9Z+0baKOR7n3VPDxeJ3XOcO6ZMO5LwulfmoSH3XtIlslNfB2dCLkssYkqNg8hCTgwYyhuS0sDweyWk9eTz6F51X2Hr3E0uCJXqNIYEPrTbViiVbkmq2CTxGs2Q088axlugfMLSGrp/RqzVedNL0FV42LMcJAd4wOLGiAbpdcre70rQVdruQpnC7Y0iD4GqotWEs/g3gWrYbwqE5EvJoK/Y+ulZulCd44a2hdyyQZ5q70pm2sfJfuvtjPsgDb64jTQalYPmi3PvTdYEqtB4btCT6fwDjSOt5vgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 149.75 ns | 219.36 ns | 1.46 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.TryFormat(value%3a%20-9223372036854775808).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L40-#L42\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8r5T/sOTFibjkLpekOYIsUUoLiEagJiqPlbnbS4x8drTeaxNR/jt2Ph6Al7U83h3PzhhkYPQMEt6J5d4zNsNVuPvhN6T68bPly8lwRftbR43i3pMyLc5h8CbPx+NZno0vi+lkNpsWWdEXbzsXJtCpmpECX6UYWTfYy7N8MhiNBqPJKivm49E8Hw+LbDrN8+J1ls2zrH+aJNy6MCgqxxY5pdbG+TPvD1K23MR3wtqnG1SVTxul7bmhdLbW6/jz3qpGl71f4to1W20Ua2cXrkIxB8EaCSuRgLi7e1hEpFbGYwQWzrqrr6v/sOAC0pYw1L/e7lv7RdsqYuE7co9NaBa/4zofkT9pz450qcwHxeq75k1Uo0h7Z30vmi5jSY6GyUNNDh7IWJLTwvJ4JKf15PHody5eYEvuJ5YMSySNPoH3rTbVKli2ZNVsE3iIackY57ULXiLdo28NXz0hqTV2LtL0BZ43wY4TA7wK5Bwc9dDtsrvZlaatsNuFNIWbXaA0CK6GWpvApe0aXBviBn8YjoIIbRWyj6mVG0UMz2Fr6B0b5FnmrnSmbaz8V+7+iHt50B36WLNBKYJ90e796bpA5VvCBi2L/h86o+tEwAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 165.25 ns | 238.31 ns | 1.44 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.TryParse(value%3a%20%22-9223372036854775808%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/sLrQRmVLlt8qCDRNg7ZojAaxkB4DVlrZLCjSWK4SG03+PaQfh7aXJTjcHc7OaCBG4IgJ9pGvD46gGRb+7oZ3gPXjN0OzybDAw51EB70nqVvIWTRYZtl4PM/S8Wwxnczn00W6iPr8Q7ejPZ+sCdATVpKAVAO9LM0mg9FoMJoU6SIfj/JsPFymy1k6m75P0zxN++dJhJ31g7yyZIASbE2Yv/D+QmnKbXhHqF2yBVm5pJHKXBpKa2q1CT8fjGxU2fvDr22zU1qSsmZlK+A546QAoeIx47e3D6uA1FI7CMDKGnv1o/gP8zYA7hB8/evtvjXflakC5r9D+9j4Zv4a1vkC9FU5sqhKqT9Lkj8VbYMaicpZ43rBdRFKfDJMHGt89ECEEp8XFqcjPq8nTke/23lhO7S/oSS2BlTgYvapVboqvGVrks0uZg8hLxHyvLbeS8B7cK2mqydAuYFuJ0le2PPW23FmYO88OXlHHYsisjf7UrcVRBFLEnaz95QamK1ZrbTnUmbDbOvjZu44HAQhmMpnH1IrtxKJPfutWe/UIC4y96XVbWPEv3IPJ9yJo27fR4o0CO7tC3YfztcVSNciNGCI998A+Jut0MECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 93.48 ns | 98.94 ns | 1.06 | 0.09 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.ToString(value%3a%20-9223372036854775808).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L26-#L28\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GHJxIjbZzWabhCBLlFIBohGoicqxMruziZHXjuzZNhHlvzPOxwG4jOXxzJs379kgAWEgkPBOrA6BsBmt+R5G39DXj58tTYvR2q3Ia7vpPynT4gKGb/J8Mpnl2WQ6vypms6t5Nh+It92OYTRVE3qGqxQh6Qb7eZYXw/F4OC7W2XwxGS/yYpSNp/mkmL/OskWWDc6dHneOG0XlyCKlvrWx/4L7wytbbuO7xzqkW1RVSBul7aWgdLbWmzj5YFWjy/4vceOanTaKtLNLV6FYgCCNHiuRgLi7e1jGTK1MwJhYOuuuv67/y7EI6HceOf71dt/aL9pWMcfjvHtsuFj8jut8RPqkAzmvS2U+KFLfNW0jG+V1cDb0o+YyhuQkmDzG5KiBjCE5LyxPR3JeT56OQbfzAjvvfmJJsEKvMSTwvtWmWrNkK1LNLoGH6JaMbt441hL9PYbW0PUTerXBbidNX+B5y3KcEeAVgxMrGqDXI3e7L01bYa8HaQq3e4Y0CK6GWhvG4u8ArmW7IRybIyGPtmLvo2vlVnmCZ94a+qcCeaG5L51pGyv/pXs45YM88uY60mRQCpYvyn04X5eoQuuxQUti8Adu3gfdvwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 171.73 ns | 238.10 ns | 1.39 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.TryFormat(value%3a%209223372036854775807).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L40-#L42\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/sL7QRhXrYTl2XBBomqYPNEaL2EiPASutbBYUaSxXiYWm/17Skg9tL0twuDucndFAjMARE+wt37SOoJ5u/d1NvwFWj58NXebTLbYfLNaSxk9SN7BiV1k2my2yZHa5nOeLxXyZLCb8zXCgPZusCNDTlZKAVA3jLMnyizS9SPNtslzN0lWWT9P0Kk+T+eskWSXJpJ9EOFg/yEtLBijGxoT5M+8PlKbYh3eEysV7kKWLa6nMuaGwplK78HNrZK2K8S9+Y+uD0pKUNWtbAl8xTgoQSh4xfnf3sA5IJbWDAKytsddft/9h3gTAA4Kvf73dN+aLMmXA/HdoH2vfzH+HdT4CfVKOLKpC6veS5HdF+6BGonLWuHHwXIQSdYaJU41OHohQon5h0R1Rv57ojslw8MIOaH9CQWwDqMBF7F2jdLn1lm1I1oeIPYSwREjzxnovAe/BNZqunwDlDoaDOH5hz3tvR8/AXnly8o46NhqRvT0WuilhNGJxzG6PnlIDsxWrlPZcyuyYbXzczJ2GgyAEU/rsQ2rFXiKxZ781G3cN4izzWFjd1Eb8K7ftcCdOun0fKdIguLcv2N321zVI1yDUYIhP/gCt/m2qvwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 141.06 ns | 214.78 ns | 1.52 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.TryFormat(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L40-#L42\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bH2hjSqWLKuF4YJA0zR9IDFaxEZ6DFhpZbGgSGO5Siw0+feSfhzaXpbgcHc4O2OQgdEzSHgv1r1nbKebcPfT70j1w1fLb4vphvpPjlrF40dlOlzCLJ8Xbybi3XBgwryqGSkQVIqRdYvjPMuLi9nsYlZsssVyPlvmxTTPF4v5fPE6y5ZZNjlNEu5cGBSVY4ucUmfj/Jn3JylbNvGdsPZpg6ryaau0PTeUztZ6G3/urWp1Of4trly700axdnblKhRLEKyRsBIJiNvb+1VEamU8RmDlrLv8tvkPC2sj7QhD/evtrrM32lYRC9+Re2hDs3iJ63xG/qI9O9KlMh8Vqx+am6hGkfbO+nF0WcaSHA2Th5ocPJCxJKeF5fFITuvJ4zEZDp5hR+4XlgxrJI0+gQ+dNtUmWLZm1e4SuI/xyJjflQteIt2h7wxfPiKpLQ4HafoMT02w48QArwI5B0c9jEbsrvel6SocjSBN4XofKA2Cq6HWJnBpuwXXhbjBH4ajIEJbhexjamWjiOEpbA3jY4M8y9yXznStlf/K7Y+4lwfdoY81G5Qi2Bft7k/XFSrfEbZoWUz+AIq3rsuxAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 42.12 ns | 67.03 ns | 1.59 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryParse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int64.TryParse(value%3a%20%229223372036854775807%22).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int64.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bHWhjSqWLCuW44JA0zRoi8ZoEBvpMWCllc2CIgVylVho+u8l/Ti0vSzB4e5wdkYhAaEj4PCerXtH2Ew2/u4m92jrpy+a5vlkY/t7YR2OnoXqcAnRVZbNZkWWzuaLy7woLhdpEY3Zu+FAeTpRE1rPVwlCkg2OsjTLL6bTi2m+SRfL2XSZ5ZNZPk+v5sXbNF2m6fg0abE1fpBVhjRSYjsd5s+8P6zQ5S68W6xdskNRuaQRUp8bSqNruQ0/91o0shz9YjemaaUSJI1emQrZEhhJtFixGNjd3eMqILVQDgOwMtpcf9v8h3kX0LYWff3r7aHTX6WuAua/s+ap8c3sd1jnE9Jn6chYWQr1UZD4LmkX1AgrndFuFEznocRHw/ihxgcPeCjxaWF+POLTevx4jIeDV2it+YklwRqtRBfDh06qauMtW5No2hgeQ1w8xHljvJdoH9B1iq6f0YotDgdJ8govO2/HiQHeeHLyjjqIIjK3+1J1FUYRJAnc7j2lQjA11FJ5Lqm3YDofN7jDcBBkUVc++5BauROW4MVvDaNjAz/L3JdGdY3m/8rtj7jjB92+jyQp5MzbF+zuT9cVCtdZbFATG/8BY+LKHMACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 92.39 ns | 99.26 ns | 1.07 | 0.12 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_006.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_007.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64_008.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int64.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int64*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int64*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int64*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int64*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Int64.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.ToString(value: 9223372036854775807)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.TryFormat(value: -9223372036854775808)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.TryParse(value: \"-9223372036854775808\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.ToString(value: -9223372036854775808)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.TryFormat(value: 9223372036854775807)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.TryFormat(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int64.TryParse(value: \"9223372036854775807\")\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[DeserializeFromUtf8Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(ArrayList).DeserializeFromUtf8Bytes(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L70-#L72\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTY/TMBC9V+p/ML24FdkkLbtQAkZ0P1g+WiG1ZTkik0waI8eO7MluA8t/Z9ymB+AylmfGb957Yw3IEDwywd7yTecR6ngLe4w/emviDTgltfopUdFtS30+XoMsQvH1wjnZLZXHN/E1+L4T3jlbf8FyftkR7HhlC8jYxrYuh1swE/5qONA0UpYIjmYWEgFVDeNZOjs/m07PpufbdJ49m2azi/jl7Hn6Yn7xNE2zNJ30Lx00lh7ywqIBTFxrwvsT7ncnTV6FuoPSJxVx9UktlTk15NaUahcmd0bWKh//4le2bpQ+SAx0ecY4KnBQ8Ijx5fJuFTKl1B5CYmWNXXze/pf7YEhR44DiX7V1az4pU4QcjXP2W03N/HeQcwv4nuyzTuVSX0uUXxVWgY10igz247AYEUJ0NEwcYnTwQIQQ9YLF8Yh6eeJ4TIaDR9Y4+wNyZGGV4CN22SpdbMmyDcq6idid1C2IsNorS16CW4NvNS7uwckdDAdJ8sgeKrKjR2BPCBzJUc9GI7Q3+1y3BYxGLEnYzZ4gNTBbslJpwlJmx2xL62bhf4APhByYgnYftpZX0iF7INVsfGwQJ5r73Oq2NuJfut0x78WBN/WhQg2Ck33B7q6/rkD61kENBvnkD7EYipnkAgAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 69.82 μs | 73.88 μs | 1.06 | 0.14 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28ArrayList%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28ArrayList%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ArrayList\u0026gt;.DeserializeFromUtf8Bytes(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Int16\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int16.ToString(value%3a%20-32768).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int16.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/4HJRgjmxk6YfySBgXVd0wxpsaIzuWGg2nWiQJUOi2wTr/vuoxDlsu1DQE/nI9yiDBISBQMJ7sd4HwnqS8z1MvqGvnj5bml5Mcrcmr+1m+KxMi0sYn80uL65G4l2/Z7heVYSeCUpFSLrG4SybzcfT6Xg6z7Or5dl0ObuczM/PF9li8TbLllk26io9No4LRenIIqW+tbH+xPvDK1ts47vHKqRbVGVIa6XtKaFwttKb2HlvVa2L4S9x4+pGG0Xa2ZUrUSxBkEaPpUhA3N8/riJSKRMwAitn3fXX/D+MZaNvPHL86+2htV+0LSPG7bx7qjlZ/I5y7pA+6UDO60KZj4rUd03bOI3yOjgbhtFlGUNyNEweYnLwQMaQdILl8Ug6efJ4jPq9V2i8+4kFwRq9xpDAh1abMmfL1qTqJoHHuB8Z93fj2Ev0DxhaQ9fP6NUG+700fYWXLdvRMcAbJid2NMBgQO52V5i2xMEA0hRud0xpEFwFlTbMxR8AXMvrhnAojgN5tCXvPm6t2CpP8MKqYXhMkKcxd4UzbW3lv+Puj3iQh7k5jzQZlILti3bvu+sKVWg91mhJjP4AwDPxgLECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 45.29 ns | 71.47 ns | 1.58 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int16.ToString(value%3a%2032767).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int16.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR32/aMBB+R+J/uPFi0FIS0gIrk6V1XbVNK9pUou6x8pILeHJsZF9a0Nr/vWcID9tezvL5vvP3wyABYSCQ8EGs9oGwGRd8D+Mf6OuHr5Yms3HhVuS1XQ8flWlxAef5fDYfiff9nmG4qgk94ytFSLrBYZ7lF2eTydnkosjeLc4ni3w+nk5nl5fT/G2WLbJs1CE9bh0DReXIIqW+tRF/2vvLK1tu4rvHOqQbVFVIG6XtaaB0ttbr+PPeqkaXwz/i2jVbbRRpZ5euQrEAQRo9ViIBcXt7v4ydWpmAsbF01l19L/7rsWr0W49c/3q7a+03bavY4++8e2h4WLxEOZ+RvuhAzutSmU+K1E9Nm8hGeR2cDcNosowlORomDzU5eCBjSTrB8ngknTx5PEb93jNsvfuNJcEKvcaQwMdWm6pgy1akmm0C9zEeGeO7duwl+jsMraGrR/Rqjf1emj7D04bt6DbAG15O7GiAwYDcza40bYWDAaQp3Ox4pUFwNdTa8C7OH1zLcUM4gCMhj7bi7GNq5UZ5gidWDcPjgDzR3JXOtI2V/9LdH/tBHnjzHGkyKAXbF+3ed9clqtB6bNCSGL0CHKwjC7ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 35.10 ns | 60.01 ns | 1.71 | 0.02 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int16_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int16_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int16.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int16*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int16*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int16*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int16*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Int16.ToString(value: -32768)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int16.ToString(value: 32767)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SerializeToStream - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(MyEventsListerViewModel).SerializeToStream(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L89-#L95\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSXY/TMBB8r9T/sPTFrcg1ae7QQcGI46jgoBVSG/UekUk2rZFjV/bm2nLHf2fdDyTgZa3s7uzuzMQgAWEgkPBOLPaBsBkWuKPh5+DscIFeK6N/KtL8VXBfGN57TRirb2b7yQNaClPNML/UuJ25Cs3bPzAs3II8qqYfC2OYY22wjLMG4nW3Y3i3qhnKyytFSLrBfp7lVxej0cXoqsheji9H4/zV8EWWX15f58+zbJxlgxPS48YxUFSOLFLqWxvx57nfvbLlOtY91iFdo6pC2ihtzw2ls7Vexc17qxpd9h/FrWs22hy4xnvFGARp9FiJBMR0upzFTK1MwJiYOetuvhb/5e4sM9p45PhXbd7aL9pWMcfrvPvWcLP4Fel8RPrEGjqvS2U+KFL3mtbxGuU1Cx360SEZQ3IUTB5ictBAxpCcCMvjk5zoyeMz6HaeYOPdDxYfojkYEnjfalMVLNmCVLNJYKlMizJ6fOtYS/RzDK2hmwf0aoXdTpo+wXbNcpwmwDMeTqxogF6P3GRXmrbCXg/SFCY7HmkQXA21NjxL2xW4lu2GcADHgzzair2PrpVr5Qm2zBr6xwZ5PnNXOtM2Vv577v6YD/JwN/eRJoNSsHxR7v3pc4YqtB4b/k/F4Dd5COnG7QIAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 871.72 μs | 967.18 μs | 1.11 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(MyEventsListerViewModel).SerializeToWriter(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS247aMBB9R+IfprwY1CwJLL3Ruup2i3oDVYKIfazcZAKuHBvZkwXa7b93HKBS25exMnPmzJwzMUhAGAgkvBGrYyCshzkeaPgpODtcodfK6B+KNH/ljAvDO68JY/XV4ji7R0thrrnNrzXuF65E8/pPG+auRft+LExhiZXBInINxMtux/BsVXGZh5eKkHSN/XE2nlyNRlejSZ49n16PpuMXw6fZk8mz68njLJtm2eDc6XHnuFGUjixS6hsb+y+837yyxTbWPVYh3aIqQ1orbS+AwtlKb+Lko1W1Lvo/xa2rd9q0WuO+YgqCNHosRQJiPl8vYqZSJmBMLJx1N1/y/3IfLSvaeeT4V23Z2M/aljHH47z7WjNY/Ipy3iN9YA+d14Uy7xSpO03buI3ymo0O/XghGUNyMky2MWk9kDEkZ8Hy9CRnefL0DLqdB9h5953Nh3gcDAm8bbQpc7ZsRareJbBWpkEZb3zr2Ev0SwyNoZt79GqD3U6aPsB+y3acGeARkxM7GqDXIzc7FKYpsdeDNIXZgSkNgqug0oa5tN2Aa/jcENrmuJBHW/Lt49WKrfIEe1YN/RNAXtY8FM40tZX/rns85YNs92YcaTIoBdsX7T6ePxeoQuOx5v9UDH4D6tgMbe0CAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 864.89 μs | 928.02 μs | 1.07 | 0.02 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(MyEventsListerViewModel).SerializeToWriter(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSW4/SQBR+J+E/HHkZiF1acLMiOsZ1l6wXiMnSsI9mbE9hzHSGzJwuoOt/90wBE/XlTHqu36UGCQgDgYR3YnkIhPUwxz0NPwVnh0v0Whn9Q5Hmr5z7wvDBa8JYfbM4zB7RUphrHvMrjbuFK9G8/TOGuWu7fT8WprB0jS/wDu1AvO52DJ9WFVf5dqkISdfYH2fjy4vR6GJ0mWeT6YvRdPxqePVyMrmaZM+zbJplg9Okx63jQVE6skipb2ycP+/95pUtNrHusQrpBlUZ0lppe24onK30Ol4+WFXrov9T3Lh6q01LNcIVUxCk0WMpEhDz+WoRM5UyAWNi4ay7/pL/l/tomdHWI8e/aveN/axtGXN8zruvNTeLX5HOHdIHltB5XShzq0g9aNpENMpr1jn0o0EyhuQomGxj0mogY0hOhOXxSU705PEZdDtPsPXuOxYE0RsMCbxvtClzlmxJqt4msFKmQRktvnGsJfp7DI2h60f0ao3dTpo+wW7Dcpw2wDNeTqxogF6P3GxfmKbEXg/SFGZ7XmkQXAWVNrxL2zW4hu2G0A5HQB5tyd5H14qN8gQ7Zg39Y4M8w9wXzjS1lf/CPRzzQba4uY80GZSC5YtyH06fC1Sh8VjzbyoGvwGh0pul7AIAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 801.88 μs | 874.07 μs | 1.09 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SerializeToUtf8Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(MyEventsListerViewModel).SerializeToUtf8Bytes(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L78-#L79\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS247TMBB9X6n/MPTFrcg2aVm0pWDE7lJxa4XUhu4jMsmkNXLsyp5sG1j+nXEvSMDLWJmZM3PmnBgkIAwEEt6IZRsI60GOexp8DM4Olui1MvqHIs1fOfeFwb3XhLH6at5OH9BSmGmG+ZXG3dyVaF7/gWHuvlA1vm15Qy/WJrDAymARx/XFy86F4fWqYjTvLxUh6Rp7o2x0dTkcXg6v8mw8eTacjF4MrsfZ8Hr8/GmWTbKsf0J63DoGitKRRUp9YyP+PPebV7bYxLrHKqQbVGVIa6XtuaFwttLruLm1qtZF76e4c/VWm8O5ka+YgCCNHkuRgJjNVvOYqZQJGBNzZ93N5/y/3AfLF209cvyrtmjsJ23LmON13n2tuVn8iue8Q3rPMjqvC2XeKlL3mjaRjfKatQ69aJKMITkKJg8xOWggY0hOB8vjk5zOk8en37l4hK1331l8iP5gSOC20abMWbIlqXqbwEqZBmW0+c6xlugXGBpDNw/o1Ro7F2n6CLsNy3GaAE94OLGiAbpdctN9YZoSu11IU5jueaRBcBVU2vAsbdfgGrYbwgEcCXm0JXsfXSs2yhPs+GroHRvkmea+cKaprfyXbnvMB3ngzX2kyaAULF+Uuz19zlGFxmPNv6ro/wbJQVP28AIAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 914.34 μs | 983.36 μs | 1.08 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28MyEventsListerViewModel%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28MyEventsListerViewModel%29_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28MyEventsListerViewModel%29_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28MyEventsListerViewModel%29_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28MyEventsListerViewModel%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;.SerializeToStream(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;.SerializeToWriter(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;.SerializeToWriter(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;MyEventsListerViewModel\u0026gt;.SerializeToUtf8Bytes(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuG",
                                           "createdAt":  "2025-01-14T08:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Numerics.Tests.Perf_BigInteger\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BigInteger.Parse(numberString%3a%201234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime.Numerics/Perf.BigInteger.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACu3c3W7TMBQH8PtJfQfTm7Qia5KujFEUiW1MgFhhWqtxOXnJSWvk2JV9wlYx3h27HxfAA3DzlyKn8Vfs4/R3eTSxYPIsSvEumW88Uzv60rXkVOVHi9DgRzfkmvsLtfxkmJbkRjfSeRqYrn0gN2enzHIqivHJ5NXp67M3OX4hBvgO8F+AB5AQEkJCSAgJISEkhISQEBJCQkgICSEhJISEkBASQkJICAkhISSEhJAQEkJCSAgJISEkhISQEBJCQkgICSEhJISEkBASQkJICAkhISSEhJAQEkJCSAgJISEkhISQEBJCQkgICSEhJISEkBASQkJICAkhISSEhP9TwmHytnekiYVsmJwoRS2ZWLU0GOfjyXFRHBeTRX42PSnCNTotivHkpHiZ59M8H+5HOlrbMDCpLRvizHUmjj/M++CkqVax3VHjsxXJ2metVObQobKmUcv45o2RraoGP5NL266VlqysmdmakqlIWJGjOklFcn19N4s1jdSeYsXMGnv+dfFPXUyL59aOQvlH221nPitTx7rwOmfv29A5+RW384H4o/Jsnaqkfi9ZflO8iquRTnlr/CBm5Ctjke4CVm7LdBuDMhbpfsPl7pbut1fubsPe0bNYO/udKhbzkMuPfCouOqXrRQjZnGW7TsWd1B2VMcXfpQ2xJHdLvtN8/oOcXFLvKMuexeMqhGM/g3gRJucQUS/6fbZXT5Xuaur3RZaJq6cwpSZhG9EoHeYKSQGF7cJxC78dHBfkyNTh7OOpVSvpWDyGXYvBrkN5WOZTZXXXmvLv5W529b7crjv0Y8WayiSEL4Z7s3+ckfSdo5YMJ8PfohAyod1QAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.61 ms | 3.00 ms | 1.15 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToStringD - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BigInteger.ToStringD(numberString%3a%20123).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime.Numerics/Perf.BigInteger.cs#L44-#L47\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR224TMRB9j5R/MHlxIrZ7SSMBQZboTYBoADWr8li5u7OJkS+RPW4TUf6dcXbzAEjWWD4zczxzjgZkCAGZYB/4+hAQTP41GvCqCXlNiZB/B989XKrNZ4uwAZ/Xbo1e2c311EbzCL5/LVk1P5/x9+ORJkrZIXjibCUCKgPTeTlfnFXVWbWoy7fL84pO/qZavKuq8nVZLstyNnR62Dlq5K1DC1j4aFP/iffRS9tsU95DF4otyDYURip7Kmic7dQm/Xyw0qhm+otfObNTWqJyduVa4EvGUYGHlmeM397erxLSSR0gAStn3cW3+j8sbe93Hij+lbuL9ouybcLoO+8eDBXz32mdj4CfVEBHWkp9LVH+ULhN00ivgrNhmoQXKWS9YOIYs6MGIoVsWFj0VzasJ/prNh69sJ13P6FBtibLIGTsMird1iTZGqXZZexe6ggiOXnlSEvwdxCixosn8HID41FRvLDnLckxMLBXRI6kaGCTCbqbfaNjC5MJKwp2sydKDcx1rFOauMh35iLZzcKxOQ3kwbbkfXKt2UqP7Jm2ZtO+QJzG3DdOR2PFv+MeejyI49xUhwo1CE7yJbkPw3MFMkQPBizy2R++3IjKxAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 77.14 ns | 92.25 ns | 1.20 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[Add - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BigInteger.Add(arguments%3a%2065536%2c65536%20bits).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime.Numerics/Perf.BigInteger.cs#L56-#L59\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmWS224TMRCG7yPlHYbcOBHb7CZNDwRZIi0VVDSAmqhcVu56dmPktSN7liaifXfGOVwA0mosz+H3zDdrkYAwEkj4IBbbSNgMv7YNBlPG4ZIDcfgdQ/V4ZepbR1hjGM607qtQc5KjOIXzs7PT82xn4clQHIj33Y5lWVURBtbVipBMg/1xMZ6cjEYno8myuJyejvgbXo7fTUYXF2+LYloUg0NlwLXnQqE9OaQ8tC7VH3WfgnLlKsUDVjFfodIxb5Rxx4TSu8rU6eWtU40p+7/FtW/Wxioy3s29RjEFQQYDapGBuLt7mCdPpWzE5Jh752fflv/5EoGwDsj2r9h9674Yp5OPnwv+seFk8ZrG+YT02UTyzFPZj4rUD0Or1I0KJnoX+wm+TCbbA5M7m+0YyGSyw8Byf2SH8eT+GHQ7L7AO/ieWBAteG8YMrlpj9ZKRLUg16wwelG1Rpm1ee2aJ4R5ja2n2C4OqsdvJ8xd4XjGOgwK8YXFiohF6PfI3m9K2Gns9yHO42bCkRfAVVMaylnE1+JbXDXFXnBoK6DTvPm2tXKlA8MxTQ3+fII9tbkpv28bJf9vd7v1R7vrmPDJkUQrGl3BvD9c5qtgGTL+hGPwBpFzb58gCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 10.07 μs | 10.92 μs | 1.08 | 0.06 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Parse - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Numerics.Tests.Perf_BigInteger.Parse(numberString%3a%201234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime.Numerics/Perf.BigInteger.cs#L34-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACu2c327TMBSH7yv1HUxv0omsSdcCa1EktjEBYoVprcbl5CUnrZFjV/bJtorx7tj9cwE8Aej3KXIa28exj9Pv0ppYMHkWhXiXzDeeqRl8aRtyqvSDRWjwg2ty9d25Wn4yTEtyg2vpPPVN29yTm7NTZjkVw5PR+NXrN6eTHL+QA3wH+C/ABzAhTAgTwoQwIUwIE8KEMCFMCBPChDAhTAgTwoQwIUwIE8KEMCFMCBPChDAhTAgTwoQwIUwIE8KEMOG/a0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOB/4Ch52+1oYiFrJicKUUkmVg31T/KT8fFweDwcL/LT6WgYrsFkNMrzyeRlnk9D6D7S0dqGwKSybIgz15oYfxj33klTrmK7o9pnK5KVzxqpzKFDaU2tlvHNGyMbVfZ/JBe2WSstWVkzsxUlU5GwIkdVkork6up2FmtqqT3Fipk19uzr4q+6eCyeWzsK5W9tN635rEwV68LrnL1rQufkZ1zOB+KPyrN1qpT6vWT5TfEqzkY65a3x/XgiXxGLdJewYlum2xwUsUj3Cy52t3S/vGJ3O+p2nsXa2e9UspiHs/zIp+K8VbpahJTNWTbrVNxK3VIRj/i7sCGX5G7It5rPHsjJJXU7WfYsHlchHfsRxIswOIeMetHrsb18KnVbUa8nskxcPoUhNQlbi1rpMFY4FFDYNmy38NvgOCFHpgp7H3etXEnH4jGsWvR3HYrDNJ9Kq9vGFH9Od7Or98V23qEfK9ZUJCF9Md2b/eOMpG8dNWQ4OfoFGGn9yd1QAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.76 ms | 2.01 ms | 1.14 | 0.00 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BigInteger_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BigInteger_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BigInteger_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BigInteger_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Numerics.Tests.Perf_BigInteger.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_BigInteger*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Numerics.Tests.Perf_BigInteger*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Numerics.Tests.Perf_BigInteger*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Numerics.Tests.Perf_BigInteger*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Numerics.Tests.Perf_BigInteger.Parse(numberStringr\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_BigInteger.ToStringD(numberString: 123)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_BigInteger.Add(arguments: 65536,65536 bits)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Numerics.Tests.Perf_BigInteger.Parse(numberStringr\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuN",
                                           "createdAt":  "2025-01-14T08:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Tests.Perf_StringBuilder\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Insert_Primitives - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Tests.Perf_StringBuilder.Insert_Primitives.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text/Perf.StringBuilder.cs#L238-#L261\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/GHJxIrbZTVOiEmSJUqpS0YiqicoxMruziZHXjsazbSLKf2ecjwNweZbHM8/z3oxDBsbIoOGjmu8iYzNc4JYFIsfhA1K9nDNZv/rUWlchDe98ROLlA9nGsn3GqD50O05oTM1IwlMZRrYN9s+L84uz0ehsdLEoLqfj0XQ8Hr6bTN5PLsdvi2JaFINjJeEmSKGqAnvknFqf6k+8P8j4cp3eCeuYr9FUMW+M9aeEMvjartLPO28aW/Z/qevQbKwzbIOfhQrVFBRbJKxUBur+/mmWIrVxEVNgFny4+rb4L3bnRdGGUPCvt8fWf7W+SjH5jsKykWT1O8m5Rf5iIweypXGfDZvvltepG0M2Bh/7yWydIDsYpveY7T3QCbKjYH04sqM8fTgG3c4rbCj8xJJhjmQxZrAfzUIsm7NpNhk8GdeiThO8DuIl0iPG1vHVM5JZYbeT56/wshY7jgzwRshZHI3Q63G42ZaurbDXgzyHm61QOoRQQ22dcMkqQGhl3CB7IMWpIUIvqwFpauXaEMOLqIb+IUGf2tyWwbWN1/+2uzvEo973LXls2aFWYl+ye3e8ztDElrBBz2rwB4OEfgK4AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 47.32 μs | 53.44 μs | 1.13 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[Append_Primitives - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Tests.Perf_StringBuilder.Append_Primitives.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text/Perf.StringBuilder.cs#L142-#L161\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/YPriVmRNsg6oiixRxjQQq5jWajxWJrk0Ro4dnS9bK8Z/59y0D8DLWf58991939kCCYJAQokPcn0IBM10A3viEChM7wGr7ZrQuN3HztgScLpsW3Dl9h5NY8g8QZDvhwPLNLoiQOYpNQGZBsaX2eXVRZ5f5FebbL6Y5YvZbPoufzOfvZ2/zrJFlk1OlQit50JZenJAKXYu1p95f6B2RR3fEaqQ1qDLkDbauHNC4V1ldrHzwenGFONf8to3rbGajHcrX4JcCEkGEEqZCHl397iKSKVtgAisvPPLb5v/sC+OFbUIHP96e+jcV+PKiHE79NuGk+XvKOcW6LMJ5NEU2n7SpL8bquM0Gk3wLoyj2SqGpDdMHWNy9EDFkJwEq/5ITvJUf0yGgxfRov8JBYk1oIGQiONqNmzZmnTTJuJR2w5U3OC1Zy8BHyB0lpZPgHoHw0Gavojnmu04MYhXTE7saBCjEfmbfWG7EkYjkabiZs+UFoSvRGUsc/FXEL7jdYtwLI4DIf8I3n3cWlFrJPHMqsW4T1DnMfeFt13j1L/jHno8qOPcnEeGLCjJ9kW7D6frCnToEBpwJCd/ACxkQiS4AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.81 μs | 3.32 μs | 1.18 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Tests.Perf_StringBuilder_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Tests.Perf_StringBuilder_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Tests.Perf_StringBuilder.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Tests.Perf_StringBuilder*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Tests.Perf_StringBuilder*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Tests.Perf_StringBuilder*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Tests.Perf_StringBuilder*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Tests.Perf_StringBuilder.Insert_Primitives\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Tests.Perf_StringBuilder.Append_Primitives\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Loops.StrengthReduction\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SumLongsArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Loops.StrengthReduction.SumLongsArray.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Loops/StrengthReduction.cs#L154-#L158\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwY7TMBC9V+o/mF7cimyT7nal3SJLlGUFiFZIbbUckYkniZFjR/aYbcXy74yb9ABcxvJ43ps3b2wAGUJAJthbvnGuC/M9erA1NjtQsUTt7Hwf242zdVh7L0/8zXhkCCUrBE8wJRFQtzC9Lq6XV4vF1WJ5KO5WN4vVze38dnlf3N8Vr4tiVRSzAemhcwTkyqEFzH20CX/h/e6lLZv07qEKeQNShbyV2l4KSmcrXafOJytbXU5/8QfXdtrIJHbrFPAV46jBg+IZ45vN0zZlKmkCpMTWWbf+cvgv98nSRJ0Hin+97aL9rK1KOWrn3beWivnvNM4HwI86oPO6lOa9RPlVY5PUSK+Ds2GavBUpZL1h4hyzswcihWwYWPRHNown+mM2Hr2wzrsfUCLbg9cQMvYuaqMOZNkeZdtl7EmaCOJATR4ceQl+ByEaXP8EL2sYj/L8hT03ZMfAwF4ROZKjgU0m6B6PpYkKJhOW5+zxSJQGmKtYpQ1xaVszF2ndLJzBSRD9D0W7T1srG+mRPdPUbNoXiIvMY+lMbK34V+6pzwdx1k11qNGA4GRfsvs0XLcgQ/TQgkU++wP0XP55pwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.95 μs | 13.39 μs | 1.50 | 0.10 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SumIntsArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Loops.StrengthReduction.SumIntsArray.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Loops/StrengthReduction.cs#L99-#L103\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/mFyciG120yaAgiwRSgWIREhJVI7IrGezRl57ZY/bRLT/3nF2cwAuY3k8782bNzaADCEgE+wDXzvXhukOPdgD1ltQsUTt7HQXm68Ww8p7eeLvhwNDIFkheEIpiYC6gfF1cT2/ms2uZvN98W55M1veLKZvFm/ns/nidVEsi2LSIz20joBcObSAuY824S+8v7y0ZZ3ePVQhr0GqkDdS20tB6WylD6nzycpGl+M//NY1rTYyad04BXzJOGrwoHjG+Hp9v0mZSpoAKbFx1q2+7//L0YjgWw8U/3rbRvtNW5Vy1M67nw0V8+c0zmfALzqg87qU5pNE+UNjndRIr4OzYZysFSlknWHiHLOzByKFrB9YdEfWjye6YzIcPLHWu99QItuB1xAy9jFqo/Zk2Q5l02bsXpoIYk9Nbh15CX4LIRpcPYCXBxgO8vyJPdZkR8/AXhE5kqOBjUbo7o6liQpGI5bn7O5IlAaYq1ilDXFpe2Au0rpZOIOTIPoeinaftlbW0iN7pKnZuCsQF5nH0pnYWPGv3FOXD+Ksm+pQowHByb5k96m/bkCG6KEBi3zyAkTcRs2mAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.93 μs | 15.39 μs | 1.72 | 0.22 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SumS8Span - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Loops.StrengthReduction.SumS8Span.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Loops/StrengthReduction.cs#L271-#L275\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/YPriVmRNuq1QFVlijAkQrZCaajwiE18aI8eO7PPWivHfOTcZEvByls/3fffddzaADCEgE+wt3zjXhXmJHuwBmx2oWKF2dl7GtlyVnbT8zXhkCCFrBE8QJRFQtzC9LC6vLxaLi8X1vlitrxbrq+X89XL5qlitXhbFuihmA9JD5wjIlUMLmPtoE/6Z97uXtmrSu4c65A1IFfJW6j+NK2drfUidT1a2upr+5Leu7bSRSejWKeBrxlGDB8Uzxjeb+23K1NIESImts+7my/6/3CdLE3UeKP71tov2s7Yq5aidd99aKua/0jgfAD/qgM7rSpr3EuVXjU1SI70OzoZp8lWkkPWGiXPMzh6IFLJhYNEf2TCe6I/ZePTEOu9+QIWsBK8hZOxd1EbtybISZdtl7F6aCGJPTW4deQl+ByEavHkALw8wHuX5E3tsyI6Bgb0gciRHA5tM0N0dKxMVTCYsz9ndkSgNMFezWhvi0vbAXKR1s3AGJ0H0NxTtPm2taqRH9khTs2lfIJ5lHitnYmvFv3JPfT6Is26qQ40GBCf7kt2n4boFGaKHFizy2W/yRttoowIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.29 μs | 17.79 μs | 1.58 | 0.06 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SumShortsArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Loops.StrengthReduction.SumShortsArray.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Loops/StrengthReduction.cs#L42-#L46\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/mFyciG1206YQBVkilApQEyElUTkis57NGnntlT2miSj/3nF2cwAuY3k8782bNzaADCEgE+w9XzvXhukOPdgD1ltQsUTt7HQXm13tPIaV9/LE3w0HhmCyQvCEUxIBdQPj6+J6fjWbXc3m+2KxvJktb26ni9vF4u2b+euiWBbFpEd6aB0BuXJoAXMfbcJfeH94acs6vXuoQl6DVCFvpLaXgtLZSh9S55OVjS7Hv/mda1ptZFK7cQr4knHU4EHxjPH1+nGTMpU0AVJi46xbfd3/l/tiaaLWA8W/3rbRPmirUo7aefe9oWL+J43zCfCzDui8LqX5KFF+01gnNdLr4GwYJ3NFCllnmDjH7OyBSCHrBxbdkfXjie6YDAfPrPXuJ5TIduA1hIx9iNqoPVm2Q9m0GXuUJoLYU5M7R16C30KIBle/wMsDDAd5/syearKjZ2CviBzJ0cBGI3T3x9JEBaMRy3N2fyRKA8xVrNKGuLQ9MBdp3SycwUkQfRBFu09bK2vpkT3R1GzcFYiLzGPpTGys+FfuqcsHcdZNdajRgOBkX7L71F83IEP00IBFPnkBxElPlqgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.93 μs | 15.59 μs | 1.75 | 0.25 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Loops.StrengthReduction_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Loops.StrengthReduction_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Loops.StrengthReduction_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Loops.StrengthReduction_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Loops.StrengthReduction.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Loops.StrengthReduction*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Loops.StrengthReduction*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Loops.StrengthReduction*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Loops.StrengthReduction*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Loops.StrengthReduction.SumLongsArray\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### Loops.StrengthReduction.SumIntsArray\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### Loops.StrengthReduction.SumS8Span\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### Loops.StrengthReduction.SumShortsArray\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in PerfLabTests.CastingPerf\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[CheckArrayIsInterfaceYes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.CheckArrayIsInterfaceYes.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L357-#L364\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/mFyciG12k0YEgiwRQgUViYraqIgTmu7OZg1ee2XP0kSUf+94kxyAy1h+nnnz5o0NkiAMJJR4J7+gL9fwsOV7GK8gkLa7iI1XFeY/l97D4TpcW2IIcvyGQb7t9wwzQMkYUxRASLrG4TSbzi4mk4vJbJu9XlxOFpfz8ezNfP5qNn2ZZYssG50qPTaOC2XhyCKlvrWx/sz74MHmVXz3WIa0QihCWoO254Tc2VLvYueDhVrnw99y5epGGyDt7MYVKBdCkkaPhUyEXK/vNxEpwQSMwMZZt7zZ/od1UzYeOf71dtvaz9oWEeN23n2vOVn+ieN8RPqkAzmvczAfgOCrpiqqAa+Ds2EYfVYxJEfDVBeTzgMVQ3IaWB2P5DSeOh6jfu9JNN79wJzEHXqNIRHvW22KLVt2R1A3ibgH06KKG1w59hL9LYbW0PIXethhv5emT+KxYjtODOIFkxM7GsRgQO5qn5u2wMFApKm42jOlQeFKUWrDXPwdhGt53SJ0xVGQR1vw7uPW8go8iUeeWgyPCeosc58709ZW/Sv3cMSD6nRzHmkyqCTbF+0+nK4bhNB6rNGSHD0DUjJVn7MCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 223.07 μs | 267.32 μs | 1.20 | 0.11 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[CheckArrayIsInterfaceNo - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.CastingPerf.CheckArrayIsInterfaceNo.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/CastingPerf.cs#L369-#L376\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUY8SMRB+J+E/VF4KcY9d4AIG00TEi14ENXfkfDRzu7NstduSdtaDeP53p+zyoL5M068z33zzTQ2SIAwklHgjv6AvN/C443sYryGQtvuIjdcV5j9W3sPpNtxaYghy/OTk637PMAGUDDFDAYSkaxxOs+n11WRyNbneZa+Ws8lythjPp7P5YjF/mWXLLBt1lR4Pjgtl4cgipb6xsf7C++jB5lV891iGtEIoQlqDtpeE3NlS72Pnk4Va58Nfcu3qgzZA2tmtK1AuhSSNHguZCLnZPGwjUoIJGIGts271efcfdh7y4JHjX293jf2obRExbufdt5qT5e84znukDzqQ8zoH8w4IvmqqohrwOjgbhtFmFUPSGqbOMTl7oGJIuoFVeyTdeKo9Rv3eszh49x1zEvfoNYZEvG20KXZs2T1BfUjEA5gGVVzg2rGX6O8wNIZWP9HDHvu9NH0WTxXb0TGIF0xO7GgQgwG5m2NumgIHA5Gm4ubIlAaFK0WpDXPxbxCu4XWLcC6Ogjzagncft5ZX4Ek88dRi2Caoi8xj7kxTW/Wv3FOLB3XWzXmkyaCSbF+0+9Rdtwih8VijJTn6A0trd/WyAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 200.11 μs | 245.37 μs | 1.23 | 0.07 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.CastingPerf.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.CastingPerf*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027PerfLabTests.CastingPerf*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.CastingPerf*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027PerfLabTests.CastingPerf*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### PerfLabTests.CastingPerf.CheckArrayIsInterfaceYes\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### PerfLabTests.CastingPerf.CheckArrayIsInterfaceNo\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.IterateFor\u0026lt;String\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[List - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateFor(String).List(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateFor.cs#L73-#L81\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSwW4TMRC9R8o/DLk4EdvsJg1QAkaUtEBFIqRuVI7I7M4mRl47smdp0pZ/Z5zdHIDLWB6/eTPvjQ0SEAYCCe9FfgiE9XjhjMGCtLNhfEPoFeFH59/m5LXdvBsvdaBhrh9wDi8m05F40+8ZZlEVQ5mmZDjpGofTbDo7m0zOJrN1djE/n8zPX4+zi9n05avseZbNs2zUVXrcOS4UpSOLlPrGxvoT7w+vbLGN7x6rkG5RlSGtlbYnQOFspTex88GqWhfDR7Fw9U4bFSWsXIliDoI0eixFAmK5vFvFTKVMwJhYOesuv67/y91YVrTzyPGvt9vGftG2jDlu5933msHid5TzCekz2+O8LpS5UqS+adrGaZTXgf0cRq9lDElrmDzG5OiBjCHpBMv2SDp5sj1G/d4T7Lz7yfuBHL3GkMCHRptyzZblpOpdAnfKNCjX3GTh2Ev0txgaQ5e/eJUb7PfS9Anut2xHxwDPmJzY0QCDAbnrfWGaEgcDSFO43jOlQXAVVNowF38BcA2vG8KxOA7k0Za8+7i1Yqs8wT2rhmELkKcx94UzTW3lv+Me2nyQx7kZR5oMSsH2RbsP3XWFKjQea7QkRn8AwjXoFrcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.85 μs | 3.43 μs | 1.21 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateFor%28String%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateFor%28String%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateFor\u0026lt;String\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateFor\u0026lt;String\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateFor\u0026lt;String\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateFor\u0026lt;String\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.IterateFor\u0026lt;String\u0026gt;.List(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[FrozenDictionary - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.ContainsKeyFalse(Int32%2c%20Int32).FrozenDictionary(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Contains/ContainsKeyFalse.cs#L132-#L141\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW7bMAy9B8g/cLkowdzYcVOsyKZhXdquQxsMaILuOGg2nWiQpUCi27hr/32Ukxy2XUibIh8f3zNIQBgIJHwSyzYQ1uO5MwYL0s4G/raktA232F4rE/DDV0uneQJd+ji+9u4Z7aXuupVvh0v9jDM4m+Qj8b7fM4yuKkLP8KUiJF3jMM/y6clkcjKZrrLz2elkNs3GZ9PzLH+Xvc2yWZaNDpMet44HRenIIqW+sXH+iPvTK1ts4rvHKqQbVGVIa+Z6bCicrfQ6bm6tqnUx/C3mrt5qoyLZhStRzECQRo+lSEDc3T0sYqWKd8bCwll38W31X41vR7/1yPGvt/vG3mpbxhqv8+5Hzc3iNZ7zBelGB3JeF8pcKlLfNW0iG+V1YJ2H0QMZQ7IXTHYx6TSQMSSHg+U+JYfz5D6N+r0X2Hr3i32DJXqNIYHPjTbliiVbkqq3CTwo06Bc8ZK5Yy3R32NoDF08oldr7PfS9AWeNizHAQHeMHjnPgwG5K52hWlKHAwgTeFqx5AGwVVQacNY2q7BNWw3hG44EvJoS/Y+ulZslCd44qthuG+QR5q7wpmmtvJfuu2+HmTHm/tIk0EpWL4od3v4XaAKjccaLYnRH+NBz0HPAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 4.03 μs | 4.27 μs | 1.06 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.ContainsKeyFalse%28Int32%2C%20Int32%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.ContainsKeyFalse%28Int32%2C%20Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.ContainsKeyFalse\u0026lt;Int32, Int32\u0026gt;.FrozenDictionary(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuW",
                                           "createdAt":  "2025-01-14T08:32:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[DeserializeFromString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(BinaryData).DeserializeFromString(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L66-#L68\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/4HJRgrm2k+bQZdOwfu2zwYAk6I6DZtOJBlkKJHqN2+6/j4qdw7YLBZHU43uPMkhAGAgkvBPrNhDW6QYPlH4OzqZr9FoZ/ahI823DfSFdoSpj8c2Vtsq3N4rU2/QGQ9+K772r1+S13Y6XrsQFrLAyWESEiXg9HBieqCpCzyNLRUi6xvEsn83PptOz6XyTXyzOp4v5LJ2fv8rz2cXLPF/k+aR/6XHv+KEoHVmkzDc2vj/h/vDKFrtY91iFbMdUQ1YrbU8NhbOV3sbJrVW1LsZP4trVe22OCiNfsQBBGj2WIgFxd3e/jJlKmYAxsXTWXX7d/Jf7ZFnR3iPHv2qrxn7Rtow5Hufd95qbxe8o5wPSRx3IeV0oE238pmkX2Siv2d8wjnuRMSSdYfIYk6MHMoakFyy7I+nlye6YDAfPsPfuJ5sPcZMYErhqtCk3bNmaVL1P4F6ZBmXc7LVjL9GvMDSGLn+hV1scDrLsGR52bEePAC8YnNjRAKMRudtDYZoSRyPIMrg9MKRBcBVU2jAW/wFwDa8b4u/AEAl5tCXvPm6t2ClP8MCqYdw1yBPNQ+FMU1v5L922ywd55M19pMmgFGxftLvtr0tUofFYoyUx+QML5nZG4wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.40 μs | 9.78 μs | 1.16 | 0.10 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[DeserializeFromUtf8Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(BinaryData).DeserializeFromUtf8Bytes(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L70-#L72\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/MLk4EdvdTRpKFTCiactnI6QklCMyu7OJkdeO7FmahfLfmUk2B+AylmfGb957YwsoECIKJV7LVRsR6nQNe0w/RO/SFQSjrfmp0dBtTX0xXYIuufhybpwO7Y1G/Sq9gdi1wpvg689YXc5bwh0ufAkzsYTKQsEgI/mi37M0VFcIgaaWGgFNDcNJPpmejcdn4+k6v5ydj2fTSfrs/OLi+XT8NM9neT7qXgbYeXooS48OMAuN4/cn3G9Bu2LL9QBVzLbENma1Nu7UUHhXmQ1Pbp2uTTH8Ja99vTP2IJL5ypmQaCBAKRMh7+7uF5yptI3AiYV3/urT+r/ce0eKdgEo/lVbNu6jcSXnaFzwX2tqlr9ZzlvAdyaiD6bQlp38YnDLbHQwZHEc8moUh+RomDrE5OCB4pB0gtXxSDp56niM+r1HsQv+O5kveJkQEzFvjC3XZNkKdb1LxL22DShe7rUnLyEsITYWr35A0Bvo97LsUTxsyY4OQTwhcCRHoxgM0N/uC9uUMBiILBO3e4K0IHwlKmMJy7iN8A2tW/AHgciEAriSds9bK7Y6oHgg1WJ4bFAnmvvC26Z26l+67TEf1YE39aFBC0qSfWx3210XoGMToAaHcvQHiT+cvuYCAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 5.60 μs | 7.11 μs | 1.27 | 0.11 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[DeserializeFromReader - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(BinaryData).DeserializeFromReader(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L74-#L80\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/4HJRgrm2kwVFkc3D+rXPBgWSoDsOmk0nGmQpkOg12br/PjJxDusuFEQ+PT4+yiIBYSQo4J1a7iNhk65wR+nn6F26xGC0Nb80Gb6tGBfTBepKim+ujNNhf6NJv01vMHZQfB98IxgMw7mvcAYLrC2WwjBSr/s9yx11TRi4ZaUJyTQ4nOST6dl4fDaervKL2avxbDpJz6fT84t88jLPZ3k+6l4G3Hp+qCpPDikLrZP3J97vQbtyI/WAdcw2LCNmjTbuBCi9q81aOu+dbkw5/K2ufbM19jCh6FUzUGQwYKUSUHd3D3PJ1NpGlMTcO395v/ov98nxRNuAHP+pLVr3xbhKctwu+G8Ng9UfGecD0kcTyQdTais2fjW0ETU6GPY3DmUvhYTkaFhxiMnBg0JC0g1cHI+kG684HqN+7wm2wf9g80E2iTGBq9bYasWWLUk32wQetG2xkM1ee/YSwwJja+nyJwa9xn4vy57gccN2dAzwgsmJHY0wGJC/3ZW2rXAwgCyD2x1TWgRfQ20scxm3Bt/yukF+B0YRFNDx1wDZWrnRgeCRp4bhEVCcZO5Kb9vGFc/l7o/5WBx0M44MWSwU2yd277vrHHVsAzboSI3+ArIkfJTjAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 9.21 μs | 11.98 μs | 1.30 | 0.08 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[DeserializeFromStream - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(BinaryData).DeserializeFromStream(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L82-#L89\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS244TMQx9X6n/YPqSVszOTEtRV4Ug9sZ1K6S2Wh5RmPG0QblUiWe3heXfcdrpA/DiKPaJfXxODBIQRgIJb8VyHwltvsId5Z+id/kSg1ZG/1Sk+bZiXMwXqOpUfH2lnQr7G0XqTX6DsYPiu+DtkgIqO5j7GmewwMZglToMxavemeGJqiEMPLJWhKQtDsbleHI+Gp2PJqvyYvZiNJuM8+l4+vJiOn1elrOyHHYvA249PxS1J4dUhNal96e+34Ny1SbVAzax2DDVWFil3QlQedfodZq8d8rqavBLXHu71eawYeIrZiBIY8BaZCDu7u7nKdMoEzEl5t75yy+r/3IfHW+0Dcjxr9qidZ+1q1OOxwX/zTJY/E7rvEf6oCP5oCtlkoxfNW0SGxU06xsHyReZQnYUTB5idtBAppB1C8vjkXXryeMx7J09wTb4Hyw+JCcxZnDValOvWLIlKbvN4F6ZFmVy9tqzlhgWGFtDlw8Y1Bp7Z0XxBI8blqPrAM+4ObGiEfp98re7yrQ19vtQFHC745YGwTfQaMO9tFuDb9luSL8DYyIU0NXsfXKt2qhA8Mhbw+AIkCeau8qb1jr5L939MR/lgTfjSJNBKVi+JPe+u85RxTagRUdi+AfbwkY84wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 8.10 μs | 9.57 μs | 1.18 | 0.09 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28BinaryData%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28BinaryData%29_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28BinaryData%29_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28BinaryData%29_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28BinaryData%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;.DeserializeFromString(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;.DeserializeFromUtf8Bytes(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;.DeserializeFromReader(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;BinaryData\u0026gt;.DeserializeFromStream(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.IterateForEach\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Dictionary - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEach(Int32).Dictionary(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEach.cs#L143-#L151\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/TMBC9V+p/GHpxK7JN+iVBwYilW2DFVkjbajkik0waI8eu7AnbwvLfGTfpAbiM5Zl5b968MUhAGAgkvBXbUyCsxytnDOaknQ3jW0KvCN87v1Z59frW0mz6Znyjz2XlT8Ot/olLWEymI/Gq3zNMp0rGMF/BONI1DqfZdH41mVxN5rvsxXI2Wc7n48V0MZ+9XDzPsmWWjTqkx4NjoCgcWaTUNzbiL7zfvLJ5Fesey5BWqIqQ1krbS0PubKn3cfLJqlrnw19i5eqDNiqK3bgCxRIEafRYiATE3d3DJmZKZQLGxMZZd/1591+Ot0Z/8Mjxr9p9Yz9pW8Qcj/Pua83N4ndc5wPSRx3IeZ0rc6NIfdFURTXK68DGDqPpMoakNUyeY3L2QMaQdAvL9km69WT7jPq9Jzh4950PBVv0GkMC7xptih1btiVVHxJ4UKZBueMhK8deor/H0Bi6/sE33WO/l6ZP8FixHR0DPGNyYkcDDAbk1sfcNAUOBpCmsD4ypUFwJZTaMJe2e3ANnxvCGRwFebQF3z5eLa+UJ3jkrWHYNsiLzGPuTFNb+a/cU5sP8qyb+0iTQSnYvmj3qftuUIXGY42WxOgPirk7zsACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.55 μs | 3.14 μs | 1.23 | 0.16 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[FrozenSet - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEach(Int32).FrozenSet(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEach.cs#L390-#L398\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTW8TMRC9R8p/GHJxIrbZzQelBIwoIaUVjZCaqByR2Z3NGnntlT1Lk9L+d8b5OACXsTwz7828NwYJCAOBhA9itQuE9XDujMGctLNheEPoFeGV8wuVV+9uLE3G74dX3j2iXSH1V/oRZ/BqNB6It92OYTZVMoTpCoaRrrE/zsbTs9HobDRdZxezyWg2nQ7PJ28uzrPXL7NslmWDI9Jj4xgoCkcWKfWtjfgT7w+vbF7FuscypBWqIqS10vbUkDtb6k2cvLOq1nn/t5i7utFGRSlLV6CYgSCNHguRgLi9vV/GTKlMwJhYOusuv67/y7Fo9I1Hjn/V7lr7Rdsi5nicd99rbhbPUc5npGsdyHmdK/NJkfqmqYrbKK8D+9qPnssYkoNhch+TvQcyhuQoWB6e5ChPHp5Bt/MEjXc/+U6wQq8xJPCx1aZYs2UrUnWTwL0yLco1D5k79hL9HYbW0OUvPukGu500fYKHiu04MsALJid2NECvR26xzU1bYK8HaQqLLVMaBFdCqQ1zabsB1/K5IezBcSGPtuDbx6vllfIED6wa+ocGeVpzmzvT1lb+u+7ukA9yvzf3kSaDUrB90e7d8btEFVqPNVoSgz+RdGQ2vwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.21 μs | 2.42 μs | 1.09 | 0.24 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[Queue - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEach(Int32).Queue(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEach.cs#L156-#L164\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwY7TMBC9V+o/mF7cimyTdoMoBSOWboEVWyG21XJEJpk0Ro4d2WO2heXfGTfpAbiM5Tczb+a90YAMwSMT7A3fHj1CM11ZraFAZY2f3iA4ifDOurUs6lc3Bi/nr6efAwQYb9VPWLJns/mEvxwONDHJisqJqqQWVA2M59k8v5jNLmb5LlssL2fLPJ8+z/N88WLxNMuWWTbpOx20lhp5adEApi6Y2H/m/eakKeqYd1D5tAZZ+rSRypwLCmsqtY+Tj0Y2qhj/4ivbtErLKGNjS+BLxlGBg5InjN/e3m8iUkntIQIba+zVp91/GAkG1zqg+FfuLpiPypQRo3HOfm2omP+Oct4DflAerVOF1NcS5ReFddxGOuXJ03H0W8SQdIaJU0xOHogYkl6w6J6klye6ZzIcPLLW2e90I7YFp8An7G1QutyRZVuUTZuwe6kDiB0NWVnyEtwd+KDx6gedcw/DQZo+soea7OgZ2BMiR3LUs9EI7fpQ6FDCaMTSlK0PRKmB2YpVShOXMntmA52b+VNzXMiBKen28WpFLR2yB1LNxl2BOK95KKwOjRH/rnvscC9Oe1MdKtQgONkX7T723w1IHxw0YJBP/gAADcMBuwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.67 μs | 3.16 μs | 1.18 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28Int32%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28Int32%29_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28Int32%29_003.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEach\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateForEach\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEach\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateForEach\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.IterateForEach\u0026lt;Int32\u0026gt;.Dictionary(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Collections.IterateForEach\u0026lt;Int32\u0026gt;.FrozenSet(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Collections.IterateForEach\u0026lt;Int32\u0026gt;.Queue(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Int128\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L26-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjmPhpQesgSpVQFtRGoicpjZe72EiOfHdl7bSLKf+86uTwAL2t5vTOenTFIQBgIJHwUy30gbKcrvofpd/TN41dLeTGfrtySvLbr8ZMyHZaQF+ezdxPxYTgwjFcNoWeCWhGSbnFcZMXsLM/P8tkqm5fneTl7P53PL7LionibZWWWTXqkx61joKgdWaTUdzbiT7w/vbLVJr57bEK6QVWHtFXangYqZxu9jj/vrWp1Nf4trly71UaRdnbhahQlCNLosRYJiLu7h0XsNMoEjI2Fs+7y2+q/Hq+NfuuR619v95291baOPf7Ou8eWh8WfuM4N0hcdyHldKfNZkfqhaRPVKK+Ds2EcXZaxJEfD5KEmBw9kLEm/sDweSb+ePB6T4eAFtt79wopgiV5jSOBTp029YsuWpNptAg8xHhnzu3LsJfp7DJ2hyyf0ao3DQZq+wPOG7egZ4A2TEzsaYDQid72rTFfjaARpCtc7pjQIroFGG+bi/MF1HDeEAzgK8mhrzj6mVm2UJ3jmrWF8HJAnmbvKma618l+5+2M/yINuniNNBqVg+6Ld+/66QBU6jy1aEpNX4iljp7ECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 55.70 ns | 75.81 ns | 1.36 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.TryFormat(value%3a%20170141183460469231731687303715884105727).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L39-#L41\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY/aMBC9I/EfXC4GNUtiEkigstTtdvuhLmq1oO1x5SYTcOXYyJ7sgrr977VJOLS9jOU3M29m3lOABMEh4eQt3ZwcQjPd+r+bfgNbP37WyGbFdGtPH4xtBI6fhGphRViesIyxIs0WSbZYzlKWp2xR5GmS5mxeFBlL5vksn9A3w4HyI0SNYP2MSiCgbGA8S2bZFWNXLNsmxSplq2wxXebz5ZLlr5NklSSTvtPCwfhGWhnUgLFtdei/8P6wQpf7kLdQu3gPonJxI6S+FJRG13IXJp+0aGQ5/kVvTHOQSqA0em0qoCtCUYKFikaE3t09rANSC+UgAGujzfXX7X+YVwbswYKPf+XuW/1F6ipgfpw1j40vpr/DOR8BP0mHxspSqPcCxXeJ+7CNsNIZ7cbBCB5C1AnGzzE6a8BDiPqDefdE/Xm8eybDwQs5WPMTSiQbsBJcRN61UlVbL9kGRXOIyEMwkAeLb4zXEuw9uFbh9RNYsYPhII5fyPPey9EzkFeeHL2ijoxGaG6PpWorGI1IHJPbo6dUQExNaqk8l9Q7YlpvN3Hn5rCQBV1574Nr5V5YJM/+ajLuCvhlzWNpVNto/u+6pw53/Ly3r0OJCjj18gW5T/13DcK1FhrQSCd/ALiW9NLUAgAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 463.89 ns | 608.39 ns | 1.31 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.ToString(value%3a%20170141183460469231731687303715884105727).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L26-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/0HJRgrmxZLuxl0HAuq7YhjXY0ATdsdBsOtEgS4FEtwnW/vdK+Thsu1DQE/lIvicNSBA8EkE+0OXeI3TTVbj76Q9w7cNXgzyrpiu7RKfMevwodQ9zwkvGC86rvJixYvYuy3mZ81lV5iwv+WVVFZxdllk5oe+HAx06yBbBhRaNREDVwThjWXHB+QUvVqya53xelFNWsYxx9paxOWOTU6WDrQ2FtLFoAFPXm1h/5v3lpKk38d1B69MNyMannVTmnFBb06p17Lw3slP1+A+9tt1WaYnKmoVtgM4JRQUOGpoQent7v4hIK7WHCCyssVffV/9hQRhwWwch/vV215tvyjQRC+2cfehCMn2J63wG/KI8WqdqqT9JlD8VbuI00ilvjR9HH0QMyVEwcYjJQQMRQ3JaWByP5LSeOB6T4eCZbJ39DTWSJTgFPiEfe6WbVZBsibLbJuQ+Giiiw9c2aAnuDnyv8eoRnFzDcJCmz+RpE+Q4MZA3gRyDop6MRmhvdrXuGxiNSJqSm12g1EBsS1qlA1f4IcT2wW7iD8VxIAemCd5H1+qNdEiewtZkfEwQ5zF3tdV9Z8S/4+6PuBeHuUMeKtQgaJAvyr0/XRcgfe+gA4N08gqUnlDo0wIAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 484.48 ns | 617.15 ns | 1.27 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.TryFormat(value%3a%20-170141183460469231731687303715884105728).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L39-#L41\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwY7TMBC9V+o/mF7cirSJm7QJRZZYll1AbAXaRstxZZJJa+TYlT3ZbcXy79htegAuY/nNzJuZ9xQgQXBIOHlHN0eH0M5K/3ezb2Cbx88a2byYlfZ4a2wrcPwkVAcrMmV5wjLGijRbJtnyzTxlecqWRZ4mac4WRZGxZJHPiwl9OxwoP0M0CNYPqQUCyhbG82SeTRmbsqxMilXKVlk+Y0VeFIvl6yRZJcmk77SwN76R1gY1YGw7HfovvD+s0NUu5C00Lt6BqF3cCqkvBZXRjdyGyUctWlmNf9Fr0+6lEiiNXpsa6IpQlGChphGhd3cP64A0QjkIwNpoc/W1/A/z0oDdW/Dxr9x9p79IXQfMj7PmsfXF9Hc45yPgJ+nQWFkJ9UGg+C5xF7YRVjqj3Tg4wUOIzoLxU4xOGvAQov5gfn6i/jx+fibDwQvZW/MTKiQbsBJcRN53UtWll2yDot1H5CE4yIPH18ZrCfYeXKfw6gms2MJwEMcv5Hnn5egZyCtPjl5RR0YjNDeHSnU1jEYkjsnNwVMqIKYhjVSeS+otMZ23m7hTc1jIgq6998G1aicskmd/NRmfC/hlzUNlVNdq/u+6xzPu+GlvX4cSFXDq5QtyH/vvGoTrLLSgkU7+ACVmCsvVAgAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 502.41 ns | 628.93 ns | 1.25 | 0.01 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[TryFormat - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.TryFormat(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L39-#L41\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjm7pJAQ5AlSmmhohGoOZXHytztJUY+O1rvtTlR/nvtfDwAL2t5vDvemTHIwOgZJHwQq84zNuMi3P34O1L9cGM5n8zHBXXXjhrFw0dlWlxAPpnO3ozE+37PBAJVM1JgqBQj6waHk2wyO8vzs3xWZPPFNF/MzsfTLHt7Pn/3OssWWTY6ThJuXRgUlWOLnFJr4/yJ9ycpW27iO2Ht0w2qyqeN0vbUUDpb63X8ubOq0eXwt7h0zVYbxdrZpatQLECwRsJKJCBub++XEamV8RiBpbPu4lvxHxZ0I20JQ/3r7a61X7WtIha+I/fQhGbxJ8r5jPxFe3akS2U+KVY/NG/iNoq0d9YPo80yluRgmNzXZO+BjCU5CpaHIznKk4dj1O89w5bcLywZVkgafQIfW22qIli2YtVsE7iP8cgY4KULXiLdoW8NXzwiqTX2e2n6DE+bYMeRAV4Fcg6OehgM2F3tStNWOBhAmsLVLlAaBFdDrU3g0nYNrg1xg98Px4UIbRWyj6mVG0UMT0E1DA8N8rTmrnSmbaz8d93ugHu53zv0sWaDUgT7ot3d8bpE5VvCBi2L0Qt26xGOsgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 49.93 ns | 73.70 ns | 1.48 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Int128.ToString(value%3a%20-170141183460469231731687303715884105728).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Int128.cs#L26-#L29\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/0HJRgjmxZTuxm0HAuq7ohjXY0BjdsdBsOtEgS4FEtwnW/fdJ+Thsu1DQE/lIvicFSBAcEk7e0/XBIXSzyt/d7BvY9umzRpaWs8qs0Uq9GT8L1cOSTFmRsJyxMssXSb64SjNWZGxRFlmSFWxeljlL5kVaTui74UD5FqJFsL5HIxBQdjBOkzSfMjZleZWUy4wt82KWs/RqnhVvk2SZJJNzpYWd8YW0MagBY9vrUH/h/WGFrrfh3ULr4i2IxsWdkPqSUBvdyk3ofNCik/X4F70x3U4qgdLolWmALglFCRYaGhF6f/+4CkgrlIMArIw211+r/zCvDNidBR//envo9Repm4D5dtY8dT6Z/g7r3AF+kg6NlbVQHwWK7xK3YRphpTPajYMRPIToJBg/xuioAQ8hOi/MT0d0Xo+fjslw8Ep21vyEGskarAQXkQ+9VE3lJVuj6HYReQwO8mDxjfFagn0A1yu8fgYrNjAcxPEredl6Oc4M5I0nR6+oI6MRmtt9rfoGRiMSx+R27ykVENOSVirP5b8IMb23m7hjcRjIgm6898G1eisskhe/NRmfEvhlzH1tVN9p/u+4hxPu+HFun4cSFXDq5QtyH87XFQjXW+hAI538AQJudoXUAgAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 509.12 ns | 634.84 ns | 1.25 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_004.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_005.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128_006.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Int128.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int128*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int128*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Int128*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Int128*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Int128.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int128.TryFormat(value: 170141183460469231731687303715884105727)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int128.ToString(value: 170141183460469231731687303715884105727)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int128.TryFormat(value: -170141183460469231731687303715884105728)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int128.TryFormat(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_Int128.ToString(value: -170141183460469231731687303715884105728)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_UInt16\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt16.ToString(value%3a%2065535).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt16.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRXW8TMRB8j5T/sOTFibjm7poPlUOWKKUqiEagJpTHytztJUY+O7L32kS0/73r5PIAvKzl9c54dsYgAWEgkPBBLPeBsBmv+B7G39HXDz++WMrn45Vbktd2PXxUpsUC5rPZZDYS7/s9w3hVE3omqBQh6QaH59n59CzPz/LpKrsoJnkxvRi/m86zbJK/zbIiy0Yd0uPWMVBUjixS6lsb8SfeX17ZchPfPdYh3aCqQtoobU8DpbO1Xsef91Y1uhz+EVeu2WqjSDu7cBWKAgRp9FiJBMTt7f0idmplAsbGwll3+W31X4+3Rr/1yPWvt7vWftW2ij3+zruHhofFS1znBumzDuS8LpX5pEj91LSJapTXwdkwjC7LWJKjYfJQk4MHMpakW1gej6RbTx6PUb/3DFvvfmNJsESvMSTwsdWmWrFlS1LNNoH7GI+M+V059hL9HYbW0OUjerXGfi9Nn+Fpw3Z0DPCGyYkdDTAYkLvelaatcDCANIXrHVMaBFdDrQ1zcf7gWo4bwgEcBXm0FWcfUys3yhM88dYwPA7Ik8xd6UzbWPmv3P2xH+RBN8+RJoNSsH3R7n13XaAKrccGLYnRK+ged3+xAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 33.89 ns | 59.07 ns | 1.74 | 0.04 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_UInt16.ToString(value%3a%2012345).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.UInt16.cs#L33-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4TMRC9R8o/DLk4EdvsbrJFEGSJUqqCaARqQjlWZnc2MfLakT3bJqL9946zmwNwGcvjec9v3jNIQBgIJHwQq0MgbKZrvofpd/T1/Y8vlvI307Vbkdd2M35QpsUF5LN5cT4R74cDw3hVE3omqBQh6QbHs2xWnOX5WV6ss7eLeb4o3k2zYjbP5uevs2yRZZMe6XHnGCgqRxYp9a2N+BPvL69suY3vHuuQblFVIW2UtqeB0tlab+LPB6saXY7/iEvX7LRRpJ1dugrFAgRp9FiJBMTNzd0ydmplAsbG0ll38W39X4+3Rr/zyPWvt9vWftW2ij3+zrv7hofFc1znGumzDuS8LpX5pEj91LSNapTXwdkwji7LWJLOMHmsydEDGUvSLyy7I+nXk90xGQ6eYOfdbywJVug1hgQ+ttpUa7ZsRarZJXAX45Exv0vHXqK/xdAaunhArzY4HKTpEzxu2Y6eAV4xObGjAUYjclf70rQVjkaQpnC1Z0qD4GqotWEuzh9cy3FDOIKjII+24uxjauVWeYJH3hrG3YA8ydyXzrSNlf/KPXT9II+6eY40GZSC7Yt2H/rrElVoPTZoSUxeAF5XjEKxAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 34.09 ns | 59.43 ns | 1.74 | 0.02 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt16_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt16_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_UInt16.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt16*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt16*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_UInt16*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_UInt16*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_UInt16.ToString(value: 65535)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_UInt16.ToString(value: 12345)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuZ",
                                           "createdAt":  "2025-01-14T08:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.Tests.Perf_BitArray\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[BitArraySet - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.Tests.Perf_BitArray.BitArraySet(Size%3a%204).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Perf.BitArray.cs#L111-#L118\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTW8TMRC9R8p/GHJxIra7mzZVqkWWSEMFiEagJirHyuzOJkZee2XP0gTKf2ecTQ7AZWzPx/O89wwSEAYCCW/F+hAIm3TpjMGStLMh3XAtpF/Q10+3mhbeq0N6vqyRxmv9EwuYTcSb4cAwlqoJPYNVipB0g+PL/HJ2MZ1eTGeb/Ka4mhbXeTq/vprPZzev87zI88lp0mPreFBUjixS5jsb58+437yy5S7WPdYh26GqQtYobc8NpbO13safD1Y1uhz/EkvXtNqoSGTlKhQFCNLosRIJiPv7x1XM1MoEjImVs27xefNf7qNlRq1Hjn/VHjr7Sdsq5vg7754abha/I533SB90IOd1qcw7Reqrpl3cRnkdWNVxVFzGkPSCyWNMjhrIGJITYdkfyYme7I/JcPACrXff2SVYo9cYErjttKk2LNmaVNMm8KhMhzL6t3SsJfoHDJ2hxQ/0aovDQZa9wPOO5TghwCsGJ1Y0wGhE7m5fmq7C0QiyDO72DGkQXA21Noyl7RZcx3ZDOA7HhTzair2PrpU75QmemTWM+wZ5XnNfOtM1Vv677qHPB3ncm/tIk0EpWL4o9+H0XKEKnccGLYnJH8/rMh+9AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.81 ns | 14.39 ns | 1.22 | 0.22 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[BitArrayCopyToBoolArray - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.Tests.Perf_BitArray.BitArrayCopyToBoolArray(Size%3a%204).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Perf.BitArray.cs#L167-#L168\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW4TMRC9R8o/DLk4EdvspqQoBFkiCRWgNgI1UTlWZnc2MfLaK3u2zdLy74yzyQG4jO03M8/z3hgkIAwEEj6ITRsIq/HKGYM5aWfDeMu5MP6GvnxYalp4r9rx+bJydbt1S+fM8Tnc6F84h+lIvO/3DPOqktAzcaEISVc4vMwupxeTycVkus1m8zeT+VU2nl29m03eZq+zbJ5lo1Onx9pxoygcWaTUNzb2n3l/eGXzfcx7LEO6R1WEtFLangtyZ0u9iz+3VlU6Hz6LlatqbVQUtXYFijkI0uixEAmI29v7dURKZQJGYO2sW3zd/od9sayo9sjxr9xdY2+0LSLG33n3UHGx+B3lfEL6rAM5r3NlPipS3zXt4zTK68AOD6P7MoakM0weY3L0QMaQnATL7khO8mR3jPq9F6i9+8kbgw16jSGBZaNNsWXLNqSqOoF7ZRqUcZcrx16iv8PQGFo8olc77PfS9AWe9mzHiQFeMTmxowEGA3LXh9w0BQ4GkKZwfWBKg+BKKLVhLm134BpeN4RjcxzIoy1493Fr+V55gidWDcOuQJ7HPOTONJWV/47bdniQx7m5jjQZlILti3a3p+caVWg8VmhJjP4AbrabCckCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 80.89 ns | 92.00 ns | 1.14 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.Tests.Perf_BitArray_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.Tests.Perf_BitArray_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.Tests.Perf_BitArray.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.Tests.Perf_BitArray*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.Tests.Perf_BitArray*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.Tests.Perf_BitArray*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.Tests.Perf_BitArray*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.Tests.Perf_BitArray.BitArraySet(Size: 4)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Collections.Tests.Perf_BitArray.BitArrayCopyToBoolArray(Size: 4)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_Reflection_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_ToString(CollectionsOfPrimitives).SystemTextJson_Reflection_.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/Serializers/Json_ToString.cs#L48-#L50\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8aMRC9I/EfXC4GdcMuhKiI1lWTNEo/glLBKj0id3cWpvXayJ5NoE3/e8ewHNpexvLzfLz3xgZIEAQSSryTcyy8uwJbbGrtf4ThEjxqgz/Bh+Gn4Owqd0vyaNdvrp0xUBA6G+6rLx5rJHyE8Ha43AeCOocdHQoWULV5K/m62zE8TVcEnseVmoCwhv44G0/ORqOz0STPprPz0exiOjyfTC9G41cvs2yWZYO20sPWcaEsHVmg1Dc21p/6fvOaicd3D1VIN6DLkNYa7SmhcLbCdZy8t7rGov9LXrt6i0ZHfnNXgpwJSQgeSpkIeXf3MI9IpU2ACMyddZf3+X/YR8uKth44/vW2aOxntGXEeJx3q5qT5e8o5xboAwZyHgtt3mvSX5E2kY32yL6FftyJiiE5GqYOMTl4oGJIWsHqeCStPHU8Bt3Os9h6953NF3GNEBJx1aApc7ZsSbreJuJBmwZUzkOuHXsJfgGhMXT5CF6vodtJ02fxtGE72g7iBTcndjSIXo/cza4wTQm9nkhTcbPjlgaEq0SFhnvxLxGu4XWLcCiOhDzYkncft1ZstCfxxKpF/5igTjR3hTNNbdW/dPdHPKgDb84jJANKsn3R7n17nYMOjYcaLMnBHyyAZp7fAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 639.25 μs | 691.45 μs | 1.08 | 0.00 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_SourceGen_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_ToString(CollectionsOfPrimitives).SystemTextJson_SourceGen_.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSS28TMRC+R8p/MLk4EdvspiQiChjRhqoFGhU1q3KMzO5sYvDa0Xi2TaD8d8ab5ABcxvJ4Ht/DFkgQBBJKvJcLU6C/BFdsao0/wnAJaLQ1PwHD8FPwbpX7JaFx67dzby0UZLwLd9UXNLUh8wjh3XC5DwR1DjtqG5a+wQKuwa3km27H8jJdESBvKzUBmRr659n5+Gw0OhuN82w6ezWaTabD8Xg6mUxev8yyWZYNjp0IW8+NsvTkgFJsXOw/zf2GmnHHd4QqpBvQZUhrbdypoPCuMuu4ee90bYr+Lzn39dZYHWksfAlyJiQZQChlIuTt7cMiZiptA8TEwjt/cZf/l/vomNEWgeNfb/eN+2xcGXO8Dv2q5mL5O9K5BroxgTyaQtsPmvRXQ5uIRqNh2UI/WqJiSA6CqTYmrQYqhuRIWB2O5EhPHY5Bt/Mstui/s0ciugghEZeNsWXOki1J19tEPGjbgMp5ydyzloD3EBpLF4+Aeg3dTpo+i6cNy3GcIF7wcGJFg+j1yF/tCtuU0OuJNBVXOx5pQfhKVMbyLP4kwjdstwhtcwSE4Er2PrpWbDSSeGLWon8oUCeYu8LbpnbqX7j7Qz6oFjfXkSELSrJ8Ue798boAHRqEGhzJwR9cyvAw3gIAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 643.34 μs | 682.81 μs | 1.06 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToString%28CollectionsOfPrimitives%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToString%28CollectionsOfPrimitives%29_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToString%28CollectionsOfPrimitives%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;.SystemTextJson_Reflection_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### MicroBenchmarks.Serializers.Json_ToString\u0026lt;CollectionsOfPrimitives\u0026gt;.SystemTextJson_SourceGen_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Globalization.Tests.Perf_DateTimeCultureInfo\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring%3a%20).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.DateTimeCultureInfo.cs#L29-#L32\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/cPTFrciStCuiKrLEKNOYWAVaq/E4ecmlMXLsyr6wFsZ/55y0D8DLWf7u7vPd99kgAWEgkPBebI6BsElvjHtSRv9UpJ1Nt5wN6Vf01eNHRbjVDa5aQ63HW1u5dOs25LXdjYseDN1tCRPxbjgwzK4qQs/0JTcTN49n+Wx+MZ1eTOfbfLG8nC3zPJ3P37y9XCxe5znfJqdOj3vHjaJ0ZJEy39rYf+Z98soWdcx7rEJWoypD1ihtzwWFs5XexZePVjW6GP8SK9fsten2WrsSxRIEafRYigTE3d3DOiKVMgEjsHbWXX3Z/ofdWt5o75HjX7n71n7WtowYP+fdY8PF4ndc5wbpkw7kvC6UYRnVN011nEZ5HZwN4+iBjCHpBZNdTDoNZAzJaWHZH8lpPdkfk+HgBfbefceCYINeY0jgQ6tNGf3akGr2CTwo06KMfq4ca4n+HgObdvUDvdrhcJBlL/BcsxwnBnjF5MSKBhiNyF0fCtOWOBpBlsH1gSkNgqug0oa52HRwLdsNoWuOA3m0JXsfXStq5QmeeWsY9wXyPOahcKZtrPx33GOPB9nNzXWkyaAU8Rey3MfTdY0q8L9r0JKY/AGYy8ABzwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 350.78 ns | 392.62 ns | 1.12 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring%3a%20fr).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.DateTimeCultureInfo.cs#L29-#L32\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS32/TMBB+r9T/4eiLW5ElaSkDiiwxyjQmVoHWaDxOXnJpjRy7si9bC+N/55y0D8DLWffru7vvs0ECwkAg4YNYHwJhk14Z96CM/qlIO5sWnA3pN/T1/SdFWOgGl62h1uO1rV1auDV5bTfjsg+GzltA7Sfi/XBgGF/VhJ4HVNxO3D6e5bP52XR6Np0X+dvFq9kiz9PXb2bn787nL/Ocvcmx0+POcaOoHFmkzLc29p9wH7yy5TbmPdYh26KqQtYobU8FpbO13sTJB6saXY5/iaVrdtp0l61chWIBgjR6rEQC4ubmbhUjtTIBY2DlrLv4WvwXu7Z80c4j279yt639om0VYzzOu/uGi8XveM4V0mcdyHldKsNEqu+atnEb5XVwNoyjCjKapCdMdjbpOJDRJMeDZf8kx/Nk/0yGg2fYefcDS4I1eo0hgY+tNlVUbE2q2SVwp0yLMiq6dMwl+lsMLNvFI3q1weEgy57hact0HBHgBYMTMxpgNCJ3uS9NW+FoBFkGl3uGNAiuhlobxmLZwbUsN4SuOS7k0VasfVSt3CpP8MRXw7gvkKc196UzbWPlv+se+niQ3d5cR5oMShH/IdN9OLorVIF/XoOWxOQPIJBHNNECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 342.70 ns | 395.10 ns | 1.15 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring%3a%20da).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.DateTimeCultureInfo.cs#L29-#L32\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS32/TMBB+r9T/4eiLW5ElabfBKLLEKNOYWAVaq/E4ecmlMXLsyr6wFrb/nXPSPgAvZ92v7+6+zwYJCAOBhA9itQ+ETXpt3KMy+pci7Wy65mxIv6GvHj4pwrVucNEaaj3e2Mqla7cir+1mXPTB0HlzKNVEvB8ODOOritDzgJLbidvHs3x2djKdnkzP1vnF/HQ2z/P0zbvztxfn+es8Z29y6PS4ddwoSkcWKfOtjf1H3EevbFHHvMcqZDWqMmSN0vZYUDhb6U2cvLeq0cX4t1i4ZqtNd9nSlSjmIEijx1IkIG5v75cxUikTMAaWzrrLr+v/YjeWL9p6ZPtX7q61X7QtY4zHeffQcLF4iedcI33WgZzXhTJMpPquqY7bKK+Ds2EcVZDRJD1hsrNJx4GMJjkcLPsnOZwn+2cyHDzD1rsfWBCs0GsMCXxstSmjYitSzTaBe2ValFHRhWMu0d9hYNkuf6JXGxwOsuwZnmqm44AArxicmNEAoxG5q11h2hJHI8gyuNoxpEFwFVTaMBbLDq5luSF0zXEhj7Zk7aNqRa08wRNfDeO+QB7X3BXOtI2V/6677+NBdntzHWkyKEX8h0z3/uAuUQX+eQ1aEpM/fXHA19ECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 314.72 ns | 367.57 ns | 1.17 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring%3a%20ja).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Globalization/Perf.DateTimeCultureInfo.cs#L29-#L32\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVS32/TMBB+r9T/4eiLW5E1aalgFFlilGlMrAKt0XicvOTSenLsyr5sLYz/nXOSPgAvZ92v7+6+zwYJCAOBhI9icwyE9fTKuAdl9E9F2tlpztkw/Y6+uv+sCHNd46ox1Hi8tpWb5m5DXtvtuOiCofWW8Kgm4sNwYBhfVYSeB5TcTtw+nmfzxdlsdjZb5Nn58s18mWXTd+/fns8W2essY2/Sd3rcO24UpSOLlPrGxv4T7oNXttjFvMcqpDtUZUhrpe2poHC20ts4+WhVrYvxL7Fy9V6b9rK1K1EsQZBGj6VIQNzc3K1jpFImYAysnXUX3/L/YteWL9p7ZPtX7raxX7UtY4zHeXdfc7H4Hc+5QvqiAzmvC2WYSPVD0y5uo7wOzoZxVEFGk3SEydYmLQcymqQ/WHZP0p8nu2cyHLzA3rtHLAg26DWGBD412pRRsQ2pep/AnTINyqjoyjGX6G8xsGwXT+jVFoeDNH2B5x3T0SPAKwYnZjTAaETu8lCYpsTRCNIULg8MaRBcBZU2jMWyg2tYbghtc1zIoy1Z+6hasVOe4JmvhnFXIE9rHgpnmtrKf9c9dvEg2725jjQZlCL+Q6b72LtrVIF/Xo2WxOQPrqdTDdECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 334.17 ns | 383.99 ns | 1.15 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_DateTimeCultureInfo_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_DateTimeCultureInfo_002.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_DateTimeCultureInfo_003.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_DateTimeCultureInfo_004.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Globalization.Tests.Perf_DateTimeCultureInfo.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Globalization.Tests.Perf_DateTimeCultureInfo*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Globalization.Tests.Perf_DateTimeCultureInfo*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Globalization.Tests.Perf_DateTimeCultureInfo*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Globalization.Tests.Perf_DateTimeCultureInfo*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: )\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: fr)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: da)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: ja)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SortedDictionary - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.TryGetValueFalse(SmallClass%2c%20SmallClass).SortedDictionary(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/TryGetValue/TryGetValueFalse.cs#L90-#L99\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRWW8TMRB+r5T/MOTFidhmjzYSChhR0nKIRkjdqDwiszubGHntyJ5ts1D+O+NNIgS8jO3xHN9hkIAwEEh4I8o+ELazpTMGK9LOhtna9++R7pXp8J0yAV+VrTJmaVQICfy5v56VzhPW13roU76flPoHLmCeF1PxcnRmeI9qCD0vqhUh6RYnRVZcnuf5eX65zl4sLopFVsyKi2Kez/PnWbbIsumx0+POcaOoHVmk1Hc29p/mfvPKVtv477EJ6RZVHdJWaXsqqJxt9CZu7q1qdTX5KZau3WmjItiVq1EsQJBGj7VIQNze3q9ipomMY2LlrLv6vP4v99Eyo51Hjn/93XX2k7Z1zPE67762XCx+RTqs5gcdyHldKXOtSH3RtI1olNeBFZ9EN2QMyUEwOcRk0EDGkBwJy8ORHOnJwzEdnT3Bzrvv7CCU6DWyUW87beo1S1aSancJDH7KNS9ZOtYS/R2GztDVA3q1wdFZmj7B45blOE6AZzycWNEA4zG5m31luhrHY0hTuNnzSIPgGmi04VnabsB1bDeEoTkC8mhr9j66Vm2VJ3hk1jA5FMgTzH3lTNda+S/c/pAPcsDNdaTJoBQsX5S7Pz5XqELnsUVLYvobssfojtkCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 74.34 μs | 78.93 μs | 1.06 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.TryGetValueFalse%28SmallClass%2C%20SmallClass%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.TryGetValueFalse%28SmallClass%2C%20SmallClass%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.TryGetValueFalse\u0026lt;SmallClass, SmallClass\u0026gt;.SortedDictionary(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Span.Sorting\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[BubbleSortSpan - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Span.Sorting.BubbleSortSpan(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Span/Sorting.cs#L42-#L44\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/TMBB+r9T/cPTFrciapCsTCrLENiaGWIW0VuMRucmlNXLsyL6wFsZ/59ykD8DLWf5833d339kgAWEgkPBerFtl52vnSdvd/Kbbbg3GW4Sna/0TC3iTL2bi3XhkmKZqQs+8ShGSbnC6yBbLizy/yJeb7G1xuSiyy/lVni+z/Op1lhVZNhuYHlvHRFE5skip72zkn3W3XtlyH9891iHdo6pC2ihtzwmls7XexcpHqxpdTn+JW9e02ijSzq5chaIAQRo9ViIB8fDwtIpIrUzACKycdddfNv9hnyxP1Hrk+NfbY2c/a1tFjMt5963hZPE7jvMR6V4Hcl6XynxQpL5q2sdulNfB2TCN5soYkt4weYrJyQMZQzIMLPsjGcaT/TEbj16g9e47lgRr9BpDAjedNtWGLVuTatoEnpTpUG64yK1jL9E/YugMXf9Ar3Y4HqXpCzzv2Y5BAV6xOLGjASYTcneH0nQVTiaQpnB3YEmD4GqotWEt/gvgOl43hBM5NuTRVrz7uLVyrzzBM08N0z5Bnts8lM50jZX/tnvs8SBPfXMeaTIoBdsX7T4O1xWq0Hls0JKY/QGfCF7UqAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 420.45 μs | 446.00 μs | 1.06 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.Sorting_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.Sorting.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.Sorting*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Span.Sorting*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.Sorting*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Span.Sorting*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Span.Sorting.BubbleSortSpan(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuh",
                                           "createdAt":  "2025-01-14T08:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_SByte\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_SByte.ToString(value%3a%20127).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.SByte.cs#L31-#L33\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR32/TMBB+r9T/4eiLW5E1aShjKrLENqaBWAVaq/E4meTSGjl2ZF+2Roz/nXOTPgAvZ/l83/n7YZCAMBBI+CA2XSCs51u+h/k39NXj5qojnG/dhry2u+mTMi2uYJG/m4n345FhsKoIPaNLRUi6xmme5cuzxeJssdxmF6s3+Sp7O8/Ps4v8fPk6y1ZZNhuQHhvHQFE6skipb23En/b+8MoW+/jusQrpHlUZ0lppexoonK30Lv7cWVXrYvpLXLu60UaRdnbtShQrEKTRYykSEHd3D+vYqZQJGBtrZ93l1+1/vc+WFTUeuf71dt/aL9qWscffefdY87D4HeXcIn3SgZzXhTIfFanvmvaRjfI6OBum0WIZS9IbJo81OXogY0kGwbI/kkGe7I/ZePQCjXc/sSDYoNcYErhqtSm3bNmGVN0k8BDDkTG8a8deor/H0Bq6fEKvdjgepekLPO/ZjmEDvOLlxI4GmEzI3RwK05Y4mUCaws2BVxoEV0GlDe/i9MG1HDeEIzgS8mhLzj6mVuyVJ3hm1TDtB+SJ5qFwpq2t/Jdu1/eDPPLmOdJkUAq2L9rdDdc1qtB6rNGSmP0Bsw8KI64CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 26.18 ns | 40.09 ns | 1.53 | 0.02 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_SByte.ToString(value%3a%20-128).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.SByte.cs#L31-#L33\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR3W/TMBB/r9T/4eiLU5E26Zc0FVliGxMgVoHWaDxOJrm0Ro5d2ZetFeN/59ykD8DLWT7f7/z7MEhAGAgkvBfbUyBspgXfw/Qb+vppe3MinBZuS17bXfKsTItrmMzmV2PxbjgwjFY1oWd4pQhJN5jM8/lyMptNZssiv1ov5ut8NV0sV6vFMn+b5+s8H/dIjwfHQFE5skiZb23EX/b+8MqW+/jusQ7ZHlUVskZpexkona31Lv58sqrRZfJL3LrmoI0i7ezGVSjWIEijx0qkIO7vHzexUysTMDY2zrrrr8V/vc+WFR08cv3r7aG1X7StYo+/8+6p4WHxO8r5iPRJB3Jel8p8UKS+a9pHNsrr4GxIoscylrQzTJ5revZAxpL2gmV3pL082R3j4eAVDt79xJJgi15jSOGm1aYq2LItqeaQwmNMR8b0bh17if4BQ2vo+hm92uFwkGWv8LJnO/oN8IaXEzsaYDQid3csTVvhaARZBndHXmkQXA21NryL4wfXctwQzuBIyKOtOPuYWrlXnuCFVUPSDcgLzWPpTNtY+S/dU9cP8syb50iTQSnYvmj3qb9uUIXWY4OWxPgPjLX5p68CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.17 ns | 50.05 ns | 1.38 | 0.02 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_SByte_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_SByte_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_SByte.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_SByte*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_SByte*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_SByte*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_SByte*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_SByte.ToString(value: 127)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Tests.Perf_SByte.ToString(value: -128)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_Reflection_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_ToStream(CollectionsOfPrimitives).SystemTextJson_Reflection_.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR227aQBB9R+IftrwsqA42JEpSWldNSNRbUCqw0ke0tcew7V7Q7DiBNv33zoJ5aPsyqz1zO+eMARIEgUQu3smZLtFfgyvXVuGPMFwAamX0T8Aw/BS8WxZ+QQjKvpl6Y6Ak7V24r7+gtpr0I4S3w8UuENgCtrRvmEPd1i3l627H8DZVEyCvqxQBaQv9cTY+OxmNTkZnRXY5OR1PsvPh5avs4vzi9GWWTbJs0HYibDw3ysqTA0qxcbH/OPcbKiYe8wh1SNegqpBapd2xoPSu1qu4eeeU1WX/l5x6u9FGRX4zX4GcCEkaECqZCHl39zCLSK1MgAjMvPNX98V/2EfHijYIHP/KzRv3WbsqYrwO/dJysfwd5bwH+qADedSlMjeK1FdN68hGoWbfQj/eJI8hORiW72Oy9yCPIWkF54cnaeXlh2fQ7TyLDfrvbL6IZ4SQiOtGm6pgyxak7CYRD8o0kBe8ZOrZS8A5hMbQ1SOgWkG3k6bP4mnNdrQTxAseTuxoEL0e+dttaZoKej2RpuJ2yyMNCF+LWhuepd1K+IbPLcK+ORJCcBXfPl6tXCsk8cSqRf9QkB9pbktvGuvyf+nuDnjI97y5jjQZyCXbF+3etd8ZqNAgWHAkB38ApDFi+98CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 393.37 μs | 444.28 μs | 1.13 | 0.01 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_SourceGen_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_ToStream(CollectionsOfPrimitives).SystemTextJson_SourceGen_.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRWW8TMRB+j5T/YPLiRGyz2xAhEjCiDVU5GhU1q/IYmd3ZxOAjGs+2CZT/zjjHA/Ayluf8DgskCCIJJd7JuakwXIKv1k7jjzhcABptzU/AOPwUg1+WYUEI2r2ZBWuhIhN8vG2+oHGGzAPEt8PFLhK4Era0H1iEFiu4Br+Ur7sdy8d0Q4B8rdYEZBz0R8VofHZ+fnY+LotX0xejafFyOJlMxqNR8bwopkUxOE4ibAIPyjqQB8qx9Wn+tPcbasad6ghNzNeg65g7bfypoQq+Mat0eee1M1X/l5wFtzFWJxrzUIOcCkkGEGqZCXlzcz9PmUbbCCkxDz5c3Jb/5T56ZrRB4PhX7a71n42vU47PYVg6bpa/E51roA8mUkBTaftek/5qaJ3QaDQsW+wnS1QK2UEwtY/ZXgOVQnYkrA5PdqSnDs+g23kSGwzf2SORXISYicvW2LpkyRak3SYT99q2oEo+MgusJeAdxNbSxQOgXkG3k+dP4nHNchw3iGe8nFjRKHo9ClfbyrY19Hoiz8XVlldaEKERjbG8y/iVCC3bLeJ+OAFC8DV7n1yr1hpJPDJr0T80qBPMbRVs67z6F+7ukI9qj5v7yJAFJVm+JPfu+J2Dji2CA09y8AcPCMkT3gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 397.07 μs | 447.47 μs | 1.13 | 0.01 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToStream%28CollectionsOfPrimitives%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToStream%28CollectionsOfPrimitives%29_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToStream%28CollectionsOfPrimitives%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;.SystemTextJson_Reflection_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### MicroBenchmarks.Serializers.Json_ToStream\u0026lt;CollectionsOfPrimitives\u0026gt;.SystemTextJson_SourceGen_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Reflection.Invoke\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Property_Get_class - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Reflection.Invoke.Property_Get_class.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/System.Reflection/Invoke.cs#L221-#L228\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTW/bMAy9B8h/4HJRgrmx436gyCBgXVesxRpsSILuGGg2HWuTJUOi2wTr/vuoxDlsu1AQyff4+GiQgDAQSHgvVvtA2EyXWBksSDs7fbDP7idOv3rXoqf95hPSpjAqBPFuODCMVRWhZ3CpCEk3OM6z/OJsNjubXayz6/l5Ps+up5eX53l+dfU2y+ZZNumRHlvHQFE6skip72zEn3i/e2WLOtY9ViGtUZUhbZS2p4bC2Upv4+S9VY0uxr/ErWtabVQUvnAlijkI0uixFAmIx8enRcxUygSMiYWz7ubL+r/cg+WNWo8c/6otO/tZ2zLmeJx3m4abxe+4DrtyrwM5rwtlPipS3zTVUY3yOjgbxtFhGUNyNEweYnLwQMaQ9AvL45P068njMxkOXqH17gdfBVboNYYEPnTalGu2bEWqaRN4UqZDueYht469RL/E0Bm6eUavtjgcpOkrvNRsR88Ab5ic2NEAoxG5u11huhJHI0hTuNsxpUFwFVTaMJe2W3AdnxvCARwFebQl3z5eraiVJ3jhrWF8bJAnmbvCma6x8l+5+2M+yINu7iNNBqVg+6Ld+/67QBU6jw1aEpM/1Ger1q0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 11.05 ns | 12.06 ns | 1.09 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Reflection.Invoke_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Reflection.Invoke.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Reflection.Invoke*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Reflection.Invoke*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Reflection.Invoke*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Reflection.Invoke*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Reflection.Invoke.Property_Get_class\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in PerfLabTests.LowLevelPerf\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[IntegerFormatting - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/PerfLabTests.LowLevelPerf.IntegerFormatting.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/perflab/LowLevelPerf.cs#L427-#L437\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRy27bMBC8G/A/bH2hjSqW7KQvFwSapukDldEiMdJjwUgriwVFCstVbKPJv5e05EPbyxIc7ixnZg0yMHoGCe/Ed6QqV/ebcPfz3O1yfEATwfkXy7hF+uioUczabsXb8cgErqoYKZBLxci6wekyW16cLRZni4tN9np1vlwtsnm2yF68efnqeZatsmw2MAlbF4iidGyRU+ps5J/m3pOyRR3fCSuf1qhKnzZK21ND4Wylt/Hng1WNLqa/xZVrWm0Ua2fXrkSxAsEaCUuRgMjzu3VEKmU8RmDtrLv8tvkPi1apJQz1r7ebzn7VtoxY+I7czyY0i6do5xPyZ+3ZkS6U+aBY/dBcRzWKtHfWT2PCMpakD0wea3LMQMaSDIZlfySDPdkfs/HoEVpyv7BguEXS6BN432lTbkJkt6yaNoE7ZTqUcXdXLmSJdIO+M3z5gKS2OB6l6SPs6hDHMAGeheEcEvUwmbC73hemK3EygTSF630YaRBcBZU2YVbYOLgurBv8kRwFEdoy7D5uragVMeyCa5j2DfIkc1840zVW/iv30ONeHnWHPtZsUIoQX4z7MFzXqHxH2KBlMfsDG6Ese60CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 5.67 ms | 11.94 ms | 2.10 | 0.03 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.LowLevelPerf_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/PerfLabTests.LowLevelPerf.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.LowLevelPerf*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027PerfLabTests.LowLevelPerf*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027PerfLabTests.LowLevelPerf*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027PerfLabTests.LowLevelPerf*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### PerfLabTests.LowLevelPerf.IntegerFormatting\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[List - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.AddGivenSize(Int32).List(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Add/AddGivenSize.cs#L28-#L36\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTY8TMQy9V+p/CL2kFbOdjw4fGgiidFcLohXStlqOKEw8bVAmqRLPbgvLf8fptAfg4ijP9rPfswFkCAGZYO/5+hgQ2unCGQM1amfDdK7UrX4Au9Y/4e0ni7Pi3XSpA44jULEXeTHhb4YDQzSyQfDEoyQC6hbGRVaUV3l+lZeb7HU1K6o8n5YvX5WzonyeZVWWTc6dHvaOGrlyaAFT39nYf+H97qWtdzHvoQnpDqQKaSu1vRTUzjZ6GycfrWx1Pf7FF67dayOjhpVTwCvGUYMHxRPGl8v7VUQaaQJEYOWsm3/Z/IeRXvB7DxT/yt119rO2KmI0zrtvLRXz31HOLeBHssd5XUtzLVF+1biL20ivAxk6jmaLGJLeMHGKyckDEUNyFiz6JznLE/0zGQ6e2N67H3QgtgavISTsQ6eN2pBla5TtPmH30nQgNjRk4chL8HcQOoPzB/ByC8NBmj6xxx3ZcWZgz4gcydHARiN0N4fadApGI5am7OZAlAaYa1ijDXFpu2Wuo3OzcGqOC3mwim4fr1bvpEf2SKrZuC8QlzUPtTNda8W/6x57PIjT3lSHGg0ITvZFu4/n7wpk6Dy0YJFP/gACM9OkuAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.58 μs | 1.68 μs | 1.06 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.AddGivenSize%28Int32%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.AddGivenSize%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.AddGivenSize\u0026lt;Int32\u0026gt;.List(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[Stack - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.ContainsFalse(Int32).Stack(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Contains/ContainsFalse.cs#L139-#L148\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRS4/TMBC+V+p/GHpxK7LNo1tABSOWsjzEVkjbajkik0xag2NX9oRtYfnvjJP2AFzGyXjm8/cwSEAYCCS8EutjIGymS2cMlqSdDfxtSWkb3ioT8MUHS7Pi5XRNqvw+XuufuIB5XkzE8+HAMJCqCT0jVYqQdIPjIisuL/L8Ir/cZM8Ws2KRz6bZ03k+fzJ7nGWLLJucNj3uHS+KypFFSn1r4/4Z96tXttzFe491SHeoqpA2TOs8UDpb6218+WhVo8vxL7F0zV4bFVWsXIViAYI0eqxEAuLm5m4VO3VUFRsrZ93Vp81/PRaMfu+R6193t639qG0Ve/ycd18aHha/o5x3SO91IOd1qcwbReqzpl1ko7wObOk42i1jSXrDZFeTzgMZS3ISLPsjOcmT/TEZDh5g7903jgjW6DWGBF632lQbtoyjafYJ3CnTotzwI0vHXqK/xdAauvqBXm1xOEjTB7jfsR0nBHjE4F3QMBqRuz6Upq1wNII0hesDQxoEV0OtDWNpuwXXctwQuuVIyKOtOPuYWrlTnuCeVcO4H5BnmofSmbax8l+6x74fZMeb50iTQSnYvmj38fS7QhVajw1aEpM/MaUGzboCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 90.14 μs | 97.25 μs | 1.08 | 0.12 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.ContainsFalse%28Int32%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.ContainsFalse%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.ContainsFalse\u0026lt;Int32\u0026gt;.Stack(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuq",
                                           "createdAt":  "2025-01-14T08:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Tests.Perf_Byte\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Tests.Perf_Byte.ToString(value%3a%20255).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Byte.cs#L31-#L34\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR32/aMBB+R+J/uPFi0FISUtAqJktru2qdVtSpoO6x8pIL8eTYkX1pQev+954hPGx7Ocvn+87fD4MEhIFAwiex3gfCZrrhe5h+R189Xe0Jpxu3Jq/tdvysTIdLyBeLifg4HBjGqorQM7hUhKQbHOdZPj+bzc5m8012sTzPl7P5dJFfnGfzD++zbJllkx7psXUMFKUji5T6zkb8ae9Pr2xRx3ePVUhrVGVIG6XtaaBwttLb+PPeqkYX49/i2jWtNoq0sytXoliCII0eS5GAuLt7XMVOpUzA2Fg56y7vN//1vlpW1Hrk+tfbQ2e/aVvGHn/n3VPDw+JPlPMF6VYHcl4XynxWpH5oqiMb5XVwNoyjwzKW5GiYPNTk4IGMJekFy+OR9PLk8ZgMB6/QevcLC4I1eo0hgatOm3LDlq1JNW0CjzEcGbO7duwl+gcMnaHLZ/Rqi8NBmr7CS8129BvgHS8ndjTAaETuZleYrsTRCNIUbna80iC4CipteBenD67juCEcwJGQR1ty9jG1olae4IVVw/g4IE80d4UzXWPlv3T3x36QB948R5oMSsH2Rbv3/XWFKnQeG7QkJm/FRtkZrQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 25.41 ns | 40.00 ns | 1.57 | 0.02 | True | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Byte_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Tests.Perf_Byte.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Byte*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Byte*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Tests.Perf_Byte*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Tests.Perf_Byte*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Byte.ToString(value: 255)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[GetService_5Injected - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark.GetService_5Injected.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/Microsoft.Extensions.DependencyInjection/ActivatorUtilitiesBenchmark.cs#L78-#L84\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/TQBC9R8p/GHJxIlzb+aCgoJVI2wgqaiG1oRyrxR4nC+tda3ecJqL8d2Zj5wBcZuS3M/PmvbFGAkJPIOBDlKvCWW8rStYHQuOVNT65wQZNiaY43pofWBCDyYrTXpJ1X0lpRQr9FRfsaul+Jh+RHtDtVYFPb7oOLKP3w4FmJlkROqYqJSGpGsezbLa4mE4vpotN9m45ny2nl0k2v5zOF29fZ9kyyyZ9p8PGcmNUWjJIqWtN6D/P/e4k04d3h5VPdyhLn9ZSmXNBYU2ltoH5aGStivGv6NrWjdIy6MltidESIhbieNkYoru7xzwgldQeA5BbY1dfNv9ht4YVNQ45/vV235rPypQBYzpnn2oujn4HOWzQJ+XZPFVIfSNJflO0C9tIpzw7Pg73ECHEnWHiFOOTByKEuBcsuhT38kSXJsPBCzTOBuuBT8HXieGqVbrcsGUPJOsmhkepWxQbJrm27CW6e/StptUendzicJCmL/C8Yzv6CfCKhxM76mE0Irs+FLotcTSCNIX1gUdqBFtBpTTPUmYLtuVzgz81h4Vc+IkchKsVO+kInlk1jLsCcV7zUFjd1kb8u+6xw7047c11pEijiNi+YPex/8xR+tZhjYaiyR9t92a12wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 36.04 ns | 38.95 ns | 1.08 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesBenchmark.GetService_5Injected\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.IndexerSet\u0026lt;Int32\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[List - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IndexerSet(Int32).List(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Indexer/IndexerSet.cs#L58-#L65\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmWSUW/TMBDH3yv1Oxx9cSuyJuk6FQpGjDKxiVZISzUekUkurZFjV/aFtWx8d85t+gC8nJXz3f/u/3MMEhAGAgnvRXEIhM144YzBkrSzYXxnK9yjL5De3lm6nLwbL3WgYaF/4Ryu8slIvOn3DIuomtCzSqUISTc4nGST6UWeX+TTdfZqfjmZ57Px1SyfTV/PXmbZPMtGXafHneNGUTmySKlvbew/6373ypbbeO+xDukWVRXSRml7LiidrfUmTj5Y1ehy+CQWrtlpo6KDlatQzEGQRo+VSEAslw+rmKmVCRgTK2fd9Zf1fzn2i37nkeNfd/et/axtFXM8zrtvDReL39HOJ6RbxuO8LpX5qEh91bSN2yivA+McRtQyhuQETB5jcmQgY0g6w/J0JJ09eTpG/d4z7Lz7wc8DBXqNIYEPrTbVmpEVpJpdAg/KtCjXPGThmCX6ewytoeuf6NUG+700fYbHLePoFOAFixMTDTAYkLvZl6atcDCANIWbPUsaBFdDrQ1rabsB1/JzQzg2x4U88k/iIb5auVWe4JFdw/BUIM9r7ktn2sbKf9c9nPJBHvfmOtJkUArGF3Efus8VqtB6bNCSGP0BNX9xfrYCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.40 μs | 1.61 μs | 1.15 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IndexerSet%28Int32%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IndexerSet%28Int32%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IndexerSet\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IndexerSet\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IndexerSet\u0026lt;Int32\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IndexerSet\u0026lt;Int32\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.IndexerSet\u0026lt;Int32\u0026gt;.List(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.IterateForEach\u0026lt;String\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ConcurrentQueue - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEach(String).ConcurrentQueue(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEach.cs#L234-#L242\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9V8p/GHJxIrbZ3dBSGjCipAEqGiGaqByR2Z3NGnntyB7TBMp/Z5yPA3AZy+N5b+a9sUECwkAg4Y1YbANhN5o6Y7Ai7WwY3RB6RfjO+Zmq2lcL8tquXnOJraL3aOlzxIiDhf6JEzgvx0PxsndimFQ1jGTWmtGkOxyMi/HZaVmelmfL4sXk2XhSXo7K5xcXl8X506KYFMXwgPS4dgwUtSOLlPtoE/7I+80rW7Xp3WMT8hZVHfJOaXssqJxt9Cp13lrV6WrwS0xdt9ZGJUVzV6OYgCCNHmuRgbi9vZ+nTKNMwJSYO+uuPi3/y91YVrT2yPGvt7toP2pbpxy38+5rx8Xid5LzHumDDuS8rpS5VqS+aGrTNMrrwPYOkvUyhWxvmNzFbOeBTCE7CJb7IzvIk/tj2Dt5hLV333ldsECvMWTwNmpTL9myBaluncG9MhHlkptMHXuJ/g5DNHT1gze7wt5Jnj/CQ8t2HBjgCZMTOxqg3yc321Qm1tjvQ57DbMOUBsE10GjDXPwbwEVeN4QdOA3E36Lm3aetVa3yBA+sGgb7Ankcc1M5Ezsr/x13u88HuZub60iTQSnYvmT39nCdowrRY8dfUAz/AKkYJwHGAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 5.66 μs | 6.49 μs | 1.15 | 0.03 | False | | |\r\n|\u003cul\u003e\u003cli\u003e[List - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.IterateForEach(String).List(Size%3a%20512).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Collections/Iterate/IterateForEach.cs#L104-#L112\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmWS32/TMBDH3yv1fzj64lZkTZoVaSsYMUphE62Q1mo8IpNcGiPHjuwLa9n43zn3xwPwclbOd1/f93MxSEAYCCS8E+t9IGzGc2cMFqSdDeM7Qq8IPzq/UEX9Zk1e2+3b8VIHGq71L5zBq0k+Eq/7PcNKquJyliq5hXSDwzzLpxeTycVkusmuZpf5bHI9zq/yy+n19GWWzbJsdOr02DpuFKUji5T6zsb+s+53r2xRx3uPVUhrVGVIG6XtuaBwttLb+PLeqkYXwycxd02rjYo2Vq5EMQNBGj2WIgGxXD6sYqZSJmBMrJx1N182/+XuLDtqPXL86+6+s5+1LWOOn/PuW8PF4ne08wnplvE4rwtlPihSXzXVcRrldWCmw8hbxpAcgclDTA4MZAzJybA8HsnJnjweo37vGVrvfvCOYI1eY0jgfadNuWFka1JNm8CDMh3KDT8yd8wS/T2GztDNT17nFvu9NH2Gx5pxnBTgBYsTEw0wGJBb7ArTlTgYQJrCYseSBsFVUGnDWvwLgOt43RAOzXEgj7bk3cetFbXyBI/sGobHAnkec1c40zVW/jvu/pgP8jA315Emg1Iwvoh7f/pcoQqdxwYtidEfI7GHELsCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.69 μs | 2.83 μs | 1.05 | 0.03 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28String%29_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28String%29_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.IterateForEach%28String%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEach\u0026lt;String\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateForEach\u0026lt;String\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.IterateForEach\u0026lt;String\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.IterateForEach\u0026lt;String\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.IterateForEach\u0026lt;String\u0026gt;.ConcurrentQueue(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Collections.IterateForEach\u0026lt;String\u0026gt;.List(Size: 512)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Linq.Tests.Perf_Enumerable\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SingleWithPredicate_FirstElementMatches - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Linq.Tests.Perf_Enumerable.SingleWithPredicate_FirstElementMatches(input%3a%20IEnumerable).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Linq/Perf.Enumerable.cs#L148-#L150\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSXW/TMBR9r9T/YPriVmRNWiqGiiwxRhkTjZjWajxWXnLTGDl2sK9ZK8Z/5zpphYCXa/n4fp1zrAEZgkcm2Du+OXqEZrpW5vt0S6Cf3oGrdisTGnDyUcN0o8xew1eF9Z2DUhUSYfdROY8rDQ0YzCUWNfixMm3AJbv9Uzrhb4cDTdNkheBoXEm1qBoYz7P54mI2u5gtttmb5av5cp5NL7PZ5WLx+mWWLbNscqp00Foq5KVFA5i6YGL9ue+jk6ao47uDyqc1yNKnjVTmnFBYU6l9nHw0slHF+Ce/tk2rtERlTW5L4EvGUQEx4wnj6/VDHpFKag8RyK2xV1+2/2G3hhi1Dij+9XYfzGdlyojROGd3DSXzX5HODeAn5dE6klB/kCijpHEb6ZS3xo+jJyKGpBdMdDHpNBAxJCfCoj+SEz3RH5Ph4Jm1zn6DAtkGnAKfsPdB6XJLkm1QNm3CHqQOIKLR15a0BHcPPmi8+kGO7WE4SNNn9lSTHKcO7AU1R1LUs9EI7epQ6FDCaMTSlK0O1FIDsxWrlKZe9FGYDWQ3811xXMiBKcn76FpRS4fsiVizcZ8gzmseCqtDY8S/6x573Itub8pDhRoEJ/mi3MfTNQfpg+t+I5/8BnSI/mPfAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 685.93 ns | 726.44 ns | 1.06 | 0.05 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Linq.Tests.Perf_Enumerable_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Linq.Tests.Perf_Enumerable.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Linq.Tests.Perf_Enumerable*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Linq.Tests.Perf_Enumerable*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Linq.Tests.Perf_Enumerable*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Linq.Tests.Perf_Enumerable*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Linq.Tests.Perf_Enumerable.SingleWithPredicate_FirstElementMatches(input: IEnumerable)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Perf_Convert\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ChangeType - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Perf_Convert.ChangeType.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime.Extensions/Perf.Convert.cs#L36-#L37\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRUW/TMBB+r9T/cPTFrciaNBvSKLLEKBMgVoHWaDxOJrk0Ro4d2RfWiPHfOTftA/Bylu++u/u+7wwSEAYCCW/FbgiE7fIr+vpx4+xP9LTcNMrusRg6FG+mE8NwVRN6xleKkHSL8zzLry5Wq4vVVZFdry/zdZ4vL/PsevXq9cssW2fZ4tTpsXPcKCpHFin1vY3957nfvbJlE+se65A2qKqQtkrbM6B0ttb7uHmwqtXl/JfYuLbTRpF2dusqFGsQpNFjJRIQd3cP25iplQkYE1tn3c2X4r/cJ8uKOo8c/6rd9/aztlXM8TrvHlsGi99RzgekjzqQ87pU5r0i9U1TE9kor4OzYR5NlTEko2HyGJOjBzKG5CRYjk9ykifHZzGdPEPn3Q8sCXboNYYE3vXaVAVbtiPVdgk8KNOjLHjJxrGX6O8x9IZu+HBqj9NJmj7DU8N2nCbACx5O7GiA2Yzc7aE0fYWzGaQp3B54pEFwNdTa8Cxt9+B6PjeEY3Mk5NFWfPt4tbJRnuCJVcN8BMgzzUPpTN9a+S/dYcwHeeTNONJkUAq2L9o9nL5bVKH32KIlsfgD5ekjXKACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 51.04 ns | 69.24 ns | 1.36 | 0.03 | True | | |\r\n|\u003cul\u003e\u003cli\u003e[ToHexString - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Perf_Convert.ToHexString.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRwW7bMAy9B8g/cLkowdzYcXPoMghYlxVrsQYdGqM7FppNxxpkKZDoNcG6fx8VO4dtFwoiHx/J9wwSEAYCCR/E9hgI2/lX9PXz2tmf6GleuFs8bMlruxPvxyPDeFUTem6oFCHpFqd5li8vFouLxbLIrlaX+SrP58s8e5fnV2+zbJVls6HT495xo6gcWaTUdzb2n3m/e2XLJtY91iFtUFUhbZW2Z0DpbK13cfLRqlaX019i7dq9Noq0sxtXoViBII0eK5GAuL9/2sRMrUzAmNg4664fiv9yd5Yv2nvk+FftsbNftK1ijsd599wyWPyO53xGutWBnNelMp8UqW+amriN8jo4G6ZRVRlD0gsmTzE5aSBjSIaDZf8kw3myf2bj0SvsvfuBJcEWvcaQwMdOm6pgybak2n0CT8p0KAsesnasJfpHDJ2ha3ZO7XA8StNXeGlYjoEB3jA5saIBJhNyN4fSdBVOJpCmcHNgSoPgaqi1YS52HFzHdkM4NceFPNqKvY+ulY3yBC98NUx7gDyveSid6Vor/1332OeDPO3NONJkUAqWL8p9HL4bVKHz2KIlMfsDMIn5yqECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 258.17 ns | 288.22 ns | 1.12 | 0.10 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Perf_Convert_001.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Perf_Convert_002.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Perf_Convert.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Perf_Convert*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Perf_Convert*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Perf_Convert*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Perf_Convert*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Perf_Convert.ChangeType\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n### System.Perf_Convert.ToHexString\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEur",
                                           "createdAt":  "2025-01-14T08:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_Reflection_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_ToStream(MyEventsListerViewModel).SystemTextJson_Reflection_.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/aQBC9I/EftlwWVAcbiNSEdqsmKUrTYlUCix6jrT2GbfcD7Y4DNOl/7yyGQ9vLrPftvJk3b6wBGUJAJtgHnqvSu1uw5cZI/zMMl+CV1OoX+DD8HJx9LNwSPUjzLj/MnsBimKuA4FcKdrmrQL8fLg8EmAL2eCQsoNZQoqJP/rbb0dRN1sSgdpVEQGWgP87Glxej0cXossiuppPxdDwZXk3eXF9no9dZNs2ywYnpYeuIyCuHFjD1jY38c93vXpLw+O6hDukGZBVSI5U9J5TO1modOx+sNKrsP/M7Z7ZKy6gv6udTxlGBh4onjM/nqzwitdQBIpA7626+Fv9hD5Ym2nqg+NfborFflK0iRu28ezSUzH/Hce4BP5F1zqtS6o8S5TeFm6hGekW+hX7ciYghaQ0Tx5gcPRAxJKeBRXskp/FEewy6nRe29e4Hmc/iGiEk7LZRuirIsiVKs03YSuoGREFN7hx5CX4BodF48wRerqHbSdMXttuQHacK7BUVR3I0sF4P3Wxf6qaCXo+lKZvtqaQG5mpWK021lF0z19C6WTiSoyAPtqLdx62VG+mR7Whq1m8TxFnmvnS6MVb8K/fQ4kEcdVMeKtQgONkX7T6crjnI0Hgw9HvywR/jX7PV3wIAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 873.43 μs | 954.26 μs | 1.09 | 0.00 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToStream%28MyEventsListerViewModel%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_ToStream%28MyEventsListerViewModel%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### MicroBenchmarks.Serializers.Json_ToStream\u0026lt;MyEventsListerViewModel\u0026gt;.SystemTextJson_Reflection_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Span.IndexerBench\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[CoveredIndex3 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Span.IndexerBench.CoveredIndex3(length%3a%201024).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/runtime/Span/Indexer.cs#L449-#L451\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/bMAy9B8h/4HJRgrmx87Gh8CBgbVZsxRoMaILuOGg2HWuQJUOi1wTr/vsoOzlsu1DwIx/J92iDBISBQMJ7sWuVnd/bEo/ob9EW9XzjfqLHssdWU4P2QHUOi2y5nol345FhtqoIPdNLRUi6wemSs1eLxdVivc+u89UyX76ZrxbZ+u3y+nWW5Vk2OzM9to6JonRkkVLf2ci/9P3uFW8Q8x6rkNaoypA2SttLQeFspQ9x8smqRhfTX2LjmlYbRdrZrStR5CBIRwEiAfHw8LSNSKVMwAhsnXU3X/b/YfeWFbUeOf6Ve+zsZ23LiPE47741XCx+RzkfkT7pQM7rQpkPitRXTXXcRnkdnA3T6LGMIRkMk31Meg9kDMlZsBye5CxPDs9sPHqB1rsfWBDs0GsMCdx22pR7tmxHqmkTeFKmQ7nnIRvHXqJ/xNAZuuETqgOOR2n6As8123HuAK+4ObGjASYTcnfHwnQlTiaQpnB35JYGwVVQacO9tD2A6/jcEHpyXMgj/xce4tWKWnmCZ1YN06FAXtY8Fs50jZX/rnsa8CD7vbmONBmUgu2Ldp/On1tUofPYoCUx+wNK19I+rwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 2.29 μs | 2.56 μs | 1.12 | 0.17 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.IndexerBench_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Span.IndexerBench.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.IndexerBench*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Span.IndexerBench*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Span.IndexerBench*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Span.IndexerBench*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Span.IndexerBench.CoveredIndex3(length: 1024)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in Benchmark.GetChildKeysTests\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[AddChainedConfigurationEmpty - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/Benchmark.GetChildKeysTests.AddChainedConfigurationEmpty.html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/Microsoft.Extensions.Configuration/GetChildKeysTests.cs#L100-#L102\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRUW/TMBB+r9T/YPriVmRNGjYGRZboQgVoqyZt1XhEJr40BseO7MvWivHfd07aB+DlLH9399133xlAhhCQCfaRX4Et60b6X/PPgEWtjbqGQ9hSOsxXShW11BZU4Wyld52XqJ1dNy0e+IfxyBCRrBA8MSmJgLqBaZ7l52eLxdnifJu9W77Jl/nb+eXFRf4+v3ydZcssmx07PbSOGrlyaAFT39nYf+L94SUJi3kPVUhrkCqkDYk5FZS9pDj5YGWjy+lvXrim1abXuHEK+JJx1OBB8YTxm5uHTUQqaQJEYOOsW91u/8O+Wtqo9UDxr9xdZ6+1VRGjcd59b6iY/4nrkHVfdEDndSnNJ4nym8Y6qpFeB2fDNNotYkgGw0Qfk94DEUNyXFgMT3JcTwzPbDx6Zq13P6FEdg9eQ0jYVUfH2pJl9yibNmEP0nQg4uUKR16Cv4PQGVw9gpc7GI/S9Jk91WTHkYG9InIkRwObTNCt96XpFEwmLE3Zek+UBpirWKUNcWm7Y66jc7PQN0dBHqyi28erlbX0yJ5oazYdCsRJ5r50pmus+FfuYcCD6HVTHWo0IDjZF+0+HL8bkKHz0IBFPnsBzvSUGboCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 40.55 ms | 46.04 ms | 1.14 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchmark.GetChildKeysTests_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/Benchmark.GetChildKeysTests.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchmark.GetChildKeysTests*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Benchmark.GetChildKeysTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027Benchmark.GetChildKeysTests*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027Benchmark.GetChildKeysTests*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### Benchmark.GetChildKeysTests.AddChainedConfigurationEmpty\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SystemTextJson_SourceGen_ - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/MicroBenchmarks.Serializers.Json_FromString(IndexViewModel).SystemTextJson_SourceGen_.html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW8TMRC9R8p/MLk4EdvsJi1KCRjRllIKjZCaKBwjszubGPwRjWdJAuW/M87HAbiM5fHMe2/e2AIJgkhCibdyYkoM1+DLldP4PfangEZb8xMw9j/G4BfvMbgpofHL1/e+gu3cwGYSKrBv+tNdJHAz2NK+choaLOEO/EK+arcss+iaAJmm0gRkHHSHxfDibDA4G1zMisvx+XA8vOwPRqOXL85Hz4tiXBS9YyfCOnCjrAJ5oBwbn/pPuF9Rs+D0jlDHfAW6irnTxp8KyuBrs0zMO6+dKbu/5E1wa2M1meCTfDkWkgwgVDIT8uFhPkmZWtsIKTEJPlx9nv2Xu/c80RqB419vj43/ZHyVckyHYeG4WP5O49wBfTCRAppS23ea9BdDq6RGo2HbYjftQqWQHQxT+5jtPVApZMeB1eHIjuOpw9Frt57EGsM3KEmk9UHMxHVjbDVjy6ak3ToTc20bUDMmuQnsJeAjxMbS1Q9AvYR2K8+fxGbFdhwRxDMGJ3Y0ik6Hwu22tE0FnY7Ic3G7ZUgLItSiNpax+G+I0PC6Rdw3J0EI/FlQpK2VK40kNjy16B4K1Enmtgy2cV79K3d3yEe11811ZMiCkmxfsnt3vE5AxwbBgSfZ+wPMN88b1wIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 135.89 μs | 147.01 μs | 1.08 | 0.25 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_FromString%28IndexViewModel%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/MicroBenchmarks.Serializers.Json_FromString%28IndexViewModel%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### MicroBenchmarks.Serializers.Json_FromString\u0026lt;IndexViewModel\u0026gt;.SystemTextJson_SourceGen_\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[DeserializeFromReader - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.ReadJson(ImmutableDictionary(String%2c%20String)).DeserializeFromReader(Mode%3a%20Reflection).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/ReadJson.cs#L74-#L80\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSTW/TQBC9V8p/GHJxIlzbCQGR0K0oTYFCI6QkKke0tcfJov2Idsc0gfLfmY2dA3CZ0c7H2zdvRiMBYSAQ8DZZHQKhyda4p+xTcDZboVdSq5+SFL/WXBeyJcoqJi9ujWlIPmicqzLmpT9crMgru0mh9ZeX2RxDh4HvvTOxGf1g4SqcwRJrjcfWYfKmd6aZiqwJPXOpJCEpg4NxMZ6cj0bno8m6eD17MZ6Np9mrl5PpdFQ8L4pZUQy7To87x41J5cgi5b6xsf+E++ClLbcx77EO+ZZphNxIZU8FpbO12sSfD1YaVQ5+JdfO7JQ+jh75JjNISKHHKkkhubu7X8RILXXAGFg4666+rP+L3VqeaOeR7V+5ZWM/K1vFGH/n3TfDxcnvOM4HpI8qkPOqlHouSX5VtI1spFcsfBjEhYlo0lYwcbTpUQMRTdoNLFqXduOJ1g17Z0+w8+47iw9xxRhSeNcoXa1ZshVJs0vhXuoGRVz5tWMt0S8xNJqufqCXG+yd5fkTPG5Zjg4BnjE4saIB+n1yN/tSNxX2+5DncLNnSI3gaqiVZiy+DXANrxvidWCIhDxaPg2IWyu30hM88tQwaAvEiea+dLoxVvxL99DGgzjy5jpSpFEkLF+U+9A9FyhD49GgpWT4B68ZFrf8AgAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 125.79 μs | 135.51 μs | 1.08 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28ImmutableDictionary%28String%2C%20String%29%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.ReadJson%28ImmutableDictionary%28String%2C%20String%29%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.ReadJson\u0026lt;ImmutableDictionary\u0026lt;String, String\u0026gt;\u0026gt;.DeserializeFromReader(Mode: Reflection)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[SerializeToWriter - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Json.Serialization.Tests.WriteJson(BinaryData).SerializeToWriter(Mode%3a%20SourceGen).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Json/Serializer/WriteJson.cs#L81-#L87\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVR72/TMBD9Xqn/w9EvbkWWpO2QUMGIbUzjxyqkNdo+IpNcWiPHruwLa2H875yTFAn4cpbv3t29984gAWEgkPBWbI6BsEkLPFD6MTibbtBrZfQPRZp/BeNC+uA1Yay+vtRW+eM7RerNHyQWrgP46dpVuIKNa32JN2hn4tV4ZHibqrnK6ypFSLrB6SJfnJ/N52fz8yJ/uVouVst5Os/z5Yvl8nmer/J8NnR63DtuFJUji5T51sb+09yvXtlyF+se65DtUFUha5S2J0DpbK23cfPRqkaX05/iyjV7bTp1ka5YgSCNHiuRgLi9vV/HTK1MwJhYO+suPhf/5T5YVrT3yPGv2l1rP2lbxRyv8+5Lw2DxK8q5QXqvAzmvS2Wigw+adpGN8pqtDdN4ExlD0hsmu5h0HsgYkkGw7J9kkCf7ZzYePcHeu29YEsTbYEjgstWmKtiyDalmn8C9Mi3KeNUrx16iv8PQGrr4jl5tcTzKsid43LEdwwR4xsOJHQ0wmZC7PpSmrXAygSyD6wOPNAiuhlobnqXtFlzL54bQNUdCHm3Ft49XK3fKEzyyapj2AHmieSidaRsr/6V77PNBdrwZR5oMSsH2RbuPw3eNKrQeG7QkZr8BcyggDd8CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.08 μs | 1.21 μs | 1.12 | 0.01 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28BinaryData%29_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Json.Serialization.Tests.WriteJson%28BinaryData%29.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Json.Serialization.Tests.WriteJson\u0026lt;BinaryData\u0026gt;.SerializeToWriter(Mode: SourceGen)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEuw",
                                           "createdAt":  "2025-01-14T08:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "performanceautofiler",
                                           "body":  "\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Collections.Perf_SingleCharFrozenDictionary\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[TryGetValue_False_FrozenDictionary - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Collections.Perf_SingleCharFrozenDictionary.TryGetValue_False_FrozenDictionary(Count%3a%2010).html\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVSUW/aMBB+R+I/3HgxaCkJFE0rk6V1tN2mFm0qqHtEXnIBT46N7EtL1u6/75zAwzopOivnu++++z4bJCAMBBI+ilUTCKvxwhmDOWlnw/g7+nKz0nZrcLFT/sa732ivdHurfDNe++Yz0oMyNW5ulAkcX5UMF662NIdJNhIf+j3DA1VJ6HlioQhJVzicZtPZ2WRyNpmts/fz8yl/43fTi4vJ7Pxtls2zbHTs9Lh33CgKRxYp9YzM/Sfcn17ZfBfvPZYh3aEqQlopbU8FubOl3sbJjVWVzofPYuGqvTYqkl26AsUcBGn0WIgExN3dwzJmyrhZTCyddZff1v/lvlreaO+R4z9397W91baIOR7n3abiYvEnrsOyfdGBnNe5MleK1A9Nu8hGeR1Y+mG0RcaQdILJNiatBjKG5Liw7I7kuJ7sjlG/9wJ7736xlbBCrzEk8KnWplizZCtS1T6B1ji55iGtS+jvMdSGLh/Rqy32e2n6Ak87luOIAG8YnFjRAIMBuetDbuoCBwNIU7g+MKRBcCWU2jAWvxpwNdsNoW2OhDzagr2PruX8ngieeGsYdgXyRPOQO1NXVr6m23T5IFveXEeaDErB8kW5m+PvElWoPVZoSYz+Ao9INALiAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 125.84 ns | 133.43 ns | 1.06 | 0.04 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.Perf_SingleCharFrozenDictionary_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Collections.Perf_SingleCharFrozenDictionary.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.Perf_SingleCharFrozenDictionary*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.Perf_SingleCharFrozenDictionary*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Collections.Perf_SingleCharFrozenDictionary*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Collections.Perf_SingleCharFrozenDictionary*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Collections.Perf_SingleCharFrozenDictionary.TryGetValue_False_FrozenDictionary(Count: 10)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | ubuntu 22.04\nQueue | TigerUbuntu\nBaseline | [0df31bcc243c67bcc575bf48f4e8dfe931ae583f](https://github.com/dotnet/runtime/commit/0df31bcc243c67bcc575bf48f4e8dfe931ae583f)\nCompare | [b35e96be62c0164a70eb3e8295b6241116be3976](https://github.com/dotnet/runtime/commit/b35e96be62c0164a70eb3e8295b6241116be3976)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/0df31bcc243c67bcc575bf48f4e8dfe931ae583f...b35e96be62c0164a70eb3e8295b6241116be3976)\nConfigs | CompilationMode:tiered, LLVM:false, MonoAOT:false, MonoInterpreter:false, RunKind:micro_mono\n\n\n### Regressions in System.Text.Perf_Ascii\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[ToUpperInPlace_Bytes - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_ubuntu 22.04_LLVM=false_MonoAOT=false_MonoInterpreter=false_RunKind=micro_mono/System.Text.Perf_Ascii.ToUpperInPlace_Bytes(Size%3a%206).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Text.Encoding/Perf.Ascii.cs#L106-#L108\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACmVRTW/bMAy9B8h/4HJRgrmxkwbtlkHA0q7oijVY0XjdMdBsOtEgS4ZEr/HW/fdR+Thsu1DQI/nI92iQgDAQSHgvVl0grMc57mj8gL5aL0Kh9Th3X5oG/Z19MKrA9VXHDcOV/olzuBiJd/2eYRJVEXpmKRUh6RqH02w6O5tMziazPHszP5/Oz2fjyeTt9PLi8nWWzbNsdOz02DhuFKUji5T61sb+E+83r2yxjXmPVUi3qMqQ1krbU0HhbKU3cXJnVa2L4S9x7epGG0Xa2aUrUcxBkEaPpUhA3N8/LSNSKRMwAktn3eJz/h92Z1lR45HjX7nH1n7StowYj/NuXXOx+B3l3CJ91IGc14UyHxSpr5q2cRvldXA2DKPVMobkYJjcx2TvgYwhOQqWhyc5ypOHZ9TvvUDj3XcsCFboNYYErlptypwtW5GqmwSelGlR5jzk2rGX6B8xtIYWP9CrDfZ7afoCz1u248gAr5ic2NEAgwG5m11h2hIHA0hTuNkxpUFwFVTaMJe2G3AtnxvCvjku5NGWfPt4tWKrPMEzq4bhoUCe1twVzrS1lf+u2x3wIPd7cx1pMigF2xft7o7fJarQeqzRkhj9AfaxJRG2AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 19.15 ns | 20.35 ns | 1.06 | 0.10 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Perf_Ascii_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_14_2025/refs/heads/main_x64_ubuntu%2022.04_LLVM%3Dfalse_MonoAOT%3Dfalse_MonoInterpreter%3Dfalse_RunKind%3Dmicro_mono_Regression/System.Text.Perf_Ascii.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n\u003cdetails\u003e\n\u003csummary\u003eRepro Steps\u003c/summary\u003e\n\n\n#### Prerequisites (Build files either built locally or downloaded from payload above)\n- Libraries build extracted to `runtime/artifacts` or build instructions: [Libraries README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/libraries/README.md) args: `-subset libs+libs.tests -rc release -configuration Release -arch $RunArch -framework net8.0`\n- CoreCLR product build extracted to `runtime/artifacts/bin/coreclr/$RunOS.$RunArch.Release`, build instructions: [CoreCLR README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/README.md) args: `-subset clr+libs -rc release -configuration Release -arch $RunArch -framework net8.0`\n- Mono Runtime build extracted to `runtime/artifacts/bin/mono/$RunOS.$RunArch.Release`, build instructions: [MONO README](https://github.com/dotnet/runtime/blob/main/docs/workflow/building/mono/README.md) args: `-arch $RunArch -os $RunOS -s mono+libs+host+packs -c Release `\n- Dotnet SDK installed for dotnet commands\n- Running commands from the runtime folder\n\nLinux\n```cmd\n# Set $RunDir to the runtime directory\nRunDir=`pwd`\n\n# Set the OS, arch, and OSId\nRunOS=\u0027linux\u0027\nRunOSId=\u0027linux\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir/artifacts/bin/mono/$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\ncp $RunDir/artifacts/bin/runtime/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/shared/Microsoft.NETCore.App/8.0.0 -rf\ncp $RunDir/artifacts/bin/testhost/net8.0-$RunOS-Release-$RunArch/* $RunDir/artifacts/dotnet-mono -r\ncp $RunDir/artifacts/bin/coreclr/$RunOS.$RunArch.Release/corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\n\n# Create Core Root\n$RunDir/src/tests/build.sh release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir/performance\n\n# One line run:\npython3 $RunDir/performance/scripts/benchmarks_ci.py --csproj $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Perf_Ascii*\u0027 --bdn-artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --packages $RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir/performance/artifacts/packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir/performance/src/benchmarks/micro/MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Perf_Ascii*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir/artifacts/dotnet-mono/shared/Microsoft.NETCore.App/8.0.0/corerun --artifacts $RunDir/artifacts/BenchmarkDotNet.Artifacts --packages $RunDir/performance/artifacts/packages\n```\n\nWindows\n```cmd\n# Set $RunDir to the runtime directory\n$RunDir=\"FullPathHere\"\n\n# Set the OS, arch, and OSId\nRunOS=\u0027windows\u0027\nRunOSId=\u0027win\u0027\nRunArch=\u0027x64\u0027\n\n# Create mono dotnet\nmkdir -p $RunDir/artifacts/dotnet-mono\n$RunDir/build.sh -subset libs.pretest -configuration release -ci -arch $RunArch -testscope innerloop /p:RuntimeArtifactsPath=$RunDir\\artifacts\\bin\\mono\\$RunOS.$RunArch.Release /p:RuntimeFlavor=mono\nxcopy $RunDir\\artifacts\\bin\\runtime\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\shared\\Microsoft.NETCore.App\\8.0.0\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\testhost\\net8.0-$RunOS-Release-$RunArch\\ $RunDir\\artifacts\\dotnet-mono\\ /e /y\nxcopy $RunDir\\artifacts\\bin\\coreclr\\$RunOS.$RunArch.Release\\corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun /y\n\n# Create Core Root\n$RunDir\\src\\tests\\build.cmd release $RunArch generatelayoutonly /p:LibrariesConfiguration=Release\n\n# Clone performance\r\ngit clone --branch main --depth 1 --quiet https://github.com/dotnet/performance.git $RunDir\\performance\n\n# One line run:\npython3 $RunDir\\performance\\scripts\\benchmarks_ci.py --csproj $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --incremental no --architecture $RunArch -f net8.0 --filter \u0027System.Text.Perf_Ascii*\u0027 --bdn-artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --bdn-arguments=\"--anyCategories Libraries Runtime  --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe\"\r\n\n# Individual Commands:\n# Restore\r\ndotnet restore $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --packages $RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Build\ndotnet build $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore /p:NuGetPackageRoot=$RunDir\\performance\\artifacts\\packages /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1\n\n# Run\ndotnet run --project $RunDir\\performance\\src\\benchmarks\\micro\\MicroBenchmarks.csproj --configuration Release --framework net8.0 --no-restore --no-build -- --filter \u0027System.Text.Perf_Ascii*\u0027 --anyCategories Libraries Runtime \" --category-exclusion-filter NoInterpreter NoMono --logBuildOutput --generateBinLog --corerun $RunDir\\artifacts\\dotnet-mono\\shared\\Microsoft.NETCore.App\\8.0.0\\corerun.exe --artifacts $RunDir\\artifacts\\BenchmarkDotNet.Artifacts --packages $RunDir\\performance\\artifacts\\packages\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\n### System.Text.Perf_Ascii.ToUpperInPlace_Bytes(Size: 6)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T08:32:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEu4",
                                           "createdAt":  "2025-01-28T09:09:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkurdek",
                                           "body":  "There is a bunch of big number serialization regressions in this issue, could those be related to https://github.com/dotnet/runtime/pull/110955 @EgorBo ?",
                                           "updatedAt":  "2025-01-28T09:09:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJEu9",
                                           "createdAt":  "2025-01-28T11:19:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e There is a bunch of big number serialization regressions in this issue, could those be related to [dotnet/runtime#110955](https://github.com/dotnet/runtime/pull/110955) [@EgorBo](https://github.com/EgorBo) ?\n\npossibly? I\u0027ll take a look today",
                                           "updatedAt":  "2025-01-28T11:19:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJGXF",
                                           "createdAt":  "2025-01-28T17:25:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T17:25:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cJG4V",
                                           "createdAt":  "2025-01-28T17:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Mono AOT-llvm x64 related regression: https://github.com/dotnet/perf-autofiling-issues/issues/48090\nMono AOT-llvm arm64 related regression: https://github.com/dotnet/perf-autofiling-issues/issues/48112",
                                           "updatedAt":  "2025-01-28T17:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKDrS",
                                           "createdAt":  "2025-01-28T19:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEWMOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-28T19:28:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -arm -mono -commit 4020e05efdfcc6b10eab90aeb8a8b5d80f75786f vs previous --filter System.Text.Json.Tests.Perf_DateTimes*",
                                           "updatedAt":  "2025-01-28T19:27:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKNhe",
                                           "createdAt":  "2025-01-28T19:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Yes, the bot confirms it\u0027s https://github.com/dotnet/runtime/pull/110955 which is quite weird..\n\nAh, I see what is going on",
                                           "updatedAt":  "2025-01-28T19:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKhE0",
                                           "createdAt":  "2025-01-28T20:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEWraw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-28T20:34:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -mono -commit main --envvars MONO_VERBOSE_METHOD:TestMethod\n```cs\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing BenchmarkDotNet.Attributes;\n\npublic class Benchmarks\n{\n    private static ReadOnlySpan\u003cbyte\u003e TwoDigitsCharsAsBytes =\u003e\n        MemoryMarshal.AsBytes\u003cchar\u003e(\"00010203040506070809\" +\n                                    \"10111213141516171819\" +\n                                    \"20212223242526272829\" +\n                                    \"30313233343536373839\" +\n                                    \"40414243444546474849\" +\n                                    \"50515253545556575859\" +\n                                    \"60616263646566676869\" +\n                                    \"70717273747576777879\" +\n                                    \"80818283848586878889\" +\n                                    \"90919293949596979899\");\n\n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    static byte TestMethod(int i)\n    {\n        return TwoDigitsCharsAsBytes[i];\n    }\n\n    [Benchmark]\n    public byte Bench()\n    {\n        return TestMethod(1);\n    }\n}\n```",
                                           "updatedAt":  "2025-01-28T20:34:33Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[mono][Perf] Number serialization regressions (154 Regressions on 1/10/2025 8:45:38 PM)",
        "labels":  [
                       "arch-arm64",
                       "area-System.Numerics",
                       "os-linux",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111482",
        "createdAt":  "2025-01-16T04:31:47Z",
        "number":  111482,
        "author":  "hamarb123",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T09:53:33Z",
        "body":  "### Description\n\nThe additive identity is meant to be a value that you can add to another value that doesn\u0027t change it (that\u0027s the definition basically). That is, you\u0027d expect `a + AdditiveIdentity` and `AdditiveIdentity + a` to be indistinguishable from `a` ideally. However, this is not currently the case for floating point types.\n\nWe currently have `+0` as the additive identity, but `+0 + -0 == -0 + +0 == +0`, meaning it doesn\u0027t act like an additive identity in all cases. `-0` however does act like an additive identity in all cases (specifically, because `-0 + -0 == -0`, and the earlier mentioned cases with `0`s, and `NaN` preservation, and adding a `0` to a non-`0` argument).\n\n### Reproduction Steps\n\nAdd `-0` to the additive identity, and see that it does not preserve its value.\n\n### Expected behavior\n\n```csharp\ndouble a = double.AdditiveIdentity; //value for double.AdditiveIdentity via IAdditiveIdentity\u003cTSelf, TResult\u003e interface (it is not exposed directly on double, so you need to get it from an interface or something like that to get it to compile, or you can just copy \u0026 paste the value inline from the link below)\ndouble b = -0.0; //or any other x\nConsole.WriteLine(a + b); //gives x\n```\n\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Double.cs#L48\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Double.cs#L539\n\n### Actual behavior\n\n```csharp\ndouble a = 0.0; //value for double.AdditiveIdentity via IAdditiveIdentity\u003cTSelf, TResult\u003e interface (it is not exposed directly on double)\ndouble b = -0.0; //or any other x\nConsole.WriteLine(a + b); //gives 0, instead of -0, which would be expected if it always acted like an additive identity - or gives the x if x is not -0\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDon\u0027t use `-0`.\n\n### Configuration\n\nAll.\n\n### Other information\n\nThe JIT is aware of this fact (that -0 is the additive identity, but +0 is not), as pointed out by @tannergooding: https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/gentree.cpp#L31503-L31512.\n\nIf we changed the value of `AdditiveIdentity`, we may also want to change the implementation of things like `Sum`, such that they return `Zero` when there\u0027s no elements, as returning `-0` would probably be surprising to some people and would be a significant break presumably.\n\nFor consistency and correctness, we might want to do the same regarding `MultiplicativeIdentity`, since there may be other number systems where the primary `One` is not technically the multiplicative identity.\n\nNote that this can also be reproduced/exposed like so:\n```csharp\ndouble[] x = [-0.0];\nConsole.WriteLine(x.Sum()); //prints 0, not -0\n```\nit seems reasonable that the sum of 1 element should be that element itself, but this is not currently the case as a result of the `AdditiveIdentity` not actually being an additive identity for floats.\n\nI\u0027m happy to have a go at making a PR to change these things if the preferred direction is solving this \"properly\", but @tannergooding suggested I make an issue to discuss it first (as it would probably be surprising to the average developer that `double.AdditiveIdentity` doesn\u0027t return +0 for example, among other flow on effects).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmqROjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6apEdT",
                                           "createdAt":  "2025-01-16T04:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-16T04:32:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6apE6N",
                                           "createdAt":  "2025-01-16T04:34:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECrjAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2025-01-16T04:34:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @PranavSenthilnathan to consult with @tannergooding and triage this.",
                                           "updatedAt":  "2025-01-16T04:34:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`double/float/Half/NFloat.AdditiveIdentity` should arguably be `-0`, instead of `+0`",
        "labels":  [
                       "area-System.Numerics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111708",
        "createdAt":  "2025-01-22T15:29:21Z",
        "number":  111708,
        "author":  "xakep139",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T09:45:23Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\n\n### Description\n\n\u003c!--\n* Please share a clear and concise description of the performance problem.\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\n  --\u003e\nAfter reading [Performance Improvements in .NET 9](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/#biginteger) related to `BigInteger`, I\u0027ve noticed a comment indicating that C# has poor performance compared to other programming languages in terms of big integer calculations. After quick investigation, it turned out that half of the time in https://github.com/hanabi1224/Programming-Language-Benchmarks/blob/main/bench/algorithm/edigits/1.cs is spent on formatting of a big integer. On .NET 8 it\u0027s done twice as fast, even though there were performance optimizations made in .NET 9.\n\nHere\u0027s a benchmark code that shows the issue:\n\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Numerics;\n\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n\n[MemoryDiagnoser(false)]\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\npublic class Tests\n{\n    private char[] _dest = new char[1_000_000];\n\n    private BigInteger _value =\n        BigInteger.Pow(BigInteger.Parse(string.Concat(Enumerable.Repeat(\"1234567890\", 30))), 1_000);\n\n    [Benchmark(Baseline = true)]\n    public string Stringify() =\u003e _value.ToString();\n\n    [Benchmark]\n    public bool TryFormat() =\u003e _value.TryFormat(_dest, out _);\n}\n```\n\n### Configuration\n\n```\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.2894)\nAMD Ryzen 9 4900H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores\n.NET SDK 9.0.102\n  [Host]     : .NET 8.0.12 (8.0.1224.60305), X64 RyuJIT AVX2\n  Job-TESATW : .NET 8.0.12 (8.0.1224.60305), X64 RyuJIT AVX2\n  Job-VBXNCI : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2\n```\n\n### Regression?\n\nYes. The same code on .NET 8 executes ~3 times faster (but with much more memory being allocated).\n\n### Data\n\n```\n| Method    | Runtime  | Mean    | Ratio | Allocated | Alloc Ratio |\n|---------- |--------- |--------:|------:|----------:|------------:|\n| Stringify | .NET 8.0 | 1.009 s |  1.00 | 1303.9 KB |       1.000 |\n| TryFormat | .NET 8.0 | 1.005 s |  1.00 | 719.71 KB |       0.552 |\n| Stringify | .NET 9.0 | 3.657 s |  3.62 | 585.23 KB |       0.449 |\n| TryFormat | .NET 9.0 | 3.657 s |  3.63 |   1.05 KB |       0.001 |\n```\n\n### Analysis\n\nThis regression might be caused by the #100181, but I haven\u0027t thoroughly tested that regression on older codebase.\nThe regression is reproduced on really big integers (order of magnitude 1000+).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoPuQoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bbCrg",
                                           "createdAt":  "2025-01-22T15:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xakep139",
                                           "body":  "@stephentoub FYI",
                                           "updatedAt":  "2025-01-22T15:29:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bbCth",
                                           "createdAt":  "2025-01-22T15:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-22T15:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcJZX",
                                           "createdAt":  "2025-01-22T17:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDme7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-22T17:29:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -windows_intel -linux_amd --runtimes net8.0 net9.0\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Numerics;\n\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n\n[MemoryDiagnoser(false)]\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\npublic class Tests\n{\n    private char[] _dest = new char[1_000_000];\n\n    private BigInteger _value =\n        BigInteger.Pow(BigInteger.Parse(string.Concat(Enumerable.Repeat(\"1234567890\", 30))), 1_000);\n\n    [Benchmark(Baseline = true)]\n    public string Stringify() =\u003e _value.ToString();\n\n    [Benchmark]\n    public bool TryFormat() =\u003e _value.TryFormat(_dest, out _);\n}\n```",
                                           "updatedAt":  "2025-01-22T18:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcYs7",
                                           "createdAt":  "2025-01-22T17:59:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOED6KAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "xakep139",
                                                                               "createdAt":  "2025-01-24T14:32:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "The bot can repro the regression too, `perf` [points to](https://gist.github.com/EgorBot/e9012966c8daba7a8bb581a0826bbcf4#file-base_asm_d6d49375-asm-L710-L716) `Math.DivRem(..., TenPowMaxPartial)` as the hottest place, but I might be wrong interpretating it",
                                           "updatedAt":  "2025-01-22T18:00:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcbMb",
                                           "createdAt":  "2025-01-22T18:04:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDmxgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-22T18:05:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -profiler -commit 264e39c7b3bcde1c75b20bfef60005ab059b8290 vs previous\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Numerics;\n\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n\n[MemoryDiagnoser(false)]\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\npublic class Tests\n{\n    private char[] _dest = new char[1_000_000];\n\n    private BigInteger _value =\n        BigInteger.Pow(BigInteger.Parse(string.Concat(Enumerable.Repeat(\"1234567890\", 30))), 1_000);\n\n    [Benchmark(Baseline = true)]\n    public string Stringify() =\u003e _value.ToString();\n\n    [Benchmark]\n    public bool TryFormat() =\u003e _value.TryFormat(_dest, out _);\n}\n```",
                                           "updatedAt":  "2025-01-22T18:35:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcr_A",
                                           "createdAt":  "2025-01-22T18:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDnWWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-22T18:35:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -profiler -commit 7a5fb4f025a3c70e4d0e684e8e8fe748931cc96d vs previous\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Numerics;\n\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n\n[MemoryDiagnoser(false)]\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\npublic class Tests\n{\n    private char[] _dest = new char[1_000_000];\n\n    private BigInteger _value =\n        BigInteger.Pow(BigInteger.Parse(string.Concat(Enumerable.Repeat(\"1234567890\", 30))), 1_000);\n\n    [Benchmark(Baseline = true)]\n    public string Stringify() =\u003e _value.ToString();\n\n    [Benchmark]\n    public bool TryFormat() =\u003e _value.TryFormat(_dest, out _);\n}\n```",
                                           "updatedAt":  "2025-01-22T19:03:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dUhv1",
                                           "createdAt":  "2025-02-06T10:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFpFog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "xakep139",
                                                                               "createdAt":  "2025-02-07T14:52:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kzrnm",
                                           "body":  "https://github.com/kzrnm/BigIntegerBenchmark111708\n\nI benchmarked the following implementations on .NET 8 and .NET 9:\n\n-    A clone of the .NET 8 (tag: v8.0.8) implementation\n-    A clone of the .NET 9 (tag: v9.0.1) implementation\n-    The original .NET implementation\n\nAs a result, only the original implementation on .NET 9 is slower than others.\n\n\n\n```\n\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.3037)\n13th Gen Intel Core i5-13500, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 9.0.102\n  [Host]   : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2\n  ShortRun : .NET 8.0.12 (8.0.1224.60305), X64 RyuJIT AVX2\n\nJob=ShortRun  IterationCount=3  LaunchCount=1  \nWarmupCount=3  \n\n```\n| Method                | Toolchain | Mean       | Ratio | Allocated | Alloc Ratio |\n|---------------------- |---------- |-----------:|------:|----------:|------------:|\n| SystemRuntimeNumerics | .NET 8.0  | 1,119.7 ms |  1.00 |  777752 B |       1.000 |\n| Net8Clone             | .NET 8.0  | 1,097.0 ms |  0.98 |  777752 B |       1.000 |\n| Net9Clone             | .NET 8.0  |   985.7 ms |  0.88 |     736 B |       0.001 |\n|                       |           |            |       |           |             |\n| SystemRuntimeNumerics | .NET 9.0  | 2,010.5 ms |  1.00 |     448 B |        1.00 |\n| Net8Clone             | .NET 9.0  | 1,126.2 ms |  0.56 |  777752 B |    1,736.05 |\n| Net9Clone             | .NET 9.0  | 1,010.5 ms |  0.50 |     736 B |        1.64 |\n\n-----------\n\nIn Native AOT, the performance of the original .NET implementation and the cloned implementation became equivalent.\n\n\n```\n\nBenchmarkDotNet v0.14.1-nightly.20240828.182, Windows 11 (10.0.26100.3037)\n13th Gen Intel Core i5-13500 2.50GHz, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 9.0.102\n  [Host]   : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2\n  ShortRun : .NET 8.0.12 (8.0.1224.60305), X64 RyuJIT AVX2\n\nJob=ShortRun  IterationCount=3  LaunchCount=1  \nWarmupCount=3  \n\n```\n| Method                | Toolchain         | Mean    | Ratio | Allocated | Alloc Ratio |\n|---------------------- |------------------ |--------:|------:|----------:|------------:|\n| SystemRuntimeNumerics | .NET 8.0          | 1.148 s |  1.00 |  777752 B |       1.000 |\n| Net8Clone             | .NET 8.0          | 1.147 s |  1.00 |  777752 B |       1.000 |\n| Net9Clone             | .NET 8.0          | 1.035 s |  0.90 |     736 B |       0.001 |\n|                       |                   |         |       |           |             |\n| SystemRuntimeNumerics | .NET 9.0          | 2.054 s |  1.00 |     736 B |        1.00 |\n| Net8Clone             | .NET 9.0          | 1.154 s |  0.56 |  777752 B |    1,056.73 |\n| Net9Clone             | .NET 9.0          | 1.030 s |  0.50 |     400 B |        0.54 |\n|                       |                   |         |       |           |             |\n| SystemRuntimeNumerics | Latest ILCompiler | 1.030 s |  1.00 |     720 B |        1.00 |\n| Net8Clone             | Latest ILCompiler | 1.151 s |  1.12 |  777736 B |    1,080.19 |\n| Net9Clone             | Latest ILCompiler | 1.037 s |  1.01 |     720 B |        1.00 |\n",
                                           "updatedAt":  "2025-03-03T10:12:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dxCu0",
                                           "createdAt":  "2025-02-10T04:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kzrnm",
                                           "body":  "When compiled with `NoOptimization`, the results became equivalent. It seems that tiered compilation has a significant impact.\n\n```csharp\n        [MethodImpl(MethodImplOptions.NoOptimization)]\n        private static unsafe string? FormatBigInteger(\n            bool targetSpan, BigInteger value,\n            string? formatString, ReadOnlySpan\u003cchar\u003e formatSpan,\n            NumberFormatInfo info, Span\u003cchar\u003e destination, out int charsWritten, out bool spanSuccess)\n```\n\n```\n\nBenchmarkDotNet v0.14.1-nightly.20240828.182, Windows 11 (10.0.26100.3037)\n13th Gen Intel Core i5-13500 2.50GHz, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 9.0.102\n  [Host]   : .NET 9.0.1 (9.0.124.61010), X64 RyuJIT AVX2\n  ShortRun : .NET 8.0.12 (8.0.1224.60305), X64 RyuJIT AVX2\n\nJob=ShortRun  IterationCount=3  LaunchCount=1  \nWarmupCount=3  \n\n```\n| Method                | Toolchain         | Mean       | Ratio | Allocated | Alloc Ratio |\n|---------------------- |------------------ |-----------:|------:|----------:|------------:|\n| SystemRuntimeNumerics | .NET 8.0          | 1,141.3 ms |  1.00 |  777752 B |       1.000 |\n| Net8Clone             | .NET 8.0          | 1,130.0 ms |  0.99 |  777752 B |       1.000 |\n| Net9Clone             | .NET 8.0          | 1,009.7 ms |  0.88 |     736 B |       0.001 |\n| Net9NoOptClone        | .NET 8.0          | 2,067.7 ms |  1.81 |     800 B |       0.001 |\n|                       |                   |            |       |           |             |\n| SystemRuntimeNumerics | .NET 9.0          | 2,008.9 ms |  1.00 |     736 B |        1.00 |\n| Net8Clone             | .NET 9.0          | 1,124.3 ms |  0.56 |  777752 B |    1,056.73 |\n| Net9Clone             | .NET 9.0          | 1,012.9 ms |  0.50 |     448 B |        0.61 |\n| Net9NoOptClone        | .NET 9.0          | 2,104.8 ms |  1.05 |     736 B |        1.00 |\n|                       |                   |            |       |           |             |\n| SystemRuntimeNumerics | Latest ILCompiler |   997.1 ms |  1.00 |     720 B |        1.00 |\n| Net8Clone             | Latest ILCompiler | 1,139.5 ms |  1.14 |  777736 B |    1,080.19 |\n| Net9Clone             | Latest ILCompiler | 1,003.9 ms |  1.01 |     720 B |        1.00 |\n| Net9NoOptClone        | Latest ILCompiler | 1,990.2 ms |  2.00 |     720 B |        1.00 |",
                                           "updatedAt":  "2025-03-03T10:12:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gn4eM",
                                           "createdAt":  "2025-03-03T15:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kzrnm",
                                           "body":  "The regression has been occurring since #106360. The DLL right after the build has no issues, but the DLL after crossgen seems to have a regression.\n\nThe size of `System.Runtime.Numerics.dll` after crossgen is different.  \n\n- In commit d45f8b5bcc5, it is **286,720 bytes**.  \n- In commit 380898a3ce4 which is the merge commit for #106360, it is **327,680 bytes**.\n\n\n@EgorBo\n\n## Reproduce\n\nThe `performance-simple` directory contains benchmark projects.\n\n```powershell\nSet-Location $Root\\runtime\n(Get-Process | Where-Object Name -eq dotnet).Kill()\nRemove-Item -Recurse ./artifacts\n./build.cmd clr+libs -rc release -lc release -arch x64\nSet-Location $Root\\runtime\\src\\coreclr\\tools\\aot\\crossgen2\ndotnet build -c Release crossgen2.csproj\nSet-Location $Root\\performance-simple\\coreruns\nRemove-Item -Recurse main -Force\n$cr = \"$Root\\performance-simple\\coreruns\"\nCopy-Item -Recurse \"$Root\\runtime\\artifacts\\bin\\testhost\\net9.0-windows-Release-x64\\shared\\Microsoft.NETCore.App\\9.0.0\" \"$cr\\main\"\nCopy-Item -Recurse \"$Root\\runtime\\artifacts\\bin\\testhost\\net9.0-windows-Release-x64\\shared\\Microsoft.NETCore.App\\9.0.0\" \"$cr\\cros\"\ndotnet $Root\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\crossgen2\\crossgen2.dll \"$cr\\main\\System.Runtime.Numerics.dll\" \"$cr\\main\\System.Private.CoreLib.dll\" \"$cr\\main\\System.Runtime.dll\"  --out \"$cr\\cros\\System.Runtime.Numerics.dll\"\nGet-ChildItem .\\*\\System.Runtime.Numerics.dll, $Root\\runtime\\artifacts\\bin\\coreclr\\windows.x64.Release\\crossgen2\\crossgen2.dll, $Root\\performance-simple\\coreruns\\pr\\System.Private.CoreLib.dll, $Root\\performance-simple\\coreruns\\pr\\System.Runtime.dll\nSet-Location $Root\\performance-simple\ndotnet run -c Release -- --coreRun coreruns\\$Coreruns -m -j short\n```",
                                           "updatedAt":  "2025-03-03T15:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g60fN",
                                           "createdAt":  "2025-03-05T04:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kzrnm",
                                           "body":  "I concluded that the issue is likely due to the conversion from base $2^{32}$ to base $10^9$ being slow when executed in R2R, specifically in Tier-0.  \n\nStrangely, when extracting only the relevant logic into a separate application, it is also slow in .NET 8. This makes me wonder if the fact that it currently runs fast in .NET 8 is actually unintended behavior.\n\nhttps://github.com/kzrnm/BigIntegerBenchmark111708/blob/44cb6997fbf4546339d1cd2ca7f66db8af41ee69/BitsToBase1e9/Program.cs#L28-L55\n\nhttps://github.com/kzrnm/BigIntegerBenchmark111708/actions/runs/13668032999\n\n# windows-latest\n## Default(.NET8) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **1605 msec**\n## Default(.NET9) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **1252 msec**\n## ReadyToRun(.NET8) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **2502 msec**\n## ReadyToRun(.NET9) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **2500 msec**\n## Native(.NET8) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **1245 msec**\n## Native(.NET9) on windows-latest\nBase $10^9$ Length: 35073\nElapsed: **1245 msec**\n\n# macos-latest\n## Default(.NET8) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **1682 msec**\n## Default(.NET9) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **1768 msec**\n## ReadyToRun(.NET8) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **2431 msec**\n## ReadyToRun(.NET9) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **2334 msec**\n## Native(.NET8) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **1707 msec**\n## Native(.NET9) on macos-latest\nBase $10^9$ Length: 35073\nElapsed: **1681 msec**\n\n\n# ubuntu-latest\n## Default(.NET8) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **1257 msec**\n## Default(.NET9) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **1253 msec**\n## ReadyToRun(.NET8) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **2447 msec**\n## ReadyToRun(.NET9) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **2444 msec**\n## Native(.NET8) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **1251 msec**\n## Native(.NET9) on ubuntu-latest\nBase $10^9$ Length: 35073\nElapsed: **1250 msec**\n",
                                           "updatedAt":  "2025-03-05T12:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g-5Cg",
                                           "createdAt":  "2025-03-05T12:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kzrnm",
                                           "body":  "```cs\nusing System.Diagnostics;\nusing System.Numerics;\n\n\nStopwatch.StartNew().Stop();\nvar num = BigInteger.One \u003c\u003c (1 \u003c\u003c 20);\nConsole.WriteLine(\"↑↑↑↑ Warm up↑↑↑↑\");\nConsole.WriteLine(\"↓↓↓↓ToString↓↓↓↓\");\n\nvar sw = Stopwatch.StartNew();\nvar str = num.ToString(\"E9\", null);\nsw.Stop();\nConsole.WriteLine($\"ToString {str}\");\nConsole.WriteLine($\"{sw.ElapsedMilliseconds} ms\");\nConsole.WriteLine(\"---------------\");\n```\n\n```powershell\n$env:DOTNET_JitDisasmSummary=1\ndir .\\coreruns\\*\\corerun.exe | %{ Resolve-Path $_ -Relative; \u0026 \"$_\" .\\bin\\Release\\net9.0\\Console.dll} \u003e result.txt\n```\n\nI investigated the JIT differences between d45f8b5 and 380898a using the assembly mentioned above.  \n\nAdditionally, I tested a version of 380898a with `[MethodImpl(MethodImplOptions.AggressiveOptimization)]` applied to `FormatBigInteger`.  \n\nAs a result, I found differences between d45f8b5 and 380898a, but the version of 380898a with `AggressiveOptimization` behaved equivalently to d45f8b5.\n\n\u003cdetails\u003e\n\n\u003csummary\u003eJIT Summary\u003c/summary\u003e\n\n**.\\coreruns\\380898a3ce4-crossgen\\corerun.exe**\n\n```\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Numerics.BigInteger:GetPartsForBitManipulation(System.Span`1[uint]) [Tier0, IL size=65, code size=206]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   4: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   5: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   6: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   7: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   8: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   9: JIT compiled System.Numerics.BigInteger:.ctor(System.ReadOnlySpan`1[uint],ubyte) [Tier0, IL size=172, code size=462]\n  10: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n  11: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  12: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  13: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  14: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  15: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  16: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  17: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  18: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  19: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  20: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  21: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  22: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  23: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  24: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  25: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  26: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  27: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  28: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  29: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  30: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  31: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  32: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  33: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  34: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  35: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  36: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  38: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  39: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  40: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  41: JIT compiled System.Math:DivRem(ulong,ulong) [Instrumented Tier1, IL size=16, code size=29]\n  42: JIT compiled System.Math:DivRem(ulong,ulong) [Tier1, IL size=16, code size=29]\n  43: JIT compiled System.Math:DivRem(uint,uint) [Instrumented Tier1, IL size=16, code size=33]\n  44: JIT compiled System.Math:DivRem(uint,uint) [Tier1, IL size=16, code size=33]\n  45: JIT compiled System.Span`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  46: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  47: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  48: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  49: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  50: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  51: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  52: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\n  53: JIT compiled System.Span`1[System.Utf16Char]:Slice(int,int) [Tier0, IL size=39, code size=127]\n  54: JIT compiled System.Span`1[System.Utf16Char]:op_Implicit(System.Span`1[System.Utf16Char]) [Tier0, IL size=19, code size=81]\n  55: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[System.Utf16Char,ushort](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=112, code size=210]\n  56: JIT compiled System.Runtime.InteropServices.MemoryMarshal:GetReference[System.Utf16Char](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=8, code size=17]\nToString 6.741140125E+315652\n2050 ms\n```\n\n**.\\coreruns\\380898a3ce4-crossgen-withAO\\corerun.exe**\n\n```\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Numerics.BigInteger:GetPartsForBitManipulation(System.Span`1[uint]) [Tier0, IL size=65, code size=206]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   4: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   5: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   6: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   7: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   8: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   9: JIT compiled System.Numerics.BigInteger:.ctor(System.ReadOnlySpan`1[uint],ubyte) [Tier0, IL size=172, code size=462]\n  10: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n  11: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  12: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  13: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  14: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  15: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  16: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  17: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  18: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  19: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  20: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  21: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  22: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  23: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  24: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  25: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  26: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  27: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  28: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  29: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  30: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  31: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  32: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  33: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  34: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  35: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  36: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  38: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  39: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  40: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  41: JIT compiled System.Number:FormatBigInteger(ubyte,System.Numerics.BigInteger,System.String,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo,System.Span`1[ushort],byref,byref) [FullOpts, IL size=1111, code size=3872]\n  42: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Instrumented Tier0, IL size=69, code size=242]\n  43: JIT compiled System.Number:UInt32ToDecChars[System.Utf8Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=214]\n  44: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Tier1-OSR @0x21 with Dynamic PGO, IL size=69, code size=279]\n  45: JIT compiled System.Number:NumberToString[System.Utf16Char](byref,byref,ushort,int,System.Globalization.NumberFormatInfo) [Instrumented Tier0, IL size=503, code size=1793]\n  46: JIT compiled System.Number:FormatScientific[System.Utf16Char](byref,byref,int,System.Globalization.NumberFormatInfo,ushort) [Instrumented Tier0, IL size=136, code size=699]\n  47: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.Utf16Char) [Tier0, IL size=56, code size=125]\n  48: JIT compiled System.Number:NumberDecimalSeparatorTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  49: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  50: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  51: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=78, code size=180]\n  52: JIT compiled System.Number:FormatExponent[System.Utf16Char](byref,System.Globalization.NumberFormatInfo,int,ushort,int,ubyte) [Tier0, IL size=126, code size=426]\n  53: JIT compiled System.Number:PositiveSignTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  54: JIT compiled System.Number:UInt32ToDecChars[System.Utf16Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=216]\n  55: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  56: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:AppendMultiChar(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=104, code size=159]\n  57: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  58: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  59: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  60: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\nToString 6.741140125E+315652\n1032 ms\n```\n\n**.\\coreruns\\d45f8b5bcc5-crossgen\\corerun.exe**\n\n```\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Numerics.BigInteger:GetPartsForBitManipulation(System.Span`1[uint]) [Tier0, IL size=65, code size=206]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   4: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   5: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   6: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   7: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   8: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   9: JIT compiled System.Numerics.BigInteger:.ctor(System.ReadOnlySpan`1[uint],ubyte) [Tier0, IL size=172, code size=462]\n  10: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n  11: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  12: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  13: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  14: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  15: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  16: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  17: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  18: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  19: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  20: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  21: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  22: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  23: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  24: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  25: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  26: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  27: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  28: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  29: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  30: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  31: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  32: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  33: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  34: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  35: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  36: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  38: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  39: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  40: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  41: JIT compiled System.Number:FormatBigInteger(ubyte,System.Numerics.BigInteger,System.String,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo,System.Span`1[ushort],byref,byref) [Tier-0 switched to FullOpts, IL size=1111, code size=3872]\n  42: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Instrumented Tier0, IL size=69, code size=242]\n  43: JIT compiled System.Number:UInt32ToDecChars[System.Utf8Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=214]\n  44: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Tier1-OSR @0x21 with Dynamic PGO, IL size=69, code size=279]\n  45: JIT compiled System.Number:NumberToString[System.Utf16Char](byref,byref,ushort,int,System.Globalization.NumberFormatInfo) [Instrumented Tier0, IL size=503, code size=1793]\n  46: JIT compiled System.Number+NumberBuffer:get_DigitsPtr() [Tier0, IL size=17, code size=58]\n  47: JIT compiled System.Number:FormatScientific[System.Utf16Char](byref,byref,int,System.Globalization.NumberFormatInfo,ushort) [Instrumented Tier0, IL size=136, code size=699]\n  48: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.Utf16Char) [Tier0, IL size=56, code size=125]\n  49: JIT compiled System.Number:NumberDecimalSeparatorTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  50: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  51: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  52: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=78, code size=180]\n  53: JIT compiled System.Number:FormatExponent[System.Utf16Char](byref,System.Globalization.NumberFormatInfo,int,ushort,int,ubyte) [Tier0, IL size=126, code size=426]\n  54: JIT compiled System.Number:PositiveSignTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  55: JIT compiled System.Number:UInt32ToDecChars[System.Utf16Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=216]\n  56: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  57: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:AppendMultiChar(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=104, code size=159]\n  58: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  59: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  60: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  61: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\nToString 6.741140125E+315652\n1029 ms\n```\n\n\u003c/details\u003e\n\n## crossgen with System.Memory\n\nRunning `crossgen` including `System.Memory.dll` causes a regression even in d45f8b5.\n\n\u003cdetails\u003e\n\n\u003csummary\u003eJIT Summary with System.Memory\u003c/summary\u003e\n\n**.\\coreruns\\380898a3ce4-crossgen\\corerun.exe**\n\n```\n.\\coreruns\\380898a3ce4-crossgen\\corerun.exe\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   4: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   5: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   6: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   7: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   8: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n   9: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  10: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  11: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  12: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  13: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  14: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  15: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  16: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  17: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  18: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  19: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  20: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  21: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  22: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  23: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  24: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  25: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  26: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  27: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  28: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  29: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  30: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  31: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  32: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  33: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  34: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  35: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  36: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  38: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  39: JIT compiled System.Math:DivRem(ulong,ulong) [Instrumented Tier1, IL size=16, code size=29]\n  40: JIT compiled System.Math:DivRem(ulong,ulong) [Tier1, IL size=16, code size=29]\n  41: JIT compiled System.Math:DivRem(uint,uint) [Instrumented Tier1, IL size=16, code size=33]\n  42: JIT compiled System.Math:DivRem(uint,uint) [Tier1, IL size=16, code size=33]\n  43: JIT compiled System.Span`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  44: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  45: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  46: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  47: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  48: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  49: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  50: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\n  51: JIT compiled System.Span`1[System.Utf16Char]:Slice(int,int) [Tier0, IL size=39, code size=127]\n  52: JIT compiled System.Span`1[System.Utf16Char]:op_Implicit(System.Span`1[System.Utf16Char]) [Tier0, IL size=19, code size=81]\n  53: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[System.Utf16Char,ushort](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=112, code size=210]\n  54: JIT compiled System.Runtime.InteropServices.MemoryMarshal:GetReference[System.Utf16Char](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=8, code size=17]\nToString 6.741140125E+315652\n2096 ms\n```\n\n**.\\coreruns\\380898a3ce4-crossgen-withAO\\corerun.exe**\n\n```\n.\\coreruns\\380898a3ce4-crossgen-withAO\\corerun.exe\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   4: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   5: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   6: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   7: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   8: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n   9: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  10: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  11: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  12: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  13: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  14: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  15: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  16: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  17: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  18: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  19: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  20: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  21: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  22: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  23: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  24: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  25: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  26: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  27: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  28: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  29: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  30: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  31: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  32: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  33: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  34: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  35: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  36: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  38: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  39: JIT compiled System.Number:FormatBigInteger(ubyte,System.Numerics.BigInteger,System.String,System.ReadOnlySpan`1[ushort],System.Globalization.NumberFormatInfo,System.Span`1[ushort],byref,byref) [FullOpts, IL size=1111, code size=3872]\n  40: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Instrumented Tier0, IL size=69, code size=242]\n  41: JIT compiled System.Number:UInt32ToDecChars[System.Utf8Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=214]\n  42: JIT compiled System.Number:BigIntegerToDecChars[System.Utf8Char](ulong,System.ReadOnlySpan`1[uint],int) [Tier1-OSR @0x21 with Dynamic PGO, IL size=69, code size=279]\n  43: JIT compiled System.Number:NumberToString[System.Utf16Char](byref,byref,ushort,int,System.Globalization.NumberFormatInfo) [Instrumented Tier0, IL size=503, code size=1793]\n  44: JIT compiled System.Number:FormatScientific[System.Utf16Char](byref,byref,int,System.Globalization.NumberFormatInfo,ushort) [Instrumented Tier0, IL size=136, code size=699]\n  45: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.Utf16Char) [Tier0, IL size=56, code size=125]\n  46: JIT compiled System.Number:NumberDecimalSeparatorTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  47: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  48: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  49: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:Append(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=78, code size=180]\n  50: JIT compiled System.Number:FormatExponent[System.Utf16Char](byref,System.Globalization.NumberFormatInfo,int,ushort,int,ubyte) [Tier0, IL size=126, code size=426]\n  51: JIT compiled System.Number:PositiveSignTChar[System.Utf16Char](System.Globalization.NumberFormatInfo) [Tier0, IL size=17, code size=97]\n  52: JIT compiled System.Number:UInt32ToDecChars[System.Utf16Char](ulong,uint,int) [Instrumented Tier0, IL size=69, code size=216]\n  53: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  54: JIT compiled System.Collections.Generic.ValueListBuilder`1[System.Utf16Char]:AppendMultiChar(System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=104, code size=159]\n  55: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  56: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  57: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  58: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\nToString 6.741140125E+315652\n1042 ms\n```\n\n**.\\coreruns\\d45f8b5bcc5-crossgen\\corerun.exe**\n\n```\n.\\coreruns\\d45f8b5bcc5-crossgen\\corerun.exe\n   1: JIT compiled Program:\u003cMain\u003e$(System.String[]) [Tier0, IL size=145, code size=328]\n   2: JIT compiled System.Buffers.ArrayPool`1[uint]:get_Shared() [Tier0, IL size=6, code size=44]\n   3: JIT compiled System.Buffers.ArrayPool`1[uint]:.cctor() [Tier0, IL size=11, code size=71]\n   4: JIT compiled System.Buffers.SharedArrayPool`1[uint]:.ctor() [Tier0, IL size=31, code size=119]\n   5: JIT compiled System.Buffers.ArrayPool`1[uint]:.ctor() [Tier0, IL size=7, code size=31]\n   6: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Rent(int) [Tier0, IL size=274, code size=956]\n   7: JIT compiled System.GC:AllocateUninitializedArray[uint](int,ubyte) [Tier0, IL size=83, code size=187]\n   8: JIT compiled System.Buffers.SharedArrayPool`1[uint]:Return(uint[],ubyte) [Tier0, IL size=223, code size=1134]\n   9: JIT compiled System.Buffers.SharedArrayPool`1[uint]:InitializeTlsBucketsAndTrimming() [Tier0, IL size=80, code size=319]\n  10: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.cctor() [Tier0, IL size=11, code size=71]\n  11: JIT compiled System.Buffers.SharedArrayPool`1+\u003c\u003ec[uint]:.ctor() [Tier0, IL size=7, code size=31]\n  12: JIT compiled System.Console:WriteLine(System.String) [Tier0, IL size=12, code size=59]\n  13: JIT compiled System.Console:get_Out() [Tier0, IL size=20, code size=87]\n  14: JIT compiled System.Console:.cctor() [Tier0, IL size=11, code size=71]\n  15: JIT compiled System.Console:\u003cget_Out\u003eg__EnsureInitialized|26_0() [Tier0, IL size=63, code size=189]\n  16: JIT compiled System.ConsolePal:OpenStandardOutput() [Tier0, IL size=34, code size=130]\n  17: JIT compiled System.Console:get_OutputEncoding() [Tier0, IL size=72, code size=204]\n  18: JIT compiled System.ConsolePal:get_OutputEncoding() [Tier0, IL size=11, code size=191]\n  19: JIT compiled System.Text.EncodingHelper:GetSupportedConsoleEncoding(int) [Tier0, IL size=53, code size=186]\n  20: JIT compiled System.ConsolePal:GetStandardFile(int,int,ubyte) [Tier0, IL size=50, code size=180]\n  21: JIT compiled System.ConsolePal:get_InvalidHandleValue() [Tier0, IL size=7, code size=41]\n  22: JIT compiled System.ConsolePal:ConsoleHandleIsWritable(long) [Tier0, IL size=24, code size=63]\n  23: JIT compiled Interop+Kernel32:WriteFile(long,ulong,int,byref,long) [Tier0, IL size=39, code size=303]\n  24: JIT compiled System.ConsolePal+WindowsConsoleStream:.ctor(long,int,ubyte) [Tier0, IL size=37, code size=90]\n  25: JIT compiled System.IO.ConsoleStream:.ctor(int) [Tier0, IL size=31, code size=71]\n  26: JIT compiled Interop+Kernel32:GetFileType(long) [Tier0, IL size=23, code size=198]\n  27: JIT compiled System.Console:CreateOutputWriter(System.IO.Stream) [Tier0, IL size=49, code size=205]\n  28: JIT compiled System.Text.EncodingExtensions:RemovePreamble(System.Text.Encoding) [Tier0, IL size=25, code size=110]\n  29: JIT compiled System.Text.ConsoleEncoding:.ctor(System.Text.Encoding) [Tier0, IL size=14, code size=52]\n  30: JIT compiled System.IO.ConsoleStream:get_CanWrite() [Tier0, IL size=7, code size=18]\n  31: JIT compiled System.Text.ConsoleEncoding:GetEncoder() [Tier0, IL size=12, code size=57]\n  32: JIT compiled System.IO.ConsoleStream:get_CanSeek() [Tier0, IL size=2, code size=12]\n  33: JIT compiled System.Text.ConsoleEncoding:GetPreamble() [Tier0, IL size=6, code size=27]\n  34: JIT compiled System.Text.ConsoleEncoding:GetMaxByteCount(int) [Tier0, IL size=13, code size=63]\n  35: JIT compiled System.ConsolePal+WindowsConsoleStream:Flush() [Tier0, IL size=26, code size=57]\n  36: JIT compiled System.IO.ConsoleStream:Flush() [Tier0, IL size=1, code size=10]\n  37: JIT compiled System.ConsolePal+WindowsConsoleStream:Write(System.ReadOnlySpan`1[ubyte]) [Tier0, IL size=36, code size=149]\n  38: JIT compiled System.ConsolePal+WindowsConsoleStream:WriteFileNative(long,System.ReadOnlySpan`1[ubyte],ubyte) [Tier0, IL size=115, code size=246]\n↑↑↑↑ Warm up↑↑↑↑\n↓↓↓↓ToString↓↓↓↓\n  39: JIT compiled System.Math:DivRem(ulong,ulong) [Instrumented Tier1, IL size=16, code size=29]\n  40: JIT compiled System.Math:DivRem(ulong,ulong) [Tier1, IL size=16, code size=29]\n  41: JIT compiled System.Math:DivRem(uint,uint) [Instrumented Tier1, IL size=16, code size=33]\n  42: JIT compiled System.Math:DivRem(uint,uint) [Tier1, IL size=16, code size=33]\n  43: JIT compiled System.Span`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  44: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[ushort,System.Utf16Char](System.ReadOnlySpan`1[ushort]) [Tier0, IL size=112, code size=210]\n  45: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  46: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:.ctor(ulong,int) [Tier0, IL size=46, code size=61]\n  47: JIT compiled System.Span`1[System.Utf16Char]:Slice(int) [Tier0, IL size=41, code size=118]\n  48: JIT compiled System.Span`1[System.Utf16Char]:.ctor(byref,int) [Tier0, IL size=15, code size=39]\n  49: JIT compiled System.ReadOnlySpan`1[System.Utf16Char]:CopyTo(System.Span`1[System.Utf16Char]) [Tier0, IL size=47, code size=84]\n  50: JIT compiled System.Buffer:Memmove[System.Utf16Char](byref,byref,ulong) [Tier0, IL size=61, code size=51]\n  51: JIT compiled System.Span`1[System.Utf16Char]:Slice(int,int) [Tier0, IL size=39, code size=127]\n  52: JIT compiled System.Span`1[System.Utf16Char]:op_Implicit(System.Span`1[System.Utf16Char]) [Tier0, IL size=19, code size=81]\n  53: JIT compiled System.Runtime.InteropServices.MemoryMarshal:Cast[System.Utf16Char,ushort](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=112, code size=210]\n  54: JIT compiled System.Runtime.InteropServices.MemoryMarshal:GetReference[System.Utf16Char](System.ReadOnlySpan`1[System.Utf16Char]) [Tier0, IL size=8, code size=17]\nToString 6.741140125E+315652\n2088 ms\n```\n\n\u003c/details\u003e\n\n\n",
                                           "updatedAt":  "2025-03-05T13:55:18Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[Perf] BigInteger formatting performance regression in .NET 9",
        "labels":  [
                       "area-System.Numerics",
                       "tenet-performance",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112474",
        "createdAt":  "2025-02-12T08:45:20Z",
        "number":  112474,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_BJig==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-02-12T13:27:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T09:37:08Z",
        "body":  "https://github.com/dotnet/runtime/pull/98643#discussion_r1934851956\n\nCurrently, some conversions to floating-point types  are done in two-step approaches: First converting to a larger floating-point type, then downcast to the target type, both of which performs a rounding. This creates an issue of double-rounding: the rounding result of the first step can change the decision of second type. \n\nFor example, `0x01010001` has 25 significand digits. When rounding to bfloat16 precision (8 significant digits), the trailing bits is `0x10001` and ties to increment. When rounding with two-steps in int-\u003efloat-\u003ebfloat16, it will first round into `0x01010000` in float precision (24 significant digits), the the trailing bits `0x10000` is a midpoint and ties to even, which is a decrement.\n\nThe problematic cases including:\n\n### Integer to Half\n\nAll integer to `Half` conversions are currently done in two steps. Note that double rounding error only applies to integers that can\u0027t be perfectly converted to `float` (`(U)Int32` or larger). The reverse direction (Half-\u003eInt32) doesn\u0027t apply because `Half` can be perfectly converted into `float.\n\n### Decimal to binary floating points\n\nAll `decimal` to binary floating point are done in two steps with converting to `double` first. This is a long-standing behavior that may need breaking change announcement.\n\n### BigInteger to float/Half/BFloat16\n\nAll `BigInteger` to binary floating point are converting to `double` first. This is also long-standing behavior from .NET Framework.\n\n### Decimal32/64/128 to float/Half/BFloat16\n\nNot currently implemented, but we should pay attention in the future.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOniHLsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6eIcuz",
                                           "createdAt":  "2025-02-12T08:45:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-12T08:45:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Correct rounding for integer/decimal-\u003eFP conversion",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112655",
        "createdAt":  "2025-02-18T15:43:02Z",
        "number":  112655,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCg-hA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RaymondEllis",
                                            "createdAt":  "2025-05-19T02:54:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T09:23:10Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Matrix4x4CreatePerspectiveFieldOfView-A/10839289)._\n\n---\nThe Matrix4x4.CreatePerspectiveFieldOfView method is validating that nearZ is less than farZ. This makes sense most of the time, but when you\u0027re building a projection for a reversed depth-buffer it\u0027s a problem, since near and far need to be swapped.\n\nI think the correct thing to do is to simply validate that nearZ and farZ are greater than 0.\n\n---\n### Original Comments\n\n#### Aeron Jay Omega (CSI INTERFUSION INC) [MSFT] on 1/30/2025, 00:36 AM: \n\n\u003cp\u003eThanks for reaching out! To better understand the issue, could you clarify when it occurs—during development, build, or runtime? Please also let us know the version of Visual Studio you’re using and any libraries like DirectX or Unity. If you’ve seen any error messages, or can share the relevant code, that would be helpful. Have you tried running the app outside of Visual Studio? Does the issue occur in one project or across multiple? Also, if you’ve recently updated Visual Studio or related libraries, please mention that. Looking forward to your response!\u003c/p\u003e\n\n#### Raúl Pardo on 1/30/2025, 01:14 AM: \n\n\u003cp\u003eOf course\u003cbr\u003e\nIt happens at runtime. Here is an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan class=\"hljs-comment\"\u003e//\u003cspan class=\"hljs-doctag\"\u003eNOTE:\u003c/span\u003e _near_z and _far_z are swapped because we use inverse depth in d3d12 renderer.\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e fieldOfView = \u003cspan class=\"hljs-number\"\u003e0.25f\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e aspectRatio = \u003cspan class=\"hljs-number\"\u003e1.6f\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e nearZ = \u003cspan class=\"hljs-number\"\u003e0.01f\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e fazZ = \u003cspan class=\"hljs-number\"\u003e1000f\u003c/span\u003e;\nMatrix4x4.CreatePerspectiveFieldOfView(fieldOfView * MathF.PI, aspectRatio, farZ, nearZ)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt results in the following exception:\u003cbr\u003e\nSystem.ArgumentOutOfRangeException: ‘nearPlaneDistance (‘1000’) must be less than ‘0,01’. Arg_ParamName_Name\u003cbr\u003e\nArgumentOutOfRange_ActualValue’\u003c/p\u003e\n\u003cp\u003eThe expected behavior is that of the DirectX Math function \u003ca target=\u0027_blank\u0027 href=\"https://learn.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmmatrixperspectivefovrh\"\u003eXMMatrixPerspectiveFovRH\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIn this function, parameter validation is also performed, but in the case of nearZ and farZ, it is only validated that the valuesare greater than zero.\u003c/p\u003e\n\n#### Feedback Bot on 2/5/2025, 05:47 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnwmU2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6e7AeD",
                                           "createdAt":  "2025-02-18T16:44:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-18T16:44:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fCZTb",
                                           "createdAt":  "2025-02-19T10:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Selinux24",
                                           "body":  "following",
                                           "updatedAt":  "2025-02-19T10:27:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Matrix4x4.CreatePerspectiveFieldOfView ArgumentOutOfRangeException",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113295",
        "createdAt":  "2025-03-08T22:27:16Z",
        "number":  113295,
        "author":  "hellcats",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T03:08:17Z",
        "body":  "### Description\n\nI am seeing Vector.SinCos() producing different results for identical inputs in a given lane when introducing a NaN in some other lane. Changing lane 3 from 0.0 to NaN causes Cos on lane 0 to change value. \n\n\n### Reproduction Steps\n\n```\npublic void TestVectorSinCos()\n{\n    Vector\u003cfloat\u003e x = new Vector\u003cfloat\u003e([0.029831253f, 0.035057854f, 2.5535614f, 0.0f]);\n    (var sinx, var cosx) = Vector.SinCos(x);\n\n    Vector\u003cfloat\u003e y = new Vector\u003cfloat\u003e([0.029831253f, 0.035057854f, 2.5535614f, float.NaN]);\n    (var siny, var cosy) = Vector.SinCos(y);\n\n    for (int i = 0; i \u003c 3; i++)\n    {\n        Assert.That(sinx[i], Is.EqualTo(siny[i]));\n        Assert.That(cosx[i], Is.EqualTo(cosy[i]));\n    }\n}\n```\n\n### Expected behavior\n\nSIMD lanes should produce same the result for the same input.\n\n### Actual behavior\n\nCos on lane 0 changes from 0.9995551 to 0.99955505 when lane 3 changes from 0.0 to NaN. Each lane should operate independently.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nReplace Vector sin and cos operations with scalar versions.  But this has a negative performance impact.\n\n### Configuration\n\ndotnet --info\n```\n.NET SDK:\n Version:           9.0.101\n Commit:            eedb237549\n Workload version:  9.0.100-manifests.4a280210\n MSBuild version:   17.12.12+1cce77968\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  15.3\n OS Platform: Darwin\n RID:         osx-arm64\n Base Path:   /usr/local/share/dotnet/sdk/9.0.101/\n\n.NET workloads installed:\nThere are no installed workloads to display.\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.0\n  Architecture: arm64\n  Commit:       9d5a6a9aa4\n\n.NET SDKs installed:\n  6.0.301 [/usr/local/share/dotnet/sdk]\n  8.0.203 [/usr/local/share/dotnet/sdk]\n  9.0.101 [/usr/local/share/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 6.0.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n\nOther architectures found:\n  None\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOobbieQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hcMKi",
                                           "createdAt":  "2025-03-08T22:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-08T22:52:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hiHMh",
                                           "createdAt":  "2025-03-10T10:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Doesn\u0027t reproduce on win-arm64 or win-x64 for me. Both are producing 0.9995551 consistently.",
                                           "updatedAt":  "2025-03-10T10:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hjXX-",
                                           "createdAt":  "2025-03-10T12:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "OP is running `osx-arm64`. I\u0027d hesitate to call it an Apple Silicon bug...",
                                           "updatedAt":  "2025-03-10T12:21:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hmFKE",
                                           "createdAt":  "2025-03-10T16:11:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "`Vector.SinCos` is now using the same managed algorithm. You can copy the code from here:\n\nhttps://github.com/dotnet/runtime/blob/5bc50c91bdbea8962708f5ad5d02ec05ffb7b50b/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs#L1902\n\nand use a debugger to inspect which steps the differences were started.",
                                           "updatedAt":  "2025-03-10T16:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hoUJx",
                                           "createdAt":  "2025-03-10T20:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hellcats",
                                           "body":  "\u003e `Vector.SinCos` is now using the same managed algorithm. You can copy the code from here:\n\u003e \n\u003e [runtime/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs](https://github.com/dotnet/runtime/blob/5bc50c91bdbea8962708f5ad5d02ec05ffb7b50b/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs#L1902)\n\u003e \n\u003e Line 1902 in [5bc50c9](/dotnet/runtime/commit/5bc50c91bdbea8962708f5ad5d02ec05ffb7b50b)\n\u003e \n\u003e  public static (TVectorSingle Sin, TVectorSingle Cos) SinCosSingle\u003cTVectorSingle, TVectorInt32, TVectorDouble, TVectorInt64\u003e(TVectorSingle x) \n\u003e and use a debugger to inspect which steps the differences were started.\n\nToo many references to internal symbols  - I can\u0027t compile the source code for SinCos.\nBut looking at the code, there are two LessThanAll comparisons which should both return false with a NaN meaning the ScalarFallBack should be called which just calls float.SinCos for all the elements. So the scalar version isn\u0027t matching the SIMD version.",
                                           "updatedAt":  "2025-03-10T20:23:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hoiuu",
                                           "createdAt":  "2025-03-10T20:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hellcats",
                                           "body":  "An even simpler test that fails on Mac M1:\n```\n[Test]\npublic void TestScalarSinCos()\n{\n    float x = 0.029831253f;\n    var (sin, cos) = float.SinCos(x);\n    var cos1 = float.Cos(x);\n    Assert.That(cos, Is.EqualTo(cos1));\n}\n```\nSo my theory is that scalar SinCos on Mac M1 doesn\u0027t match Sin and Cos separately, and Vector.SinCos falls back to scalar if a NaN appears in any lane. This would explain why a NaN in one lane affects the result in some other lane.",
                                           "updatedAt":  "2025-03-10T20:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6htuJ5",
                                           "createdAt":  "2025-03-11T08:21:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Yes, the scalar versions are implemented with platform CRT, not managed algorithm. I think there are various corner cases where they produce different results on each platform.",
                                           "updatedAt":  "2025-03-11T08:21:34Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Numerics.Vector.SinCos() bug",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114663",
        "createdAt":  "2025-04-15T00:15:26Z",
        "number":  114663,
        "author":  "hamarb123",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCCUJQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2025-04-16T08:12:27Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "crookseta",
                                            "createdAt":  "2025-05-05T17:32:24Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-23T08:36:24Z",
        "body":  "### Background and motivation\n\n`BigMul` is useful for performing large multiplications (e.g., 64x64-\u003e128, 32x32-\u003e64, etc.), but there is currently no way to do it generically. You can use this to detect overflow without throwing \u0026 how much by, you can use it to write larger integral types generically, etc.\n\n`MultiplyHigh` is useful for things like fixed point division - it is the high part of `BigMul`, e.g.,\n```csharp\nuint x = ...;\nvar divBy3 = x / 3; // same as `MultiplyHigh(x, 0xAAAAAAABu) \u003e\u003e 1`, which is what the JIT will emit\n```\nbut there is also no way to do this generically. Ideally you can pre-compute the constant for your dynamic division factor \u0026 then use it for division in generic algorithms.\nBackground: https://rubenvannieuwpoort.nl/posts/division-by-constant-unsigned-integers\n\n`MultiplyLow` is corresponding the low part of `BigMul` - for fixed sized types, it would be the same as `a * b`, for `BigInteger` it would instead be the low `max(left.bits, right.bits)` bits, as this works best for most uses of the APIs, e.g., fixed point division \u0026 allows for reduced allocations, etc.\n\n### API Proposal\n\n```csharp\nnamespace System.Numerics\n{\n    public interface IBinaryInteger\u003cTSelf\u003e\n    {\n        static virtual (TSelf High, TSelf Low) BigMul(TSelf left, TSelf right)\n        {\n            // We cannot really implement this properly in general using existing APIs afaict (although, I suppose we could do it bit-by-bit \u0026 make it correct), so just make it work for fixed integer sized types in cases where it doesn\u0027t overflow\n            TSelf result = checked(left * right);\n            return (IsNegative(result) ? ~TSelf.Zero : TSelf.Zero, result);\n        }\n\n        // If we have a good BigMul, we can implement MultiplyHigh \u0026 MultiplyLow correctly\n        static virtual TSelf MultiplyHigh(TSelf left, TSelf right) =\u003e BigMul(left, right).High;\n        static virtual TSelf MultiplyLow(TSelf left, TSelf right) =\u003e BigMul(left, right).Low;\n    }\n\n    public static class Vector\n    {\n        public static (Vector\u003cT\u003e High, Vector\u003cT\u003e Low) BigMul\u003cT\u003e(Vector\u003cT\u003e left, Vector\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        public static Vector\u003cT\u003e MultiplyHigh\u003cT\u003e(Vector\u003cT\u003e left, Vector\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        // MultiplyLow is not necessary as it works the same as * on fixed sized integer types, which are the only relevant supported element types for `Vector\u003cT\u003e`\n    }\n\n    public readonly struct BigInteger\n    {\n        // low has the bottom max(left.bits, right.bits) bits, and high has all the bits above that\n        public static BigInteger MultiplyHigh(BigInteger left, BigInteger right) =\u003e ...;\n        public static BigInteger MultiplyLow(BigInteger left, BigInteger right) =\u003e ...;\n        public static static (BigInteger High, BigInteger Low) BigMul(BigInteger left, BigInteger right) =\u003e ...;\n    }\n}\n\nnamespace System\n{\n    public readonly struct Byte/Char/Int128/Int16/Int32/Int64/IntPtr/SByte/UInt128/UInt16/UInt32/UInt64/UIntPtr\n    {\n        public static TSelf MultiplyHigh(TSelf left, TSelf right) =\u003e ...;\n        static (TSelf High, TSelf Low) IBinaryInteger\u003cTSelf\u003e.BigMul(TSelf left, TSelf right) =\u003e ...;\n        static TSelf IBinaryInteger\u003cTSelf\u003e.MultiplyLow(TSelf left, TSelf right) =\u003e left * right;\n    }\n}\n\nnamespace System.Runtime.Intrinsics\n{\n    public static class Vector64\n    {\n        public static (Vector64\u003cT\u003e High, Vector64\u003cT\u003e Low) BigMul\u003cT\u003e(Vector64\u003cT\u003e left, Vector64\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        public static Vector64\u003cT\u003e MultiplyHigh\u003cT\u003e(Vector64\u003cT\u003e left, Vector64\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        // MultiplyLow is not necessary as it works the same as * on fixed sized integer types, which are the only relevant supported element types for `Vector64\u003cT\u003e`\n    }\n\n    public static class Vector128\n    {\n        public static (Vector128\u003cT\u003e High, Vector128\u003cT\u003e Low) BigMul\u003cT\u003e(Vector128\u003cT\u003e left, Vector128\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        public static Vector128\u003cT\u003e MultiplyHigh\u003cT\u003e(Vector128\u003cT\u003e left, Vector128\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        // MultiplyLow is not necessary as it works the same as * on fixed sized integer types, which are the only relevant supported element types for `Vector128\u003cT\u003e`\n    }\n\n    public static class Vector256\n    {\n        public static (Vector256\u003cT\u003e High, Vector256\u003cT\u003e Low) BigMul\u003cT\u003e(Vector256\u003cT\u003e left, Vector256\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        public static Vector256\u003cT\u003e MultiplyHigh\u003cT\u003e(Vector256\u003cT\u003e left, Vector256\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        // MultiplyLow is not necessary as it works the same as * on fixed sized integer types, which are the only relevant supported element types for `Vector256\u003cT\u003e`\n    }\n\n    public static class Vector512\n    {\n        public static (Vector512\u003cT\u003e High, Vector512\u003cT\u003e Low) BigMul\u003cT\u003e(Vector512\u003cT\u003e left, Vector512\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        public static Vector512\u003cT\u003e MultiplyHigh\u003cT\u003e(Vector512\u003cT\u003e left, Vector512\u003cT\u003e right) where T : IBinaryInteger\u003cT\u003e;\n        // MultiplyLow is not necessary as it works the same as * on fixed sized integer types, which are the only relevant supported element types for `Vector512\u003cT\u003e`\n    }\n}\n```\n\n\n### API Usage\n\nFixed point division in portable SIMD:\n```csharp\n//pre-compute the constants for division by N\nvar xDivByN = VectorXxx.MultiplyHigh(x, factor) \u003e\u003e shift;\n```\n\nDetect overflow when multiplying without exception (for fixed sized types):\n```csharp\nbool TryMultiply(T left, T right, [MaybeNullWhen(false)] out T result) where T : IBinaryInteger\u003cT\u003e\n{\n    var (high, low) = T.BigMul(left, right);\n    result = low;\n\n    //check sign bit matches (if signed) \u0026 that high is just the sign (if signed) / zero (if unsigned) extension of low:\n    return T.IsNegative(high) == T.IsNegative(low) \u0026\u0026 T.IsZero(T.IsNegative(high) ? ~high : high);\n}\n```\n\nFast division by 3 (or can be adjusted to any other constant integer) of BigInteger:\n```csharp\nprivate static readonly object?[] _factors = new object?[31];\n\nprivate static BigInteger GetFactorFor(long numBits)\n{\n    var shift = ulong.Log2((ulong)numBits - 1) + 1;\n    if (shift \u003e 30) throw new Exception(...);\n    ref object? slot = ref _factors[shift];\n    var value = Volatile.Read(in slot);\n    if (value != null) return (BigInteger)value;\n    BigInteger valueBigInt = ((BigInteger)2 \u003c\u003c (1 \u003c\u003c (int)shift)) / 3 + 1;\n    Volatile.Write(ref slot, valueBigInt);\n    return valueBigInt;\n}\n\npublic static BigInteger DivideBy3(BigInteger x)\n{\n    if (BigInteger.IsNegative(x)) return -DivideBy3(-x);\n    var numBits = x.GetBitLength();\n    if (numBits \u003c 31) return (int)x / 3;\n    else return BigInteger.MultiplyHigh(x, GetFactorFor(numBits)) \u003e\u003e 1;\n}\n```\n\nDefining an integer type of double the size:\n```csharp\nreadonly struct DoubleInt\u003cT\u003e : IBinaryInteger\u003cDoubleInt\u003cT\u003e\u003e where T : IBinaryInteger\u003cT\u003e\n{\n    private readonly T low, high;\n    ...\n    public static DoubleInt\u003cT\u003e operator *(DoubleInt\u003cT\u003e left, DoubleInt\u003cT\u003e right)\n    {\n        // note: using karatsuba, etc., will be more efficient at some point - this is just for demonstration purposes\n        T high, low;\n        (high, low) = T.BigMul(left.low, right.low);\n        high += left.low * right.high + left.high * right.low;\n    }\n}\n\nusing UInt256 = DoubleInt\u003cUInt128\u003e;\n```\n\n### Alternative Designs\n\n- Make a seperate interface for `BigMul` \u0026 friends.\n- Make the APIs on xplat simd spell out the types instead of providing it generically.\n- Also provide an API to get the values for fixed point division.\n- For `BigInteger`: Make `high` just return `0`/`-1` to match what happens for `int` \u0026 friends when they don\u0027t overflow, and have `low` be the same as `a * b`. This would also remove the need for `MultiplyLow`, as it would just be exactly the same as `a * b`. Or, we could provide APIs for both meanings.\n- We could make the default implementation for `BigMul` always throw, as it\u0027s hard to guarantee it works as expected in general - alternatively, we might instead be able to implement it bit-by-bit, or via the Read/Write byte APIs.\n- We may want to also have `TensorPrimitives.MultiplyHigh`.\n\n### Risks\n\n- More APIs.\n- Confusion with how it works on `BigInteger`.\n- Not easy to provide a sensible default implementation for `BigMul`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpxhLHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nGEsf",
                                           "createdAt":  "2025-04-15T00:15:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-15T00:15:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Generic \u0026 simd `BigMul`, `MultiplyHigh`, and `MultiplyLow`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116043",
        "createdAt":  "2025-05-27T20:10:34Z",
        "number":  116043,
        "author":  "Molth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLEH_g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-08-13T15:29:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-26T21:06:30Z",
        "body":  "### Background and motivation\n\nwhen people need to calculate the `Log10` of an integer,  \nthey often use:\n\n`(int)Math.Log10((double)value)`\n\n```csharp\n        [Intrinsic]\n        [MethodImpl(MethodImplOptions.InternalCall)]\n        public static extern double Log10(double d);\n```\n\nhowever, for calculating the `Log10` of an integer,  \ndon’t actually need to convert it to a double and then back to an integer.  \nthis approach incurs two overheads of converting between `double` and `int.`\n\nin fact, can use `BitOperations.Log2` and a small lookup table to speed up `Log10` calculation for integers.\n// https://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10\n// Find integer log base 10 of an integer\nhere is a simple benchmark:\n\n```csharp\n\nusing System.Numerics;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Configs;\n\nnamespace TestLog10\n{\n    [ShortRunJob]\n    [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)]\n    [CategoriesColumn]\n    public class BenchmarkLog10\n    {\n        [Params(1000, 10000, 100000)] public int Count { get; set; }\n\n        public List\u003cuint\u003e Input;\n\n        public int Value1;\n        public int Value2;\n\n        [GlobalSetup]\n        public void Init()\n        {\n            Input = new List\u003cuint\u003e(Count);\n            for (int i = 0; i \u003c Count; i++)\n            {\n                Input.Add((uint)Random.Shared.Next());\n            }\n        }\n\n        // https://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10\n        // Find integer log base 10 of an integer\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Log10(uint value)\n        {\n            value |= 1;\n            int num1 = BitOperations.Log2(value) + 1;\n            int num2 = (num1 * 0x4D1) \u003e\u003e 0xC;\n            return value \u003c Unsafe.Add(ref MemoryMarshal.GetReference(PowersOf10), num2) ? num2 - 1 : num2;\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public static int Log10(ulong value)\n        {\n            value |= 1;\n            int num1 = BitOperations.Log2(value) + 1;\n            int num2 = (num1 * 0x4D1) \u003e\u003e 0xC;\n            return value \u003c Unsafe.Add(ref MemoryMarshal.GetReference(PowersOf10), num2) ? num2 - 1 : num2;\n        }\n\n        private static ReadOnlySpan\u003culong\u003e PowersOf10 =\u003e new ulong[]\n        {\n            0x1, 0xA, 0x64, 0x3E8, 0x2710, 0x186A0, 0xF4240, 0x989680, 0x5F5E100, 0x3B9ACA00, 0x2540BE400, 0x174876E800,\n            0xE8D4A51000, 0x9184E72A000, 0x5AF3107A4000, 0x38D7EA4C68000, 0x2386F26FC10000, 0x16345785D8A0000,\n            0xDE0B6B3A7640000, 0x8AC7230489E80000\n        };\n\n        [BenchmarkCategory(\"Log10\")]\n        [Benchmark]\n        public void Log10ByBitOperations()\n        {\n            foreach (uint i in Input)\n            {\n                Value1 ^= Log10(i);\n            }\n        }\n\n        [BenchmarkCategory(\"Log10\")]\n        [Benchmark]\n        public void Log10ByMath()\n        {\n            foreach (uint i in Input)\n            {\n                Value2 ^= (int)Math.Log10((double)i);\n            }\n        }\n    }\n}\n\n```\n\nresult:\n\n```\n\n| Method               | Count  | Mean       | Error      | StdDev    |\n|--------------------- |------- |-----------:|-----------:|----------:|\n| Log10ByBitOperations | 1000   |   1.237 us |  0.1159 us | 0.0064 us |\n| Log10ByMath          | 1000   |   7.003 us |  1.5248 us | 0.0836 us |\n| Log10ByBitOperations | 10000  |  12.155 us |  0.6631 us | 0.0363 us |\n| Log10ByMath          | 10000  |  70.714 us |  5.7563 us | 0.3155 us |\n| Log10ByBitOperations | 100000 | 326.526 us | 61.5916 us | 3.3760 us |\n| Log10ByMath          | 100000 | 710.025 us | 66.2781 us | 3.6329 us |\n\n```\n\n### API Proposal\n\n```csharp\n\npublic interface IBinaryInteger\u003cTSelf\u003e\n{\n    static abstract TSelf Log10(TSelf value);\n}\n\n```\n\nCover `BigInteger` and the various primitive types that it will be publicly exposed on as part of defining it for `IBinaryInteger`. In particular, `byte, sbyte, short, ushort, int, uint, long, ulong, Int128, UInt128, CLong, and CULong`.\n\nIt will also end up being exposed as part of the vector APIs: `Vector64, Vector128, Vector256 and Vector512` in the `System.Runtime.Intrinsics` namespace; as well as `Vector2, Vector3, Vector4, and Vector` in the `System.Numerics` namespace; and as part of `TensorPrimitives and Tensor` in the `System.Numerics.Tensors` namespace\n\n### API Usage\n\n```csharp\n        int value = XX;\n        int log10 = BitOperations.Log10(value);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwD03fg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6troFT",
                                           "createdAt":  "2025-05-27T20:11:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Molth",
                                           "body":  "@tannergooding Hi, thank you for your feedback! I’ve written up the [API proposal] as you suggested. Could you please take a look? I’d really appreciate it! ",
                                           "updatedAt":  "2025-05-27T20:11:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x8mBE",
                                           "createdAt":  "2025-06-18T19:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@Molth sorry for the delay.\n\nIt generally looks good/correct. However, you should explicitly cover `BigInteger` and the various primitive types that it will be publicly exposed on as part of defining it for `IBinaryInteger`. In particular, `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`, `Int128`, `UInt128`, `CLong`, and `CULong`.\n\nIt will also end up being exposed as part of the vector APIs: `Vector64`, `Vector128`, `Vector256` and `Vector512` in the `System.Runtime.Intrinsics` namespace; as well as `Vector2`, `Vector3`, `Vector4`, and `Vector` in the `System.Numerics` namespace; and as part of `TensorPrimitives` and `Tensor` in the `System.Numerics.Tensors` namespace",
                                           "updatedAt":  "2025-06-18T19:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6209j9",
                                           "createdAt":  "2025-07-13T22:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Molth",
                                           "body":  "@tannergooding \nThank you very much for the detailed feedback!\n\nRegarding the primitive types like `byte, sbyte, short, ushort, int, uint, long, ulong, Int128, UInt128, CLong, and CULong`, I believe the API should work correctly for all of these. However, for `BigInteger`, it relies on some internal properties, so I haven’t thoroughly tested whether it will fully support the proposed API yet.\n\nAs for the vector APIs, such as those in System.Runtime.Intrinsics and System.Numerics namespaces, I expect the API to be compatible and usable there as well.\n\n```csharp\nusing System;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Numerics;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\nnamespace Log10Test;\n\n// only for test\ninternal static class ThrowHelper\n{\n    [DoesNotReturn]\n    internal static void ThrowValueArgumentOutOfRange_NeedNonNegNumException()\n    {\n        throw new ArgumentOutOfRangeException();\n    }\n}\n\npublic static class TestBitOperations\n{\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(BigInteger value)\n    {\n        /*\n\n        if (value._sign \u003c 0 || baseValue == 1.0D)\n            return double.NaN;\n        if (baseValue == double.PositiveInfinity)\n            return value.IsOne ? 0.0D : double.NaN;\n        if (baseValue == 0.0D \u0026\u0026 !value.IsOne)\n            return double.NaN;\n        if (value._bits == null)\n            TODO: return Log10(value._sign)\n            return Math.Log(value._sign, baseValue);\n\n        ulong h = value._bits[value._bits.Length - 1];\n        ulong m = value._bits.Length \u003e 1 ? value._bits[value._bits.Length - 2] : 0;\n        ulong l = value._bits.Length \u003e 2 ? value._bits[value._bits.Length - 3] : 0;\n\n        // Measure the exact bit count\n        int c = BitOperations.LeadingZeroCount((uint)h);\n        long b = (long)value._bits.Length * 32 - c;\n\n        // Extract most significant bits\n        ulong x = (h \u003c\u003c 32 + c) | (m \u003c\u003c c) | (l \u003e\u003e 32 - c);\n\n        // Let v = value, b = bit count, x = v/2^b-64\n        // log ( v/2^b-64 * 2^b-64 ) = log ( x ) + log ( 2^b-64 )\n        TODO: return (int)(Log10(x) + (b - 64) / Log2(baseValue));\n        return Math.Log(x, baseValue) + (b - 64) / Math.Log(baseValue, 2);\n\n        */\n\n        throw new NotImplementedException();\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(byte value) =\u003e Log10((uint)value);\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(sbyte value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return Log10((uint)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(short value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return Log10((uint)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(ushort value) =\u003e Log10((uint)value);\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(int value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return Log10((uint)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(uint value)\n    {\n        value |= 1;\n        int num1 = BitOperations.Log2(value) + 1;\n        int num2 = (num1 * 1233) \u003e\u003e 12;\n        return value \u003c Unsafe.Add(ref MemoryMarshal.GetReference(UIntPowersOf10), num2) ? num2 - 1 : num2;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(long value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return Log10((ulong)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(ulong value)\n    {\n        value |= 1;\n        int num1 = BitOperations.Log2(value) + 1;\n        int num2 = (num1 * 1233) \u003e\u003e 12;\n        return value \u003c Unsafe.Add(ref MemoryMarshal.GetReference(UInt64PowersOf10), num2) ? num2 - 1 : num2;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(IntPtr value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        if (IntPtr.Size == 8)\n            return Log10((ulong)value);\n\n        return Log10((uint)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(UIntPtr value)\n    {\n        if (IntPtr.Size == 8)\n            return Log10((ulong)value);\n\n        return Log10((uint)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(Int128 value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return Log10((UInt128)value);\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log10(UInt128 value)\n    {\n        value |= 1;\n        int num1 = (int)UInt128.Log2(value) + 1;\n        int num2 = (num1 * 1233) \u003e\u003e 12;\n        return value \u003c UInt128PowersOf10[num2] ? num2 - 1 : num2;\n    }\n\n    // only for test\n    public static int DummyLog10(Int128 value)\n    {\n        if (value \u003c 0)\n            ThrowHelper.ThrowValueArgumentOutOfRange_NeedNonNegNumException();\n\n        return DummyLog10((UInt128)value);\n    }\n\n    // only for test\n    public static int DummyLog10(UInt128 value)\n    {\n        if (value == 0)\n            return 0;\n\n        if (value \u003e= UInt128PowersOf10[38]) return 38;\n        if (value \u003e= UInt128PowersOf10[37]) return 37;\n        if (value \u003e= UInt128PowersOf10[36]) return 36;\n        if (value \u003e= UInt128PowersOf10[35]) return 35;\n        if (value \u003e= UInt128PowersOf10[34]) return 34;\n        if (value \u003e= UInt128PowersOf10[33]) return 33;\n        if (value \u003e= UInt128PowersOf10[32]) return 32;\n        if (value \u003e= UInt128PowersOf10[31]) return 31;\n        if (value \u003e= UInt128PowersOf10[30]) return 30;\n        if (value \u003e= UInt128PowersOf10[29]) return 29;\n        if (value \u003e= UInt128PowersOf10[28]) return 28;\n        if (value \u003e= UInt128PowersOf10[27]) return 27;\n        if (value \u003e= UInt128PowersOf10[26]) return 26;\n        if (value \u003e= UInt128PowersOf10[25]) return 25;\n        if (value \u003e= UInt128PowersOf10[24]) return 24;\n        if (value \u003e= UInt128PowersOf10[23]) return 23;\n        if (value \u003e= UInt128PowersOf10[22]) return 22;\n        if (value \u003e= UInt128PowersOf10[21]) return 21;\n        if (value \u003e= UInt128PowersOf10[20]) return 20;\n        if (value \u003e= UInt128PowersOf10[19]) return 19;\n        if (value \u003e= UInt128PowersOf10[18]) return 18;\n        if (value \u003e= UInt128PowersOf10[17]) return 17;\n        if (value \u003e= UInt128PowersOf10[16]) return 16;\n        if (value \u003e= UInt128PowersOf10[15]) return 15;\n        if (value \u003e= UInt128PowersOf10[14]) return 14;\n        if (value \u003e= UInt128PowersOf10[13]) return 13;\n        if (value \u003e= UInt128PowersOf10[12]) return 12;\n        if (value \u003e= UInt128PowersOf10[11]) return 11;\n        if (value \u003e= UInt128PowersOf10[10]) return 10;\n        if (value \u003e= UInt128PowersOf10[9]) return 9;\n        if (value \u003e= UInt128PowersOf10[8]) return 8;\n        if (value \u003e= UInt128PowersOf10[7]) return 7;\n        if (value \u003e= UInt128PowersOf10[6]) return 6;\n        if (value \u003e= UInt128PowersOf10[5]) return 5;\n        if (value \u003e= UInt128PowersOf10[4]) return 4;\n        if (value \u003e= UInt128PowersOf10[3]) return 3;\n        if (value \u003e= UInt128PowersOf10[2]) return 2;\n        if (value \u003e= UInt128PowersOf10[1]) return 1;\n\n        return 0;\n    }\n\n    private static ReadOnlySpan\u003cuint\u003e UIntPowersOf10 =\u003e new uint[]\n    {\n        1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000\n    };\n\n    private static ReadOnlySpan\u003culong\u003e UInt64PowersOf10 =\u003e new ulong[]\n    {\n        1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n        1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n        1000000000000000000, 10000000000000000000\n    };\n\n    private static ReadOnlySpan\u003cUInt128\u003e UInt128PowersOf10 =\u003e new UInt128[]\n    {\n        new UInt128(0, 1UL),\n        new UInt128(0, 10UL),\n        new UInt128(0, 100UL),\n        new UInt128(0, 1_000UL),\n        new UInt128(0, 10_000UL),\n        new UInt128(0, 100_000UL),\n        new UInt128(0, 1_000_000UL),\n        new UInt128(0, 10_000_000UL),\n        new UInt128(0, 100_000_000UL),\n        new UInt128(0, 1_000_000_000UL),\n        new UInt128(0, 10_000_000_000UL),\n        new UInt128(0, 100_000_000_000UL),\n        new UInt128(0, 1_000_000_000_000UL),\n        new UInt128(0, 10_000_000_000_000UL),\n        new UInt128(0, 100_000_000_000_000UL),\n        new UInt128(0, 1_000_000_000_000_000UL),\n        new UInt128(0, 10_000_000_000_000_000UL),\n        new UInt128(0, 100_000_000_000_000_000UL),\n        new UInt128(0, 1_000_000_000_000_000_000UL),\n        new UInt128(0, 10_000_000_000_000_000_000UL),\n        new UInt128(5, 7766279631452241920UL),\n        new UInt128(54, 3875820019684212736UL),\n        new UInt128(542, 1864712049423024128UL),\n        new UInt128(5421, 200376420520689664UL),\n        new UInt128(54210, 2003764205206896640UL),\n        new UInt128(542101, 1590897978359414784UL),\n        new UInt128(5421010, 15908979783594147840UL),\n        new UInt128(54210108, 11515845246265065472UL),\n        new UInt128(542101086, 4477988020393345024UL),\n        new UInt128(5421010862, 7886392056514347008UL),\n        new UInt128(54210108624, 5076944270305263616UL),\n        new UInt128(542101086242, 13875954555633532928UL),\n        new UInt128(5421010862427, 9632337040368467968UL),\n        new UInt128(54210108624275, 4089650035136921600UL),\n        new UInt128(542101086242752, 4003012203950112768UL),\n        new UInt128(5421010862427522, 3136633892082024448UL),\n        new UInt128(54210108624275221, 12919594847110692864UL),\n        new UInt128(542101086242752217, 6873995514006732800UL),\n        new UInt128(5421010862427522170, 6873995514006732800UL),\n    };\n}\n```",
                                           "updatedAt":  "2025-07-13T22:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc621hs0",
                                           "createdAt":  "2025-07-14T01:19:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Sorry, I meant the proposal just needs to be updated to list these types and that the API will be publicly exposed on them.",
                                           "updatedAt":  "2025-07-14T01:19:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Cd85",
                                           "createdAt":  "2025-07-14T20:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Molth",
                                           "body":  "@tannergooding Thank you, I’ve updated the proposal. ",
                                           "updatedAt":  "2025-07-14T20:26:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7APTd-",
                                           "createdAt":  "2025-08-26T18:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=5rKlRoQHCVU\u0026t=0h46m53s)\n\n* Looks good as proposed.\n* This will be implemented implicitly (visible) on all IBinaryInteger types except BigInteger, which has a conflicting signature.\n\n```C#\npublic interface IBinaryInteger\u003cTSelf\u003e\n{\n    // Will be appropriately DIMmed\n    static virtual TSelf Log10(TSelf value);\n}\n```",
                                           "updatedAt":  "2025-08-26T21:06:30Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add Log10 to IBinaryInteger",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117451",
        "createdAt":  "2025-07-09T03:17:04Z",
        "number":  117451,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGyUpw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2025-07-09T03:21:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "s341507",
                                            "createdAt":  "2025-07-09T06:13:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "magol",
                                            "createdAt":  "2025-07-13T13:35:31Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-26T21:06:29Z",
        "body":  "### Proposal\n\n.NET introduced support for double-precision complex number support in .NET Framework 4.0 and we\u0027ve gotten requests to support single-precision for just as long, so it is proposed we add such support and support for other base types using a generic `Complex\u003cT\u003e` and corresponding `IComplexNumber\u003cTSelf, T\u003e` type which fits into the \"generic math\" feature design.\n\nThis would allow improved interoperability, performance, and better UX for various AI and machine learning scenarios.\n\nSome notable deviations from the original `Complex` design are:\n1. `Magnitude` and `Phase` are not properties, they are named methods `GetMagnitude()` and `GetPhase()` which better match the .NET API Design Guidelines\n2. `FromPolarCoordinates` is named `CreateFromPolarCoordinates`\n3. Explicit properties for `Zero`, `One`, `ImaginaryOne`, `Infinity`, and `NaN` are not provided. These are less efficient and have less desirable UX than simply using the overloads that take `T.Zero`, `T.One, `T.PositiveInfinity`, `T.NaN`, etc\n4. We do not define implicit conversions from the built-in integer types, as we do not know what `T` is. We may be able to selectively define extension conversion operators for select `T` (such as `float`) in the future\n\nIt may be desirable to also define functions such as `Ceiling`, `Floor`, `Round`, `Truncate`, `Atan2`, `FusedMultiplyAdd`, `Lerp`, `ReciprocalEstimate`, and `ReciprocalSqrtEstimate` to better match what `IFloatingPoint\u003cT\u003e` and `IFloatingPointIeee754\u003cT\u003e` define.\n\n```csharp\nnamespace System.Numerics;\n\npublic interface IComplexNumber\u003cTSelf, T\u003e\n    : INumberBase\u003cTSelf\u003e,\n      IExponentialFunctions\u003cTSelf\u003e,\n      IHyperbolicFunctions\u003cTSelf\u003e,\n      ILogarithmicFunctions\u003cTSelf\u003e,\n      IPowerFunctions\u003cTSelf\u003e,\n      IRootFunctions\u003cTSelf\u003e,\n      ITrigonometricFunctions\u003cTSelf\u003e\n    where TSelf : IComplexNumber\u003cTSelf, T\u003e\n    where T : IFloatingPointIeee754\u003cT\u003e\n{\n    static abstract TSelf Create(T real, T imaginary);\n    static abstract TSelf CreateFromPolarCoordinates(T magnitude, T phase);\n\n    T Imaginary { get; }\n    T Real { get; }\n\n    static abstract TSelf operator +(TSelf left, T right);\n    static abstract TSelf operator +(T left, TSelf right);\n\n    static abstract TSelf operator /(TSelf left, T right);\n    static abstract TSelf operator /(T left, TSelf right);\n\n    static abstract bool operator ==(TSelf left, T right);\n    static abstract bool operator ==(T left, TSelf right);\n\n    static abstract implicit operator TSelf(T value);\n\n    static abstract bool operator !=(TSelf left, T right);\n    static abstract bool operator !=(T left, TSelf right);\n\n    static abstract TSelf operator *(TSelf left, T right);\n    static abstract TSelf operator *(T left, TSelf right);\n\n    static abstract TSelf operator -(TSelf left, T right);\n    static abstract TSelf operator -(T left, TSelf right);\n\n    static abstract new T Abs(Complex\u003cT\u003e value);\n\n    static abstract TSelf Conjugate(TSelf value);\n\n    static abstract T GetMagnitude();\n    static abstract T GetPhase();\n\n    static abstract TSelf Hypot(TSelf x, T y);\n\n    static abstract TSelf Log(T value, TSelf newBase);\n    static abstract TSelf Log(TSelf value, T newBase);\n\n    static abstract TSelf MaxMagnitude(TSelf x, T y);\n    static abstract TSelf MaxMagnitudeNumber(TSelf x, T y);\n\n    static abstract TSelf MinMagnitude(TSelf x, T y);\n    static abstract TSelf MinMagnitudeNumber(TSelf x, T y);\n\n    static abstract TSelf MultiplyAddEstimate(TSelf left, TSelf right, T addend);\n    static abstract TSelf MultiplyAddEstimate(TSelf left, T right, TSelf addend);\n    static abstract TSelf MultiplyAddEstimate(TSelf left, T right, T addend);\n    static abstract TSelf MultiplyAddEstimate(T left, T right, TSelf addend);\n\n    static abstract TSelf Pow(TSelf value, T power);\n    static abstract TSelf Pow(T value, TSelf power);\n}\n\npublic readonly struct Complex\u003cT\u003e : IComplexNumber\u003cComplex\u003cT\u003e, T\u003e, ISignedNumber\u003cComplex\u003cT\u003e\u003e\n    where T : IFloatingPointIeee754\u003cT\u003e\n{\n    public Complex(T real, T imaginary);\n\n    public T Imaginary { get; }\n    public T Real { get; }\n\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator +(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator --(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e operator /(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator /(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator /(Complex\u003cT\u003e left, T right);\n\n    public static bool operator ==(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static bool operator ==(Complex\u003cT\u003e left, T right);\n    public static bool operator ==(T left, Complex\u003cT\u003e right);\n\n    static abstract implicit operator Complex\u003cT\u003e(T value);\n\n    public static Complex\u003cT\u003e operator ++(Complex\u003cT\u003e value);\n\n    public static bool operator !=(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static bool operator !=(Complex\u003cT\u003e left, T right);\n    public static bool operator !=(T left, Complex\u003cT\u003e right);\n\n    public static Complex\u003cT\u003e operator *(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator *(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator *(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator -(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e value);\n\n    public static T Abs(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Acos(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Acosh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AcosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Asin(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Asinh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AsinPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Atan(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Atanh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AtanPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Conjugate(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Create(T real, T imaginary);\n    public static Complex\u003cT\u003e CreateFromPolarCoordinates(T magnitude, T phase);\n\n    public static Complex\u003cT\u003e Cos(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Cosh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e CosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e CreateChecked\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n    public static Complex\u003cT\u003e CreateSaturating\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n    public static Complex\u003cT\u003e CreateTruncating\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n\n    public static Complex\u003cT\u003e DegreesToRadians(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Exp(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e ExpM1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp2(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp2M1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp10(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp10M1(Complex\u003cT\u003e value);\n\n    public static T GetMagnitude(Complex\u003cT\u003e value);\n    public static T GetPhase(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Hypot(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e Hypot(Complex\u003cT\u003e x, T y);\n\n    public static bool IsComplexNumber(Complex\u003cT\u003e value);\n    public static bool IsEvenInteger(Complex\u003cT\u003e value);\n    public static bool IsImaginaryNumber(Complex\u003cT\u003e value);\n    public static bool IsInteger(Complex\u003cT\u003e value);\n    public static bool IsNegative(Complex\u003cT\u003e value);\n    public static bool IsNegativeInfinity(Complex value);\n    public static bool IsNormal(Complex value);\n    public static bool IsOddInteger(Complex value);\n    public static bool IsPositive(Complex value);\n    public static bool IsPositiveInfinity(Complex value);\n    public static bool IsRealNumber(Complex value);\n    public static bool IsSubnormal(Complex value);\n\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value, Complex\u003cT\u003e newBase);\n    public static Complex\u003cT\u003e Log(T value, Complex\u003cT\u003e newBase);\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value, T newBase);\n    public static Complex\u003cT\u003e LogP1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log2(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log2P1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log10(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log10P1(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e MaxMagnitude(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MaxMagnitude(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MaxMagnitudeNumber(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MaxMagnitudeNumber(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MinMagnitude(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MinMagnitude(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MinMagnitudeNumber(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MinMagnitudeNumber(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, Complex\u003cT\u003e right, Complex\u003cT\u003e addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, Complex\u003cT\u003e right, T addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, T right, Complex\u003cT\u003e addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, T right, T addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(T left, T right, Complex\u003cT\u003e addend);\n\n    public static Complex\u003cT\u003e RadiansToDegrees(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e RootN(Complex\u003cT\u003e value, int n);\n\n    public static Complex\u003cT\u003e Parse(string s, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(string s, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Pow(Complex\u003cT\u003e value, Complex\u003cT\u003e power);\n    public static Complex\u003cT\u003e Pow(Complex\u003cT\u003e value, T power);\n    public static Complex\u003cT\u003e Pow(T value, Complex\u003cT\u003e power);\n\n    public static Complex\u003cT\u003e Reciprocal(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Sin(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Sinh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e SinPi(Complex\u003cT\u003e value);\n\n    public static (Complex\u003cT\u003e Sin, Complex\u003cT\u003e Cos) SinCos(Complex\u003cT\u003e value);\n    public static (Complex\u003cT\u003e SinPi, Complex\u003cT\u003e CosPi) SinCosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Sqrt(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Tan(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Tanh(Complex\u003cT\u003e value);\n\n    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result)\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public bool Equals(Complex\u003cT\u003e other);\n\n    public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\n    public bool TryFormat(Span\u003cbyte\u003e utf8Destination, out int bytesWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\n\n    public string ToString(IFormatProvider? provider);\n    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\n    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\n\n    // IAdditiveIdentity\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IAdditiveIdentity\u003cComplex\u003cT\u003e\u003e.AdditiveIdentity { get; }\n\n    // IFloatingPointConstants\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.E { get; }\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.Pi { get; }\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.Tau { get; }\n\n    // IMultiplicativeIdentity\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IMultiplicativeIdentity\u003cComplex\u003cT\u003e\u003e.MultiplicativeIdentity { get; }\n\n    // INumberBase\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.One { get; }\n    \n    static int INumberBase\u003cComplex\u003cT\u003e\u003e.Radix { get; }\n    \n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.Zero { get; }\n\n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.Abs(Complex\u003cT\u003e value);\n\n    static bool INumberBase\u003cComplex\u003cT\u003e\u003e.IsCanonical(Complex\u003cT\u003e value);\n    static bool INumberBase\u003cComplex\u003cT\u003e\u003e.IsZero(Complex\u003cT\u003e value);\n\n    // ISignedNumber\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e ISignedNumber\u003cComplex\u003cT\u003e\u003e.NegativeOne { get; }\n}\n\npublic readonly partial struct Complex : IComplexNumber\u003cComplex, double\u003e\n{\n    public static Complex Acosh(Complex value);\n    public static Complex Asinh(Complex value);\n    public static Complex Atanh(Complex value);\n\n    public static Complex CosPi(Complex value);\n\n    public static Complex Cbrt(Complex value);\n\n    public static Complex DegreesToRadians(Complex value);\n\n    public static Complex ExpM1(Complex value);\n    public static Complex Exp2(Complex value);\n    public static Complex Exp2M1(Complex value);\n    public static Complex Exp10(Complex value);\n    public static Complex Exp10M1(Complex value);\n\n    public static Complex Hypot(Complex x, Complex y);\n    public static Complex Hypot(Complex x, double y);\n\n    public static Complex Log(Complex value, Complex newBase);\n    public static Complex Log(double value, Complex newBase);\n    public static Complex LogP1(Complex value);\n    public static Complex Log2(Complex value);\n    public static Complex Log2P1(Complex value);\n    public static Complex Log10P1(Complex value);\n\n    public static Complex MaxMagnitude(Complex x, double y);\n\n    public static Complex MaxMagnitudeNumber(Complex x, Complex y);\n    public static Complex MaxMagnitudeNumber(Complex x, double y);\n\n    public static Complex MinMagnitude(Complex x, double y);\n\n    public static Complex MinMagnitudeNumber(Complex x, Complex y);\n    public static Complex MinMagnitudeNumber(Complex x, double y);\n\n    public static Complex MultiplyAddEstimate(Complex left, Complex right, Complex addend);\n    public static Complex MultiplyAddEstimate(Complex left, Complex right, double addend);\n    public static Complex MultiplyAddEstimate(Complex left, double right, Complex addend);\n    public static Complex MultiplyAddEstimate(Complex left, double right, double addend);\n    public static Complex MultiplyAddEstimate(double left, double right, Complex addend);\n\n    public static Complex Pow(double value, Complex power);\n\n    public static Complex RadiansToDegrees(Complex value);\n\n    public static Complex RootN(Complex value, int n);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex SinPi(Complex value);\n\n    public static (Complex\u003cT\u003e Sin, Complex\u003cT\u003e Cos) SinCos(Complex\u003cT\u003e value);\n    public static (Complex\u003cT\u003e SinPi, Complex\u003cT\u003e CosPi) SinCosPi(Complex\u003cT\u003e value);\n\n    public static Complex TanPi(Complex value);\n\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result)\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    // IComplexNumber\u003cTSelf, T\u003e\n\n    static Complex IComplexNumber\u003cComplex\u003cT\u003e, T\u003e.Create(T real, T imaginary);\n    static Complex IComplexNumber\u003cComplex\u003cT\u003e, T\u003e.CreateFromPolarCoordinates(T magnitude, T phase);\n\n    static double IComplexNumber\u003cComplex, double\u003e.GetMagnitude(Complex value);\n    static double IComplexNumber\u003cComplex, double\u003e.GetPhase(Complex value);\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwDvrjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc612it8",
                                           "createdAt":  "2025-07-09T03:17:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-09T03:17:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62D8gu",
                                           "createdAt":  "2025-07-09T23:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Laksen",
                                           "body":  "\u003e 3\\. ImaginaryOne\n\nAgreed with the other constant examples, but `new Complex\u003cT\u003e(T.Zero, T.One)` feels way less readable than `Complex\u003cT\u003e.ImaginaryOne`, or even `Complex\u003cT\u003e.I` if one can dream :) \n\n\nAs an additional point, for our DSP use we use MagnitudeSquared 95% of places compared to just using Magnitude. Most typical usecases are thresholding, ratio calculations, or combinations with logarithms where you can easily get rid of the performance loss of the Sqrt.\n\nThere are already similar design patterns in the Vector types with `Length`/`LengthSquared`",
                                           "updatedAt":  "2025-07-09T23:58:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62Ed1A",
                                           "createdAt":  "2025-07-10T00:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaA64w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Laksen",
                                                                               "createdAt":  "2025-07-10T01:01:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Agreed with the other constant examples, but new Complex\u003cT\u003e(T.Zero, T.One) feels way less readable than Complex\u003cT\u003e.ImaginaryOne, or even Complex\u003cT\u003e.I if one can dream\n\nThe general consideration is that it isn\u0027t that common to just pass in `ImaginaryOne` \"as is\", it is far more typical to be using it as part of some `a + (i * b)` in which case you just want `Create(a, b)`\n\nIt is notably the only one I was somewhat skeptical on excluding though, so I\u0027ll make sure it is discussed in API review.",
                                           "updatedAt":  "2025-07-10T00:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AO-uP",
                                           "createdAt":  "2025-08-26T17:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=5rKlRoQHCVU\u0026t=0h0m0s)\n\n* It\u0027s unusual to have both a ctor and a named Create with the same signature, but with two patterns at play here, both seem fine.\n* On Complex (non-generic), we should [EditorBrowsable(Never)] the existing FromPolarCoordinates so that all the creation methods are aligned with having the \"Create\" prefix\n* Once we\u0027re using EB-Never to \"upgrade\" the API to the newer names, let\u0027s do that with the Phase and Magnitude properties, too.\n\n```C#\nnamespace System.Numerics;\n\npublic interface IComplexNumber\u003cTSelf, T\u003e\n    : INumberBase\u003cTSelf\u003e,\n      IExponentialFunctions\u003cTSelf\u003e,\n      IHyperbolicFunctions\u003cTSelf\u003e,\n      ILogarithmicFunctions\u003cTSelf\u003e,\n      IPowerFunctions\u003cTSelf\u003e,\n      IRootFunctions\u003cTSelf\u003e,\n      ITrigonometricFunctions\u003cTSelf\u003e\n    where TSelf : IComplexNumber\u003cTSelf, T\u003e\n    where T : IFloatingPointIeee754\u003cT\u003e\n{\n    static abstract TSelf Create(T real, T imaginary);\n    static abstract TSelf CreateFromPolarCoordinates(T magnitude, T phase);\n\n    T Imaginary { get; }\n    T Real { get; }\n\n    static abstract TSelf operator +(TSelf left, T right);\n    static abstract TSelf operator +(T left, TSelf right);\n\n    static abstract TSelf operator /(TSelf left, T right);\n    static abstract TSelf operator /(T left, TSelf right);\n\n    static abstract bool operator ==(TSelf left, T right);\n    static abstract bool operator ==(T left, TSelf right);\n\n    static abstract implicit operator TSelf(T value);\n\n    static abstract bool operator !=(TSelf left, T right);\n    static abstract bool operator !=(T left, TSelf right);\n\n    static abstract TSelf operator *(TSelf left, T right);\n    static abstract TSelf operator *(T left, TSelf right);\n\n    static abstract TSelf operator -(TSelf left, T right);\n    static abstract TSelf operator -(T left, TSelf right);\n\n    static abstract new T Abs(Complex\u003cT\u003e value);\n\n    static abstract TSelf Conjugate(TSelf value);\n\n    T GetMagnitude();\n    T GetPhase();\n\n    static abstract TSelf Hypot(TSelf x, T y);\n\n    static abstract TSelf Log(T value, TSelf newBase);\n    static abstract TSelf Log(TSelf value, T newBase);\n\n    static abstract TSelf MaxMagnitude(TSelf x, T y);\n    static abstract TSelf MaxMagnitudeNumber(TSelf x, T y);\n\n    static abstract TSelf MinMagnitude(TSelf x, T y);\n    static abstract TSelf MinMagnitudeNumber(TSelf x, T y);\n\n    static abstract TSelf MultiplyAddEstimate(TSelf left, TSelf right, T addend);\n    static abstract TSelf MultiplyAddEstimate(TSelf left, T right, TSelf addend);\n    static abstract TSelf MultiplyAddEstimate(TSelf left, T right, T addend);\n    static abstract TSelf MultiplyAddEstimate(T left, T right, TSelf addend);\n\n    static abstract TSelf Pow(TSelf value, T power);\n    static abstract TSelf Pow(T value, TSelf power);\n}\n\npublic readonly struct Complex\u003cT\u003e : IComplexNumber\u003cComplex\u003cT\u003e, T\u003e, ISignedNumber\u003cComplex\u003cT\u003e\u003e\n    where T : IFloatingPointIeee754\u003cT\u003e\n{\n    public Complex(T real, T imaginary);\n\n    public T Imaginary { get; }\n    public T Real { get; }\n\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator +(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator --(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e operator /(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator /(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator /(Complex\u003cT\u003e left, T right);\n\n    public static bool operator ==(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static bool operator ==(Complex\u003cT\u003e left, T right);\n    public static bool operator ==(T left, Complex\u003cT\u003e right);\n\n    static abstract implicit operator Complex\u003cT\u003e(T value);\n\n    public static Complex\u003cT\u003e operator ++(Complex\u003cT\u003e value);\n\n    public static bool operator !=(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static bool operator !=(Complex\u003cT\u003e left, T right);\n    public static bool operator !=(T left, Complex\u003cT\u003e right);\n\n    public static Complex\u003cT\u003e operator *(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator *(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator *(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator -(T left, Complex\u003cT\u003e right);\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e left, T right);\n\n    public static Complex\u003cT\u003e operator -(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e operator +(Complex\u003cT\u003e value);\n\n    public static T Abs(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Acos(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Acosh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AcosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Asin(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Asinh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AsinPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Atan(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Atanh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e AtanPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Conjugate(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Create(T real, T imaginary);\n    public static Complex\u003cT\u003e CreateFromPolarCoordinates(T magnitude, T phase);\n\n    public static Complex\u003cT\u003e Cos(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Cosh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e CosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e CreateChecked\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n    public static Complex\u003cT\u003e CreateSaturating\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n    public static Complex\u003cT\u003e CreateTruncating\u003cTOther\u003e(TOther value) where TOther : INumberBase\u003cTOther\u003e;\n\n    public static Complex\u003cT\u003e DegreesToRadians(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Exp(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e ExpM1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp2(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp2M1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp10(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Exp10M1(Complex\u003cT\u003e value);\n\n    public T GetMagnitude(Complex\u003cT\u003e value);\n    public T GetPhase(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Hypot(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e Hypot(Complex\u003cT\u003e x, T y);\n\n    public static bool IsComplexNumber(Complex\u003cT\u003e value);\n    public static bool IsEvenInteger(Complex\u003cT\u003e value);\n    public static bool IsImaginaryNumber(Complex\u003cT\u003e value);\n    public static bool IsInteger(Complex\u003cT\u003e value);\n    public static bool IsNegative(Complex\u003cT\u003e value);\n    public static bool IsNegativeInfinity(Complex value);\n    public static bool IsNormal(Complex value);\n    public static bool IsOddInteger(Complex value);\n    public static bool IsPositive(Complex value);\n    public static bool IsPositiveInfinity(Complex value);\n    public static bool IsRealNumber(Complex value);\n    public static bool IsSubnormal(Complex value);\n\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value, Complex\u003cT\u003e newBase);\n    public static Complex\u003cT\u003e Log(T value, Complex\u003cT\u003e newBase);\n    public static Complex\u003cT\u003e Log(Complex\u003cT\u003e value, T newBase);\n    public static Complex\u003cT\u003e LogP1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log2(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log2P1(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log10(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Log10P1(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e MaxMagnitude(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MaxMagnitude(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MaxMagnitudeNumber(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MaxMagnitudeNumber(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MinMagnitude(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MinMagnitude(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MinMagnitudeNumber(Complex\u003cT\u003e x, Complex\u003cT\u003e y);\n    public static Complex\u003cT\u003e MinMagnitudeNumber(Complex\u003cT\u003e x, T y);\n\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, Complex\u003cT\u003e right, Complex\u003cT\u003e addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, Complex\u003cT\u003e right, T addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, T right, Complex\u003cT\u003e addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(Complex\u003cT\u003e left, T right, T addend);\n    public static Complex\u003cT\u003e MultiplyAddEstimate(T left, T right, Complex\u003cT\u003e addend);\n\n    public static Complex\u003cT\u003e RadiansToDegrees(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e RootN(Complex\u003cT\u003e value, int n);\n\n    public static Complex\u003cT\u003e Parse(string s, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(string s, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex\u003cT\u003e Pow(Complex\u003cT\u003e value, Complex\u003cT\u003e power);\n    public static Complex\u003cT\u003e Pow(Complex\u003cT\u003e value, T power);\n    public static Complex\u003cT\u003e Pow(T value, Complex\u003cT\u003e power);\n\n    public static Complex\u003cT\u003e Reciprocal(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Sin(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Sinh(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e SinPi(Complex\u003cT\u003e value);\n\n    public static (Complex\u003cT\u003e Sin, Complex\u003cT\u003e Cos) SinCos(Complex\u003cT\u003e value);\n    public static (Complex\u003cT\u003e SinPi, Complex\u003cT\u003e CosPi) SinCosPi(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Sqrt(Complex\u003cT\u003e value);\n\n    public static Complex\u003cT\u003e Tan(Complex\u003cT\u003e value);\n    public static Complex\u003cT\u003e Tanh(Complex\u003cT\u003e value);\n\n    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse(ReadOnlySpan\u003cchar\u003e s, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    public bool Equals(Complex\u003cT\u003e other);\n\n    public bool TryFormat(Span\u003cchar\u003e destination, out int charsWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\n    public bool TryFormat(Span\u003cbyte\u003e utf8Destination, out int bytesWritten, ReadOnlySpan\u003cchar\u003e format, IFormatProvider? provider);\n\n    public string ToString(IFormatProvider? provider);\n    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format);\n    public string ToString([StringSyntax(StringSyntaxAttribute.NumericFormat)] string? format, IFormatProvider? provider);\n\n    // IAdditiveIdentity\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IAdditiveIdentity\u003cComplex\u003cT\u003e\u003e.AdditiveIdentity { get; }\n\n    // IFloatingPointConstants\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.E { get; }\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.Pi { get; }\n\n    static Complex\u003cT\u003e IFloatingPointConstants\u003cComplex\u003cT\u003e\u003e.Tau { get; }\n\n    // IMultiplicativeIdentity\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e IMultiplicativeIdentity\u003cComplex\u003cT\u003e\u003e.MultiplicativeIdentity { get; }\n\n    // INumberBase\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.One { get; }\n    \n    static int INumberBase\u003cComplex\u003cT\u003e\u003e.Radix { get; }\n    \n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.Zero { get; }\n\n    static Complex\u003cT\u003e INumberBase\u003cComplex\u003cT\u003e\u003e.Abs(Complex\u003cT\u003e value);\n\n    static bool INumberBase\u003cComplex\u003cT\u003e\u003e.IsCanonical(Complex\u003cT\u003e value);\n    static bool INumberBase\u003cComplex\u003cT\u003e\u003e.IsZero(Complex\u003cT\u003e value);\n\n    // ISignedNumber\u003cTSelf\u003e\n\n    static Complex\u003cT\u003e ISignedNumber\u003cComplex\u003cT\u003e\u003e.NegativeOne { get; }\n}\n\npublic readonly partial struct Complex : IComplexNumber\u003cComplex, double\u003e\n{\n    public static Complex Acosh(Complex value);\n    public static Complex Asinh(Complex value);\n    public static Complex Atanh(Complex value);\n\n    public static Complex CosPi(Complex value);\n\n    public static Complex Cbrt(Complex value);\n\n    public static Complex DegreesToRadians(Complex value);\n\n    public static Complex ExpM1(Complex value);\n    public static Complex Exp2(Complex value);\n    public static Complex Exp2M1(Complex value);\n    public static Complex Exp10(Complex value);\n    public static Complex Exp10M1(Complex value);\n\n    public static Complex Hypot(Complex x, Complex y);\n    public static Complex Hypot(Complex x, double y);\n\n    public static Complex Log(Complex value, Complex newBase);\n    public static Complex Log(double value, Complex newBase);\n    public static Complex LogP1(Complex value);\n    public static Complex Log2(Complex value);\n    public static Complex Log2P1(Complex value);\n    public static Complex Log10P1(Complex value);\n\n    public static Complex MaxMagnitude(Complex x, double y);\n\n    public static Complex MaxMagnitudeNumber(Complex x, Complex y);\n    public static Complex MaxMagnitudeNumber(Complex x, double y);\n\n    public static Complex MinMagnitude(Complex x, double y);\n\n    public static Complex MinMagnitudeNumber(Complex x, Complex y);\n    public static Complex MinMagnitudeNumber(Complex x, double y);\n\n    public static Complex MultiplyAddEstimate(Complex left, Complex right, Complex addend);\n    public static Complex MultiplyAddEstimate(Complex left, Complex right, double addend);\n    public static Complex MultiplyAddEstimate(Complex left, double right, Complex addend);\n    public static Complex MultiplyAddEstimate(Complex left, double right, double addend);\n    public static Complex MultiplyAddEstimate(double left, double right, Complex addend);\n\n    public static Complex Pow(double value, Complex power);\n\n    public static Complex RadiansToDegrees(Complex value);\n\n    public static Complex RootN(Complex value, int n);\n\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider);\n    public static Complex\u003cT\u003e Parse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider);\n\n    public static Complex SinPi(Complex value);\n\n    public static (Complex\u003cT\u003e Sin, Complex\u003cT\u003e Cos) SinCos(Complex\u003cT\u003e value);\n    public static (Complex\u003cT\u003e SinPi, Complex\u003cT\u003e CosPi) SinCosPi(Complex\u003cT\u003e value);\n\n    public static Complex TanPi(Complex value);\n\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, NumberStyles style, IFormatProvider? provider, out Complex\u003cT\u003e result);\n    public static bool TryParse(ReadOnlySpan\u003cbyte\u003e utf8Text, IFormatProvider? provider, out Complex\u003cT\u003e result);\n\n    // IComplexNumber\u003cTSelf, T\u003e\n\n    static Complex Create(T real, T imaginary);\n    static Complex CreateFromPolarCoordinates(T magnitude, T phase);\n\n    static double GetMagnitude(Complex value);\n    static double GetPhase(Complex value);\n\n    // Gains EB-Never\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    static Complex FromPolarCoordinates(T magnitude, T phase);\n    \n    [EditorBrowsable(EditorBrowsableState.Never)]\n    double Magnitude { get; }\n\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    double Phase { get; }\n}\n``` ",
                                           "updatedAt":  "2025-08-26T21:06:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Expose a new `Complex\u003cT\u003e` given `where T : IFloatingPointIeee754\u003cT\u003e`",
        "labels":  [
                       "api-approved",
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118841",
        "createdAt":  "2025-08-18T13:48:53Z",
        "number":  118841,
        "author":  "kristiker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T15:36:42Z",
        "body":  "Does anyone know why vector exponential\n\n```cs\nVector4.Exp(Vector4.Zero);\n```\ngives `\u003c1.0000001, 1.0000001, 1.0000001, 1.0000001\u003e`\n\nwhile\n```cs\nMathF.Exp(0);\n```\ngives `1.0f`\n\nWhere is the error coming from?\n\nCheck the results for youself here:\nhttps://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMA6AOQgFsBTMASwGMBnAbj0JPICVpgGdMgEkowRlBbN2eTpgCcACgCyAQ2AALAGJkAogA8ADooIBKUx3wKV6jXqMnzluUoBqtJsAD2YACz3jd08ffwAtei8nF0Ug7zBMdAAOAJiPOLCIsgBBFlifBMTFc2zctJCiizwgA===",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvs9I8g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-kFuu",
                                           "createdAt":  "2025-08-18T14:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "cc @tannergooding ",
                                           "updatedAt":  "2025-08-18T14:18:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-kGAR",
                                           "createdAt":  "2025-08-18T14:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T14:18:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-kYjI",
                                           "createdAt":  "2025-08-18T14:38:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "They are using different math implementations. Vector4.Exp ends up calling here:\n\nhttps://github.com/dotnet/runtime/blob/cff2063695fe8977164cc1be3866a64427c80db4/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/VectorMath.cs#L475-L590\n\n`Math.Exp`/`MathF.Exp` call the platform CRT math functions. The actual result can vary among platforms.",
                                           "updatedAt":  "2025-08-18T14:38:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-xOlx",
                                           "createdAt":  "2025-08-19T12:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kristiker",
                                           "body":  "It\u0027s really weird that the implementation does not optimize for key points such as 0 and 1.\n\nFyi the error at 0 is `+0.00000011920928955078125`, at 1 it is doubled `+0.0000002384185791015625`\n\n\nEdit: Also double clicking in my IDE leads me to `VectorMath.ExpDouble`, but I\u0027m not sure if that is accurate.\n",
                                           "updatedAt":  "2025-08-19T12:38:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-z0jy",
                                           "createdAt":  "2025-08-19T15:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e It\u0027s really weird that the implementation does not optimize for key points such as 0 and 1.\n\nIt\u0027s really not. That is incredibly atypical for an algorithm to do, because it\u0027s not typically necessary.\n\nThe general issue here is that what scalar logic can do and what vectorized logic can do is a bit different. The scalar algorithm ends up being driven by a lookup table: https://github.com/amd/aocl-libm-ose/blob/master/src/optimized/expf.c. This works because there is a single value and so the cost is kept down while still being accurate.\n\nVectorization cannot do that trivially, however. It would require a \"gather\" operation which then negates most of the benefits of vectorization in typical scenarios: https://github.com/amd/aocl-libm-ose/blob/master/src/optimized/vec/vrs4_expf.c. It uses an alternative algorithm instead, which is more akin to a Taylor Series (which is also how most math algorithms are implemented). The number of polynomial steps it\u0027s doing isn\u0027t sufficient to preserve the accuracy and so it ends up with this `off by one` and returns bitwise `0x3F800001` when it should\u0027ve returned `0x3F800000`.\n\nThis off by one is typically not an issue for vectorization where perf is typically of more importance than accuracy. However, it is still undesirable if it could otherwise be trivially handled. There likely needs to be a single extra step in the polynomial handling to handle such edges, but it will require some non-trivial digging to find the right adjustment to handle all cases.\n\n",
                                           "updatedAt":  "2025-08-19T15:36:27Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unexpected result with `Vector4.Exp`",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119256",
        "createdAt":  "2025-09-02T07:16:24Z",
        "number":  119256,
        "author":  "jeffhandley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODN_7cQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2025-09-02T21:00:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-06T17:19:41Z",
        "body":  "As noted by @tannergooding:\r\n\r\nIt\u0027s pretty typical for `Clamp` APIs to follow a well-specified order for mismatched min/max, as it\u0027s far more efficient and is useful for a number of scenarios. -- We end up doing just this for the vector APIs and it correspondingly can bleed into other scenarios, like `Tensors`\r\n\r\nThe typical behavior is `Min(Max(value, min), max)` which matches what hardware typically does for such instructions, what HLSL and GLSL do, etc.  -- Effectively this returns `max` if min/max are incorrectly ordered.\r\n\r\n### Default behavior (min/max are correctly ordered)\r\n| value | min | max | result |\r\n| ----- | --- | --- | ------ |\r\n| 1     |   2 |   3 |      2 |\r\n| 2     |   1 |   3 |      2 |\r\n| 3     |   1 |   2 |      2 |\r\n\r\n### Swapped behavior (`Min(Max(value, min), max)`)\r\n| value | min | max | result |\r\n| ----- | --- | --- | ------ |\r\n| 1     |   3 |   2 |      2 |\r\n| 2     |   3 |   1 |      1 |\r\n| 3     |   2 |   1 |      1 |\r\n\r\n### Swapped behavior (`Max(Min(value, max), min)`)\r\n| value | min | max | result |\r\n| ----- | --- | --- | ------ |\r\n| 1     |   3 |   2 |      3 |\r\n| 2     |   3 |   1 |      3 |\r\n| 3     |   2 |   1 |      2 |\r\n\r\n_Originally posted by @tannergooding in https://github.com/dotnet/runtime/pull/118824#discussion_r2282953148_\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwgfEug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BaWB_",
                                           "createdAt":  "2025-09-02T11:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-02T11:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BarKA",
                                           "createdAt":  "2025-09-02T11:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xtqqczze",
                                           "body":  "Diffs:\n* https://github.com/MihuBot/runtime-utils/issues/1396\n* https://github.com/MihuBot/runtime-utils/issues/1397",
                                           "updatedAt":  "2025-09-02T11:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Bauwe",
                                           "createdAt":  "2025-09-02T11:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xtqqczze",
                                           "body":  "We should also consider the same change in:\n\n* `BigInteger.Clamp(BigInteger, BigInteger, BigInteger)` Method\n* `INumber\u003cTSelf\u003e.Clamp(TSelf, TSelf, TSelf)` Method\n* `INumber\u003cTSelf\u003e.ClampNative(TSelf, TSelf, TSelf)` Method",
                                           "updatedAt":  "2025-09-02T11:56:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BeiJQ",
                                           "createdAt":  "2025-09-02T16:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xtqqczze",
                                           "body":  "If these methods are to continue to throw, we should also consider whether they should throw if `min` or `max` is `NaN`.",
                                           "updatedAt":  "2025-09-02T16:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BwOPZ",
                                           "createdAt":  "2025-09-03T20:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavelCibulka",
                                           "body":  "I’d stop throwing exception.\n\nI doubt anyone has written code that relies on Clamp throwing when min and max are in the wrong order. A simple Roslyn analyzer for obvious mistakes would be enough.",
                                           "updatedAt":  "2025-09-03T20:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BxRPG",
                                           "createdAt":  "2025-09-03T21:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xtqqczze",
                                           "body":  "\u003e I doubt anyone has written code that relies on Clamp throwing when min and max are in the wrong order. A simple Roslyn analyzer for obvious mistakes would be enough.\n\nPerhaps we could use `RuntimeHelpers.IsKnownConstant` to throw if it can be determined at compile time that `min` and `max` are mismatched.",
                                           "updatedAt":  "2025-09-03T21:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CB8S6",
                                           "createdAt":  "2025-09-04T19:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Perhaps we could use RuntimeHelpers.IsKnownConstant to throw if it can be determined at compile time that min and max are mismatched.\n\nHaving the behavior differ between constant and non-constant is a non-starter. You could have an analyzer try to flag it, but its pretty unlikely someone will get it messed up; especially in a way that isn\u0027t caught by simples tests.",
                                           "updatedAt":  "2025-09-04T19:28:05Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Consider updating Math.Clamp to not throw when min is greater than max",
        "labels":  [
                       "area-System.Numerics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119874",
        "createdAt":  "2025-09-19T02:29:23Z",
        "number":  119874,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T14:07:41Z",
        "body":  "### Background and motivation\n\nhttps://github.com/dotnet/runtime/pull/98643#discussion_r2360072302\n\nAdd bit manipulation operations for the newly introduced `BFloat16` type (#96295), to align with other floating point types. The method list is taken from CoreLib methods using `Half`.\n\n### API Proposal\n\n```diff\nnamespace System;\n\npublic class BitConverter\n{\n+    public short BFloat16BitsToInt16(BFloat16 value);\n+    public ushort BFloat16BitsToUInt16(BFloat16 value);\n+    public static BFloat16 Int16BitsToBFloat16(short value);\n+    public static BFloat16 UInt16BitsToBFloat16(ushort value);\n}\n\nnamespace System.Buffers.Binary;\n\npublic class BinaryPrimitives\n{\n+    public static void WriteBFloat16BigEndian(Span\u003cbyte\u003e destination, BFloat16 value);\n+    public static void WriteBFloat16LittleEndian(Span\u003cbyte\u003e destination, BFloat16 value);\n+    public static bool TryWriteBFloat16BigEndian(Span\u003cbyte\u003e destination, BFloat16 value);\n+    public static bool TryWriteBFloat16LittleEndian(Span\u003cbyte\u003e destination, BFloat16 value);\n+    public static void ReadBFloat16BigEndian(ReadOnlySpan\u003cbyte\u003e source, out BFloat16 value);\n+    public static void ReadBFloat16LittleEndian(ReadOnlySpan\u003cbyte\u003e source, out BFloat16 value);\n+    public static bool TryReadBFloat16BigEndian(ReadOnlySpan\u003cbyte\u003e source, out BFloat16 value);\n+    public static bool TryReadBFloat16LittleEndian(ReadOnlySpan\u003cbyte\u003e source, out BFloat16 value);\n}\n\nnamespace System.IO;\n\npublic class BinaryReader\n{\n+    public virtual BFloat16 ReadBFloat16();\n}\n\npublic class BinaryWriter\n{\n+    public virtual void WriteBFloat16(BFloat16 value);\n}\n```\n\n\n### API Usage\n\n```csharp\nshort bitValue = BitConverter.BFloat16BitsToInt16(f);\nbool isPositive = (bitValue \u0026 0x80) != 0;\n```\n\n### Alternative Designs\n\nDo not expose the `BinaryPrimitives`/`BinaryReader`/`BinaryWriter` methods, depend on generic math interfaces instead.\n\nAlternatively, we can choose to not expose the `BitConverter` methods at all, as there is already `Unsafe.BitCast`.\n\n### Risks\n\nUnlike IEEE754 floating point types, there are more variations of floating point types in use in different areas that we may add in the future. Adding more direct support to the core types can cause bloat in API surface. Instead, we should rely on generic math interface as much as possible, to avoid duplicating API surface or taking dependency on too many types from the core types.\n\nAdd the methods will also lose the opportunity to move `BFloat16` out of CoreLib.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxU8J7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FTwns",
                                           "createdAt":  "2025-09-19T02:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-19T02:29:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Bit manipulation method for BFloat16",
        "labels":  [
                       "area-System.Numerics",
                       "api-ready-for-review"
                   ]
    }
]
