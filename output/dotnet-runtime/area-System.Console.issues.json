[
    {
        "url":  "https://github.com/dotnet/runtime/issues/24314",
        "createdAt":  "2017-12-02T07:27:39Z",
        "number":  24314,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8ihiw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-02-02T10:58:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RokeJulianLockhart",
                                            "createdAt":  "2024-11-10T17:21:12Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-09-12T01:39:23Z",
        "body":  "_From @masonwheeler on July 1, 2015 14:48_\n\nRight now, if you want to answer the question \"Is \u003cinsert key here\u003e on the keyboard currently down?\", you do it with a PInvoke call to `GetAsyncKeyState`.  Problem is, that will only work for winapi-based platforms.  There should be a cross-platform solution for this, and ISTM it\u0027s low-level enough that it belongs in CoreCLR and not CoreFX.  Feel free to correct me if this isn\u0027t the case, and I\u0027ll open the issue on CoreFX instead.\n\n\n_Copied from original issue: dotnet/coreclr#1190_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi8cmIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDYzNg==",
                                           "createdAt":  "2017-12-02T07:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @OtherCrashOverride on July 2, 2015 0:5_\n\n\u003e  There should be a cross-platform solution for this, and ISTM it\u0027s low-level enough that it belongs in CoreCLR and not CoreFX.\n\nActually, it doesn\u0027t belong in either.\n\nWhile on the surface it may seem trivial, you have to take into consideration the design of a console.  A console is associated with a character device.  A character device, as its name implies, reads and writes characters.  These characters may source from keyboard, but they may also source from a file and output to one as well.\n\nThe distinction of being a character device has an important implication: it does not maintain state.  As an example consider sending a capitol \u0027A\u0027.  To the console, it is simply a character encoding. To know if its up or down, you also need to send state information as to whether it was pressed or released.  Instead of sending a the character encoding for \u0027A\u0027, you have to send Key.Shift-Pressed and Key.A-Pressed (or check if Key.CapsLock state is pressed) and also handle keyboard mapping for what Key.A means when combined with a modifier key.\n\nFinding out if a key is pressed is actually a very complicated process when you factor in state and international keyboard characteristics with user preferences and/or mappings.  This is entirely outside the scope of CoreCLR and CoreFX.\n\nOn Windows and OSX, there is a single API to P/Invoke, On Linux, there is not.  It depends on the user interface environment (if one is used).  The API used is different if you are using the VT environment, a X11 environment, or a Wayland environment.  As CoreCLR adopts support for more platforms, the maintenance burden only increases.\n\nIn summary, you are better off finding a 3rd party library that supports the platforms you wish to target.  An example of such is SDL.\n\n[Edited for better composition.]\n",
                                           "updatedAt":  "2017-12-02T07:27:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDYzNw==",
                                           "createdAt":  "2017-12-02T07:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @masonwheeler on July 2, 2015 2:0_\n\n@OtherCrashOverride  You seem to be misunderstanding what I\u0027m looking for, especially if you\u0027re bringing up SDL.  I know what SDL has to offer--I\u0027m a contributor to the project, in fact--and it looks like you\u0027re talking about _text input_ and _events_ and all sorts of complicated stuff along those lines.  You\u0027re right; that belongs elsewhere, most likely in a GUI library.\n\nThat\u0027s not what I\u0027m looking for.  I\u0027m trying to answer a much simpler question, specifically, the question that is answered by the Winapi function `GetAsyncKeyState`: \"at this exact moment that I am calling this function, is a given _physical key_ up or down?\"  That has nothing to do with text input, modifier keys, or UI events, and there\u0027s no room for different UI toolkits to interpret it differently.  It\u0027s something that most likely belongs in the PAL.\n",
                                           "updatedAt":  "2017-12-02T07:27:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDYzOQ==",
                                           "createdAt":  "2017-12-02T07:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @OtherCrashOverride on July 2, 2015 2:21_\n\nI don\u0027t believe I have misunderstood the request: Provide an API call for \u0027IsKeyPressed\u0027.  The verboseness of my response was intended to add more than just \"no, this does not belong\".  I was attempting to illustrate that character devices do not provide the service requested.  The Windowing or other Session environment does.  Even on a Linux plain text console, there may not be an actual keyboard to provide key press state, it could be a serial device or network ptty.\n\nMy post was meant to be more of a \"there is a reason it does not already exist; here\u0027s why.\" response.\n",
                                           "updatedAt":  "2017-12-02T07:27:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDY0MA==",
                                           "createdAt":  "2017-12-02T07:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @OtherCrashOverride on July 2, 2015 2:36_\n\nTrying to find a better way to communicate this...\n\nWhile this API would always work on Windows.  It may or may not work on OSX, Linux and FreeBSD.  The reason being is that a \u0027command prompt\u0027 may not be driven by a keyboard.  In cases such as SSH, the terminal does not send keyup/keydown events.  Things like KeyRepeat rate are set at the client, not on the server because it does not know when a key is up or down.\n",
                                           "updatedAt":  "2017-12-02T07:27:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDY0MQ==",
                                           "createdAt":  "2017-12-02T07:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @davidfowl on July 2, 2015 2:49_\n\nDoesn\u0027t seem like a coreclr thing.\n",
                                           "updatedAt":  "2017-12-02T07:27:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDY0Mw==",
                                           "createdAt":  "2017-12-02T07:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @masonwheeler on July 2, 2015 10:55_\n\n@OtherCrashOverride How is this any different from the current state of things on Windows systems, which could just as easily be a server running over Telnet or RDP?  If there\u0027s no physical input available, then you return `false`.\n",
                                           "updatedAt":  "2017-12-02T07:27:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY3NDY0NA==",
                                           "createdAt":  "2017-12-02T07:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "_From @OtherCrashOverride on July 2, 2015 15:27_\n\nI think the expectation here is that since there is a single API call on Windows, there is a single API call on all other platforms.  The point I have been trying to make is that with Linux, this is not the case.\n\nhttp://stackoverflow.com/questions/7645058/linux-analog-to-windows-getasynckeystate\n\nThe proposed fgetc_unocked would result in polling until a character is received.  Once that character has been received, you would only know that it was pressed not that is has been released.  Future arrivals of that character may be key repeat and not actual key press.\n\nIf there is an elegant solution to this, then someone should submit a pull request with it.  The point being made is that it does not exist because its non-trivial and only known to the GUI or session (console) environment managing the \u0027command prompt\u0027\n",
                                           "updatedAt":  "2017-12-02T07:27:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODY5MDYxNw==",
                                           "createdAt":  "2017-12-02T12:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "@jkotas This really isn\u0027t a `System.Console` request.  If you want to do console input, that\u0027s already got plenty of APIs for it.  What I\u0027m looking for is *keyboard state*; the intended use case is for gaming.",
                                           "updatedAt":  "2017-12-02T12:59:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODcwMDg0NA==",
                                           "createdAt":  "2017-12-02T15:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`System.Console` has stuff related to keyboard, e.g. `ConsoleKey` enum, `Console.NumberLock`. If this belongs anywhere in CoreCLR/CoreFX repos, it is `area-System.Console`.",
                                           "updatedAt":  "2017-12-02T15:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LxyYh",
                                           "createdAt":  "2024-09-12T01:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gabriel-vanca",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2024-09-12T01:39:21Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "We need a cross-platform way to detect key-down state",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25394",
        "createdAt":  "2018-03-10T15:23:53Z",
        "number":  25394,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-27T16:12:23Z",
        "body":  "_From @TheLastRar on March 10, 2018 13:8_\n\nConsider a program that does the follow;\r\n\r\nCreate pipes and dup2 the write fd onto stdin, stderr, \r\nHave a thread continually read the pipes until EOF is reached (at which point the thread will terminate).\r\nUse coreclr.\r\n...\r\nRestore the original stdin, stderr,\r\nClose the write fd of pipes,\r\nWait for the pipe reader thread to terminate.\r\n\r\nAs coreclr dups the fd for stdin \u0026 stderr, there is still a write fd for the pipe, meaning the read thread will never receive an EOF and the program to hang at the last step.\n\n_Copied from original issue: dotnet/coreclr#16880_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOM7iNQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjAzODM0OQ==",
                                           "createdAt":  "2018-03-10T15:30:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/ConsolePal.Unix.cs#L25\r\n\r\nWhy do we have to dup the stdin/out/err ? Comment would be nice.",
                                           "updatedAt":  "2018-03-10T15:30:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjA0MTU4NA==",
                                           "createdAt":  "2018-03-10T16:13:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "That dup comes from this commit from several years ago:\r\nhttps://github.com/dotnet/corefx/commit/6525d2f1587f803ef288b13c3e3d412a745fbabe\r\n\r\nThe commit includes the comment:\r\n\"Rather than opening e.g. \"/dev/stdin\", which effectively ends up dup\u0027ing the corresponding file descriptor, we just dup the corresponding file descriptor directly, e.g. dup(STDIN_FILENO).\"\r\n\r\nI\u0027d need to look in a bit more depth, but presumably the issue is we don\u0027t want the streams returned by Console.OpenStandardInput/Output/etc. to close these fds. There are other ways to avoid that, though (e.g. telling the SafeHandle it doesn\u0027t own the fd); don\u0027t know for sure that\u0027s the issue, nor whether such a change would break other things.",
                                           "updatedAt":  "2018-03-10T16:13:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNjAwMjU3MA==",
                                           "createdAt":  "2018-08-25T23:18:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheLastRar",
                                           "body":  "As a quick test, I\u0027ve changed the code here https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/ConsolePal.Unix.cs#L25 to not dup the handle (for out and err), but I\u0027m still seeing duplicated stdin, stderr handles.\r\n\r\nThere must be another location where the handles are being duped.",
                                           "updatedAt":  "2018-08-25T23:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44zuI1",
                                           "createdAt":  "2021-10-27T16:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "The Windows implementation is not closing the handle:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4ae0deac53752b4d238309a2ab38ffd6b5b15628/src/libraries/System.Console/src/System/ConsolePal.Windows.cs#L1110-L1119",
                                           "updatedAt":  "2021-10-27T16:12:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Don\u0027t dup stdin \u0026 stderr as this can break some std io redicection code",
        "labels":  [
                       "bug",
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27626",
        "createdAt":  "2018-10-13T08:11:10Z",
        "number":  27626,
        "author":  "kkm000",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMbTRA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mklement0",
                                            "createdAt":  "2020-10-21T15:51:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tig",
                                            "createdAt":  "2020-10-21T16:19:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffreymcgill",
                                            "createdAt":  "2021-07-27T20:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fabriciomurta",
                                            "createdAt":  "2021-07-27T20:23:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frassle",
                                            "createdAt":  "2021-11-10T10:20:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreyChechel",
                                            "createdAt":  "2021-11-18T17:25:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2022-04-22T17:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VarNepvius",
                                            "createdAt":  "2022-12-09T20:51:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "evankyle",
                                            "createdAt":  "2024-12-18T06:22:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LunNova",
                                            "createdAt":  "2025-08-24T15:46:39Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-02-16T10:59:45Z",
        "body":  "This problem has been annoying me for quite a while, and I worked around it by emitting the `rmkx` terminfo sequence in my bash prompt. But I still think it makes sense to report it. Basically, after (almost?) any `dotnet` command that involves CLR console I/O, the terminal emulator is left in the application mode (`keypad_xmit`), messing my command line handling (e. g. arrows move by word `\u003cESC\u003e O C`, not by character `\u003cESC\u003e C`, in readline bash prompt, etc. -- probably because of my customized `.inputrc`, designed to work with both VT100 and rxvt style emulators). Other programs behave nice; e. g., just typing `man man`, or invoking `less` or `vim` and then exiting them reverts keyboard to local keypad mode. Just for reference, this is a hopelessly headless Ubuntu 18.04 machine:\r\n```\r\n$ uname -a\r\nLinux yupana 4.15.0-29-generic dotnet/corefx#31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n$ echo $TERM\r\nxterm-256color\r\n$ dotnet --version\r\n2.1.403\r\n```\r\nI noticed by using a script(1) dump that the `smkx` aka `keypad_xmit` code is emitted more than once, but then there is no reverting `rmkx` aka `keypad_local` emitted ever. Here is, for example, how captured prologue of `dotnet build` looks (not marking literal linefeeds), that emits `keypad_xmit` twice:\r\n```\r\nScript started on 2018-10-12 23:02:55-0700\r\n. . .\r\ndotnet build -c Release -v:n\r\n\u003cESC\u003e[?1h\u003cESC\u003e=Microsoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Core\r\n\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\u003cESC\u003e[?1h\u003cESC\u003e=Build started 10/12/18 11:00:40 PM.\r\n```\r\nI just attempted to trace the issue down by eyeballing the console handling code. My terminal emulator is pretending to be xterm-256color compatible (MobaXTerm), and infocmp(1) does show entries for both sequences for this term type:\r\n```\r\nrmkx=\\E[?1l\\E\u003e\r\nsmkx=\\E[?1h\\E=\r\n```\r\nThe terminfo entries have manifest numeric IDs in `/usr/include/term.h\r\n```\r\n#define keypad_local                   CUR Strings[88]\r\n#define keypad_xmit                    CUR Strings[89]\r\n```\r\nbut the index 88 is not even in the [`enum WellKnownStrings` in TermInfo.cs](https://github.com/dotnet/corefx/blob/14072950a/src/System.Console/src/System/TermInfo.cs#L61) file that reads the terminfo file directly (but `KeypadXmit = 89` is). Also, it seems that [pal_console.c](https://github.com/dotnet/corefx/blob/14072950a/src/Native/Unix/System.Native/pal_console.c) does a good job of restoring the application mode at a few points by sending the `keypad_xmit` sequence, apparently since the MR dotnet/corefx#6488 fixing the issue dotnet/runtime#16300, but unless I misunderstand it, never attempts to send a matching `keypad_local` in any of its Uninitialize() functions, where tty driver attributes are restored.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdB7ibA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTU0NjEzNw==",
                                           "createdAt":  "2018-10-13T14:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thank you for the detailed investigation, @kkm000. Do you want to propose a fix in a PR? ",
                                           "updatedAt":  "2018-10-13T14:22:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTcwNzEzOA==",
                                           "createdAt":  "2018-10-15T04:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkm000",
                                           "body":  "@danmosemsft, a fair question! I do not know, really. If I had the whole thing checked out and churning and able to test, I\u0027d implement and send a fix in an hour. The missing piece looks simple to integrate, would touch only `internal` type signatures and use already present signal-safe routines in the native shim (I hope I use the correct term).\r\n\r\nThe big deal is I know practically nothing how the whole stack works. I just found this repo by searching for a type named \"ConsolePal\" that popped up in a stack backtrace that a c# program using Console.ReadKey() so helpfully puked when I invoked it with \"\u003c/dev/null\". It gave me a hint where to look for a low-level library responsible for tty I/O, that\u0027s it. The rest was just some common sense and a bit of reading the code.\r\n\r\nI mean, I could certainly try to check out and build the repo; I routinely develop in C++ on both Windows and Linux and C# on Windows. But I have no idea what would I do with the libraries that I build. I know little what is under the hood of the \"dotnet\" command. I quickly read the [documentation on building an testing](https://github.com/dotnet/corefx/tree/master/Documentation/building), but I do not understand how I could incorporate what I build into the rest of the stack. Do I also need to build the coreclr repo, or can I run an application with my own build of corefx but the existing RTM coreclr runtime installed from a .deb? If you could point me to any docs or explain that in a few words, I would certainly give it a try.",
                                           "updatedAt":  "2018-10-15T04:52:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTg4ODc0OA==",
                                           "createdAt":  "2018-10-15T15:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@kkm000, thanks. Is there a way to detect whether the current setting is already keypad_xmit?  It should be fairly straightforward to fix up the uninitialize routine to output keypad_local, but that could itself cause a potential issue if the terminal were already set as keypad_xmit when the process was launched, as we\u0027d then be switching away from what the environment described.",
                                           "updatedAt":  "2018-10-15T15:00:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDAyODE5Nw==",
                                           "createdAt":  "2018-10-15T21:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkm000",
                                           "body":  "@stephentoub:\r\n\r\n\u003e  Is there a way to detect whether the current setting is already keypad_xmit?\r\n\r\nI do not believe there is, and most probably not without running into another timeout problem like dotnet/runtime#27034. But it\u0027s not really necessary. For all I know, no sane program would assume that the terminal is in the keypad mode when it starts. And I know for sure that bash (rather readline) assumes it is not :(\r\n\r\nMy understanding is that the \"local\" mode is the default, and it\u0027s always ok to revert to it. [vim does this unconditionally](https://github.com/vim/vim/blob/64f410742/src/term.c#L3578) upon exit (here [`T_KE` corresponds](https://github.com/vim/vim/blob/64f410742/src/term.c#L1603) to yet another name for `keypad_local`, the termcap `ks`/`ke` pair). [less does it pretty much always](https://github.com/vbwagner/less/blob/7b48019d/screen.c#L1575) as well (when did you last type `less --no-keypad`? :) ).\r\n\r\n[vim documentation has a little bit](https://github.com/vim/vim/blob/64f410742/runtime/doc/term.txt#L81) on its keypad mode control.",
                                           "updatedAt":  "2018-10-15T21:57:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTYxMjMyMw==",
                                           "createdAt":  "2020-04-06T07:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmunn",
                                           "body":  "@stephentoub wrote:\r\n\r\n\u003e Is there a way to detect whether the current setting is already keypad_xmit? It should be fairly straightforward to fix up the uninitialize routine to output keypad_local, but that could itself cause a potential issue if the terminal were already set as keypad_xmit when the process was launched, as we\u0027d then be switching away from what the environment described.\r\n\r\nMy research into terminfo shows no way to query the setting; I agree with @kkm000 that the standard thing to do in Unix world appears to be to assume that \"normal mode\" (keypad_local) is the default, and if you set \"application mode\" (keypad_xmit) because you\u0027re a full-screen program that wants the application-mode escapes for cursor keys et al, then you\u0027re expected to set \"normal mode\" (keypad_local) before you exit. I believe this behavior of vim and other similar software was responsible for https://github.com/dotnet/runtime/issues/16300#issuecomment-187451220, which you fixed in https://github.com/dotnet/corefx/pull/6488.\r\n\r\nIf you want to be extra cautious, you could possibly save the value of `Console.IsOutputRedirected` from [EnsureInitializedCore in ConsolePal.Unix.cs](https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L929) and only restore keypad_local if you sent a keypad_xmit code in the first place. That would probably be the closest you can come to checking the current terminal mode and restoring the same mode at the end.",
                                           "updatedAt":  "2020-04-06T07:25:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTkzMzk3Ng==",
                                           "createdAt":  "2020-11-30T17:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leo60228",
                                           "body":  "Is there any progress towards fixing this?",
                                           "updatedAt":  "2020-11-30T17:37:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDQ5OTg3NA==",
                                           "createdAt":  "2020-12-14T15:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leo60228",
                                           "body":  "This bash script detects whether DECCKM is enabled in xterm. It doesn\u0027t work in Konsole, though.\r\n```\r\n#!/bin/sh\r\nexec \u003c/dev/tty\r\nold=\"$(stty -g)\"\r\nstty raw -echo min 0  time 5\r\nprintf \u0027\\033[?1$p\u0027\r\nread status\r\nstty \"$old\"\r\nreply=\"${status#$\u0027\\033\u0027}\"\r\ncase \"$reply\" in\r\n    \u0027[?1;1$y\u0027)\r\n        echo \"DECCKM on\"\r\n        ;;\r\n    \u0027[?1;2$y\u0027)\r\n        echo \"DECCKM off\"\r\n        ;;\r\n    *)\r\n        echo \"unknown\"\r\n        exit 1\r\n        ;;\r\nesac\r\n```",
                                           "updatedAt":  "2020-12-14T15:03:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc406vh2",
                                           "createdAt":  "2021-07-27T20:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_ccqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "evankyle",
                                                                               "createdAt":  "2024-12-18T06:23:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fabriciomurta",
                                           "body":  "In fact, if after a .NET console command I do this:\r\n`echo -ne \"\\033[?1l\"`\r\n\r\nThe broken behavior is fixed (in my case customizations in `./inputrc` are being ignored after a console app is run).\r\n\r\nUnfortunately I cannot just avoid this by `Console.Write(\"\\u001b[?1l\");` right before the app exits, as yet another `[?1h` will get printed to the output. (right before closing stdout?)\r\n\r\nHere\u0027s the capture of the default `dotnet new console; dotnet run` terminal output:\r\n```\r\n^[[?1h^[=^[[?1h^[=^[[?1h^[=^[[?1h^[=Hello World!^M\r\n^[[?1h^[=\r\n```\r\n\r\nIn case I tried to return to local mode from within the program I would just get:\r\n\r\n```\r\n^[[?1h^[=^[[?1h^[=^[[?1h^[=^[[?1h^[=Hello World!^M\r\n^[[?1l^[[?1h^[=\r\n```\r\n\r\n(1st sequence in 2nd line)\r\n\r\nThus, no good.",
                                           "updatedAt":  "2021-07-27T20:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41S4mj",
                                           "createdAt":  "2021-08-06T09:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkm000",
                                           "body":  "@fabriciomurta, no, it\u0027s likely not possible to reset the mode properly from within the application.\r\n\r\nMy solution has been just to add the reset sequence to `PS1`. My `.bashrc` has quite a layer of helper functions to build the prompt at a high level and in a terminal-independent way, so that I can colorize it and add markers based on environment (WSL, clouds, inside Docker...), but after unpacking it, I recover this:\r\n```\r\n# \u0027dotnet\u0027 leaves keyboard in bad mood.\r\nPS1+=\"\\[$(tput 2\u003e/dev/null rmkx)\\]\"\r\n```\r\nIt is important to add the `\\[` and `\\]` brackets around any non-rendered sequences (those not shifting the cursor position), so that Bash does not count them as having any representable length and can correctly compute the column position of the cursor at the end of prompt, otherwise readline will be very confused and angry at you. `tput`, which is part of ncurses/terminfo distribution, simply outputs the `rmkx` sequence for your terminal set in TERM, so it\u0027s stored in the command prompt, resetting the keypad transmit mode after each interactive command.\r\n```\r\nkkm@buba:~$ echo $TERM\r\nxterm-256color\r\nkkm@buba:~$ tput rmkx | xxd\r\n00000000: 1b5b 3f31 6c1b 3e                        .[?1l.\u003e\r\n```\r\nI advise against hardcoding handwritten CSI control sequences into PS1: it will come back at you sooner or later, e.g. in Emacs, in tmux or in other situations of double-emulation, where the actual terminal might not support them. `tput` is a bulletproof way to get a correct sequence (empty if not supported) provided that the terminfo entry is correct.\r\n\r\nThe only caveat is that support for RGB terminals in terminfo (\"direct\" color in their parlance) is flaky, and, e.g, both `konsole-direct` and `xterm-direct` lack the `rmkx` definition. If using direct RGB color terminal, your best bet is compiling your own definition for the emulator that you are using. There are worse problems in the distro, even the latest one (e.g., pretty nonsensical `setaf` computation). See man `terminfo`, `infocmp`, `tic`.",
                                           "updatedAt":  "2021-08-06T09:47:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41UPAp",
                                           "createdAt":  "2021-08-06T20:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fabriciomurta",
                                           "body":  "Wherever .NET (`System.Console`?) outputs the terminal code to set a mode there should be a way for it to, likewise, output the terminal code to reset this mode ([vt100 docs](https://vt100.net/docs/vt100-ug/chapter3.html#S3.3.6.1), scroll down to \"modes\", where there is \"Cursor Key Mode\" and \"Keypad mode\")... just like it sets it.\r\n\r\nMaybe just signal if it output the \"set\" sequence, on program shutdown, output the \"unset\" one. In what I could find, it does not just to keypad mode, but also cursor key mode, so both should be reset: `ESC [?1l` and `ESC \u003e`.\r\n\r\nThere should be a counter for this [setKeypadXmit](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L975) code. Something to play last when a console application is freeing resources to terminate...",
                                           "updatedAt":  "2021-08-06T20:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Gq_o",
                                           "createdAt":  "2021-08-29T02:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkm000",
                                           "body":  "@fabriciomurta, if you read the _whole_ discussion, you\u0027ll note that this has been said before. \r\n\r\nMy impression is that @stephentoub generally agrees (https://github.com/dotnet/runtime/issues/27626#issuecomment-429888748), and it\u0027s likely that a good-written PR would be accepted. @stephentoub, what\u0027s your word on this? To recap, we\u0027ve already established by eyeballing the sources that both less(1) and vim(1) blindly send terminfo keypad_local = `rmkx`, née termcap `ks`, upon closing the terminal.",
                                           "updatedAt":  "2021-08-29T02:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc442vWE",
                                           "createdAt":  "2021-10-28T14:00:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Please excuse me if this is a stupid question, but I am new to Terminals: why do we need to enter this mode? What do we get by doing that?",
                                           "updatedAt":  "2021-10-28T14:00:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc443E28",
                                           "createdAt":  "2021-10-28T15:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAxP-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-11-02T06:28:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "leo60228",
                                           "body":  "It allows distinguishing between keys on the main keyboard and keys on the numpad, which System.ConsoleKey does.",
                                           "updatedAt":  "2021-10-28T15:33:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45hJeR",
                                           "createdAt":  "2021-11-10T10:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Frassle",
                                           "body":  "Just linking https://github.com/dotnet/sdk/issues/15243 here as I think these duplicate each other.",
                                           "updatedAt":  "2021-11-10T10:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50BXdr",
                                           "createdAt":  "2024-02-15T16:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_cdNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "persorkki",
                                                                               "createdAt":  "2024-03-15T16:16:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "evankyle",
                                                                               "createdAt":  "2024-12-18T06:25:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "odalet",
                                           "body":  "Just bumped into this one after installing .NET 8 on Linux. \r\n\r\n**TLDR; There seems to be a regression in .NET 8 as I never witnessed this behavior in .NET 6...**\r\n\r\nMy particular repro combination is:\r\n\r\n* WSL - Debian 12 / Ubuntu 22.04\r\n* Inside a Windows Terminal 1.20.10303 on Windows 10 22H2\r\n* and using bash (no problem when using Linux\u0027s pwsh)\r\n\r\nAny `dotnet ...` commands leaves the terminal with a non-usable keypad\r\n\r\nNB:\r\n\r\n* did not happen with .NET 6\r\n* does not happen when I launch my WSL instance in a \"cmd\" terminal (I guess this is because it barely understands escape sequences)\r\n* did not test on a real Linux box, but I expect it would fail as well\r\n\r\nShoutout: the _PS1_ workaround by @kkm000 works in my case. Huge thanks to him as, before applying his trick, all I knew to do was `reset` the terminal after every dotnet command...\r\n",
                                           "updatedAt":  "2024-02-15T16:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50F0K1",
                                           "createdAt":  "2024-02-16T02:56:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmunn",
                                           "body":  "For what it\u0027s worth, I have NOT experienced a regression under .NET 8 on a real Linux box (Linux Mint 21.3, which is basically Ubuntu 22.04 with a different set of window manager packages, none of which should affect terminal behavior). Running dotnet commands leaves my terminal in a working state, whether they exit normally or are interrupted by Ctrl-C. Here\u0027s the first few lines of `dotnet --info` on my system:\r\n\r\n```plaintext\r\nrmunn@laptop:~$ dotnet --info\r\n.NET SDK:\r\n Version:           8.0.101\r\n Commit:            6eceda187b\r\n Workload version:  8.0.100-manifests.ba313bcd\r\n\r\nRuntime Environment:\r\n OS Name:     linuxmint\r\n OS Version:  21.3\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/8.0.101/\r\n```\r\n\r\nI know that .NET SDK 8.0.201 is out, but I don\u0027t have it installed yet. If it causes a regression, I\u0027ll post another comment.",
                                           "updatedAt":  "2024-02-16T02:56:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50HuJs",
                                           "createdAt":  "2024-02-16T10:59:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "odalet",
                                           "body":  "@rmunn Interesting, this would then be specific to Windows Terminal? I\u0027ll try this on my Linux machine when I have time as well!\r\n",
                                           "updatedAt":  "2024-02-16T10:59:44Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Terminal hardware is always left in application mode (keypad_xmit) after running a console program",
        "labels":  [
                       "bug",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27828",
        "createdAt":  "2018-11-06T17:24:44Z",
        "number":  27828,
        "author":  "WenceyWang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwL1OQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2023-05-19T19:41:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-04-14T05:50:25Z",
        "body":  "Windows have a soft keyboard that can type Emoji directly.\r\n\r\n![image](https://user-images.githubusercontent.com/7100226/48081175-61ac8480-e22a-11e8-970e-b5f716cc47ec.png)\r\n\r\nEmoji is a set of chars that cannot be stored in a single `char` while `System.ConsoleKeyInfo` uses a `char` to store the content of the pressed key.\r\n\r\n```c#\r\npublic char KeyChar { get; }\r\n```\r\n\r\nIn my test, `System.Console.ReadKey` will return a `System.ConsoleKeyInfo` which `KeyChar` is the first char of the emoji (a sequence of surrogate pair, might 10+) and I have no way to get the other chars.\r\n\r\nThe problem of ReadKey is it may return the first half of a surrogate pair and the next ReadKey call will return the next keypress, not the remaining part of the surrogate pair.\r\n\r\nThis makes rubbish out and impossible to work around in user code.\r\n\r\nThis problem also applies to these keyboards for script language.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMMp6CQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjM4MTY4NA==",
                                           "createdAt":  "2018-11-06T19:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "...this can\u0027t be unique to emoji, presumably?  Shouldn\u0027t some upper-range characters and combining-characters suffer the same fate?\r\n\r\nAlso, I\u0027m assuming this would be triggered by copy/paste input, so I don\u0027t think it\u0027s just soft keyboards we have to worry about.",
                                           "updatedAt":  "2018-11-06T19:38:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzM5NzkwMw==",
                                           "createdAt":  "2020-04-01T17:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "This is a problem with surrogate pairs in general. It\u0027s not clear how we would address this issue without introducing some form of a breaking change.",
                                           "updatedAt":  "2020-04-01T17:50:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzMzODI3Mg==",
                                           "createdAt":  "2020-07-03T04:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "To me, it seems like the logical course of action would be to introduce a new API based around ``Rune`` instead of ``char``, and gradually deprecate ``ReadKey()`` in favour of ``ReadRune()``. The large existing code bases would mean it would probably never be able to be removed completely, but the deprecation strikethrough in Visual Studio could help encourage the use of that new API.\r\n\r\nNow that I think about it, it would probably also make sense to have a key-reading API that returns a string, since many languages such as Guarani use characters which one might input with a single keypress, and yet are composed of multiple code points. Having ``ReadRune()`` is more pressing though, I think. Not handling combining characters is a matter of functionality, but treating code points as 16-bit is just a matter of being outdated.\r\n\r\nHowever, both seem to be an issue for PSReadLine, which leads to a longstanding bug in PowerShell.",
                                           "updatedAt":  "2020-07-03T04:37:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDkxNDE4OA==",
                                           "createdAt":  "2020-11-10T19:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "Is there a way to get surrogate pair from `System.ConsoleKeyInfo`. I\u0027m only getting the first char. Or some method to get the next chars?\r\n\r\n**Edit:**\r\n`Console.KeyAvailable` is the answer. For surrogate pair we need to use `Rune` but sometimes I only have his length value after write and would be better to get it before.",
                                           "updatedAt":  "2021-04-11T16:49:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzMzNTMyMw==",
                                           "createdAt":  "2021-04-11T16:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WenceyWang",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e To me, it seems like the logical course of action would be to introduce a new API based around `Rune` instead of `char`, and gradually deprecate `ReadKey()` in favour of `ReadRune()`. The large existing code bases would mean it would probably never be able to be removed completely, but the deprecation strikethrough in Visual Studio could help encourage the use of that new API.\r\n\u003e \r\n\u003e Now that I think about it, it would probably also make sense to have a key-reading API that returns a string, since many languages such as Guarani use characters which one might input with a single keypress, and yet are composed of multiple code points. Having `ReadRune()` is more pressing though, I think. Not handling combining characters is a matter of functionality, but treating code points as 16-bit is just a matter of being outdated.\r\n\u003e \r\n\u003e However, both seem to be an issue for PSReadLine, which leads to a longstanding bug in PowerShell.\r\n\r\n`ReadKey` is important for us. As there are many keys on a keyboard that are not directly mapped to Unicode characters and we do need to know if shift, ctrl, or alt key is pressed.\r\n\r\nThe design of key code and key char is dated to the IBM PC keyboard controller. This is not the *nix way of letting the console device and program itself escape these keys presses and pass them as a stream.\r\n\r\nI think the proper way is to add a string or ReadOnlySpan\u003cRune\u003e typed property in `System.ConsoleKeyInfo` to contain all content caused by a key pressing, which will not break currently working code and let new code be aware of the Unicode keyboard.",
                                           "updatedAt":  "2021-04-11T17:22:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzQwMDgyMg==",
                                           "createdAt":  "2021-04-12T00:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I\u0027m assuming the scenario is \"I want to be able to get an entire grapheme cluster via `ReadKey`.\" (See [this doc](https://docs.microsoft.com/dotnet/standard/base-types/character-encoding-introduction) for the difference between `char`, `Rune`, and \"grapheme cluster\".) There are going to be a few complications with this scenario, regardless of the proposed API.\r\n\r\nIf you return `char` or `Rune`, you may only be returning part of the information. As mentioned earlier, `char` by itself isn\u0027t sufficient to represent supplementary code points. And `Rune` by itself isn\u0027t sufficient to represent many Emoji, which often consist of a base character + extra modifiers like skin tone, gender, etc.\r\n\r\nAn alternative solution might be to return `string`, but this runs into an interesting edge case. Say that I type an `\u0027e\u0027` character, then I paste the accent modifier so that it is displayed as `\"é\"` (that\u0027s __2__ chars!). What should the behavior here be? Should `ReadKey` return `\"e\"` by itself because that\u0027s what I typed first, then return `\"\\u0301\"` on the second call because that\u0027s the accent modifier I pasted after typing `\u0027e\u0027`? Similar situation to entering a base Emoji code point, then _later_ entering a skin tone modifier. The second entry affects how the first one was intended to be displayed.\r\n\r\nNow, is this acceptable? Maybe your application doesn\u0027t interpret these as individual to-be-displayed characters and stitches them all together after the fact anyway. But if you\u0027re stitching them together, presumably you could stitch together char-by-char using the current API, and no string-by-string / Rune-by-Rune API is needed.\r\n\r\nThis is one of those weird things where the requested change need to be laid out _very_ specifically. Things that might seem obvious to one person might not seem obvious to another, and it could have a ripple effect which upends the proposed solution.",
                                           "updatedAt":  "2021-04-12T00:18:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzQ4MzkyMA==",
                                           "createdAt":  "2021-04-12T05:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WenceyWang",
                                           "body":  "The problem of `ReadKey` is it may return the first half of a surrogate pair and drop the next char, this making rubbish out and impossible to workaround in user code.\r\n\r\nIn short, I think we should at least let `ReadKey` somehow working correctly without breaking the current running code.\r\n\r\nI think it\u0027s OK to get `\"e\"` and then `\"\\u0301\"` by `ReadKey` if they are inputted as two key presses.\r\n\r\nThe problem is that we do need a `keypress-by-keypress` API. which makes programs able to respond to keypresses instead of char-based stream input. This is the way we handle console input on Windows. https://docs.microsoft.com/en-us/windows/console/readconsoleinput will return us an array of key press or mouse click events instead of char stream.\r\n\r\nUse `Console.Read` cannot read key code or modifier key status etc. We can not rely on escape sequence.\r\n\r\nI have submitted my API suggestion at https://github.com/dotnet/runtime/issues/51085 which I think makes sense for us.\r\n",
                                           "updatedAt":  "2021-04-12T06:09:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzQ5MjM0MQ==",
                                           "createdAt":  "2021-04-12T05:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WenceyWang",
                                           "body":  "@dhowett I think the problem is rooted at https://docs.microsoft.com/en-us/windows/console/key-event-record-str which uses a WCHAR to store translated Unicode character which for now the input can be a surrogate pair or sequence of Unicode codepoint.",
                                           "updatedAt":  "2021-04-12T06:06:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzc2NjMxOA==",
                                           "createdAt":  "2021-04-12T12:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DHowett",
                                           "body":  "Other applications seem capable of handling surrogate pairs in the WCHAR-typed field of two KEY_EVENT_RECORDs just fine. ",
                                           "updatedAt":  "2021-04-12T12:24:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzc3Mjg5NA==",
                                           "createdAt":  "2021-04-12T12:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "@DHowett that it\u0027s true as we can handling any surrogate pairs of two or more KEY_EVENT_RECORDs, but how to deal when the same unicode code returns different string length with other font types?",
                                           "updatedAt":  "2021-04-12T12:34:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzc3NDA4NQ==",
                                           "createdAt":  "2021-04-12T12:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmzglQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2021-04-12T12:37:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DHowett",
                                           "body":  "The font cannot change the length of a string. \n\nIf you\u0027re talking about the column count (perceived space taken up by the string of printed to a console), that\u0027s just off topic for this issue :). That\u0027s also one of the harder issues in terminal emulation.",
                                           "updatedAt":  "2021-04-12T12:36:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODQzODMxNg==",
                                           "createdAt":  "2021-04-13T05:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "If you really want your mind to melt, spec out what behavior your app will have when the user hits BACKSPACE immediately after entering a complex multi-scalar emoji. :)",
                                           "updatedAt":  "2021-04-13T05:01:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODU2ODc4NA==",
                                           "createdAt":  "2021-04-13T08:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBy6TYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "waf",
                                                                               "createdAt":  "2021-07-18T06:50:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WenceyWang",
                                           "body":  "Let me repeat the issue again:\r\n\r\nThe problem of `ReadKey` is it may return the first half of a surrogate pair and the next `ReadKey` call will return the next keypress, not the remaining part of the surrogate pair.\r\n\r\nThis makes rubbish out and impossible to work around in user code.\r\n",
                                           "updatedAt":  "2021-04-13T08:52:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODU3NTg4MQ==",
                                           "createdAt":  "2021-04-13T09:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "@WenceyWang you may need to deal with `escape sequences` to get all the bytes needed for the surrogate pair.",
                                           "updatedAt":  "2021-04-13T09:03:24Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "System.ConsoleKeyInfo can not handle Unicode surrogate pair and Emoji Sequences",
        "labels":  [
                       "bug",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29735",
        "createdAt":  "2019-06-01T22:15:25Z",
        "number":  29735,
        "author":  "JustArchi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOApwgrA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Botan626",
                                            "createdAt":  "2019-06-02T12:55:00Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-06T13:03:33Z",
        "body":  "Hello.\r\n\r\nI\u0027ve experimented a bit in my cross-platform app by declaring `Console.OutputEncoding = Encoding.Unicode;` globally before first console entry gets written.\r\n\r\nOn Windows, as expected, the output encoding is changed nicely and the console displays whole range of symbols, including cyrillic characters.\r\n\r\nOn Linux, the encoding is also changed, but the console generates garbage from this point onwards, where previously the cyrillic characters would also show properly (probably due to UTF-8 already being default there).\r\n\r\nJudging by my own research based on **[this](https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/ConsolePal.Unix.cs#L748)** line, I\u0027d expect that changing encoding on linux would truly be a no-op operation which doesn\u0027t affect anything, or at worst produces an exception to handle during runtime, but instead it broke display that worked previously.\r\n\r\nI\u0027m not sure if this is intended or not, I apologize in advance if it is but I couldn\u0027t find any issue that relates to my problem. Feel free to close it in this case.\r\n\r\nOtherwise, feel free to check the issue yourself, it should be enough to launch code similar to below on any linux machine:\r\n\r\n```c#\r\nConsole.OutputEncoding = Encoding.Unicode;\r\nConsole.WriteLine(\"привет\");\r\n```\r\n\r\nIn my case, it prints `?@825B`. It\u0027s important to test it with cyrillic or something more obscure, as `00` in ASCII characters and similar will be written as `NULL`s on the terminal, thus not displayed.\r\n\r\nAs you can expect, this issue also affects OS X.\r\n\r\nThank you in advance for looking into this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmV3rrQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODAzMzY5MA==",
                                           "createdAt":  "2019-06-02T13:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "On Ubuntu in WSL at least this does not repro\r\n```\r\ndan@DESKTOP-CJJBOPC:~/2$ dotnet run\r\n?\u0004@\u00048\u00042\u00045\u0004B\u0004\r\n dan@DESKTOP-CJJBOPC:~/2$ ls\r\n2.csproj  bin  obj  out  Program.cs\r\n```\r\n",
                                           "updatedAt":  "2019-06-02T13:57:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODAzNDY4NA==",
                                           "createdAt":  "2019-06-02T14:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6OuQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2024-11-10T17:19:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "@danmosemsft it doesn\u0027t? Your output shows the garbage I refer to caused by incorrectly used console encoding in .net core and actual encoding in the terminal. It should print \"привет\" instead, like on Windows.",
                                           "updatedAt":  "2019-06-02T14:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1MzE1OQ==",
                                           "createdAt":  "2019-06-02T18:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@JustArchi I misunderstood, you mean that writing through the Console object is messed up. I guess so, at least, my next string is double spaced:\r\n```\r\ndan@DESKTOP-CJJBOPC:~/2$ dotnet run\r\n?\u0004@\u00048\u00042\u00045\u0004B\u0004\r\n h e l l o\r\n dan@DESKTOP-CJJBOPC:~/2$\r\n```",
                                           "updatedAt":  "2019-06-02T18:11:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NDk4Ng==",
                                           "createdAt":  "2019-06-02T18:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Changing Console.OutputEncoding changes the encoding used to translate strings to the bytes written out to the underlying stream, whether that\u0027s to a terminal or redirected. There\u0027s no good way I\u0027m aware of to programmatically tell the terminal to change the encoding it uses to decode written bytes, but we dutifully follow the request so that a terminal manually changed or redirected output gets the correct data. I\u0027m not sure what else we could do here. What are you suggesting is the viable alternative?",
                                           "updatedAt":  "2019-06-02T18:36:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTQ5Mg==",
                                           "createdAt":  "2019-06-02T18:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "@stephentoub I thought of 3 approaches to this issue (all 3 apply when `!Console.IsOutputRedirected`):\r\n\r\n- Determine if it\u0027s possible to change terminal encoding, if yes, we should use it (I guess it\u0027s not viable based on the note and the fact that this is not the case yet)\r\n- Determine that it\u0027s not possible to change terminal encoding and decide to make a real no-op operation that won\u0027t affect anything.\r\n- Determine that it\u0027s not possible to change terminal encoding and decide to throw an exception to signalize the consumer about that.\r\n\r\nThe only question that remains is whether we\u0027re able to determine whether we can safely assume that terminal encoding can\u0027t be changed (because we have unix spec and we\u0027re sure that we\u0027re dealing with the terminal). If that\u0027s the case, it should be addressed through one of two ways above, as opposed to existing logic that leaves the console encoding in a state that no consumer would want it to end up with.\r\n\r\nMy current idea involves not doing anything when calling `Console.OutputEncoding` setter if we\u0027re on unix and `!Console.IsOutputRedirected`. Alternative way is throwing an exception instead. Both cases are possible only if we can safely determine when dealing with a terminal as opposed to file redirection, which I\u0027m not sure about and I believe you know better.\r\n\r\nThe objective is to somehow improve current result of leaving console encoding in a state that no consumer would want, without manually adding `if` for windows platform.\r\n\r\nThanks!",
                                           "updatedAt":  "2019-06-02T18:45:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTY3MQ==",
                                           "createdAt":  "2019-06-02T18:46:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e My current idea involves not doing anything when calling Console.OutputEncoding setter if we\u0027re on unix and !Console.IsOutputRedirected\r\n\r\nSomeone can manually change the encoding of their terminal, in which case they\u0027d want to use Console.OutputEncoding to match.  If we start ignoring that request or throwing, it breaks that use case.",
                                           "updatedAt":  "2019-06-02T18:46:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTc3Mw==",
                                           "createdAt":  "2019-06-02T18:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "That\u0027s true, but when you can\u0027t change the encoding of the already-set terminal then runtime should have logic for detecting and applying to the encoding that was already set (whether it\u0027s utf8 or anything else), and since you can\u0027t do anything with `OutputEncoding` in a way it won\u0027t break that terminal output, it could be a no-op.",
                                           "updatedAt":  "2019-06-02T18:47:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTgzNg==",
                                           "createdAt":  "2019-06-02T18:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "To the best of my knowledge you can\u0027t change encoding of already established terminal output on unix (as opposed to windows), which is why logical solution to me is runtime detecting that encoding (and applying to it), while making all future calls to output encoding a no-op.",
                                           "updatedAt":  "2019-06-02T18:48:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTg0MQ==",
                                           "createdAt":  "2019-06-02T18:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e should have logic for detecting and applying to the encoding that was already set\r\n\r\nHow?",
                                           "updatedAt":  "2019-06-02T18:48:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NTg2MA==",
                                           "createdAt":  "2019-06-02T18:48:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "That\u0027s a good question, I don\u0027t know, maybe you have some idea 😅.",
                                           "updatedAt":  "2019-06-02T18:48:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NjAxNw==",
                                           "createdAt":  "2019-06-02T18:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "Majority of unix applications seem to depend on `LANG`, `LC_CTYPE` and `LC_ALL` for that, although it\u0027s true that it\u0027s not really stating the encoding per-se, but what the terminal *should* be using.",
                                           "updatedAt":  "2019-06-02T18:51:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NjAzOA==",
                                           "createdAt":  "2019-06-02T18:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOApw3FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JustArchi",
                                                                               "createdAt":  "2019-06-02T18:53:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e maybe you have some idea\r\n\r\nI\u0027m not aware of any good way to reliably determine the encoding the terminal is using (if anyone knows of one, please share).  And without that, I don\u0027t think this is actionable.",
                                           "updatedAt":  "2019-06-02T18:51:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NjA1Nw==",
                                           "createdAt":  "2019-06-02T18:51:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e although it\u0027s true that it\u0027s not really stating the encoding per-se\r\n\r\nRight",
                                           "updatedAt":  "2019-06-02T18:51:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NjE1OA==",
                                           "createdAt":  "2019-06-02T18:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "Which is why I\u0027m not really suggesting any particular solution as I don\u0027t feel comfortable enough doing so, I\u0027m just brainstorming potential approaches to the problem in order to determine whether there is anything we can do to improve in regard to this issue.\r\n\r\nIf you feel like there is nothing we can do to improve this use case then I fully understand that and the issue can be closed, I just thought that perhaps there is some possible improvement here in regards to avoiding breaking the encoding for unaware customers.",
                                           "updatedAt":  "2019-06-02T18:53:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1NzMyMA==",
                                           "createdAt":  "2019-06-02T19:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@JustArchi \r\n\r\nWhat *is* the use case? Why are you setting `Console.OutputEncoding` in the first place?\r\n\r\nPersonally, I think it\u0027s really confusing that `Encoding.Unicode` actually means UTF-16, but I\u0027m not sure there\u0027s anything that can be done about that.",
                                           "updatedAt":  "2019-06-02T19:10:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA1OTA4OQ==",
                                           "createdAt":  "2019-06-02T19:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "@svick I\u0027m changing encoding on Windows to have consistent display of more obscure characters for my users, this involves stuff like cyrillic characters on non-cyrillic OS languages to display properly (instead of bunch of `????`).\r\n\r\nAccidentally this line regressed on linux/osx setups since there it changed the output encoding without changing terminal encoding, so I was forced to make my line above a conditional `if (windows)` in order to avoid breaking linux/osx.\r\n\r\nThe idea was that runtime could handle it in a smart way on linux/osx instead of changing encoding without terminal, but I guess there is no good way to go about this. The end objective was to have a transparency in that command that could work regardless of OS, instead of me sticking to current way of `if (windows)` (which is not really wrong, but could be done better and I\u0027d prefer to rely on .net core to handle stuff such as determining whether underlying OS can do what I ask CLR to do).",
                                           "updatedAt":  "2019-06-02T19:35:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA2NTE2NQ==",
                                           "createdAt":  "2019-06-02T21:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6Oubg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RokeJulianLockhart",
                                                                               "createdAt":  "2024-11-10T17:20:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "@JustArchi I think a good approach to do that is to use `Console.OutputEncoding = Encoding.UTF8;` everywhere. On Windows, setting `OutputEndoding` notifies the OS, which means both UTF-16 and UTF-8 should work:\r\n\r\nhttps://github.com/dotnet/corefx/blob/aa0c037c1f64c91f73698d0607dea16904d08da8/src/System.Console/src/System/ConsolePal.Windows.cs#L113-L120\r\n\r\nOn Unix, that doesn\u0027t work, so you should stick with the default UTF-8:\r\n\r\nhttps://github.com/dotnet/corefx/blob/aa0c037c1f64c91f73698d0607dea16904d08da8/src/System.Console/src/System/ConsolePal.Unix.cs#L746-L750",
                                           "updatedAt":  "2019-06-02T21:01:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODA2ODE5Ng==",
                                           "createdAt":  "2019-06-02T21:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "@svick This is actually what I\u0027ve decided to go with, but I still have `if` for Windows in-place, because if by any chance somebody would be running terminal in non-utf8 then I can\u0027t do anything about that anyway, so I rely on what runtime can detect in this case and I don\u0027t intend to change it at all. If unix terminal would be running in something like ASCII then forcing UTF-8 response could still screw it up, because characters that do not fit in a single byte would be interpreted as several wrong characters instead of just ASCII fallback of `?`, so the best solution for me right now is to use UTF-8 on Windows and never attempt to change output encoding at all for all non-windows boxes.",
                                           "updatedAt":  "2019-06-02T21:50:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZXeut",
                                           "createdAt":  "2025-01-06T13:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArchi",
                                           "body":  "It\u0027s mentioned in https://github.com/dotnet/runtime/issues/52374 so I\u0027m not sure if we need standalone issue, but the problem of course still applies and is not resolved at the time of posting.",
                                           "updatedAt":  "2025-01-06T13:03:18Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Changing console\u0027s OutputEncoding on linux to unicode generates garbage",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30464",
        "createdAt":  "2019-08-02T12:11:00Z",
        "number":  30464,
        "author":  "paralaxsd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T06:45:25Z",
        "body":  "Hi,\r\nI have an issue with the way the `Console.CancelKeyPress` event is implemented:\r\n\r\nIn my scenario I\u0027m running a vanilla ASP.Net Core 2.2 web application. The web application internally adds a ctrl-c handler and gracefully shuts down the application when ctrl-c is pressed.\r\n\r\nNow I had to add some logic to the application that\u0027s run in a Java VM via [JNI](https://en.wikipedia.org/wiki/Java_Native_Interface). It seems that initializing JNI registers a SIGINT handler that throws away the console ctrl-c handler registered by ASP.Net.  \r\nPressing ctrl-c when JNI is initialized immediately exits the process even leaving zombie processes behind on Linux.\r\n\r\nI looked into the implementation of `Console.CancelKeyPress` and found that it uses an internal helper type [ConsolePal.ControlCHandlerRegistrar](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Console/src/System/Console.cs#L33) that\u0027s only registering a ctrl-c handler on the first usage of event addition. On subsequent event additions [only the cancel callbacks are chained together](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Console/src/System/Console.cs#L335).\r\n\r\nIn my scenario this means that after JNI init I can no longer use `Console.CancelKeyPress` because it will not re-register the handler and throw the JNI handler out.\r\n\r\nI have a workaround for this issue but it depends on private reflection. It sets `Console.s_registrar` to null and registers a dummy ctrl-c handler in order to throw out the JNI handler. Naturally this approach can break any day when the implementation changes and so I\u0027d appreciate any help in this matter.\r\n\r\n```csharp\r\nvar consoleType = typeof(Console);\r\nvar registrar = consoleType.GetField(\"s_registrar\", BindingFlags.Static | BindingFlags.NonPublic);\r\n\r\nif (registrar != null)\r\n{\r\n\tregistrar.SetValue(null, null);\r\n\r\n\tvoid Dummy(object o, ConsoleCancelEventArgs e) { }\r\n\tConsole.CancelKeyPress += Dummy;\r\n}\r\n\r\n```\r\n\r\nThanks!\r\n\r\nEdit: Unfortunately the workaround above does not work on Linux. I\u0027ve validated it on Windows with dotnet core 2.2.101.\r\n\r\nEdit 2: I found that on Linux a workaround for this issue is to retrieve the current `SIGINT` handler before a problematic native call and restore if afterwards. E.g.:\r\n\r\n```c++\r\n#include \u003csignal.h\u003e\r\n// ...\r\nstruct sigaction oldAct = {0};\r\nsigaction(SIGINT, nullptr, \u0026oldAct);\r\n\r\n// a third party call that changes the SIGINT handler\r\nconst long flag = JNI_CreateJavaVM(\u0026vm, reinterpret_cast\u003cvoid**\u003e(\u0026env), \u0026vmArgs);\r\n\r\nsigaction(SIGINT, \u0026oldAct, nullptr);\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJrCIJw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODgwODE5MA==",
                                           "createdAt":  "2020-06-24T13:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @paralaxsd \r\n\r\nThank you for detailed report!\r\n\r\nI am not familiar with `JNI` and I\u0027ve one question: is it running within the same process or a different process on the same VM?\r\n\r\nThanks,\r\nAdam\r\n",
                                           "updatedAt":  "2020-06-24T13:07:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTEwMzM5OQ==",
                                           "createdAt":  "2020-06-24T22:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paralaxsd",
                                           "body":  "\u003e I am not familiar with `JNI` and I\u0027ve one question: is it running within the same process or a different process on the same VM?\r\n\u003e\r\n\r\nHi Adam,\r\n\r\nIn the scenario I\u0027ve described a `JNI` VM was created in-process via PInvoke. Initializing  JNI is really just an example of any piece of (third party) native code replacing the ctrl-c handler which leaves `Console.CancelKeyPress` unable to continue working properly afterwards.",
                                           "updatedAt":  "2020-06-24T22:46:32Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Third party code may remove cancel keypress handler",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31466",
        "createdAt":  "2019-11-09T21:48:48Z",
        "number":  31466,
        "author":  "Serentty",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA1M3NQ==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Evrey",
                                            "createdAt":  "2019-11-09T21:54:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Zulu-Inuoe",
                                            "createdAt":  "2019-11-09T23:42:15Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "surabax",
                                            "createdAt":  "2019-11-09T23:55:32Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Safirion",
                                            "createdAt":  "2019-11-10T04:34:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "khellang",
                                            "createdAt":  "2019-11-12T22:41:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2019-11-16T14:25:45Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-01-06T16:32:29Z",
        "body":  "In my tests on Windows, .NET Core\u0027s console I/O defaults to the user\u0027s local codepage. This leads to quite a bit of overhead as .NET\u0027s UTF-16 strings have to be converted to the codepage, just for the console to convert them back to UTF-16. On top of this, it means that a lot of characters can\u0027t be properly represented, which I discovered by accident when I was unable to enter a euro sign in my program as my locale (932) doesn\u0027t have it. There\u0027s an easy fix for this, which is to change the console encoding manually, but unless the programmer is doing fuzzing testing, this problem could be hard to discover.\r\n\r\nWith that in mind, I propose that the default encoding for console I/O on Windows be changed to UTF-16, allowing low-overhead and lossless passing around of strings between the console and .NET programs.\r\n\r\nOn Mac and Linux, the default already seems to be UTF-8, which a sensible choice on those platforms, and I think Windows should be brought in line with those other two by using a Unicode encoding (UTF-16) for its I/O as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmWQJbg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MjU5MDUxOQ==",
                                           "createdAt":  "2019-11-11T19:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1J7fw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2019-11-13T05:58:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Serentty",
                                                                               "createdAt":  "2019-11-15T15:40:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "This seems reasonable. We\u0027d need to understand it from a compat perspective. Most console apps are expecting -- purely by default, so they may not even realize it -- the user\u0027s codepage when reading stdin. Changing the default here might create issues when piping between apps.\r\n\r\n",
                                           "updatedAt":  "2019-11-11T19:56:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE0MTg3OQ==",
                                           "createdAt":  "2019-11-12T22:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Shouldn\u0027t morden applications be totally agnostic to code pages? All strings should only be processed in some variation of Unicode. ",
                                           "updatedAt":  "2019-11-12T22:15:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE0ODE3MQ==",
                                           "createdAt":  "2019-11-12T22:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHNbDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Evrey",
                                                                               "createdAt":  "2019-12-15T20:01:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2020-06-12T09:48:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Serentty",
                                           "body":  "@huoyaoyuan I agree. The issue here is deciding whether it\u0027s okay to make this change, which is possibly breaking for a very few specific use cases. I think user I/O over the console should be mostly unaffected, but as was brought up, this could break applications which assume codepages when piping the standard input and output. However, such applications are already incredibly fragile since they rely on the user having the correct codepage set system-wide, so they\u0027re likely to break all the time even without this change. In my opinion, this change would fix more than it breaks for the vast majority of users.",
                                           "updatedAt":  "2019-11-12T22:33:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NTg0NzMzMA==",
                                           "createdAt":  "2019-12-15T21:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "I\u0027ve seen some other threads complaining that the console is defaulting to UTF-8 instead of codepages for them on Windows, but these are a few years old, so I\u0027m a bit confused now. Was the default behaviour changed to default to codepages instead?",
                                           "updatedAt":  "2019-12-15T21:12:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjk5OTczNQ==",
                                           "createdAt":  "2020-06-12T00:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "@scalablecory Would a change like this be a good fit for a major release like .NET 5 or 6? After all, those usually have a list of migration notes, compared to more minor releases.",
                                           "updatedAt":  "2020-06-12T00:29:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZZAlu",
                                           "createdAt":  "2025-01-06T16:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Ping to keep this alive. Encoding is quite annoying for non-Latin locales. We do need a good default solution for it.",
                                           "updatedAt":  "2025-01-06T16:32:18Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Consider changing the default console encoding on Windows to UTF-16",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/299",
        "createdAt":  "2019-11-26T17:24:11Z",
        "number":  299,
        "author":  "hez2010",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-16T09:01:32Z",
        "body":  "# Proposal\r\n## Async Console I/O APIs\r\n\r\nSince now we can write `async Task Main`, I think it\u0027s necessary to add APIs to support cancellable async console I/O operations without needs of operating `Console.In`, `Console.Out` directly for converience. \r\n\r\n## Proposed APIs\r\n```diff\r\npublic static class Console \r\n{\r\n+    public static Task WriteAsync(string content, CancellationToken cancellationToken);\r\n+    // ... other overloads for char, int and etc\r\n+    public static Task WriteLineAsync(T content, CancellationToken cancellationToken);\r\n+    // ... other overloads for char, int and etc\r\n+    public static Task\u003cint\u003e ReadKeyAsync(CancellationToken cancellationToken);\r\n+    public static Task\u003cstring\u003e ReadLineAsync(CancellationToken cancellationToken);\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObB_PlA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1ODc1MDMwMg==",
                                           "createdAt":  "2019-11-26T18:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA2ONRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2019-11-27T12:13:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antiufo",
                                                                               "createdAt":  "2019-11-27T19:12:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2019-11-28T09:39:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2019-11-30T18:10:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "There are so many overloads on textwriter. Accessing `In` or `Out` is just literally 3 or 4 characters without any code flow changes, and can be much shorter if saved as variable.\r\n\r\nOnly `ReadKeyAsync` is really benificial. ",
                                           "updatedAt":  "2019-11-26T18:04:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTk3OTU5NA==",
                                           "createdAt":  "2019-11-30T15:04:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "Also, at least under Windows, but I would assume other implementations are similar, the in/out streams are implemented as synchronous-only streams, so the proposal to have first-class async methods on Console would be a misleading hidden threadpool block.",
                                           "updatedAt":  "2019-11-30T15:04:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r3kXa",
                                           "createdAt":  "2023-11-14T08:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Console is not opened for async IO on Windows, but with #87103 and #72503 we should be able to get cancellation support on Windows. I wonder whether it would be possible to implement it on Unix.\r\n\r\ncc @stephentoub @tmds",
                                           "updatedAt":  "2023-11-14T08:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sH8-U",
                                           "createdAt":  "2023-11-16T08:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "```\r\n+    public static Task WriteAsync(string content, CancellationToken cancellationToken);\r\n+    // ... other overloads for char, int and etc\r\n+    public static Task WriteLineAsync(T content, CancellationToken cancellationToken);\r\n```\r\n\r\nThese don\u0027t seem particularly useful: usually you want to block until the output was written.\r\n\r\n```cs\r\n+    public static Task\u003cint\u003e ReadKeyAsync(CancellationToken cancellationToken);\r\n+    public static Task\u003cstring\u003e ReadLineAsync(CancellationToken cancellationToken);\r\n```\r\nThese have a UX race between cancellation and the user providing input: was the input for the previous or the next caller?\r\n\r\nIf `ReadKeyAsync` incercepts (like `ReadKey(incercept: true)`) on cancellation the key could go back in the queue.\r\n\r\n\u003e I wonder whether it would be possible to implement it on Unix.\r\n\r\nI think we may perform the read on a separate thread where it blocks until there is input.",
                                           "updatedAt":  "2023-11-16T09:01:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Proposal: Async Console I/O APIs",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34454",
        "createdAt":  "2020-04-02T12:27:10Z",
        "number":  34454,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-13T18:34:39Z",
        "body":  "The `WindowAndCursorProps` tests are disabled in Mono\u0027s CoreFX.issues_windows.rsp file. After enabling only `WindowAndCursorProps.Title_Set_Windows` fails locally with the following output:\r\n```\r\n  Unhandled Exception:\r\n  System.IO.DirectoryNotFoundException: Could not find a part of the path.\r\n     at System.ConsolePal.get_Title() in _\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs:line 621\r\n     at System.Console.get_Title() in _\\src\\libraries\\System.Console\\src\\System\\Console.cs:line 287\r\n     at WindowAndCursorProps.\u003c\u003ec.\u003cTitle_Set_Windows\u003eb__24_0(String lengthOfTitleString) in _\\src\\libraries\\System.Console\\tests\\WindowAndCursorProps.cs:line 253\r\n     at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs:line 360\r\n  --- End of stack trace from previous location ---\r\n     at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 95\r\n  [ERROR] FATAL UNHANDLED EXCEPTION: System.IO.DirectoryNotFoundException: Could not find a part of the path.\r\n     at System.ConsolePal.get_Title() in _\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs:line 621\r\n     at System.Console.get_Title() in _\\src\\libraries\\System.Console\\src\\System\\Console.cs:line 287\r\n     at WindowAndCursorProps.\u003c\u003ec.\u003cTitle_Set_Windows\u003eb__24_0(String lengthOfTitleString) in _\\src\\libraries\\System.Console\\tests\\WindowAndCursorProps.cs:line 253\r\n     at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs:line 360\r\n  --- End of stack trace from previous location ---\r\n     at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 95\r\n      WindowAndCursorProps.Title_Set_Windows(lengthOfTitle: 0) [FAIL]\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n        Stack Trace:\r\n          Child exception:\r\n            System.IO.DirectoryNotFoundException: Could not find a part of the path.\r\n          _\\src\\libraries\\System.Console\\src\\System\\ConsolePal.Windows.cs(621,0): at System.ConsolePal.get_Title()\r\n          _\\src\\libraries\\System.Console\\src\\System\\Console.cs(287,0): at System.Console.get_Title()\r\n          _\\src\\libraries\\System.Console\\tests\\WindowAndCursorProps.cs(253,0): at WindowAndCursorProps.\u003c\u003ec.\u003cTitle_Set_Windows\u003eb__24_0(String lengthOfTitleString)\r\n          _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(360,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n          Child process:\r\n            System.Console.Tests, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 WindowAndCursorProps+\u003c\u003ec Void \u003cTitle_Set_Windows\u003eb__24_0(System.String)\r\n          Child arguments:\r\n            0\r\n```\r\nThe test will be marked with `ActiveIssue` in https://github.com/dotnet/runtime/pull/32592",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJHzf8A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjE2MzU2OA==",
                                           "createdAt":  "2020-04-10T18:41:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "GetConsoleTitleW is failing with ERROR_PATH_NOT_FOUND. Would need a debugger to figure out why. Either a wierd Windows bug or a wierd interop bug in Mono runtime? We do properly `SetLastError = true` on this call.",
                                           "updatedAt":  "2020-04-10T18:41:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] Test failed on windows: WindowAndCursorProps.Title_Set_Windows",
        "labels":  [
                       "area-System.Console",
                       "os-windows",
                       "help wanted",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38051",
        "createdAt":  "2020-06-17T19:34:37Z",
        "number":  38051,
        "author":  "nickorlow",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDDJhQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2025-05-31T14:33:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-29T10:13:38Z",
        "body":  "### Description\r\n\r\nOn Windows, using the left/right arrow keys lets you modify the middle of a set of text from Console.ReadLine without having to delete any of it. However, on MacOS this feature is missing, making it so that you have to delete part of the text in order to modify other parts of it.\r\n\r\n### Configuration\r\n\r\nFound with MacOS, not tested with Linux. Windows has this functionality already.\r\n\r\nI intend to attempt to fix this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObSkhmA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTU3OTU2Mw==",
                                           "createdAt":  "2020-06-17T19:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-17T19:34:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTYxNTc3Nw==",
                                           "createdAt":  "2020-06-17T20:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHxsLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nickorlow",
                                                                               "createdAt":  "2020-06-17T20:47:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ygra",
                                                                               "createdAt":  "2020-06-18T04:29:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "https://github.com/dotnet/runtime/issues/15711",
                                           "updatedAt":  "2020-06-17T20:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41h9Xn",
                                           "createdAt":  "2021-08-13T01:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-hckw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozkee",
                                                                               "createdAt":  "2021-08-13T04:28:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-08-13T06:03:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2021-08-13T08:15:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2021-08-13T14:25:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nickorIow",
                                                                               "createdAt":  "2021-10-15T17:17:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@adamsitnik @Jozkee @stephentoub I\u0027m thinking we should move this to 7.0 for the following reasons:\r\n\r\n- PR https://github.com/dotnet/runtime/pull/49649 was looking to fix this. The original contributor could not continue working on it, but @eiriktsarpalis and @nickorlow took over and pushed some additional commits to the PR.\r\n- Unfortunately, some OSX regressions were introduced with those last commits, which still need to be investigated and fixed.\r\n- @tmds merged PR https://github.com/dotnet/runtime/pull/49649 a few days ago, which heavily modified code that this issue\u0027s PR is also touching.\r\n- I am currently reviewing both PRs to understand how to merge them, but I\u0027m noticing it\u0027s not trivial.\r\n- The change affects all platforms, and manual testing is required to verify this fix.\r\n- I am not sure we will have enough time to get feedback from the community to ensure we didn\u0027t introduce regressions.\r\n\r\nDoes anyone have a strong reason to merge this in 6.0, or can we move it to 7.0?\r\n\r\n\r\n",
                                           "updatedAt":  "2021-08-13T01:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41iCJP",
                                           "createdAt":  "2021-08-13T02:19:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Makes sense to me. We have seen subtle regressions in this code in the past.",
                                           "updatedAt":  "2021-08-13T02:19:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41iaTL",
                                           "createdAt":  "2021-08-13T06:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@carlossanlop sounds good to me, thanks for trying!",
                                           "updatedAt":  "2021-08-13T06:04:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZREiV",
                                           "createdAt":  "2023-04-05T15:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nickorlow",
                                           "body":  "Hey maintainers cc: @stephentoub  @jeffschwMSFT \r\n\r\nI figured I\u0027d take another stab at this since it seems like nobody is working on it right now",
                                           "updatedAt":  "2023-04-05T15:05:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cpv-B",
                                           "createdAt":  "2023-05-19T11:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e I figured I\u0027d take another stab at this since it seems like nobody is working on it right now\r\n\r\n@nickorlow Awesome! Please let us know if you need any help!",
                                           "updatedAt":  "2023-05-19T11:42:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eRdLP",
                                           "createdAt":  "2023-06-07T23:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nickorlow",
                                           "body":  "Update on my fix: I\u0027ve been able to re-implement my changes from when I did this the first time. I was also able to fix 2 of the regressions that it introduced last time. Currently there\u0027s a bug involving wrapping multiple lines that I haven\u0027t seen before.  Once that\u0027s fixed,  I think I should be ready for a PR.",
                                           "updatedAt":  "2023-06-07T23:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tKSGY",
                                           "createdAt":  "2023-11-29T08:13:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I was hoping PowerShell `ReadLineFromConsole` would have a good solution for this and other improvements to ReadLine (https://github.com/dotnet/runtime/issues/94860), but after looking further into it I learned PowerShell actually uses  https://github.com/PowerShell/PSReadLine.\r\n\r\nThere is no perfect solution to this problem, so what we do needs to be a \u0027good enough\u0027.\r\n\r\nOne of the challenging cases that should work is: typing wrapped lines at the bottom of the terminal.\r\nI don\u0027t think terminals offer a way to detect this wrapping except by determining the cursor position after each key press.\r\n\r\nOther challenges include:\r\n- Ensure we preserve the prompt that may have been written on the line before the ReadLine call.\r\n- Characters that span multiple colums, like emojis.\r\n- Handing window resizes. Other apps don\u0027t seem to handle this perfect either.\r\n\r\n@nickorlow did you make more progress on your fix? How does it work in the above cases?",
                                           "updatedAt":  "2023-11-29T10:13:38Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Cannot use left/right arrow keys to edit text in Console.ReadLine on Unix",
        "labels":  [
                       "enhancement",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38966",
        "createdAt":  "2020-07-08T23:02:20Z",
        "number":  38966,
        "author":  "daxian-dbw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB1fyCA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "jdrch",
                                            "createdAt":  "2020-07-08T23:07:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "masatoru",
                                            "createdAt":  "2021-08-07T22:46:34Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-11-14T07:31:02Z",
        "body":  "### Description\r\n\r\nWhen pasting text with Unicode character in it to console on Windows (conhost) using right click, the Unicode character, such as the \u0027EN DASH\u0027 character in the following example\r\n\u003eNew-StoragePool –FriendlyName\r\n\r\n will somehow be skipped and missing from the `Console.ReadKey(true)` calls. More investigation shows the call to `Console.KeyAvailable` could be the culprit -- when `Console.KeyAvailable` is not in use, `Console.ReadKey(true)` is able to receive the \u0027EN DASH\u0027 character just fine.\r\n\r\n### Repro code\r\n\r\n```c#\r\nusing System;\r\n\r\nnamespace console\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            do {\r\n                if (Console.KeyAvailable)\r\n                {\r\n                    var key = Console.ReadKey(true);\r\n                    Print(key);\r\n                }\r\n                else\r\n                {\r\n                    var key = Console.ReadKey(true);\r\n                    Print(key);\r\n                }\r\n            }\r\n            while(true);\r\n        }\r\n\r\n        // Print the decimal value of `KeyChar`, the `ConsoleKey` and `Modifiers` values.\r\n        private static void Print(ConsoleKeyInfo key)\r\n        {\r\n            Console.Write(\u0027[\u0027);\r\n            Console.Write((int)key.KeyChar);\r\n            Console.Write($\" {key.Key} {key.Modifiers}\");\r\n            Console.Write(\u0027]\u0027);\r\n        }\r\n    }\r\n}\r\n```\r\nCopy the text \"l –F\", and then right click to paste the text, you will see that the \u0027EN DASH\u0027 character is missing:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/86974545-65915800-c12b-11ea-8b70-95901f3b8ab1.png)\r\n\r\nThen, copy the text \"–F\" with the \u0027EN DASH\u0027 character being the first character, so `Console.KeyAvailable` will not run before accepting that character, then `Console.Readkey(true)` is able to receive that Unicode character ():\r\n\r\n![image](https://user-images.githubusercontent.com/127450/86978194-194a1600-c133-11ea-8bd7-0400a7a465d4.png)\r\n\r\n### Additional information\r\n\r\nPlease note that, the same issue happens in .NET 5 preview as well.\r\n\r\nIf I change the `Main` method above to be the following, then `Console.Readkey` can always receive the Unicode character.\r\nBut I have to use `Console.KeyAvailable` in my project together with `Console.ReadKey`, and hence cannot receive the Unicode when user is pasting by right click in console.\r\n\r\n```c#\r\n        static void Main(string[] args)\r\n        {\r\n            do\r\n            {\r\n                var key = Console.ReadKey(true);\r\n                Print(key);\r\n            }\r\n            while(true);\r\n        }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa91rVQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTgwMTMzMg==",
                                           "createdAt":  "2020-07-08T23:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-08T23:02:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MTIzMzMzOQ==",
                                           "createdAt":  "2020-07-20T17:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Hi @daxian-dbw \r\n\r\nI tried your reproduction locally, but couldn\u0027t reproduce the issue. This is what I get on the powershell terminal:\r\n![image](https://user-images.githubusercontent.com/2813363/87968484-637ab200-cab8-11ea-9f97-db1b0f7979f6.png)\r\n\r\nAnd this is what I see using powershell core on Windows terminal:\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/87968426-4f36b500-cab8-11ea-89b9-08667db23565.png)\r\n\r\nThis is using .NET Core 3.1.302, but the behaviour is similar in .NET 5 preview.",
                                           "updatedAt":  "2020-07-20T17:43:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjAyMjg3Ng==",
                                           "createdAt":  "2020-07-21T18:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "@eiriktsarpalis Thanks for looking into this!\r\nPlease try out the repro from cmd.exe. I don\u0027t know why it works in PowerShell, but it repros consistently when running it from cmd.exe. Below is a screen gif of it when I paste \"l –F\" with right clicking. The input/output encoding\u0027s are the defaults:\r\n\r\n```\r\nOutputEncoding: utf-8\r\nInputEncoding: Codepage - 437\r\n```\r\n\r\n![tabcom](https://user-images.githubusercontent.com/127450/88090191-16432280-cb42-11ea-86a6-7b733a104be9.gif)\r\n",
                                           "updatedAt":  "2020-07-21T18:13:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjUyNDM5NA==",
                                           "createdAt":  "2020-07-22T15:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027m still not reproducing :/\r\n\r\n![image](https://user-images.githubusercontent.com/2813363/88196505-2db10700-cc39-11ea-9b81-df8ede332d82.png)\r\n\r\n@daxian-dbw are you able to reproduce on a second machine?\r\n@adamsitnik when you get back, would you be able to try and reproduce locally?",
                                           "updatedAt":  "2020-07-22T15:35:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjU2NzY3NA==",
                                           "createdAt":  "2020-07-22T16:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "@eiriktsarpalis I found the OutputEncoding may plays a role here. I added `Console.OutputEncoding = Encoding.UTF8` below to the original repro code, and now I can reproduce the issue in both cmd.exe and powershell core.\r\n\r\n```c#\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace console\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.OutputEncoding = Encoding.UTF8;\r\n            Console.WriteLine(\"OutputEncoding: {0}\", Console.OutputEncoding.WebName);\r\n            Console.WriteLine(\"InputEncoding: {0}\", Console.InputEncoding.WebName);\r\n\r\n            do {\r\n                if (Console.KeyAvailable)\r\n                {\r\n                    var key = Console.ReadKey(true);\r\n                    Print(key);\r\n                }\r\n                else\r\n                {\r\n                    var key = Console.ReadKey(true);\r\n                    Print(key);\r\n                }\r\n            }\r\n            while(true);\r\n        }\r\n\r\n        private static void Print(ConsoleKeyInfo key)\r\n        {\r\n            Console.Write(\u0027[\u0027);\r\n            Console.Write((int)key.KeyChar);\r\n            Console.Write($\" {key.Key} {key.Modifiers}\");\r\n            Console.Write(\u0027]\u0027);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Run from cmd.exe\r\n\r\n#### paste \"l –F\" by right clicking:\r\n\r\n![tabcom](https://user-images.githubusercontent.com/127450/88200987-c163e280-cbfb-11ea-800d-83347db788ed.gif)\r\n\r\n#### paste  \"–F\" with the \u0027EN DASH\u0027 character being the first character by right clicking:\r\n\r\n![tabcom](https://user-images.githubusercontent.com/127450/88201378-39caa380-cbfc-11ea-8c25-8e6e5c02e2e7.gif)\r\n\r\n### Run from powershell core\r\n\r\n#### paste \"l –F\" by right clicking:\r\n\r\n![tabcom](https://user-images.githubusercontent.com/127450/88201499-62529d80-cbfc-11ea-9de0-34a57e587fc4.gif)\r\n\r\n#### paste  \"–F\" with the \u0027EN DASH\u0027 character being the first character by right clicking:\r\n\r\n![tabcom](https://user-images.githubusercontent.com/127450/88201610-84e4b680-cbfc-11ea-9678-642c125ac7a4.gif)\r\n\r\n\r\n",
                                           "updatedAt":  "2020-07-22T16:54:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjU3NDMzMA==",
                                           "createdAt":  "2020-07-22T17:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "@eiriktsarpalis Additional data point: I found this only reproduce in Windows Terminal. If I do the same in the conhost, then the \u0027EN DASH\u0027 character can always be captured as `[45 OemMinus 0]`, no matter launching `console.exe` from cmd.exe, or PowerShell core, or Windows PowerShell. Also, I tried on a second machine and it\u0027s the same behavior.\r\n\r\nSo a side question: why the \u0027EN DASH\u0027 character results in different `ConsoleKeyInfo` in Windows Terminal vs. conhost?",
                                           "updatedAt":  "2020-07-22T17:09:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Mjk4MjE3Nw==",
                                           "createdAt":  "2020-07-23T12:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027m reproducing the same behaviour. Basically the character is omitted on Windows terminal only (reproducing with either cmd, PowerShell or Git Bash), but not on any other terminal emulators that I tested. It namely works for Visual Studio Console, Git bash, Powershell classic and ConEmu. I\u0027ll update the issue description accordingly.",
                                           "updatedAt":  "2020-07-23T12:37:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Mjk4MzMzMQ==",
                                           "createdAt":  "2020-07-23T12:40:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Also, the issue _does not_ reproduce when using Windows terminal on WSL.",
                                           "updatedAt":  "2020-07-23T12:40:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDAyMDQ0Mw==",
                                           "createdAt":  "2020-07-26T17:56:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "It would be very helpful if @DHowett can share some insight, especially on this question:\r\n\u003e So a side question: why the \u0027EN DASH\u0027 character results in different ConsoleKeyInfo in Windows Terminal vs. conhost?\r\n\r\nThanks in advance @DHowett!",
                                           "updatedAt":  "2020-07-26T17:56:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjI0MTEyOQ==",
                                           "createdAt":  "2021-02-03T05:29:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msftrncs",
                                           "body":  "This looks like a potential problem area.\r\n\r\nhttps://github.com/dotnet/runtime/blob/d1c0fa82435ec5774f038dd7f33dfada1f1083b9/src/libraries/System.Console/src/System/ConsolePal.Windows.cs#L285-L296\r\n\r\nCould it be possible that these characters are not triggering IsKeyDownEvent and this loop is eating them?\r\n\r\n",
                                           "updatedAt":  "2021-02-03T05:29:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41U7L9",
                                           "createdAt":  "2021-08-07T16:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCGpJlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "masatoru",
                                                                               "createdAt":  "2021-08-07T22:49:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "wswind",
                                                                               "createdAt":  "2021-12-15T03:08:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "shibayan",
                                           "body":  "I\u0027ve noticed the same problem. Similarly, if you call `Console.KeyAvailable`, certain characters will be skipped. This occurred when I pasted a string containing \u0027KATAKANA MIDDLE DOT\u0027 into the console as shown below.\r\n\r\n\u003eA・B\r\n\r\nOddly enough, it didn\u0027t happen in the Windows Terminal, but seemed to happen in the command prompt.\r\n\r\n### Repro code\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace ConsoleApp28\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            do\r\n            {\r\n                var keyInfo = Console.ReadKey(true);\r\n\r\n                Console.WriteLine($\"KeyChar = {keyInfo.KeyChar}, Key = {keyInfo.Key}, Modifiers = {keyInfo.Modifiers}\");\r\n\r\n            } while (Console.KeyAvailable/*true*/);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Use `Console.KeyAvailable`\r\n\r\npaste \"A・B\" by right clicking:\r\n\r\n![image](https://user-images.githubusercontent.com/1356444/128607528-b5f9b60b-0126-4130-b415-a439187134d1.png)\r\n\r\n### Not use\r\n\r\npaste \"A・B\" by right clicking:\r\n\r\n![image](https://user-images.githubusercontent.com/1356444/128607503-85c07815-ddaf-410a-aa1c-b2ea943334d4.png)\r\n",
                                           "updatedAt":  "2021-08-07T16:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r3WtV",
                                           "createdAt":  "2023-11-14T07:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e This looks like a potential problem area.\r\n\r\nI\u0027ve marked this issue with `help wanted` label. The person who is willing to work on it should take one of the provided repro apps and debug the code pointed by @msftrncs in https://github.com/dotnet/runtime/issues/38966#issuecomment-772241129 If that is the source of the problem, please send a PR with a fix.\r\n",
                                           "updatedAt":  "2023-11-14T07:31:02Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[Windows Terminal] `Console.KeyAvailable` causes the next Unicode character input \u0027EN DASH\u0027 to be skipped in console",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38998",
        "createdAt":  "2020-07-09T15:31:26Z",
        "number":  38998,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-13T18:35:37Z",
        "body":  "https://github.com/dotnet/runtime/pull/38334 un-ActiveIssue\u0027d the test yesterday.\r\ncc: @tmds\r\n\r\n```\r\n/private/tmp/helix/working/A13908BE/w/B17A0936/e /private/tmp/helix/working/A13908BE/w/B17A0936/e\r\n  Discovering: System.Console.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Console.Tests (found 102 of 135 test cases)\r\n  Starting:    System.Console.Tests (parallel test collections = on, max threads = 4)\r\n    CancelKeyPressTests.HandlerInvokedForSigQuit [FAIL]\r\n      Half-way through waiting for remote process.\r\n      Timed out at 7/9/2020 6:03:58 AM after 60000ms waiting for remote process.\r\n      \tProcess ID: 16003\r\n      \tHandle: 844\r\n      \tName: dotnet\r\n      \tMainModule: /private/tmp/helix/working/A13908BE/p/dotnet\r\n      \tStartTime: 7/9/2020 6:02:58 AM\r\n      \tTotalProcessorTime: 00:00:06.7481305\r\n      \r\n      Stack Trace:\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(225,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(58,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose()\r\n        /_/src/libraries/System.Console/tests/CancelKeyPress.Unix.cs(89,0): at CancelKeyPressTests.HandlerInvokedForSignal(Int32 signalOuter)\r\n        /_/src/libraries/System.Console/tests/CancelKeyPress.Unix.cs(37,0): at CancelKeyPressTests.HandlerInvokedForSigQuit()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKNu7Jw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjE5NjY4Mg==",
                                           "createdAt":  "2020-07-09T15:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-09T15:31:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjE5Njg2Ng==",
                                           "createdAt":  "2020-07-09T15:31:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @adamsitnik ",
                                           "updatedAt":  "2020-07-09T15:31:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDA1MTcxMg==",
                                           "createdAt":  "2020-08-14T12:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "The test has been disabled in https://github.com/dotnet/runtime/pull/39003, I am moving it to 6.0",
                                           "updatedAt":  "2020-08-14T12:32:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3OTAzNzI0MQ==",
                                           "createdAt":  "2020-08-24T10:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "This is now only failing on OSX. Maybe https://github.com/dotnet/runtime/pull/38334 `IsSignalIgnored` implementation is not ok for OSX?",
                                           "updatedAt":  "2020-08-24T10:09:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQ4ODkzNQ==",
                                           "createdAt":  "2020-09-02T09:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "FWIW I\u0027ve tried to reproduce it on my mac book and I\u0027ve failed ;)",
                                           "updatedAt":  "2020-09-02T09:26:23Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "CancelKeyPressTests.HandlerInvokedForSigQuit test failing on OSX in CI",
        "labels":  [
                       "area-System.Console",
                       "disabled-test",
                       "os-mac-os-x",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39746",
        "createdAt":  "2020-07-21T23:42:03Z",
        "number":  39746,
        "author":  "abhaycashikar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMr8Wg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batzen",
                                            "createdAt":  "2020-07-27T17:38:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2020-09-01T08:21:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yufeih",
                                            "createdAt":  "2021-06-16T01:49:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samuel-lucas6",
                                            "createdAt":  "2022-01-03T09:49:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-02-02T10:42:45Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-11-13T18:35:15Z",
        "body":  "(I was directed to repost [this feature request](https://github.com/dotnet/csharplang/issues/3711) here.)\r\n## Background and Motivation\r\nI\u0027m trying to create a user-friendly command-line application, and as such I wanted to color my output to the console. However, I found myself frequently writing code like this:\r\n```cs\r\nConsole.WriteLine(\"This output is white on black.\");\r\nConsole.ForegroundColor = ConsoleColor.Red;\r\nConsole.BackgroundColor = ConsoleColor.Green;\r\nConsole.WriteLine(\"This output is red on green.\");\r\nConsole.ResetColor();\r\nConsole.WriteLine(\"This output is white on black.\");\r\n```\r\n## Proposed API\r\nI thought it might be a lot easier for `Console` to have an overload on `Write` and `WriteLine` that takes in two `ConsoleColor` elements as arguments for the `ForegroundColor` and `BackgroundColor` variables and abstracts this process away from the developer. This way, the process of setting the `ForegroundColor` and `BackgroundColor` variables, writing to the console, and resetting the color can be written as one line in code. I think something like the below would work:\r\n```diff\r\n+ public static void WriteLine(ConsoleColor foreground, ConsoleColor background, string value) { throw null; }\r\n```\r\n\r\n## Usage Examples\r\n```cs\r\nConsole.WriteLine(\"This output is white on black.\");\r\nConsole.WriteLine(ConsoleColor.Red, ConsoleColor.Green, \"This output is red on green.\");\r\nConsole.WriteLine(\"This output is white on black.\");\r\n```\r\nwould be equivalent to the code in the Background and Motivation section.\r\n## Alternative Designs\r\nIf overloading is not possible, additional methods like `WriteColor` and `WriteLineColor` would still be very useful in my opinion.\r\n## Risks\r\nI\u0027m not really sure if there are any risks that come with making this change. I don\u0027t think there would be because the functionality would just use the existing methods in `Console` and the existing `ConsoleColor` enum.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK0dSoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjE2MTIxOA==",
                                           "createdAt":  "2020-07-21T23:42:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-21T23:42:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjE3OTQ3MQ==",
                                           "createdAt":  "2020-07-22T00:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@abhaycashikar thanks for the suggestion. Could you please edit your suggestion above to follow the format here: https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.md\u0026title=\r\n(you don\u0027t need to create a new issue)\r\n\r\nMaking it explicit and formatted like that will help us review it.",
                                           "updatedAt":  "2020-07-22T00:50:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjE4ODg0MA==",
                                           "createdAt":  "2020-07-22T01:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abhaycashikar",
                                           "body":  "Hi @danmosemsft, I apologize for not using that formatting initially! I\u0027ve edited the issue to match it now, with the exception of the diff block in Proposed API (I thought it didn\u0027t really make sense since it would just be all additions).",
                                           "updatedAt":  "2020-07-22T01:26:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjE5MTU1Nw==",
                                           "createdAt":  "2020-07-22T01:36:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@abhaycashikar looks good...could you add that diff block although it\u0027s just an add? That helps the review process.",
                                           "updatedAt":  "2020-07-22T01:36:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjIwMDg3NQ==",
                                           "createdAt":  "2020-07-22T02:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abhaycashikar",
                                           "body":  "Sure, no problem.",
                                           "updatedAt":  "2020-07-22T02:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjMwNTQwMA==",
                                           "createdAt":  "2020-07-22T07:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWf8ag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2020-07-22T08:13:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-07-22T16:26:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Jaykul",
                                                                               "createdAt":  "2020-07-22T20:54:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bramborman",
                                                                               "createdAt":  "2020-11-11T23:54:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e ```C#\r\n\u003e public static void WriteLine(string str, ConsoleColor foreground, ConsoleColor background)\r\n\u003e ```\r\n\r\nIf you have source code that calls this method, but compile it against a target framework that does not have the method, then overload resolution chooses [`WriteLine(string format, object arg0, object arg1)`](https://docs.microsoft.com/dotnet/api/system.console.writeline?view=netstandard-2.0#System_Console_WriteLine_System_String_System_Object_System_Object_), which unexpectedly treats the string as a format string and the compiler does not warn about this. `WriteLine(ConsoleColor foreground, ConsoleColor background, string str)` would not have that risk. It would also be consistent with [`PSHostUserInterface.WriteLine`](\u003chttps://docs.microsoft.com/dotnet/api/system.management.automation.host.pshostuserinterface.writeline?view=powershellsdk-7.0.0#System_Management_Automation_Host_PSHostUserInterface_WriteLine_System_ConsoleColor_System_ConsoleColor_System_String_\u003e \"PSHostUserInterface.WriteLine Method (System.Management.Automation.Host) | Microsoft Docs\").",
                                           "updatedAt":  "2020-07-22T11:36:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjMxNzQwOA==",
                                           "createdAt":  "2020-07-22T08:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I think the name of the string parameter should be `value`, for consistency with [`WriteLine(string value)`](https://docs.microsoft.com/dotnet/api/system.console.writeline?view=netstandard-2.0#System_Console_WriteLine_System_String_).",
                                           "updatedAt":  "2020-07-22T08:24:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjM4NDU3NQ==",
                                           "createdAt":  "2020-07-22T10:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLavlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-07-22T16:26:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2020-07-24T23:18:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Linking as related: #34742. There was a lot of discussion in the reviews of that API about color, and the consensus was that BCL should consider adding some `StreamWriter`-type API for writing ANSI escapes and that\u0027s how color should be done in the future. Not that it invalidates these additions to `Console`, just another point in the bucket for `ANSIEscapesWriter`.",
                                           "updatedAt":  "2020-07-22T10:48:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjM4Nzk0NA==",
                                           "createdAt":  "2020-07-22T10:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLLecQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Jaykul",
                                                                               "createdAt":  "2020-07-22T20:54:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "According to \u003chttps://github.com/PowerShell/PowerShell/issues/13071#issue-648596590\u003e, PowerShell has prototyped [System.CommandLine.Rendering](https://www.nuget.org/packages/System.CommandLine.Rendering) for colors. However, that package is still in prerelease, lacks documentation, and is far more complex than the API being proposed here.",
                                           "updatedAt":  "2020-07-22T10:57:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjU1NDAwOA==",
                                           "createdAt":  "2020-07-22T16:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLJoKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abhaycashikar",
                                                                               "createdAt":  "2020-07-22T16:39:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@abhaycashikar nit, the diff section would just look like\r\n```diff\r\n+ public static void WriteLine(string str, ConsoleColor foreground, ConsoleColor background) { throw null; }\r\n```\r\nAt this stage, we don\u0027t care about implementation.\r\n\r\nAs other folks pointed out above, this is not as simple an addition as it may seem 😄 \r\n",
                                           "updatedAt":  "2020-07-22T16:28:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjU4NDc3Ng==",
                                           "createdAt":  "2020-07-22T17:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "A developer writing\r\n\r\n```C#\r\nConsole.ForegroundColor = ConsoleColor.Blue;\r\nConsole.BackgroundColor = ConsoleColor.Black;\r\nConsole.WriteLine(\"Blue on black.\");\r\nConsole.WriteLine(ConsoleColor.Red, ConsoleColor.Green, \"This output is red on green.\");\r\nConsole.WriteLine(\"Guess what this is!\");\r\n```\r\n\r\ncould expect that the third line is again blue on black. However, that is difficult or impossible to implement if `Console` is using [Console Virtual Terminal Sequences](https://docs.microsoft.com/windows/console/console-virtual-terminal-sequences) rather than the Win32 console API. It would just have to be documented.",
                                           "updatedAt":  "2020-07-22T17:28:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjcwMTIzNw==",
                                           "createdAt":  "2020-07-22T21:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Jaykul",
                                           "body":  "I don\u0027t think it\u0027s worth the risk to add 16 color support to the Console api when we should be adding 16 million color support.\r\n\r\n@KalleOlaviNiemitalo is on the right track here, the [Windows Console supports RGB colors](https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#extended-colors) now, and does *not* support controlling those colors through the Win32 API. There\u0027s no point trying to update System.Console. We just need to use VT based APIs through the `Terminal` class in the `System.CommandLine` package.  It\u0027s right here in [/dotnet/command-line-api](https://github.com/dotnet/command-line-api/tree/master/src/System.CommandLine.Rendering).\r\n\r\n",
                                           "updatedAt":  "2020-07-22T21:20:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjcwNDM5OA==",
                                           "createdAt":  "2020-07-22T21:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWf9sQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NickAcPT",
                                                                               "createdAt":  "2020-07-22T21:42:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bramborman",
                                                                               "createdAt":  "2020-11-11T23:59:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e There\u0027s no point trying to update System.Console\r\n\r\nThat\u0027s a little harsh in my view. `System.Console` is widely used and widely known to be useful, so any improvements there will have the highest impact on the ecosystem.",
                                           "updatedAt":  "2020-07-22T21:23:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDU1OTI1Mg==",
                                           "createdAt":  "2020-09-01T08:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBu2w4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SingleAccretion",
                                                                               "createdAt":  "2020-09-01T13:41:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-09-07T08:08:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bramborman",
                                                                               "createdAt":  "2020-11-12T00:00:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yufeih",
                                                                               "createdAt":  "2021-06-16T01:51:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "GSPP",
                                           "body":  "It would be useful if this API was integrated with the normal locking that writing to the console does. `WriteLine` is atomic which is important in multi-threaded console output. Changing colors before and after calling `WriteLine` is racy. Therefore, applications need to introduce their own global console lock if they want atomic colored `WriteLine`. If this was built-in, it could just be handled correctly.",
                                           "updatedAt":  "2020-09-01T08:23:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTczOTU5MQ==",
                                           "createdAt":  "2020-11-12T00:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bramborman",
                                           "body":  "I was just going to file a similar proposal with almost identical motivation but found this one so I will add my thoughts to this discussion.\n\nFirst of all, I\u0027d expect this API would not reset colors to default after writing but reset to previous:\n\n```csharp\nConsole.ForegroundColor = ConsoleColor.Yellow;\nConsole.WriteLine(ConsoleColor.Red, ConsoleColor.Black, \"Red on Black\");\nConsole.WriteLine(\"Yellow on Black\");  // Not White on Black or whatever the default combination is\n```\n\nSecond - I think that _all the overloads_ of `Write` and `WriteLine` should have support for coloring, so there would be many overloads such as:\n\n```csharp\nWrite(ConsoleColor foregroundColor, ConsoleColor backgroundColor, int value);\nWriteLine(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string format, params object[] args);\n```\n\nImho foreground color is changed much more frequently than the background color, so it\u0027d be nice to have overloads that change only the foreground color:\n\n```csharp \nWrite(ConsoleColor foregroundColor, string value);\n```\n\nFor the two-color-parameters overloads, the colors may be made nullable so you can change only _the non-null color_. These may, however, only be added if the color-changing methods have names different to `Write` and `WriteLine` as, as noted above, that\u0027d also be a problem if compiled against framework without these overloads, as using the above would silently use the `WriteLine(string format, object arg0, object arg1)` overload.\n\n```csharp\nConsole.ForegroundColor = ConsoleColor.Yellow;\nConsole.WriteLine(null, ConsoleColor.DarkBlue, \"Yellow on Dark Blue\");\n```\n\nBtw if this gets approved, I\u0027m willing to implement it 😊",
                                           "updatedAt":  "2020-11-12T00:23:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTg5NzcwNA==",
                                           "createdAt":  "2020-11-12T07:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e I\u0027d expect this API would not reset colors to default after writing but reset to previous\r\n\r\nHow would you implement that? The Windows console host does not support [XTPUSHSGR](\u003chttps://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-Functions-using-CSI-_-ordered-by-the-final-character-lparen-s-rparen:CSI-pound-{.1E1E\u003e) and [XTPOPSGR](\u003chttps://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-Functions-using-CSI-_-ordered-by-the-final-character-lparen-s-rparen:CSI-pound-}.1E20\u003e) yet (\u003chttps://github.com/microsoft/terminal/issues/1796\u003e).",
                                           "updatedAt":  "2020-11-12T10:05:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTk0OTE5Mw==",
                                           "createdAt":  "2020-11-12T09:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bramborman",
                                           "body":  "\u003e \u003e I\u0027d expect this API would not reset colors to default after writing but reset to previous\r\n\u003e \r\n\u003e How would you implement that? The Windows console host does not support [XTPUSHSGR](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-Functions-using-CSI-_-ordered-by-the-final-character-lparen-s-rparen:CSI-pound-%7B.1E1E) and [XTPOPSGR](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-Functions-using-CSI-_-ordered-by-the-final-character-lparen-s-rparen:CSI-pound-%7D.1E20) yet.\r\n\r\n```csharp\r\nConsoleColor previousColor = Console.ForegroundColor;\r\nConsole.ForegroundColor = ConsoleColor.Red;\r\nConsole.Write(\"Red text\");\r\nConsole.ForegroundColor = previousColor;\r\n```",
                                           "updatedAt":  "2020-11-12T09:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTk3NTYwMA==",
                                           "createdAt":  "2020-11-12T10:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e ```C#\r\n\u003e ConsoleColor previousColor = Console.ForegroundColor;\r\n\u003e ```\r\n\r\nThat cannot restore the color properly if the previous color is not any of the 16 colors supported by the `ConsoleColor` type, e.g. if it was [specified in RGB](https://docs.microsoft.com/windows/console/console-virtual-terminal-sequences#extended-colors), as implemented in [Windows Terminal](https://docs.microsoft.com/windows/terminal/).",
                                           "updatedAt":  "2020-11-12T10:02:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTk4NTgwNg==",
                                           "createdAt":  "2020-11-12T10:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bramborman",
                                           "body":  "\u003e \u003e ```cs\r\n\u003e \u003e ConsoleColor previousColor = Console.ForegroundColor;\r\n\u003e \u003e ```\r\n\u003e \r\n\u003e That cannot restore the color properly if the previous color is not any of the 16 colors supported by the `ConsoleColor` type, e.g. if it was [specified in RGB](https://docs.microsoft.com/windows/console/console-virtual-terminal-sequences#extended-colors), as implemented in [Windows Terminal](https://docs.microsoft.com/windows/terminal/).\r\n\r\nIt could be a note in the documentation. I think that if users are using RGB colors, they\u0027d not be using this method :D",
                                           "updatedAt":  "2020-11-12T10:22:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjA5NDQ5Ng==",
                                           "createdAt":  "2020-11-12T13:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e I think that all the overloads of Write and WriteLine should have support for coloring\r\n\r\nAgreed, if anything your typical console app does not use the same colors for entire lines, so arguably a `Write` overload is more useful.",
                                           "updatedAt":  "2020-11-12T13:58:28Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Overload Console.Write and Console.WriteLine to take ConsoleColor as a parameter",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40735",
        "createdAt":  "2020-08-12T20:34:29Z",
        "number":  40735,
        "author":  "eiriktsarpalis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-13T18:40:33Z",
        "body":  "I came across the following behaviour when debugging a System.Console test. Running\r\n```csharp\r\nstatic void Main()\r\n{\r\n    while (true)\r\n    {\r\n        Console.Write(\"Enter some text: \");\r\n        int c = Console.In.Peek();\r\n        string? line = Console.In.ReadLine();\r\n        Console.WriteLine($\"Peek: {c} ReadLine: {line}\");\r\n    }\r\n}\r\n```\r\nProduces the following behaviour\r\n```\r\nEnter some text: test\r\nPeek: 116 ReadLine: test\r\nEnter some text: test\r\nPeek: -1 ReadLine: test\r\nEnter some text: test\r\nPeek: -1 ReadLine: test\r\n```\r\nEssentially it is impossible to use `Console.In.Peek()` after the first line has been consumed. Note that this behaviour manifests itself regardless of whether the buffer contains any characters. The following variant will produce the exact same observable behaviour:\r\n```csharp\r\nstatic void Main()\r\n{\r\n    while(true)\r\n    {\r\n        Console.Write(\"Enter some text: \");\r\n        int c = MyPeek();\r\n        string? line = Console.In.ReadLine();\r\n        Console.WriteLine($\"Peek: {c} ReadLine: {line}\");\r\n    }\r\n\r\n    static int MyPeek()\r\n    {\r\n        while (!Console.KeyAvailable)\r\n        {\r\n            Thread.Sleep(10);\r\n        }\r\n        return Console.In.Peek();\r\n    }\r\n}\r\n```\r\nNote that unix does not have the same behaviour.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKC1wig==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzA5Njk0NQ==",
                                           "createdAt":  "2020-08-12T20:34:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-12T20:34:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzEwMzU2Mw==",
                                           "createdAt":  "2020-08-12T20:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Related to #39192.",
                                           "updatedAt":  "2020-08-12T20:49:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDA1ODI5NQ==",
                                           "createdAt":  "2020-08-14T12:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I assume that this is not a regression and moving it to future",
                                           "updatedAt":  "2020-08-14T12:49:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDA2NjU3MA==",
                                           "createdAt":  "2020-08-14T13:09:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e I assume that this is not a regression and moving it to future\r\n\r\nThat\u0027s correct, this seems to have been the behaviour for quite a while. The main goal here is achieving consistency with unix behaviour.",
                                           "updatedAt":  "2020-08-14T13:09:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Console.In.Peek() always returning EOF after the first read line on Windows",
        "labels":  [
                       "area-System.Console",
                       "os-windows",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44513",
        "createdAt":  "2020-11-11T08:48:58Z",
        "number":  44513,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCPc7VQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2020-11-11T16:03:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-01-19T05:13:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-01-31T18:07:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sfiruch",
                                            "createdAt":  "2021-08-13T15:36:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chausner",
                                            "createdAt":  "2022-02-18T21:28:41Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-07-18T14:38:00Z",
        "body":  "### Usage in Microsoft.Extensions.Logging.Console\r\n\r\n[Console Formatters](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Console/ref/Microsoft.Extensions.Logging.Console.cs#L25-L43) introduced in .NET 5.0 allow for the built-in SimpleConsoleFormatter to embed color codes to each log message. But this implementation required knowledge about hardcoding a mapping between VT100 color codes and different background/foreground color changes. \r\n\r\nInstead of typing colors to the formatter, we should decouple this by exposing a generic VT100 builder for colors (maybe even a parser) into System.Console. This way, we can simplify the architecture in Microsoft.Extensions.Logging.Console by making ConsoleFormatters\u0027s job purely about building up string of log messages structured in a specific format when having colors involved. \r\n\r\n- [AnsiParser.cs#L135-L172](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Console/src/AnsiParser.cs#L135-L172)\r\n\r\n### Usage in System.CommandLine.Rendering\r\n\r\n- [System.CommandLine.Rendering/Ansi.cs](https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Rendering/Ansi.cs) shows similar logic being duplicated in [dotnet/command-line-api](https://github.com/dotnet/command-line-api) as well.\r\n\r\ncc: @eerhardt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONDN5aw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTI5MDkwOQ==",
                                           "createdAt":  "2020-11-11T08:49:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003chr\u003e\n  \u003cb\u003eIssue meta data\u003c/b\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue content:\u003c/td\u003e\n    \u003ctd\u003e### Usage in Microsoft.Extensions.Logging.Console\r\n\r\n[Console Formatters](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Console/ref/Microsoft.Extensions.Logging.Console.cs#L25-L43) introduced in .NET 5.0 allow for the built-in SimpleConsoleFormatter to embed color codes to each log message. But this implementation required knowledge about hardcoding a mapping between VT100 color codes and different background/foreground color changes. \r\n\r\nInstead of typing colors to the formatter, we should decouple this by exposing a generic VT100 builder for colors (maybe even a parser) into System.Console. This way, we can simplify the architecture in Microsoft.Extensions.Logging.Console by making ConsoleFormatters\u0027s job purely about building up string of log messages structured in a specific format when having colors involved. \r\n\r\n- [AnsiParser.cs#L135-L172](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Logging.Console/src/AnsiParser.cs#L135-L172)\r\n\r\n### Usage in System.CommandLine.Rendering\r\n\r\n- [System.CommandLine.Rendering/Ansi.cs](https://github.com/dotnet/command-line-api/blob/main/src/System.CommandLine.Rendering/Ansi.cs) shows similar logic being duplicated in [dotnet/command-line-api](https://github.com/dotnet/command-line-api) as well.\r\n\r\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue author:\u003c/td\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eAssignees:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eMilestone:\u003c/td\u003e\n    \u003ctd\u003e[object Object]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-11T08:49:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTQ3ODc0MA==",
                                           "createdAt":  "2020-11-11T15:12:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXy-Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-11-24T11:09:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e System.CommandLine.Rendering/Ansi.cs shows similar logic being duplicated in dotnet/command-line-api as well.\r\n\r\nAnother useful part of System.CommandLine.Rendering that we may want to pull into the BCL is the `ConsoleFormatInfo` class. This allows for ANSI control codes to be included or omitted dynamically depending on the current environment, or explicitly configured by a caller. (The design follows the same design as formatting a number or a date in the rest of .NET.)\r\nSee https://github.com/dotnet/command-line-api/pull/966/ for more info.",
                                           "updatedAt":  "2020-11-11T15:12:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzA4ODc3Mg==",
                                           "createdAt":  "2020-11-24T16:24:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveL-MSFT",
                                           "body":  "I think the biggest help to PowerShell is a .NET API that returns the plain text version of a string (removing all ANSI decoration).",
                                           "updatedAt":  "2020-11-24T16:24:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEyMDI0OQ==",
                                           "createdAt":  "2020-11-24T17:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "If we look not PowerShell itself but PowerShell module PSReadline - I believe we can find some other methods which could be great candidates for System.Console VT/ANSI APIs.\r\nI hope @daxian-dbw could add more info.",
                                           "updatedAt":  "2020-11-24T17:17:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDQ0NTE5Ng==",
                                           "createdAt":  "2020-12-08T07:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "In short:\r\n1. Transparent support more terminals by utilizing TermInfo (on Windows too). This allows an application turn on/off coloring (and other feature) on the fly and to work on any terminal without recompile.\r\n2. Support modern coloring 24/32bits https://github.com/PowerShell/PowerShell/issues/2381\r\n3. API for calculating string length with and without escape codes.\r\n4. API for calculating string length for cells to support [fullwidth forms](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms). [PSReadline workaround](https://github.com/PowerShell/PSReadLine/blob/fd1265e385cb4b7b860d8f1452da1ceb347e123e/PSReadLine/Render.Helper.cs#L81-L99)\r\n5. Maybe a rendering engine based on TermInfo entities. This could significantly reduce allocations in custom code, add formattings in resource strings and so on.\r\n6. API for managing cursor position, getting info about a terminal sizing and resizing.\r\n7. Supporting alternative terminal buffers.\r\n8. Supporting scrolling\r\n9. Supporting clearing screen and whole buffer.\r\n10. Full featured cross-platform line editor. https://github.com/dotnet/runtime/issues/800\r\n\r\n/cc @DHowett",
                                           "updatedAt":  "2020-12-08T07:44:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTc4ODY1MQ==",
                                           "createdAt":  "2021-07-07T17:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Moving this issue to .NET 7. We will consider this as part of a potential effort for a System.Console redesign as described in #52374.",
                                           "updatedAt":  "2021-07-07T17:24:34Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Developers using Console can employ VT/ANSI APIs (eg to use embedded color codes)",
        "labels":  [
                       "area-System.Console",
                       "User Story",
                       "Priority:3",
                       "Cost:M",
                       "Team:Libraries"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44667",
        "createdAt":  "2020-11-13T22:20:04Z",
        "number":  44667,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-13T18:40:01Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/Setting-ConsoleTreatControlCAsInput-to-/1041798)._\n\n---\nFor some reason, setting Console.TreatControlCAsInput to \u0027true\u0027 causes text printed with \"Console.Write\" to be removable. To reproduce, simply create a new Console application and paste the following code in the main method:\n\n//Console.TreatControlCAsInput = true;\nConsole.Write(\"Test\u003e \");\nwhile (true) Console.Read();\n\nStart the application (with the first line commented) and write some input. Then hold down backspace; the text should remove until the end of \"Test\u003e \" and you aren\u0027t able to remove more characters.\nNow uncomment the first line and start the application again. Write some input and hold down backspace; for some reason now every text is removed with backspace, even what was printed with Console.Write.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/21/2020, 03:45 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 7/2/2020, 11:17 PM: \n\nI have detected that for the last 35 days, this issue didn\u0027t have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### Dada Huo [MSFT] on 11/3/2020, 00:38 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, could you please provide a sample solution that has this problem so that we can conduct further research?\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### Full Name on 11/10/2020, 04:27 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK2aIEg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzA2NDA5Ng==",
                                           "createdAt":  "2020-11-13T22:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/Setting-ConsoleTreatControlCAsInput-to-/1041798)._\n\n---\nFor some reason, setting Console.TreatControlCAsInput to \u0027true\u0027 causes text printed with \"Console.Write\" to be removable. To reproduce, simply create a new Console application and paste the following code in the main method:\n\n//Console.TreatControlCAsInput = true;\nConsole.Write(\"Test\u003e \");\nwhile (true) Console.Read();\n\nStart the application (with the first line commented) and write some input. Then hold down backspace; the text should remove until the end of \"Test\u003e \" and you aren\u0027t able to remove more characters.\nNow uncomment the first line and start the application again. Write some input and hold down backspace; for some reason now every text is removed with backspace, even what was printed with Console.Write.\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/21/2020, 03:45 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Feedback Bot on 7/2/2020, 11:17 PM: \n\nI have detected that for the last 35 days, this issue didn\u0027t have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### Dada Huo [MSFT] on 11/3/2020, 00:38 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, could you please provide a sample solution that has this problem so that we can conduct further research?\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### Full Name on 11/10/2020, 04:27 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-13T22:20:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODEzOTc5NA==",
                                           "createdAt":  "2020-11-16T15:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The issue reproduces on Windows only (both in .NET Core and framework). Linux is unaffected.",
                                           "updatedAt":  "2020-11-16T15:37:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Setting Console.TreatControlCAsInput to true causes text to be removable",
        "labels":  [
                       "bug",
                       "area-System.Console",
                       "os-windows",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49210",
        "createdAt":  "2021-03-05T13:34:26Z",
        "number":  49210,
        "author":  "claunia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-13T18:39:43Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\nWhen using System.Console.ReadKey under mintty, the MSYS console, it raises an exception.\r\n\r\n### Configuration\r\n\r\n.NET Core 3.1\r\nWindows 10 x64\r\nMSYS\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n```\r\nUnhandled exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.InvalidOperationException: Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\r\n   at System.ConsolePal.ReadKey(Boolean intercept)\r\n   at System.Console.ReadKey()\r\n```\r\n\r\nhttps://github.com/aaru-dps/Aaru/issues/562\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLywlzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTQyMjQxMg==",
                                           "createdAt":  "2021-03-05T13:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: \nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\nWhen using System.Console.ReadKey under mintty, the MSYS console, it raises an exception.\r\n\r\n### Configuration\r\n\r\n.NET Core 3.1\r\nWindows 10 x64\r\nMSYS\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n```\r\nUnhandled exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.InvalidOperationException: Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\r\n   at System.ConsolePal.ReadKey(Boolean intercept)\r\n   at System.Console.ReadKey()\r\n```\r\n\r\nhttps://github.com/aaru-dps/Aaru/issues/562\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eclaunia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-05T13:34:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.Console.ReadKey fails in MSYS\u0027 console mintty",
        "labels":  [
                       "bug",
                       "area-System.Console",
                       "os-linux",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52374",
        "createdAt":  "2021-05-06T09:55:20Z",
        "number":  52374,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBqVxeQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frassle",
                                            "createdAt":  "2021-05-06T12:19:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "colombod",
                                            "createdAt":  "2021-05-06T12:59:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2021-05-06T15:03:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jeffhandley",
                                            "createdAt":  "2021-05-06T16:07:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GalaxiaGuy",
                                            "createdAt":  "2021-05-06T19:06:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2021-05-06T19:11:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2021-05-06T21:08:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mfilippov",
                                            "createdAt":  "2021-05-07T08:20:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-05-07T08:35:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2021-05-07T08:48:40Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "benyblack",
                                            "createdAt":  "2021-05-07T08:54:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2021-05-07T09:55:20Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2021-05-07T09:55:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kamkie",
                                            "createdAt":  "2021-05-07T10:09:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2021-05-07T10:09:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DarkBullNull",
                                            "createdAt":  "2021-05-07T10:15:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "joaofbantunes",
                                            "createdAt":  "2021-05-07T10:40:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "poke",
                                            "createdAt":  "2021-05-07T10:42:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matarillo",
                                            "createdAt":  "2021-05-07T10:58:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wzchua",
                                            "createdAt":  "2021-05-07T12:15:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HamedFathi",
                                            "createdAt":  "2021-05-07T12:16:25Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "HamedFathi",
                                            "createdAt":  "2021-05-07T12:16:26Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2021-05-07T12:36:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2021-05-07T12:36:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2021-05-07T12:40:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nietras",
                                            "createdAt":  "2021-05-07T13:07:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loic-sharma",
                                            "createdAt":  "2021-05-07T13:27:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raminmjj",
                                            "createdAt":  "2021-05-07T14:02:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2021-05-07T14:10:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2021-05-07T14:10:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "domn1995",
                                            "createdAt":  "2021-05-07T15:08:06Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "jonsequitur",
                                            "createdAt":  "2021-05-07T16:07:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrexx",
                                            "createdAt":  "2021-05-07T17:55:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2021-05-07T18:36:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jodydonetti",
                                            "createdAt":  "2021-05-07T20:29:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2021-05-08T01:28:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2021-05-08T01:28:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khalidabuhakmeh",
                                            "createdAt":  "2021-05-08T01:49:38Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "khalidabuhakmeh",
                                            "createdAt":  "2021-05-08T01:49:39Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "khalidabuhakmeh",
                                            "createdAt":  "2021-05-08T01:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "phil-scott-78",
                                            "createdAt":  "2021-05-08T02:51:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nojaf",
                                            "createdAt":  "2021-05-08T06:08:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "khellang",
                                            "createdAt":  "2021-05-08T21:26:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khellang",
                                            "createdAt":  "2021-05-08T21:26:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thekeviv",
                                            "createdAt":  "2021-05-08T22:05:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KoalaBear84",
                                            "createdAt":  "2021-05-08T22:15:13Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Keboo",
                                            "createdAt":  "2021-05-08T23:38:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2021-05-09T17:25:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2021-05-09T17:26:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thoemmi",
                                            "createdAt":  "2021-05-11T06:48:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mxrcon",
                                            "createdAt":  "2021-05-17T13:37:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-05-18T23:36:50Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-05-18T23:36:51Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-05-18T23:39:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "vcsjones",
                                            "createdAt":  "2021-05-27T15:19:45Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SteveL-MSFT",
                                            "createdAt":  "2021-05-27T16:54:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveL-MSFT",
                                            "createdAt":  "2021-05-27T16:54:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2021-05-27T17:56:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2021-05-27T17:56:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "carlossanlop",
                                            "createdAt":  "2021-05-27T18:04:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rkeithhill",
                                            "createdAt":  "2021-05-28T03:06:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tlil",
                                            "createdAt":  "2021-06-01T05:35:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "joewoess",
                                            "createdAt":  "2021-06-01T07:09:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inexuscore",
                                            "createdAt":  "2021-06-02T20:39:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lamarch",
                                            "createdAt":  "2021-06-03T20:44:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2021-06-07T16:51:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mycodeshow-dev",
                                            "createdAt":  "2021-06-15T03:36:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elgonzo",
                                            "createdAt":  "2021-06-16T19:18:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "elgonzo",
                                            "createdAt":  "2021-06-16T19:18:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2021-07-07T04:08:45Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2021-07-07T04:08:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2021-07-20T20:48:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2021-07-22T05:37:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HarleyRossetto",
                                            "createdAt":  "2021-07-24T09:28:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "HarleyRossetto",
                                            "createdAt":  "2021-07-24T09:28:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gldraphael",
                                            "createdAt":  "2021-08-04T03:35:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2021-08-18T09:09:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koliyo",
                                            "createdAt":  "2021-08-18T14:29:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-08-19T08:09:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "umbarov",
                                            "createdAt":  "2021-09-13T06:11:19Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2021-09-14T21:00:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FilipToth",
                                            "createdAt":  "2021-11-18T19:19:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xoofx",
                                            "createdAt":  "2021-12-29T05:48:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-01-09T09:07:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0x0737",
                                            "createdAt":  "2022-01-29T06:53:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giladfrid009",
                                            "createdAt":  "2022-01-30T02:04:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elfalem",
                                            "createdAt":  "2022-01-30T22:41:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-02-10T15:45:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deeprobin",
                                            "createdAt":  "2022-02-21T20:08:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-03-18T15:01:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jjxtra",
                                            "createdAt":  "2022-03-29T22:05:03Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "josalem",
                                            "createdAt":  "2022-04-12T18:09:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "samsosa",
                                            "createdAt":  "2022-04-14T12:30:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2022-04-14T12:30:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ltrzesniewski",
                                            "createdAt":  "2022-05-28T10:47:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2022-07-20T10:03:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2022-07-29T09:00:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillKornienko",
                                            "createdAt":  "2022-10-19T21:06:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2022-12-08T17:06:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "d2dyno1",
                                            "createdAt":  "2022-12-11T23:55:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KoHHeKT",
                                            "createdAt":  "2023-02-07T16:11:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2023-09-17T23:21:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frankbuckley",
                                            "createdAt":  "2023-10-14T11:17:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-10-18T09:57:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:36:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hexawyz",
                                            "createdAt":  "2024-01-15T12:24:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kz-gonzalo-curbelo",
                                            "createdAt":  "2024-05-09T00:24:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2024-09-06T00:23:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "divyeshio",
                                            "createdAt":  "2024-09-28T18:01:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2024-10-06T18:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RokeJulianLockhart",
                                            "createdAt":  "2024-11-10T17:18:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2025-06-28T21:33:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2025-06-28T21:34:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-19T00:30:52Z"
                                        }
                                    ],
                          "totalCount":  114
                      },
        "updatedAt":  "2023-01-16T10:52:12Z",
        "body":  "The initial design of `System.Console` was mainly driven by Windows OS capabilities and available APIs.\r\n\r\nWhen .NET became cross platform, a number of issues arose (click on the details button below to see the full list) as there was no good way of mapping some Windows-specific concepts to Unix. A good example are all `Console.Window*` APIs: on Unix the Window is owned by the Terminal app, the .NET Console App has no control over it.\r\n\r\nThe current design makes no distinction between `Console` and `Terminal`, which is also a source of plenty of issues (mostly for apps that have redirected output).\r\n\r\nMoreover, `System.Console` is a `static class` and there is no common abstraction that would allow not only for testing but also for integrating projects like [spectre.console](https://github.com/spectreconsole/spectre.console) and [System.CommandLine.Rendering](https://github.com/dotnet/command-line-api/tree/main/src/System.CommandLine.Rendering).\r\n\r\nBy creating this issue I would like to start a public and transparent discussion about what is wrong with the current design of `System.Console` and how we could fix that. Based on the results of this discussion, I would like to create a proposal for .NET 7.\r\n\r\ncc @jonsequitur @KathleenDollard @patriksvensson @colombod @Keboo @howardvanrooijen @daxian-dbw\r\n\r\n\u003cdetails\u003e\r\n\r\n* `Console.ReadKey`:\r\n    * `Console.ReadKey` returns incomplete information for some key sequences on Linux #802 (.NET 6)\r\n    * `System.ConsoleKeyInfo` can not handle Unicode surrogate pair and Emoji Sequences #27828 \r\n    * `Console.ReadKey()` doesn\u0027t work for keys from the numeric keypad in the PuTTY ssh client #25735 \r\n    * [Windows Terminal] `Console.KeyAvailable` causes the next Unicode character input \u0027EN DASH\u0027 to be skipped in console #38966\r\n    * .NET 5 fails to read the HOME key on ubuntu16.04 #44621\r\n    * Console.ReadKey and pressing SHIFT+END returns invalid escape sequence on WSL/Ubuntu #45597\r\n    * System.Console.ReadKey fails in MSYS\u0027 console mintty #49210\r\n    * Let System.ConsoleKeyInfo able to represent keypress in the Unicode world #51085\r\n    * `Console.ReadKey` throws in unexpected circumstances https://github.com/dotnet/runtime/issues/59059\r\n    *  Support language input keys #63034\r\n* Redirection:\r\n    * console redirection is broken #22314\r\n    * Don\u0027t dup stdin \u0026 stderr as this can break some std io redicection code #25394\r\n    * Console.CursorLeft, Console.CursorTop, Console.WindowWidth, Console.WindowHeight and Console.WindowTopLeft doesn\u0027t throw an IOException for invalid values on Windows 7 x86 when Input is redirected #43138\r\n* Colors:\r\n    * Bright console colors don\u0027t work correctly on Linux #23241\r\n    * Implement a way to enable color in console even when the output is redirected #33980 \r\n    * Overload Console.Write and Console.WriteLine to take ConsoleColor as a parameter #39746\r\n    * Developers using Console can employ VT/ANSI APIs (eg to use embedded color codes) #44513 (.NET 6)\r\n    * Add overloads to Console.Write that also take a ConsoleColor parameter (#61731)\r\n    * Console.Foreground does not correctly set the color in every Terminal (#62186)\r\n* Terminal:\r\n    * MacOS 10.13.6 Console.SetWindowSize() exception #27216 \r\n    * Terminal hardware is always left in application mode (keypad_xmit) after running a console program #27626 \r\n    * Console.Clear() doesn\u0027t clear the scrollback buffer on Unix-like platforms #28355 \r\n    * Setting Console.CursorVisible property does not change visibility in Linux #31063 \r\n    * Cannot use left/right arrow keys to edit text in Console.ReadLine on Unix #38051\r\n    * System.Console.Read() needlessly changes terminal settings on linux #49129\r\n    * Console issues with multithreaded c# app only when run on Linux #49301 \r\n* Encoding:\r\n    * Changing console\u0027s OutputEncoding on linux to unicode generates garbage #29735\r\n    * Consider changing the default console encoding on Windows to UTF-16 #31466\r\n    * Console.OutputEncoding by default returns a wrong value on Windows Nano Server #42959\\\r\n    * Console UTF-8 input is misbehaving on Windows #43295\r\n* `Console.CancelKeyPress`:\r\n    * Third party code may remove cancel keypress handler #30464\r\n    * Setting Console.TreatControlCAsInput to true causes text to be removable #44667 \r\n    * .NET 5 apps can no longer intercept SIGINT signals (receive CancelKeyPress events) when running under Docker #51221\r\n* Other:\r\n    * FreeBSD: System.Console is not working right #23653\r\n    * Console.Write prints a new line on iOS #36440 \r\n    * Console.In.Peek() always returning EOF after the first read line on Windows #40735 \r\n    * Console.KeyAvailable throws when input isn\u0027t redirected on Windows 7 x86 #43015\r\n    * \"System.UnauthorizedAccessException: Access to the path is denied.\" from Console.WriteLine on Ubuntu 20.10 #48654\r\n* Performance:\r\n    * `Console.OpenStandard*` few times slower on Linux #31396 \r\n* New APIs:\r\n    * We need a cross-platform way to detect key-down state #24314\r\n    * Enhance Console.ReadLine() to return at Tab #800 \r\n    * Add API for detecting broken pipe when write to stdout(or stderr) #30540\r\n    * Proposal: Async Console I/O APIs #299\r\n* Test issues:\r\n    * [mono] Test failed on windows: WindowAndCursorProps.Title_Set_Windows #34454\r\n    * System.Console tests failing on iOS #36878\r\n    * System.Console.Tests fail on Android #37465\r\n    * CancelKeyPressTests.HandlerInvokedForSigQuit test failing on OSX in CI #38998 \r\n* Docs:\r\n    * System.Console: Backport MS Docs documentation to triple slash #48959\r\n\r\n\u003c/details\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUnv5tg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzM5Njk3OA==",
                                           "createdAt":  "2021-05-06T09:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe initial design of `System.Console` was mainly driven by Windows OS capabilities and available APIs.\r\n\r\nWhen .NET became cross platform, a number of issues arose (click on the details button below to see the full list) as there was no good way of mapping some Windows-specific concepts to Unix. A good example are all `Console.Window*` APIs: on Unix the Window is owned by the Terminal app, the .NET Console App has no control over it.\r\n\r\nThe current design makes no distinction between `Console` and `Terminal`, which is also a source of plenty of issues (mostly for apps that have redirected output).\r\n\r\nMoreover, `System.Console` is a `static class` and there is no common abstraction that would allow not only for testing but also for integrating projects like [spectre.console](https://github.com/spectreconsole/spectre.console) and [System.CommandLine.Rendering](https://github.com/dotnet/command-line-api/tree/main/src/System.CommandLine.Rendering).\r\n\r\nBy creating this issue I would like to start a public and transparent discussion about what is wrong with the current design of `System.Console` and how we could fix that. Based on the results of this discussion, I would like to create a proposal for .NET 7.\r\n\r\ncc @jonsequitur @KathleenDollard @patriksvensson @colombod @Keboo @howardvanrooijen @daxian-dbw\r\n\r\n\u003cdetails\u003e\r\n\r\n* `Console.ReadKey`:\r\n    * `Console.ReadKey` returns incomplete information for some key sequences on Linux #802 (.NET 6)\r\n    * `System.ConsoleKeyInfo` can not handle Unicode surrogate pair and Emoji Sequences #27828 \r\n    * `Console.ReadKey()` doesn\u0027t work for keys from the numeric keypad in the PuTTY ssh client #25735 \r\n    * [Windows Terminal] `Console.KeyAvailable` causes the next Unicode character input \u0027EN DASH\u0027 to be skipped in console #38966\r\n    * .NET 5 fails to read the HOME key on ubuntu16.04 #44621\r\n    * Console.ReadKey and pressing SHIFT+END returns invalid escape sequence on WSL/Ubuntu #45597\r\n    * System.Console.ReadKey fails in MSYS\u0027 console mintty #49210\r\n    * Let System.ConsoleKeyInfo able to represent keypress in the Unicode world #51085\r\n* Redirection:\r\n    * console redirection is broken #22314\r\n    * Don\u0027t dup stdin \u0026 stderr as this can break some std io redicection code #25394\r\n    * Console.CursorLeft, Console.CursorTop, Console.WindowWidth, Console.WindowHeight and Console.WindowTopLeft doesn\u0027t throw an IOException for invalid values on Windows 7 x86 when Input is redirected #43138\r\n* Colors:\r\n    * Bright console colors don\u0027t work correctly on Linux #23241\r\n    * Implement a way to enable color in console even when the output is redirected #33980 \r\n    * Overload Console.Write and Console.WriteLine to take ConsoleColor as a parameter #39746\r\n    * Developers using Console can employ VT/ANSI APIs (eg to use embedded color codes) #44513 (.NET 6)\r\n* Terminal:\r\n    * MacOS 10.13.6 Console.SetWindowSize() exception #27216 \r\n    * Terminal hardware is always left in application mode (keypad_xmit) after running a console program #27626 \r\n    * Console.Clear() doesn\u0027t clear the scrollback buffer on Unix-like platforms #28355 \r\n    * Setting Console.CursorVisible property does not change visibility in Linux #31063 \r\n    * Cannot use left/right arrow keys to edit text in Console.ReadLine on Unix #38051\r\n    * System.Console.Read() needlessly changes terminal settings on linux #49129\r\n    * Console issues with multithreaded c# app only when run on Linux #49301 \r\n* Encoding:\r\n    * Changing console\u0027s OutputEncoding on linux to unicode generates garbage #29735\r\n    * Consider changing the default console encoding on Windows to UTF-16 #31466\r\n    * Console.OutputEncoding by default returns a wrong value on Windows Nano Server #42959\\\r\n    * Console UTF-8 input is misbehaving on Windows #43295\r\n* `Console.CancelKeyPress`:\r\n    * Third party code may remove cancel keypress handler #30464\r\n    * Setting Console.TreatControlCAsInput to true causes text to be removable #44667 \r\n    * .NET 5 apps can no longer intercept SIGINT signals (receive CancelKeyPress events) when running under Docker #51221\r\n* Other:\r\n    * FreeBSD: System.Console is not working right #23653\r\n    * Console.Write prints a new line on iOS #36440 \r\n    * Console.In.Peek() always returning EOF after the first read line on Windows #40735 \r\n    * Console.KeyAvailable throws when input isn\u0027t redirected on Windows 7 x86 #43015\r\n    * \"System.UnauthorizedAccessException: Access to the path is denied.\" from Console.WriteLine on Ubuntu 20.10 #48654\r\n* Performance:\r\n    * `Console.OpenStandard*` few times slower on Linux #31396 \r\n* New APIs:\r\n    * We need a cross-platform way to detect key-down state #24314\r\n    * Enhance Console.ReadLine() to return at Tab #800 \r\n    * Add API for detecting broken pipe when write to stdout(or stderr) #30540\r\n    * Proposal: Async Console I/O APIs #299\r\n* Test issues:\r\n    * [mono] Test failed on windows: WindowAndCursorProps.Title_Set_Windows #34454\r\n    * System.Console tests failing on iOS #36878\r\n    * System.Console.Tests fail on Android #37465\r\n    * CancelKeyPressTests.HandlerInvokedForSigQuit test failing on OSX in CI #38998 \r\n* Docs:\r\n    * System.Console: Backport MS Docs documentation to triple slash #48959\r\n\r\n\u003c/details\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eadamsitnik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eadamsitnik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`Design Discussion`, `area-System.Console`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-06T09:55:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzY0NzE0OA==",
                                           "createdAt":  "2021-05-06T16:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@mdh1418 @MaximLipnin is there any chance that you could share your experience from  https://github.com/dotnet/runtime/pull/41184 https://github.com/dotnet/runtime/pull/50931 ?",
                                           "updatedAt":  "2021-05-06T16:09:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzY2NTczNQ==",
                                           "createdAt":  "2021-05-06T16:31:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCA2xYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-11-02T15:36:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@adamsitnik The work in #41184 and #50931 was primarily done to leverage the platform compatibility analyzer and warn users when a particular API was unsupported on the specific platforms. I believe we had taken note of which APIs failed with `PlatformNotSupportedException` when running library tests on `Browser-wasm` `Android` and also `iOS` +`tvOS` (which also had `PlatformNotSupportedException` for `System.Console` APIs, and we proceeded to mark those APIs with the Unsupported attribute",
                                           "updatedAt":  "2021-05-06T16:31:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDE1OTM1Mg==",
                                           "createdAt":  "2021-05-07T08:11:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODshJFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pitermarx",
                                                                               "createdAt":  "2021-05-07T09:08:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-05-18T23:37:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daveaglick",
                                                                               "createdAt":  "2021-05-27T15:16:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2021-05-27T15:19:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:25:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frassle",
                                                                               "createdAt":  "2022-01-30T11:56:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fMichaleczek",
                                                                               "createdAt":  "2024-08-02T01:37:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "phillip-haydon",
                                           "body":  "Microsoft needs to give @patriksvensson a ton of money and replace with spectre. ",
                                           "updatedAt":  "2021-05-07T08:11:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDE2MTczMw==",
                                           "createdAt":  "2021-05-07T08:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBsedyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "phillip-haydon",
                                                                               "createdAt":  "2021-05-07T08:16:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-05-07T08:21:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "evilpilaf",
                                                                               "createdAt":  "2021-05-07T11:34:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rducom",
                                                                               "createdAt":  "2021-05-07T14:17:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoalaBear84",
                                                                               "createdAt":  "2021-05-08T22:15:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "thoemmi",
                                                                               "createdAt":  "2021-05-11T06:50:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-05-18T23:37:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:25:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "HowardvanRooijen",
                                           "body":  "@phillip-haydon If you notice, Patrik is CC\u0027d on the first message in the thread, because we\u0027ve been having fortnightly calls for many months on the subject! The point of this thread is to mobilise \"an army of the willing\" who want to see these improvements invested in, and delivered! My original request was \"please can we interop between System.CommandLine and Spectre?\" 😁",
                                           "updatedAt":  "2021-05-07T08:15:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDE2NDU1NA==",
                                           "createdAt":  "2021-05-07T08:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPdwkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jonsequitur",
                                                                               "createdAt":  "2021-05-07T16:13:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Keboo",
                                                                               "createdAt":  "2021-05-08T23:40:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "daveaglick",
                                                                               "createdAt":  "2021-05-27T15:17:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WajahatAliAbid",
                                                                               "createdAt":  "2022-02-19T00:22:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "phillip-haydon",
                                           "body":  "I saw, I\u0027m just totally blown away at spectre, been following it on twitter, we need to give Patrik more recognition that he\u0027s built something amazing :D (and the contributors to the project too)",
                                           "updatedAt":  "2021-05-07T08:20:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDE2ODc3NA==",
                                           "createdAt":  "2021-05-07T08:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBsed9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "phillip-haydon",
                                                                               "createdAt":  "2021-05-07T08:39:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2021-05-07T10:09:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DarkBullNull",
                                                                               "createdAt":  "2021-05-07T10:16:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "poke",
                                                                               "createdAt":  "2021-05-07T10:42:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2021-05-07T12:40:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoalaBear84",
                                                                               "createdAt":  "2021-05-08T22:15:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Keboo",
                                                                               "createdAt":  "2021-05-08T23:41:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2021-05-09T01:53:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-05-18T23:37:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-05-18T23:37:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:26:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "HowardvanRooijen",
                                           "body":  "100% I\u0027ve said that Spectre delivers the \"high level productivity API\", that enables me to build impressive things quickly. It\u0027s like having the WebControls / WinForm Controls / WPF Components for the CLI, but there are also the lower-level APIs that are needed to deliver that experience consistently across all the platforms that .NET Supports. Hence my tagline of: \r\n\r\nSpectre.Console + System.CommandLine = ❤",
                                           "updatedAt":  "2021-05-07T08:26:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDMxNTM0MA==",
                                           "createdAt":  "2021-05-07T12:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRL29w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-05-07T12:34:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2021-05-07T12:40:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raminmjj",
                                                                               "createdAt":  "2021-05-07T14:03:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mjcheetham",
                                                                               "createdAt":  "2021-05-07T21:47:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2021-05-08T09:31:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoalaBear84",
                                                                               "createdAt":  "2021-05-08T22:15:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:26:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2021-06-25T11:36:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "d2dyno1",
                                                                               "createdAt":  "2023-07-05T11:26:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tig",
                                                                               "createdAt":  "2024-01-04T00:36:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "maloo",
                                           "body":  "Please make sure it works great with [https://github.com/migueldeicaza/gui.cs](https://github.com/migueldeicaza/gui.cs) ",
                                           "updatedAt":  "2021-05-07T12:06:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDMzNjM1OA==",
                                           "createdAt":  "2021-05-07T12:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@migueldeicaza would you like to provide some feedback based on your experience with building https://github.com/migueldeicaza/gui.cs?",
                                           "updatedAt":  "2021-05-07T12:34:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDk4ODY5OA==",
                                           "createdAt":  "2021-05-08T02:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIKz6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2021-12-30T05:44:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "FWIW, I\u0027ll throw this into the mix: https://github.com/alexrp/system-terminal\r\n\r\nThere are some aspects of that library I wouldn\u0027t necessarily repeat if I were to start from scratch, but I think it provides a mostly reasonable API surface that could serve as inspiration for a `System.Console` re-design.",
                                           "updatedAt":  "2021-05-08T02:40:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTIwODgxMQ==",
                                           "createdAt":  "2021-05-08T08:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCVRqAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoalaBear84",
                                                                               "createdAt":  "2021-05-08T22:17:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-05-27T14:41:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:26:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Zastai",
                                                                               "createdAt":  "2021-07-07T01:12:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meeple142",
                                                                               "createdAt":  "2022-03-30T00:47:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "i-am-shodan",
                                           "body":  "I maintain dotnet-shell so a lot of the thing I’m doing with Console are less about UI and more about input handling.\r\n\r\nUnordered list of problems with Console / features I often require\r\n* async support\r\n* Colour support. I’d like an inbuilt ColorString in the console namespace but Write having an optional color param would also work\r\n* Input handling needs a rethink for Linux. There is a ‘hack’ for Control-C but Control-Z is not possible on Linux without pinvoking.\r\n* Events for when important console parameters change\r\n* Perhaps a separate Terminal implementation where WindowTitle etc can be set would be good. Included implementations for Windows Terminal and POSIX/xterm\r\n* I’d like Console to be an interface that can be easily overridden and replaced for mocking etc\r\n* Consideration / best practice for unit testing console apps.",
                                           "updatedAt":  "2021-05-08T08:31:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTU3ODk4NA==",
                                           "createdAt":  "2021-05-08T23:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0_wtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-05-10T05:58:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gldraphael",
                                                                               "createdAt":  "2021-08-04T03:32:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "xela-trawets",
                                           "body":  "Tek4014, I told Santa.",
                                           "updatedAt":  "2021-11-02T15:48:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTU3OTc3Mw==",
                                           "createdAt":  "2021-05-08T23:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0_wtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-05-10T05:58:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gldraphael",
                                                                               "createdAt":  "2021-08-04T03:32:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "xela-trawets",
                                           "body":  "Or just a bitmap party space Invite",
                                           "updatedAt":  "2021-11-02T15:48:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTU5NzU2MQ==",
                                           "createdAt":  "2021-05-09T00:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXt4Iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-05-10T05:57:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2021-05-10T11:00:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericsampson",
                                                                               "createdAt":  "2021-05-27T15:26:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pjmlp",
                                                                               "createdAt":  "2021-06-03T08:57:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2021-12-29T09:45:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2022-04-12T18:11:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "migueldeicaza",
                                           "body":  "I agree that System.Console is too tied to Windows, and there are things that are hard to emulate on Linux (and generally on terminals that rely entirely on a stream of bytes).\r\n\r\nThe list of challenges above seem to be a blend of limitations in the current implementation, with some design challenges - I am not convinced that they are all design flaws (take for example the Color ones, or the Android/iOS ones that really are not speaking to a real terminal but a log).\r\n\r\nIt might be useful to compare the bugs above against the Mono version (the official version on Linux, that emulates .NET Framework 4.7) as some of those seems like limitations of the current .NET Core implementation, rather than design flaws.\r\n\r\nIf I were to design a new system, I think that I would do a few tiers of work: \r\n\r\n(a) Put the terminal in raw mode/cooked mode, byte-at-a-time vs line-at-a-time\r\n(b) Colors, positioning\r\n\r\nThen I would provide a split \"WindowsConsole\" with all the capabilities that Windows has (there are a bunch of things missing from System.Console, gui.cs shows a few of the things missing), and then also add an \"XtermLineageTerminal\" where there is a progression of capabilities from the simplest black and white VT100 all the way to modern terminals which support quite a number of capabilities.   \r\n\r\nThe models are different, in Windows, folks can assume a framebuffer exists, while in vt100-derived terminals you must rely on escape sequences to get the job done.   In the old days, it made sense for a library to interpose itself between the application and the terminal to optimize which command should be sent based on the changes made to the screen - while there is a mild case to be made for this, nowadays, connections and terminals are fast enough that it does not really matter all that much - so layers like ncurses might be overblown for things like this.\r\n\r\nWhile gui.cs supports using the plain System.Console as a driver, it also has a Windows driver (for access to things like mouse events and additional modifiers) and a curses-driver, for Unix systems.",
                                           "updatedAt":  "2021-05-09T00:43:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjU2NjM1NQ==",
                                           "createdAt":  "2021-05-10T11:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "\u003e While gui.cs supports using the plain System.Console as a driver, it also has a Windows driver (for access to things like mouse events and additional modifiers) and a curses-driver, for Unix systems.\r\n\r\nBut unfortunately, Windows driver mouse events aren\u0027t supported on `Windows Terminal`. So, maybe the solution is using a combination of `WindowsDriver` (https://github.com/migueldeicaza/gui.cs/blob/main/Terminal.Gui/ConsoleDrivers/WindowsDriver.cs) and `NetDriver` (https://github.com/migueldeicaza/gui.cs/blob/main/Terminal.Gui/ConsoleDrivers/NetDriver.cs),  as discussed here https://github.com/migueldeicaza/gui.cs/issues/332#issuecomment-821297044.",
                                           "updatedAt":  "2021-05-10T11:12:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzIzNDY4MQ==",
                                           "createdAt":  "2021-05-18T14:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chucker",
                                           "body":  "Possibly slightly OT, but I would like [better handling of buffers](https://github.com/dotnet/runtime/discussions/52913). It was somewhat unintuitive to me that running a command through System.Console has different buffering behavior (despite `BeginOutputReadLine`) than a Terminal would.",
                                           "updatedAt":  "2021-05-18T14:45:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTczMDIxMw==",
                                           "createdAt":  "2021-05-27T15:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "Splitting it up into base/Windows/XTermLineage as Miguel mentioned makes sense to me, similar to how .NET 5 has platform-specific TFMs.",
                                           "updatedAt":  "2021-05-27T15:30:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTczMDgwMQ==",
                                           "createdAt":  "2021-05-27T15:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBseiwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "i-am-shodan",
                                                                               "createdAt":  "2021-05-27T15:31:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericsampson",
                                           "body":  "- async support would be nice. Writing to console is not exactly fast currently, from what I remember.",
                                           "updatedAt":  "2021-05-27T15:31:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTczMzUyNA==",
                                           "createdAt":  "2021-05-27T15:34:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBttHnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-06-07T18:55:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Pxtl",
                                           "body":  "Standardize a Warning stream.  It\u0027s frustrating working with Powershell and Azure DevOps automation and whatnot how all of them support the same stdout and stderror outputs but they all implement their own distinct flavor of Warn and they\u0027re not compatible.\r\n\r\nEven if the *implementation* of the warning stream on most consoles is done as \"color the text orange\" instead of doing smart things like warning-specific redirection like Powershell offers, having a standard API for logging warnings would simplify a lot.\r\n\r\nI want \"Console.Warn\".\r\n\r\nBut that probably requires some OS support that doesn\u0027t exist, I assume.",
                                           "updatedAt":  "2021-05-27T15:34:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTYwNzUzNw==",
                                           "createdAt":  "2021-05-31T17:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "From PowerShell experience I opened https://github.com/dotnet/runtime/issues/800 to get support for tab-completions. Also there was mentioned it is desired to have a featured line editor.\r\nI don\u0027t remember whether an issue exists for TermInfo support. Currently .Net uses TermInfo internally in limited way. It would be nice enhance this, maybe expose publicly (and add Windows Terminal in TermInfo database) so that we could use unified approach for most of terminals.",
                                           "updatedAt":  "2021-05-31T17:25:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTcxMjQ0Mw==",
                                           "createdAt":  "2021-05-31T23:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonsequitur",
                                           "body":  "@iSazonov Tab completions are available today. They\u0027re at a higher layer than `System.Console`. [System.CommandLine](https://github.com/dotnet/command-line-api) allows tool authors to configure completions, and end users can enable these using [`dotnet-suggest`](https://github.com/dotnet/command-line-api/blob/main/docs/dotnet-suggest.md). There\u0027s been some discussion of merging the latter\u0027s functionality into the `dotnet` CLI and improving the install experience.\r\n\r\n",
                                           "updatedAt":  "2021-05-31T23:10:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MTc5OTc5Mw==",
                                           "createdAt":  "2021-06-01T04:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@jonsequitur Thanks for pointing System.CommandLine but PowerShell uses low level API to implement tab-completions for cmdlets.",
                                           "updatedAt":  "2021-06-01T04:44:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTI3ODQ2Nw==",
                                           "createdAt":  "2021-06-05T18:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtl7Eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-06-07T06:35:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "waf",
                                           "body":  "One pain point for my libraries is CJK (Chinese, Japanese, and Korean) output. In the console, a single CJK character renders as [two characters wide](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms), versus English/Latin characters which are only one character wide. If you\u0027re trying to do any sort of fancy rendering where you care about character positions and alignment, it becomes pretty complex. If it\u0027s not designed for upfront, it\u0027s painful to add later on as it breaks a lot of assumptions.\r\n\r\nSpectre.Console maintains https://github.com/spectreconsole/wcwidth/ to help retrieve this character width information, another C# implementation is [this wcwidth gist](https://gist.github.com/gongdo/0275b9ad1f25ad9d6f7a92ff677f5ec0).",
                                           "updatedAt":  "2021-06-06T07:57:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTY0MzA0NA==",
                                           "createdAt":  "2021-06-07T06:52:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e One pain point for my libraries is CJK (Chinese, Japanese, and Korean) output. In the console, a single CJK character renders as two characters wide, versus English/Latin characters which are only one character wide.\r\n\r\nCurrently PowerShell PSReadline uses simple heuristics and it would be great to have native support the feature in .Net. ",
                                           "updatedAt":  "2021-06-07T06:52:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1OTk4MzM4Ng==",
                                           "createdAt":  "2021-06-12T02:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCGNzVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-12-11T21:48:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Some issues to consider with this effort:\r\n* https://github.com/dotnet/runtime/issues/33980 (which had a draft PR: https://github.com/dotnet/runtime/pull/47935)\r\n* https://github.com/dotnet/runtime/issues/33980",
                                           "updatedAt":  "2021-06-12T02:16:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzgzNjc1NA==",
                                           "createdAt":  "2021-06-24T17:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pxtl",
                                           "body":  "Currently `-whatif` circumvents the console.  That\u0027s a small bug I\u0027d like to see fixed - get `-whatif` contents into the #6 info-stream same as `write-host`",
                                           "updatedAt":  "2021-06-24T17:52:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzcyNDIxNA==",
                                           "createdAt":  "2021-07-11T01:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCik5NQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2022-06-19T15:10:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "Hi, just wanted to say that using `Console.SetCursorPosition` is terrible if you\u0027re trying to go back to a previous position on macOS because whenever the window adds more lines, all of the numbers are offset, unlike on Windows.\r\neg.\r\n```cs\r\nvar pos = Console.GetCursorPosition();\r\nfor (int i = 0; i \u003c 100; i++) Console.WriteLine(\"Other line\");\r\nConsole.SetCursorPosition(pos.Item1, pos.Item2);\r\nConsole.Write(\"Alternative text\");\r\n```\r\nOn windows this should put the text \"Alternative text\" on the first line of the output, but on macOS, it puts it at differing locations depending on how scrolled down you got.",
                                           "updatedAt":  "2021-07-11T01:04:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODgwMDQ3MQ==",
                                           "createdAt":  "2021-07-13T05:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCVRw4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-07-13T05:56:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-07-20T14:50:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-12-11T21:48:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meeple142",
                                                                               "createdAt":  "2022-03-30T01:07:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "#52807 is another issue to look at when we explore this space.",
                                           "updatedAt":  "2021-07-13T05:54:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc406KfC",
                                           "createdAt":  "2021-07-27T16:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "I thought it was just with the ncurses that the horizontal scrolling wheel was not detected on `Linux` and now I also came across that the same is not detected by `System.Console.ReadKey(true)`, using `escape sequences`. Is any solution foreseen for this?\r\n\r\n**Edit**:\r\nOn `Windows` it\u0027s returning the same code for horizontal left or horizontal right, the same as the wheel down.\r\n`\"\\u001b[\u003c65;col;row;M\"`",
                                           "updatedAt":  "2021-07-27T17:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BY0E9",
                                           "createdAt":  "2022-04-12T17:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCw8HDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2022-04-12T18:01:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MJECloud",
                                                                               "createdAt":  "2022-04-12T18:06:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2022-12-08T17:04:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "If we do a redesign I think we should leave the old `System.Console` API for now and create a new one (e.g. `System.Terminal`) so that we don\u0027t have any breaking changes in `System.Console`.\r\n\r\nIn this new API we can then modify all the sins we know of in `System.Console` without hesitation.",
                                           "updatedAt":  "2022-04-12T17:55:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BY5IB",
                                           "createdAt":  "2022-04-12T18:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYQDKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deeprobin",
                                                                               "createdAt":  "2022-04-12T18:28:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2022-04-12T18:34:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-15T09:48:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "KathleenDollard",
                                           "body":  "@deeprobin That\u0027s the expectation. We\u0027re not going to break System.Console. This is to collect info on what the \u0027sins\" of System.Console are.",
                                           "updatedAt":  "2022-04-12T18:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Beh-Z",
                                           "createdAt":  "2022-04-13T21:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "Hi, just wanted to also say that Console.Clear doesn\u0027t do what I\u0027d expect on macOS. It should send `\\u001b[3J\\u001b[0;0H` (you can test this does what you want using by running `printf \u0027\\u001b[3J\\u001b[0;0H\u0027` in the terminal) - this clears the screen and the scroll-buffer and then puts the cursor at the top. Currently it sends something similar to `\\u001b[2J\\u001b[0;0H` (not exactly sure exactly what it sends) - this only clears the screen and puts the cursor at the top, it can also scroll down sometimes. I think there is a place for both types of clearing though, but currently we have only the less useful to me. Note: on Windows we only have the full console clearing currently, but I think the other is possible too using special escape sequences (possibly the same ones).\r\nAnother thing that would be really useful (but I don\u0027t know how to do / if it\u0027s possible) is have control over the scroll-bar in terminal using an api, because if you go down a line past the end of what\u0027s show, the position is still the same according to the api, so having control over both would be great on macOS for restoring positions properly. Unsure if this can be legitimately detected \u0026 controlled though.\r\nAlso, it would be very nice if we could detect dark mode easily on a platform like macOS where it changes all the colours in the terminal; I\u0027ve implemented a basic version of this in one of my apps and could share the code if it\u0027s wanted.\r\nAlso, I\u0027m sure you\u0027re aware, but please keep in mind that there are kind of 3 sets of apis in the Console class: plain text ones (like WriteLine), extra features that all/most terminals have (like colour), features to control the window (like window size) - even some of the last one should be able to work on macOS (and probably Linux if possible), not just the first 2.\r\nThanks!",
                                           "updatedAt":  "2022-04-13T21:52:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BfMKr",
                                           "createdAt":  "2022-04-14T04:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e Hi, just wanted to also say that Console.Clear doesn\u0027t do what I\u0027d expect on macOS. It should send `\\u001b[3J\\u001b[0;0H` (you can test this does what you want using by running `printf \u0027\\u001b[3J\\u001b[0;0H\u0027` in the terminal) - this clears the screen and the scroll-buffer and then puts the cursor at the top. Currently it sends something similar to `\\u001b[2J\\u001b[0;0H` (not exactly sure exactly what it sends) - this only clears the screen and puts the cursor at the top, it can also scroll down sometimes. I think there is a place for both types of clearing though, but currently we have only the less useful to me. Note: on Windows we only have the full console clearing currently, but I think the other is possible too using special escape sequences (possibly the same ones). \r\n\r\n@hamarb123 I think that bug does relate to the current API. Can you create a new Issue for this?\r\n\r\n\u003e Another thing that would be really useful (but I don\u0027t know how to do / if it\u0027s possible) is have control over the scroll-bar in terminal using an api, because if you go down a line past the end of what\u0027s show, the position is still the same according to the api, so having control over both would be great on macOS for restoring positions properly. Unsure if this can be legitimately detected \u0026 controlled though. \r\n\r\nI am not sure if this is possible. I guess this is something that belongs to the [`conhost`](https://github.com/microsoft/terminal/blob/fb597ed304ec6eef245405c9652e9b8a029b821f/src/interactivity/onecore/ConsoleWindow.cpp#L14-L26) on windows.\r\n\r\nBut there are ANSI control sequences for scrolling [^1] (but these are not supported in [`ANSI.SYS`](https://en.wikipedia.org/wiki/ANSI.SYS) = no DOS-support):\r\n\r\n|Description|Sequence|\r\n|---|---|\r\n| Enable scrolling for entire display | `\u003cESC\u003e[r` |\r\n| Enable scrolling from row {start} to row {end}.  | `\u003cESC\u003e[{start};{end}r` |\r\n| Scroll display down one line.  | `\u003cESC\u003eD` |\r\n| Scroll display up one line.  | `\u003cESC\u003eM` |\r\n\r\n[^1]: https://www.cse.psu.edu/~kxc104/class/cmpen472/11f/hw/hw7/vt100ansi.htm",
                                           "updatedAt":  "2022-04-14T04:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BgnLD",
                                           "createdAt":  "2022-04-14T11:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCik5iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2022-06-19T15:13:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "zadjii-msft",
                                           "body":  "FWIW, _no_, controlling the scrollbar is not something that\u0027s broadly possible with VT/escape sequences. The \"scroll up/down\" sequences are used for shifting the contents within the active buffer (the \"viewport\" at the bottom of the scrollback), and account for things like scroll margins, but they don\u0027t move the viewport into scrollback. \r\n\r\nNot all terminals have support for scrollback. There have been a few attempts across the ecosystem to try and roll one-off sequences for controlling the position of the viewport, but those aren\u0027t [widely implemented](https://gitlab.freedesktop.org/terminal-wg/specifications/-/issues/30) (to the best of my knowledge). ",
                                           "updatedAt":  "2022-04-14T11:00:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BgvLs",
                                           "createdAt":  "2022-04-14T11:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "Thanks, I tried some of those sequences and none of them scrolled back into the scroll-back on macOS.\r\nI will make an issue for the macOS clear function as well - thanks. ",
                                           "updatedAt":  "2022-04-14T11:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bgvu2",
                                           "createdAt":  "2022-04-14T11:47:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "Well what I noticed was mostly things like Read/ReadKey. windows is the os where you can just ReadKey where on unixes it requires switching back and forth between terminal canonical mode, or what is done here, just staying in non canonical mode, so a dotnet console app, even a simple one reading lines, doesn\u0027t kinda feel native. Even though the fact itself that you can just ReadKey without doing os specific things is also useful.\r\nI am wondering, if a new api in any shape appears, will Console still be shown by default for simple things like WriteLine?",
                                           "updatedAt":  "2022-04-14T11:47:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BgwX1",
                                           "createdAt":  "2022-04-14T11:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e doesn\u0027t kinda feel native\r\n\r\nThat\u0027s another good point @webczat, something like ReadLine doesn\u0027t even let you press left and right to move the cursor - I\u0027ve not seen *any* other console utility that does this on macOS (except things like vi where it\u0027s intentional in certain contexts) - also this doesn\u0027t mean they don\u0027t exist, I just haven\u0027t experienced them.",
                                           "updatedAt":  "2022-04-14T11:51:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BgyYk",
                                           "createdAt":  "2022-04-14T12:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "\u003e \u003e doesn\u0027t kinda feel native\r\n\u003e \r\n\u003e That\u0027s another good point @webczat, something like ReadLine doesn\u0027t even let you press left and right to move the cursor - I\u0027ve not seen _any_ other console utility that does this on macOS (except things like vi where it\u0027s intentional in certain contexts) - also this doesn\u0027t mean they don\u0027t exist, I just haven\u0027t experienced them.\r\n\r\nWell generally it\u0027s exactly the canonical vs non canonical mode. in canonical mode (default) dotnet is not supposed to handle things character by character, just ReadLine should read from terminal until newline, as only full lines are sent to it. In case of non canonical each character is sent and everything including ^u and ^k keystrokes and other such things, backspace etc needs to be directly handled by the program.\r\nI am on linux BTW.",
                                           "updatedAt":  "2022-04-14T12:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bmo9k",
                                           "createdAt":  "2022-04-16T11:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e @hamarb123 I think that bug does relate to the current API. Can you create a new Issue for this?\r\n\r\nhttps://github.com/dotnet/runtime/issues/28355 - seems like I\u0027ve commented here before also",
                                           "updatedAt":  "2022-04-16T11:58:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SbkXz",
                                           "createdAt":  "2023-01-14T23:18:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "I\u0027m having the follow error when I resize the console height to zero or almost zero and pointing the mouse to the available console space:\r\n\r\n`System.InvalidOperationException: \u0027Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\u0027`\r\n\r\nThis is happening on `Windows` and `WSL` using cmd, pwsh and conhost. As I\u0027m reading escape sequences from `Console.ReadKey (true)` in a console with a height equal to zero causes the `System.Console.dll` crash. The problem is I can\u0027t force resizing the console. Do I still need to using for Windows the Win32 API Console by enabling `ENABLE_VIRTUAL_TERMINAL_PROCESSING` to be able to use escape sequences or does System.Console allows that feature? Another question is many escape sequences request not available in Windows and WSL, is there any configuration I can use or is limitation?\r\nTo test this issue please clone the https://github.com/gui-cs/Terminal.Gui repo and run the `UICatalog` project with the argument `-usc`, which will use the `NetDriver` using the `System.Console`. Thanks.",
                                           "updatedAt":  "2023-01-16T10:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Se_m2",
                                           "createdAt":  "2023-01-16T10:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCytmKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2023-01-16T12:57:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@BDisp please create a new issue, this thread is dedicated to Console re-design",
                                           "updatedAt":  "2023-01-16T10:51:59Z"
                                       }
                                   ],
                         "totalCount":  41
                     },
        "title":  "[Discussion] System.Console re-design",
        "labels":  [
                       "design-discussion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59059",
        "createdAt":  "2021-09-13T19:35:16Z",
        "number":  59059,
        "author":  "JamesWTruher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8ojcA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darthwalsh",
                                            "createdAt":  "2023-10-19T02:43:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daviewales",
                                            "createdAt":  "2024-11-13T22:44:09Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-04-20T03:31:25Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nit appears that an exited application hangs on to console handles after it exits\r\nThe application that I\u0027m seeing in is the `erlang` program `iex`.\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nhere\u0027s the code that shows off the issue.\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nclass Sample\r\n{\r\n    public static void Main()\r\n    {\r\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(handler);\r\n        ProcessStartInfo psi = new ProcessStartInfo(\"/usr/local/bin/iex\");\r\n        //psi.RedirectStandardInput = true;\r\n        do\r\n        {\r\n            using(var p = Process.Start(psi)) {\r\n                p?.WaitForExit();\r\n            }\r\n            Console.WriteLine(\"\\nproc has ended.\\npress a key to run it again - \u0027q\u0027 to stop\");\r\n        }\r\n        while (Console.ReadKey(true).KeyChar != \u0027q\u0027);\r\n    }\r\n\r\n    protected static void handler(object? sender, ConsoleCancelEventArgs args)\r\n    {\r\n        args.Cancel = true;\r\n    }\r\n}\r\n```\r\n\r\nrun the program and press `CTRL-C` twice (timing doesn\u0027t seem to matter here - quickly or slowly doesn\u0027t affect the outcome).\r\n```output\r\njames@JamesiMac20 p025 % dotnet run\r\nErlang/OTP 24 [erts-12.0.3] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] [dtrace]\r\n\r\nInteractive Elixir (1.12.3) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)\u003e \r\nBREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo\r\n       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution\r\n^C\r\nproc has ended\r\npress a key to run it again - \u0027q\u0027 to stop\r\nUnhandled exception. System.IO.IOException: The process cannot access the file because it is being used by another process.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at System.IO.StdInReader.ReadKey()\r\n   at System.IO.StdInReader.ReadKey(Boolean\u0026 previouslyProcessed)\r\n   at System.IO.SyncTextReader.ReadKey(Boolean\u0026 previouslyProcessed)\r\n   at System.ConsolePal.ReadKey(Boolean intercept)\r\n   at System.Console.ReadKey(Boolean intercept)\r\n   at Sample.Main() in /Users/james/src/projects/signal/p025/Program.cs:line 18\r\n```\r\n\r\n### Configuration\r\n\r\n```output\r\nnet6.0\r\nosx-x64\r\nModel Name:\tiMac\r\nModel Identifier:\tiMac20,1\r\nProcessor Name:\t10-Core Intel Core i9\r\nProcessor Speed:\t3.6 GHz\r\nSystem Firmware Version:\t1554.140.20.0.0 (iBridge: 18.16.14759.0.1,0)\r\n```\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\nnot sure\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\nif the line which redirects StandardInput (or StandardOutput) is not commented out the error does not occur. i\u0027m confused as to what\u0027s going on, the process has exited, but the error suggests that _something_ is hanging on to a console handle.\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-eX2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42v2ZG",
                                           "createdAt":  "2021-09-13T19:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nit appears that an exited application hangs on to console handles after it exits\r\nThe application that I\u0027m seeing in is the `erlang` program `iex`.\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nhere\u0027s the code that shows off the issue.\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nclass Sample\r\n{\r\n    public static void Main()\r\n    {\r\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(handler);\r\n        ProcessStartInfo psi = new ProcessStartInfo(\"/usr/local/bin/iex\");\r\n        //psi.RedirectStandardInput = true;\r\n        do\r\n        {\r\n            using(var p = Process.Start(psi)) {\r\n                p?.WaitForExit();\r\n            }\r\n            Console.WriteLine(\"\\nproc has ended.\\npress a key to run it again - \u0027q\u0027 to stop\");\r\n        }\r\n        while (Console.ReadKey(true).KeyChar != \u0027q\u0027);\r\n    }\r\n\r\n    protected static void handler(object? sender, ConsoleCancelEventArgs args)\r\n    {\r\n        args.Cancel = true;\r\n    }\r\n}\r\n```\r\n\r\nrun the program and press `CTRL-C` twice (timing doesn\u0027t seem to matter here - quickly or slowly doesn\u0027t affect the outcome).\r\n```output\r\njames@JamesiMac20 p025 % dotnet run\r\nErlang/OTP 24 [erts-12.0.3] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] [dtrace]\r\n\r\nInteractive Elixir (1.12.3) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)\u003e \r\nBREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo\r\n       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution\r\n^C\r\nproc has ended\r\npress a key to run it again - \u0027q\u0027 to stop\r\nUnhandled exception. System.IO.IOException: The process cannot access the file because it is being used by another process.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at System.IO.StdInReader.ReadKey()\r\n   at System.IO.StdInReader.ReadKey(Boolean\u0026 previouslyProcessed)\r\n   at System.IO.SyncTextReader.ReadKey(Boolean\u0026 previouslyProcessed)\r\n   at System.ConsolePal.ReadKey(Boolean intercept)\r\n   at System.Console.ReadKey(Boolean intercept)\r\n   at Sample.Main() in /Users/james/src/projects/signal/p025/Program.cs:line 18\r\n```\r\n\r\n### Configuration\r\n\r\n```output\r\nnet6.0\r\nosx-x64\r\nModel Name:\tiMac\r\nModel Identifier:\tiMac20,1\r\nProcessor Name:\t10-Core Intel Core i9\r\nProcessor Speed:\t3.6 GHz\r\nSystem Firmware Version:\t1554.140.20.0.0 (iBridge: 18.16.14759.0.1,0)\r\n```\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\nnot sure\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\nif the line which redirects StandardInput (or StandardOutput) is not commented out the error does not occur. i\u0027m confused as to what\u0027s going on, the process has exited, but the error suggests that _something_ is hanging on to a console handle.\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesWTruher\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-13T19:35:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc422Ram",
                                           "createdAt":  "2021-09-15T16:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "Related to https://github.com/PowerShell/PowerShell/issues/11215",
                                           "updatedAt":  "2021-09-15T16:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc422gNB",
                                           "createdAt":  "2021-09-15T18:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Not a regression, it reproes in 3.1 and 5.0, but definitely we need to take a look.",
                                           "updatedAt":  "2021-09-15T18:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt33n",
                                           "createdAt":  "2025-02-09T03:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "This is marked as https://github.com/dotnet/runtime/labels/help%20wanted for assistance getting to a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T03:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n55fY",
                                           "createdAt":  "2025-04-20T03:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesWTruher",
                                           "body":  "@jeffhandley I\u0027ve tried this again with v9.0.2 and this doesn\u0027t repro any longer.\nI\u0027m not one to look a gift horse in the mouth, but I sure wish I knew how this got fixed :).",
                                           "updatedAt":  "2025-04-20T03:31:24Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Console.ReadKey throws in unexpected circumstances",
        "labels":  [
                       "area-System.Console",
                       "os-linux",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59184",
        "createdAt":  "2021-09-15T21:43:22Z",
        "number":  59184,
        "author":  "pranavkm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-17T03:15:28Z",
        "body":  "### Description\r\n\r\nThis is specifically with `Console.Write` / `Console.WriteLine` appears to work as expected. Essentially any number of `Console.Write` invocations appear to be buffered until it encounters a new line.\r\n\r\nTo reproduce:\r\n\r\n* `dotnet new blazorwebassembly`\r\n* Use a `Console.Write(\"Hello world\")` before the call to `RunAsync`\r\n* Notice it never appears in the browser console\r\n\r\n### Configuration\r\n\r\nReproduced using runtime version 6.0.0-rc.2.21460.8 \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONuvLcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc423D6J",
                                           "createdAt":  "2021-09-15T21:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThis is specifically with `Console.Write` / `Console.WriteLine` appears to work as expected. Essentially any number of `Console.Write` invocations appear to be buffered until it encounters a new line.\r\n\r\nTo reproduce:\r\n\r\n* `dotnet new blazorwebassembly`\r\n* Use a `Console.Write(\"Hello world\")` before the call to `RunAsync`\r\n* Notice it never appears in the browser console\r\n\r\n### Configuration\r\n\r\nReproduced using runtime version 6.0.0-rc.2.21460.8 \r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epranavkm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-15T21:43:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423OmZ",
                                           "createdAt":  "2021-09-15T22:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThis is specifically with `Console.Write` / `Console.WriteLine` appears to work as expected. Essentially any number of `Console.Write` invocations appear to be buffered until it encounters a new line.\r\n\r\nTo reproduce:\r\n\r\n* `dotnet new blazorwebassembly`\r\n* Use a `Console.Write(\"Hello world\")` before the call to `RunAsync`\r\n* Notice it never appears in the browser console\r\n\r\n### Configuration\r\n\r\nReproduced using runtime version 6.0.0-rc.2.21460.8 \r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epranavkm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-15T22:58:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4268tz",
                                           "createdAt":  "2021-09-17T03:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "I\u0027m not sure there is actually any way to fix this in the browser without inserting extra newlines",
                                           "updatedAt":  "2021-09-17T03:15:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Blazor WebAssembly] Console.Write does not write anything until a new line is written",
        "labels":  [
                       "arch-wasm",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60107",
        "createdAt":  "2021-10-07T00:15:41Z",
        "number":  60107,
        "author":  "daxian-dbw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCr189A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TylerLeonhardt",
                                            "createdAt":  "2021-10-07T03:09:32Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "SteveL-MSFT",
                                            "createdAt":  "2022-09-09T17:27:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveL-MSFT",
                                            "createdAt":  "2022-09-09T17:27:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bumatt",
                                            "createdAt":  "2022-12-12T16:28:21Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-07-28T06:01:22Z",
        "body":  "## Background and motivation\r\n\r\n### Feature Ask\r\n\r\nToday, when `ENABLE_VIRTUAL_TERMINAL_INPUT` is set to the input handler on Windows, `Console.ReadKey` will just pass through all the VT sequences emitted by the terminal. It would be great if a configuration is added to `System.Console` so that we can make `Console.ReadKey` parse VT sequences in this case similarly to how `Console.ReadKey` works on Unix platforms. Of course, this will be an opt-in functionality, maybe through a static property on `System.Console`, say `Console.ForceParseVTSequence`, which by default is `false`, so the existing behavior is unchanged.\r\n\r\n### Motivation\r\n\r\nThe right-clicking paste causes quite some long-standing problems in PowerShell (see https://github.com/PowerShell/PSReadLine/issues/579 and #38966 for details), and we are seeking to solve it by leveraging the [Bracketed Paste Mode](https://cirw.in/blog/bracketed-paste), which Windows Terminal [started to support](https://github.com/microsoft/terminal/pull/9034) earlier this year. To enable the bracketed paste support in Windows Terminal, the application needs to set the `ENABLE_VIRTUAL_TERMINAL_INPUT` mode to the console\u0027s input handler, however, that will cause `Console.ReadKey` to just pass through VT sequences on Windows, which would require the application itself to parse all the VT sequences.\r\n\r\nWe don\u0027t want to re-implement a VT sequence parser in PowerShell, especially given that .NET already has one that works on Unix platforms. I think it\u0027s reasonable to ask .NET to allow a similar behavior on Windows as an opt-in feature, which can benefit all applications that have the similar need.\r\n\r\n### Related Issues\r\n\r\nhttps://github.com/dotnet/runtime/issues/60101\r\nhttps://github.com/PowerShell/PSReadLine/issues/1471\r\n\r\n## API Proposal\r\n\r\nAdd a static property `bool static ForceParseVTSequence` to `System.Console` to turn on/off the feature.\r\nIts default value is false, so that current behavior is unchanged by default.\r\n\r\n\r\n## API Usage\r\n\r\n```C#\r\n// Set \u0027ENABLE_VIRTUAL_TERMINAL_INPUT\u0027 mode to the console\u0027s input handler on Windows,\r\n// then turn on this feature in C# code.\r\nConsole.ForceParseVTSequence = true;\r\n// .NET will map the VT sequence emitted by the Windows Terminal to valid ConsoleKeyInfo values,\r\n// similarly to how this behaves on Linux.\r\nConsole.ReadKey()\r\n```\r\n\r\n\r\n## Risks\r\n\r\n.NET depends on the terminfo database to map VT sequences to specific key combinations on Unix platforms, but Windows doesn\u0027t have such terminfo database. I understand this would be problem to enable a VT parser on Windows.\r\n\r\nWould it be possible to assume VT100 as the standard on Windows? According to [the doc](https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences), Windows Terminal emits sequences based on VT100:\r\n\u003e The behavior of the following sequences is based on the VT100 and derived terminal emulator technologies, most specifically the xterm terminal emulator. More information about terminal sequences can be found at http://vt100.net and at http://invisible-island.net/xterm/ctlseqs/ctlseqs.html.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSXh9Ig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc433q13",
                                           "createdAt":  "2021-10-07T00:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n### Feature Ask\r\n\r\nToday, when `ENABLE_VIRTUAL_TERMINAL_INPUT` is set to the input handler on Windows, `Console.ReadKey` will just pass through all the VT sequences emitted by the terminal. It would be great if a configuration is added to `System.Console` so that we can make `Console.ReadKey` parse VT sequences in this case similarly to how `Console.ReadKey` works on Unix platforms. Of course, this will be an opt-in functionality, maybe through a static property on `System.Console`, say `Console.ForceParseVTSequence`, which by default is `false`, so the existing behavior is unchanged.\r\n\r\n### Motivation\r\n\r\nThe right-clicking paste causes quite some long-standing problems in PowerShell (see https://github.com/PowerShell/PSReadLine/issues/579 for details), and we are seeking to solve it by leveraging the [Bracketed Paste Mode](https://cirw.in/blog/bracketed-paste), which Windows Terminal [started to support](https://github.com/microsoft/terminal/pull/9034) earlier this year. To enable the bracketed paste support in Windows Terminal, the application needs to set the `ENABLE_VIRTUAL_TERMINAL_INPUT` mode to the console\u0027s input handler, however, that will cause `Console.ReadKey` to just pass through VT sequences on Windows, which would require the application itself to parse all the VT sequences.\r\n\r\nWe don\u0027t want to re-implement a VT sequence parser in PowerShell, especially given that .NET already has one that works on Unix platforms. I think it\u0027s reasonable to ask .NET to allow a similar behavior on Windows as an opt-in feature, which can benefit all applications that have the similar need.\r\n\r\n### Related Issues\r\n\r\nhttps://github.com/dotnet/runtime/issues/60101\r\nhttps://github.com/PowerShell/PSReadLine/issues/1471\n\n### API Proposal\n\nAdd a static property `bool static ForceParseVTSequence` to `System.Console` to turn on/off the feature.\r\nIts default value is false, so that current behavior is unchanged by default.\r\n\n\n### API Usage\n\n```C#\r\n// Set \u0027ENABLE_VIRTUAL_TERMINAL_INPUT\u0027 mode to the console\u0027s input handler on Windows,\r\n// then turn on this feature in C# code.\r\nConsole.ForceParseVTSequence = true;\r\n// .NET will map the VT sequence emitted by the Windows Terminal to valid ConsoleKeyInfo values,\r\n// similarly to how this behaves on Linux.\r\nConsole.ReadKey()\r\n```\r\n\n\n### Risks\n\n.NET depends on the terminfo database to map VT sequences to specific key combinations on Unix platforms, but Windows doesn\u0027t have such terminfo database. I understand this would be problem to enable a VT parser on Windows.\r\n\r\nWould it be possible to assume VT100 as the standard on Windows? According to [the doc](https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences), Windows Terminal emits sequences based on VT100:\r\n\u003e The behavior of the following sequences is based on the VT100 and derived terminal emulator technologies, most specifically the xterm terminal emulator. More information about terminal sequences can be found at http://vt100.net and at http://invisible-island.net/xterm/ctlseqs/ctlseqs.html.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edaxian-dbw\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-07T00:15:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc433rGK",
                                           "createdAt":  "2021-10-07T00:18:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "/cc @lzybkr, @SteveL-MSFT and @DHowett-MSFT FYI",
                                           "updatedAt":  "2021-10-07T01:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IEKZT",
                                           "createdAt":  "2022-08-09T08:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e .NET depends on the terminfo database to map VT sequences to specific key combinations on Unix platforms, but Windows doesn\u0027t have such terminfo database. I understand this would be problem to enable a VT parser on Windows.\r\n\r\nNot anymore. With https://github.com/dotnet/runtime/pull/72193 we can parse all VT Sequences even without Terminfo. Terminfo is now treated as default source of truth, but when it does not contain mapping for given sequence, we fall back to our own mappings. This code path is very often used for PuTTy which often identifies as xterm, but uses completely different key mappings.\r\n\r\nWith https://github.com/dotnet/runtime/pull/73257 we are going to get Bracketed Paste support for Unix. Implementing this issue should be way easier now, but I am afraid that we won\u0027t have the time to include it in .NET 7. Unless it\u0027s VERY important.",
                                           "updatedAt":  "2022-08-09T08:05:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IL3NY",
                                           "createdAt":  "2022-08-10T18:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqXklA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-08-10T18:34:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "\u003e Not anymore. With https://github.com/dotnet/runtime/pull/72193 we can parse all VT Sequences even without Terminfo.\r\n\r\nSorry for my late response, but this is great! Looking forward to having this implemented in .NET 8 so that PSReadLine can enable `ENABLE_VIRTUAL_TERMINAL_INPUT` on Windows to get consistent behavior cross platform.\r\n\r\n\u003e With https://github.com/dotnet/runtime/pull/73257 we are going to get Bracketed Paste support for Unix.\r\n\r\nI left a comment there to clarify my original ask. Please take a look when you get a chance.",
                                           "updatedAt":  "2022-08-10T18:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JbxPQ",
                                           "createdAt":  "2022-08-30T18:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daxian-dbw",
                                           "body":  "@adamsitnik one more ask:\r\nWhat is today\u0027s behavior of `Console.ReadKey` when encountering escape sequences that cannot be mapped/recognized? Will it just pass the escape sequences through as is?\r\n\r\nThis is an interesting scenario in VS Code terminal with the feature \"shell integration\". The VS Code terminal wants to send some artificial escape sequences to the shell to trigger actions of the shell. In this particular case, triggering the shell to do a tab completion and then having the shell send the result back to the VS Code terminal. So, it requires the shell to register a mapping from some artificial escape sequences to actions, and also be able to receive those artificial escape sequences from `Console.ReadKey`.\r\n\r\nPlease take this scenario into consideration when addressing this issue in .NET 8. Thanks!",
                                           "updatedAt":  "2022-08-30T18:28:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JeH0i",
                                           "createdAt":  "2022-08-31T08:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrddUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "daxian-dbw",
                                                                               "createdAt":  "2022-08-31T16:29:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e What is today\u0027s behavior of Console.ReadKey when encountering escape sequences that cannot be mapped/recognized? Will it just pass the escape sequences through as is?\r\n\r\n@daxian-dbw In case `Console.ReadKey` does not recognize the escape sequence, it just passes it as is. ",
                                           "updatedAt":  "2022-08-31T08:32:26Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Allow `Console.ReadKey` to parse VT sequences when `ENABLE_VIRTUAL_TERMINAL_INPUT` is set on Windows",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62186",
        "createdAt":  "2021-11-30T12:54:01Z",
        "number":  62186,
        "author":  "GregorLamche",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_ypYw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rluetzner",
                                            "createdAt":  "2023-08-04T09:47:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "truboxl",
                                            "createdAt":  "2024-12-13T12:38:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joedavey-1159",
                                            "createdAt":  "2025-03-06T20:18:34Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-03-19T13:31:06Z",
        "body":  "### Description\r\n\r\nWhen setting the output color with Console.Foreground not every terminal correctly displays the color.\r\nHowever if the color is set with unicode characters like \\u001b[31m those terminals do show the correct color, meaning they do support color. (but some Terminals display the characters instead of the color making it not a functional workaround)\r\n\r\n### Reproduction Steps\r\n\r\n1. Create small console program (dotnet new console).\r\n2. Write the following code:\r\n```\r\nConsole.ForegroundColor = ConsoleColor.Red;\r\nConsole.WriteLine(\"Hello, World!\");\r\nConsole.ResetColor();\r\nConsole.WriteLine($\"\\u001b[31mHello, World!\\u001b[0m\");\r\n```\r\n3. Run program in different terminal to see color support:\r\n\r\n- Microsoft Terminal\r\n- PowerShell\r\n- CommandPromt\r\n- VisualStudioCode Terminal\r\n- VisualStudioCode Debug Console (for this you have to create a launch.json in VSC)\r\n\r\n### Expected behavior\r\n\r\nConsole.Foreground should correctly set the font color independent of terminal, or at least in all terminals that support font colors. \r\n\r\n### Actual behavior\r\n\r\nIn some terminals Console.Foreground works, in some it doesn\u0027t.\r\nIn some terminals \\u001b[31m works, in some it doesn\u0027t.\r\nThese two collections are not the same. \r\nThe user doesn\u0027t know in which type of terminal the code is running. \r\nThere is no way to consistently set color in the terminal.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nNone, see Actual behavior.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nTested on net6.0/Windows",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd6LL6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46kWxi",
                                           "createdAt":  "2021-11-30T12:54:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen setting the output color with Console.Foreground not every terminal correctly displays the color.\r\nHowever if the color is set with unicode characters like \\u001b[31m those terminals do show the correct color, meaning they do support color. (but some Terminals display the characters instead of the color making it not a functional workaround)\n\n### Reproduction Steps\n\n1. Create small console program (dotnet new console).\r\n2. Write the following code:\r\n```\r\nConsole.ForegroundColor = ConsoleColor.Red;\r\nConsole.WriteLine(\"Hello, World!\");\r\nConsole.ResetColor();\r\nConsole.WriteLine($\"\\u001b[31mHello, World!\\u001b[0m\");\r\n```\r\n3. Run program in different terminal to see color support:\r\n\r\n- Microsoft Terminal\r\n- PowerShell\r\n- CommandPromt\r\n- VisualStudioCode Terminal\r\n- VisualStudioCode Debug Console (for this you have to create a launch.json in VSC)\n\n### Expected behavior\n\nConsole.Foreground should correctly set the font color independent of terminal, or at least in all terminals that support font colors. \n\n### Actual behavior\n\nIn some terminals Console.Foreground works, in some it doesn\u0027t.\r\nIn some terminals \\u001b[31m works, in some it doesn\u0027t.\r\nThese two collections are not the same. \r\nThe user doesn\u0027t know in which type of terminal the code is running. \r\nThere is no way to consistently set color in the terminal.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nNone, see Actual behavior.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGregTheMad\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-30T12:54:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46kXMI",
                                           "createdAt":  "2021-11-30T12:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Have you compared other programs that writes different colors into console? Those console are implemented in very different ways, and will have different compatibility.",
                                           "updatedAt":  "2021-11-30T12:56:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46kbUy",
                                           "createdAt":  "2021-11-30T13:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GregorLamche",
                                           "body":  "I tried it in various terminals, but only with my small program written in the Reproduction Steps.\r\nI did however notice that the ASP.Net Core default debug output manages to correctly format the output for the VSC Debug Console output, while Console.Foreground does not. \r\nA C++ library I was using (wrapped in C#) also managed to correctly format the output for the VSC Debug Console.\r\nVisual Studio Code Debug Console is the only terminal so far that I discovered where Console.Foreground does not work, while the Unicode approach does work (which is why I guess it\u0027s a DotNet issue and not a VSC issue).",
                                           "updatedAt":  "2021-11-30T13:17:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46kcnu",
                                           "createdAt":  "2021-11-30T13:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Console in Windows and console in Unix are fundamentally different. Using control character is Unix-like way, and VSCode is more Unix-like. The others are mostly native Windows console. This may be a cross compatibility issue.",
                                           "updatedAt":  "2021-11-30T13:23:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46kft3",
                                           "createdAt":  "2021-11-30T13:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GregorLamche",
                                           "body":  "It\u0027s hard to tell. ASP.NET Core outputs the color in VSC Debug Console correctly, so it either has some hidden secret sauce, or I\u0027m missing something.\r\nIn the VSC Terminal (which I think is a wrapped external terminal?) for example the Console.Foreground gets correctly displayed.\r\nAs a program I have no idea (and I guess I shouldn\u0027t) in what type of terminal I\u0027m running (eg. Unix or Windows), and so I can\u0027t handle the different support myself. The DotNet Runtime need to do this for me.",
                                           "updatedAt":  "2021-11-30T13:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46kh14",
                                           "createdAt":  "2021-11-30T13:50:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It would be interesting to look at what aspnet is doing differently.",
                                           "updatedAt":  "2021-11-30T13:50:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46k7TX",
                                           "createdAt":  "2021-11-30T15:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hopperpl",
                                           "body":  "Yes, I had similar issues in the past and I don\u0027t think anything has changed since then. Since about 6 months ago.\r\n\r\nSometimes setting colors directly works. Sometimes sending ANSI codes works. Sometimes only basic ANSI codes work, sometimes also extended (like bold/italic/enhanced-color) codes work. \r\n\r\nNow, it\u0027s not so much a problem to put all in a helper function that uses different approaches for coloring, but in Core there is really no good way to determine \"where you are\", what is supported and what is not. That terminal information is provided by the operating system, as tools like compilers (gcc, clang, you name it) know exactly if they can print ANSI codes or not. Or if enhanced ANSI codes are supported. As far as I know ForegroundColor is Windows-only anyway. As are all cursor (\"caret\") features. \r\n\r\nUnification, or console feedback of supported features is really missing. Best would be if Core would emit ANSI when on non-Windows and the terminal supports it. Not just color, but cursor (\"caret\") movement as well.\r\n\r\nAnd then there is the new Terminal Window and all its issues with Core.",
                                           "updatedAt":  "2021-11-30T15:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rd293",
                                           "createdAt":  "2023-11-09T00:47:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "moorbren",
                                           "body":  "If anyone\u0027s still having an issue with this, just printing the ANSI reset code near the start of the app boot fixed on Windows using the new terminal. \r\n\r\n``` C#\r\nConsole.Write(\"\\x1b[0m\");\r\n```",
                                           "updatedAt":  "2023-11-09T00:47:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52dBmA",
                                           "createdAt":  "2024-03-10T18:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LaithSaq",
                                           "body":  "Any updates to this? I am interested in a clean way to change colors in VScode\u0027s Debug console",
                                           "updatedAt":  "2024-03-10T18:36:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53osvo",
                                           "createdAt":  "2024-03-19T13:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PTac-h",
                                           "body":  "Hi ! \r\nIf you want to use rgb colors with the native windows terminal, you need to enable VT100 support first. \r\nsource : https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences\r\nSee the \"Extended Colors\" section to format your escape sequence.\r\n\r\nTo do it, you can import some methods from kernel32.dll directly.\r\nSimply call TerminalSetup.Setup(), it worked for me on Windows 10 with vs2019, vs2022, cmd, powershell, the new windows terminal and through puTTy as well.\r\n\r\n```C#\r\npublic class TerminalSetup\r\n{\r\n\r\n    // ReSharper disable InconsistentNaming\r\n\r\n    private const int STD_INPUT_HANDLE = -10;\r\n\r\n    private const int STD_OUTPUT_HANDLE = -11;\r\n\r\n    private const uint ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004;\r\n\r\n    private const uint DISABLE_NEWLINE_AUTO_RETURN = 0x0008;\r\n\r\n    private const uint ENABLE_VIRTUAL_TERMINAL_INPUT = 0x0200;\r\n\r\n    // ReSharper restore InconsistentNaming\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    private static extern bool GetConsoleMode(IntPtr hConsoleHandle, out uint lpMode);\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    private static extern bool SetConsoleMode(IntPtr hConsoleHandle, uint dwMode);\r\n\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    private static extern IntPtr GetStdHandle(int nStdHandle);\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    public static extern uint GetLastError();\r\n\r\n    public static void Setup()\r\n    {\r\n        var iStdIn = GetStdHandle(STD_INPUT_HANDLE);\r\n        var iStdOut = GetStdHandle(STD_OUTPUT_HANDLE);\r\n\r\n        if (!GetConsoleMode(iStdIn, out uint inConsoleMode))\r\n        {\r\n            Console.WriteLine(\"failed to get input console mode\");\r\n            Console.ReadKey();\r\n            return;\r\n        }\r\n        if (!GetConsoleMode(iStdOut, out uint outConsoleMode))\r\n        {\r\n            Console.WriteLine(\"failed to get output console mode\");\r\n            Console.ReadKey();\r\n            return;\r\n        }\r\n\r\n        inConsoleMode |= ENABLE_VIRTUAL_TERMINAL_INPUT;\r\n        outConsoleMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN;\r\n\r\n        if (!SetConsoleMode(iStdIn, inConsoleMode))\r\n        {\r\n            Console.WriteLine($\"failed to set input console mode, error code: {GetLastError()}\");\r\n            Console.ReadKey();\r\n            return;\r\n        }\r\n        if (!SetConsoleMode(iStdOut, outConsoleMode))\r\n        {\r\n            Console.WriteLine($\"failed to set output console mode, error code: {GetLastError()}\");\r\n            Console.ReadKey();\r\n            return;\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-03-19T13:31:06Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Console.Foreground does not correctly set the color in every Terminal",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63034",
        "createdAt":  "2021-12-21T01:42:40Z",
        "number":  63034,
        "author":  "cm3",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-07T13:54:49Z",
        "body":  "[Language input keys](https://en.wikipedia.org/wiki/Language_input_keys) are not defined in \r\n- https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Console/src/System/ConsoleKey.cs\r\n- https://github.com/dotnet/runtime/blob/8048fe613933a1cd91e3fad6d571c74f726143ef/src/libraries/System.Console/ref/System.Console.cs\r\n\r\nThat causes issues like https://github.com/PowerShell/PSReadLine/issues/2206.\r\n\r\nSo I recommend ConsoleKey to include:\r\n\r\n- Convert / 28 / 0x1C\r\n- NonConvert / 29 / 0x1D\r\n\r\n[Virtual\\-Key Codes \\(Winuser\\.h\\) \\- Win32 apps \\| Microsoft Docs](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) lists up other language input keys, too. And, according to [the entry in Windows Blog for Japan](https://blogs.windows.com/japan/2021/05/10/windows-10-japanese-input-improvements/) (Japanese), codes below also should be added.\r\n\r\n- ImeOn / 22 / 0x16\r\n- ImeOff / 26 / 0x1A\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOea5_tQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47gmDl",
                                           "createdAt":  "2021-12-21T01:42:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Language input keys](https://en.wikipedia.org/wiki/Language_input_keys) are not defined in \r\n- https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Console/src/System/ConsoleKey.cs\r\n- https://github.com/dotnet/runtime/blob/8048fe613933a1cd91e3fad6d571c74f726143ef/src/libraries/System.Console/ref/System.Console.cs\r\n\r\nThat causes issues like https://github.com/PowerShell/PSReadLine/issues/2206.\r\n\r\nSo I recommend ConsoleKey to include:\r\n\r\n- Convert / 28 / 0x1C\r\n- NonConvert / 29 / 0x1D\r\n\r\n[Virtual\\-Key Codes \\(Winuser\\.h\\) \\- Win32 apps \\| Microsoft Docs](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) lists up other language input keys, too. And, according to [the entry in Windows Blog for Japan](https://blogs.windows.com/japan/2021/05/10/windows-10-japanese-input-improvements/) (Japanese), codes below also should be added.\r\n\r\n- ImeOn / 22 / 0x16\r\n- ImeOff / 26 / 0x1A\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecm3\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-21T01:42:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47h1xj",
                                           "createdAt":  "2021-12-21T12:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH3ktQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cm3",
                                                                               "createdAt":  "2021-12-22T00:07:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mono0x",
                                                                               "createdAt":  "2021-12-25T01:50:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The following API is proposed:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    enum ConsoleKey\r\n    {\r\n        Convert = 0x1C, // or named as ImeConvert\r\n        NonConvert = 0x1D, // or named as ImeNonConvert\r\n        ImeOn = 0x16,\r\n        ImeOff = 0x1A,\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-12-21T12:09:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48FVcl",
                                           "createdAt":  "2022-01-08T15:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cm3",
                                           "body":  "Winforms use `IMEConvert` and  `IMENonconvert` for the API names and the same names can be preferred. https://github.com/dotnet/winforms/blob/main/src/System.Windows.Forms/src/System/Windows/Forms/Keys.cs",
                                           "updatedAt":  "2022-01-08T15:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Fd_z",
                                           "createdAt":  "2022-01-08T17:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "In the public winforms enum linked I notice a typo: \"IMEAceept\"..",
                                           "updatedAt":  "2022-01-08T17:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48GAPo",
                                           "createdAt":  "2022-01-09T01:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJHWjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-01-09T20:40:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cm3",
                                           "body":  "@danmoseley That is for backward compatibility. \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=windowsdesktop-6.0\u0026viewFallbackFrom=net-5.0 says \"The IME accept key. Obsolete, use IMEAccept instead.\" \r\n\r\nA comment in http://www.mikepope.com/blog/AddComment.aspx?blogid=2250 explains the history:\r\n\r\n\u003e I found System.Windows.Forms.Keys.ImeAceept (ImeAccept) after we shipped it. After that, I put in a test for exposed interface on the windows forms stuff. Every time the interface changed, the test would fail, and I\u0027d have to go look at it and make sure everything was cool. I filed over a dozen bugs on new spelling errors in the interface as a result of the test...",
                                           "updatedAt":  "2022-01-09T01:23:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48ImT6",
                                           "createdAt":  "2022-01-10T13:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMVi3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cm3",
                                                                               "createdAt":  "2022-01-31T15:45:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "For now I\u0027ve added this issue to https://github.com/dotnet/runtime/issues/52374, will try to tackle it when we start working on improving Console",
                                           "updatedAt":  "2022-01-10T13:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r3JWJ",
                                           "createdAt":  "2023-11-14T06:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Is it possible to recognize them on Unix?",
                                           "updatedAt":  "2023-11-14T06:28:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sUu1o",
                                           "createdAt":  "2023-11-18T04:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cm3",
                                           "body":  "Are you making a distinction between Linux and Unix in your statement? If not, I am happy to report that those keys are recognised on Ubuntu. If so, please wait for another report from someone.",
                                           "updatedAt":  "2023-11-18T04:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sYfCx",
                                           "createdAt":  "2023-11-20T07:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e I am happy to report that those keys are recognised on Ubuntu\r\n\r\nIs there any chance you could run `showkey -a` command line utility and press that key to see what it\u0027s being mapped to?\r\n\r\nI\u0027ve used it in https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/#sys-calls\r\n\r\n",
                                           "updatedAt":  "2023-11-20T07:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55rn-1",
                                           "createdAt":  "2024-04-07T13:54:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cm3",
                                           "body":  "I apologize for the significant delay in responding to your inquiry regarding the key recognition issue on Linux. After finally conducting the tests you suggested, I have some results to share.\r\nUnfortunately, the `showkey -a` command did not register any response for either of the keys in question. However, by using the `xev` command, I was able to determine that the Non Convert key is recognized as keycode 102 (keysym 0xff22, Muhenkan) and the Convert key as keycode 100 (keysym 0xff23, Henkan_Mode).\r\nThe PC with Ubuntu installed, on which I intended to perform these tests, was no longer operational. In its place, I\u0027ve found another PC running Peppermint Linux, which I used to conduct the tests and gather this report.",
                                           "updatedAt":  "2024-04-07T13:54:48Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Support language input keys",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63645",
        "createdAt":  "2022-01-11T21:42:26Z",
        "number":  63645,
        "author":  "commonquail",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T04:50:46Z",
        "body":  "### Description\r\n\r\n`System.Console` does not print colors correctly under terminal emulators using terminfo\u0027s direct color mode (AKA 24-bit, truecolor) entries. I understand that there are several other cross platform issues with `System.Console` (#52374) but none of those directly identify an issue with recognizing direct color mode.\r\n\r\nThe key obstacle here is not that `System.Console` does not have 24-bit color support but rather very specifically that colored text generally ends up illegible. For example, `TERM=tmux-direct dotnet run no-such-file`. Specifically, colored output by `dotnet` is how I discovered this.\r\n\r\n### Reproduction Steps\r\n\r\nUsing\r\n\r\n* the sample program from #23241\r\n* any direct color mode terminal entry from terminfo\r\n* any 24-bit capable terminal emulator\r\n\r\n we can print out many color combinations for different `TERM` values. For example\r\n\r\n```sh\r\n$ wget https://raw.githubusercontent.com/mirror/ncurses/master/misc/terminfo.src\r\n$ tic -e tmux-direct,tmux-256color terminfo.src\r\n```\r\n\r\nwill download the latest source format terminfo file and install the `tmux-direct` and `tmux-256color` entries into the default terminfo database directory. Then\r\n\r\n```sh\r\n$ for term in tmux-256color tmux-direct ; do TERM=$term dotnet run ; done\r\n```\r\n\r\nwill run the program under the different terminfo entries.\r\n\r\n### Expected behavior\r\n\r\nI expect direct color mode terminal entries to behave like 256color entries (given the limitations).\r\n\r\n### Actual behavior\r\n\r\nTmux 3.1c in Konsole 20.04.2 produces something like\r\n\r\n![image](https://user-images.githubusercontent.com/603326/149024947-5234eed4-fd7c-42ef-8b63-308543d3d1fa.png)\r\n\r\nThe respective `konsole-*` entries behave the same, in and out of tmux.\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n* .NET 6.0.100\r\n* openSUSE Leap 15.3\r\n* x64\r\n* WSL2 exhibits same symptoms\r\n\r\n### Other information\r\n\r\n* There are [no test cases for direct color mode entries](https://github.com/dotnet/runtime/blob/64f48857a6193a81faa32825cc78d7340a3ebd46/src/libraries/System.Console/tests/TermInfo.cs#L87).\r\n* The max color count record from `infocmp` is `colors#0x1000000`.\r\n* Looking at the color pattern it almost seems like some bytes are not being read out of the database.\r\n* My `COLORTERM` is `1`. `0` and unset do not affect this behaviour.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPDlA3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48OUDe",
                                           "createdAt":  "2022-01-11T21:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n`System.Console` does not print colors correctly under terminal emulators using terminfo\u0027s direct color mode entries. I understand that there are several other cross platform issues with `System.Console` (#52374) but none of those directly identify an issue with (any kind of) support for direct color mode.\r\n\r\nThe key obstacle here is not that `System.Console` does not have 24-bit color support but rather very specifically that colored text generally ends up illegible. For example, `TERM=tmux-direct dotnet run no-such-file`.\n\n### Reproduction Steps\n\nUsing\r\n\r\n* the sample program from #23241\r\n* any direct color mode terminal entry from terminfo\r\n* any 24-bit capable terminal emulator\r\n\r\n we can print out many color combinations for different `TERM` values. For example\r\n\r\n```sh\r\n$ wget https://raw.githubusercontent.com/mirror/ncurses/master/misc/terminfo.src\r\n$ tic -e tmux-direct,tmux-256color terminfo.src\r\n```\r\n\r\nwill download the latest source format terminfo file and install the `tmux-direct` and `tmux-256color` entries into the default terminfo database directory. Then\r\n\r\n\n\n### Expected behavior\n\nI expect direct color mode terminal entries to behave like 256color entries (given the limitations).\n\n### Actual behavior\n\n```sh\r\n$ for term in tmux-256color tmux-direct ; do TERM=$term dotnet run ; done\r\n```\r\n\r\nin tmux 3.1c in Konsole 20.04.2 produces something like\r\n\r\n![image](https://user-images.githubusercontent.com/603326/149024947-5234eed4-fd7c-42ef-8b63-308543d3d1fa.png)\r\n\r\nThe `s/tmux/konsole` entries behave the same, in and out of tmux.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n* .NET 6.0.100\r\n* openSUSE Leap 15.3\r\n* x64\r\n* WSL2 exhibits same symptoms\n\n### Other information\n\nThere are [no test cases for direct color mode entries](https://github.com/dotnet/runtime/blob/64f48857a6193a81faa32825cc78d7340a3ebd46/src/libraries/System.Console/tests/TermInfo.cs#L87). Looking at the color pattern it almost seems like some bytes are not being read out of the database.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecommonquail\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-11T21:42:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Terminfo direct color mode does not work",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64621",
        "createdAt":  "2022-02-01T15:41:39Z",
        "number":  64621,
        "author":  "AlexGames73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2Qxow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teo-tsirpanis",
                                            "createdAt":  "2022-02-01T16:18:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epeshk",
                                            "createdAt":  "2022-02-15T19:05:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vorotynsky",
                                            "createdAt":  "2022-08-24T10:15:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "garrystalin",
                                            "createdAt":  "2022-10-06T18:40:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Anton92nd",
                                            "createdAt":  "2022-10-07T05:50:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EvgeniyZ",
                                            "createdAt":  "2022-10-07T10:25:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimkoteni",
                                            "createdAt":  "2022-10-10T17:25:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillKornienko",
                                            "createdAt":  "2022-10-19T20:58:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2022-11-03T23:00:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2022-11-03T23:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karb0f0s",
                                            "createdAt":  "2022-11-04T01:06:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rstm-sf",
                                            "createdAt":  "2022-12-15T18:34:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Klug76",
                                            "createdAt":  "2022-12-15T19:09:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "greczimarton",
                                            "createdAt":  "2022-12-30T10:49:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramoneeza",
                                            "createdAt":  "2023-01-10T08:34:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "monoman",
                                            "createdAt":  "2023-01-13T17:36:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillAldashkin",
                                            "createdAt":  "2023-02-01T09:59:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexey-gusarov",
                                            "createdAt":  "2023-02-01T17:29:11Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "alexey-gusarov",
                                            "createdAt":  "2023-02-01T17:29:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KoHHeKT",
                                            "createdAt":  "2023-02-07T13:57:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andreizhvaleuski",
                                            "createdAt":  "2023-02-12T06:05:48Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "andreizhvaleuski",
                                            "createdAt":  "2023-02-12T06:05:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavlo-sof",
                                            "createdAt":  "2023-02-28T09:22:23Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Amir0715",
                                            "createdAt":  "2023-05-23T20:42:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Amir0715",
                                            "createdAt":  "2023-05-23T20:42:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-03-03T08:13:57Z"
                                        }
                                    ],
                          "totalCount":  26
                      },
        "updatedAt":  "2025-02-24T12:39:31Z",
        "body":  "### Background and motivation\r\n\r\nMany lovers of C# like me used console class for programming competitions and faced to a problem like \u0027TimeLimit\u0027 or \u0027OutOfMemory\u0027 verdicts. It is related to very slowly reading from console because console reads whole line in RAM (like in Python), it is their main problem at all in programming compretitions. \r\nI want to extend console class with \u0027read\u0027 methods (like \u0027cin\u0027 in C++), which will significantly optimize reading from the console and increase the popularity of using the language in competitions.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public static class Console\r\n    {\r\n        public static string ReadToken(params char[] skipChars)\r\n        {\r\n            var hashSet = skipChars.ToHashSet();\r\n            var c = (char) In.Read();\r\n            while (hashSet.Contains(c))\r\n            {\r\n                c = (char) In.Read();\r\n            }\r\n        \r\n            var sb = new StringBuilder();\r\n            while (!hashSet.Contains(c))\r\n            {\r\n                sb.Append(c);\r\n                c = (char) In.Read();\r\n            }\r\n\r\n            return sb.ToString();\r\n        }\r\n\r\n        public static string ReadToken() =\u003e ReadToken(\u0027 \u0027, \u0027\\n\u0027, \u0027\\r\u0027);\r\n        public static bool ReadBool() =\u003e bool.Parse(ReadToken());\r\n        public static decimal ReadDecimal() =\u003e decimal.Parse(ReadToken());\r\n        public static double ReadDouble() =\u003e double.Parse(ReadToken());\r\n        public static float ReadFloat() =\u003e float.Parse(ReadToken());\r\n        public static int ReadInt() =\u003e int.Parse(ReadToken());\r\n        public static long ReadLong() =\u003e long.Parse(ReadToken());\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar n = Console.ReadLong();\r\nvar arr = new int[n];\r\nfor (var i = 0; i \u003c n; i++)\r\n{\r\n    arr[i] = Console.ReadInt();\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn6Oh0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49Nojx",
                                           "createdAt":  "2022-02-01T15:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-01T15:41:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Nq1J",
                                           "createdAt":  "2022-02-01T15:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGames73",
                                           "body":  "I tag area-System.Console command: @jeffhandley @adamsitnik @jozkee",
                                           "updatedAt":  "2022-02-01T15:51:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49OJzU",
                                           "createdAt":  "2022-02-01T17:49:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nMany lovers of C# like me used console class for programming competitions and faced to a problem like \u0027TimeLimit\u0027 or \u0027OutOfMemory\u0027 verdicts. It is related to very slowly reading from console because console reads whole line in RAM (like in Python), it is their main problem at all in programming compretitions. \r\nI want to extend console class with \u0027read\u0027 methods (like \u0027cin\u0027 in C++), which will significantly optimize reading from the console and increase the popularity of using the language in competitions.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public static class Console\r\n    {\r\n        public static string ReadToken(params char[] skipChars)\r\n        {\r\n            var hashSet = skipChars.ToHashSet();\r\n            var c = (char) In.Read();\r\n            while (hashSet.Contains(c))\r\n            {\r\n                c = (char) In.Read();\r\n            }\r\n        \r\n            var sb = new StringBuilder();\r\n            while (!hashSet.Contains(c))\r\n            {\r\n                sb.Append(c);\r\n                c = (char) In.Read();\r\n            }\r\n\r\n            return sb.ToString();\r\n        }\r\n\r\n        public static string ReadToken() =\u003e ReadToken(\u0027 \u0027, \u0027\\n\u0027, \u0027\\r\u0027);\r\n        public static bool ReadBool() =\u003e bool.Parse(ReadToken());\r\n        public static decimal ReadDecimal() =\u003e decimal.Parse(ReadToken());\r\n        public static double ReadDouble() =\u003e double.Parse(ReadToken());\r\n        public static float ReadFloat() =\u003e float.Parse(ReadToken());\r\n        public static int ReadInt() =\u003e int.Parse(ReadToken());\r\n        public static long ReadLong() =\u003e long.Parse(ReadToken());\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar n = Console.ReadLong();\r\nvar arr = new int[n];\r\nfor (var i = 0; i \u003c n; i++)\r\n{\r\n    arr[i] = Console.ReadInt();\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAlexGames73\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-01T17:49:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49PNnp",
                                           "createdAt":  "2022-02-01T23:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODP-6OA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2022-02-02T12:03:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2022-02-06T10:22:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epeshk",
                                                                               "createdAt":  "2022-02-15T19:05:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KirillAldashkin",
                                                                               "createdAt":  "2023-02-01T09:59:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2023-12-18T17:58:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Frassle",
                                           "body":  "I suppose there could be an argument for dotnet including something like [Java\u0027s Scanner class](https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html). But it shouldn\u0027t be specific to Console.",
                                           "updatedAt":  "2022-02-01T23:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Qe6e",
                                           "createdAt":  "2022-02-02T09:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODP-6RA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2022-02-02T12:03:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2022-02-06T10:22:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epeshk",
                                                                               "createdAt":  "2022-02-15T19:05:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexRadch",
                                                                               "createdAt":  "2022-12-15T19:01:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2023-12-18T17:58:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "There can be a class parsing such values from any `TextReader`. It will serve like `fscanf` in C.",
                                           "updatedAt":  "2022-02-02T09:15:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49bChD",
                                           "createdAt":  "2022-02-05T02:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "Is this useful outside of coding competitions? I wonder if this could just be a NuGet package.",
                                           "updatedAt":  "2022-02-05T02:04:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49fyi6",
                                           "createdAt":  "2022-02-07T17:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHauRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-01-18T12:16:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-24T19:57:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Also worth noting that if something like this were taken then `ReadBool`, `ReadInt`, `ReadLong`, `ReadFloat`, etc are all the incorrect name: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions#avoiding-language-specific-names\r\n\r\nAs per the docs, the name is `Boolean`, `Int32`, `Int64`, `Single`, etc. All matching the name of the corresponding type in `System`\r\n\r\n",
                                           "updatedAt":  "2022-02-07T17:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49kM9c",
                                           "createdAt":  "2022-02-08T17:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "As for reading the things, I would rather have them use the type\u0027s ``TryParse`` methods so that way if they cant be decoded properly they can throw directly from the Console class itself.\r\n\r\nI also agree with tanner, the names would have to be ``ReadBoolean``, ``ReadInt32``/``ReadUInt32``, ``ReadInt64``/``ReadUInt64``, ``ReadSingle``, etc.",
                                           "updatedAt":  "2022-02-08T17:57:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49nJNq",
                                           "createdAt":  "2022-02-09T11:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGames73",
                                           "body":  "I agree with you all that naming is important thing, but unfortunately, `class Console` prohibits the use of UInt32 and UInt64 as return type of methods.\r\n\r\nAlso i think that `TryParse` method (may be generic method) are not about reading datas, it is about parsing something from parameter of method.\r\n\r\nI was thinking more about creating methods `ReadBoolean`, `ReadInt32`, `ReadInt64`, `ReadSingle`, etc. (ReadUInt32 and ReadUInt64 only if prohibits will have been declined), or about creating separate api like `Scanner` in Java.",
                                           "updatedAt":  "2022-02-09T11:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49nT1C",
                                           "createdAt":  "2022-02-09T12:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCN2B9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2022-02-09T15:00:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I am pretty sure that UInt32 and UInt64 is ok anywhere I think where it is needed if there is no other way to represent something). For me, perhaps I want it to directly read in some unsigned number someone imputted into console which cannot be downcasted to a signed one as it might overflow (which is sometimes not good at all).\r\n\r\nBesides, if we are going to do this much changes into Console for additional Read methods, we might just as well go all the way with the built in types to C#.",
                                           "updatedAt":  "2022-02-09T12:36:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-B2lu",
                                           "createdAt":  "2022-02-15T19:05:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHau7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-08-31T10:23:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anton92nd",
                                                                               "createdAt":  "2022-10-07T05:51:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "konovalov-",
                                                                               "createdAt":  "2022-10-07T10:45:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "monoman",
                                                                               "createdAt":  "2023-01-13T17:16:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreizhvaleuski",
                                                                               "createdAt":  "2023-02-12T06:07:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daredever",
                                                                               "createdAt":  "2023-07-26T14:38:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-24T19:58:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "epeshk",
                                           "body":  "Programming competition judge systems disallows any external references. Solution on competitions usually is just a single file of code. So it\u0027s useless to have this API in a NuGet package.\r\n\r\nOf course, this shouldn\u0027t be limited to `Console`.\r\n\r\ni think it\u0027s nice to have these APIs even if only practical use case are competitions, because:\r\n1. It\u0027s not only about performance. `.ReadInt32()` is simpler to write and read than `int.Parse(Console.ReadLine().Split()[0])`. Also these APIs will be useful when input format is not strict about whitespaces and line breaks.\r\n2. It will simplify participating in programming contests for .NET developers\r\n3. It will helps to promote .NET to competitive programmers\r\n4. It will force developers of judge systems to upgrade to modern versions of .NET and languages from .NET Framework and Mono (because of participant\u0027s requests to supports these APIs)",
                                           "updatedAt":  "2022-02-15T19:05:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-B9Zy",
                                           "createdAt":  "2022-02-15T19:28:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Programming competition judge systems disallows any external references\r\n\r\nIt is not the job or role of the BCL to appease limitations of programming competitions. Many languages (such as Rust) have very small standard libraries and it is the expectation that users pull in external dependencies even for things that some other languages consider \"core\". Even for the case of something like the math APIs for C/C++, some implementations (Unix) have it be an explicit separate reference (`libm`).\r\n\r\nThat doesn\u0027t mean it shouldn\u0027t or couldn\u0027t be included; its just not something that we typically consider as a driving reason to do it.",
                                           "updatedAt":  "2022-02-15T19:28:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CCio",
                                           "createdAt":  "2022-02-15T19:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epeshk",
                                           "body":  "\u003e Many languages (such as Rust) have very small standard libraries and it is the expectation that users pull in external dependencies even for things that some other languages consider \"core\".\r\n\r\nOn other side C++/Java/Go/Kotlin have APIs like this.\r\n\r\nBCL already not so small, e.g. includes JSON parsing APIs. Plain-text parsing is useful for competitions as JSON parsing useful for web apps and microservices.",
                                           "updatedAt":  "2022-02-15T19:46:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CDXY",
                                           "createdAt":  "2022-02-15T19:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHavQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-01-18T12:17:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-01-27T13:07:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-24T19:59:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "`System.Console` already exposes 89 public method and properties. I don\u0027t believe that we should add more, especially since we might introduce a new `Terminal` oriented abstraction for it (https://github.com/dotnet/runtime/issues/52374).\r\n\r\nAnother thing are delimiters. In the provided sample implementation the code handles a space and a new line. But how about tab? How about other delimiters?\r\n\r\nWhat would be the expected output of trying to parse a line without whitespaces that contain data like this: \"123true456false\"?",
                                           "updatedAt":  "2022-02-15T19:50:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CFJZ",
                                           "createdAt":  "2022-02-15T19:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epeshk",
                                           "body":  "\u003e How about other delimiters?\r\n\r\nFor typical programming contest input any whitespace char (`char.IsWhitespace`) is good delimiter IMHO. Don\u0027t know about other use cases\r\n\r\n\u003e expected output of trying to parse a line without whitespaces that contain data like this: \"123true456false\"\r\n\r\n`FormatException` if it is treated as Int32/Boolean/etc and \"123true456false\" for `ReadToken` (naming from original proposal)",
                                           "updatedAt":  "2022-02-15T19:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CGyj",
                                           "createdAt":  "2022-02-15T20:06:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDOsmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-08-24T10:32:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unsafePtr",
                                                                               "createdAt":  "2023-08-09T21:59:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "epeshk",
                                           "body":  "For me, personally, it\u0027s so sad to see how students give up C# to C++ and Java for competitions only due to lack of these APIs.\r\n\r\nNo, it\u0027s not possible to fix judge systems, because there are too many of them.\r\n\r\nOnly known workaround is using prewritten boilerplate code, but it\u0027s not always allowed on on-site contests (where all code must be written at the contest time)",
                                           "updatedAt":  "2022-02-15T20:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Dq1D",
                                           "createdAt":  "2022-02-16T06:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGames73",
                                           "body":  "\u003e What would be the expected output of trying to parse a line without whitespaces that contain data like this: \"123true456false\"?\r\n\r\nThis case is incorrect, since even you will not be able to answer the question of what tokens are present here (123/true/456/false [Int32/Boolean/Int32/Boolean] or 123t/rue/456/false [String/String/Int64/Boolean]).\r\nOf course, we can make method based on regex expressions, but it will be slower than usual...",
                                           "updatedAt":  "2022-02-16T06:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-DsGv",
                                           "createdAt":  "2022-02-16T06:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGames73",
                                           "body":  "By the way, this API will help companies to test hired employees to .NET Developer position, because automatic testing systems less wasteful and more efficiency than \"interview tasks\".",
                                           "updatedAt":  "2022-02-16T06:32:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-DxGj",
                                           "createdAt":  "2022-02-16T06:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epeshk",
                                           "body":  "\u003e this API will help companies to test hired employees to .NET Developer position\r\n\r\nThey could ask to write a method with a prewritten signature.",
                                           "updatedAt":  "2022-02-16T06:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-yF1q",
                                           "createdAt":  "2022-02-27T07:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODB3fOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2022-02-27T14:28:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2022-02-28T10:37:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Clockwork-Muse",
                                                                               "createdAt":  "2022-02-28T16:13:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-08-24T10:33:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daredever",
                                                                               "createdAt":  "2023-07-26T14:39:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Oh we want the scanner class from Java https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html. This shouldn\u0027t be tied to the console APIs. \r\n\r\nPS: This is very useful in programming contests when reading input 😄 . FWIW it\u0027s still painful in C#.\r\n\r\nC++\r\n\r\n```C++\r\nint a, b;\r\ncin \u003e\u003e a \u003e\u003e b;\r\n```\r\n\r\n```java\r\nScanner scanner = new Scanner(System.in);\r\nint a, b;\r\na = scanner.NextInt();\r\nb = scanner.NextInt();\r\n```\r\n\r\nC#\r\n\r\n```C#\r\nstring line = Console.ReadLine();\r\nint[] vals = line.Split(\u0027 \u0027).Select(int.Parse);\r\nint a = vals[0];\r\nint b = vals[1];\r\n```",
                                           "updatedAt":  "2022-02-27T07:55:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-2pKD",
                                           "createdAt":  "2022-02-28T17:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1NlcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2022-02-28T18:18:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "KirillAldashkin",
                                                                               "createdAt":  "2023-02-01T10:02:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The `Utf8Parser` already works like a \"scanner\". This probably just needs a `Utf16Parser` as well (CC. @GrabYourPitchforks)",
                                           "updatedAt":  "2022-02-28T17:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-2rWX",
                                           "createdAt":  "2022-02-28T18:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e The Utf8Parser already works like a \"scanner\". This probably just needs a Utf16Parser as well (CC. @GrabYourPitchforks)\r\n\r\nIt\u0027s a really hard to use API that works over a buffer. We need something that works over a TextReader.",
                                           "updatedAt":  "2022-02-28T18:03:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-2vne",
                                           "createdAt":  "2022-02-28T18:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGames73",
                                           "body":  "\u003e The Utf8Parser already works like a \"scanner\". This probably just needs a Utf16Parser as well (CC. @GrabYourPitchforks)\r\n\r\nAnyway you have to read whole line to use the `Utf8Parser` (or it is not so obvious).",
                                           "updatedAt":  "2022-02-28T18:23:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-27ki",
                                           "createdAt":  "2022-02-28T19:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e It\u0027s a really hard to use API that works over a buffer. We need something that works over a TextReader.\r\n\r\nConsole would be the same ;)\r\n\r\nThat\u0027s a question of extending the Utf8Parser and theoretical Utf16Parser to better support other streams or buffers rather than updating Console specifically.",
                                           "updatedAt":  "2022-02-28T19:25:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Arbx1",
                                           "createdAt":  "2022-03-31T21:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "I am not sure if such an API is really useful. \r\nBut if this is in consideration we should also add `TryRead*` methods similar to `int.TryParse`.",
                                           "updatedAt":  "2022-03-31T21:18:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ArzaY",
                                           "createdAt":  "2022-03-31T23:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHawKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epeshk",
                                                                               "createdAt":  "2022-03-31T23:35:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2022-04-01T02:47:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2022-04-02T13:16:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-08-24T10:20:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sove001",
                                                                               "createdAt":  "2022-10-07T03:09:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m0j0",
                                                                               "createdAt":  "2022-10-08T18:24:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexRadch",
                                                                               "createdAt":  "2022-12-15T19:11:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VladislavRudakoff",
                                                                               "createdAt":  "2023-01-11T22:59:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "monoman",
                                                                               "createdAt":  "2023-01-13T17:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoHHeKT",
                                                                               "createdAt":  "2023-02-07T16:09:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2023-12-18T18:01:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "coscristian",
                                                                               "createdAt":  "2024-02-02T14:36:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-24T20:01:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This API is extremely useful and should be based on StreamReader ",
                                           "updatedAt":  "2022-03-31T23:21:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QnCBW",
                                           "createdAt":  "2022-12-15T00:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1ms6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-12-15T05:05:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergey-miryanov",
                                                                               "createdAt":  "2022-12-15T18:38:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m0j0",
                                                                               "createdAt":  "2022-12-15T20:32:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-12-15T22:55:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VladislavRudakoff",
                                                                               "createdAt":  "2023-01-11T22:58:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KoHHeKT",
                                                                               "createdAt":  "2023-02-07T16:21:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "epeshk",
                                           "body":  "This API could be also implemented over `ISpanParsable\u003cTSelf\u003e` interface.\r\n\r\nAs an example, I\u0027ve draft-implemented both versions based on `ISpanParsable\u003cTSelf\u003e` and `Utf8Parser` in https://github.com/epeshk/epeshk.text\r\n\r\nMaybe this will inspire someone for a better API proposal. Or at least will be useful as copy-paste code",
                                           "updatedAt":  "2022-12-15T00:43:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Qrm6N",
                                           "createdAt":  "2022-12-15T19:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Hmm I think a generic terminal class that implements what console can do currently (and possibly add more to it) would be great.\r\n\r\nIt could also simplify the console class to just this as well:\r\n\r\n```cs\r\n// console becomes an alias to terminal to prevent existing code from breaking.\r\npublic sealed class Console : Terminal // or whatever modifiers console uses currently.\r\n{\r\n}\r\n```",
                                           "updatedAt":  "2022-12-15T19:34:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QrqYl",
                                           "createdAt":  "2022-12-15T19:46:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxfDJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vorotynsky",
                                                                               "createdAt":  "2022-12-19T10:30:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "epeshk",
                                           "body":  "Note that the Java `Scanner` is based on regular expressions and does not performs well on simple cases (like just reading integers delimited by whitespaces). Java `StreamTokenizer` is more efficient, but has ugly API.\r\n\r\nFor my use case, something simple as this is sufficient: not top speed, but faster than `int.Parse(Console.ReadLine())` and zero allocation. And this code is simple enough to just rewrite it from scratch when necessary, e.g. on programming contest without internet access.\r\n\r\n```csharp\r\npublic class TextScanner\r\n{\r\n  StreamReader input = new StreamReader(Console.OpenStandardInput(), bufferSize: 16384);\r\n  char[] buffer = new char[4096];\r\n\r\n  public int ReadInt()\r\n  {\r\n    var length = PrepareToken();\r\n    return int.Parse(buffer.AsSpan(0, length));\r\n  }\r\n\r\n  private int PrepareToken()\r\n  {\r\n    int length = 0;\r\n    bool readStart = false;\r\n    while (true)\r\n    {\r\n      int ch = input.Read();\r\n      if (ch == -1)\r\n        break;\r\n\r\n      if (char.IsWhiteSpace((char)ch))\r\n      {\r\n        if (readStart) break;\r\n        continue;\r\n      }\r\n\r\n      readStart = true;\r\n      buffer[length++] = (char)ch;\r\n    }\r\n\r\n    return length;\r\n  }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2022-12-15T19:48:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SYlkW",
                                           "createdAt":  "2023-01-13T17:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "monoman",
                                           "body":  "One thing that seems to be overlooked here is about Culture-dependent parsing (for integers it is less of an issue).\r\nIf only support for the \u0027common\u0027 subset (\u0027+\u0027, \u0027-\u0027 and digits for integers, \u0027.\u0027 as decimal separator and \u0027e\u0027 to separate exponents for floating point, english-only but case-insensitive \u0027true|false\u0027 for boolean) I would advise to have optimized extension methods for StreamReader/TextReader and Pipes",
                                           "updatedAt":  "2023-01-13T17:35:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sic44",
                                           "createdAt":  "2023-01-17T02:35:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCVzjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AlexGames73",
                                                                               "createdAt":  "2023-08-01T05:53:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "monoman",
                                           "body":  "Did some implementation bits to toy around at: https://github.com/interlockledger/interlockledger-commons/blob/main/InterlockLedger.Commons/Extensions/System.IO/TextReaderExtensions.cs \r\n\r\nUse as\r\n``` csharp\r\nusing System.IO;\r\n\r\nint firstvalue = Console.In.ReadInt32();\r\nint secondvalue = Console.In.ReadInt16();\r\n```\r\nor import statically https://github.com/interlockledger/interlockledger-commons/blob/main/InterlockLedger.Commons/Extensions/System/ConsoleExtras.cs\r\n``` csharp\r\nusing static System.ConsoleExtras;\r\n\r\nint firstvalue = ReadInt32();\r\nint secondvalue = ReadInt16();\r\n```\r\nForgot to implement ReadBoolean(), maybe tomorrow\r\n\r\nUses System.Numerics.INumber\u003cTSelf\u003e so only works in C# 11/.NET 7.0",
                                           "updatedAt":  "2023-01-17T02:37:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fo6HR",
                                           "createdAt":  "2025-02-24T12:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "for scanf like api, you can use https://github.com/AntonBergaker/InterpolatedParser. it uses source generator, is aot compatible and has support for builtin and custom types (including collection types). Console.ReadLine and pass it to `InterpolatedParser.Parse`",
                                           "updatedAt":  "2025-02-24T12:39:29Z"
                                       }
                                   ],
                         "totalCount":  32
                     },
        "title":  "[API Proposal]: Console: .ReadBool, .ReadInt, .ReadLong and so on",
        "labels":  [
                       "api-suggestion",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68340",
        "createdAt":  "2022-04-21T17:33:48Z",
        "number":  68340,
        "author":  "NickCraver",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx_Hww==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-04-21T17:39:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ejsmith",
                                            "createdAt":  "2022-04-21T17:50:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paule96",
                                            "createdAt":  "2022-04-21T18:11:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xt0rted",
                                            "createdAt":  "2022-04-21T18:15:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "baronfel",
                                            "createdAt":  "2022-04-21T18:51:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2022-04-21T20:23:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kapsiR",
                                            "createdAt":  "2022-04-21T20:48:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2022-04-21T21:27:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tyrrrz",
                                            "createdAt":  "2022-04-22T19:11:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DamienDennehy",
                                            "createdAt":  "2022-04-25T14:54:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reduckted",
                                            "createdAt":  "2022-09-28T10:25:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "augustoproiete",
                                            "createdAt":  "2023-04-11T06:38:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "g0t4",
                                            "createdAt":  "2023-05-22T16:47:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2023-07-31T17:24:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qnku",
                                            "createdAt":  "2023-08-16T14:34:56Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2025-02-15T12:13:12Z",
        "body":  "This is a follow-up to #33980 which was closed as fixed by #47935, but only for Unix/Linux, because Unix and Windows use a different PAL for the tail end of console. The ultimate feature was enabling a new environmental variable: `DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION`, which when set to `1` or `true` will still emit color codes when the console is redirected (e.g. under CI conditions for logging).\r\n\r\nHere\u0027s the Unix PAL implementation (also respecting `NO_COLOR`): https://github.com/dotnet/runtime/blob/ed04fef3b744ad179f4c570b873721d09534c017/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L874\r\n\r\nAnd here\u0027s the Windows PAL: https://github.com/dotnet/runtime/blob/ed04fef3b744ad179f4c570b873721d09534c017/src/libraries/System.Console/src/System/ConsolePal.Windows.cs\r\n\r\nHaving color output in environments like GitHub Actions is immensely helpful when finding errors in massive logs for example, compare these Unix and Windows runs today ([here\u0027s an example PR](https://github.com/StackExchange/StackExchange.Redis/pull/2113), though the logs will likely expire long-term):\r\n\r\n\u003cimg width=\"686\" alt=\"Windows Build (no color)\" src=\"https://user-images.githubusercontent.com/454813/164516979-c0612481-e820-475b-806b-d9b3704a8244.png\"\u003e\r\n\r\n\u003cimg width=\"806\" alt=\"Linux Build (color!)\" src=\"https://user-images.githubusercontent.com/454813/164517144-13d8d7e4-f17d-498d-bbe8-27b580ea742e.png\"\u003e\r\n\r\nThe ask is: **can we please make `DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION` work on Windows as well?**\r\n\r\ncc @0xced @Tyrrrz @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnpoESg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5B5Jy4",
                                           "createdAt":  "2022-04-21T17:33:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a follow-up to #33980 which was closed as fixed by #47935, but only for Unix/Linux, because Unix and Windows use a different PAL for the tail end of console. The ultimate feature was enabling a new environmental variable: `DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION`, which when set to `1` or `true` will still emit color codes when the console is redirected (e.g. under CI conditions for logging).\r\n\r\nHere\u0027s the Unix PAL implementation (also respecting `NO_COLOR`): https://github.com/dotnet/runtime/blob/ed04fef3b744ad179f4c570b873721d09534c017/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L874\r\n\r\nAnd here\u0027s the Windows PAL: https://github.com/dotnet/runtime/blob/ed04fef3b744ad179f4c570b873721d09534c017/src/libraries/System.Console/src/System/ConsolePal.Windows.cs\r\n\r\nHaving color output in environments like GitHub Actions is immensely helpful when finding errors in massive logs for example, compare these Unix and Windows runs today ([here\u0027s an example PR](https://github.com/StackExchange/StackExchange.Redis/pull/2113), though the logs will likely expire long-term):\r\n\r\n\u003cimg width=\"686\" alt=\"Windows Build (no color)\" src=\"https://user-images.githubusercontent.com/454813/164516979-c0612481-e820-475b-806b-d9b3704a8244.png\"\u003e\r\n\r\n\u003cimg width=\"806\" alt=\"Linux Build (color!)\" src=\"https://user-images.githubusercontent.com/454813/164517144-13d8d7e4-f17d-498d-bbe8-27b580ea742e.png\"\u003e\r\n\r\nThe ask is: **can we please make `DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION` work on Windows as well?**\r\n\r\ncc @0xced @Tyrrrz @stephentoub \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNickCraver\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-21T17:33:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5KbH",
                                           "createdAt":  "2022-04-21T17:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMiM4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2023-11-14T07:17:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e The ask is: can we please make DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION work on Windows as well?\r\n\r\nThis isn\u0027t really about making DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION \"work\".  This is about changing Console on Windows to use ANSI escape sequences rather than using Win32 API calls as it does today.",
                                           "updatedAt":  "2022-04-21T17:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5LVV",
                                           "createdAt":  "2022-04-21T17:41:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NickCraver",
                                           "body":  "@stephentoub yeah I agree based on what I\u0027m aware of here (admitted novice though). From the user standpoint though, that\u0027d be the functionality/surface still to maintain existing behavior right? We wouldn\u0027t want to suddenly light up color output in all scenarios and need some control - ultimately I\u0027m proposing the same control when this is feasible. All I know is with online tools (Actions, DevOps, etc.) I\u0027m searching through a _lot_ of logs spending and a _lot_ of time in oh so many builds...it\u0027d be a huge human time saver for anyone in similar positions if we could colorize.",
                                           "updatedAt":  "2022-04-21T17:41:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5Rti",
                                           "createdAt":  "2022-04-21T17:54:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m not arguing for or against the scenario or its worth, just highlighting that this isn\u0027t simply a matter of flipping a switch or adding an if block to respond to the environment variable: it requires fundamentally changing what `Console.ForegroundColor/BackgroundColor/ResetColor` do.",
                                           "updatedAt":  "2022-04-21T17:54:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5kNE",
                                           "createdAt":  "2022-04-21T18:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xt0rted",
                                           "body":  "This explains why I was able to get my dotnet local tools outputting color on GitHub Actions but not the dotnet cli. I\u0027m using the helpers in [`System.CommandLine.Rendering`](https://github.com/dotnet/command-line-api/blob/dd44dd05a20bf6af02615d8363948a630e821d00/src/System.CommandLine.Rendering/Ansi.cs) which writes to `Console.Out`. I think the [ansi support check](https://github.com/dotnet/command-line-api/blob/dd44dd05a20bf6af02615d8363948a630e821d00/src/System.CommandLine.Rendering/ConsoleFormatInfo.cs#L96-L111) will need updating too to force color output on Windows.",
                                           "updatedAt":  "2022-04-21T18:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CGAPx",
                                           "createdAt":  "2022-04-25T17:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xt0rted",
                                           "body":  "I was seeing differing results locally vs. on github so I dug into it a bit more. The way the dotnet cli emits color codes doesn\u0027t work with how the actions build log parses them. Making this change will get us color on windows, but the cli output won\u0027t give us the full experience unless github changes the build log parser, or the cli changes how colors are emitted. I opened [a discussion](https://github.com/github/feedback/discussions/15416) about this but the short of it is the build log doesn\u0027t show colors when they span multiple lines.",
                                           "updatedAt":  "2022-04-25T17:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agZHU",
                                           "createdAt":  "2023-04-22T00:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "heaths",
                                           "body":  "Maybe tangential - and quite likely a separate feature request - but what about adding `Console.IsColorEnabled` or something and allowing developers to decide whether they want to emit ANSI color codes or not? For built-in console hosts on Windows, this is only a problem in conhost and even then only if virtual terminal sequences weren\u0027t enabled. It\u0027s been pretty common to enable in third party libraries e.g., golang modules or rustlang crates, since they\u0027re often used for CLIs. Providing a capability like that can lead to all sorts of console color theming capabilities / libraries.\r\n\r\nAs to \"how much color\" e.g., 16, 256, or truecolor, I\u0027ve been in a few discussions with @dhowett from the console / Windows Terminal team about this e.g., https://github.com/microsoft/terminal/issues/11057. Since Unix\u0027s `ConsolePal` already loads terminfo it\u0027s straight forward to know how many colors are likely supported, if any. On Windows, there\u0027s some assumptions than can be made per the aforementioned thread. IIRC, if you can enable VT sequences, truecolor is supported. To enable VT sequences, e.g. in C/C++: https://github.com/microsoft/vswhere/blob/c7a417bfb46cd6a1c3e31a91ba51193d7659b6f8/src/vswhere.lib/Console.cpp#L116-L128",
                                           "updatedAt":  "2023-04-22T00:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cnfQg",
                                           "createdAt":  "2025-01-31T15:19:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "MSBuild Terminal Logger and dotnet/test ANSI output detection would both make use of IsColorEnabled and in general exposing the TermInfo knowledge that the runtime has.",
                                           "updatedAt":  "2025-01-31T15:19:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6emgRK",
                                           "createdAt":  "2025-02-15T12:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e As to \"how much color\" e.g., 16, 256, or truecolor\n\nIt feels like some/most of the use-cases requiring `IsColorEnabled` are due to the 16 colors limitation of `ConsoleColor`, for which there is a default \u0027without color\u0027 redirection behavior provided OOTB that can be altered by `DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION` and `NO_COLOR` environment variables. For more colors, we need to resort to escape sequences (part of the string content), which get ignored by those env vars mechanism.\n\nPerhaps, the proposal in https://github.com/dotnet/runtime/issues/39746 could be extended to support RGB for truecolor:\n\n```diff\n+ public static void WriteLine(ConsoleColor foreground, ConsoleColor background, string value) { throw null; }\n+ public static void WriteLine((byte R, byte G, byte B) foreground, (byte R, byte G, byte B) background, bool is24BitColor, string value) { throw null; }\n\n+ public static void Write(ConsoleColor foreground, ConsoleColor background, string value) { throw null; }\n+ public static void Write((byte R, byte G, byte B) foreground, (byte R, byte G, byte B) background, bool is24BitColor, string value) { throw null; }\n```\n\nmap to:\n\n```c#\n{\n    if (shouldUseColors)\n    {\n        if (is24BitColor) // 256color\n        {\n            value = $\"\\e[38;5;{GetColorCode(foreground.R, foreground.G, foreground.B)}m\\e[48;5;{GetColorCode(background.R, background.G, background.B)}m{value}\\e[0m\";\n\n            static int GetColorCode(byte R, byte G, byte B) =\u003e 16 + (36 * (R / 51)) + (6 * (G / 51)) + (B / 51);\n        }\n        else // truecolor\n        {\n            value = $\"\\e[38;2;{foreground.R};{foreground.G};{foreground.B}m\\e[48;2;{background.R};{background.G};{background.B}m{value}\\e[0\";\n        }\n    }\n\n    Write(value);\n}\n```\n\nThis way, use-cases requiring `IsColorEnabled`-type details for handling beyond the 16-color limit will be handled more idiomatically.",
                                           "updatedAt":  "2025-02-15T12:13:11Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Windows: Implement a way to enable color in console even when the output is redirected",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70448",
        "createdAt":  "2022-06-08T18:36:30Z",
        "number":  70448,
        "author":  "castholm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqwmuA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "eriawan",
                                            "createdAt":  "2022-09-27T20:52:32Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-09-27T20:51:30Z",
        "body":  "### Description\r\n\r\nAn `IOException` is thrown when invoking `Stream.ReadByte` on a stream obtained from `Console.OpenStandardInput` after having set `Console.Encoding` to `Encoding.Unicode`.\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace ConsoleApp1;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.InputEncoding = Encoding.Unicode;\r\n        var stdin = Console.OpenStandardInput();\r\n        _ = stdin.ReadByte();\r\n    }\r\n}\r\n```\r\n\r\nThe same exception is also thrown if you invoke `Stream.Read` with a buffer of length 1:\r\n\r\n```csharp\r\nstatic void Main()\r\n{\r\n    Console.InputEncoding = Encoding.Unicode;\r\n    var stdin = Console.OpenStandardInput();\r\n    Span\u003cbyte\u003e bytes = stackalloc byte[1];\r\n    _ = stdin.Read(bytes);\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n`Stream.ReadByte` returns the least significant byte of the read code unit (and the most significant byte of the same code unit on the next `Stream.ReadByte` invocation).\r\n\r\n-or-\r\n\r\nA more descriptive exception (`NotSupportedException`?) with a more meaningful message is thrown if this is an explicitly unuspported scenario.\r\n\r\n### Actual behavior\r\n\r\nThe following exception is thrown:\r\n\r\n```\r\nSystem.IO.IOException\r\n  HResult=0x80070023\r\n  Message=Unknown error (0x23)\r\n  Source=System.Console\r\n  StackTrace:\r\n   at System.ConsolePal.WindowsConsoleStream.Read(Span`1 buffer)\r\n   at System.IO.ConsoleStream.ReadByte()\r\n   at ConsoleApp1.Program.Main() in C:\\ConsoleApp1\\Program.cs:line 12\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nInvoking `Stream.Read` with a buffer of length 2 or more. You can also use `Encoding.CreateTranscodingStream` with both the inner and outer encodings set to UTF-16 to wrap the input stream.\r\n\r\n### Configuration\r\n\r\n.NET Core 6.0.300 / .NET Framework 4.8\r\nWindows 10 x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSxqhiw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ej5Jq",
                                           "createdAt":  "2022-06-08T18:36:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAn `IOException` is thrown when invoking `Stream.ReadByte` on a stream obtained from `Console.OpenStandardInput` after having set `Console.Encoding` to `Encoding.Unicode`.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace ConsoleApp1;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.InputEncoding = Encoding.Unicode;\r\n        var stdin = Console.OpenStandardInput();\r\n        _ = stdin.ReadByte();\r\n    }\r\n}\r\n```\r\n\r\nThe same exception is also thrown if you invoke `Stream.Read` with a buffer of length 1:\r\n\r\n```csharp\r\nstatic void Main()\r\n{\r\n    Console.InputEncoding = Encoding.Unicode;\r\n    var stdin = Console.OpenStandardInput();\r\n    Span\u003cbyte\u003e bytes = stackalloc byte[1];\r\n    _ = stdin.Read(bytes);\r\n}\r\n```\n\n### Expected behavior\n\n`ReadByte` returns the least significant byte of the read code unit (and the most significant byte of the same code unit on the next `ReadByte` invocation).\r\n\r\n-or-\r\n\r\nA more descriptive exception (`NotSupportedException`?) with a more meaningful message is thrown if this is an explicitly unuspported scenario.\n\n### Actual behavior\n\nThe following exception is thrown:\r\n\r\n```\r\nSystem.IO.IOException\r\n  HResult=0x80070023\r\n  Message=Unknown error (0x23)\r\n  Source=System.Console\r\n  StackTrace:\r\n   at System.ConsolePal.WindowsConsoleStream.Read(Span`1 buffer)\r\n   at System.IO.ConsoleStream.ReadByte()\r\n   at ConsoleApp1.Program.Main() in C:\\ConsoleApp1\\Program.cs:line 12\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nInvoking `Stream.Read` with a buffer of length 2 or more.\n\n### Configuration\n\n.NET Core 6.0.300 / .NET Framework 4.8\r\nWindows 10 x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecastholm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T18:36:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EnjrG",
                                           "createdAt":  "2022-06-09T14:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Apparently ReadConsoleW failed with a last error of 35/0x23? I can\u0027t find this code... This is coming from NtDeviceIoControlFile. Would need a kernel debugger to know how it\u0027s coming up with that.",
                                           "updatedAt":  "2022-06-09T21:47:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EpOT7",
                                           "createdAt":  "2022-06-09T21:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jkotas do you know how to interpret this code? Presumably if we were to improve the error here, we would want to have some idea the error code is intended/used for.",
                                           "updatedAt":  "2022-06-09T21:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EpWsO",
                                           "createdAt":  "2022-06-09T22:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am not able to find this error code either. \r\n\r\n\u003e Would need a kernel debugger to know how it\u0027s coming up with that.\r\n\r\nYep",
                                           "updatedAt":  "2022-06-09T22:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FaMKB",
                                           "createdAt":  "2022-06-23T14:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "It must be some secret error code, as it\u0027s missing on the [official list](https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-)\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/175324441-eb1f0997-b691-45e7-a952-ee98ef2e515a.png)\r\n\r\nI am quite sure that it\u0027s by design (1 byte is not enough to represent a Unicode character), we should definitely throw more descriptive exception.\r\n",
                                           "updatedAt":  "2022-06-23T14:39:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LGqGL",
                                           "createdAt":  "2022-09-27T20:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eriawan",
                                           "body":  "@adamsitnik \r\n\r\nJust FYI, if we only look for 0x23 to search for Last Error Code, that error code of 35 is actually `ERROR_FCB_UNAVAILABLE`, by looking at inside of Windows 10 SDK\u0027s `Error.h` header file:\r\n\r\n![image](https://user-images.githubusercontent.com/8773147/192624603-1b18529f-dcc8-4e1b-bd16-670c4557e2fb.png)\r\n\r\nPS: AFAIK, this ERROR_FCB_UNAVAILABLE usually means that OS cannot allocate available FCB (file control blocks), therefore it may not be related to the exception at all.\r\n\r\nGoing further, using Microsoft Error Lookup (https://learn.microsoft.com/en-us/windows/win32/debug/system-error-code-lookup-tool) I have this:\r\n\r\n![image](https://user-images.githubusercontent.com/8773147/192631622-98fd1060-270c-429d-94e2-45a63c12cf99.png)\r\n\r\nand using that tool again to search for `0x80070023` then I got this:\r\n\r\n![image](https://user-images.githubusercontent.com/8773147/192632519-4d3ab7a4-40ad-496a-8bc9-6a601e315388.png)\r\n",
                                           "updatedAt":  "2022-09-27T20:51:30Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "`ConsoleStream.ReadByte` throws when `Console.Encoding` is UTF-16",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77656",
        "createdAt":  "2022-10-30T20:08:32Z",
        "number":  77656,
        "author":  "PlunderBunny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrXz7Q==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "vernou",
                                            "createdAt":  "2022-11-09T08:02:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-03T22:05:41Z",
        "body":  "### Description\r\n\r\nWriting to the console is significantly slower on Windows compared to macOS. For the example below, the value in the output window varies between about 220-240ms on Windows. On macOS, the output value is consistently 2ms.\r\n\r\n```\r\nusing System.Diagnostics;\r\n\r\nStopwatch stopwatch = new();\r\n\r\nwhile (true)\r\n{\r\n\tstopwatch.Restart();\r\n\r\n\tfor (int y = 0; y \u003c Console.WindowHeight; ++y)\r\n\t{\r\n\t\tConsole.SetCursorPosition(0, y);\r\n\t\tfor (int x = 0; x \u003c Console.WindowWidth; ++x)\r\n\t\t{\r\n\t\t\tConsole.Write(\u0027A\u0027);\r\n\t\t}\r\n\t}\r\n\r\n\tstopwatch.Stop();\r\n\tDebug.WriteLine($\"{stopwatch.ElapsedMilliseconds}ms\");\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n* The same project/solution is being used on macOS and Windows, running in debug mode.\r\n* The solution/project was created in Visual Studio for Mac 17.3.8 (build 5) with default settings (C# version is \u0027default\u0027, platform target is \u0027Any CPU\u0027). Target framework is .NET 6.0.\r\n* Running in Windows 10 (10.0.19045 Build 19045), 64-bit, Visual Studio 2022 (17.1.6) as a guest on VMWare Fusion (I get the same performance on \u0027real\u0027 Windows hardware), and on macOS Ventura 13.0.\r\n* Performance appears to be similar in release builds (you can visibly see the cursor \u0027skidding\u0027 across the console in Windows).\r\n\r\n### Regression?\r\n\r\nUnknown.\r\n\r\n### Data\r\n\r\nAs per description, output window shows values in the range 220-240ms on Windows, and 2ms on macOS.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTaYMTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NRJXY",
                                           "createdAt":  "2022-10-30T20:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWriting to the console is significantly slower on Windows compared to macOS. For the example below, the value in the output window varies between about 220-240ms. On macOS, the output value is consistently 2ms.\r\n\r\n```\r\nusing System.Diagnostics;\r\n\r\nStopwatch stopwatch = new();\r\n\r\nwhile (true)\r\n{\r\n\tstopwatch.Restart();\r\n\r\n\tfor (int y = 0; y \u003c Console.WindowHeight; ++y)\r\n\t{\r\n\t\tConsole.SetCursorPosition(0, y);\r\n\t\tfor (int x = 0; x \u003c Console.WindowWidth; ++x)\r\n\t\t{\r\n\t\t\tConsole.Write(\u0027A\u0027);\r\n\t\t}\r\n\t}\r\n\r\n\tstopwatch.Stop();\r\n\tDebug.WriteLine($\"{stopwatch.ElapsedMilliseconds}ms\");\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n* The same project/solution is being used on macOS and Windows, running in debug mode.\r\n* The solution/project was created in Visual Studio for Mac 17.3.8 (build 5) with default settings (C# version is \u0027default\u0027, platform target is \u0027Any CPU\u0027). Target framework is .NET 6.0 .\r\n* Running in Windows 10 (10.0.19045 Build 19045), 64-bit, as a guest on VMWare Fusion. I get the same performance on \u0027real\u0027 hardware, and on macOS Ventura 13.0.\r\n* Performance appears to be similar in release builds (you can visibly see the cursor \u0027skidding\u0027 across the console in Windows).\r\n\r\n### Regression?\r\n\r\nUnknown.\r\n\r\n### Data\r\n\r\nAs per description, output window shows values in the range 220-240ms on Windows, and 2ms on macOS.\r\n\r\n### Analysis\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePlunderBunny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-30T20:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NjUkP",
                                           "createdAt":  "2022-11-02T19:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvRuTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vernou",
                                                                               "createdAt":  "2022-11-09T08:02:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @PlunderBunny \r\n\r\nThank you for a detailed report. I\u0027ve taken your app, modified it and run on my macBook with Boot Camp.\r\n\r\n\u003cdetails\u003e\r\n\r\n```cs\r\nusing System.Diagnostics;\r\n\r\nnamespace ConsolePerf\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            double current = Benchmark(CurrentImplementation);\r\n            double cached = Benchmark(Cached);\r\n            double optimal = Benchmark(Optimal);\r\n\r\n            Console.Clear();\r\n\r\n            Console.WriteLine($\"Console width: {Console.WindowWidth}, height: {Console.WindowHeight}\");\r\n            Report(current, nameof(current));\r\n            Report(cached, nameof(cached));\r\n            Report(optimal, nameof(optimal));\r\n\r\n            static void Report(double time, string name)\r\n                =\u003e Console.WriteLine($\"{name}: {time} ms, {time / Console.WindowHeight:0.000} ms per row, {time / (Console.WindowWidth * Console.WindowHeight):0.000} ms per cell.\");\r\n        }\r\n\r\n        private static double Benchmark(Action action)\r\n        {\r\n            List\u003clong\u003e times = new();\r\n            Stopwatch stopwatch = new();\r\n\r\n            for (int i = 0; i \u003c 100; i++)\r\n            {\r\n                stopwatch.Restart();\r\n\r\n                action();\r\n\r\n                stopwatch.Stop();\r\n                times.Add(stopwatch.ElapsedMilliseconds);\r\n            }\r\n\r\n            times.Sort();\r\n            return times[times.Count / 2];\r\n        }\r\n\r\n        private static void CurrentImplementation()\r\n        {\r\n            for (int y = 0; y \u003c Console.WindowHeight; ++y)\r\n            {\r\n                Console.SetCursorPosition(0, y);\r\n                for (int x = 0; x \u003c Console.WindowWidth; ++x)\r\n                {\r\n                    Console.Write(\u0027A\u0027);\r\n                }\r\n            }\r\n        }\r\n\r\n        private static void Cached()\r\n        {\r\n            int height = Console.WindowHeight;\r\n            int width = Console.WindowWidth;\r\n\r\n            for (int y = 0; y \u003c height; ++y)\r\n            {\r\n                Console.SetCursorPosition(0, y);\r\n                for (int x = 0; x \u003c width; ++x)\r\n                {\r\n                    Console.Write(\u0027A\u0027);\r\n                }\r\n            }\r\n        }\r\n\r\n        private static void Optimal()\r\n        {\r\n            int height = Console.WindowHeight;\r\n            int width = Console.WindowWidth;\r\n\r\n            for (int y = 0; y \u003c height; ++y)\r\n            {\r\n                Console.SetCursorPosition(0, y);\r\n                Console.Write(new string(\u0027A\u0027, width));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\nThe numbers I got confirm you observation.\r\n\r\nThis is mostly caused by the fact that our Unix implementation caches console size, while Windows counterpart does not.\r\n\r\nhttps://github.com/dotnet/runtime/blob/acd444566623d48f8b9c6b68b64cf6b8daf4e522/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L38-L39\r\n\r\nIn theory, we could also implement it for Windows by invalidating the cached values on [console resize](https://stackoverflow.com/a/31475078) ([WM_SIZE](https://learn.microsoft.com/en-us/windows/win32/winmsg/wm-size)), but this would require more research (what side effects does it bring, what privileges are required, what windows versions support it).\r\n\r\nFor now you can cache the values on your own by simply hoisting the sizes:\r\n\r\n```cs\r\nint height = Console.WindowHeight;\r\nint width = Console.WindowWidth;\r\n\r\nfor (int y = 0; y \u003c height; ++y)\r\n{\r\n    Console.SetCursorPosition(0, y);\r\n    for (int x = 0; x \u003c width; ++x)\r\n    {\r\n        Console.Write(\u0027A\u0027);\r\n    }\r\n}\r\n```\r\n\r\nIf you do that, the time reduces by a half. \r\n\r\nTo further reduce the gap, you need to reduce the number of `Console.Write*` calls which behind the scenes reduces the number of sys-calls:\r\n\r\n![consolePerf flameGraph1](https://user-images.githubusercontent.com/6011991/199581614-a7a0d0be-bbfe-4a9c-b5e4-288e86660db1.png)\r\n\r\n\r\n```cs\r\nint height = Console.WindowHeight;\r\nint width = Console.WindowWidth;\r\n\r\nfor (int y = 0; y \u003c height; ++y)\r\n{\r\n    Console.SetCursorPosition(0, y);\r\n    Console.Write(new string(\u0027A\u0027, width));\r\n}\r\n```\r\n\r\nOnce you do that, the perf gap is almost impossible to notice for a human being (less than a millisecond vs three milliseconds).\r\n\r\n```log\r\nmacOS:\r\n    Console width: 179, height: 45\r\n    current: 13 ms, 0.289 ms per row, 0.002 ms per cell.\r\n    cached: 12 ms, 0.267 ms per row, 0.001 ms per cell.\r\n    optimal: 0 ms, 0.000 ms per row, 0.000 ms per cell.\r\nWindows:\r\n    Console width: 168, height: 46\r\n    current: 308 ms, 6.696 ms per row, 0.040 ms per cell.\r\n    cached: 175 ms, 3.804 ms per row, 0.023 ms per cell.\r\n    optimal: 3 ms, 0.065 ms per row, 0.000 ms per cell.\r\n```\r\n",
                                           "updatedAt":  "2022-11-02T19:20:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NpgxN",
                                           "createdAt":  "2022-11-03T22:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvBdgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-11-04T08:51:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PlunderBunny",
                                           "body":  "Thanks Adam for confirming the results and suggesting some work-arounds.",
                                           "updatedAt":  "2022-11-03T22:05:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Significantly slower console output on Windows compared to macOS",
        "labels":  [
                       "area-System.Console",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80575",
        "createdAt":  "2023-01-12T21:05:00Z",
        "number":  80575,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-13T07:32:25Z",
        "body":  "Found in this `release/6.0` PR: https://github.com/dotnet/runtime/pull/80560 \r\n\r\n- Queue: `Libraries Test Run release mono Linux x64 Debug`\r\n- Job results: https://dev.azure.com/dnceng-public/public/_build/results?buildId=135481\u0026view=logs\u0026j=b4344b0d-0f92-5d69-ccaf-e0b24fbf14a2\u0026t=65a58faa-a542-5344-b5c8-897139f242cd\r\n- Log file: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-80560-merge-c9d00b89d4b74224bc/System.Console.Tests/1/console.f1f8f7de.log?helixlogtype=result\r\n- Stack trace:\r\n```\r\n    SetOut.SetOutReadToEnd [FAIL]\r\n      Stack Trace:\r\n        /_/src/libraries/System.Console/tests/Helpers.cs(30,0): at Helpers.SetAndReadHelper(Action`1 setHelper, Func`1 getHelper, Func`2 readHelper)\r\n        /_/src/libraries/System.Console/tests/SetOut.cs(33,0): at SetOut.SetOutReadToEnd()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(370,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUlBFrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SUEWu",
                                           "createdAt":  "2023-01-12T21:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFound in this `release/6.0` PR: https://github.com/dotnet/runtime/pull/80560 \r\n\r\n- Queue: `Libraries Test Run release mono Linux x64 Debug`\r\n- Job results: https://dev.azure.com/dnceng-public/public/_build/results?buildId=135481\u0026view=logs\u0026j=b4344b0d-0f92-5d69-ccaf-e0b24fbf14a2\u0026t=65a58faa-a542-5344-b5c8-897139f242cd\r\n- Log file: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-80560-merge-c9d00b89d4b74224bc/System.Console.Tests/1/console.f1f8f7de.log?helixlogtype=result\r\n- Stack trace:\r\n```\r\n    SetOut.SetOutReadToEnd [FAIL]\r\n      Stack Trace:\r\n        /_/src/libraries/System.Console/tests/Helpers.cs(30,0): at Helpers.SetAndReadHelper(Action`1 setHelper, Func`1 getHelper, Func`2 readHelper)\r\n        /_/src/libraries/System.Console/tests/SetOut.cs(33,0): at SetOut.SetOutReadToEnd()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(370,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecarlossanlop\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `os-linux`, `arch-x64`, `test-failure`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-12T21:05:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[6.0] Mono Linux CI failure: System.Console SetOut.SetOutReadToEnd",
        "labels":  [
                       "test-failure",
                       "area-System.Console",
                       "os-linux",
                       "arch-x64",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80644",
        "createdAt":  "2023-01-14T01:00:13Z",
        "number":  80644,
        "author":  "ericwj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC21D4w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2023-01-14T03:14:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidly",
                                            "createdAt":  "2024-03-27T17:52:33Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-11-30T16:31:03Z",
        "body":  "### Description\r\n\r\nThe following character is erroneously interpreted as the escape character U+001B:\r\n\r\n← Leftwards Arrow\r\nU+2190\r\n\r\nHence instead of seeing a left arrow in the console as expected, I can write ANSI escapes only using this non-control-character. But the obvious downside is that I cannot show the left arrow character in the console.\r\n\r\n#### More generally\r\nThus instead of printing the IBM-437 graphemes for the Unicode code points listed below, these code points are interpreted as the C0 control characters 1-31.\r\n\r\nBy typing `Alt+1`..`Alt+31` I am able to produce the IBM-437 graphemes used in DOS for control characters if you would write the bytes 1-31 to the video memory directly:\r\n`☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ `\r\n\r\nWhich GitHub apparently is able to show very colorfully:\r\n\r\n☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\r\n\r\nThese are however the following Unicode code points (from 1 to 31):\r\n```\r\n       \\u263a \\u263b \\u2665 \\u2666 \\u2663 \\u2660 \\u2022 \\u25d8 \\u25cb \\u25d9 \\u2642 \\u2640 \\u266a \\u266b \\u263c\r\n\\u25ba \\u25c4 \\u2195 \\u203c \\u00b6 \\u00a7 \\u25ac \\u21a8 \\u2191 \\u2193 \\u2192 \\u2190 \\u221f \\u2194 \\u25b2 \\u25bc\r\n```\r\n\r\nThose between `Alt+7` and `Alt+15` and `Alt+27` don\u0027t show correctly.\r\n\r\nThese correspond to `\\a\\b\\t\\n\\v\\f\\r` (`\\u0007`-`\\u000d`) and escape (`\\u001b`). The other two are `\\u000e` (`SI` Shift In) and `\\u000f` (`SO` Shift Out).\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nConsole.Title = \"ANSI but not ANSI\";\r\nvar s = \"\\u2190\";\r\nvar m = $\"\\\\u{(int)s[0]:x4}: {s}[9mSTRIKETHROUGH???{s}[29m\";\r\nvar h = (int)m[8];\r\nConsole.WriteLine($\"0x{h:x4}\");\r\nConsole.WriteLine(m);\r\ns = \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\";\r\nfor (var i = 0; i \u003c s.Length; i++)\r\n    Console.WriteLine($\"{i + 1:x2}: \\\\u{(int)s[i]:x4} {s[i]}←[0m\");\r\n```\r\n\r\n### Actual behavior\r\n\r\n\u003cimg width=\"347\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212438951-c6a7ae2d-2579-4621-a54a-d6ea29a051ac.png\"\u003e\r\n\u003cimg width=\"347\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212442174-6c80c777-ea9b-4abe-92ce-598a40ad85e5.png\"\u003e\r\n\r\n### Expected behavior\r\n\r\n```PS\r\nPS C:\\\u003e\r\n\u003e\u003e $s = [string][char]0x2190\r\n\u003e\u003e $m = \"\\u{0:x4}: {1}[9mSTRIKETHROUGH???{1}[29m\" -f @([int]$s[0], $s)\r\n\u003e\u003e $h = [int]$m[8]\r\n\u003e\u003e Write-Host (\"0x{0:x4}\" -f $h)\r\n\u003e\u003e Write-Host $m\r\n0x2190\r\n\\u2190: ←[9mSTRIKETHROUGH???←[29m\r\nPS C:\\\u003e Write-Host \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\"\r\n☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\r\nPS C:\\\u003e [System.IO.File]::WriteAllText(\"C:\\test.txt\", \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\", [System.Text.Encoding]::Unicode)\r\n```\r\n\u003cimg width=\"288\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212444225-d2b48522-bf44-42a8-a205-7d393a51e7ee.png\"\u003e\r\n\r\n### Regression?\r\n\r\nI have seen this a few years before when source generators were new and on my old computer with Windows 10 at that time.\r\n\r\n### Known Workarounds\r\n\r\nNope, I think I am stuck with just ↑↓→ as far as those arrows are concerned.\r\n\r\n### Configuration\r\n\r\nWindows Terminal 1.15.3466.0\r\nWindows 11\r\n10.0.22621.1105\r\n```\r\nPSVersion 7.3.1\r\n\r\n.NET SDK:\r\n Version:   7.0.101\r\n Commit:    bb24aafa11\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.101\\\r\n\r\nHost:\r\n  Version:      7.0.1\r\n  Architecture: x64\r\n  Commit:       97203d38ba\r\n```\r\n\r\n### Other information\r\n\r\nCould argue it is translating the Unicode to a single-byte code page, but then I seriously don\u0027t get why I get ANSI VT processing without doing anything. If anyone would have called the appropriate API\u0027s to enable VT processing by default, why hadn\u0027t it also enabling Unicode? AFAIK both are compat breaking changes for old console apps.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlYy3Ug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SaQ0D",
                                           "createdAt":  "2023-01-14T01:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-14T01:00:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SaXqS",
                                           "createdAt":  "2023-01-14T03:00:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe following character is erroneously interpreted as the escape character U+001B:\r\n\r\n← Leftwards Arrow\r\nU+2190\r\n\r\nHence instead of seeing a left arrow in the console as expected, I can write ANSI escapes only using this non-control-character. But the obvious downside is that I cannot show the left arrow character in the console.\r\n\r\n#### More generally\r\nThus instead of printing the IBM-437 graphemes for the Unicode code points listed below, these code points are interpreted as the C0 control characters 1-31.\r\n\r\nBy typing `Alt+1`..`Alt+31` I am able to produce the IBM-437 graphemes used in DOS for control characters if you would write the bytes 1-31 to the video memory directly:\r\n`☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ `\r\n\r\nWhich GitHub apparently is able to show very colorfully:\r\n\r\n☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\r\n\r\nThese are however the following Unicode code points (from 1 to 31):\r\n```\r\n       \\u263a \\u263b \\u2665 \\u2666 \\u2663 \\u2660 \\u2022 \\u25d8 \\u25cb \\u25d9 \\u2642 \\u2640 \\u266a \\u266b \\u263c\r\n\\u25ba \\u25c4 \\u2195 \\u203c \\u00b6 \\u00a7 \\u25ac \\u21a8 \\u2191 \\u2193 \\u2192 \\u2190 \\u221f \\u2194 \\u25b2 \\u25bc\r\n```\r\n\r\nThose between `Alt+7` and `Alt+15` and `Alt+27` don\u0027t show correctly.\r\n\r\nThese correspond to `\\a\\b\\t\\n\\v\\f\\r` (`\\u0007`-`\\u000d`) and escape (`\\u001b`). The other two are `\\u000e` (`SI` Shift In) and `\\u000f` (`SO` Shift Out).\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nConsole.Title = \"ANSI but not ANSI\";\r\nvar s = \"\\u2190\";\r\nvar m = $\"\\\\u{(int)s[0]:x4}: {s}[9mSTRIKETHROUGH???{s}[29m\";\r\nvar h = (int)m[8];\r\nConsole.WriteLine($\"0x{h:x4}\");\r\nConsole.WriteLine(m);\r\ns = \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\";\r\nfor (var i = 0; i \u003c s.Length; i++)\r\n    Console.WriteLine($\"{i + 1:x2}: \\\\u{(int)s[i]:x4} {s[i]}←[0m\");\r\n```\r\n\r\n### Actual behavior\r\n\r\n\u003cimg width=\"347\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212438951-c6a7ae2d-2579-4621-a54a-d6ea29a051ac.png\"\u003e\r\n\u003cimg width=\"347\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212442174-6c80c777-ea9b-4abe-92ce-598a40ad85e5.png\"\u003e\r\n\r\n### Expected behavior\r\n\r\n```PS\r\nPS C:\\\u003e\r\n\u003e\u003e $s = [string][char]0x2190\r\n\u003e\u003e $m = \"\\u{0:x4}: {1}[9mSTRIKETHROUGH???{1}[29m\" -f @([int]$s[0], $s)\r\n\u003e\u003e $h = [int]$m[8]\r\n\u003e\u003e Write-Host (\"0x{0:x4}\" -f $h)\r\n\u003e\u003e Write-Host $m\r\n0x2190\r\n\\u2190: ←[9mSTRIKETHROUGH???←[29m\r\nPS C:\\\u003e Write-Host \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\"\r\n☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\r\nPS C:\\\u003e [System.IO.File]::WriteAllText(\"C:\\test.txt\", \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\", [System.Text.Encoding]::Unicode)\r\n```\r\n\u003cimg width=\"288\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9473119/212444225-d2b48522-bf44-42a8-a205-7d393a51e7ee.png\"\u003e\r\n\r\n### Regression?\r\n\r\nI have seen this a few years before when source generators were new and on my old computer with Windows 10 at that time.\r\n\r\n### Known Workarounds\r\n\r\nNope, I think I am stuck with just ↑↓→ as far as those arrows are concerned.\r\n\r\n### Configuration\r\n\r\nWindows Terminal 1.15.3466.0\r\nWindows 11\r\n10.0.22621.1105\r\n```\r\nPSVersion 7.3.1\r\n\r\n.NET SDK:\r\n Version:   7.0.101\r\n Commit:    bb24aafa11\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.101\\\r\n\r\nHost:\r\n  Version:      7.0.1\r\n  Architecture: x64\r\n  Commit:       97203d38ba\r\n```\r\n\r\n### Other information\r\n\r\nCould argue it is translating the Unicode to a single-byte code page, but then I seriously don\u0027t get why I get ANSI VT processing without doing anything. If anyone would have called the appropriate API\u0027s to enable VT processing by default, why hadn\u0027t it also enabling Unicode? AFAIK both are compat breaking changes for old console apps.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericwj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-14T03:00:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54mwqV",
                                           "createdAt":  "2024-03-27T17:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidly",
                                           "body":  "I really hope this gets fixed. The current behavior is broken.",
                                           "updatedAt":  "2024-03-27T17:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58NdA_",
                                           "createdAt":  "2024-04-30T00:05:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcrben",
                                           "body":  "Maybe this could fix https://github.com/PowerShell/PSReadLine/issues/105 ?\r\n\r\nI\u0027ve got a Dell Latitude 5420 around here which prints nothing if when I run `[Console]::ReadKey()` and then hit `alt+left` or `alt+right`",
                                           "updatedAt":  "2024-04-30T00:05:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VbBqR",
                                           "createdAt":  "2024-11-29T00:38:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yan12125",
                                           "body":  "\u003e Maybe this could fix [PowerShell/PSReadLine#105](https://github.com/PowerShell/PSReadLine/issues/105) ?\n\u003e \n\nProbably not. Console.ReadKey was not mentioned in this issue.",
                                           "updatedAt":  "2024-11-29T00:38:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VjLdS",
                                           "createdAt":  "2024-11-30T16:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericwj",
                                           "body":  "Regression. Now all of them are entirely broken.\nWindows 10.0.22631.4541\nTerminal 1.21.3231.0\nPowerShell 7.4.6\n.NET SDK 9.0.100 59db016f11\n.NET 9.0.0 x64 9d5a6a9aa4\n![Image](https://github.com/user-attachments/assets/3bf74168-df96-4ea5-b6ac-eb513d65e19d)\n\nStill a .NET issue.\n```PS\n$s = [string][char]0x2190\n$m = \"\\u{0:x4}: {1}[9mSTRIKETHROUGH???{1}[29m\" -f @([int]$s[0], $s)\n$h = [int]$m[8]\nWrite-Host (\"0x{0:x4}\" -f $h)\nWrite-Host $m\nWrite-Host \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\"\n[System.IO.File]::WriteAllText(\"test.txt\", \"☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼\", [System.Text.Encoding]::Unicode)\ntype test.txt\n```\n![Image](https://github.com/user-attachments/assets/2aa52bd0-0a26-45d5-9f55-d89e21b1b7ab)\n",
                                           "updatedAt":  "2024-11-30T16:31:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Various non-control characters are interpreted as control characters by the console.",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80695",
        "createdAt":  "2023-01-16T13:33:39Z",
        "number":  80695,
        "author":  "BDisp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvVjVQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neogamezzz",
                                            "createdAt":  "2023-04-06T20:43:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-14T07:13:22Z",
        "body":  "### Description\n\nI\u0027m having the follow error when I resize the console height to zero or almost zero and pointing the mouse to the available console space:\r\n\r\n`System.InvalidOperationException: \u0027Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\u0027`\r\n\r\nThis is happening on `Windows` and `WSL` using `cmd`, `pwsh` and `conhost`. As I\u0027m reading escape sequences from `Console.ReadKey (true)` in a console with a height equal to zero causes the `System.Console.dll` crash. The problem is I can\u0027t force resizing the console. Do I still need to using for Windows the Win32 API Console by enabling `ENABLE_VIRTUAL_TERMINAL_PROCESSING` to be able to use escape sequences or does` System.Console` allows that feature? Another question is many escape sequences request are not available in `Windows` and `WSL`, is there any configuration I can use or is a limitation?\n\n### Reproduction Steps\n\nTo test this issue please clone the https://github.com/gui-cs/Terminal.Gui repo and run the `UICatalog` project with the argument `-usc`, which will use the `NetDriver` using the `System.Console`. Thanks.\n\n### Expected behavior\n\nI expected the console doesn\u0027t crash if height is equal or almost equal to zero. With almost zero I mean when the height is less than one and greater than zero. If it can\u0027t read with this size then it must check first for its size and not try to read any keystroke or mouse movements.\n\n### Actual behavior\n\nThe console really crash and disappear from the desktop, causing the errors already mentioned and others like pipe error.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nNet6.0, Net7.0\r\nOS: Windows 11 Pro Version: 22H2 Compilation: 22621.1105\r\nArchitecture: x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY1EDwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Sgvbt",
                                           "createdAt":  "2023-01-16T16:48:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m having the follow error when I resize the console height to zero or almost zero and pointing the mouse to the available console space:\r\n\r\n`System.InvalidOperationException: \u0027Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\u0027`\r\n\r\nThis is happening on `Windows` and `WSL` using `cmd`, `pwsh` and `conhost`. As I\u0027m reading escape sequences from `Console.ReadKey (true)` in a console with a height equal to zero causes the `System.Console.dll` crash. The problem is I can\u0027t force resizing the console. Do I still need to using for Windows the Win32 API Console by enabling `ENABLE_VIRTUAL_TERMINAL_PROCESSING` to be able to use escape sequences or does` System.Console` allows that feature? Another question is many escape sequences request are not available in `Windows` and `WSL`, is there any configuration I can use or is a limitation?\n\n### Reproduction Steps\n\nTo test this issue please clone the https://github.com/gui-cs/Terminal.Gui repo and run the `UICatalog` project with the argument `-usc`, which will use the `NetDriver` using the `System.Console`. Thanks.\n\n### Expected behavior\n\nI expected the console doesn\u0027t crash if height is equal or almost equal to zero. With almost zero I mean when the height is less than one and greater than zero. If it can\u0027t read with this size then it must check first for its size and not try to read any keystroke or mouse movements.\n\n### Actual behavior\n\nThe console really crash and disappear from the desktop, causing the errors already mentioned and others like pipe error.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nNet6.0, Net7.0\r\nOS: Windows 11 Pro Version: 22H2 Compilation: 22621.1105\r\nArchitecture: x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBDisp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-16T16:48:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SoKDE",
                                           "createdAt":  "2023-01-18T00:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "I think I discover the cause of this error when resizing the height to 0. I also submitted a PR https://github.com/gui-cs/Terminal.Gui/pull/2294, after I found what was causing an error on `WindowsDriver` when resizing to zero when the console has no buffer, that is, if the buffer size is equal to window size. The workaround was forcing the minimum window height to 1. The `WindowsDriver` is using two output handles, `OutputHandle` representing the original output and the `ScreenBuffer` which will call `CreateConsoleScreenBuffer` and `SetConsoleActiveScreenBuffer`. Only the `OutputHandle` can be set a height to 0 and the `ScreenBuffer` must have a minimum height of 1, even in the case where we don\u0027t want use buffer. The API has a flag called `HeightAsBuffer` which if it\u0027s true the maximum buffer height will be used, if it\u0027s false the buffer size will be equal to window size, but we have to be careful to setting the buffer height to 1 if window height is 0.\r\nDo the `System.Console` must having similar approach?",
                                           "updatedAt":  "2023-01-18T11:45:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SsLGX",
                                           "createdAt":  "2023-01-18T16:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m having the follow error when I resize the console height to zero or almost zero and pointing the mouse to the available console space:\r\n\r\n`System.InvalidOperationException: \u0027Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.\u0027`\r\n\r\nThis is happening on `Windows` and `WSL` using `cmd`, `pwsh` and `conhost`. As I\u0027m reading escape sequences from `Console.ReadKey (true)` in a console with a height equal to zero causes the `System.Console.dll` crash. The problem is I can\u0027t force resizing the console. Do I still need to using for Windows the Win32 API Console by enabling `ENABLE_VIRTUAL_TERMINAL_PROCESSING` to be able to use escape sequences or does` System.Console` allows that feature? Another question is many escape sequences request are not available in `Windows` and `WSL`, is there any configuration I can use or is a limitation?\n\n### Reproduction Steps\n\nTo test this issue please clone the https://github.com/gui-cs/Terminal.Gui repo and run the `UICatalog` project with the argument `-usc`, which will use the `NetDriver` using the `System.Console`. Thanks.\n\n### Expected behavior\n\nI expected the console doesn\u0027t crash if height is equal or almost equal to zero. With almost zero I mean when the height is less than one and greater than zero. If it can\u0027t read with this size then it must check first for its size and not try to read any keystroke or mouse movements.\n\n### Actual behavior\n\nThe console really crash and disappear from the desktop, causing the errors already mentioned and others like pipe error.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nNet6.0, Net7.0\r\nOS: Windows 11 Pro Version: 22H2 Compilation: 22621.1105\r\nArchitecture: x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBDisp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-18T16:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i9Tfu",
                                           "createdAt":  "2023-08-01T12:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCwRZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2023-08-04T22:54:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e when I resize the console height to zero or almost zero\r\n\r\nCurrently this scenario is not supported, as `Console.WindowHeight` throws an exception for `0` and accepts only integers:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bd84336e095a882d2794dd08b64814918a010004/src/libraries/System.Console/src/System/Console.cs#L419-L429\r\n\r\n\u003e Cannot read keys when either application does not have a console or when console input has been redirected\r\n\r\nCould you provide full stack trace? This error most likely comes from native windows sys-call, but we need to verify that to be 100% sure that it\u0027s by design and caused by the OS.\r\n\r\n",
                                           "updatedAt":  "2023-08-01T12:43:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jUQPB",
                                           "createdAt":  "2023-08-04T22:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BDisp",
                                           "body":  "Thanks for your feedback. Actually on `Windows 11` I only having issue running `ncurses` on `wsl.exe` when I resize the height to 0. I know it\u0027s not possible but it\u0027s ncurses that handles it\u0027s size and not me. I only I\u0027m resizing with mouse. Maybe some control to the `System.Console` avoiding have a height of 0.\r\nThis is the output:\r\n\r\n```\r\nThe target process exited without raising a CoreCLR started event. Ensure that the target process is configured to use .NET Core. This may be expected if the target process did not run on .NET Core.\r\nThe program \u0027[8212] wsl.exe\u0027 has exited with code 11 (0xb).\r\nThe program \u0027[500] dotnet\u0027 has exited with code 0 (0x0).\r\n\r\n```\r\n\r\nBut there many `Windows 10` users complaining about this issue with any .NET app . It seems there was a fix on `Windows 11` but not for `Windows 10`.\r\nSince now I only have `Windows 11` I can\u0027t reproduce it.",
                                           "updatedAt":  "2023-08-04T22:54:21Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "System.InvalidOperationException: \u0027Cannot read keys when either application does not have a console or when console input has been redirected. Try Console.Read.",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83146",
        "createdAt":  "2023-03-08T16:09:34Z",
        "number":  83146,
        "author":  "rougemeilland",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5oPfg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juner",
                                            "createdAt":  "2023-04-03T06:49:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2024-07-23T14:25:36Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-01T08:26:49Z",
        "body":  "### Description\n\nI made a console application by changing the foreground color with the `Console.ForegroundColor` property and outputting to the standard error output using `Console.Error.WriteLine()` etc. However, when I run the application, the foreground color may appear unchanged in the console.\n\n### Reproduction Steps\n\n1. Create a console application (eg `experiment01.exe`) that satisfies the following conditions.\r\n    1. Change the foreground color with `Console.ForegroundColor`\r\n    1. Output to the standard error output by `Console.Error.WriteLine()` etc.\r\n1. Run `experiment01.exe \u003e foo.txt` on the console (eg command prompt). (`foo.txt` is any file name)\r\n\n\n### Expected behavior\n\nMessages output to the standard error output are displayed on the console with the foreground color set by the `Console.ForegroundColor` property.\n\n### Actual behavior\n\nRegardless of the foreground color set by the `Console.ForegroundColor` property, messages output to the standard error output are displayed in the default foreground color (white? gray?) on the console.\n\n### Regression?\n\nAccording to Mark Lakata\u0027s comments on \r\n[a stack overflow post](https://stackoverflow.com/questions/10532796/setting-the-color-for-console-error-writes)\r\n, the issue was already there as of December 2012. The runtime version is unknown.\r\n\n\n### Known Workarounds\n\nI don\u0027t know how to avoid it.\n\n### Configuration\n\n+ .NET: 6.0.14 and 7.0.3\r\n+ OS: Windows 10 Pro, Ver.22H2, build 19045.2604, experience Windows Feature Experience Pack 120.2212.4190.0\r\n+ Architecture: x64\r\n\r\nNot sure if other configurations will have similar issues.\n\n### Other information\n\n# Sample program\r\n\r\n## How to use the sample program\r\n\r\n1. Build the source code described later to create an executable file (eg `experiment01.exe`).\r\n2. Execute the built program from a console such as a command prompt, specifying that the standard output should be redirected. (eg `experiment01.exe \u003e foo.txt`)\r\n\r\n## Sample source code\r\n\r\n```\r\nusing System;\r\n\r\nnamespace Experiment.ConsoleStandatdErrorWithColor.Experiment01\r\n{\r\n    /// \u003csummary\u003e\r\n    /// A test program to check the strange behavior of the Console class.\r\n    /// \u003c/summary\u003e\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            // Back up the current foreground color before changing the foreground color.\r\n            var defaultColor = Console.ForegroundColor;\r\n\r\n            // Change the foreground color to blue.\r\n            Console.ForegroundColor = ConsoleColor.Blue;\r\n\r\n            // Display with \"Console.WriteLine(string?)\".\r\n            Console.WriteLine(\"This text is expected to be displayed in blue. (to default (==stdout))\");\r\n\r\n            // Display with \"Console.Out.WriteLine(string?)\"\r\n            Console.Out.WriteLine(\"This text is expected to be displayed in blue. (to stdout)\");\r\n\r\n            // Display with \"Console.Error.WriteLine(string?)\"\r\n            Console.Error.WriteLine(\"This text is expected to be displayed in blue. (to stderr)\");\r\n\r\n            // Display the foreground color of the console.\r\n            Console.WriteLine($\"The current console foreground color is \\\"{Console.ForegroundColor}\\\" (to stdout).\");\r\n            Console.Error.WriteLine($\"The current console foreground color is \\\"{Console.ForegroundColor}\\\" (to stderr).\");\r\n\r\n            // Restore the foreground color.\r\n            Console.ForegroundColor = defaultColor;\r\n        }\r\n    }\r\n\r\n    // [Result]\r\n    // Only in case (2) below (that is, when standard output is redirected), the foreground color of characters displayed on the console is not changed.\r\n    //\r\n    // 1) If no redirect is done, the execution result will be displayed as follows:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to default (==stdout))    \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stdout)                \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stderr)                \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stdout).               \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stderr).               \u003c= displayed in blue. (OK)\r\n    //      \r\n    // 2) If the standard output is redirected to a file, the execution result will be displayed as follows.:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to stderr)                \u003c= Displayed in the default color. (NG)\r\n    //     The current console foreground color is \"Gray\" (to stderr).               \u003c= Displayed in the default color. (NG)\r\n    //      \r\n    // 3) If the standard error is redirected to a file, the execution result will be displayed as follows.:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to default (==stdout))    \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stdout)                \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stdout).               \u003c= displayed in blue. (OK)\r\n    //\r\n    // [Additional Info] \r\n    // Below is the URL of an article on \"stack overflow\".\r\n    // According to Mark Lakata\u0027s comments on this article, it appears that the issue already existed in December 2012.\r\n    // https://stackoverflow.com/questions/10532796/setting-the-color-for-console-error-writes\r\n\r\n}\r\n```\r\n\r\n# my findings\r\nI suspect it\u0027s a problem with the setter for the property `ForegroundColor` of the `System.ConsolePal` class.\r\n\r\nI have summarized the results of my consideration of this issue at the URL below, so please refer to it.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/blob/main/README.md](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/blob/main/README.md)\r\n\r\nThe URL of the project containing the above source code is as follows.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment01](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment01)\r\n\r\nFor this investigation, the program project for investigating the behavior of the Win32API used in the System.ConsolPal class can be found at the following URL.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment02](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment02)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV3vFMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XDISK",
                                           "createdAt":  "2023-03-08T16:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI made a console application by changing the foreground color with the `Console.ForegroundColor` property and outputting to the standard error output using `Console.Error.WriteLine()` etc. However, when I run the application, the foreground color may appear unchanged in the console.\n\n### Reproduction Steps\n\n1. Create a console application (eg `experiment01.exe`) that satisfies the following conditions.\r\n    1. Change the foreground color with `Console.ForegroundColor`\r\n    1. Output to the standard error output by `Console.Error.WriteLine()` etc.\r\n1. Run `experiment01.exe \u003e foo.txt` on the console (eg command prompt). (`foo.txt` is any file name)\r\n\n\n### Expected behavior\n\nMessages output to the standard error output are displayed on the console with the foreground color set by the `Console.ForegroundColor` property.\n\n### Actual behavior\n\nRegardless of the foreground color set by the `Console.ForegroundColor` property, messages output to the standard error output are displayed in the default foreground color (white? gray?) on the console.\n\n### Regression?\n\nAccording to Mark Lakata\u0027s comments on \r\n[a stack overflow post](https://stackoverflow.com/questions/10532796/setting-the-color-for-console-error-writes)\r\n, the issue was already there as of December 2012. The runtime version is unknown.\r\n\n\n### Known Workarounds\n\nI don\u0027t know how to avoid it.\n\n### Configuration\n\n+ .NET: 6.0.14 and 7.0.3\r\n+ OS: Windows 10 Pro, Ver.22H2, build 19045.2604, experience Windows Feature Experience Pack 120.2212.4190.0\r\n+ Architecture: x64\r\n\r\nNot sure if other configurations will have similar issues.\n\n### Other information\n\n# Sample program\r\n\r\n## How to use the sample program\r\n\r\n1. Build the source code described later to create an executable file (eg `experiment01.exe`).\r\n2. Execute the built program from a console such as a command prompt, specifying that the standard output should be redirected. (eg `experiment01.exe \u003e foo.txt`)\r\n\r\n## Sample source code\r\n\r\n```\r\nusing System;\r\n\r\nnamespace Experiment.ConsoleStandatdErrorWithColor.Experiment01\r\n{\r\n    /// \u003csummary\u003e\r\n    /// A test program to check the strange behavior of the Console class.\r\n    /// \u003c/summary\u003e\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            // Back up the current foreground color before changing the foreground color.\r\n            var defaultColor = Console.ForegroundColor;\r\n\r\n            // Change the foreground color to blue.\r\n            Console.ForegroundColor = ConsoleColor.Blue;\r\n\r\n            // Display with \"Console.WriteLine(string?)\".\r\n            Console.WriteLine(\"This text is expected to be displayed in blue. (to default (==stdout))\");\r\n\r\n            // Display with \"Console.Out.WriteLine(string?)\"\r\n            Console.Out.WriteLine(\"This text is expected to be displayed in blue. (to stdout)\");\r\n\r\n            // Display with \"Console.Error.WriteLine(string?)\"\r\n            Console.Error.WriteLine(\"This text is expected to be displayed in blue. (to stderr)\");\r\n\r\n            // Display the foreground color of the console.\r\n            Console.WriteLine($\"The current console foreground color is \\\"{Console.ForegroundColor}\\\" (to stdout).\");\r\n            Console.Error.WriteLine($\"The current console foreground color is \\\"{Console.ForegroundColor}\\\" (to stderr).\");\r\n\r\n            // Restore the foreground color.\r\n            Console.ForegroundColor = defaultColor;\r\n        }\r\n    }\r\n\r\n    // [Result]\r\n    // Only in case (2) below (that is, when standard output is redirected), the foreground color of characters displayed on the console is not changed.\r\n    //\r\n    // 1) If no redirect is done, the execution result will be displayed as follows:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to default (==stdout))    \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stdout)                \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stderr)                \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stdout).               \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stderr).               \u003c= displayed in blue. (OK)\r\n    //      \r\n    // 2) If the standard output is redirected to a file, the execution result will be displayed as follows.:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to stderr)                \u003c= Displayed in the default color. (NG)\r\n    //     The current console foreground color is \"Gray\" (to stderr).               \u003c= Displayed in the default color. (NG)\r\n    //      \r\n    // 3) If the standard error is redirected to a file, the execution result will be displayed as follows.:\r\n    //\r\n    //     This text is expected to be displayed in blue. (to default (==stdout))    \u003c= displayed in blue. (OK)\r\n    //     This text is expected to be displayed in blue. (to stdout)                \u003c= displayed in blue. (OK)\r\n    //     The current console foreground color is \"Blue\" (to stdout).               \u003c= displayed in blue. (OK)\r\n    //\r\n    // [Additional Info] \r\n    // Below is the URL of an article on \"stack overflow\".\r\n    // According to Mark Lakata\u0027s comments on this article, it appears that the issue already existed in December 2012.\r\n    // https://stackoverflow.com/questions/10532796/setting-the-color-for-console-error-writes\r\n\r\n}\r\n```\r\n\r\n# my findings\r\nI suspect it\u0027s a problem with the setter for the property `ForegroundColor` of the `System.ConsolePal` class.\r\n\r\nI have summarized the results of my consideration of this issue at the URL below, so please refer to it.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/blob/main/README.md](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/blob/main/README.md)\r\n\r\nThe URL of the project containing the above source code is as follows.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment01](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment01)\r\n\r\nFor this investigation, the program project for investigating the behavior of the Win32API used in the System.ConsolPal class can be found at the following URL.\r\n\r\n[https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment02](https://github.com/rougemeilland/Experiment.ConsoleStandatdErrorWithColor/tree/main/Experiment.ConsoleStandatdErrorWithColor.Experiment02)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erougemeilland\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-08T16:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xe8Uz",
                                           "createdAt":  "2023-03-14T09:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrM-PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "juner",
                                                                               "createdAt":  "2023-04-03T06:49:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2024-07-23T14:25:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rougemeilland",
                                           "body":  "I have confirmed the same issue in the following environment.\r\n+ OS: linux (Ubuntu 20.04.5 LTS, linux on Windows)\r\n+ .NET Runtime 7.0.3\r\n+ Build method: Publish on Windows (target-framework 7.0, target-runtime linux-x64, self-contained)\r\n\r\nAfter examining the source code of the UNIX version of the `System.ConsolePal` class, it appears that the output of ANSI escape codes is fixed to standard output. I think that\u0027s why I got this result.",
                                           "updatedAt":  "2023-03-14T09:31:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "The foreground color of the standard error output of console applications may not change.",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83568",
        "createdAt":  "2023-03-17T04:48:03Z",
        "number":  83568,
        "author":  "rougemeilland",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-25T10:30:44Z",
        "body":  "### Description\n\nWhen running a console application that calls `Console.Clear()` from a command prompt on Windows Terminal, the console buffer may not be completely cleared.\r\n\r\nThis is different behavior than described in [the specification of `Console.Clear()`](https://learn.microsoft.com/en-us/dotnet/api/system.console.clear?view=net-7.0#remarks).\r\n\r\nThe above specification states that the behavior is equivalent to the command prompt\u0027s `cls` command. And actually the `cls` command clears all the contents of the console buffer even in the Windows Terminal command prompt.\n\n### Reproduction Steps\n\n1. At the command prompt on Windows Terminal, and\r\n1. There are more lines of text in the console buffer than there are lines in the console window, and\r\n1. Run a console application that calls `Console.Clear()`, and\r\n1. Try scrolling the console to see previous text.\r\n\n\n### Expected behavior\n\nAll lines in the console buffer have been erased and scrolling is not possible in the first place.\n\n### Actual behavior\n\nScrolling to a previous line retains the contents of the previous line.\n\n### Regression?\n\nI don\u0027t know from which version the problem existed.\n\n### Known Workarounds\n\nI don\u0027t know how to work around this issue.\n\n### Configuration\n\n+ .NET runtime\r\n  + .NET 7.0.4\r\n  + .NET 6.0.15\r\n+ OS\r\n  + Windows 10\r\n+ Architecture \r\n  + x64\r\n+ Console\r\n  + Command prompt (on Windows terminal)\n\n### Other information\n\nBelow is a sample source code.\r\nThis program calls `Console.Clear()` after displaying 100 lines of text.\r\nAfter running this program, try to view the previous lines by scrolling the console.\r\nI was expecting none of the previous lines to remain, but in fact only some of the lines were cleared.\r\n\r\n```c#\r\nusing System;\r\n\r\nnamespace Experiment.ConsoleClearNotClearingConsoleBuffer.Experiment01\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            for (var count = 0; count \u003c 100; count++)\r\n                Console.WriteLine($\"#{count}: This line should be cleared.\");\r\n            Console.Clear();\r\n            Console.WriteLine(\"Check if all lines have been deleted by manipulating the console scroll bar.\");\r\n            Console.WriteLine(\"And compare it with the result of running the cls command.\");\r\n        }\r\n    }\r\n}\r\n```\r\nI have tried the following:\r\n+ When I ran this sample program from the Windows command prompt, it cleared all the text in the console buffer.\r\n+ When I ran this sample program from a command prompt on Windows Terminal, the console buffer was not completely cleared. When I scrolled through the console, I was left with the following text:\r\n```\r\n...\r\n#71: This line should be cleared.\r\n#72: This line should be cleared.\r\n#73: This line should be cleared.\r\n#74: This line should be cleared.\r\nCheck if all lines have been deleted by manipulating the console scroll bar.\r\nAnd compare it with the result of running the cls command.\r\n\r\nC:\\\u003e\r\n```\r\n+ After that, when I ran the `cls` command in the Windows Terminal Command Prompt, all the text in the console buffer was cleared. Of course this is the expected behavior.\r\n+ When I ran this sample program in ubuntu in windows terminal (with linux on Windows), it did not clear the console buffer at all as shown below. Instead the console was forced to scroll to a new line. As a result, the console screen appeared to be cleared.\r\n```\r\n...\r\n#95: This line should be cleared.\r\n#96: This line should be cleared.\r\n#97: This line should be cleared.\r\n#98: This line should be cleared.\r\n#99: This line should be cleared.\r\nCheck if all lines have been deleted by manipulating the console scroll bar.\r\nAnd compare it with the result of running the cls command.\r\nrougemeilland@ROUGEMEILLAND:~$\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXSRs9w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Xzhow",
                                           "createdAt":  "2023-03-17T04:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen running a console application that calls `Console.Clear()` from a command prompt on Windows Terminal, the console buffer may not be completely cleared.\r\n\r\nThis is different behavior than described in [the specification of `Console.Clear()`](https://learn.microsoft.com/en-us/dotnet/api/system.console.clear?view=net-7.0#remarks).\r\n\r\nThe above specification states that the behavior is equivalent to the command prompt\u0027s `cls` command. And actually the `cls` command clears all the contents of the console buffer even in the Windows Terminal command prompt.\n\n### Reproduction Steps\n\n1. At the command prompt on Windows Terminal, and\r\n1. There are more lines of text in the console buffer than there are lines in the console window, and\r\n1. Run a console application that calls `Console.Clear()`, and\r\n1. Try scrolling the console to see previous text.\r\n\n\n### Expected behavior\n\nAll lines in the console buffer have been erased and scrolling is not possible in the first place.\n\n### Actual behavior\n\nScrolling to a previous line retains the contents of the previous line.\n\n### Regression?\n\nI don\u0027t know from which version the problem existed.\n\n### Known Workarounds\n\nI don\u0027t know how to work around this issue.\n\n### Configuration\n\n+ .NET runtime\r\n  + .NET 7.0.4\r\n  + .NET 6.0.15\r\n+ OS\r\n  + Windows 10\r\n+ Architecture \r\n  + x64\r\n+ Console\r\n  + Command prompt (on Windows terminal)\n\n### Other information\n\nBelow is a sample source code.\r\nThis program calls `Console.Clear()` after displaying 100 lines of text.\r\nAfter running this program, try to view the previous lines by scrolling the console.\r\nI was expecting none of the previous lines to remain, but in fact only some of the lines were cleared.\r\n\r\n```c#\r\nusing System;\r\n\r\nnamespace Experiment.ConsoleClearNotClearingConsoleBuffer.Experiment01\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            for (var count = 0; count \u003c 100; count++)\r\n                Console.WriteLine($\"#{count}: This line should be cleared.\");\r\n            Console.Clear();\r\n            Console.WriteLine(\"Check if all lines have been deleted by manipulating the console scroll bar.\");\r\n            Console.WriteLine(\"And compare it with the result of running the cls command.\");\r\n        }\r\n    }\r\n}\r\n```\r\nI have tried the following:\r\n+ When I ran this sample program from the Windows command prompt, it cleared all the text in the console buffer.\r\n+ When I ran this sample program from a command prompt on Windows Terminal, the console buffer was not completely cleared. When I scrolled through the console, I was left with the following text:\r\n```\r\n...\r\n#71: This line should be cleared.\r\n#72: This line should be cleared.\r\n#73: This line should be cleared.\r\n#74: This line should be cleared.\r\nCheck if all lines have been deleted by manipulating the console scroll bar.\r\nAnd compare it with the result of running the cls command.\r\n\r\nC:\\\u003e\r\n```\r\n+ After that, when I ran the `cls` command in the Windows Terminal Command Prompt, all the text in the console buffer was cleared. Of course this is the expected behavior.\r\n+ When I ran this sample program in ubuntu in windows terminal (with linux on Windows), it did not clear the console buffer at all as shown below. Instead the console was forced to scroll to a new line. As a result, the console screen appeared to be cleared.\r\n```\r\n...\r\n#95: This line should be cleared.\r\n#96: This line should be cleared.\r\n#97: This line should be cleared.\r\n#98: This line should be cleared.\r\n#99: This line should be cleared.\r\nCheck if all lines have been deleted by manipulating the console scroll bar.\r\nAnd compare it with the result of running the cls command.\r\nrougemeilland@ROUGEMEILLAND:~$\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erougemeilland\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-17T04:48:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dJGz3",
                                           "createdAt":  "2023-05-25T10:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JoostKingma",
                                           "body":  "I was interested in trying to pick this up for my first contribution so I first looked into what needs to be done but I saw that System.console still uses the \"classic\" console api however the newer Virtual Terminal Sequences is recommended.\r\nQuote from [Classic Console APIs versus Virtual Terminal Sequences](https://learn.microsoft.com/en-us/windows/console/classic-vs-vt) \r\n\"_For all new and ongoing development on Windows, virtual terminal sequences are recommended as the way of interacting with the terminal. This will converge Windows command-line client applications with the style of application programming on all other platforms._\"\r\n\r\nI am not a 100% sure but I think this would be the reason of this issue since the current code is using [FillConsoleOutputCharacter function](https://learn.microsoft.com/en-us/windows/console/fillconsoleoutputcharacter) for replacing all the characters in the buffer and the changes with virtual terminal sequences included differnt interactions with the viewport and buffer the documantation of fillconsoleOutputcharcters says:\r\n\"_This document describes console platform functionality that is no longer a part of our [ecosystem roadmap](https://learn.microsoft.com/en-us/windows/console/ecosystem-roadmap). We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite future. Our preferred modern solution focuses on [virtual terminal sequences](https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences) for maximum compatibility in cross-platform scenarios. You can find more information about this design decision in our [classic console vs. virtual terminal](https://learn.microsoft.com/en-us/windows/console/classic-vs-vt) document._\"\r\n\r\nI think this change could be a little bigger than a quick fix since this might also open up possibilities of refactoring the code for more cross-platform possibilities. However I would still love to give it a shot to impliment this at least in the windows API if that\u0027s still alright with this new information?",
                                           "updatedAt":  "2023-05-25T10:30:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Console.Clear() sometimes did not clear the console buffer.",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83723",
        "createdAt":  "2023-03-21T13:11:47Z",
        "number":  83723,
        "author":  "clguiman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-18T18:47:03Z",
        "body":  "### Description\r\n\r\nThe `Console.OutputEncoding` setter takes a lock on `s_syncObject` then calls `Flush()` on the s_out and s_error streams. Those streams are `SyncTextWriter` objects which have the `MethodImpl(MethodImplOptions.Synchronized)`attribute set on their methods.\r\nIf another thread flushes the console output (e.g. `ConsoleLoggerProcessor.ProcessLogQueue`) the locks will be taken in the reverse order: `SyncTextWriter.Flush`, that ends up in `Console.Out.EnsureInitialized()` which takes the `s_syncObject` lock.\r\n\r\n### Reproduction Steps\r\n\r\nI managed to sometimes repro the issue on Linux (WSL) with .net 6.0.14. Here are the deadlocked threads:\r\n\r\nThread 0x121\r\n\u003e  \t[Deadlocked, double-click or press enter to view all thread stacks]\t\r\n \t[Waiting on lock owned by Thread 0x12F]\t\r\n \tSystem.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Flush() Line 759\tC#\r\n\u003e\tSystem.Console.dll!System.Console.OutputEncoding.set(System.Text.Encoding value) Line 147\tC#\r\n\r\nThread 0x12F\r\n\u003e  \t[Deadlocked, double-click or press enter to view all thread stacks]\t\r\n \t[Waiting on lock owned by Thread 0x121]\t\r\n \tSystem.Private.CoreLib.dll!System.Threading.Monitor.Enter(object obj, ref bool lockTaken) Line 49\tC#\r\n\u003e\tSystem.Console.dll!System.Console.get_Out.__EnsureInitialized|26_0() Line 205\tC#\r\n \tSystem.Console.dll!System.Console.Out.get() Line 199\tC#\r\n \tSystem.Console.dll!System.ConsolePal.UpdatedCachedCursorPosition(byte* bufPtr, int count, int cursorVersion) Line 1320\tC#\r\n \tSystem.Console.dll!System.ConsolePal.Write(Microsoft.Win32.SafeHandles.SafeFileHandle fd, System.ReadOnlySpan\u003cbyte\u003e buffer, bool mayChangeCursorPosition) Line 1308\tC#\r\n \tSystem.Console.dll!System.ConsolePal.UnixConsoleStream.Write(System.ReadOnlySpan\u003cbyte\u003e buffer) Line 1468\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.StreamWriter.Flush(bool flushStream, bool flushEncoder) Line 330\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.StreamWriter.Write(string value) Line 495\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Write(string value) Line 798\tC#\r\n \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.WriteMessage(Microsoft.Extensions.Logging.Console.LogMessageEntry entry) Line 58\tC#\r\n \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.ProcessLogQueue() Line 64\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Thread.StartCallback() Line 106\tC#\r\n \t[Native to Managed Transition]\t\r\n\r\n\r\n### Expected behavior\r\n\r\nThe process shouldn\u0027t deadlock when setting the output encoding.\r\n\r\n### Actual behavior\r\n\r\nThe process deadlocks.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nx64 .NET 6.0.14, Ubuntu WSL\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmBKd2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YFak5",
                                           "createdAt":  "2023-03-21T13:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe `Console.OutputEncoding` setter takes a lock on `s_syncObject` then calls `Flush()` on the s_out and s_error streams. Those streams are `SyncTextWriter` objects which have the `MethodImpl(MethodImplOptions.Synchronized)`attribute set on their methods.\r\nIf another thread flushes the console output (e.g. `ConsoleLoggerProcessor.ProcessLogQueue`) the locks will be taken in the reverse order: `SyncTextWriter.Flsuh`, that ends up in `Console.Out.EnsureInitialized()` which takes the `s_syncObject` lock.\n\n### Reproduction Steps\n\nI managed to sometimes repro the issue on Linux (WSL) with .net 6.0.14. Here are the deadlocked threads:\r\n\r\nThread 0x121\r\n\u003e  \t[Deadlocked, double-click or press enter to view all thread stacks]\t\r\n \t[Waiting on lock owned by Thread 0x12F]\t\r\n \tSystem.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Flush() Line 759\tC#\r\n\u003e\tSystem.Console.dll!System.Console.OutputEncoding.set(System.Text.Encoding value) Line 147\tC#\r\n\r\nThread 0x12F\r\n\u003e  \t[Deadlocked, double-click or press enter to view all thread stacks]\t\r\n \t[Waiting on lock owned by Thread 0x121]\t\r\n \tSystem.Private.CoreLib.dll!System.Threading.Monitor.Enter(object obj, ref bool lockTaken) Line 49\tC#\r\n\u003e\tSystem.Console.dll!System.Console.get_Out.__EnsureInitialized|26_0() Line 205\tC#\r\n \tSystem.Console.dll!System.Console.Out.get() Line 199\tC#\r\n \tSystem.Console.dll!System.ConsolePal.UpdatedCachedCursorPosition(byte* bufPtr, int count, int cursorVersion) Line 1320\tC#\r\n \tSystem.Console.dll!System.ConsolePal.Write(Microsoft.Win32.SafeHandles.SafeFileHandle fd, System.ReadOnlySpan\u003cbyte\u003e buffer, bool mayChangeCursorPosition) Line 1308\tC#\r\n \tSystem.Console.dll!System.ConsolePal.UnixConsoleStream.Write(System.ReadOnlySpan\u003cbyte\u003e buffer) Line 1468\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.StreamWriter.Flush(bool flushStream, bool flushEncoder) Line 330\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.StreamWriter.Write(string value) Line 495\tC#\r\n \tSystem.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Write(string value) Line 798\tC#\r\n \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.WriteMessage(Microsoft.Extensions.Logging.Console.LogMessageEntry entry) Line 58\tC#\r\n \tMicrosoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.ProcessLogQueue() Line 64\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Thread.StartCallback() Line 106\tC#\r\n \t[Native to Managed Transition]\t\r\n\n\n### Expected behavior\n\nThe process shouldn\u0027t deadlock when setting the output encoding.\n\n### Actual behavior\n\nThe process deadlocks.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nx64 .NET 6.0.14, Ubuntu WSL\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eclguiman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-21T13:11:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YGfDE",
                                           "createdAt":  "2023-03-21T15:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is this a regression?",
                                           "updatedAt":  "2023-03-21T15:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YHMMN",
                                           "createdAt":  "2023-03-21T17:07:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clguiman",
                                           "body":  "The issue doesn\u0027t reproduce always so I didn\u0027t spend time trying it on net5.",
                                           "updatedAt":  "2023-03-21T17:07:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YEp3Y",
                                           "createdAt":  "2024-12-18T13:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jijjijj",
                                           "body":  "\u003e ### Description\n\u003e The `Console.OutputEncoding` setter takes a lock on `s_syncObject` then calls `Flush()` on the s_out and s_error streams. Those streams are `SyncTextWriter` objects which have the `MethodImpl(MethodImplOptions.Synchronized)`attribute set on their methods. If another thread flushes the console output (e.g. `ConsoleLoggerProcessor.ProcessLogQueue`) the locks will be taken in the reverse order: `SyncTextWriter.Flush`, that ends up in `Console.Out.EnsureInitialized()` which takes the `s_syncObject` lock.\n\u003e \n\u003e ### Reproduction Steps\n\u003e I managed to sometimes repro the issue on Linux (WSL) with .net 6.0.14. Here are the deadlocked threads:\n\u003e \n\u003e Thread 0x121\n\u003e \n\u003e \u003e [Deadlocked, double-click or press enter to view all thread stacks]\n\u003e \u003e [Waiting on lock owned by Thread 0x12F]\n\u003e \u003e System.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Flush() Line 759\tC#\n\u003e \u003e System.Console.dll!System.Console.OutputEncoding.set(System.Text.Encoding value) Line 147\tC#\n\u003e \n\u003e Thread 0x12F\n\u003e \n\u003e \u003e [Deadlocked, double-click or press enter to view all thread stacks]\n\u003e \u003e [Waiting on lock owned by Thread 0x121]\n\u003e \u003e System.Private.CoreLib.dll!System.Threading.Monitor.Enter(object obj, ref bool lockTaken) Line 49\tC#\n\u003e \u003e System.Console.dll!System.Console.get_Out.__EnsureInitialized|26_0() Line 205\tC#\n\u003e \u003e System.Console.dll!System.Console.Out.get() Line 199\tC#\n\u003e \u003e System.Console.dll!System.ConsolePal.UpdatedCachedCursorPosition(byte* bufPtr, int count, int cursorVersion) Line 1320\tC#\n\u003e \u003e System.Console.dll!System.ConsolePal.Write(Microsoft.Win32.SafeHandles.SafeFileHandle fd, System.ReadOnlySpan buffer, bool mayChangeCursorPosition) Line 1308\tC#\n\u003e \u003e System.Console.dll!System.ConsolePal.UnixConsoleStream.Write(System.ReadOnlySpan buffer) Line 1468\tC#\n\u003e \u003e System.Private.CoreLib.dll!System.IO.StreamWriter.Flush(bool flushStream, bool flushEncoder) Line 330\tC#\n\u003e \u003e System.Private.CoreLib.dll!System.IO.StreamWriter.Write(string value) Line 495\tC#\n\u003e \u003e System.Private.CoreLib.dll!System.IO.TextWriter.SyncTextWriter.Write(string value) Line 798\tC#\n\u003e \u003e Microsoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.WriteMessage(Microsoft.Extensions.Logging.Console.LogMessageEntry entry) Line 58\tC#\n\u003e \u003e Microsoft.Extensions.Logging.Console.dll!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.ProcessLogQueue() Line 64\tC#\n\u003e \u003e System.Private.CoreLib.dll!System.Threading.Thread.StartCallback() Line 106\tC#\n\u003e \u003e [Native to Managed Transition]\n\u003e \n\u003e ### Expected behavior\n\u003e The process shouldn\u0027t deadlock when setting the output encoding.\n\u003e \n\u003e ### Actual behavior\n\u003e The process deadlocks.\n\u003e \n\u003e ### Regression?\n\u003e _No response_\n\u003e \n\u003e ### Known Workarounds\n\u003e _No response_\n\u003e \n\u003e ### Configuration\n\u003e x64 .NET 6.0.14, Ubuntu WSL\n\u003e \n\u003e ### Other information\n\u003e _No response_\n\nHi, I\u0027m curious about the software you used to get thread callstacks. Was it WinDbg? If so, did you use any extensions/plugins?\n\nUPD: it\u0027s probably Visual Studio\u0027s built-in reader of .DMP files ",
                                           "updatedAt":  "2024-12-18T18:47:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Deadlock in the Console.OutputEncoding setter",
        "labels":  [
                       "area-System.Console",
                       "os-linux",
                       "os-mac-os-x",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84691",
        "createdAt":  "2023-04-12T14:34:52Z",
        "number":  84691,
        "author":  "jhudsoncedaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-10T15:14:07Z",
        "body":  "Changing console output is a very good idea. In fact, it\u0027s such a good idea that I did it myself in one place already where it got me out of a jam.\r\n\r\nThe main problem is predictability. When launched with stdout connected to a pipe; what\u0027s the result? Hard to guess.\r\n\r\nThe pre-existing code I have looks like this:\r\n\r\n````\r\n            if (Platform.Type == PlatformType.Windows)\r\n            {\r\n                // .NET CORE doesn\u0027t understand that it might be running under a psuedo-UNIX caller that uses UTF-8. We check for it the obvious way.\r\n                // Our own installer deliberately trips this so that it can deal with SQL servers with different locales set.\r\n                var lcall = Environment.GetEnvironmentVariable(\"LC_ALL\");\r\n                if (lcall != null \u0026\u0026 lcall.Contains(\".UTF-8\")) Console.OutputEncoding = new System.Text.UTF8Encoding(false, false);\r\n            }\r\n````\r\n\r\nwhere `Platform.Type` is a local wrapper around the the .NET Core 1 way of getting the operating system type.\r\n\r\nIn my opinion this is more than a little bit kludge; but the fundamental problem is how to set the pipe encoding to UTF-8 without setting the language. I\u0027d rather inherit the language from the user session settings, but I need to set the output stream to something consistent, and the only consistent thing that works is UTF-8 for numerous reasons.\r\n\r\nPossible solution: change the behavior of `DOTNET_CLI_FORCE_UTF8_ENCODING=` from \u0027use UTF-8 on older versions of Windows when non-English\u0027 (which is what https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/console-encoding-fix seems to be saying) to use \u0027UTF-8\u0027.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOndpGGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZutTV",
                                           "createdAt":  "2023-04-12T14:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nChanging console output is a very good idea. In fact, it\u0027s such a good idea that I did it myself in one place already where it got me out of a jam.\r\n\r\nThe main problem is predictability. When launched with stdout connected to a pipe; what\u0027s the result? Hard to guess.\r\n\r\nThe pre-existing code I have looks like this:\r\n\r\n````\r\n            if (Platform.Type == PlatformType.Windows)\r\n            {\r\n                // .NET CORE doesn\u0027t understand that it might be running under a psuedo-UNIX caller that uses UTF-8. We check for it the obvious way.\r\n                // Our own installer deliberately trips this so that it can deal with SQL servers with different locales set.\r\n                var lcall = Environment.GetEnvironmentVariable(\"LC_ALL\");\r\n                if (lcall != null \u0026\u0026 lcall.Contains(\".UTF-8\")) Console.OutputEncoding = new System.Text.UTF8Encoding(false, false);\r\n            }\r\n````\r\n\r\nwhere `Platform.Type` is a local wrapper around the the .NET Core 1 way of getting the operating system type.\r\n\r\nIn my opinion this is more than a little bit kludge; but the fundamental problem is how to set the pipe encoding to UTF-8 without setting the language. I\u0027d rather inherit the language from the user session settings, but I need to set the output stream to something consistent, and the only consistent thing that works is UTF-8 for numerous reasons.\r\n\r\nPossible solution: change the behavior of `DOTNET_CLI_FORCE_UTF8_ENCODING=` from \u0027use UTF-8 on older versions of Windows when non-English\u0027 (which is what https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/console-encoding-fix seems to be saying) to use \u0027UTF-8\u0027.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejhudsoncedaron\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-12T14:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt5Tw",
                                           "createdAt":  "2025-02-09T03:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks for writing this up, @jhudsoncedaron. I understand it\u0027s been sitting a long time, but I don\u0027t think this issue is actionable as is. It would be helpful to have a repro app and description of how to set it up to exhibit undesired behavior. From there, we would need help researching the various terminal behaviors to ensure the proposed change could have the desired effect.",
                                           "updatedAt":  "2025-02-09T03:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6du43_",
                                           "createdAt":  "2025-02-09T13:56:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @adamsitnik to track this.",
                                           "updatedAt":  "2025-02-09T13:56:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d2kYb",
                                           "createdAt":  "2025-02-10T15:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jeffhandley : Repro app\n\n```\nConsole.WriteLine(\"𝄞\");\n```\n\nThe problem happens when send the output down a pipeline; the pipe\u0027s encoding is not set.\n\nLast paragraph has a plausible solution.",
                                           "updatedAt":  "2025-02-10T15:13:50Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  ".NET 8 CLI console output uses UTF-8 feature is incomplete",
        "labels":  [
                       "area-System.Console",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84808",
        "createdAt":  "2023-04-13T22:27:42Z",
        "number":  84808,
        "author":  "mklement0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-09T18:11:26Z",
        "body":  "### Description\r\n\r\nIn most terminal emulators, writing to the _last_ terminal (console) column on a given row - even if no newline is part of the string being written - automatically advances `Console.CursorTop` to the _next_ row (_Windows Terminal_ is an exception).\r\n\r\nWhile that is true on macOS - both with respect to the built-in Terminal.app application and popular third-party alternative iTerm.app - prepending a string passed to a subsequent `Console.Write()` call with `\\r` (a CR character) unexpectedly writes to the _previous_ row.\r\n\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nvar str1 = new string(\u0027x\u0027, Console.WindowWidth);\r\nvar str2 = new string(\u0027y\u0027, Console.WindowWidth);\r\n\r\nConsole.Clear();\r\n\r\nvar before =  Console.CursorTop;\r\nConsole.Write(str1);\r\nvar after = Console.CursorTop;\r\nConsole.Write(\"\\r\" + str2);\r\nConsole.WriteLine($\"CursorTop before: {before}\\nCursorTop after: {after}\");\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe all-`x` line should print first, followed by the all-`y` line.\r\n\r\nThis is how it works in `conhost.exe` console windows on Windows.\r\n\r\nWhile it works differently in Windows Terminal, it is still _consistent_: there, the `.CursorTop` value doesn\u0027t change.\r\n\r\n\r\n### Actual behavior\r\n\r\nOnly the all-`y` line prints, because it _overwrote_ the all-`x` line\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET Runtime  7.0.5 on an M1 Mac running macOS 13.2.1 (Ventura)\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWd12Cw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Z3XYL",
                                           "createdAt":  "2023-04-13T22:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIn most terminal emulators, writing to the _last_ terminal (console) column on a given row - even if no newline is part of the string being written - automatically advances `Console.CursorTop` to the _next_ row (_Windows Terminal_ is an exception).\r\n\r\nWhile that is true on macOS - both with respect to the built-in Terminal.app application and popular third-party alternative iTerm.app - prepending a string passed to a subsequent `Console.Write()` call with `\\r` (a CR character) unexpectedly writes to the _previous_ row.\r\n\r\n\r\n\n\n### Reproduction Steps\n\nvar str1 = new string(\u0027x\u0027, Console.WindowWidth);\r\nvar str2 = new string(\u0027y\u0027, Console.WindowWidth);\r\n\r\nConsole.Clear();\r\n\r\nvar before =  Console.CursorTop;\r\nConsole.Write(str1);\r\nvar after = Console.CursorTop;\r\nConsole.Write(\"\\r\" + str2);\r\nConsole.WriteLine($\"CursorTop before: {before}\\nCursorTop after: {after}\");\r\n\n\n### Expected behavior\n\nThe all-`x` line should print first, followed by the all-`y` line.\r\n\r\nThis is how it works in `conhost.exe` console windows on Windows.\r\n\r\nWhile it works differently in Windows Terminal, it is still _consistent_: there, the `.CursorTop` value doesn\u0027t change.\r\n\n\n### Actual behavior\n\nOnly the all-`y` line prints, because it _overwrote_ the all-`x` line\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET Runtime  7.0.5 on an M1 Mac running macOS 13.2.1 (Ventura)\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emklement0\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-13T22:27:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "macOS: Using `\\r` at the start of a string passed to  `Console.Write()` call allows writing to the row *above* the one indicated as current by `Console.CursorTop`",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89694",
        "createdAt":  "2023-07-30T15:58:42Z",
        "number":  89694,
        "author":  "GaryAtlan82",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7Hf0A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gaberiel44",
                                            "createdAt":  "2023-08-01T15:47:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kilasuit",
                                            "createdAt":  "2023-08-02T00:39:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pyorot",
                                            "createdAt":  "2024-09-18T16:57:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-01-19T12:08:04Z",
        "body":  "I am not a programmer nor a technically minded person,  please pardon me.\r\n\r\nCurrently as it stands, in PowerShell its not possible to perform standard everyday mouse operations on a **command currently being typed**, just as one is able to do so in a standard windows text box: \r\n![](https://camo.githubusercontent.com/16d9f413151dbee31377d0474b25ed0612389f3f2aef3515469b84f872d9bd9c/68747470733a2f2f692e696d6775722e636f6d2f3276417a6d58572e676966)\r\n\r\nI believe its possible to do this sort of thing in other environments such as:\r\n- Msys2\r\n- Cygwin\r\n- Wsl on Mintty\r\n- WSL on Windows Terminal\r\n- etc\r\n\r\nMicrosoft seems to be pushing for a revitalised Command Line experience with Windows Terminal/PowerShell Core, for the every day PC user not just for the programmer. I would say mouse interaction is at the core of this.\r\n\r\n\r\nThe windows Terminal team have expressed they want to do this and are currently working on their implementation that rellies on emulating keyboard keys such as `Left`, `Right`, [Issue #8573](https://github.com/microsoft/terminal/issues/8573). It seems their implantation will be highly limited.\r\n\r\nThe PowerShell/PsReadLine team are also open to implementing mouse interaction, [Issue #1982](https://github.com/PowerShell/PSReadLine/issues/1982),  but they are lacking the necessary facilities to do so in the **.NET**  engine.\r\n\r\nCan we please consider having the necessary features in **.NET** so that mouse interaction is available as a first class feature in PowerShell Core?\r\n\r\nTo learn more about this request please take a look at the following pages:\r\n- [Allow mouse clicks to reposition cursor by emitting cursor key sequences · Issue #8573 · microsoft/terminal · GitHub](https://github.com/microsoft/terminal/issues/8573)\r\n- [Feature Request: Add mouse events to PowerShell Engine · Issue #1982 · PowerShell/PSReadLine · GitHub](https://github.com/PowerShell/PSReadLine/issues/1982)\r\n\r\n\r\nThanks allot.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmwWMXg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ix2Rb",
                                           "createdAt":  "2023-07-30T18:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am not a programmer nor a technically minded person,  please pardon me.\r\n\r\nCurrently as it stands, in PowerShell its not possible to perform standard everyday mouse operations on a **command currently being typed**, just as one is able to do so in a standard windows text box: \r\n![](https://camo.githubusercontent.com/16d9f413151dbee31377d0474b25ed0612389f3f2aef3515469b84f872d9bd9c/68747470733a2f2f692e696d6775722e636f6d2f3276417a6d58572e676966)\r\n\r\nI believe its possible to do this sort of thing in other environments such as:\r\n- Msys2\r\n- Cygwin\r\n- Wsl on Mintty\r\n- WSL on Windows Terminal\r\n- etc\r\n\r\nMicrosoft seems to be pushing for a revitalised Command Line experience with Windows Terminal/PowerShell Core, for the every day PC user not just for the programmer. I would say mouse interaction is at the core of this.\r\n\r\n\r\nThe windows Terminal team have expressed they want to do this and are currently working on their implementation that rellies on emulating keyboard keys such as `Left`, `Right`, [Issue #8573](https://github.com/microsoft/terminal/issues/8573). It seems their implantation will be highly limited.\r\n\r\nThe PowerShell/PsReadLine team are also open to implementing mouse interaction, [Issue #1982](https://github.com/PowerShell/PSReadLine/issues/1982),  but they are lacking the necessary facilities to do so in the **.NET**  engine.\r\n\r\nCan we please consider having the necessary features in **.NET** so that mouse interaction is available as a first class feature in PowerShell Core?\r\n\r\nTo learn more about this request please take a look at the following pages:\r\n- [Allow mouse clicks to reposition cursor by emitting cursor key sequences · Issue #8573 · microsoft/terminal · GitHub](https://github.com/microsoft/terminal/issues/8573)\r\n- [Feature Request: Add mouse events to PowerShell Engine · Issue #1982 · PowerShell/PSReadLine · GitHub](https://github.com/PowerShell/PSReadLine/issues/1982)\r\n\r\n\r\nThanks allot.\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGaryAtlan82\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-30T18:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i7pqy",
                                           "createdAt":  "2023-08-01T08:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDMb1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gaberiel44",
                                                                               "createdAt":  "2023-08-01T15:46:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GaryAtlan82",
                                                                               "createdAt":  "2023-08-09T16:30:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @GaryAtlan82 , thank you for your proposal\r\n\r\n@daxian-dbw what information exactly PowerShell needs from .NET? Is it available on both Windows and Unix?",
                                           "updatedAt":  "2023-08-01T08:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bBYxe",
                                           "createdAt":  "2025-01-19T12:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cow1337killer3",
                                           "body":  "@adamsitnik \n\nPowerShell uses `PSReadline`, which uses .NET\u0027s `System.Console.KeyAvailable` and `System.Console.ReadKey()`, which uses `ReadConsoleInput()` ([documentation](https://learn.microsoft.com/en-us/windows/console/readconsoleinput)). \n\n`ReadConsoleInput()` returns input records, which can be a key or mouse event, among others. `System.Console.KeyAvailable` and `System.Console.ReadKey()` will ignore any input record that isn\u0027t for a key event.\n\nSo I think you could easily add `System.Console.MouseAvailable` and `System.Console.ReadMouse()` members just by switching which `EventType` is checked for.",
                                           "updatedAt":  "2025-01-19T12:08:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Feature Request for the necessary features required for the PowerShell Engine to have Mouse Events",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91709",
        "createdAt":  "2023-09-07T02:37:53Z",
        "number":  91709,
        "author":  "kjpgit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T03:27:05Z",
        "body":  "When a full screen / raw terminal app like vim gets a ctrl-z, it reads it as a keypress, not a signal.  This can be done with the right tcsetattr() settings:\r\n\r\n`t.c_cc[Libc.VSUSP] = 0;`  Will stop SIGTSTP from coming as a signal, but instead it comes in as \\x1A key.\r\n\r\nBut more importantly, the app then gets a chance to restore the terminal to the \u0027main\u0027 shell screen, before suspending itself with a SIGSTOP (I think).  Basically, gracefully set the terminal back before suspending.  \r\n\r\nIn .net 8,  I can override the SIGTSTP (Terminal Stop) signal, and set the console back to the \u0027main\u0027 terminal buffer by sending a \"[?1049l\", but I can\u0027t send myself a SIGSTOP. \r\n\r\nAt least, not without bringing in Mono.Posix, and that seems to have additional complications with AOT compilation.  (Missing DLL)\r\n\r\nIdeally, .net knows how to gracefully suspend a console app -- taking it away from and back to the alternate terminal screen -- without additional libraries.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbeAUg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5l4zSA",
                                           "createdAt":  "2023-09-07T02:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m trying to capture ctrl-z as a keypress, not a signal.  This can be done with the right tcsetattr() settings.  For example, vim does it, I believe, to restore the \"main\" terminal window, then suspend itself.  \r\n\r\nI tried disabling the signal (PosixSignalRegistration.Create(PosixSignal.SIGTSTP, ..) both with and without \"Cancel\", but I still don\u0027t see a ctrl-z.\r\n\r\nMy suggestion, is if the user is trying to disable SIGTSTP, then update tcsetattr() so it gets returned as a keypress:\r\n\r\n`t.c_cc[Libc.VSUSP] = 0;`  Will stop SIGTSTP from coming as a signal, but instead it comes in as \\x1A key.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekjpgit\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-07T02:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l44w7",
                                           "createdAt":  "2023-09-07T03:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kjpgit",
                                           "body":  "This is a truly ugly hack, using \"sh\" to send myself a SIGSTOP.  Ideally the runtime has support for sending a SIGSTOP.\r\n\r\n   ```\r\n            if (evt.signal == PosixSignal.SIGWINCH || evt.signal == PosixSignal.SIGCONT) {\r\n                console.SetAlternateScreen(true);   // Sends ?1049h\r\n                Redraw();\r\n            }\r\n            if (evt.signal == PosixSignal.SIGTSTP) {\r\n                Log.Info(\"moving back to main terminal screen\");\r\n                console.SetAlternateScreen(false);  // Sends ?1049l\r\n                console.SetNormalColorAndEnableCursor();\r\n                console.Flush();\r\n                var pi = new ProcessStartInfo(\"sh\");\r\n                pi.ArgumentList.Add(\"-c\");\r\n                pi.ArgumentList.Add(\"kill -STOP $PPID; echo stopped \u003e\u003e /tmp/stop.log\");\r\n                Process.Start(pi);\r\n            }\r\n```",
                                           "updatedAt":  "2023-09-07T03:46:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt4BS",
                                           "createdAt":  "2025-02-09T03:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I expect this would be tricky to implement across all terminals in a consistent manner. To move this forward, we would need a detailed technical proposal for how this could be addressed. Marking as https://github.com/dotnet/runtime/labels/help%20wanted for that research.",
                                           "updatedAt":  "2025-02-09T03:26:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  ".net 8 Console.ReadKey : Better support for return Ctrl-Z, and setting SIGSTOP",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95079",
        "createdAt":  "2023-11-21T19:14:21Z",
        "number":  95079,
        "author":  "josefpihrt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T03:44:52Z",
        "body":  "### Description\n\nHi,\r\n\r\nI have command-line tool (roslynator) that tries to read redirected input and use it as an input for the program (in my case it\u0027s a list of solutions to be analyzed).\r\n\r\nExample code:\r\n```\r\nget-solution-paths | roslynator analyze\r\n```\r\n\r\nFor this purpose I use `Console.IsInputRedirected` which works fine on Windows Terminal with Powershell.\r\n\r\nThe problem is that when I run just `roslynator analyze` on git bash (`git-bash.exe`) `Console.IsInputRedirected` returns true and then the execution is blocked when program tries to read input from console (when there is no redirected input):\r\n\r\nhttps://github.com/dotnet/roslynator/blob/e030192b1dc5359df48e5dd15af79b5c807f481c/src/CommandLine/ConsoleHelpers.cs#L20\r\n\r\nThanks for help in advance.\n\n### Reproduction Steps\n\n1. `dotnet tool install roslynator.dotnet.cli -g --version 0.7.2`\r\n1. run `git-bash.exe` from git installation folder\r\n1. from git bash run `roslynator analyze \u003cPATH-TO-SOLUTION\u003e -v diag`\r\n1. The execution is blocked when program tries to read redirected input\n\n### Expected behavior\n\nConsole.IsInputRedirected should return false when there is no redirected input\n\n### Actual behavior\n\nConsole.IsInputRedirected returns true on git bash when there is no redirected input.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSet timeout for a task that tries to read redirected input: \r\n\r\n```csharp\r\nTask\u003cIEnumerable\u003cstring\u003e\u003e task = ConsoleHelpers.ReadRedirectedInputAsLines();\r\n\r\nif (task.Wait(TimeSpan.FromMilliseconds(1000)))\r\n{\r\n}\r\n```\n\n### Configuration\n\n- Windows 10 Pro x64\r\n- .NET SDK 8.0.100\r\n- git 2.42.0.windows.2\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbePNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sklvs",
                                           "createdAt":  "2023-11-21T19:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nHi,\r\n\r\nI have command-line tool (roslynator) that tries to read redirected input and use it as an input for the program (in my case it\u0027s a list of solutions to be analyzed).\r\n\r\nExample code:\r\n```\r\nget-solution-paths | roslynator analyze\r\n```\r\n\r\nFor this purpose I use `Console.IsInputRedirected` which works fine on Windows Terminal with Powershell.\r\n\r\nThe problem is that when I run just `roslynator analyze` on git bash (`git-bash.exe`) `Console.IsInputRedirected` returns true and then the execution is blocked when program tries to read input from console (when there is no redirected input):\r\n\r\nhttps://github.com/dotnet/roslynator/blob/e030192b1dc5359df48e5dd15af79b5c807f481c/src/CommandLine/ConsoleHelpers.cs#L20\r\n\r\nThanks for help in advance.\n\n### Reproduction Steps\n\n1. `dotnet tool install roslynator.dotnet.cli -g --version 0.7.2`\r\n1. run `git-bash.exe` from git installation folder\r\n1. from git bash run `roslynator analyze \u003cPATH-TO-SOLUTION\u003e -v diag`\r\n1. The execution is blocked when program tries to read redirected input\n\n### Expected behavior\n\nConsole.IsInputRedirected should return false when there is no redirected input\n\n### Actual behavior\n\nConsole.IsInputRedirected returns true on git bash when there is no redirected input.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSet timeout for a task that tries to read redirected input: \r\n\r\n```csharp\r\nTask\u003cIEnumerable\u003cstring\u003e\u003e task = ConsoleHelpers.ReadRedirectedInputAsLines();\r\n\r\nif (task.Wait(TimeSpan.FromMilliseconds(1000)))\r\n{\r\n}\r\n```\n\n### Configuration\n\n- Windows 10 Pro x64\r\n- .NET SDK 8.0.100\r\n- git 2.42.0.windows.2\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejosefpihrt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-21T19:14:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sv7sh",
                                           "createdAt":  "2023-11-23T14:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve tried to reproduce the problem and failed to do so.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6011991/89432941-ec08-4f12-a605-430b99f30881)\r\n\r\n```cs\r\nnamespace ConsoleInputRedirected\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main() =\u003e Console.WriteLine($\"Console.IsInputRedirected={Console.IsInputRedirected}\");\r\n    }\r\n}\r\n```\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6011991/68b2269e-b80c-423d-b61b-8a955505d56c)\r\n\r\n",
                                           "updatedAt":  "2023-11-23T14:12:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sv8pD",
                                           "createdAt":  "2023-11-23T14:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "![image](https://github.com/dotnet/runtime/assets/6011991/c250636e-d43c-46f9-bb05-4a40a3888e0c)\r\n",
                                           "updatedAt":  "2023-11-23T14:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sv9IU",
                                           "createdAt":  "2023-11-23T14:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-11-23T14:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sxCt0",
                                           "createdAt":  "2023-11-23T18:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josefpihrt",
                                           "body":  "Thank you for your answer @adamsitnik.\r\n\r\nI used your console app and run it in git-bash with following result:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/11931318/0b995c00-15a4-4c18-b0a3-b7477e35a234)\r\n\r\nI have the latest version of git (2.43.0) so the only difference between yours and mine configuration could be the operation system. I have Windows 10 Pro 10.0.19045.",
                                           "updatedAt":  "2023-11-23T18:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s6HtB",
                                           "createdAt":  "2023-11-27T06:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@josefpihrt Is there any chance you could debug it? You could add `System.Diagnostics.Debugger.Launch();` and step into framework code with F11. \r\n\r\nI am mostly interested in what happens here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/721c445e494a1d85d2d12e7a99ac2cd94bb898fa/src/libraries/System.Console/src/System/ConsolePal.Windows.cs#L147-L156\r\n\r\n\r\n",
                                           "updatedAt":  "2023-11-27T06:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s9H26",
                                           "createdAt":  "2023-11-27T14:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josefpihrt",
                                           "body":  "I was able to debug the process, here are the results:\r\n\r\n- `IsHandleRedirected` returns true:\r\n  - `fileType` is 3\r\n  - `global::Interop.Kernel32.IsGetConsoleModeCallSuccessful(handle)` returns `false`\r\n    - `GetConsoleMode` returns `false`:\r\n      - `lastSystemError` is 6\r\n\r\nLet me know if you need more data.\r\n\r\n",
                                           "updatedAt":  "2023-11-27T14:38:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ujbrn",
                                           "createdAt":  "2023-12-13T22:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josefpihrt",
                                           "body":  "@adamsitnik ping",
                                           "updatedAt":  "2023-12-13T22:14:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MXbG1",
                                           "createdAt":  "2024-09-17T09:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The behavior might depend on whether Git Bash is using the Windows pseudoconsole feature (`MSYS=enable_pcon` in `git-bash.config`).",
                                           "updatedAt":  "2024-09-17T09:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt483",
                                           "createdAt":  "2025-02-09T03:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case someone wants to work on finding the root cause and propose a fix.",
                                           "updatedAt":  "2025-02-09T03:44:45Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Console.IsInputRedirected returns true on git bash when there is no redirected input",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96490",
        "createdAt":  "2024-01-04T15:51:43Z",
        "number":  96490,
        "author":  "tig",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC93LBw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BDisp",
                                            "createdAt":  "2024-01-04T17:38:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jinek",
                                            "createdAt":  "2025-01-03T21:32:25Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-02T05:30:06Z",
        "body":  "### Description\r\n\r\n[Terminal.Gui](https://github.com/gui-cs/Terminal.Gui) uses `System.Console` for its \"least-common-denominator\" console driver (`NetDriver`). \r\n\r\nWe call `System.Console.ReadKey` to process keyboard input. \r\n\r\nWe\u0027ve noticed that the key info we get on Windows vs Linux is wildy different. Prior to dotnet7, both behaved the same (badly).\r\n\r\nWith dotnet7 \u0026 8 Linux is WAY better.\r\n\r\nFor example, if the user presses \"Ctrl+7\", on Linux we get the right key info. On Windows we get `[ConsoleKeyInfo(Key: Null (None), KeyChar: ␟ (31))]`. \r\n\r\nFor \"Ctrl+7\" we get `[ConsoleKeyInfo(Key: Space, W (F8) | Control, KeyChar: ␀ (0))]`\r\n\r\nFor reference, \"Ctrl+A\" works fine: `[ConsoleKeyInfo(Key: A (A) | Control, KeyChar: a (65))]`\r\n\r\nIs there something we can do to make Windows work as well as Linux (what a strange thing to ask :-))?\r\n\r\n### Reproduction Steps\r\n\r\nUsing the `v2_develop` branch of [Terminal.Gui](https://github.com/gui-cs/Terminal.Gui) debug the `UI Catalog -usc` in the VS debugger. This runs UI Catalog using the `NetDriver`.\r\n\r\nOpen the `Keys` scenario and press \"Ctrl+7\" (you might need to unbind that key from WT\u0027s actions).\r\n\r\nNote garbage.\r\n![image](https://github.com/dotnet/runtime/assets/585482/8d7755f9-2a5f-4f02-b7de-d6fc4629a0a5)\r\n\r\nNow run the `WSL: UI Catalog -usc` debug profile. This runs UI Catalog in WSL using NetDriver.\r\n\r\nOpen `Keys` and press \"Ctrl+7\". You\u0027ll see this:\r\n![image](https://github.com/dotnet/runtime/assets/585482/32432714-c24a-42bd-b0ec-e17c9f2deb9e)\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\n![image](https://github.com/dotnet/runtime/assets/585482/7620d615-6733-47f5-9631-1f1fb201133b)\r\n\r\n\r\n### Actual behavior\r\n\r\n![image](https://github.com/dotnet/runtime/assets/585482/8d7755f9-2a5f-4f02-b7de-d6fc4629a0a5)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgz9dhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5v5cMl",
                                           "createdAt":  "2024-01-04T15:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n[Terminal.Gu](https://github.com/gui-cs/Terminal.Gui) uses `System.Console` for its \"least-common-denominator\" console driver (`NetDriver`). \r\n\r\nWe call `System.Console.ReadKey` to process keyboard input. \r\n\r\nWe\u0027ve noticed that the key info we get on Windows vs Linux is wildy different. Prior to dotnet7, both behaved the same (badly).\r\n\r\nWith dotnet7 \u0026 8 Linux is WAY better.\r\n\r\nFor example, if the user presses \"Ctrl+7\", on Linux we get the right key info. On Windows we get `[ConsoleKeyInfo(Key: Null (None), KeyChar: ␟ (31))]`. \r\n\r\nFor \"Ctrl+7\" we get `[ConsoleKeyInfo(Key: Space, W (F8) | Control, KeyChar: ␀ (0))]`\r\n\r\nFor reference, \"Ctrl+A\" works fine: `[ConsoleKeyInfo(Key: A (A) | Control, KeyChar: a (65))]`\r\n\r\nIs there something we can do to make Windows work as well as Linux (what a strange thing to ask :-))?\n\n### Reproduction Steps\n\nUsing the `v2_develop` branch of [Terminal.Gu](https://github.com/gui-cs/Terminal.Gui) debug the `UI Catalog -usc` in the VS debugger. This runs UI Catalog using the `NetDriver`.\r\n\r\nOpen the `Keys` scenario and press \"Ctrl+7\" (you might need to unbind that key from WT\u0027s actions).\r\n\r\nNote garbage.\r\n![image](https://github.com/dotnet/runtime/assets/585482/8d7755f9-2a5f-4f02-b7de-d6fc4629a0a5)\r\n\r\nNow run the `WSL: UI Catalog -usc` debug profile. This runs UI Catalog in WSL using NetDriver.\r\n\r\nOpen `Keys` and press \"Ctrl+7\". You\u0027ll see this:\r\n![image](https://github.com/dotnet/runtime/assets/585482/32432714-c24a-42bd-b0ec-e17c9f2deb9e)\r\n\r\n\r\n\n\n### Expected behavior\n\n![image](https://github.com/dotnet/runtime/assets/585482/7620d615-6733-47f5-9631-1f1fb201133b)\r\n\n\n### Actual behavior\n\n![image](https://github.com/dotnet/runtime/assets/585482/8d7755f9-2a5f-4f02-b7de-d6fc4629a0a5)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etig\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-04T15:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNsjM",
                                           "createdAt":  "2024-01-09T08:50:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @tig \r\n\r\n\u003e With dotnet7 \u0026 8 Linux is WAY better\r\n\r\nI am happy to hear that you like the improvements we made in https://devblogs.microsoft.com/dotnet/console-readkey-improvements-in-net-7/\r\n\r\n\u003e For example, if the user presses \"Ctrl+7\", on Linux we get the right key info. On Windows we get `[ConsoleKeyInfo(Key: Null (None), KeyChar: ␟ (31))]`. \r\n\r\nDo you apply any custom settings related to Console/Terminal on Windows? The following app works just fine:\r\n\r\n```cs\r\nnamespace ReadKey96490\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Press any key to get info or Escape to stop\");\r\n\r\n            ConsoleKeyInfo consoleKeyInfo;\r\n            do\r\n            {\r\n                consoleKeyInfo = Console.ReadKey();\r\n                Console.WriteLine($\"{consoleKeyInfo.Key} {consoleKeyInfo.Modifiers} {consoleKeyInfo.KeyChar}\");\r\n            } while (consoleKeyInfo.Key != ConsoleKey.Escape);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n![image](https://github.com/dotnet/runtime/assets/6011991/36f7e113-e9a9-41e4-87e9-5601784159e1)\r\n",
                                           "updatedAt":  "2024-01-09T08:50:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wPkee",
                                           "createdAt":  "2024-01-09T14:17:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRwldg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BDisp",
                                                                               "createdAt":  "2024-01-09T14:20:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tig",
                                           "body":  "Yes, on Windows we enable `ENABLE_VIRTUAL_TERMINAL_INPUT` via `SetConsoleMode` (P/Invoke).\r\n\r\nI just tested this and if we disable setting `ENABLE_VIRTUAL_TERMINAL_INPUT` on Windows, keyboard behavior is like WSL. Yay.\r\n\r\nHowever, mouse input no longer works when we do this, even if `ENABLE_EXTENDED_FLAGS` and `ENABLE_MOUSE_INPUT` are \r\nenabled (https://stackoverflow.com/questions/42213161/console-mouse-input-not-working).\r\n\r\nOn WSL, we see esc codes for mouse come in via `ReadKey` and we process those appropriately. But without setting `ENABLE_VIRTUAL_TERMINAL_INPUT` on Windows we don\u0027t see those esc codes.\r\n\r\nWhat are we missing?\r\n\r\nFWIW, here\u0027s the current setup code:\r\n\r\n```cs\r\n_inputHandle = GetStdHandle (STD_INPUT_HANDLE);\r\nif (!GetConsoleMode (_inputHandle, out var mode)) {\r\n\tthrow new ApplicationException ($\"Failed to get input console mode, error code: {GetLastError ()}.\");\r\n}\r\n_originalInputConsoleMode = mode;\r\nif ((mode \u0026 ENABLE_VIRTUAL_TERMINAL_INPUT) \u003c ENABLE_VIRTUAL_TERMINAL_INPUT) {\r\n\tmode |= ENABLE_VIRTUAL_TERMINAL_INPUT;\r\n\tif (!SetConsoleMode (_inputHandle, mode)) {\r\n\t\tthrow new ApplicationException ($\"Failed to set input console mode, error code: {GetLastError ()}.\");\r\n\t}\r\n}\r\n\r\nmode |= ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT;\r\nif (!SetConsoleMode (_inputHandle, mode)) {\r\n\tthrow new ApplicationException ($\"Failed to set input console mode, error code: {GetLastError ()}.\");\r\n}\r\n\r\n_outputHandle = GetStdHandle (STD_OUTPUT_HANDLE);\r\nif (!GetConsoleMode (_outputHandle, out mode)) {\r\n\tthrow new ApplicationException ($\"Failed to get output console mode, error code: {GetLastError ()}.\");\r\n}\r\n_originalOutputConsoleMode = mode;\r\nif ((mode \u0026 (ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN)) \u003c DISABLE_NEWLINE_AUTO_RETURN) {\r\n\tmode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN;\r\n\tif (!SetConsoleMode (_outputHandle, mode)) {\r\n\t\tthrow new ApplicationException ($\"Failed to set output console mode, error code: {GetLastError ()}.\");\r\n\t}\r\n}\r\n\r\n_errorHandle = GetStdHandle (STD_ERROR_HANDLE);\r\nif (!GetConsoleMode (_errorHandle, out mode)) {\r\n\tthrow new ApplicationException ($\"Failed to get error console mode, error code: {GetLastError ()}.\");\r\n}\r\n_originalErrorConsoleMode = mode;\r\nif ((mode \u0026 DISABLE_NEWLINE_AUTO_RETURN) \u003c DISABLE_NEWLINE_AUTO_RETURN) {\r\n\tmode |= DISABLE_NEWLINE_AUTO_RETURN;\r\n\tif (!SetConsoleMode (_errorHandle, mode)) {\r\n\t\tthrow new ApplicationException ($\"Failed to set error console mode, error code: {GetLastError ()}.\");\r\n\t}\r\n}\r\n```\r\n\r\nIf I remove the code that enables `ENABLE_VIRTUAL_TERMINAL_INPUT` keyboard input works great. But we don\u0027t get mouse events.",
                                           "updatedAt":  "2024-01-09T14:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wQL8V",
                                           "createdAt":  "2024-01-09T15:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tig",
                                           "body":  "Full standalone test app:\r\n\r\n```cs\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\n\r\nnamespace ReadKey96490;\r\n\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var console = new NetWinVTConsole();\r\n\r\n        console.PrintModes();\r\n\r\n        Console.WriteLine(\"Press any key to get info or Enter to stop.\");\r\n\r\n        ConsoleKeyInfo consoleKeyInfo;\r\n        do\r\n        {\r\n            consoleKeyInfo = Console.ReadKey();\r\n            consoleKeyInfo.Print();\r\n        } while (consoleKeyInfo.Key != ConsoleKey.Enter);\r\n\r\n        console?.Cleanup();\r\n    }\r\n}\r\n\r\npublic static class ConsoleKeyInfoExtensions\r\n{\r\n    public static void Print (this ConsoleKeyInfo cki)\r\n    {\r\n        var sb = new StringBuilder();\r\n        sb.Append($\"Key: {cki.Key} ({(int)cki.Key})\");\r\n        sb.Append((cki.Modifiers \u0026 ConsoleModifiers.Shift) != 0 ? \" | Shift\" : string.Empty);\r\n        sb.Append((cki.Modifiers \u0026 ConsoleModifiers.Control) != 0 ? \" | Control\" : string.Empty);\r\n        sb.Append((cki.Modifiers \u0026 ConsoleModifiers.Alt) != 0 ? \" | Alt\" : string.Empty);\r\n        var s = sb.ToString().TrimEnd(\u0027,\u0027).TrimEnd(\u0027 \u0027);\r\n        Console.WriteLine($\" [ConsoleKeyInfo({s})]\");\r\n    }\r\n}\r\n\r\n/// \u003csummary\u003e\r\n/// On Windows, System.Console does not send mouse input via Console.ReadKey. This class\r\n/// provides PInvoke support for enabling ENABLE_VIRTUAL_TERMINAL_INPUT which causee\r\n/// System.Console to send mouse input.\r\n///\r\n/// BUGBUG: https://github.com/dotnet/runtime/issues/96490\r\n/// \r\n/// \u003c/summary\u003e\r\nclass NetWinVTConsole\r\n{\r\n\r\n    const int STD_INPUT_HANDLE = -10;\r\n    const int STD_OUTPUT_HANDLE = -11;\r\n    const int STD_ERROR_HANDLE = -12;\r\n\r\n    // Input modes: https://learn.microsoft.com/en-us/windows/console/setconsolemode\r\n    /// \u003csummary\u003e\r\n    /// CTRL+C is processed by the system and is not placed in the input buffer. If the input buffer is\r\n    /// being read by ReadFile or ReadConsole, other control keys are processed by the system and are not\r\n    /// returned in the ReadFile or ReadConsole buffer. If the ENABLE_LINE_INPUT mode is also enabled,\r\n    /// backspace, carriage return, and line feed characters are handled by the system.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_PROCESSED_INPUT = 1;\r\n\r\n    /// \u003csummary\u003e\r\n    /// The ReadFile or ReadConsole function returns only when a carriage return character is read. If this\r\n    /// mode is disabled, the functions return when one or more characters are available.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_LINE_INPUT = 2;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Characters read by the ReadFile or ReadConsole function are written to the active screen buffer as\r\n    /// they are typed into the console. This mode can be used only if the ENABLE_LINE_INPUT mode is also\r\n    /// enabled.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_ECHO_INPUT = 4;\r\n\r\n    /// \u003csummary\u003e\r\n    /// User interactions that change the size of the console screen buffer are reported in the console\u0027s\r\n    /// input buffer. Information about these events can be read from the input buffer by applications\r\n    /// using the ReadConsoleInput function, but not by those using ReadFile or ReadConsole.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_WINDOW_INPUT = 8;\r\n\r\n    /// \u003csummary\u003e\r\n    /// If the mouse pointer is within the borders of the console window and the window has the keyboard\r\n    /// focus, mouse events generated by mouse movement and button presses are placed in the input buffer.\r\n    /// These events are discarded by ReadFile or ReadConsole, even when this mode is enabled. The\r\n    /// ReadConsoleInput function can be used to read MOUSE_EVENT input records from the input buffer.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_MOUSE_INPUT = 16;\r\n\r\n    /// \u003csummary\u003e\r\n    /// When enabled, text entered in a console window will be inserted at the current cursor location and\r\n    /// all text following that location will not be overwritten. When disabled, all following text will be\r\n    /// overwritten.\r\n    /// To enable this mode, use ENABLE_INSERT_MODE | ENABLE_EXTENDED_FLAGS.\r\n    /// To disable this mode, use ENABLE_EXTENDED_FLAGS without this flag.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_INSERT_MODE = 32;\r\n\r\n    /// \u003csummary\u003e\r\n    /// This flag enables the user to use the mouse to select and edit text. To enable this mode, use\r\n    /// ENABLE_QUICK_EDIT_MODE | ENABLE_EXTENDED_FLAGS. To disable this mode, use ENABLE_EXTENDED_FLAGS\r\n    /// without this flag.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_QUICK_EDIT_MODE = 64;\r\n\r\n\r\n    /// \u003csummary\u003e\r\n    /// Required to enable or disable extended flags.\r\n    /// See ENABLE_INSERT_MODE and ENABLE_QUICK_EDIT_MODE.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_EXTENDED_FLAGS = 128;\r\n\r\n    /// \u003csummary\u003e\r\n    /// Setting this flag directs the Virtual Terminal processing engine to convert user input received by\r\n    /// the console window into Console Virtual Terminal Sequences that can be retrieved by a supporting\r\n    /// application through ReadFile or ReadConsole functions.\r\n    /// The typical usage of this flag is intended in conjunction with ENABLE_VIRTUAL_TERMINAL_PROCESSING\r\n    /// on the output handle to connect to an application that communicates exclusively via virtual\r\n    /// terminal sequences.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_VIRTUAL_TERMINAL_INPUT = 512;\r\n\r\n    // Output modes.\r\n    /// \u003csummary\u003e\r\n    /// Characters written by the WriteFile or WriteConsole function or echoed by the ReadFile or\r\n    /// ReadConsole function are parsed for ASCII control sequences, and the correct action is performed.\r\n    /// Backspace, tab, bell, carriage return, and line feed characters are processed. It should be enabled\r\n    /// when using control sequences or when ENABLE_VIRTUAL_TERMINAL_PROCESSING is set.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_PROCESSED_OUTPUT = 1;\r\n\r\n    /// \u003csummary\u003e\r\n    /// \tWhen writing with WriteFile or WriteConsole or echoing with ReadFile or ReadConsole, the cursor\r\n    /// moves to the beginning of the next row when it reaches the end of the current row. This causes the\r\n    /// rows displayed in the console window to scroll up automatically when the cursor advances beyond the\r\n    /// last row in the window. It also causes the contents of the console screen buffer to scroll up\r\n    /// (../discarding the top row of the console screen buffer) when the cursor advances beyond the last\r\n    /// row in the console screen buffer. If this mode is disabled, the last character in the row is\r\n    /// overwritten with any subsequent characters.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_WRAP_AT_EOL_OUTPUT = 2;\r\n\r\n    /// \u003csummary\u003e\r\n    /// When writing with WriteFile or WriteConsole, characters are parsed for VT100 and similar control\r\n    /// character sequences that control cursor movement, color/font mode, and other operations that can\r\n    /// also be performed via the existing Console APIs. For more information, see Console Virtual Terminal\r\n    /// Sequences.\r\n    /// Ensure ENABLE_PROCESSED_OUTPUT is set when using this flag.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;\r\n\r\n    /// \u003csummary\u003e\r\n    /// When writing with WriteFile or WriteConsole, this adds an additional state to end-of-line wrapping\r\n    /// that can delay the cursor move and buffer scroll operations.\r\n    /// Normally when ENABLE_WRAP_AT_EOL_OUTPUT is set and text reaches the end of the line, the cursor\r\n    /// will immediately move to the next line and the contents of the buffer will scroll up by one line.In\r\n    /// contrast with this flag set, the cursor does not move to the next line, and the scroll operation is\r\n    /// not performed. The written character will be printed in the final position on the line and the\r\n    /// cursor will remain above this character as if ENABLE_WRAP_AT_EOL_OUTPUT was off, but the next\r\n    /// printable character will be printed as if ENABLE_WRAP_AT_EOL_OUTPUT is on.No overwrite will occur.\r\n    /// Specifically, the cursor quickly advances down to the following line, a scroll is performed if\r\n    /// necessary, the character is printed, and the cursor advances one more position.\r\n    /// The typical usage of this flag is intended in conjunction with setting\r\n    /// ENABLE_VIRTUAL_TERMINAL_PROCESSING to better emulate a terminal emulator where writing the final\r\n    /// character on the screen (../in the bottom right corner) without triggering an immediate scroll is\r\n    /// the desired behavior.\r\n    /// \u003c/summary\u003e\r\n    const uint DISABLE_NEWLINE_AUTO_RETURN = 8;\r\n\r\n    /// \u003csummary\u003e\r\n    /// The APIs for writing character attributes including WriteConsoleOutput and\r\n    /// WriteConsoleOutputAttribute allow the usage of flags from character attributes to adjust the color\r\n    /// of the foreground and background of text. Additionally, a range of DBCS flags was specified with\r\n    /// the COMMON_LVB prefix. Historically, these flags only functioned in DBCS code pages for Chinese,\r\n    /// Japanese, and Korean languages.\r\n    /// With exception of the leading byte and trailing byte flags, the remaining flags describing line\r\n    /// drawing and reverse video (../swap foreground and background colors) can be useful for other\r\n    /// languages to emphasize portions of output.\r\n    /// Setting this console mode flag will allow these attributes to be used in every code page on every\r\n    /// language.\r\n    /// It is off by default to maintain compatibility with known applications that have historically taken\r\n    /// advantage of the console ignoring these flags on non-CJK machines to store bits in these fields for\r\n    /// their own purposes or by accident.\r\n    /// Note that using the ENABLE_VIRTUAL_TERMINAL_PROCESSING mode can result in LVB grid and reverse\r\n    /// video flags being set while this flag is still off if the attached application requests underlining\r\n    /// or inverse video via Console Virtual Terminal Sequences.\r\n    /// \u003c/summary\u003e\r\n    const uint ENABLE_LVB_GRID_WORLDWIDE = 10;\r\n\r\n    readonly IntPtr _errorHandle;\r\n    readonly IntPtr _inputHandle;\r\n    readonly uint _originalErrorConsoleMode;\r\n    readonly uint _originalInputConsoleMode;\r\n    readonly uint _originalOutputConsoleMode;\r\n    readonly IntPtr _outputHandle;\r\n\r\n\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    extern static IntPtr GetStdHandle(int nStdHandle);\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    extern static bool GetConsoleMode(IntPtr hConsoleHandle, out uint lpMode);\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    extern static bool SetConsoleMode(IntPtr hConsoleHandle, uint dwMode);\r\n\r\n    [DllImport(\"kernel32.dll\")]\r\n    extern static uint GetLastError();\r\n\r\n    public NetWinVTConsole()\r\n    {\r\n        _inputHandle = GetStdHandle(STD_INPUT_HANDLE);\r\n        if (!GetConsoleMode(_inputHandle, out var mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get input console mode, error code: {GetLastError()}.\");\r\n        }\r\n        _originalInputConsoleMode = mode;\r\n\r\n        mode = ENABLE_EXTENDED_FLAGS;\r\n        if (!SetConsoleMode(_inputHandle, mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to set input console mode, error code: {GetLastError()}.\");\r\n        }\r\n\r\n#if SET_ENABLE_VIRTUAL_TERMINAL_INPUT\r\n        if ((mode \u0026 ENABLE_VIRTUAL_TERMINAL_INPUT) \u003c ENABLE_VIRTUAL_TERMINAL_INPUT)\r\n        {\r\n            mode |= ENABLE_VIRTUAL_TERMINAL_INPUT;\r\n            if (!SetConsoleMode(_inputHandle, mode))\r\n            {\r\n                throw new ApplicationException($\"Failed to set input console mode, error code: {GetLastError()}.\");\r\n            }\r\n        }\r\n#endif        \r\n\r\n        mode |= ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT;\r\n        if (!SetConsoleMode(_inputHandle, mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to set input console mode, error code: {GetLastError()}.\");\r\n        }\r\n\r\n        _outputHandle = GetStdHandle(STD_OUTPUT_HANDLE);\r\n        if (!GetConsoleMode(_outputHandle, out mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get output console mode, error code: {GetLastError()}.\");\r\n        }\r\n\r\n        _originalOutputConsoleMode = mode;\r\n        if ((mode \u0026 (ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN)) \u003c DISABLE_NEWLINE_AUTO_RETURN)\r\n        {\r\n            mode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN;\r\n            if (!SetConsoleMode(_outputHandle, mode))\r\n            {\r\n                throw new ApplicationException($\"Failed to set output console mode, error code: {GetLastError()}.\");\r\n            }\r\n        }\r\n\r\n        _errorHandle = GetStdHandle(STD_ERROR_HANDLE);\r\n        if (!GetConsoleMode(_errorHandle, out mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get error console mode, error code: {GetLastError()}.\");\r\n        }\r\n        _originalErrorConsoleMode = mode;\r\n        if ((mode \u0026 DISABLE_NEWLINE_AUTO_RETURN) \u003c DISABLE_NEWLINE_AUTO_RETURN)\r\n        {\r\n            mode |= DISABLE_NEWLINE_AUTO_RETURN;\r\n            if (!SetConsoleMode(_errorHandle, mode))\r\n            {\r\n                throw new ApplicationException($\"Failed to set error console mode, error code: {GetLastError()}.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void PrintModes() {\r\n        if (!GetConsoleMode(_inputHandle, out var mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get input console mode, error code: {GetLastError()}.\");\r\n        }\r\n        Console.WriteLine($\"Input mode: {PrettyPrintConsoleModes(mode)}\");\r\n        if (!GetConsoleMode(_outputHandle, out mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get output console mode, error code: {GetLastError()}.\");\r\n        }\r\n        Console.WriteLine($\"Output mode: {PrettyPrintConsoleModes(mode)}\");\r\n        if (!GetConsoleMode(_errorHandle, out mode))\r\n        {\r\n            throw new ApplicationException($\"Failed to get error console mode, error code: {GetLastError()}.\");\r\n        }\r\n        Console.WriteLine($\"Error mode: {PrettyPrintConsoleModes(mode)}\");\r\n\r\n    }\r\n\r\n    public static string PrettyPrintConsoleModes(uint mode)\r\n    {\r\n        var sb = new StringBuilder();\r\n\r\n        AppendFlag(sb, mode, ENABLE_PROCESSED_INPUT, \"ENABLE_PROCESSED_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_LINE_INPUT, \"ENABLE_LINE_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_ECHO_INPUT, \"ENABLE_ECHO_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_WINDOW_INPUT, \"ENABLE_WINDOW_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_MOUSE_INPUT, \"ENABLE_MOUSE_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_INSERT_MODE, \"ENABLE_INSERT_MODE\");\r\n        AppendFlag(sb, mode, ENABLE_QUICK_EDIT_MODE, \"ENABLE_QUICK_EDIT_MODE\");\r\n        AppendFlag(sb, mode, ENABLE_EXTENDED_FLAGS, \"ENABLE_EXTENDED_FLAGS\");\r\n        AppendFlag(sb, mode, ENABLE_VIRTUAL_TERMINAL_INPUT, \"ENABLE_VIRTUAL_TERMINAL_INPUT\");\r\n        AppendFlag(sb, mode, ENABLE_PROCESSED_OUTPUT, \"ENABLE_PROCESSED_OUTPUT\");\r\n        AppendFlag(sb, mode, ENABLE_WRAP_AT_EOL_OUTPUT, \"ENABLE_WRAP_AT_EOL_OUTPUT\");\r\n        AppendFlag(sb, mode, ENABLE_VIRTUAL_TERMINAL_PROCESSING, \"ENABLE_VIRTUAL_TERMINAL_PROCESSING\");\r\n        AppendFlag(sb, mode, DISABLE_NEWLINE_AUTO_RETURN, \"DISABLE_NEWLINE_AUTO_RETURN\");\r\n        AppendFlag(sb, mode, ENABLE_LVB_GRID_WORLDWIDE, \"ENABLE_LVB_GRID_WORLDWIDE\");\r\n\r\n        return sb.ToString().TrimEnd(\u0027|\u0027, \u0027 \u0027);\r\n    }\r\n\r\n    private static void AppendFlag(StringBuilder sb, uint mode, uint flag, string flagName)\r\n    {\r\n        if ((mode \u0026 flag) == flag)\r\n        {\r\n            sb.Append(flagName).Append(\" | \");\r\n        }\r\n    }\r\n\r\n    public void Cleanup()\r\n    {\r\n        if (!SetConsoleMode(_inputHandle, _originalInputConsoleMode))\r\n        {\r\n            throw new ApplicationException($\"Failed to restore input console mode, error code: {GetLastError()}.\");\r\n        }\r\n        if (!SetConsoleMode(_outputHandle, _originalOutputConsoleMode))\r\n        {\r\n            throw new ApplicationException($\"Failed to restore output console mode, error code: {GetLastError()}.\");\r\n        }\r\n        if (!SetConsoleMode(_errorHandle, _originalErrorConsoleMode))\r\n        {\r\n            throw new ApplicationException($\"Failed to restore error console mode, error code: {GetLastError()}.\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWithout `ENABLE_VIRTUAL_TERMINAL_INPUT` (pressed Ctrl+7, moved mouse, ENTER):\r\n\r\n```ps1\r\ndotnet run \r\nInput mode: ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT | ENABLE_EXTENDED_FLAGS | DISABLE_NEWLINE_AUTO_RETURN\r\nOutput mode: ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT | ENABLE_WINDOW_INPUT | ENABLE_PROCESSED_OUTPUT | ENABLE_WRAP_AT_EOL_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN | ENABLE_LVB_GRID_WORLDWIDE\r\nError mode: ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT | ENABLE_WINDOW_INPUT | ENABLE_PROCESSED_OUTPUT | ENABLE_WRAP_AT_EOL_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN | ENABLE_LVB_GRID_WORLDWIDE\r\nPress any key to get info or Enter to stop.\r\n [ConsoleKeyInfo(Key: D7 (55) | Control)]\r\n [ConsoleKeyInfo(Key: Enter (13))]\r\n```\r\n\r\nWith `ENABLE_VIRTUAL_TERMINAL_INPUT` (pressed Ctrl+7, moved mouse, Enter, Ctrl-Break):\r\n\r\n```ps1\r\ndotnet run --property:DefineConstants=SET_ENABLE_VIRTUAL_TERMINAL_INPUT\r\nInput mode: ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT | ENABLE_EXTENDED_FLAGS | ENABLE_VIRTUAL_TERMINAL_INPUT | DISABLE_NEWLINE_AUTO_RETURN\r\nOutput mode: ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT | ENABLE_WINDOW_INPUT | ENABLE_PROCESSED_OUTPUT | ENABLE_WRAP_AT_EOL_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN | ENABLE_LVB_GRID_WORLDWIDE\r\nError mode: ENABLE_PROCESSED_INPUT | ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT | ENABLE_WINDOW_INPUT | ENABLE_PROCESSED_OUTPUT | ENABLE_WRAP_AT_EOL_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING | DISABLE_NEWLINE_AUTO_RETURN | ENABLE_LVB_GRID_WORLDWIDE\r\nPress any key to get info or Enter to stop.\r\n [ConsoleKeyInfo(Key: None (0))]\r\n [ConsoleKeyInfo(Key: None (0))]\r\n[ [ConsoleKeyInfo(Key: None (0))]\r\n\u003c [ConsoleKeyInfo(Key: None (0))]\r\n3 [ConsoleKeyInfo(Key: None (0))]\r\n5 [ConsoleKeyInfo(Key: None (0))]\r\n; [ConsoleKeyInfo(Key: None (0))]\r\n8 [ConsoleKeyInfo(Key: None (0))]\r\n2 [ConsoleKeyInfo(Key: None (0))]\r\n; [ConsoleKeyInfo(Key: None (0))]\r\n3 [ConsoleKeyInfo(Key: None (0))]\r\n5 [ConsoleKeyInfo(Key: None (0))]\r\nm [ConsoleKeyInfo(Key: None (0))]\r\n```",
                                           "updatedAt":  "2024-01-09T15:45:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zMeTs",
                                           "createdAt":  "2024-02-07T18:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tig big thanks for providing a very detailed information!\r\n\r\nPowerShell has requested for the same thing in the past: https://github.com/dotnet/runtime/issues/60107\r\n\r\nWould addressing this completely unblock your scenario? Are there any other `Console` APIs that are not working correctly for `ENABLE_VIRTUAL_TERMINAL_INPUT `?",
                                           "updatedAt":  "2024-02-07T18:38:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc514GKP",
                                           "createdAt":  "2024-03-04T23:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tig",
                                           "body":  "\u003e @tig big thanks for providing a very detailed information!\r\n\u003e \r\n\u003e PowerShell has requested for the same thing in the past: #60107\r\n\u003e \r\n\u003e Would addressing this completely unblock your scenario? Are there any other `Console` APIs that are not working correctly for `ENABLE_VIRTUAL_TERMINAL_INPUT `?\r\n\r\nYes, mouse input appears to be horked as well. I have not had time to dive into it deeply, but we\u0027re not getting all \"clicked\" events (we do get pressed/released) and SOMETIMEs \"clicked\".",
                                           "updatedAt":  "2024-03-04T23:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DP12H",
                                           "createdAt":  "2024-07-02T05:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matteocoder",
                                           "body":  "Another issue related to `ReadKey()` concerns dead keys: on Windows they are completely broken. As you can see in https://github.com/PowerShell/PSReadLine/issues/3795, searching for accented characters using the PSReadline functions is impossible because `ReadKey()` returns before the accented character is fully composed.\r\n\r\n@thomazmoura researched the possible causes, an here is what he found:\r\n\r\n \u003e Just to give an update I\u0027ve so far found that the code which is likely the culprit is the SearchChar method on [ReadLine.vi.cs](https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/ReadLine.vi.cs) (line 166). There it calls ReadKey() and after getting the value proceeds to make the movement. The part where key is actually read is not shown on the ReadKey() method (it seems to happen on another thread) but my guess is that it runs something similar to calling `[Console]::ReadKey()` on pwsh and that\u0027s where Windows and Linux diverge considerably. On Linux, any dead keys are ignored by `[Console]::ReadKey()` - only when the next character is typed it returns the combined character (like á, or ã) that way on layouts that have \u0027, \" or ` as dead keys it waits for a another key (like space) to return the key. On windows though, this same method returns immediately when a dead key is typed, but with a null/empty KeyChar. The PSReadLine reads this empty KeyChar and then does nothing. When the user finally types the inteded key the chain has already been broken by the dead key.\r\n",
                                           "updatedAt":  "2024-07-02T05:30:04Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "`System.Console.ReadKey` is lame on Windows; brilliant on Linux",
        "labels":  [
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100274",
        "createdAt":  "2024-03-26T10:47:20Z",
        "number":  100274,
        "author":  "tmds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T00:22:33Z",
        "body":  "There are some instructions on how to run the Console manual tests: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Console/tests/ManualTests/Readme.md\r\n\r\nIn the past, I\u0027ve successfully used these instructions to run the tests.\r\nIt seems this is no longer working.\r\n\r\n```\r\nexport MANUAL_TESTS=true\r\ndotnet test\r\n``` \r\nblocks without showing test output.\r\n\r\nThe change in behavior is possibly due to changes in msbuild for the terminal logger and/or related changes in vstest.\r\n\r\ncc @dotnet/area-system-console @baronfel @rainersigwald ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe7VBvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54aEks",
                                           "createdAt":  "2024-03-26T10:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-26T10:47:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54bwt8",
                                           "createdAt":  "2024-03-26T14:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "@nohwnd this sounds like one you\u0027ll be interested in.\r\n\r\n@tmds have you tried with `VSTestUseMSBuildOutput=false dotnet test`? I think that might disable the change that\u0027s causing you trouble.",
                                           "updatedAt":  "2024-03-26T14:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54iWFb",
                                           "createdAt":  "2024-03-27T09:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e have you tried with VSTestUseMSBuildOutput=false dotnet test? I think that might disable the change that\u0027s causing you trouble.\r\n\r\nThis doesn\u0027t seem to make a difference.\r\n\r\nWhen I run as `dotnet build -t:test` the output is showing, but it still behaves unexpected.\r\nFor example, the test should print:\r\n```\r\nSystem.Text.ConsoleEncoding\r\n\u0027ΠΣ\u0027.\r\nDid you see Pi and Sigma or question marks? [y/n]\r\n```\r\nBut the last line is not printed until I press a key.\r\n\r\nThe last line is different from the previous line as it uses `Console.Write` instead of `Console.WriteLine`.\r\nThere may be some line buffer that is not printing this line until it sees the end of the line char.",
                                           "updatedAt":  "2024-03-27T09:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54i3vt",
                                           "createdAt":  "2024-03-27T10:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "Looking at global.json net9-preview1 is used, dotnet test integration with terminal logger is super basic there. It is better in preview2, but similarly to other build workloads, console.write/writeline might not propagate to console. \r\n\r\nThe new dotnet test experience can be disabled by this env variable: MSBUILDENSURESTDOUTFORTASKPROCESSES=1 or by -p:VSTestUseMSBuildOutput=false on command line.",
                                           "updatedAt":  "2024-03-27T10:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57tUG8",
                                           "createdAt":  "2024-04-24T17:31:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Reopening to track question https://github.com/dotnet/runtime/pull/100333#discussion_r1578263569.",
                                           "updatedAt":  "2024-04-24T17:31:14Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Update instructions for running Console ManualTests",
        "labels":  [
                       "documentation",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100308",
        "createdAt":  "2024-03-26T20:59:04Z",
        "number":  100308,
        "author":  "grochoge",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-28T21:42:19Z",
        "body":  "### Description\r\n\r\nAfter beginning an asynchronous stream read of standard input (on Windows at least) with a cancellation token, cancelling the token does not cancel the read.\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nusing System.Threading;\r\nvar cancel = new CancellationTokenSource();\r\nvar stdin = Console.OpenStandardInput();\r\nvar buffer = new byte[1024];\r\nvar read = stdin.ReadAsync( buffer, cancel.Token );\r\ncancel.Cancel();\r\nawait read;\r\n```\r\n\r\n### Expected behavior\r\n\r\nRead is cancelled and a cancellation exception is thrown.\r\n\r\n### Actual behavior\r\n\r\nThe `await` call blocks forever.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8.0.3\r\nWindows 10 19045.4046\r\n\r\n### Other information\r\n\r\nA stack trace shows the program calling the regular console read method, not an asynchronous version:\r\n```\r\n \tSystem.Console.dll!Interop.Kernel32.ReadFile(nint handle, byte* bytes, int numBytesToRead, out int numBytesRead, nint mustBeZero) Line 412\tC#\r\n \tSystem.Console.dll!System.ConsolePal.WindowsConsoleStream.ReadFileNative(nint hFile, System.Span\u003cbyte\u003e buffer, bool isPipe, out int bytesRead, bool useFileAPIs) Line 1150\tC#\r\n \tSystem.Console.dll!System.ConsolePal.WindowsConsoleStream.Read(System.Span\u003cbyte\u003e buffer) Line 1108\tC#\r\n\u003e\tSystem.Console.dll!System.IO.ConsoleStream.Read(byte[] buffer, int offset, int count) Line 34\tC#\r\n \t[Async] Program.Main(string[] aArgs) Line 73\tC#\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpKpHRg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54fRUl",
                                           "createdAt":  "2024-03-26T20:59:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-26T20:59:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54fl5o",
                                           "createdAt":  "2024-03-26T22:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grochoge",
                                           "body":  "Searching further, I guess this is more of a feature request and/or a documentation bug/feature request.\r\n\r\nThe documentation states `ReadAsync` \"monitors cancellation requests\", implying that the read can be cancelled while in progress.  However the actual (intended) behavior is the cancellation token is checked before reading but `ReadAsync` will not be cancelled after that unless the behavior is overridden in a derived class.",
                                           "updatedAt":  "2024-03-26T22:02:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54f-jA",
                                           "createdAt":  "2024-03-26T23:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgGw0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-03-27T00:49:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2024-03-27T06:40:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2024-04-30T15:23:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "Console I/O cannot be canceled reliably on Windows: https://github.com/microsoft/terminal/issues/12143",
                                           "updatedAt":  "2024-03-26T23:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58UOzG",
                                           "createdAt":  "2024-04-30T15:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELyJ_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-25T13:32:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "henricj",
                                                                               "createdAt":  "2025-03-27T19:43:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Console I/O cannot be canceled reliably on Windows: [microsoft/terminal#12143](https://github.com/microsoft/terminal/issues/12143)\r\n\r\nI would very much appreciate upvotes on that issue by anyone who cares about it, by the way. It\u0027s hard to convince the team to dedicate time to it if I *seem* like the only person affected by it.",
                                           "updatedAt":  "2024-04-30T15:31:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CeK4d",
                                           "createdAt":  "2024-06-25T13:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e Console I/O cannot be canceled reliably on Windows: https://github.com/microsoft/terminal/issues/12143\r\n\r\nI\u0027ve marked it as blocking, as soon as Windows makes it possible we can give it a try (currently the handle is open for sync IO)",
                                           "updatedAt":  "2024-06-25T13:19:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6keH2c",
                                           "createdAt":  "2025-03-27T20:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "henricj",
                                           "body":  "I\u0027ve run into this issue every couple of years, at least since .NET Framework 2.0, if memory serves.  Having written multiple poll-for-keystrokes alternatives to reading a line is more than a little wasteful and suggests others are likely forced to implement similar workarounds.  The main thing that has changed over the years is that the `Thread.Sleep()` and `volatile bool` flag in the loop has morphed to a `Task.Delay()` with a cancellation token.  That it is at root a Windows bug is unfortunate, but it still should be fixed, or at least some best practice mitigation provided (a NuGet package?  I have run into this so often that this time I didn\u0027t even think to look).  And having \"CTRL-C\" not behave the way reasonable people including (\"and,\" sometimes) my paying clients expect is not a missing feature, it is a bug.\n\nTelling someone, \"Yeah, just hit CTRL-C\" \"No? You are still stuck?\" \"Are you on Windows?  Okay, trying hitting CTRL-C and hit the enter key a few times,\" is less than ideal.",
                                           "updatedAt":  "2025-03-27T20:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kePmY",
                                           "createdAt":  "2025-03-27T20:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e but it still should be fixed, or at least some best practice mitigation provided\n\nBut, realistically, this isn\u0027t just going to happen because it should happen. Either the Windows limitation needs to be fixed, or someone actually needs to put in a non-trivial amount of time to figure out a reliable workaround.\n\nFor my part, I\u0027ve put probably a combined 2 weeks into trying lots of different ways of working around it to no avail. So if I was in charge of allocating engineering effort on the .NET team, I would absolutely not have anyone waste time on this, and instead apply some gentle pressure on the Windows and/or Windows Terminal teams to fix the problem at the source. (And even more so because, frankly, it just *is* really embarrassing that Windows can\u0027t reliably cancel console input.)",
                                           "updatedAt":  "2025-03-27T20:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kpHpA",
                                           "createdAt":  "2025-03-28T19:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "henricj",
                                           "body":  "Something like this seems to work reliably (probably best hidden behind a check for `System.Console.IsInputRedirected`):\n```\nwhile (!System.Console.KeyAvailable)\n{\n   ... check for early termination ... (e.g., a throw-if-cancelled on a cancellation token if we are using .Sleep() instead of .Delay)\n   await Task.Delay(30, cancellationToken);  // Or Thread.Sleep(30);\n}\nreturn System.Console.ReadKey(true);\n```\n\nFor Windows only, if one can dig out the win32 file handle for the input, then one might be able to use `ThreadPool.RegisterWaitForSingleObject()` to avoid the polling.  Since so much of that is platform-specific, it would be far cleaner to implement it down in `System.Console`\u0027s implementation.",
                                           "updatedAt":  "2025-03-28T19:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kpelA",
                                           "createdAt":  "2025-03-28T20:03:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Note that this issue is about `ReadAsync()`, not `ReadKey()`.\n\nIt\u0027s not hard to deal with cancellation if all you\u0027re using is the latter. But the `ReadKey()` model of console interaction is an unfortunate Windows-ism that differs from the model used by every other OS in common use today (basically VT100); it\u0027s problematic for portability, localization, and performance. Even the Windows console infrastructure has gained more support for the VT100 model in recent years.",
                                           "updatedAt":  "2025-03-28T20:03:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kqkdG",
                                           "createdAt":  "2025-03-28T21:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "henricj",
                                           "body":  "Oh, absolutely, but the least-bad way we found to do something like `ReadLine()` with cancellation is through polling like this.  `System.Console`\u0027s `ReadLine()` winds up in `ReadLineCore()`, which also reads a key at a time.\nhttps://source.dot.net/#System.Console/System/IO/StdInReader.cs,149\nKnowledge of when such measures are required on a given platform seems very much like something that belongs inside `System.Console `(likely in the `ConsolePal` code), not in user code.",
                                           "updatedAt":  "2025-03-28T21:42:18Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Async Console Read Cannot Be Cancelled",
        "labels":  [
                       "area-System.Console",
                       "blocked"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109440",
        "createdAt":  "2024-11-01T03:04:53Z",
        "number":  109440,
        "author":  "liamt19",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T03:24:47Z",
        "body":  "### Description\n\n- According to \u003chttps://github.com/dotnet/runtime/blob/6406b578b43646b0b1d348da00a32d2f61860cf7/src/libraries/System.Console/src/System/ConsolePal.Unix.cs#L455C1-L460C31\u003e, a call to `Console.GetCursorPosition` from thread B can/will be blocked until a call to `Console.ReadLine` in thread A completes. \n- However, when calling `Console.GetCursorPosition` at least twice in the same iteration of a `for` loop in which thread A also calls `Console.ReadLine`, this behavior no longer occurs and from then on B is able to call `Console.GetCursorPosition` without being blocked.\n\n### Reproduction Steps\n\n- Create a new console project, targeting .NET 8 or .NET 9.\n- Run the following:\n\n```cs\nstatic void Main(string[] args)\n{\n    Task.Run(() =\u003e\n    {\n        while (true)\n        {\n            Console.WriteLine($\"CursorPosition = {Console.GetCursorPosition()}\");\n            Thread.Sleep(1000);\n        }\n    });\n\n    for (int i = 0; i \u003c 10; i++)\n    {\n        string? input = Console.ReadLine();\n\n        if (i == 2)\n        {\n            Console.GetCursorPosition();\n            Console.GetCursorPosition();\n        }\n    }\n}\n```\n\n### Expected behavior\n\n\"CursorPosition = ...\" should be printed every second, or remain blocked until the calls to Console.ReadLine() complete.\n\n### Actual behavior\n\nIn each iteration of the loop, nothing is printed until a string is read from `Console.ReadLine()`. However, once `Console.GetCursorPosition()` is called twice in the same iteration of the loop, the \"CursorPosition = ...\" line is printed every second as expected.\n\nFor example, `CursorPosition = ...` is only outputted after a new line is inputted, but after the `GetCursorPosition` lines are executed, the output continues without anything having been entered:\n```\nthe\nCursorPosition = (0, 2)\nquick\nCursorPosition = (0, 4)\nbrown\nCursorPosition = (0, 6)\nCursorPosition = (0, 7)\nCursorPosition = (0, 8)\nCursorPosition = (0, 9)\n```\n\nMoving one of the `GetCursorPosition` calls before the `Console.ReadLine` produces the same result as when both calls are done after the `Console.ReadLine`:\n```cs\nfor (int i = 0; i \u003c 10; i++)\n{\n    Console.GetCursorPosition();\n    string? input = Console.ReadLine();\n    if (i == 2)\n        Console.GetCursorPosition();\n}\n```\nNote the `i == 2` can be any number (and the loop max is irrelevant), this is only to show behavior is consistent before `GetCursorPosition` is called a second time.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- Occurs in both .NET 8.0.403 and 9.0.100-preview.7.24407.12\n- Running Ubuntu 22.04 via WSL2 on Windows 11.\n- Same behavior in debug and release builds\n- Outside of WSL, the task outputs every second as expected on both .NET versions.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbd-fg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SGnRC",
                                           "createdAt":  "2024-11-01T03:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T03:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt35-",
                                           "createdAt":  "2025-02-09T03:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Marking as https://github.com/dotnet/runtime/labels/help%20wanted for assistance getting to a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T03:24:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Console.GetCursorPosition behaves oddly with multiple threads on WSL",
        "labels":  [
                       "area-System.Console",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111057",
        "createdAt":  "2025-01-03T06:31:24Z",
        "number":  111057,
        "author":  "lindexi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC92L0w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "walterlv",
                                            "createdAt":  "2025-01-03T07:59:40Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T09:56:46Z",
        "body":  "### Description\n\nWhen setting the `OutputType` to `WinExe`, the console output is encoded incorrectly, resulting in garbled text.\n\n### Reproduction Steps\n\n1. Create a console project and set the `OutputType` to `WinExe`.\n2. Perform console output.\n\nYou will notice that the encoding of `StandardOutput` in the console is set to `CodePage=0`, which causes other software attempting to capture the application\u0027s output to display garbled text for some Unicode content.\n\nI have written a simple demo program to illustrate this issue. Here is my code:\n\n```csharp\nusing System.Diagnostics;\nusing System.Text;\n\nvar codePage = Console.OutputEncoding.CodePage; // The code page will be 0 when the OutputType is WinExe.\n\nif (args.Length \u003e 0)\n{\n    Console.WriteLine($\"CodePage={codePage} Text=\\u6797\");\n}\nelse\n{\n    var self = Path.Join(AppContext.BaseDirectory, \"YemwearqufeballnoBayboqemli.exe\");\n    var processStartInfo = new ProcessStartInfo(self, \"foo\");\n    processStartInfo.RedirectStandardOutput = true;\n    processStartInfo.StandardOutputEncoding = Encoding.UTF8;\n    var process = Process.Start(processStartInfo)!;\n    var text = process.StandardOutput.ReadToEnd();\n    // You can find the output text is \"CodePage=0 Text=��\"\n    _ = text;\n}\n```\n\nYou can access the entire project code from https://github.com/lindexi/lindexi_gd/tree/0dc56dbf6f635a7cc9cbda295b1cbe40c2eab8d9/Workbench/YemwearqufeballnoBayboqemli\n\n### Expected behavior\n\nWhen setting `OutputType` to `WinExe`, it should still be possible to obtain the correct output encoding.\n\n### Actual behavior\n\nCurrently, it results in garbled text. This directly affects debugging WinExe applications in Rider, and it is not possible to set `Console.OutputEncoding` to UTF-8.\n\nReference: https://github.com/dotnet-campus/dotnetCampus.Logger/pull/32\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm51PaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZJ3QT",
                                           "createdAt":  "2025-01-03T16:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA8xUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elgonzo",
                                                                               "createdAt":  "2025-01-03T16:42:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Why are you asking for console when you explicitly disabled console by using `WinExe`?",
                                           "updatedAt":  "2025-01-03T16:28:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZKB7F",
                                           "createdAt":  "2025-01-03T17:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBGpdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-01-06T01:42:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Why are you asking for console when you explicitly disabled console by using WinExe?\n\nNot having a visible output window is not the same as not having output altogether.\n\n`System.Console` ultimately defaults to a thin wrapper over the standard C input/output streams. On Windows, it additionally uses the Win32 Console APIs to try and query various information and ensure it behaves \"better\" in the default environment.\n\nThere are then many ways for an `exe` to not have a console window, such as by using the `CreateProcess` parameters that disable it. There are equally many way for a `winexe` to have a console, such as by using `AllocConsole`.\n\nThe general issue here looks to be that `Console.OutputEncoding` on Windows is calling `GetConsoleOutputCP` and then not handling the failure result which is `0`, it\u0027s just passing it down instead which will default it to `ANSI`.\n\n-------------\n\nThe general console environment on Windows has changed a lot over recent years, while `System.Console` in .NET hasn\u0027t really had any changes to account for this, for the existence of pseudo-consoles, virtual terminal sequences, system code page differences, etc. Many (but not all) of the Win32 `Console*` APIs are correspondingly no longer recommended for use and have better alternatives. Likewise, the mix of using some `Console*` APIs but abstracting the standard C input/output streams in others leads to various disconnects like the above.\n\nI expect its something that could be fixed, but which is not a trivial task and which has a high chance of impacting existing Windows console applications. -- Some of these nuances also show up on Linux, since the Linux environment for console/terminal handling is a bit different and doesn\u0027t \"cleanly\" map onto what .NET had exposed (which was largely oriented around the Windows APIs from 25 years ago).",
                                           "updatedAt":  "2025-01-03T17:00:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6apA89",
                                           "createdAt":  "2025-01-16T04:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @tannergooding to finish triaging this",
                                           "updatedAt":  "2025-01-16T04:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a5ALb",
                                           "createdAt":  "2025-01-17T15:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@jkotas would you happen to have any context as to why we\u0027re simply passing `GetConsoleOutputCP` along instead of handling its error scenario?\n\nThe code was last touched back in 2016 (https://github.com/dotnet/runtime/commit/7b440e32fa46fff1d25393d75b00950447815e38) but much of it comes from .NET Framework and it doesn\u0027t appear as though the original authors are still on the team.\n\nThere appear to be various mismatches in the paths between what the current encoding is expected to be vs what it actually might be. For example, `SetConsoleOutputEncoding` only calls `SetConsoleOutputCP` if the `Encoding` is not `Unicode.CodePage` which then means that doing something like `Encoding = UTF8` then `Encoding = Unicode` won\u0027t actually change it back to Unicode. Additionally, many of the Win32 `Console*` APIs report failure if no console was actually allocated but we\u0027re inconsistent around whether that failure is handled. For example, we simply pass the output of `GetConsoleOutputCP` down to `GetSupportedConsoleEncoding` and so even though the native call reported `failure` (0) the managed side then treats that as if we requested \"default code page\", typically CP_ACP (ANSI), which leads to issues like this one.\n\nThis seems fixable, but also risky due to the code having been setup this way for so long.",
                                           "updatedAt":  "2025-01-17T15:39:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a5KMj",
                                           "createdAt":  "2025-01-17T16:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we simply pass the output of GetConsoleOutputCP down to GetSupportedConsoleEncoding and so even though the native call reported failure (0) the managed side then treats that as if we requested \"default code page\"\n\nI do not have context why it is done this way. It has been like that since .NET Framework 1.0: https://github.com/SSCLI/sscli_20021101/blob/77d46e0f04f52052a12ac40ce2cf96712c934b3c/clr/src/bcl/system/console.cs#L150\n\nIt is quite possible that the (accidental) fallback to CP_ACP when there is no console attached was considered the right behavior back in 2001 when .NET Framework 1.0 shipped. CP_ACP was the default encoding to use across Windows back then.\n\n\u003e This seems fixable, but also risky due to the code having been setup this way for so long.\n\nWhat do you think the fix should be? Fallback to UTF-8? I do not see a problem with doing that.",
                                           "updatedAt":  "2025-01-17T16:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a5mfk",
                                           "createdAt":  "2025-01-17T16:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDLe2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-01-20T01:50:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e What do you think the fix should be? Fallback to UTF-8? I do not see a problem with doing that.\n\nThis was my initial thought, changing it to fallback to UTF-8 as the default instead to better fit more modern code. This would require modifying `ConsolePal.OutputEncoding` and potentially `EncodingHelper.GetSupportedConsoleEncoding`\n\nBut I think a \"better\" fix would be to also more broadly cleanup the caching that `System.Console` does in relation to how `System.ConsolePal` does the calls to native. This would also entail fixing calls to APIs like `ConsolePal.SetConsoleOutputEncoding` to be an unconditional P/Invoke rather than conditioning it if the target code page isn\u0027t `Unicode`. Instead `Console.set_OutputEncoding` would condition the call to `ConsolePal.SetConsoleOutputEncoding` based on whether the new `value` is out of sync with the cached `s_outputEncoding` (which we already track).\n\nI believe it\u0027s fine for us to state that a user manually modifying the code page, such as by calling the Win32 APIs themselves, is undefined behavior and that they should only do it via `System.Console`. If they were to be in a scenario such as `WinExe` and then do `AllocConsole` to create a new console, they would likewise be responsible for ensuring the code page is set to match the one currently set by Console to ensure the state between them is \"in sync\". -- This gives them a path forward, but doesn\u0027t put any burden on us to make our own code more complex to support such niche edge cases.",
                                           "updatedAt":  "2025-01-17T16:58:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a8B7u",
                                           "createdAt":  "2025-01-18T00:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e conditioning it if the target code page isn\u0027t Unicode\n\nI assume that Win32 console did not support UTF-16 and that\u0027s why we decided to skip the call in that case. Is it no longer the case? if yes, do we know when Win32 console started supporting UTF-16?",
                                           "updatedAt":  "2025-01-18T00:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bm0uM",
                                           "createdAt":  "2025-01-23T18:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e if yes, do we know when Win32 console started supporting UTF-16?\n\n@jkotas as best as I can tell Win32 has supported it since they first introduced the `W` variant APIs. This might be some nuance around the Win98 support that existed in .NET Framework 1.0 and that was never update, much as we had the `Stopwatch.IsHighPrecision` check up until a few years ago, even though it\u0027s been guaranteed to be high precision since WinXP.\n\n-- It looks like WriteConsoleA vs WriteConsoleW is likewise one of the few APIs where the `A` variant doesn\u0027t just forward to the `W` variant after transcoding the text. The actual requirement seems to be simply that `WriteConsole` fails if output was redirected to a file and so we must use the `WriteFile` in that scenario instead; which seems to be what the code is trying to handle in practice.\n",
                                           "updatedAt":  "2025-01-23T18:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bnU9p",
                                           "createdAt":  "2025-01-23T18:56:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOED1OgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-01-23T19:31:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-01-24T01:07:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have tried calling `SetConsoleOutputCP(1200)` in a standalone C console app. It fails for me with return code 0. 1200 is the `Unicode` (UTF-16) codepage. It suggests that we cannot just delete all special casing of Unicode codepage in System.Console.\n\nCalling `SetConsoleOutputCP(65001)` in the same standalone C console app works fine.",
                                           "updatedAt":  "2025-01-23T18:56:52Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Incorrect Encoding in Console Output with WinExe OutputType",
        "labels":  [
                       "area-System.Console",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113895",
        "createdAt":  "2025-03-25T20:40:49Z",
        "number":  113895,
        "author":  "f2bo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T02:09:08Z",
        "body":  "I was looking at doing something slightly more involved with the `Console` class than my occasional calls to `WriteLine` or `ReadKey`. I began to look at some other properties and methods I hadn\u0027t used previously to understand how they should be used and noticed that many did not seem to work as documented. \n\nTo give an example, the `LargestWindowHeight` property, which supposedly should return the height of the largest possible console window measured in rows. However, that didn\u0027t seem to be the case in my tests where it returned a larger number. Or some samples in the documentation that didn\u0027t do what they claimed to do.\n\n- https://learn.microsoft.com/en-us/dotnet/api/system.console.setbuffersize?view=net-9.0#examples\n- https://learn.microsoft.com/en-us/dotnet/api/system.console.setwindowsize?view=net-9.0#examples\n\nIt then occurred to me that perhaps this might be related to the use of the **Windows Terminal** and after switching to the **Windows Console Host**, things began to make a little more sense. \n\nOf course, it would be desirable for all `Console` features to be available in Windows Terminal  given that it is now the default. I also imagine that I\u0027m not the first person to have noticed this and that there\u0027s some technical hurdle to make them work.  However, I\u0027m a little surprised that the documentation and samples do not reflect any of this. At the very least, they should indicate which methods or properties are not supported. \n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpC4NTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kD35m",
                                           "createdAt":  "2025-03-25T20:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-25T20:41:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kGdGF",
                                           "createdAt":  "2025-03-26T03:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The `LargestWindowHeight` property directly calls `GetLargestConsoleWindowSize` from Windows console API. All the console API issues should be reported to Windows Terminal. Duplicate of https://github.com/microsoft/terminal/issues/10337.\n\nAlso according to [documentation](https://learn.microsoft.com/windows/console/getlargestconsolewindowsize), console buffer APIs are not recommended for use in the future.",
                                           "updatedAt":  "2025-03-26T03:34:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kLg1P",
                                           "createdAt":  "2025-03-26T13:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f2bo",
                                           "body":  "@huoyaoyuan Thanks for replying.\n\n\u003e The LargestWindowHeight property directly calls GetLargestConsoleWindowSize from Windows console API. All the console API issues should be reported to Windows Terminal. Duplicate of https://github.com/microsoft/terminal/issues/10337.\n\nThat was just an example of many methods and properties that I tested and didn\u0027t seem to work (e.g. `LargestWindowWidth`, `LargestWindowHeight`, `SetWindowSize`, `WindowWidth`, `WindowHeight`, `SetWindowPosition`, `WindowLeft`, `WindowTop`, ...). I recommend running the samples I linked above keeping in mind that one might do this when new to an API and a sample should hopefully make things clearer.\n\n\u003e Also according to [documentation](https://learn.microsoft.com/windows/console/getlargestconsolewindowsize), console buffer APIs are not recommended for use in the future.\n\nWell, yes, but that\u0027s found in the documentation for the Windows API. There\u0027s no such disclaimer in the .NET [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.console.largestwindowheight?view=net-9.0).  Also, the recommendation applies to virtual environments such as when using SSH. It should make it clear that the Windows Terminal, which \u003cins\u003eis now the default console in Windows\u003c/ins\u003e, is also in this category. \n\nAccording to the .NET docs, all these APIs are supported in Windows and I didn\u0027t see a single mention of the Windows Terminal or any other indication that they might not work as expected. I think something should be done on the .NET side to make this better, even it it\u0027s only adding a note like the one you mention above, but making it clear that it applies to Windows Terminal.\n",
                                           "updatedAt":  "2025-03-26T13:52:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Unexpected behavior of the Console class in Windows Terminal",
        "labels":  [
                       "documentation",
                       "area-System.Console"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114765",
        "createdAt":  "2025-04-17T07:51:22Z",
        "number":  114765,
        "author":  "dehlong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T08:39:09Z",
        "body":  "### Description\n\nHello,\nwhen I use Console.Read(), I get ASCII char 13 (CR) when adding a new line to my stdin. I do not know why this is still the case as CR as line endings haven\u0027t been used since MacOS moved to BSD kernel. I believe that on linux/mac it should be LF and on windows CR+LF. No need to bring CR back again.\n\n### Reproduction Steps\n\n```csharp\npublic static class NumberReader\n{\n    private const int NineAscii = 57;\n    private const int ZeroAscii = 48;\n    private const int MinusAscii = 45;\n    private const int LineFeedAscii = 10;\n    private const int CarriageReturnAscii = 13;\n    private static int _lastChar;\n\n    public static int[] LoadIntoArray(int arrayLength)\n    {\n        int[] numberArray = new int[arrayLength];\n        for (int i = 0; i \u003c arrayLength; ++i)\n        {\n            numberArray[i] = LoadNumber();\n        }\n\n        return numberArray;\n    }\n\n    public static int LoadNumber()\n    {\n        int value = 0;\n        bool negative = false;\n        int chr;    // Console.Read returns int, not char for each character\n\n        do // ignoring non-digits at the beginning\n        {\n            chr = Console.Read();\n        } while (!IsDigit(chr) \u0026\u0026 !IsMinus(chr));\n\n        if (IsMinus(chr))\n        {\n            negative = true;\n            chr = Console.Read();\n        }\n\n        while (IsDigit(chr))\n        {\n            value = 10 * value + CharToDigit(chr);\n            chr = Console.Read();\n        }\n\n        _lastChar = chr;\n\n        if (negative)\n            return -value;\n\n        return value;\n    }\n\n    public static void CleanLine()  // ensures the rest of the line is skipped  \n    {\n        if (_lastChar is -1 or LineFeedAscii or CarriageReturnAscii)\n            return;\n        \n        int chr;\n        do\n        {\n            chr = Console.Read();\n        } while (chr != -1 \u0026\u0026 chr != LineFeedAscii \u0026\u0026 chr != CarriageReturnAscii);\n    }\n    \n    private static bool IsMinus(int chr)\n    {\n        return MinusAscii == chr; \n    }\n\n    private static bool IsDigit(int chr)\n    {\n        if (ZeroAscii \u003c= chr) \n            if (chr \u003c= NineAscii) \n                return true;\n\n        return false;\n    }\n\n    private static int CharToDigit(int chr)\n    {\n        return chr - ZeroAscii;\n    }\n}\n```\nI have created a simple class that reads numbers from stdin (works like scanf in c). When you to write to stdin something like \"6\\\u003cEnter\\\u003e\", you will see that _lastChar will end up being 13 which stands for CR.\n\n### Expected behavior\n\nUse LF on linux for line endings.\n\n### Actual behavior\n\nUses CR as line endings on linux.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nQuite tricky. Pretty much every component of an application needs to handle lying LF signs around. Basically if .NET used CR+LF and LF as line endings, the EOL could be easily detected by LF sign. Now when I see a CR sign, I do not know whether it is the EOL or not.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp6-3eQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nnohD",
                                           "createdAt":  "2025-04-17T08:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-17T08:35:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nnpKt",
                                           "createdAt":  "2025-04-17T08:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOsksg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elgonzo",
                                                                               "createdAt":  "2025-04-17T09:17:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "`Console.Read` gets the characters as-is without any conversion. It can be your terminal writing CRLF into your console.\n\n`Console.ReadLine` interprets either CR, LF or CRLF as a new line. You can refer to its code for more robust handling:\n\nhttps://github.com/dotnet/runtime/blob/b281500fa1f42732455f8d4f06bcb376d88cdfdd/src/libraries/System.Private.CoreLib/src/System/IO/TextReader.cs#L179-L187",
                                           "updatedAt":  "2025-04-17T08:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nomy4",
                                           "createdAt":  "2025-04-17T10:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Pressing the Enter key of a serial terminal normally outputs only a CR to the computer, and a driver in the computer then translates that to LF if so configured.  In the termios API, there is the ICRNL flag for configuring that.\n\nAlthough serial terminals are not so common any more, the APIs that the Console class uses on Linux still work the same way.",
                                           "updatedAt":  "2025-04-17T10:26:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nr7d5",
                                           "createdAt":  "2025-04-17T15:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dehlong",
                                           "body":  "The issue is that while on windows CMD/terminal, it respects CR+LF as new line character and treats the translated value correctly, this is not happening on linux and only CR value is returned.\n\nExample:\nI have the same number reader application on windows and linux. On windows, I add 10, then press return key. It gets translated to CR+LF by windows terminal. Console.Read() reads CR and LF.\nOn linux, I do the same, hitting return results in terminal swapping it for LF as line feed (verified via stty -a) but I still get CR from dotnet. So there is this inconsistency.",
                                           "updatedAt":  "2025-04-18T21:23:42Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Using CR as the end of line character on Linux",
        "labels":  [
                       "area-System.Console",
                       "needs-further-triage"
                   ]
    }
]
