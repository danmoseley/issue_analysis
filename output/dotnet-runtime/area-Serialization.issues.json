[
    {
        "url":  "https://github.com/dotnet/runtime/issues/1391",
        "createdAt":  "2016-05-18T13:00:00Z",
        "number":  1391,
        "author":  "hrushib",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCei5nQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benmurray",
                                            "createdAt":  "2017-05-17T18:35:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alfredmyers",
                                            "createdAt":  "2017-06-06T17:59:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pastafarian",
                                            "createdAt":  "2017-07-05T23:35:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinrusson",
                                            "createdAt":  "2017-11-06T23:56:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ozonni",
                                            "createdAt":  "2018-01-09T13:55:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gcapnias",
                                            "createdAt":  "2018-03-31T10:11:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ashishnegi",
                                            "createdAt":  "2018-04-10T12:22:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fletchsod-developer",
                                            "createdAt":  "2018-04-13T17:48:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucastheisen",
                                            "createdAt":  "2018-07-19T19:31:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "masterpoi",
                                            "createdAt":  "2018-08-13T14:08:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "altso",
                                            "createdAt":  "2018-09-05T14:18:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hanssens",
                                            "createdAt":  "2018-10-03T20:18:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreasFurster",
                                            "createdAt":  "2018-12-26T09:59:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mlocati",
                                            "createdAt":  "2019-01-19T19:52:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrederickBrier",
                                            "createdAt":  "2019-05-01T02:12:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anindya-ct",
                                            "createdAt":  "2019-05-09T06:23:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JDziurlaj",
                                            "createdAt":  "2019-05-10T17:09:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geolom",
                                            "createdAt":  "2019-07-03T16:06:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dimaaan",
                                            "createdAt":  "2019-09-01T12:49:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivandrofly",
                                            "createdAt":  "2019-10-07T08:44:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajruckman",
                                            "createdAt":  "2019-11-12T13:51:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ruant",
                                            "createdAt":  "2019-12-10T10:28:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2020-01-16T10:00:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pleonex",
                                            "createdAt":  "2020-01-28T14:27:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2020-03-28T05:50:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josipjuric",
                                            "createdAt":  "2020-04-12T12:06:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AVTit",
                                            "createdAt":  "2020-04-28T05:23:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JAllman",
                                            "createdAt":  "2020-04-29T14:28:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qcc-na",
                                            "createdAt":  "2020-05-19T13:38:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sauronazm",
                                            "createdAt":  "2020-05-21T11:44:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jpsfs",
                                            "createdAt":  "2020-08-13T13:56:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aldass",
                                            "createdAt":  "2020-09-22T04:31:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MatthewBeardmore",
                                            "createdAt":  "2020-10-06T23:40:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moinessim",
                                            "createdAt":  "2020-10-30T15:04:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andyesys",
                                            "createdAt":  "2021-02-22T12:59:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Havunen",
                                            "createdAt":  "2021-03-16T11:45:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wilfriedb",
                                            "createdAt":  "2021-03-18T11:04:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ddavisso4",
                                            "createdAt":  "2021-03-24T00:03:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rwdalpe",
                                            "createdAt":  "2021-05-03T22:29:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "casperOne",
                                            "createdAt":  "2021-05-12T01:08:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2021-06-14T13:19:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-11-10T19:04:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "laurentkempe",
                                            "createdAt":  "2021-11-23T07:07:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jinek",
                                            "createdAt":  "2021-12-22T15:21:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Maneea",
                                            "createdAt":  "2022-01-08T21:21:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rummelsworth",
                                            "createdAt":  "2022-01-12T16:36:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zahirtezcan-bugs",
                                            "createdAt":  "2022-03-03T13:11:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2022-03-07T10:34:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vuizur",
                                            "createdAt":  "2022-04-02T12:02:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deeprobin",
                                            "createdAt":  "2022-05-25T08:38:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iadgovuser29",
                                            "createdAt":  "2022-05-28T14:04:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2022-06-02T12:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffdahl",
                                            "createdAt":  "2022-06-06T14:36:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danglund",
                                            "createdAt":  "2022-07-08T13:10:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Liwoj",
                                            "createdAt":  "2022-08-07T21:11:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amorch",
                                            "createdAt":  "2022-08-11T12:54:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarcoMedrano",
                                            "createdAt":  "2022-09-28T18:31:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LevYas",
                                            "createdAt":  "2022-11-08T12:46:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jarrettgilliam",
                                            "createdAt":  "2023-03-20T13:36:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "the-ress",
                                            "createdAt":  "2023-04-03T00:36:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "silvagpe",
                                            "createdAt":  "2023-04-28T20:46:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2023-05-09T23:40:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "branko-d",
                                            "createdAt":  "2023-05-10T08:42:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-brant",
                                            "createdAt":  "2023-05-31T14:45:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soroshsabz",
                                            "createdAt":  "2023-07-05T17:47:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksadowski",
                                            "createdAt":  "2023-08-08T07:09:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sungam3r",
                                            "createdAt":  "2023-08-31T04:34:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-10-11T20:51:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "furqansafdar",
                                            "createdAt":  "2023-11-07T05:56:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "prcdpr",
                                            "createdAt":  "2023-11-27T15:36:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lanayx",
                                            "createdAt":  "2024-01-29T13:46:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frankhaugen",
                                            "createdAt":  "2024-06-24T21:11:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2024-07-07T16:51:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pmaslan",
                                            "createdAt":  "2025-01-29T15:32:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bassem-mf",
                                            "createdAt":  "2025-03-21T17:05:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luizen",
                                            "createdAt":  "2025-05-27T15:35:05Z"
                                        }
                                    ],
                          "totalCount":  76
                      },
        "updatedAt":  "2025-02-05T07:44:01Z",
        "body":  "We use xsd.exe to generate C# classes based on xml schema. At present there is no xsd.exe tool to generate CoreCLR compliant code and hence code generation cannot be fully automated as part of the build at the moment. \n\nPlease let us know plan/timeline for availability of the same.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm2qQOw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMDIwMzM4Ng==",
                                           "createdAt":  "2016-05-19T01:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshfree",
                                           "body":  "Related tracking issue for XmlSchema in CoreFX https://github.com/dotnet/corefx/issues/2342\n\n/cc @piotrpMSFT @krwq @sepidehMS \n",
                                           "updatedAt":  "2016-05-19T01:19:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMDIyODQ2MQ==",
                                           "createdAt":  "2016-05-19T05:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shmuelie",
                                           "body":  "The code XSD.exe generates is pretty much .NET Core safe, at least in my usage. What have you seen that\u0027s not usable?\n",
                                           "updatedAt":  "2016-05-19T05:04:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMDQ4Njc2NQ==",
                                           "createdAt":  "2016-05-20T00:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRq2lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shmuelie",
                                                                               "createdAt":  "2016-05-20T00:38:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markembling",
                                                                               "createdAt":  "2016-11-10T17:24:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alfredmyers",
                                                                               "createdAt":  "2017-06-06T17:57:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GiorgioG",
                                                                               "createdAt":  "2017-06-22T04:30:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tolgamalachi",
                                                                               "createdAt":  "2020-06-30T15:18:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-07T10:34:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "krwq",
                                           "body":  "@SamuelEnglard, AFAIK there are couple of attributes which do not exist on .NET Core which makes automating the tool harder.\n\n@hrushib, currently I\u0027d just add the missing attributes and treat them as no-ops so that your generated code compiles - it won\u0027t be ideal solution but should unblock you for now.\n\nOur current plan is to bring XmlSchema back first and then proceed from there. Unfortunately I can\u0027t give you any specifics at this time :-( We currently did not have any prior requests for xsd.exe so we put it on our backlog. It\u0027s really valuable feedback to know that this is needed and being actively used as part of the build.\n",
                                           "updatedAt":  "2016-05-20T00:21:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMDQ4OTMyNQ==",
                                           "createdAt":  "2016-05-20T00:38:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shmuelie",
                                           "body":  "@krwq Very possible. I am using it as far as feedback that it\u0027s in use 😄 \n",
                                           "updatedAt":  "2016-05-20T00:38:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1Mjc1Nzc5OA==",
                                           "createdAt":  "2016-10-10T22:01:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Now we have CodeDOM we do want to take a look at this for 1.2. Not immediately though.\n",
                                           "updatedAt":  "2016-10-10T22:01:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4Mjg4MzUzNw==",
                                           "createdAt":  "2017-02-27T22:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@weshaggard if we did this, how would we ship the exe? would it have to go in the shared framework?",
                                           "updatedAt":  "2017-02-27T22:52:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4Mjg5MTQ4MQ==",
                                           "createdAt":  "2017-02-27T23:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXELBw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2022-05-15T10:40:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zehavibarak",
                                                                               "createdAt":  "2024-01-19T12:27:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jduchateau",
                                                                               "createdAt":  "2024-02-16T15:47:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "shmuelie",
                                           "body":  "why not make it part of `dotnet` tooling?",
                                           "updatedAt":  "2017-02-27T23:28:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4MjkwNjY0MA==",
                                           "createdAt":  "2017-02-28T00:52:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003e@weshaggard if we did this, how would we ship the exe?\r\n\r\nThe majority of the tools are part of the SDK or CLI so I would expect it to ship in one of those 2 places. ",
                                           "updatedAt":  "2017-02-28T00:52:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTg3NTc3MA==",
                                           "createdAt":  "2017-05-16T18:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODL9ULg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanielFriesacher",
                                                                               "createdAt":  "2019-10-28T12:44:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "DanielFriesacher",
                                                                               "createdAt":  "2019-10-28T12:45:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CoderGeoff",
                                                                               "createdAt":  "2019-10-29T18:18:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hugufc",
                                                                               "createdAt":  "2020-04-20T17:26:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilfriedb",
                                                                               "createdAt":  "2021-03-18T11:02:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "furqansafdar",
                                                                               "createdAt":  "2023-11-07T06:15:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "Jonathan34",
                                           "body":  "I also need XmlCodeExporter to be ported to .net core (2.0).\r\nAny ETA or workaround for that?\r\nThis is mostly what I use.\r\n\r\n```\r\nexporter.GetType().GetProperty\r\nexporter.ExportTypeMapping\r\n```\r\n\r\nSystem.Xml.Serialization.XmlCodeExporter does not exist in .net core.",
                                           "updatedAt":  "2017-05-16T18:40:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxOTgwNzY5Mg==",
                                           "createdAt":  "2017-08-02T21:43:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODorx-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-09-01T12:52:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2024-07-07T16:53:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "fletchsod-developer",
                                           "body":  "The milestone said future.  \r\n\r\nFor people who been stuck 2 years and still counting.  This might help but it\u0027s all in .NET framework, not .NET Core. \r\n\r\nhttp://mikehadlow.blogspot.com/2007/01/writing-your-own-xsdexe.html\r\nhttps://github.com/codaxy/xsd2\r\n",
                                           "updatedAt":  "2017-08-03T12:59:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyOTMxMjA4Mw==",
                                           "createdAt":  "2017-09-13T22:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYS2Qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unionthugface",
                                                                               "createdAt":  "2022-04-15T17:26:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "HakanL",
                                           "body":  "Not sure if this is the right place for this comment, but I have a huge xsd-generated CS file (out of all of Amazon\u0027s XSDs). It compiles fine, but when I try to serialize an object using XmlSerializer then I get a PlatformNotSupportedException, saying it can\u0027t generate the temporary assemblies. This is on .NET Core 2.0. I bet something is up with the generated CS file, if I copy relevant parts out to a new file and use that then it works fine. Can it be due to the size of the classes, or what would trigger the XmlSerializer to try to build a temporary assembly?",
                                           "updatedAt":  "2017-09-13T22:12:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NDQ5NjE3MQ==",
                                           "createdAt":  "2017-11-15T06:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbergen",
                                           "body":  "I would like to be able to build a customizable XSD to C# converter, and looking at the latest recommendations, I should be using `XsdDataContractImporter` (together with `XmlSchemaSet` and `CSharpCodeProvider`), which is not available.",
                                           "updatedAt":  "2017-11-15T06:13:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDU1NDE1NA==",
                                           "createdAt":  "2017-12-30T16:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPOgOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filippobottega",
                                                                               "createdAt":  "2018-01-27T08:16:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gcapnias",
                                                                               "createdAt":  "2018-03-31T10:13:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ashishnegi",
                                                                               "createdAt":  "2018-04-10T12:14:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-09-01T12:56:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blenderfreaky",
                                                                               "createdAt":  "2019-10-03T00:44:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petersgiles",
                                                                               "createdAt":  "2021-11-10T01:03:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vuizur",
                                                                               "createdAt":  "2022-04-02T11:52:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LevYas",
                                                                               "createdAt":  "2022-11-08T12:36:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CtrlAltDeleteMeNot",
                                                                               "createdAt":  "2025-04-22T13:38:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  null,
                                           "body":  "\u003e on Oct 11, 2016\r\n\u003e Not immediately though.\r\n\r\nDoes it mean NEVER or sometime after 2029? Please SHIP the stuff if it isn\u0027t a rocket science and doesn\u0027t require more than few hours of work. Delaying this kind of petty stuff is only letting down folks who are actually using the product, \"Not immediately\" even from majority\u0027s use-case doesn\u0027t explain the intensity of of hundreds of other use-cases that are relying on xsd.exe.\r\n\r\nWill it be a dontet-cli tool?",
                                           "updatedAt":  "2017-12-30T16:15:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDEwNzM1NA==",
                                           "createdAt":  "2018-04-10T13:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hrushib",
                                           "body":  "@weshaggard, @danmosemsft what is present recommendation for generating C# classes based on xml schema for CoreCLR projects built on Linux?",
                                           "updatedAt":  "2018-04-10T13:56:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDE2NjQ0Nw==",
                                           "createdAt":  "2018-04-10T16:35:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCf42NA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkmiller",
                                                                               "createdAt":  "2018-08-31T15:40:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoZell",
                                                                               "createdAt":  "2020-04-09T08:06:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2022-06-02T12:56:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "meixger",
                                           "body":  "@hrushib I\u0027m using https://github.com/mganss/XmlSchemaClassGenerator successfully.",
                                           "updatedAt":  "2018-04-10T16:35:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDE4NDUxNg==",
                                           "createdAt":  "2018-04-10T17:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAVEOUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shmuelie",
                                                                               "createdAt":  "2018-04-11T01:07:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@hrushib if you\u0027re doing it in automated way then we do not have any way to do that, if you\u0027re planning to generate and modify it by hand you can generate them on full framework on Windows and with minimal modification they should be usable.",
                                           "updatedAt":  "2018-04-10T17:33:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MTE1NTcwNg==",
                                           "createdAt":  "2018-04-13T14:36:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hrushib",
                                           "body":  "@krwq, I am looking forward for automation as this is expected to happen with build. We are waiting for this support for almost couple of years now. Absence of this support is pushing us to use workaround of manual updation of this file using xsd.exe and checkin for builds triggered on Linux, as full framework tool can\u0027t be used there :(.\r\n\r\nCan you provide plans/timelines for this feature to be available on CoreCLR?\r\n",
                                           "updatedAt":  "2018-04-13T14:36:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MTE2MTU0OQ==",
                                           "createdAt":  "2018-04-13T14:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODor49Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeadManPL",
                                                                               "createdAt":  "2020-09-29T14:40:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2021-12-22T14:21:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2022-05-15T10:41:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2022-06-02T12:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2024-07-07T17:28:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  null,
                                           "body":  "`dotnet-xscgen` is released from https://github.com/mganss/XmlSchemaClassGenerator, you can reference it in your netcoreapp2.0 project:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cDotNetCliToolReference Include=\"dotnet-xscgen\" Version=\"2.0.*\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nand then run it as `dotnet xscgen --help` in the project directory.\r\n\r\nWith dotnet 2.1\u0027s CLI, we will also be able to install it as standalone app (outside the project context): `dotnet tool install dotnet-xscgen --tool-path MyTools` then use it as `MyTools/dotnet-xscgen.exe --help` or `dotnet tool install dotnet-xscgen --global` and use it as `dotnet xscgen --help`.\r\n",
                                           "updatedAt":  "2018-04-13T14:55:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MTIxMjI1Nw==",
                                           "createdAt":  "2018-04-13T17:48:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@hrushib we currently do not have plans for xsd.exe",
                                           "updatedAt":  "2018-04-13T17:48:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Mzk4NjA1Ng==",
                                           "createdAt":  "2018-04-24T15:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fletchsod-developer",
                                           "body":  "Does the `dotnet-xscgen` read in the C# model and validate the data dynamically inside the C# script instead?\r\n\r\nIf not then what DotNetCore component should I be looking for that does this with XML Schema Set, XmlReader, XmlReaderSetting, etc. stuff for this kind of XML Schema validation?",
                                           "updatedAt":  "2018-04-24T18:59:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODgxNjgzMg==",
                                           "createdAt":  "2018-09-05T17:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "cc: @zhenlan who\u0027s team owns the xsd.exe",
                                           "updatedAt":  "2018-09-05T17:37:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NTI2MzYzNw==",
                                           "createdAt":  "2019-01-17T17:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCk4FNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-01-17T18:05:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TonyHenrique",
                                                                               "createdAt":  "2019-01-17T20:14:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gandersson",
                                                                               "createdAt":  "2019-02-01T11:23:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zvrba",
                                                                               "createdAt":  "2019-02-06T08:35:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zombinome",
                                                                               "createdAt":  "2019-03-18T09:05:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rliberoff",
                                                                               "createdAt":  "2019-05-23T09:14:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TFTomSun",
                                                                               "createdAt":  "2019-07-04T14:59:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QuantumDeveloper",
                                                                               "createdAt":  "2019-08-02T17:27:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "blenderfreaky",
                                                                               "createdAt":  "2019-10-03T00:50:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danieljoris",
                                                                               "createdAt":  "2020-01-01T22:03:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "danieljoris",
                                                                               "createdAt":  "2020-01-01T22:14:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elizeusdsantos",
                                                                               "createdAt":  "2020-02-08T13:43:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krlosmederos",
                                                                               "createdAt":  "2020-02-24T20:46:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattMinke",
                                                                               "createdAt":  "2020-05-15T19:10:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aldass",
                                                                               "createdAt":  "2020-09-22T04:57:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephen-zhao",
                                                                               "createdAt":  "2020-10-06T22:00:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moinessim",
                                                                               "createdAt":  "2020-11-11T22:59:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "branko-d",
                                                                               "createdAt":  "2020-12-03T17:12:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilfriedb",
                                                                               "createdAt":  "2021-03-27T15:18:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vuizur",
                                                                               "createdAt":  "2022-04-02T11:59:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silvagpe",
                                                                               "createdAt":  "2022-07-02T16:39:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  21
                                                         },
                                           "author":  "TonyHenrique",
                                           "body":  "Also XSD.exe on .NET Core needs to support F# Code generation, better C# enums, better code generation.\r\n\r\nhttps://developercommunity.visualstudio.com/idea/426740/better-xsd-xml-tooling.html\r\n\r\nThis is very important. Please consider this, because it is becoming really critical to have a better XSD -\u003e XML support. Too many governament services rely on messaging via XSD/XML, and this is becoming very complex to tackle with current XSD.exe tool. Also we need XSD.exe to support F# code generation.\r\n\r\nWith this generated code classes (C#, F#) from the XSD  we can then use, for example, Azure Functions to process this XSD-\u003eXML and  send requested data to goverment servers.\r\n\r\nIn Brazil, for example, billions of transactions are using this, by millions of companies (from small to bigger ones). A sample complex XSD schema: http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=ZT5UvIuQ4N4= \r\n\r\n![image](https://user-images.githubusercontent.com/6307623/51356273-bffeaa80-1a98-11e9-9bdb-8e06696edd4f.png)\r\n",
                                           "updatedAt":  "2019-08-26T23:58:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NTMwODg0Mw==",
                                           "createdAt":  "2019-01-17T19:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "cc: @Lxiamail",
                                           "updatedAt":  "2019-01-17T19:51:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTA2ODM0Mg==",
                                           "createdAt":  "2019-08-26T23:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAyMbSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TonyHenrique",
                                                                               "createdAt":  "2019-08-26T23:29:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-09-01T12:44:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kimyw3007",
                                                                               "createdAt":  "2019-10-08T03:17:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "Some investigation is needed first to determine the scope of the work.",
                                           "updatedAt":  "2019-08-26T23:12:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MjUwODg0NQ==",
                                           "createdAt":  "2019-12-06T09:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYS2zQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TonyHenrique",
                                                                               "createdAt":  "2019-12-06T10:48:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meixger",
                                                                               "createdAt":  "2019-12-06T16:36:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-12-08T17:16:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dimaaan",
                                                                               "createdAt":  "2019-12-08T17:16:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ruant",
                                                                               "createdAt":  "2019-12-10T10:28:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pleonex",
                                                                               "createdAt":  "2020-01-28T14:31:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoZell",
                                                                               "createdAt":  "2020-04-09T08:07:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hugufc",
                                                                               "createdAt":  "2020-04-20T17:15:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilfriedb",
                                                                               "createdAt":  "2021-03-18T11:04:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-07T10:36:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-07T10:36:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unionthugface",
                                                                               "createdAt":  "2022-04-15T17:27:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "unionthugface",
                                                                               "createdAt":  "2022-04-15T17:27:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "Rubbiroid",
                                           "body":  "Is there any news or plans? We also need this to be able to migrate to core 3. Banks still love xsd...",
                                           "updatedAt":  "2019-12-06T09:56:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MjY3MTEyNA==",
                                           "createdAt":  "2019-12-06T17:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "We haven\u0027t been able to look at this yet.\r\nWe have several items in the Serialization area that we are looking into for either 5.0 or 3.1 Servicing.",
                                           "updatedAt":  "2019-12-06T17:46:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTQyMTYyOQ==",
                                           "createdAt":  "2020-02-12T21:16:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDk42g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leowebb",
                                                                               "createdAt":  "2020-05-27T01:37:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "borgez",
                                                                               "createdAt":  "2020-05-28T01:01:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonsagara",
                                                                               "createdAt":  "2020-06-01T16:17:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tolgamalachi",
                                                                               "createdAt":  "2020-06-30T15:18:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlreid",
                                                                               "createdAt":  "2020-09-18T07:46:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "talanc",
                                                                               "createdAt":  "2020-09-24T00:17:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilfriedb",
                                                                               "createdAt":  "2021-03-18T11:04:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddavisso4",
                                                                               "createdAt":  "2021-03-24T00:17:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rwdalpe",
                                                                               "createdAt":  "2021-05-03T22:29:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mTrilby-innoveo",
                                                                               "createdAt":  "2021-06-15T09:03:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maddindeiss",
                                                                               "createdAt":  "2021-10-27T13:47:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petersgiles",
                                                                               "createdAt":  "2021-11-10T01:03:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danglund",
                                                                               "createdAt":  "2022-01-12T11:49:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-03-07T10:36:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unionthugface",
                                                                               "createdAt":  "2022-04-15T17:27:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silvagpe",
                                                                               "createdAt":  "2022-07-02T16:39:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hvester",
                                                                               "createdAt":  "2023-01-17T06:40:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "furqansafdar",
                                                                               "createdAt":  "2023-11-07T06:06:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luizen",
                                                                               "createdAt":  "2023-11-24T16:39:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sminakanoorkumarCV",
                                                                               "createdAt":  "2024-08-28T10:48:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leus",
                                                                               "createdAt":  "2025-01-22T14:42:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  21
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "Increasing the priority for this task.",
                                           "updatedAt":  "2020-02-12T21:16:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODU3NTI2Ng==",
                                           "createdAt":  "2020-03-13T06:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theRainbird",
                                           "body":  "I need to create typed DataSet code, because I\u0027m planning to port a very large ERP application (over 1 million lines of code) to .NET Core, which massively uses typed DataSets. Without xsd.exe or another way to create type DataSet code, a port is not possible.",
                                           "updatedAt":  "2020-03-13T06:42:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMDUzMjM1NQ==",
                                           "createdAt":  "2020-03-18T10:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mv10-work",
                                           "body":  "@theRainbird With all due respect, I hope they do not implement `DataSet` support, it\u0027s a very outdated model. I just finished migrating a huge, messy legacy application off `DataSet` to more sensible generics and LINQ, so I sympathize with you, but from what I\u0027ve seen, that pain-point hasn\u0027t been a convincing argument for adding old-world features to modern .NET. (If they do implement it, I hope they finally fix the atrocious [`DBNull` exception mess](https://social.msdn.microsoft.com/Forums/en-US/2e1c4146-994a-4ebb-b090-fd271aebb880/you-can-have-stronglytyped-datatables-or-you-can-have-nullable-columns-choose-one?forum=adodotnetdataset) introduced way back in the .NET 2.0 release.)",
                                           "updatedAt":  "2020-03-18T10:07:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODc0NzgyNg==",
                                           "createdAt":  "2021-03-27T15:15:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwBFxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rummelsworth",
                                                                               "createdAt":  "2021-03-29T19:47:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YounesCheikh",
                                                                               "createdAt":  "2021-04-06T16:25:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raboud",
                                                                               "createdAt":  "2021-04-16T16:40:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ziriax",
                                                                               "createdAt":  "2021-04-26T09:15:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mTrilby-innoveo",
                                                                               "createdAt":  "2021-04-27T13:40:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexeyEvlampiev",
                                                                               "createdAt":  "2021-04-28T08:57:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ismaelhamed",
                                                                               "createdAt":  "2021-04-29T06:30:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AustinWise",
                                                                               "createdAt":  "2021-05-16T23:28:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddavisso4",
                                                                               "createdAt":  "2021-05-25T13:28:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unionthugface",
                                                                               "createdAt":  "2022-04-15T17:28:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "furqansafdar",
                                                                               "createdAt":  "2023-11-07T06:18:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sminakanoorkumarCV",
                                                                               "createdAt":  "2024-08-28T10:47:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "wilfriedb",
                                           "body":  "TL;DR: I\u0027m trying to get xsd.exe to run under .NET 6.0. As a prerequisite, I\u0027ve made some changes to XML.Serialization. Am I heading in the right way?\r\n\r\nBecause our team also has a need for for xsd.exe (or a similar tool) I went looking what is needed to revive xsd.exe. I found the source code on [ReferenceSource](https://github.com/microsoft/referencesource), and tried to build it against .NET Core 5.0. This didn\u0027t work because one type was missing: XmlCodeExporter. So I forked dotnet/runtime and copied the missing type from .NET 4.8 into it. Of course, this caused a small cascade of other missing types, and I added them as well. After adding a lot of nullable annotations and null checks I now have a version of XML.Serialization that builds with these old/new types included.\r\n\r\nMy work so far:\r\n[XmlCodeExporter add](https://github.com/wilfriedb/runtime/tree/add-code-exporter-to-xml-serializer)\r\n\r\nThere\u0027s still some work to be done: I couldn\u0027t find the resource strings in ReferenceSource (maybe someone else can find them), unit tests need to be added, and the coding style of the copied code is really old fashioned, maybe that could be cleaned up as well.\r\n\r\nBefore I spend more time in this effort, Is this modification (actually, just re-adding some classes) something that the .NET team will be going to accept a pull request for? Or has the team an other solution in mind?\r\n\r\nI would love to hear from you.\r\n\r\n",
                                           "updatedAt":  "2021-03-27T15:17:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODc1MjE0MQ==",
                                           "createdAt":  "2021-03-27T15:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@HongGit ",
                                           "updatedAt":  "2021-03-27T15:48:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTQxOTk3NQ==",
                                           "createdAt":  "2021-05-03T17:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCV6VnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2021-12-22T14:25:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vuizur",
                                                                               "createdAt":  "2022-04-02T12:00:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "theRainbird",
                                           "body":  "@mv10-work \r\n\u003e With all due respect, I hope they do not implement `DataSet` support, it\u0027s a very outdated model.\r\n\r\nNobody forces you to use this old school stuff.\r\nBut if you have to migrate a large application with over a million lines of code to .NET 5+, it is very bad if you have to write everything from scratch.",
                                           "updatedAt":  "2021-05-03T17:45:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTgzOTA2OQ==",
                                           "createdAt":  "2021-05-09T16:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCB4d3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddavisso4",
                                                                               "createdAt":  "2021-05-27T21:21:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mTrilby-innoveo",
                                                                               "createdAt":  "2021-06-15T09:03:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "petersgiles",
                                                                               "createdAt":  "2021-11-10T01:04:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidxavier77",
                                           "body":  "Hi,\r\n  dotnet core 6.0  is out. Is it in or out  ?",
                                           "updatedAt":  "2021-05-09T16:28:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTM2MTg5Mw==",
                                           "createdAt":  "2021-06-21T21:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "As @wilfriedb points out [above](https://github.com/dotnet/runtime/issues/1391#issuecomment-808747826), the source code for xsd.exe in the .Net Framework is open sourced. If anyone wants to take a stab at a .Net Core implementation, our team is unable to prioritize this at this time.",
                                           "updatedAt":  "2021-06-21T21:37:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTM2NzUyNQ==",
                                           "createdAt":  "2021-06-21T21:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e I couldn\u0027t find the resource strings in ReferenceSource (maybe someone else can find them), \r\n\r\nhttps://github.com/microsoft/referencesource/blob/master/xsd/XsdRes.txt\r\n\r\n\u003e coding style of the copied code is really old fashioned,\r\n\r\nAs you can probably imagine, that\u0027s quite typical of the C# written around .NET 1.0, 20 years ago now. 🙂 The style you see in .NET Core repos was cleaned up substantially when the project began.",
                                           "updatedAt":  "2021-06-21T21:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46A9Dr",
                                           "createdAt":  "2021-11-18T22:34:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sanghel-payoff",
                                           "body":  "... maybe the kind soul that tackles this will eventually fix https://github.com/dotnet/wcf/issues/1274 also",
                                           "updatedAt":  "2021-11-18T22:34:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47lYtu",
                                           "createdAt":  "2021-12-22T15:23:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "Second option is to use [mono xsd tool](https://manpages.debian.org/stretch/mono-devel/xsd.1)",
                                           "updatedAt":  "2021-12-22T15:23:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DxK1N",
                                           "createdAt":  "2022-05-25T08:40:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUlAog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rummelsworth",
                                                                               "createdAt":  "2022-05-25T15:44:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "laurentkempe",
                                                                               "createdAt":  "2022-08-30T09:14:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanSmith",
                                                                               "createdAt":  "2022-12-29T22:40:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vdaron",
                                                                               "createdAt":  "2023-03-09T08:05:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2023-10-11T20:52:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-01-30T02:23:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Is it at all still relevant to have a tool like `xsd.exe` which exports the code to files?\r\n\r\nThat would be a good use case for a source generator imo (indicated by a `XsdGeneratorAttribute`),",
                                           "updatedAt":  "2022-05-25T08:40:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IL6lW",
                                           "createdAt":  "2022-08-10T18:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lancelotbronner",
                                           "body":  "I still like the idea of a CLI tool to work with xsd, I\u0027ll try and modernize it but if it needs to touch the runtime then I don\u0027t think I\u0027ll be able to do much.",
                                           "updatedAt":  "2022-08-10T18:15:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N6anA",
                                           "createdAt":  "2022-11-08T12:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LevYas",
                                           "body":  "@deeprobin \r\n\u003e Is it at all still relevant to have a tool like `xsd.exe` which exports the code to files?\r\n\r\nSure, almost all the XSD I had were not 100% correct, I had to modify the resulting classes to make them actually work with the third-party APIs.\r\nFrom a tool like xsd.exe, I expect to produce compact and readable code, which I can reason about and modify if needed.\r\n",
                                           "updatedAt":  "2022-11-08T12:44:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gsQTe",
                                           "createdAt":  "2023-07-05T17:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soroshsabz",
                                           "body":  "ITNOA\r\n\r\nAny update? does XSD.exe source code available?",
                                           "updatedAt":  "2023-07-05T17:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gsQlf",
                                           "createdAt":  "2023-07-05T17:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soroshsabz",
                                           "body":  "Ok I found it https://github.com/microsoft/referencesource/tree/master/xsd\r\n\r\n:D",
                                           "updatedAt":  "2023-07-05T17:49:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0FZH",
                                           "createdAt":  "2023-07-06T20:24:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfMldg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "zehavibarak",
                                                                               "createdAt":  "2024-01-19T12:28:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "SelvinPL",
                                                                               "createdAt":  "2024-04-23T09:04:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "nalinasanka",
                                           "body":  "Hi All,\r\n\r\nI was able to generate XSD file for .Net Core library using below code. If anyone is keen to generate xsd file for .Net Core instead of using \"xsd.exe\", hope this code will be handy.\r\n\r\n```\r\ntry\r\n{\r\n    XmlSchemas schemas = new XmlSchemas();\r\n    XmlSchemaExporter exporter = new XmlSchemaExporter(schemas);\r\n\r\n    XmlTypeMapping mapping = new XmlReflectionImporter().ImportTypeMapping(typeof(\"Your Class Name\"));\r\n    exporter.ExportTypeMapping(mapping);\r\n\r\n    using (TextWriter writer = new StreamWriter(\"output.xsd\"))\r\n    {\r\n        foreach (XmlSchema schema in schemas)\r\n        {\r\n            schema.Write(writer);\r\n        }\r\n    }\r\n\r\n    Console.WriteLine(\"XSD generated successfully.\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine($\"Error in generating XSD. Error: {ex.Message}\");\r\n}\r\n```\r\n\r\n\"Your Class Name\" --\u003e Needs to replace with your class name which you want to generate XSD schema.\r\n\r\nThanks\r\n",
                                           "updatedAt":  "2023-07-06T20:24:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Qa_Ik",
                                           "createdAt":  "2024-10-18T18:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVOL4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leus",
                                                                               "createdAt":  "2025-01-22T13:47:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cason-wu",
                                                                               "createdAt":  "2025-06-04T01:44:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@StephenMolloy @HongGit Maybe it fits in this month that I start an attempt for an xsd prototype.\nCould you assign me to the feature?\n\nShould we create a new repo for it as a separate tool or what would you suggest?",
                                           "updatedAt":  "2024-10-18T18:11:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QbM9S",
                                           "createdAt":  "2024-10-18T18:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3Y_8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "shmuelie",
                                                                               "createdAt":  "2024-10-21T16:00:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LevYas",
                                           "body":  "Fun fact, since my last comment I changed the way I generate DTOs. I feed an example of XML and XSD schema into ChatGpt and ask it to write minimalistic DTO for it, and it\u0027s very easy to control what attributes are needed and what formatting style should be, what classes should be first. That works surprisingly well, so I abandoned all conversion utilities.",
                                           "updatedAt":  "2024-10-18T18:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bapA7",
                                           "createdAt":  "2025-01-22T14:49:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh3H6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "delixfe",
                                                                               "createdAt":  "2025-02-12T20:50:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lh-ak",
                                                                               "createdAt":  "2025-09-11T14:59:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "leus",
                                           "body":  "Hello,\n\nWe still need to consume / produce files based on XSD schemas that the current version of xsd.exe cannot handle (xsd:import, xsd:include, etc.). Is anybody working this? I know from bad experiences in the past that contributing code to dotnet is a minefield, so I wonder if it is worth to give a try (I see a`help wanted` tag).",
                                           "updatedAt":  "2025-01-22T14:49:53Z"
                                       }
                                   ],
                         "totalCount":  46
                     },
        "title":  "Port xsd.exe to .NET Core",
        "labels":  [
                       "enhancement",
                       "area-Serialization",
                       "help wanted",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1399",
        "createdAt":  "2016-08-04T20:07:39Z",
        "number":  1399,
        "author":  "shmao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T17:06:23Z",
        "body":  "XmlSchemaObject is currently not in the contract. If we add it into the contract, we need to work on this issue.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeTG7yg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MTI3NzY1Ng==",
                                           "createdAt":  "2017-11-01T23:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shmao",
                                           "body":  "XmlSchemaObject is available in Net Standard 2.0. We should consider to make reflection based serialization to support the serialization of the type.",
                                           "updatedAt":  "2017-11-01T23:54:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55MbvK",
                                           "createdAt":  "2024-04-03T00:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "I think this was closed by mistake? There is no comment here, and the NYI exception still exists in the code and it looks to me like we can de/serialize XmlSchema with the ILGen serializer, but run into the NYI when running with the reflection-based serializer.",
                                           "updatedAt":  "2024-04-03T00:02:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[ReflectionBasedXmlSerializer] To Support Serializing XmlSchemaObject",
        "labels":  [
                       "enhancement",
                       "area-Serialization",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1415",
        "createdAt":  "2017-03-03T19:31:58Z",
        "number":  1415,
        "author":  "sepidehkh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T22:11:36Z",
        "body":  "These are some of the bigger types with low coverage in `System.Xml.Serialization`. It would be great if we could add more tests to reach 80-90% coverage on these:\r\n\r\n- [ ]  System.Xml.Serialization.SoapReflectionImporter 52.4%\r\n- [ ]  System.Xml.Serialization.XmlReflectionImporter 67.2%\r\n- [ ]  System.Xml.Serialization.XmlSchemaExporter 27.5%\r\n- [ ]  System.Xml.Serialization.XmlSchemaImporter 31.6%\r\n- [ ]  System.Xml.Serialization.XmlSchemas 29.4%\r\n- [ ]  System.Xml.Serialization.XmlSerializationReader 49%\r\n- [ ]  System.Xml.Serialization.XmlSerializationWriter 54.1%\r\n\r\nDetailed coverage report:\r\nhttps://ci.dot.net/job/dotnet_corefx/job/master/job/code_coverage_windows/Code_Coverage_Report/",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKhOk6g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDA3OTQ0MQ==",
                                           "createdAt":  "2017-03-03T21:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "xml serialization= area-serialization",
                                           "updatedAt":  "2017-03-03T21:49:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjYwNjIwOQ==",
                                           "createdAt":  "2017-04-07T17:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sepidehkh",
                                           "body":  "Please add test to hit [this block](https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/Serialization/ReflectionXmlSerializationWriter.cs#L901) as well (so that we can track this TODO)",
                                           "updatedAt":  "2017-04-07T17:51:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjc2MzQ2Mg==",
                                           "createdAt":  "2020-02-28T22:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@HongGit To work with @imcarolwang to add test coverage.",
                                           "updatedAt":  "2020-02-28T22:44:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTg2NTIwMA==",
                                           "createdAt":  "2020-10-08T22:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@imcarolwang could you please add this to your team\u0027s todo list?\r\n\r\nThanks!",
                                           "updatedAt":  "2020-10-08T22:56:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTkzMDQ3NA==",
                                           "createdAt":  "2020-10-09T02:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "+ @Benjie-Liu ",
                                           "updatedAt":  "2020-10-09T02:30:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Improve code coverage for System.Xml.Serialization",
        "labels":  [
                       "area-Serialization",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/21016",
        "createdAt":  "2017-04-10T19:48:08Z",
        "number":  21016,
        "author":  "EliPulsifer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAL_YRA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bp74",
                                            "createdAt":  "2017-08-06T15:48:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-03T07:43:50Z",
        "body":  "Immutable collections should support Data Contract Serializer like other collection types.\r\nNot supporting Data Contract Serializer makes Immutable collections unusable in Service Fabric applications. Considering the Service Fabric documentation suggests using immutable types it would be great if the ones supplied by MS worked.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLH5UkQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTk2NTk1NQ==",
                                           "createdAt":  "2017-08-12T08:21:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bp74",
                                           "body":  "I\u0027ve implemented my own ISerializationSurrogateProvider for the immutable types.\r\nMaybe this is helpful for someone else too:\r\nhttps://github.com/bp74/System.Collections.Immutable.Surrogate",
                                           "updatedAt":  "2017-08-12T08:21:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NjQ3NjY4OQ==",
                                           "createdAt":  "2020-12-16T15:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "DataContractSerializer provides built-in contract generation support for standard collections, although I believe we aren\u0027t actively adding new features to that particular component. I defer to the area owners for a final say on this cc @HongGit @StephenMolloy.\r\n\r\nIt does seem though that using surrogate providers should be sufficient to get your use case unblocked.",
                                           "updatedAt":  "2020-12-16T15:29:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add support for Data Contract Serializer to Immutable collections",
        "labels":  [
                       "enhancement",
                       "area-Serialization",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1404",
        "createdAt":  "2017-07-14T11:20:04Z",
        "number":  1404,
        "author":  "Opiumtm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8-H6Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "multiarc",
                                            "createdAt":  "2018-05-13T23:59:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "troplin",
                                            "createdAt":  "2019-10-30T09:48:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aleksandrov",
                                            "createdAt":  "2020-05-04T12:22:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2020-08-15T21:39:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matherm-aboehm",
                                            "createdAt":  "2023-05-11T15:40:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jberezanski-mdg",
                                            "createdAt":  "2024-11-26T12:04:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mpierzynka-mdg",
                                            "createdAt":  "2024-11-26T12:09:07Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-08-08T20:56:56Z",
        "body":  "As for now, `DataContractSerializer` does serialization/deserialization in synchronous style.\r\nBut, `Stream`, `TextWriter` and `TextReader` does have async methods.\r\n\r\nAs async programming is widely used today, to serialize/deserialize data contracts, developer should manually schedule background task to achieve async data contracts serialization/deserialization on stream (which itself does support async I/O out of the box!)\r\n\r\nI propose extend DataContractSerializer to have built-in task-based async serialization/deserialization methods.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Feature request: async DataContractSerializer methods",
        "labels":  [
                       "enhancement",
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24355",
        "createdAt":  "2017-12-05T18:43:17Z",
        "number":  24355,
        "author":  "huanwu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKjz0Q==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-09T16:37:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-08T23:02:26Z",
        "body":  "We need have tests covering DataContractSerializer serializing the following types.\r\nRefer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.\r\ndotnet/runtime#21982 \r\n\r\n- [ ] System.Collections.Generic.LongEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.UInt64Enum]]\r\n- [ ] System.Collections.Generic.EnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.UInt32Enum]]\r\n- [ ] System.Collections.Generic.SByteEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.SByteEnum]]\r\n- [ ] System.Collections.Generic.ShortEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.Int16Enum]]\r\n- [ ] System.Collections.Generic.SortedList`2[[System.Int32],[System.Runtime.Serialization.Formatters.Tests.Point]]\r\n- [ ] System.Collections.ObjectModel.ObservableCollection`1[[System.Int32]] // The implementations between core and netfx are completely different. I don\u0027t think serialization works here without a custom serialization routine\r\n- [ ] System.Collections.ObjectModel.ReadOnlyDictionary`2[[System.Int32],[System.String]]\r\n- [ ] System.Collections.ObjectModel.ReadOnlyObservableCollection`1[[System.Int32]]\r\n- [ ] System.Collections.Specialized.ListDictionary\r\n- [ ] System.Collections.Specialized.StringCollection",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKpsuYg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzYxOTkyNA==",
                                           "createdAt":  "2019-05-17T22:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cojacfar",
                                           "body":  "I\u0027m interested in writing these tests, but I haven\u0027t worked on any real test-writing in this type of Framework. I think your linked file probably provides what I need, will start looking through it and putting together tests for these types. ",
                                           "updatedAt":  "2019-05-17T22:45:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTYzMzM2MA==",
                                           "createdAt":  "2020-10-15T22:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@Cojacfar are you still interested in this?",
                                           "updatedAt":  "2020-10-15T22:59:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDgxMzAyNg==",
                                           "createdAt":  "2020-10-22T23:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@Benjie-Liu  can you please work on this?",
                                           "updatedAt":  "2020-10-22T23:16:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add tests for DataContractSerializer serializing collection types",
        "labels":  [
                       "area-Serialization",
                       "test-enhancement",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24358",
        "createdAt":  "2017-12-05T18:48:01Z",
        "number":  24358,
        "author":  "huanwu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKj0Ew==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-09T16:40:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-08T23:02:19Z",
        "body":  "We need have tests covering DataContractSerializer serializing the following types.\r\nRefer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.\r\ndotnet/runtime#21982\r\n\r\n- [ ] System.Globalization.CompareInfo\r\n- [ ] System.Globalization.SortVersion",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKhOiAg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MDA3NTM4MA==",
                                           "createdAt":  "2017-12-07T19:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@krwq could you have a look? it is not urgent though.",
                                           "updatedAt":  "2017-12-07T19:50:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MDA5NTU5Ng==",
                                           "createdAt":  "2017-12-07T21:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@tarekgh I\u0027ve mixed feeling if this should be Globalization or Serialization issue... @shmao - who\u0027s usually fixing those kind of test gaps?",
                                           "updatedAt":  "2017-12-07T21:11:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTkyOTczMA==",
                                           "createdAt":  "2020-10-09T02:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@Benjie-Liu could you see if we need to add tests here?",
                                           "updatedAt":  "2020-10-09T02:27:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add tests for DataContractSerializer serializing System.Globalization types",
        "labels":  [
                       "area-Serialization",
                       "test-enhancement",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1382",
        "createdAt":  "2019-06-26T17:34:49Z",
        "number":  1382,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-03T18:38:37Z",
        "body":  "https://github.com/dotnet/core-setup/pull/6882/files#diff-dbeccf05edc7e819ff6a62d63a4f44eeL313\r\n\r\nInformation from PR:\r\n\r\n\u003e It looks like starting with https://dev.azure.com/dnceng/internal/_build/results?buildId=231848, we stopped generating data for System.Private.DataContractSerialization. I don\u0027t really know why, but can only assume that it stopped being exercised by our training scenarios.\r\n\r\n\u003e we should probably figure out what changed between 3.0.100-preview7-012505 and 3.0.100-preview7-012521 that would cause us to stop collecting for this assembly.\r\n\r\n\u003e someone should go and figure out if this new behavior (System.Private.DataContractSerialization not being exercised during build/restore/run of dotnet) is intentional or not.\r\n\r\nCC @adiaaida @MichalStrehovsky @brianrob ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSOK2qA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjA3ODQ5OQ==",
                                           "createdAt":  "2019-06-26T23:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "It looks like System.Private.DataContractSerialization.dll was only being trained as part of the HelloWorld IBC scenario, which is the equivalent of:\r\n\r\n```\r\ndotnet new console\r\ndotnet restore\r\ndotnet build\r\ndotnet bin\\...\\HelloWorld.dll\r\n```\r\n\r\nI would recommend that the next step here be to see if the scenario is using ```System.Private.DataContractSerialization``` at all.  I suspect it is not and that explains why no data is being generated.",
                                           "updatedAt":  "2019-06-26T23:16:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDA3NzM4NA==",
                                           "createdAt":  "2019-08-22T21:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "Any update on this issue?\r\n\r\nThe concern was that it makes it harder to hit 3.0 size goals (https://github.com/dotnet/core-setup/pull/6882#issuecomment-504679826), is that still a problem?",
                                           "updatedAt":  "2019-08-22T21:05:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTMxMzc5Mw==",
                                           "createdAt":  "2019-09-13T16:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "It seems like any investigation work on the scenarios or fixes would be in CoreFX, the only Core-Setup change is a config flag--transferring. ",
                                           "updatedAt":  "2019-09-13T16:57:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTMxNDUyNQ==",
                                           "createdAt":  "2019-09-13T16:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Cc @sergiy-k ",
                                           "updatedAt":  "2019-09-13T16:59:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1ODM4NDY5Mg==",
                                           "createdAt":  "2019-11-25T23:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@brianrob It sounds like we just need to add an IBC scenario to train this assembly.\r\n\r\nIs there a process for adding IBC scenarios, does someone own that space?\r\nWe just need to know how to proceed.\r\n\r\nThanks.",
                                           "updatedAt":  "2019-11-25T23:17:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzQ5MTc5Nw==",
                                           "createdAt":  "2019-12-09T23:43:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@brianrob @MichalStrehovsky @sergiy-k @dagood \r\nWe do need to plug this gap, can any of you point me to who I should talk to about adding an IBC scenario?",
                                           "updatedAt":  "2019-12-09T23:43:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzUwMjY1Mg==",
                                           "createdAt":  "2019-12-10T00:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "@tmat @adiaaida, sorry if this ping is incorrect, but I\u0027ve seen you involved with IBC/PGO optimization data in Arcade. Can you help @StephenBonikowsky out?\r\n\r\n\u003e We do need to plug this gap, can any of you point me to who I should talk to about adding an IBC scenario?\r\n\r\n",
                                           "updatedAt":  "2019-12-10T00:26:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzU2OTY4Ng==",
                                           "createdAt":  "2019-12-10T01:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michellemcdaniel",
                                           "body":  "I\u0027m no longer on the perf team, but I still have context. @brianrob is the right person to speak with, but I can work with @StephenBonikowsky to help him add a new scenario. If you have a scenario that will exercise the code paths that you need to gather data for, I can show you how to add it as a scenario.",
                                           "updatedAt":  "2019-12-10T01:58:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDgwNDgyOA==",
                                           "createdAt":  "2020-10-22T22:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@brianrob can you please guide us what needs to be done here?",
                                           "updatedAt":  "2020-10-22T22:49:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDgxNzI4Mg==",
                                           "createdAt":  "2020-10-22T23:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "Let me ask you to hold off on this for a few weeks.  There is some discussion happening around this work that may impact the set of steps to be taken.  Thansk.",
                                           "updatedAt":  "2020-10-22T23:30:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc426VWD",
                                           "createdAt":  "2021-09-16T21:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@HongGit lets try to keep this in 7.0 and assign it to a vendor.",
                                           "updatedAt":  "2021-09-16T21:25:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5It-hi",
                                           "createdAt":  "2022-08-18T21:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@HongGit ",
                                           "updatedAt":  "2022-08-18T21:59:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5It_o0",
                                           "createdAt":  "2022-08-18T22:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "For this one, I recommend reaching out to @mangod9 and @davidwrighton to understand how to on-board to the PGO training system.",
                                           "updatedAt":  "2022-08-18T22:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I4gq-",
                                           "createdAt":  "2022-08-22T18:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "The PGO training system is operated and maintained by @DrewScoggins. Start with him.",
                                           "updatedAt":  "2022-08-22T18:44:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I4rao",
                                           "createdAt":  "2022-08-22T19:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "We should start with verifying the currently generated IBC data to ensure that we are not getting coverage for this assembly. If we are still not gathering any data @StephenMolloy or @HongGit do y\u0027all have any simple scenarios that you know exercise code paths that cover this assembly? If we have that we can start to get that into the IBC training process.",
                                           "updatedAt":  "2022-08-22T19:26:57Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Investigate effects of missing IBCData for System.Private.DataContractSerialization",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1413",
        "createdAt":  "2019-09-19T21:26:46Z",
        "number":  1413,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T22:29:21Z",
        "body":  "System.Private.Xml contains all of the code for generating an assembly as the core logic behind the sgen tool:\r\nhttps://github.com/dotnet/corefx/tree/master/src/Microsoft.XmlSerializer.Generator\r\nThe vast majority of the functionality here isn\u0027t used by anything other than sgen, which calls XmlSerializer.GenerateSerializer via reflection, and is the only caller of that method.  This functionality should be removed from XmlSerializer in System.Private.Xml and moved into sgen.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaCE4WA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDEwNTQ5OQ==",
                                           "createdAt":  "2019-11-06T01:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tamlin-mike",
                                           "body":  "I maintain code that uses System.Xml.Serialization.XmlSerializer.GenerateSerializer (directly, not using reflection) for a case sgen is unable to handle.\r\n\r\nCould completely ripping this function out break f.ex. the Microsoft.XmlSerializer.Generator nuget package?",
                                           "updatedAt":  "2019-11-06T03:07:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5Mjc2MjQ5OA==",
                                           "createdAt":  "2020-02-28T22:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenBonikowsky",
                                           "body":  "@mconnew Please comment on this issue and resolve as appropriate.",
                                           "updatedAt":  "2020-02-28T22:40:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzE4OTMzMg==",
                                           "createdAt":  "2020-04-21T13:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e I maintain code that uses System.Xml.Serialization.XmlSerializer.GenerateSerializer (directly, not using reflection)\r\n\r\n@tamlin-mike - can you explain this more? Are you only doing that on the .NET Framework? This method is `internal` in .NET Core.\r\n\r\nhttps://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs#L596",
                                           "updatedAt":  "2020-04-21T13:44:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzQ3MDcxMA==",
                                           "createdAt":  "2020-04-21T23:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tamlin-mike",
                                           "body":  "\u003e This method is internal in .NET Core.\r\n\r\nYeah, that turned out to be the problem. It was public in Framework. Unfortunately the code started to depend on that functionality. Then the need arose to use some other assembly compiled to netstandard 2.0 IIRC, and much gnashing of teeth ensued. Ended up throwing the MS tool out and writing our own serialization generator (-frontend) to get the required cross-platform compatibility we needed (fw + netstd). Unfortunately that now depends on that older specific version of the mentioned nuget package -- that will likely be removed sooner or later, or become incompatible with later versions of some runtime -- so probability is high we\u0027ll either be forced to rewrite it all from scratch or simply burn that use of XML at the stake. To quote Alien \"Nuke it from space. Only way to be sure\".",
                                           "updatedAt":  "2020-04-21T23:56:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTc4NDc1NQ==",
                                           "createdAt":  "2020-05-20T23:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "When I spoke with @mconnew it seemed that this issue would take a lot of work, and is pretty low on the priority list.\r\n\r\nWith #35547, we have addressed the size concern with having to root `XmlSerializer.GenerateSerializer`. I\u0027m going to remove the `linkable-framework` label, as this doesn\u0027t issue no longer needs to be tracked in the linkablity work.",
                                           "updatedAt":  "2020-05-20T23:10:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oIThY",
                                           "createdAt":  "2023-10-04T14:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003chttps://github.com/dotnet/runtime/issues/56589\u003e seems to be a duplicate of this issue.\r\n\r\nMicrosoft.XmlSerializer.Generator has `\"rollForward\": \"LatestMajor\"`, which makes it use the XmlSerializer.GenerateSerializer method of the highest installed version of .NET Runtime (PR \u003chttps://github.com/dotnet/runtime/pull/40216\u003e, causes \u003chttps://github.com/dotnet/runtime/issues/90913\u003e).  If the XmlSerializer.GenerateSerializer method were deleted from a future version of .NET Runtime, then installing that would indeed break the build of projects that use an older version of Microsoft.XmlSerializer.Generator, even if those projects also use an older version of .NET SDK.\r\n\r\nI think the C# code generation should be moved into the Microsoft.XmlSerializer.Generator package.  The XmlSerializer.GenerateSerializer method would then be called only by older versions of Microsoft.XmlSerializer.Generator, and its implementation should be reverted to a maximally compatible version, perhaps to how it was in .NET Core 3.1.0.  Each project that wants Microsoft.XmlSerializer.Generator to generate code that uses newer features of C# or .NET Runtime, such as Span\\\u003cT\u003e, would have to upgrade Microsoft.XmlSerializer.Generator.",
                                           "updatedAt":  "2023-10-04T14:35:31Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "XmlSerializer.GenerateSerializer should not be in System.Private.Xml",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/630",
        "createdAt":  "2019-12-06T21:06:53Z",
        "number":  630,
        "author":  "mconnew",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBx-sZw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rob3c",
                                            "createdAt":  "2021-07-09T20:44:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T22:28:59Z",
        "body":  "The runtime config for the Microsoft.XmlSerializer.Generator specifies to run on netcoreapp2.0. When reflecting over application assembly to generator serializer, if the assembly is referencing for example NetCoreApp3.0, the version of System.Runtime referenced by the library can\u0027t be loaded.  \r\nThe fix is to change the assembly loading code to use System.Reflection.MetadataLoadContext to reflect over the application assembly. We do use `Type.GetCustomAttributes` at least in sgen.cs so we would also need to make changes to use `Type.GetCustomAttributesData`. XmlSerializer.GenerateSerializer does the bulk of the work so there might need to be changes there as well.\r\n\r\nOriginal issue: dotnet/corefx#41286\r\n\r\n- [ ] Port to 3.1.x",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ9aOWg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Mjg2MzUyNQ==",
                                           "createdAt":  "2020-07-23T07:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vzalamea",
                                           "body":  "I have a netstandard2.0 project with a reference.cs file generated by the Visual Studio WCF web service reference generator.  We point the tool to a WSDL to generate the reference.cs file.  The project is referenced by a netcoreapp3.1 web application.\r\n\r\nI gave up on the Microsoft.XmlSerializer.Generator due to the error:\r\nMethod \u0027System.Xml.Serialization.XmlSerializer.GenerateSerializer\u0027 was not found. This is likely because you are using an older version of the framework. Please update to .NET Core v2.1 or later.\r\n\r\nSo I added the package \"dotnet-svcutil.xmlserializer\" instead and it successfully created a myproject.XmlSerializers.dll file with all the read/write logic for serialization/deserialization.  And I did notice a major reduction in start up time when this file is present in my bin folder.\r\n\r\nSo what is the difference between Microsoft.XmlSerializer.Generator and dotnet-svcutil.xmlserializer?  ",
                                           "updatedAt":  "2020-07-23T07:39:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODM3MjU3MA==",
                                           "createdAt":  "2020-08-04T04:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I happened to be looking at this and prototyped a bit ran into more places that  use GetCustomAttributes.\r\n\r\nhttps://github.com/dotnet/runtime/blob/6991ccd1e8cdfb640a74be7db54e81f456406d1f/src/libraries/Microsoft.XmlSerializer.Generator/src/Sgen.cs#L263\r\nhttps://github.com/dotnet/runtime/blob/6991ccd1e8cdfb640a74be7db54e81f456406d1f/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlAttributes.cs#L101\r\nhttps://github.com/dotnet/runtime/blob/6991ccd1e8cdfb640a74be7db54e81f456406d1f/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlAttributes.cs#L200\r\nhttps://github.com/dotnet/runtime/blob/6991ccd1e8cdfb640a74be7db54e81f456406d1f/src/libraries/System.Private.Xml/src/System/Xml/Serialization/Types.cs#L1227\r\n\r\nAll of these were hit by XmlSerializer.Generator.  There are other uses that may also be significant, but I stopped after looking at these:\r\nhttps://github.com/search?q=GetCustomAttributes+repo%3Adotnet%2Fruntime+path%3A%2Fsrc%2Flibraries%2FSystem.Private.Xml%2Fsrc%2FSystem%2FXml\u0026type=Code\u0026ref=advsearch\u0026l=\u0026l=\r\n\r\nThose would all be challenges to porting this code to use MetadataLoadContext.  You\u0027d need to fix all of them that are hit by XmlSerializer.Generator, and even once fixed it would limit XmlSerializer.Generatorto only work on the framework version with those fixes.\r\n",
                                           "updatedAt":  "2020-08-04T04:28:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.XmlSerializer.Generator fails to generate serializer for assemblies not targeting netstandard2.0",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32555",
        "createdAt":  "2020-02-19T20:14:52Z",
        "number":  32555,
        "author":  "mconnew",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEFN1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2020-03-27T16:44:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "L-Sypniewski",
                                            "createdAt":  "2020-07-10T04:40:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MatthewBeardmore",
                                            "createdAt":  "2020-10-06T23:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wyn1995",
                                            "createdAt":  "2020-11-12T02:31:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Misiu",
                                            "createdAt":  "2020-11-20T10:31:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tan90909090",
                                            "createdAt":  "2021-03-31T13:08:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paul-michalik",
                                            "createdAt":  "2021-04-22T07:44:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2021-05-26T20:57:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tibel",
                                            "createdAt":  "2021-07-28T15:18:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Socolin",
                                            "createdAt":  "2021-09-14T19:19:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Etiennepicard",
                                            "createdAt":  "2021-09-14T19:24:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianrondeau",
                                            "createdAt":  "2021-09-14T20:32:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jcoqueret",
                                            "createdAt":  "2021-09-15T08:27:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vvopenka",
                                            "createdAt":  "2022-04-27T11:22:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidStahl97",
                                            "createdAt":  "2022-07-11T06:40:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinchalet",
                                            "createdAt":  "2022-07-25T01:30:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doxxx",
                                            "createdAt":  "2022-08-18T18:38:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristopherHaws",
                                            "createdAt":  "2022-08-30T19:58:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vanillajonathan",
                                            "createdAt":  "2023-02-24T12:49:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WhatzGames",
                                            "createdAt":  "2023-03-28T07:39:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "js8080",
                                            "createdAt":  "2023-04-06T20:46:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-04-12T21:01:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matherm-aboehm",
                                            "createdAt":  "2023-05-11T15:41:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quintonv",
                                            "createdAt":  "2023-08-04T09:12:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tardezyx",
                                            "createdAt":  "2023-08-12T11:44:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2023-08-12T20:03:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RaviVadera",
                                            "createdAt":  "2023-08-13T14:32:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artyom-p",
                                            "createdAt":  "2023-10-08T13:26:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "plykkegaard",
                                            "createdAt":  "2023-10-27T16:59:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nd1012",
                                            "createdAt":  "2024-02-29T14:19:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "phanuel",
                                            "createdAt":  "2024-09-02T10:44:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luigi-iss",
                                            "createdAt":  "2024-09-02T13:30:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cvetomir-todorov",
                                            "createdAt":  "2024-10-03T10:01:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thieum",
                                            "createdAt":  "2025-05-15T19:30:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jburgos115",
                                            "createdAt":  "2025-06-17T12:19:44Z"
                                        }
                                    ],
                          "totalCount":  35
                      },
        "updatedAt":  "2025-08-08T21:00:19Z",
        "body":  "To be able to support use of IAsyncEnumerable with WCF contracts (dotnet/wcf#4166), WCF needs support for async serialization. Without this, we would simply be moving which call stack a blocking thread is waiting on.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOccd6eg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDA1MzczOA==",
                                           "createdAt":  "2020-06-15T10:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xsoheilalizadeh",
                                           "body":  "Could we have this in .NET 5?",
                                           "updatedAt":  "2020-06-15T10:47:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTA5NTY3NQ==",
                                           "createdAt":  "2020-11-20T10:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "I need both Serialize and Deserialize to be async.\r\nCurrently, we have `GetFromJsonAsync\u003cT\u003e` extension method for HttpClient.\r\nI\u0027d like to create a similar method, but for XML (yes, some old services are still returning XML)",
                                           "updatedAt":  "2020-11-20T10:49:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42czH_",
                                           "createdAt":  "2021-09-06T10:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0q6IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Socolin",
                                                                               "createdAt":  "2021-09-14T19:20:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tan90909090",
                                                                               "createdAt":  "2021-11-11T14:37:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atinks",
                                                                               "createdAt":  "2021-11-24T19:03:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "victor-rocha",
                                                                               "createdAt":  "2022-02-24T16:59:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StruninIhor",
                                                                               "createdAt":  "2022-06-08T20:43:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DavidStahl97",
                                                                               "createdAt":  "2022-07-11T06:40:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "schehlmj",
                                                                               "createdAt":  "2022-09-21T15:18:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "natalie-o-perret",
                                                                               "createdAt":  "2022-09-27T19:58:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jan-Zimmermann",
                                                                               "createdAt":  "2022-11-30T07:05:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Diemaco",
                                                                               "createdAt":  "2023-02-08T18:28:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cvetomir-todorov",
                                                                               "createdAt":  "2024-10-03T10:01:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "Misiu",
                                           "body":  "Hope this will be added in 7.0 🤞🤞🤞",
                                           "updatedAt":  "2021-09-06T10:02:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EAqwH",
                                           "createdAt":  "2022-05-30T11:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "Any updates on this?",
                                           "updatedAt":  "2022-05-30T11:12:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WDHNV",
                                           "createdAt":  "2023-02-24T13:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0q6Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergioocode",
                                                                               "createdAt":  "2023-04-03T21:24:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manne",
                                                                               "createdAt":  "2023-04-11T15:55:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "orcnz",
                                                                               "createdAt":  "2023-05-27T09:50:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2023-08-12T09:26:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jdavis-scottlogic",
                                                                               "createdAt":  "2023-08-22T15:40:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antoniofreire",
                                                                               "createdAt":  "2023-08-28T18:38:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artyom-p",
                                                                               "createdAt":  "2023-10-08T13:25:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "plykkegaard",
                                                                               "createdAt":  "2023-10-27T17:00:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nd1012",
                                                                               "createdAt":  "2024-02-29T14:19:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "memiamp",
                                                                               "createdAt":  "2024-03-14T11:39:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cvetomir-todorov",
                                                                               "createdAt":  "2024-10-03T10:01:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "vanillajonathan",
                                           "body":  "### Background and motivation\r\nI would like to asynchronously deserialize streams.\r\n\r\n### API Proposal\r\n```diff\r\nnamespace System.Xml.Serialization;\r\n\r\npublic class XmlSerializer\r\n{\r\n+    public async Task\u003cobect?\u003e DeserializeAsync(Stream stream)\r\n}\r\n```\r\n\r\nOr perhaps even with generics?\r\n```diff\r\nnamespace System.Xml.Serialization;\r\n\r\npublic class XmlSerializer\r\n{\r\n+    public async Task\u003cT?\u003e DeserializeAsync\u003cT\u003e(Stream stream)\r\n}\r\n```\r\n\r\n### API Usage\r\n```csharp\r\nvar serializer = new XmlSerializer(typeof(Document));\r\nvar document = await serializer.DeserializeAsync(stream);\r\n```\r\n",
                                           "updatedAt":  "2023-02-24T13:04:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jQlf2",
                                           "createdAt":  "2023-08-04T09:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quintonv",
                                           "body":  "I\u0027m surprised this is still not in .Net 7. I have seen it requested quite a few times over the years...\r\nI personally would love it too as I have previously encountered thread starvation in Web.Api in my Web Host",
                                           "updatedAt":  "2023-08-04T09:12:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qSgRB",
                                           "createdAt":  "2023-10-27T17:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "plykkegaard",
                                           "body":  "Will it be available on NET 8?\r\nWould be nice to have this\r\nMy current project handles a lot of xml deserialization",
                                           "updatedAt":  "2023-10-27T17:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qVAHq",
                                           "createdAt":  "2023-10-28T18:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elTRexx",
                                           "body":  "From what I read here, I am correct to suppose there is no XML asynchronous (de)serialization available ?",
                                           "updatedAt":  "2023-10-28T18:22:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qVB_f",
                                           "createdAt":  "2023-10-28T18:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is a monumental amount of work, it\u0027s not happening for .NET 8 (.NET 8 is done). I\u0027m not sure it will happen for 9.",
                                           "updatedAt":  "2023-10-28T18:59:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qV6n6",
                                           "createdAt":  "2023-10-29T14:30:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "plykkegaard",
                                           "body":  "No problem, thanks for replying and clarification",
                                           "updatedAt":  "2023-10-29T14:30:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q4Mqb",
                                           "createdAt":  "2023-11-03T21:18:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQzOpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TeoChirileanu",
                                                                               "createdAt":  "2023-12-29T20:29:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mconnew",
                                           "body":  "Generally you don\u0027t need async deserialization. It\u0027s typically only needed when you have a list of items in the XML and you want to handle them one at a time. If you have a single object you wish to deserialize, you would asynchronously read from the input into a buffer and then synchronously deserialize from the buffer. If reading from a file, you know the size ahead of time so can allocate a buffer big enough. If someone over something like an Http request, hopefully you have a content length so you can allocate the correct sized buffer. WCF internally has a special Stream implementation for when HTTP chunked encoding is used where we have an array of byte array buffers to avoid over allocating or doing copy on grow. Then we use that Stream with the serializers. The scenario which is useful for WCF is when you are sending or returning `IEnumerable\u003cFoo\u003e` with your service. In this case your input is larger than the item you want to deserialize. You can\u0027t asynchronously read from the incoming data the right amount because there\u0027s no way to know you have enough data for the next object to be deserialized without implementing some XML parsing and doing look ahead. It\u0027s in this scenario where we end up doing sync over async with the serializer directly reading from the input stream. Unless you have a scenario like this, you don\u0027t need an async serializer. Chances are you can do something else like WCF does to avoid it.",
                                           "updatedAt":  "2023-11-03T21:18:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqWXG",
                                           "createdAt":  "2024-01-23T21:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0q6YA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "memiamp",
                                                                               "createdAt":  "2024-03-14T11:39:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cvetomir-todorov",
                                                                               "createdAt":  "2024-10-03T10:02:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "udlose",
                                           "body":  "@mconnew `JsonSerializer` has async Deserialization. \r\n\r\nAlso, I wonder why `IXmlSerializable` only has sync methods for extending your own custom serialization.  I understand you can write your own interface, but it seems like this is basic enough where `IXmlSerializable` should include async signatures.",
                                           "updatedAt":  "2024-01-23T21:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqiDV",
                                           "createdAt":  "2024-01-23T21:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT0ecg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-01-23T22:59:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mconnew",
                                           "body":  "There\u0027s a few problems with adding async signatures to IXmlSerializable, some resolvable, some not currently resolvable yet. The first is that you can\u0027t add any methods to an interface after it\u0027s been released. Take the situations where you have implemented IXmlSerializable as it is today in your app, then in a newer version of .NET new async methods are added. Someone runs your app against the newer .NET release and you\u0027ll get an exception from the CLR because your class which declares it implements IXmlSerializable is missing some methods. This can be resolved by creating a new interface for async variations.  \r\nThe next problem is that XmlSerializer and DataContractSerializer can\u0027t currently use an async implementation. They only have synchronous serialization implementations. If a new interface was created with async methods, the serializers would have to call them and block the thread while waiting for the task to complete. You don\u0027t gain any benefit from there being async methods.  \r\n\r\nOnce this issue has is implemented, we should look to add IAsyncXmlSerializble. It will need to be done thoughtfully though. Not all XmlReader/XmlWriter implementations support being called asynchronously. We would need to decide how to handle that. E.g. should we expect async and sync implementations of the read and write methods to exist and call and use the sync implementation when the reader/writer only support sync calls? Or should we leave that up to the implementor to decide? In your own app, you might know that only an async supporting reader/writer will be used so you don\u0027t want to be required to implement both. But that might still be okay as you can just throw NotImplementedException.\r\n\r\nBasically it\u0027s a good idea once XmlSerializer/DataContractSerializer have an async implementation, but currently it\u0027s premature to add. Definitely something I hadn\u0027t explicitly thought of though so thanks for the suggestion.\r\n\r\n",
                                           "updatedAt":  "2024-01-23T21:48:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xq3XS",
                                           "createdAt":  "2024-01-23T23:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0q6dA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "memiamp",
                                                                               "createdAt":  "2024-03-14T11:40:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cvetomir-todorov",
                                                                               "createdAt":  "2024-10-03T10:02:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "udlose",
                                           "body":  "@mconnew  thanks for your quick reply.  You\u0027d mentioned \r\n\r\n\u003e Generally you don\u0027t need async deserialization.\r\n\r\nWhy would you consider JsonSerialization different than XmlSerialization since JsonSerialization does have an async implementation?",
                                           "updatedAt":  "2024-01-23T23:01:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xrbIl",
                                           "createdAt":  "2024-01-24T01:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "I explained most of it in the sentences that follow that statement, but I did miss out a bit of my rationale of why that approach is okay. Basically if you have an object graph to deserialize, the amount of memory that\u0027s needed for the buffer to hold the XML is going to be a similar order of magnitude as the final set of objects you will end up with, especially if you use a binary XML reader/writer with a persisted dictionary. If you have multiple items you will need to deserialize, eg receiving requests to a web service, using a buffer pool will prevent you stressing the GC. In the majority of cases, it\u0027s going to be fine to asynchronously read the entire XML into an in-memory buffer and then deserialize from that (which doesn\u0027t benefit from being async). As I mentioned, the only time that\u0027s not going to work is if you have a list of objects you are going to deserialize and you will handle them one at a time. For example, you have a time series result set of data from running an experiment and your data file is 500MB big. But you only need to process one result item at a time. In that case you would have a loop deserializing each one item, processing it, discarding the instance and going back for the next item. It\u0027s a lot harder to asynchronously read the input in that case and the naive implementation would end up doing synchronous reads. In many cases you can still work around that if it\u0027s a problem. If there\u0027s a known upper bound on how big each item is, you could create a custom stream which uses double buffering to ensure it always has enough data pre-read before deserializing the next item. In which case you have a loop which asynchronously ensure there\u0027s enough data pre-read, deserialize, process item, discard item, rinse and repeat.  \r\n\r\nThere\u0027s a small set of scenarios where you can\u0027t avoid synchronous reading, and they are going to be rare.",
                                           "updatedAt":  "2024-01-24T01:42:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xrby4",
                                           "createdAt":  "2024-01-24T01:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "To put it another way, having an async code path on a serializer allows you to write simpler code and not worry about things like item size when using a list, or buffer pooling. Not having it doesn\u0027t mean you have to read synchronously though.",
                                           "updatedAt":  "2024-01-24T01:45:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xr8cc",
                                           "createdAt":  "2024-01-24T04:10:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "@mconnew I guess my point was that async deserialization was added for json. Why should xml be any different? I may be streaming from a database for example in which case async is important. ",
                                           "updatedAt":  "2024-01-24T04:10:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xtC07",
                                           "createdAt":  "2024-01-24T08:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "plykkegaard",
                                           "body":  "Xml has an exponential growth by each record compared to json\r\nEg UBL catalogs is one of the worst examples I have ever seen\r\nI assume this has to be taken into consideration?",
                                           "updatedAt":  "2024-01-24T08:31:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xu9mT",
                                           "createdAt":  "2024-01-24T13:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0q6pQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "memiamp",
                                                                               "createdAt":  "2024-03-14T11:40:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cvetomir-todorov",
                                                                               "createdAt":  "2024-10-03T10:02:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "udlose",
                                           "body":  "\u003e Xml has an exponential growth by each record compared to json Eg UBL catalogs is one of the worst examples I have ever seen I assume this has to be taken into consideration?\r\n\r\nI would think that is a perfect example why async xml deserialization would be helpful.",
                                           "updatedAt":  "2024-01-24T13:35:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xx1EB",
                                           "createdAt":  "2024-01-24T20:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4EZ2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FabianAronsson3bits",
                                                                               "createdAt":  "2024-08-09T08:18:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paule96",
                                                                               "createdAt":  "2024-10-25T12:16:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mconnew",
                                           "body":  "@udlose, async deserialization wasn\u0027t added for json, the serializer you are referring to was written with an async implementation to begin with. It\u0027s a significantly different design. When XmlSerializer was first created, back in .NET Framework 1.1, it used codegen and called csc.exe to compile the serializer on demand. The async/await way of doing async didn\u0027t exist until 9 years later with .NET Framework 4.5. At some point a new implementation was added which used IL generation as it was faster to generate with a fallback to the old code gen implementation if that failed. When DataContractSerializer was created, it was made with only an IL generation mode. When everything was ported to .NET Core, there was no csc.exe available, the compiler is Roslyn, comes from nuget, and isn\u0027t available at runtime. So we had to drop the code gen implementation in XmlSerializer and use IL generation only. When .NET Native came around, there was a compile time code generator to generate the serializer to C#, but that had many limitations. As everything is being compiled as a single component all at once, name clashes between transitive types was a constant problem for developers which had no easy way to solve (we could likely solve it today using file scoped classes). It also ran into the problem of it being an imprecise mechanism to make sure all needed serializers were pre generated without also bloating the app by generating serializers for everything. The solution was a reflection based serializer. That reflects over the types and calls things like PropertyInfo.GetValue or FieldInfo.SetValue to do its work. I won\u0027t go into the details of what needs to change otherwise this would end up being a large blog post, but the design needs some changes to make it more performant. It\u0027s not bad, but it\u0027s worse than IL gen in most scenarios. So that\u0027s where we currently are today. As I\u0027m sure you\u0027re aware, to do async/await, you need to do that all the way through the entire call stack. Have you ever looked at the state machine that the compiler generates when you make a method async and use an await statement? [This is a great blog post](https://devblogs.microsoft.com/dotnet/how-async-await-really-works/) with everything you ever wanted to know about who async/await works. Search for a code sample of an implementation of `MoveNext()`, it\u0027s not the first one, it\u0027s a few later, and you will see how complicated that is, when written in C#. Now imagine trying to rewrite a serializer which is implemented using Ref.Emit that emits individual IL instructions and now hand craft generating that state machine code dynamically for a serializer using IL, and trying to debug that implementation. It\u0027s not feasible without a large team and a large amount of time. The solution is going to be to fix the issues with the reflection based serializer to improve its perf (I believe we can get better than the IL implementation) and fix a few feature gaps we have, and then add async capability to that. As that is c# code instead of meta programming via IL generation, it\u0027s a lot more manageable scope of work. Also bear in mind that XML is a lot more complicated than JSON, so the implementation is larger than a JSON serializer would be too.   \r\n\r\nComparing adding async/await capability to a more complicated library that was designed to target a development/runtime environment significantly different from how things are today with a from scratch library designed for todays development environment is comparing apples to oranges.  \r\n\r\n@plykkegaard, I can\u0027t think of a situation where Xml would grow exponentially compared to JSON. There are some scenarios where it would grow slower than JSON. For example, XML supports references, so if you have a lot of duplicated data, an XML document can be a lot smaller than the equivalent JSON would be, despite being a more verbose data format (which is largely negated if you use binary XML serialization). To achieve something similar with JSON you would have to manually express references in your .NET object model. Can you provide me a link to an example as it\u0027s possible my imagination just isn\u0027t good enough. I would expect a large complicated XML document to result in a large complicated .NET object model, but I\u0027m willing to be proven wrong.",
                                           "updatedAt":  "2024-01-24T20:45:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xx3p6",
                                           "createdAt":  "2024-01-24T20:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "@udlose, I don\u0027t see how streaming from a SQL server changes things. The approaches I mentioned earlier should be sufficient. Either you want to deserialize the entire Stream to a single object graph, in which case asynchronously download the entire Stream contents into memory and then deserialize the buffer. Use a buffer pool to remove GC load. If you have like a list of items, then pre-read an amount that is larger than an item can be and deserialize a single item, handle it, rinse and repeat.",
                                           "updatedAt":  "2024-01-24T20:54:12Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Add async serialization support to XmlSerializer and DataContractSerializer",
        "labels":  [
                       "enhancement",
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36921",
        "createdAt":  "2020-05-23T08:16:17Z",
        "number":  36921,
        "author":  "NUnitTester",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7YoAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjlakixi",
                                            "createdAt":  "2020-07-27T09:15:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cjbush",
                                            "createdAt":  "2024-09-27T20:24:30Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-19T17:13:46Z",
        "body":  "The problems ocure while transforming a project from .NET Framework to .NET Core 3.1 with \r\nMicrosoft.XmlSerializer.Generator 2.2.0.\r\nIt seems to be a bug in the generator. There should be no reason to analyze types that are not serialzed.\r\n\r\nThe following example works fine with .NET Frameworks but fails in .NET Core.\r\n\r\n```  \r\n    public class A\r\n    {\r\n        public enum Error\r\n        { no = 0 }\r\n\r\n        [XmlElement(\"value\")] \r\n        public string V;\r\n    }\r\n    public class B\r\n    {\r\n        public enum Error\r\n        { no = 0 }\r\n\r\n        [XmlElement(\"value\")] \r\n        public string V;\r\n    }\r\n```\r\n\r\nError Message:\r\nThere was an error reflecting type \u0027N.B.Error\u0027.\r\nTypes \u0027N.B.Error\u0027 and \u0027N.A.Error\u0027 both use the XML type name, \u0027Error\u0027, from namespace \u0027\u0027. Use XML attributes to specify a unique XML name and/or namespace for the type.\r\n\r\nIt seems not to be neccessary but it does not help anything:\r\n```  \r\n    public class A\r\n    {\r\n        [XmlType(\"Error\", Namespace = \"A\")]\r\n        public enum Error\r\n        { no = 0 }\r\n\r\n        [XmlElement(\"value\")] \r\n        public string V;\r\n    }\r\n    public class B\r\n    {\r\n        [XmlType(\"Error\", Namespace = \"B\")]\r\n        public enum Error\r\n        { no = 0 }\r\n\r\n        [XmlElement(\"value\")] \r\n        public string V;\r\n    }\r\n```\r\nError Message:\r\nThe top XML element \u0027Error\u0027 from namespace \u0027\u0027 references distinct types N.A.Error and N.B.Error. Use XML attributes to specify another XML name or namespace for the element or types.\r\n\r\nThere is no way out ... I found nothing.\r\n**Please solve the problem urgent.**",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuCdF-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTg2NzkzMw==",
                                           "createdAt":  "2020-10-08T23:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHjEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:39:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@NUnitTester  this is a known issue.  However, the fix quite complex, will need to impact the design.\r\n\r\nAt the moment, could you please place these classes in separate assemblies and generate two separate serialization assemblies?    ",
                                           "updatedAt":  "2020-10-08T23:05:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMTIyNDg5NQ==",
                                           "createdAt":  "2020-11-03T16:10:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NUnitTester",
                                           "body":  "Thanks for our idea.\r\nSorry, but using different assemblies means very much work for me, because it is not so simple as in the example. There are many classes, some of them very large or nested. I think the dependancies beetween them are quite complicated.\r\n \r\nI have had a look on that issue and have started debugging. The Problem I found was a dictionary with a string as key. The key is the name of the class, but if the string will be the fullname with namespaces, it will work. I didn\u0027t go in deep, but this seems not be very difficulty.\r\n\r\nBy the way, there are no tests with namespaces?\r\n\r\n**So it is urgent for me.**",
                                           "updatedAt":  "2020-11-03T16:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j4pGm",
                                           "createdAt":  "2023-08-12T08:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHi8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cjbush",
                                                                               "createdAt":  "2024-09-27T20:20:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thomasrea0113",
                                                                               "createdAt":  "2025-06-18T18:53:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:39:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MatthiasPlayground",
                                           "body":  "I won\u0027t say that is is correct to put it to WCF because serialisation can be done without WCF in many usecases. \r\nIt is normal for larger hierarchies to have same named types in different locations. This is for me a must and therefor namespaces are the solution to solve such a problem.\r\nSplitting in more assemblies is as mentioned not always possible. \r\nOf course it is an design problem what must be solved. The name of a type is not the key, the key is the namespace together with the type. What about using namespace1.namespace2.typename as key? Sounds easy and would solve the problem. Seems to me not a big change, or why is it?\r\n\r\nI feel that that is an big error not to handle namespaces because it is part of XML spec.\r\nCould you please give a outlook when it will be solved.",
                                           "updatedAt":  "2023-08-12T08:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JTcOK",
                                           "createdAt":  "2024-08-22T02:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHi6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cjbush",
                                                                               "createdAt":  "2024-09-27T20:17:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:39:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danielo-unity3d",
                                           "body":  "Hi. Uh, I have hit this issue (using dotnet 8 on Linux), but it annoyed me enough that I tried to debug it.\r\nI modified my schema to add Xml namespaces to every class, and found that the XmlReflectionImporter, used by the SGen program, apparently fails to pickup, or consider, these namespaces when constructing the typemap [here](https://github.com/dotnet/runtime/blob/c0bb81807a3f4aeecfc63da31a32cc963ff0532c/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlReflectionImporter.cs#L260).\r\nChanging the code to this instead apparently fixes the problem (although I don\u0027t know to what extent yet):\r\n```C#\r\nstring? typeNs = null;\r\nif (a.XmlType != null \u0026\u0026 a.XmlType.Namespace != null)\r\n    typeNs = a.XmlType.Namespace;\r\nroot ??= a.XmlRoot;\r\nstring ns = typeNs ?? root?.Namespace ?? defaultNamespace ?? _defaultNs;\r\n```\r\nCan anyone help? (I mean, it will take me a while to confirm this, and get to the point I could assemble a PR)",
                                           "updatedAt":  "2024-08-22T02:52:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KfOD7",
                                           "createdAt":  "2024-09-01T17:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHi3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cjbush",
                                                                               "createdAt":  "2024-09-27T20:17:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:39:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MatthiasPlayground",
                                           "body":  "could be simplified to \r\n\r\n```\r\nroot ??= a.XmlRoot;\r\nstring ns = a.XmlType?.Namespace ?? root?.Namespace ?? defaultNamespace ?? _defaultNs;\r\n```",
                                           "updatedAt":  "2024-09-01T17:48:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N2-Rr",
                                           "createdAt":  "2024-09-27T20:24:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHgrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:34:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cjbush",
                                           "body":  "@HongGit @danielo-unity3d  Any updates on this? It\u0027s a huge problem for us as well and simply splitting the schema across multiple serialization assemblies isn\u0027t a realistic workaround for anything more complex than a trivial example.",
                                           "updatedAt":  "2024-09-27T20:24:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x8SGU",
                                           "createdAt":  "2025-06-18T18:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXHgqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NUnitTester",
                                                                               "createdAt":  "2025-06-18T20:34:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "thomasrea0113",
                                           "body":  "Agreed, the proposed workaround is not viable for us either. I have 8000 schemas that I do not have direct control over. It would be an org-wide restructure to get this cleaned up",
                                           "updatedAt":  "2025-06-18T18:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x9QC7",
                                           "createdAt":  "2025-06-18T20:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NUnitTester",
                                           "body":  "@HongGit : What must happen that this issue will be solved?\nIt is fact that Microsoft.XmlSerializer.Generator does not fullfill the XML spec.\nAs @danielo-unity3d has shown the problem seems to be easy to solve. ",
                                           "updatedAt":  "2025-06-18T20:43:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64J0X5",
                                           "createdAt":  "2025-07-18T14:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IAmTheCShark",
                                           "body":  "Problem can also be observed when generating the follwing WSDL\n\nhttps://seller.api.channelpilot.com/4_2?wsdl",
                                           "updatedAt":  "2025-07-18T14:02:32Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Cannot serialize XML with nested classes - Microsoft.XmlSerializer.Generator 2.2.0 ",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37893",
        "createdAt":  "2020-06-15T09:10:03Z",
        "number":  37893,
        "author":  "troplin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T19:07:35Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe following code takes about **15 minutes** to run on my machine:\r\n```cs\r\nvar element = new XElement(\"element\", string.Join(\"\\n\", Enumerable.Repeat(new string(\u0027a\u0027, 100), 100000)));\r\nvar serializer = new DataContractSerializer(element.GetType());\r\nusing var memoryStream = new MemoryStream();\r\nserializer.WriteObject(memoryStream, element);\r\nmemoryStream.Seek(0, SeekOrigin.Begin);\r\nvar deserialized = (XElement)serializer.ReadObject(memoryStream);\r\n```\r\nThe equivalent code using `Save` and `Load` only takes about 200-300 ms:\r\n```cs\r\nvar element = new XElement(\"element\", string.Join(\"\\n\", Enumerable.Repeat(new string(\u0027a\u0027, 100), 100000)));\r\nusing var memoryStream = new MemoryStream();\r\nelement.Save(memoryStream);\r\nmemoryStream.Seek(0, SeekOrigin.Begin);\r\nvar deserialized = XElement.Load(memoryStream);\r\n```\r\nGoing through a string using `XmlWriter`+`StringWriter`+`XmlReader`+`StringReader` is also only 200-300 ms:\r\n```cs\r\nvar element = new XElement(\"element\", string.Join(\"\\n\", Enumerable.Repeat(new string(\u0027a\u0027, 100), 100000)));\r\nvar serializer = new DataContractSerializer(element.GetType());\r\nusing var writer = new StringWriter();\r\nusing (var xmlWriter = XmlWriter.Create(writer))\r\n    serializer.WriteObject(xmlWriter, element);\r\nusing var reader = new StringReader(writer.ToString());\r\nusing var xmlReader = XmlReader.Create(reader);\r\nvar deserialized = (XElement)serializer.ReadObject(xmlReader);\r\n```\r\n\r\nCuriously, If I change the content to use `\"\\n\"` instead of `\"\\r\\n\"` as line separator, the runtime is reduced to about 15 s, which is still way too slow.\r\n\r\n### Configuration\r\n\r\n- OS: Windows 10 Pro (Build 18363.900)\r\n- Processor: x64, Core i7-9700 @ 3.00 GHz\r\n- NET Core: 3.1.2 or 3.1.4 (both are installed, not sure which one is actually used by VS)\r\n\r\n### Analysis\r\n\r\nMy analysis shows, that the problem is excessive string concatenation in `XElement.AddStringSkipNotify`. The content seems to arrive in very small chunks but I don\u0027t know the reason why.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmMdyJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDAwNTc3OA==",
                                           "createdAt":  "2020-06-15T09:10:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-15T09:10:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDI5OTI3MQ==",
                                           "createdAt":  "2020-06-15T18:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Interesting, its indeed very slow, but i don\u0027t think its caused from XElement, i did log the timing and it shows `XmlObjectSerializer.ReadObject(stream)` is very slow: \r\n```csharp\r\n     Stopwatch watch = Stopwatch.StartNew();\r\n     watch.Start();\r\n     var element = new XElement(\"element\", string.Join(\"\\r\\n\", Enumerable.Repeat(new string(\u0027a\u0027, 100), 100000)));\r\n     Console.WriteLine(watch.ElapsedMilliseconds); // 78\r\n     watch.Restart();\r\n     var serializer = new DataContractSerializer(element.GetType());\r\n     using var memoryStream = new MemoryStream();\r\n     serializer.WriteObject(memoryStream, element);\r\n     memoryStream.Seek(0, SeekOrigin.Begin);\r\n     Console.WriteLine(watch.ElapsedMilliseconds); // 146\r\n     watch.Restart();\r\n     var deserialized = (XElement)serializer.ReadObject(memoryStream);\r\n     Console.WriteLine(watch.ElapsedMilliseconds); // 30520\r\n```\r\nEvent without casting to `XElement` is the same, very slow. So changing the area to `area-Serialization`. As @troplin  mentioned changing the content to use \"\\r\\n\" instead of \"\\n\" as line separator, the runtime is increased to almost 30 mins on my laptop, which is very very slow.  Tagging @adamsitnik as he might want to see this, also tagging Runtime.Serialization area owners @StephenMolloy @HongGit ",
                                           "updatedAt":  "2020-06-15T18:27:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDMwNzc0OQ==",
                                           "createdAt":  "2020-06-15T18:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "troplin",
                                           "body":  "@buyaa-n I\u0027ve profiled the code and the time is lost in `XElement.AddStringSkipNotify` (which is called from `DataContractSerializer.ReadObject`, so you\u0027re not wrong).\r\nThe problem is (probably), that this method is called many times, each time with a small chunk of content which is then appended to the `XElement.content` member by string concatenation. This will allocate a new string each time, copying the previous `content` which grows larger each time.\r\nThis again leads to massive GC activity.\r\n",
                                           "updatedAt":  "2020-06-15T18:42:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTg3NTA5NQ==",
                                           "createdAt":  "2020-06-26T00:00:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "I can understand the frustration here, and we are going to keep this bug open to look at in a future milestone. 15 _minutes_ is a long time to wait for a serializer. However, it is true that this is not a regression from the 4.8 framework.\r\n\r\nWhat is probably happening here is that XElement likely already has custom serialization code to handle this case and thus can do things smartly and quickly, whereas DataContractSerializer is a general-purpose serializer that doesn\u0027t take those same shortcuts. It is almost always true that a special-purpose serializer will be faster than a general-purpose serializer for the case that it was specially designed for.\r\n\r\nBut again, 15 minutes is extreme. We will try to come back to this in the future. But we are quite low on resources and cannot prioritize this at this time given that it is not a regression from previous frameworks.",
                                           "updatedAt":  "2020-06-26T00:00:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDMzNzQxMg==",
                                           "createdAt":  "2020-06-26T18:45:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "troplin",
                                           "body":  "@StephenMolloy The strange thing is that it is as fast as expected when using `DataContractSerializer` together with `XmlReader` and `StringReader` to deserialize from a string.\r\nSince that workaround works well, the issue is not really urgent right now.",
                                           "updatedAt":  "2020-06-26T18:45:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yx3Il",
                                           "createdAt":  "2024-12-27T01:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-27T01:06:11Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Very slow deserialization of XElement with text content using DataContractSerializer",
        "labels":  [
                       "area-Serialization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39127",
        "createdAt":  "2020-07-10T23:11:39Z",
        "number":  39127,
        "author":  "HongGit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T21:04:14Z",
        "body":  "During investigation of serialization bugs, it is found that the implementation of DCS, XMLSerializer and JSON serializer is quite different from .NET framework.\r\n---------\r\n\r\n- [x] DCJS - Semi-aligned by #57533.\r\n- [x] DCS and the rest of the DataContract world was aligned with #71752.\r\n- [ ] XmlSerializer - Yet todo.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKNXIBA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTA5OTAxMg==",
                                           "createdAt":  "2020-09-01T19:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@HongGit I assume this should be marked Future or 6.0",
                                           "updatedAt":  "2020-09-01T19:58:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Align implementation of DCS, XMLSerializer and JSON serializer with .NET framework ",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42861",
        "createdAt":  "2020-09-29T20:38:30Z",
        "number":  42861,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T21:01:23Z",
        "body":  "In DataContractSerialization we have a few places where we are caching `typeof(XX)` into static `Type` variables. For example:\r\n\r\nhttps://github.com/dotnet/runtime/blob/855e2961ba70d3ed8b094d230aaf655adac2b76e/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Globals.cs#L47-L78\r\n\r\nWe should remove these caches, where possible, and instead just use `typeof(XX)` directly inline as needed. This will allow the JIT to see that the code is using runtime Type instances, and it can optimize the code if possible.\r\n\r\nSee https://github.com/dotnet/runtime/pull/42824#discussion_r496951937.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKdyftQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjMyNDY2MQ==",
                                           "createdAt":  "2020-10-01T18:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Also consider addressing this PR comment as well: https://github.com/dotnet/runtime/pull/42911#discussion_r498361718\r\n\r\n\u003e but could we specify the parameter types in the GetMethod call?\r\n\r\nFully qualify the parameter types when using Reflection to find methods.",
                                           "updatedAt":  "2020-10-01T18:39:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Remove Type caches in DataContractSerialization",
        "labels":  [
                       "area-Serialization",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45207",
        "createdAt":  "2020-11-25T09:41:53Z",
        "number":  45207,
        "author":  "Const-me",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-19T12:43:47Z",
        "body":  "**Version Used**: \r\n\r\nVisual studio 2019 16.8.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile code like this:\r\n\r\n```\r\n[DataContract]\r\nsealed class TimeSeriesPoint\r\n{\r\n\t[DataMember]\r\n\tpublic float compliance, volume;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nMaybe no warnings at all.\r\n\r\nMaybe a different message, like \"...will always have its default value 0, unless set by deserializing\".\r\n\r\n**Actual Behavior**:\r\n\r\nWarning CS0649: Field \u0027TimeSeriesPoint.volume\u0027 is never assigned to, and will always have its default value 0.\r\n\r\nThis is incorrect because despite these fields are never assigned to, they won\u0027t always have a default value, due to serialization.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLEdNqQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzc1MDUxOQ==",
                                           "createdAt":  "2020-11-25T14:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "This sounds be handled by whoever owns the Data contract api. They sound use a diagnostic suppressor to suppress these warnings. ",
                                           "updatedAt":  "2020-11-25T14:46:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzc1MDY2MQ==",
                                           "createdAt":  "2020-11-25T14:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-25T14:46:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Mjg3MDQ0MQ==",
                                           "createdAt":  "2020-12-10T23:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "  @Const-me you could choose to suppress this warning inline.  \r\n\r\nWe will look at this in the future release",
                                           "updatedAt":  "2020-12-10T23:40:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "C# compiler should not report CS0649 when the fields in question are marked with [DataMember] attribute",
        "labels":  [
                       "area-Serialization",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47371",
        "createdAt":  "2021-01-23T16:24:17Z",
        "number":  47371,
        "author":  "slavanap",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T19:34:23Z",
        "body":  "### Description\r\n\r\nXmlSerializer by default requires next tag after EndElement to be present in the Stream to fully deserialize a message. This makes XmlSerializer unapplicable to deserialize directly from NetworkStream.\r\n\r\n### Configuration\r\n\r\n.NET 3.1 or 5; x64\r\n\r\n### Other information\r\n\r\nDemo project: \r\nmsg2 is expected to be read successfully because it was fully written.\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace ConsoleApp1 {\r\n\r\n    [XmlType(AnonymousType = true)]\r\n    [XmlRoot(ElementName = \"msg\")]\r\n    public class MessageRoot {\r\n        [XmlAttribute(\"code\")]\r\n        public string Code { get; set; }\r\n        public override string ToString() =\u003e $\"msg(code: {Code})\";\r\n    }\r\n\r\n    class Program {\r\n        const int TestPort = 40001;\r\n\r\n        static TcpListener _listener;\r\n        static void WriterThread() {\r\n            // dummy writer: write message and block indefinitely\r\n            using var client = _listener.AcceptTcpClient();\r\n            var stream = new StreamMonitor(client.GetStream(), \"SERVER\");\r\n            TextWriter writer = new StreamWriter(stream, Encoding.ASCII);\r\n            writer.Write(@\"\u003cmsg code=\"\"1\"\"\u003e\u003c/msg\u003e\u003cmsg code=\"\"2\"\"\u003e\u003c/msg\u003e\");\r\n            writer.Flush();\r\n            Thread.Sleep(TimeSpan.FromHours(1));\r\n        }\r\n\r\n        static void Main() {\r\n            _listener = new TcpListener(IPAddress.Loopback, TestPort);\r\n            _listener.Start(1);\r\n            var writerThread = new Thread(WriterThread);\r\n            writerThread.Start();\r\n\r\n            // this thread will read\r\n            var client = new TcpClient(IPAddress.Loopback.ToString(), TestPort);\r\n            var stream = new StreamMonitor(client.GetStream(), \"CLIENT\");\r\n\r\n            var reader = XmlReader.Create(stream, new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment });\r\n            var serializer = new XmlSerializer(typeof(MessageRoot), string.Empty);\r\n\r\n            var msg1 = serializer.Deserialize(reader);\r\n            Console.WriteLine($\"We\u0027ve read message: {msg1}\");\r\n            var msg2 = serializer.Deserialize(reader);     // \u003c\u003c\u003c Hangs here.\r\n            Console.WriteLine($\"We\u0027ve read message: {msg2}\");\r\n\r\n            Console.WriteLine(\"Success!\");\r\n        }\r\n    }\r\n\r\n    #region Utility\r\n    class StreamMonitor : Stream {\r\n        readonly Stream _origin;\r\n        readonly string _name;\r\n        public StreamMonitor(Stream origin, string name) {\r\n            _origin = origin;\r\n            _name = name;\r\n        }\r\n\r\n        public override bool CanRead =\u003e _origin.CanRead;\r\n        public override bool CanSeek =\u003e _origin.CanSeek;\r\n        public override bool CanWrite =\u003e _origin.CanWrite;\r\n        public override long Length =\u003e _origin.Length;\r\n        public override long Position { get =\u003e _origin.Position; set =\u003e _origin.Position = value; }\r\n        public override void Flush() =\u003e _origin.Flush();\r\n        public override long Seek(long offset, SeekOrigin origin) =\u003e _origin.Seek(offset, origin);\r\n        public override void SetLength(long value) =\u003e _origin.SetLength(value);\r\n\r\n        public override int Read(byte[] buffer, int offset, int count) {\r\n            Console.WriteLine($\"[{_name} tries to read]\");\r\n            var ret = _origin.Read(buffer, offset, count);\r\n            Console.WriteLine($\"[{_name} reads {ret} bytes] {new string(Encoding.UTF8.GetChars(buffer, offset, ret))}\");\r\n            return ret;\r\n        }\r\n\r\n        public override void Write(byte[] buffer, int offset, int count) {\r\n            Console.WriteLine($\"[{_name} writes {count} bytes] {new string(Encoding.UTF8.GetChars(buffer, offset, count))}\");\r\n            _origin.Write(buffer, offset, count);\r\n        }\r\n    }\r\n    #endregion\r\n\r\n}\r\n```\r\n\r\nArea: src/libraries/System.Private.Xml/src/System/Xml/Serialization",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLl073g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjEyMDQ4NQ==",
                                           "createdAt":  "2021-01-23T16:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nXmlSerializer by default requires next tag after EndElement to be present in the Stream to fully deserialize a message. This makes XmlSerializer unapplicable to decerialize directly from NetworkStream.\r\n\r\n### Configuration\r\n\r\n.NET 3.1 or 5; x64\r\n\r\n### Other information\r\n\r\nDemo project: \r\nmsg2 is expected to be read successfully because it was fully written.\r\n\r\n```using System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace ConsoleApp1 {\r\n\r\n    [XmlType(AnonymousType = true)]\r\n    [XmlRoot(ElementName = \"msg\")]\r\n    public class MessageRoot {\r\n        [XmlAttribute(\"code\")]\r\n        public string Code { get; set; }\r\n        public override string ToString() =\u003e $\"msg(code: {Code})\";\r\n    }\r\n\r\n    class Program {\r\n        const int TestPort = 40001;\r\n\r\n        static TcpListener _listener;\r\n        public static void WriterThread() {\r\n            // dummy writer: write message and block indefinitely\r\n            using var client = _listener.AcceptTcpClient();\r\n            var stream = new StreamMonitor(client.GetStream(), \"SERVER\");\r\n            TextWriter writer = new StreamWriter(stream, Encoding.ASCII);\r\n            writer.Write(@\"\u003cmsg code=\"\"1\"\"\u003e\u003c/msg\u003e\u003cmsg code=\"\"2\"\"\u003e\u003c/msg\u003e\");\r\n            writer.Flush();\r\n            Thread.Sleep(TimeSpan.FromHours(1));\r\n        }\r\n\r\n        static void Main() {\r\n            _listener = new TcpListener(IPAddress.Loopback, TestPort);\r\n            _listener.Start(1);\r\n            var writerThread = new Thread(WriterThread);\r\n            writerThread.Start();\r\n\r\n            // this thread will read\r\n            var client = new TcpClient(IPAddress.Loopback.ToString(), TestPort);\r\n            var stream = new StreamMonitor(client.GetStream(), \"CLIENT\");\r\n\r\n            var reader = XmlReader.Create(stream, new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment });\r\n            var serializer = new XmlSerializer(typeof(MessageRoot), string.Empty);\r\n\r\n            var msg1 = serializer.Deserialize(reader);\r\n            Console.WriteLine($\"We\u0027ve read message: {msg1}\");\r\n            var msg2 = serializer.Deserialize(reader);     // \u003c\u003c\u003c Hangs here.\r\n            Console.WriteLine($\"We\u0027ve read message: {msg2}\");\r\n\r\n            Console.WriteLine(\"Success!\");\r\n        }\r\n    }\r\n\r\n    #region Utility\r\n    class StreamMonitor : Stream {\r\n        readonly Stream _origin;\r\n        readonly string _name;\r\n        public StreamMonitor(Stream origin, string name) {\r\n            _origin = origin;\r\n            _name = name;\r\n        }\r\n\r\n        public override bool CanRead =\u003e _origin.CanRead;\r\n        public override bool CanSeek =\u003e _origin.CanSeek;\r\n        public override bool CanWrite =\u003e _origin.CanWrite;\r\n        public override long Length =\u003e _origin.Length;\r\n        public override long Position { get =\u003e _origin.Position; set =\u003e _origin.Position = value; }\r\n        public override void Flush() =\u003e _origin.Flush();\r\n        public override long Seek(long offset, SeekOrigin origin) =\u003e _origin.Seek(offset, origin);\r\n        public override void SetLength(long value) =\u003e _origin.SetLength(value);\r\n\r\n        public override int Read(byte[] buffer, int offset, int count) {\r\n            var ret = _origin.Read(buffer, offset, count);\r\n            Console.WriteLine($\"[{_name} reads {ret} bytes] {new string(Encoding.UTF8.GetChars(buffer, 0, ret))}\");\r\n            return ret;\r\n        }\r\n\r\n        public override void Write(byte[] buffer, int offset, int count) {\r\n            Console.WriteLine($\"[{_name} writes {count} bytes] {new string(Encoding.UTF8.GetChars(buffer, offset, count))}\");\r\n            _origin.Write(buffer, offset, count);\r\n        }\r\n    }\r\n    #endregion\r\n\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eslavanap\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-23T16:24:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjE3MzI1OQ==",
                                           "createdAt":  "2021-01-23T20:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nXmlSerializer by default requires next tag after EndElement to be present in the Stream to fully deserialize a message. This makes XmlSerializer unapplicable to deserialize directly from NetworkStream.\r\n\r\n### Configuration\r\n\r\n.NET 3.1 or 5; x64\r\n\r\n### Other information\r\n\r\nDemo project: \r\nmsg2 is expected to be read successfully because it was fully written.\r\n\r\n```using System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace ConsoleApp1 {\r\n\r\n    [XmlType(AnonymousType = true)]\r\n    [XmlRoot(ElementName = \"msg\")]\r\n    public class MessageRoot {\r\n        [XmlAttribute(\"code\")]\r\n        public string Code { get; set; }\r\n        public override string ToString() =\u003e $\"msg(code: {Code})\";\r\n    }\r\n\r\n    class Program {\r\n        const int TestPort = 40001;\r\n\r\n        static TcpListener _listener;\r\n        static void WriterThread() {\r\n            // dummy writer: write message and block indefinitely\r\n            using var client = _listener.AcceptTcpClient();\r\n            var stream = new StreamMonitor(client.GetStream(), \"SERVER\");\r\n            TextWriter writer = new StreamWriter(stream, Encoding.ASCII);\r\n            writer.Write(@\"\u003cmsg code=\"\"1\"\"\u003e\u003c/msg\u003e\u003cmsg code=\"\"2\"\"\u003e\u003c/msg\u003e\");\r\n            writer.Flush();\r\n            Thread.Sleep(TimeSpan.FromHours(1));\r\n        }\r\n\r\n        static void Main() {\r\n            _listener = new TcpListener(IPAddress.Loopback, TestPort);\r\n            _listener.Start(1);\r\n            var writerThread = new Thread(WriterThread);\r\n            writerThread.Start();\r\n\r\n            // this thread will read\r\n            var client = new TcpClient(IPAddress.Loopback.ToString(), TestPort);\r\n            var stream = new StreamMonitor(client.GetStream(), \"CLIENT\");\r\n\r\n            var reader = XmlReader.Create(stream, new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment });\r\n            var serializer = new XmlSerializer(typeof(MessageRoot), string.Empty);\r\n\r\n            var msg1 = serializer.Deserialize(reader);\r\n            Console.WriteLine($\"We\u0027ve read message: {msg1}\");\r\n            var msg2 = serializer.Deserialize(reader);     // \u003c\u003c\u003c Hangs here.\r\n            Console.WriteLine($\"We\u0027ve read message: {msg2}\");\r\n\r\n            Console.WriteLine(\"Success!\");\r\n        }\r\n    }\r\n\r\n    #region Utility\r\n    class StreamMonitor : Stream {\r\n        readonly Stream _origin;\r\n        readonly string _name;\r\n        public StreamMonitor(Stream origin, string name) {\r\n            _origin = origin;\r\n            _name = name;\r\n        }\r\n\r\n        public override bool CanRead =\u003e _origin.CanRead;\r\n        public override bool CanSeek =\u003e _origin.CanSeek;\r\n        public override bool CanWrite =\u003e _origin.CanWrite;\r\n        public override long Length =\u003e _origin.Length;\r\n        public override long Position { get =\u003e _origin.Position; set =\u003e _origin.Position = value; }\r\n        public override void Flush() =\u003e _origin.Flush();\r\n        public override long Seek(long offset, SeekOrigin origin) =\u003e _origin.Seek(offset, origin);\r\n        public override void SetLength(long value) =\u003e _origin.SetLength(value);\r\n\r\n        public override int Read(byte[] buffer, int offset, int count) {\r\n            Console.WriteLine(\"[{_name} tries to read]\");\r\n            var ret = _origin.Read(buffer, offset, count);\r\n            Console.WriteLine($\"[{_name} reads {ret} bytes] {new string(Encoding.UTF8.GetChars(buffer, offset, ret))}\");\r\n            return ret;\r\n        }\r\n\r\n        public override void Write(byte[] buffer, int offset, int count) {\r\n            Console.WriteLine($\"[{_name} writes {count} bytes] {new string(Encoding.UTF8.GetChars(buffer, offset, count))}\");\r\n            _origin.Write(buffer, offset, count);\r\n        }\r\n    }\r\n    #endregion\r\n\r\n}\r\n```\r\n\r\nArea: src/libraries/System.Private.Xml/src/System/Xml/Serialization\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eslavanap\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-23T20:18:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjE5NDYwNA==",
                                           "createdAt":  "2021-01-23T22:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slavanap",
                                           "body":  "Same issue - https://github.com/dotnet/runtime/issues/1029\r\nBut here I\u0027ve added the sample.\r\n\r\nI have a workaround to share but it involves hacking by redefining XmlTextReader.ReadEndElement to postpone the call for 1st level tag until next message has to be deserialized. XmlTextReader tries to look ahead in the stream causing the hang (please see the provided sample in top message). Printing stack trace @ `StreamMonitor.Read` entry can make it even more obvious about what\u0027s going on.",
                                           "updatedAt":  "2021-01-23T22:49:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjE5NjA0NQ==",
                                           "createdAt":  "2021-01-23T23:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slavanap",
                                           "body":  "Here\u0027s double read just to read end element:\r\nFirst - inside MoveToContent function, second - explicit:\r\nhttps://source.dot.net/#System.Private.Xml/System/Xml/Core/XmlReader.cs,989\r\n\r\nSimple removal of second Read will certainly violate Xml grammar parsing rules.",
                                           "updatedAt":  "2021-01-23T23:04:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3Nzg2MjExMA==",
                                           "createdAt":  "2021-02-11T23:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@Benjie-Liu can you please see if you could repro this issue?",
                                           "updatedAt":  "2021-02-11T23:23:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "XmlSerializer requires next tag after EndElement to be present in Stream",
        "labels":  [
                       "area-Serialization",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49010",
        "createdAt":  "2021-03-02T14:40:40Z",
        "number":  49010,
        "author":  "atanasa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T20:45:38Z",
        "body":  "### Description\r\n\r\nI have a source XML document that looks like this:\r\n```xml\r\n\u003cs:sourceRoot xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n   xmlns:s=\"common-schema\"\r\n   xmlns:my=\"my-custom-schema\"\u003e\r\n   \u003cs:target xsi:type=\"my:customType\"\u003emy:otherType\u003c/s:target\u003e\r\n\u003c/s:sourceRoot\u003e\r\n```\r\n\r\n#### Actual\r\n\r\nIf we copy over the `target` element into an empty document using `XmlDictionaryWriter.WriteNode`, the actual result looks like this:\r\n\r\n```xml\r\n\u003cs:target xsi:type=\"my:customType\"\r\n          xmlns:s=\"common-schema\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003emy:otherType\u003c/s:target\u003e\r\n```\r\n\r\nIn this case the value of xsi:type cannot be evaluated any more as it is using a namespace prefix that is not defined at the destination.\r\n\r\n#### Expected\r\n\r\nI would expect the destination document to look like:\r\n```xml\r\n\u003cs:target xsi:type=\"my:customType\"\r\n          xmlns:s=\"common-schema\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:my=\"my-custom-schema\"\u003emy:otherType\u003c/s:target\u003e\r\n```\r\n\r\nTo summarize, if there is an XML element that you copy from one document to another using the method `XmlDictionaryWriter.WriteNode`, the resulting XML text for that element would only include the namespace declarations that are used by elements or attributes in the element that was being copied.\r\nIf that XML element contained some value that needs to be interpreted using an XML namespace, this interpretation would not be possible in the destination document.\r\n\r\n\r\n\r\n### Configuration\r\n\r\nTested this with netcoreapp3.1 and .Net Framework 4.8, on Windows 10. I don\u0027t think this is specific to a certain version of .Net.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n#### Workaround:\r\nI have worked this around using:\r\n- reflection to extract the namespaces and their prefixes active in the current scope of an `XmlDictionaryReader` (from `((System.Xml.XmlBaseReader)reader)._nsMgr._namespaces`)\r\n- an `XmlDictionaryWriter` wrapper that intercepts `WriteNode` and the first `WriteStartElement` to inject the namespace declarations.\r\n\r\n#### Potential fix:\r\nA possible solution is to:\r\n- Make `XmlDictionaryReader` implement the `IXmlNamespaceResolver` interface\r\n- Make `XmlDictionaryWriter.WriteNode` have an option (or by default) to recreate the namespace declaration as seen in the original context\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONFqZ7A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODk1NjQ3Mw==",
                                           "createdAt":  "2021-03-02T14:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have a source XML document that looks like this:\r\n```xml\r\n\u003cs:sourceRoot xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n   xmlns:s=\"common-schema\"\r\n   xmlns:my=\"my-custom-schema\"\u003e\r\n   \u003cs:target xsi:type=\"my:customType\"\u003emy:otherType\u003c/s:target\u003e\r\n\u003c/s:sourceRoot\u003e\r\n```\r\n\r\n#### Actual\r\n\r\nIf we copy over the `target` element into an empty document using `XmlDictionaryWriter.WriteNode`, the actual result looks like this:\r\n\r\n```xml\r\n\u003cs:target xsi:type=\"my:customType\"\r\n          xmlns:s=\"common-schema\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003emy:otherType\u003c/s:target\u003e\r\n```\r\n\r\nIn this case the value of xsi:type cannot be evaluated any more as it is using a namespace prefix that is not defined at the destination.\r\n\r\n#### Expected\r\n\r\nI would expect the destination document to look like:\r\n```xml\r\n\u003cs:target xsi:type=\"my:customType\"\r\n          xmlns:s=\"common-schema\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:my=\"my-custom-schema\"\u003emy:otherType\u003c/s:target\u003e\r\n```\r\n\r\nTo summarize, if there is an XML element that you copy from one document to another using the method `XmlDictionaryWriter.WriteNode`, the resulting XML text for that element would only include the namespace declarations that are used by elements or attributes in the element that was being copied.\r\nIf that XML element contained some value that needs to be interpreted using an XML namespace, this interpretation would not be possible in the destination document.\r\n\r\n\r\n\r\n### Configuration\r\n\r\nTested this with netcoreapp3.1 and .Net Framework 4.8, on Windows 10. I don\u0027t think this is specific to a certain version of .Net.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n#### Workaround:\r\nI have worked this around using:\r\n- reflection to extract the namespaces and their prefixes active in the current scope of an `XmlDictionaryReader` (from `((System.Xml.XmlBaseReader)reader)._nsMgr._namespaces`)\r\n- an `XmlDictionaryWriter` wrapper that intercepts `WriteNode` and the first `WriteStartElement` to inject the namespace declarations.\r\n\r\n#### Potential fix:\r\nA possible solution is to:\r\n- Make `XmlDictionaryReader` implement the `IXmlNamespaceResolver` interface\r\n- Make `XmlDictionaryWriter.WriteNode` have an option (or by default) to recreate the namespace declaration as seen in the original context\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eatanasa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-02T14:40:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODM1Mjg3Ng==",
                                           "createdAt":  "2021-07-12T15:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "cc: @StephenMolloy @HongGit",
                                           "updatedAt":  "2021-07-12T15:02:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XmlDictionaryWriter.WriteNode does not preserve the namespaces declared in the original context",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50526",
        "createdAt":  "2021-03-31T23:19:34Z",
        "number":  50526,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-09T16:33:11Z",
        "body":  "As part of https://github.com/dotnet/runtime/issues/47228 i am running an analyzer to detect APIs throwing PNSE but not annotated with Obsolete/SupportedOSPlatform/UnsupportedOSPlatform attributes, we need to annotate them so that developers get warnings when they use them unexpectedly\n\nFor now, I have results only cross-platform builds, analysis of targeted builds are coming soon where more APIs could be detected\n\nAPI | Comment | Suggestion | Location \n-- | -- | -- | --\n~~\u0027XmlObjectSerializerReadContextComplex.ResolveDataContractTypeInSharedTypeMode(string,   string, out Assembly)\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XmlObjectSerializerReadContextComplex.cs(143,13)\n~~\u0027XsdDataContractExporter.Schemas.get\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XsdDataContractExporter.cs(38,17)\n~~\u0027XsdDataContractExporter.DataContractSet.get\u0027~~ | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Runtime\\Serialization\\XsdDataContractExporter.cs(59,17)\n\u0027XmlDictionaryReader.CreateMtomReader(Stream,   Encoding[], string?, XmlDictionaryReaderQuotas, int,   OnXmlDictionaryReaderClose?)\u0027 | unconditionally throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryReader.cs(153,13)\n\u0027XmlDictionaryReader.CreateMtomReader(byte[],   int, int, Encoding[], string?, XmlDictionaryReaderQuotas, int,   OnXmlDictionaryReaderClose?)\u0027 | unconditionally   throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryReader.cs(177,13)\n\u0027XmlDictionaryWriter.CreateMtomWriter(Stream,   Encoding, int, string, string?, string?, bool, bool)\u0027 | unconditionally   throws on all platforms | add [Obsolete] | libraries\\System.Private.DataContractSerialization\\src\\System\\Xml\\XmlDictionaryWriter.cs(68,13)\n~~\u0027XmlCollation.CreateSortKey(string)\u0027~~ | Unsupported on Unux (AnyOS than windows) | make   XmlCollation.UpperFirst windows only | libraries\\System.Private.Xml\\src\\System\\Xml\\Xsl\\Runtime\\XmlCollation.Unix.cs(24,17)\n\nNote: We are suggesting adding [Obsolete] for the APIs only supported in .Net framework but not supported in .NetCore, with the corresponding Message, DiagnosticId, and UrlFormat https://github.com/dotnet/runtime/blob/cecc76a29a8b6c1fca181a38f076b4d949081746/src/libraries/System.Net.Requests/src/System/Net/AuthenticationManager.cs#L17 You can claim the next available DiagnosticId from Obsoletions.cs .\n\ncc @jeffhandley @terrajobst @GrabYourPitchforks\n\nEdit: @StephenMolloy - crossed out the API\u0027s that are fixed or not relevant to `area-Serialization`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONQTWbw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzgyMDUyNA==",
                                           "createdAt":  "2021-04-06T04:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Notes need to consider:\r\n- If the API has an issue associated with future support we are not suggesting to add [Obsolete], we need to make sure that we are not gonna support the API ever and related issue should be closed, then we can add [Obsolete]\r\n- If the API is internal/private the annotation is not necessary, but they could point you to the public API needs annotation",
                                           "updatedAt":  "2021-04-06T04:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41BNZv",
                                           "createdAt":  "2021-07-29T22:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "Many of these API\u0027s are holdovers from Full Framework that were made to throw PNSE because the features that depend on them were not yet implemented. But many of them will be used in the future.",
                                           "updatedAt":  "2021-07-29T22:48:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Annotate unsupported APIs in Serialization",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50820",
        "createdAt":  "2021-04-06T23:36:50Z",
        "number":  50820,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T22:29:13Z",
        "body":  "### Description\r\n\r\nFile [Compilation.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.Xml/src/System/Xml/Serialization/Compilation.cs) makes use of single file dangerous pattern inside function `LoadGeneratedAssembly`. Depending on the SerializationMode set we could end up throwing an exception or returning null. If returning null, the code will most likely fall back to reflection and just be slower. Since this code is most likely fixable, the warning will be suppressed in code with a reference to this issue until this gets fixed.\r\n\r\ncc: @agocke\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONul5Hg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc426Xke",
                                           "createdAt":  "2021-09-16T21:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@HongGit, @mconnew suggests looking into using a module initializer in the code generated by sgen to add the type/serializer to the existing cache in runtime seriazliation.",
                                           "updatedAt":  "2021-09-16T21:32:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Code for serialization using sgen makes use of single file dangerous patterns",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53051",
        "createdAt":  "2021-05-20T22:13:36Z",
        "number":  53051,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-20T22:58:45Z",
        "body":  "### Description\r\n\r\nXmlSerializer does not really distinguish between hidden (aka \u0027new\u0027) and overridden members.\r\nThere was a couple of PR\u0027s some time ago that nominally addressed some \u0027override\u0027 issues where\r\nthe access modifiers were more restrictive from the base (#22560 fixed by corefx/#21719, and\r\n#22569 fixed by corefx/#21913) but the issue here is that those are hidden scenarios.\r\nOverrides don\u0027t change access modifiers.\r\n\r\nIn reality, the serializer just doesn\u0027t handle hidden members very well.\r\nTake these two classes for example.\r\n\r\n```C#\r\npublic class A {\r\n    public virtual string Hidden { get; set; }\r\n    public virtual string Modified { get; set; }\r\n    public virtual string Ignored { get; set; }\r\n}\r\npublic class B : A {\r\n    private string hidden, modified, ignored;\r\n    public new string Hidden { get { return hidden; } set { hidden = value + \" from B\" } }\r\n    internal new string Modified { get { return modified; } set { modified= value + \" from B\" } }\r\n    [XmlIgnore]\r\n    public new string Ignored { get { return ignored; } set { ignored= value + \" from B\" } }\r\n}\r\n```\r\nIf you create an instance of B {Hidden = \"h\", Modified = \"m\", Ignored = \"i\", A.Hidden = \"hidden base\", A.Ignored = \"base ignore\" }, then A.Hidden gets lost in the round trip, and A.Ignored goes on the xml \"wire\" but actually gets restored on B.Ignored\r\ndespite the property having the ignore attribute. Things are also goofy if you try serializing or deserializing as type A, which you should be able to do without losing or confusing data.\r\n\r\nBottom line is that we don\u0027t handle hidden properties well. Trying to put hidden properties on the \"wire\" would require convoluted namespace considerations beyond what already exists in order to keep things straight.\r\n\r\nI think a prudent way to go would be to detect \"hidden\" scenarios and raise an error since we don\u0027t handle these in any\r\nconsistent way.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMmXYig==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTUyMjY5OQ==",
                                           "createdAt":  "2021-05-20T22:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Area owners: might be worthwhile to take a look at `DataContractSerializer` and `JsonSerializer` at the same time.",
                                           "updatedAt":  "2021-05-20T22:30:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NTUzNTM3MA==",
                                           "createdAt":  "2021-05-20T22:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "Should we allow disambiguation with XmlAttribute to assign the overlapping members different names? Do we get that right when round tripping?",
                                           "updatedAt":  "2021-05-20T22:58:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Serialization of hidden members is broken",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55154",
        "createdAt":  "2021-07-04T22:25:15Z",
        "number":  55154,
        "author":  "stevenaw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-18T21:54:34Z",
        "body":  "### Description\r\nI\u0027ve noticed a large difference in `XmlSerializer`\u0027s serialization performance when instantiating via different constructor overloads. For .NET 5.0.7 on Windows 10, the following completes in 6 us on my machine and consumes 10KB memory:\r\n\r\n```csharp\r\nvar data = new TestData() { Foo = 1, Bar = true };\r\nusing var buffer = new MemoryStream(1024); // Large enough to avoid a resize\r\nvar serializer = new XmlSerializer(typeof(TestData));\r\nserializer.Serialize(buffer, data);\r\n```\r\n\r\nWhile the following code which specifies a non-default `XmlRootAttribute` performs 300x slower and consumes 10x memory (2014 us, 130KB memory)\r\n\r\n```csharp\r\nvar data = new TestData() { Foo = 1, Bar = true };\r\nusing var buffer = new MemoryStream(1024); // Large enough to avoid a resize\r\nvar serializer = new XmlSerializer(typeof(TestData), new XmlRootAttribute(\"FakeRoot\"));\r\nserializer.Serialize(buffer, data);\r\n```\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eFull Code Snippets and Benchmark\u003c/summary\u003e\r\n  \r\n  ```csharp\r\n    using BenchmarkDotNet.Attributes;\r\n    using BenchmarkDotNet.Running;\r\n    using System.IO;\r\n    using System.Xml.Serialization;\r\n\r\n    class Program\r\n    {\r\n        static void Main() =\u003e BenchmarkRunner.Run\u003cXmlSerializationBenchmarks\u003e();\r\n    }\r\n\r\n    [MemoryDiagnoser]\r\n    public class XmlSerializationBenchmarks\r\n    {\r\n        public static TestData TestData { get; } = new TestData\r\n        {\r\n            Foo = 1,\r\n            Bar = true\r\n        };\r\n\r\n        [Benchmark(Baseline = true)]\r\n        public void WithDefaultRootElement()\r\n        {\r\n            using var buffer = new MemoryStream(1024);\r\n            var serializer = new XmlSerializer(typeof(TestData));\r\n            serializer.Serialize(buffer, TestData);\r\n        }\r\n\r\n        [Benchmark]\r\n        public void WithCustomRootElement()\r\n        {\r\n            using var buffer = new MemoryStream(1024);\r\n            var serializer = new XmlSerializer(typeof(TestData), new XmlRootAttribute(\"FakeRoot\"));\r\n            serializer.Serialize(buffer, TestData);\r\n        }\r\n    }\r\n\r\n    public class TestData\r\n    {\r\n        public int Foo { get; set; }\r\n        public bool Bar { get; set; }\r\n    }\r\n  ```\r\n\u003c/details\u003e\r\n\r\n### Configuration\r\n\r\n* .NET Version: **5.0.7**\r\n* OS Version: **Windows 10 21H2**\r\n* What is the architecture (x64, x86, ARM, ARM64)? **x64**\r\n* If relevant, what are the specs of the machine? **N/A**\r\n\r\n### Regression?\r\nUnknown\r\n\r\n### Data\r\n\r\n\r\n|                 Method |         Mean |      Error |    StdDev |  Ratio | RatioSD |   Gen 0 |  Gen 1 | Gen 2 | Allocated |\r\n|----------------------- |-------------:|-----------:|----------:|-------:|--------:|--------:|-------:|------:|----------:|\r\n| WithDefaultRootElement |     5.683 us |  0.4552 us |  1.299 us |   1.00 |    0.00 |  2.4376 |      - |     - |     10 KB |\r\n|  WithCustomRootElement | 2,014.482 us | 23.7989 us | 19.873 us | 577.96 |   12.61 | 31.2500 | 3.9063 |     - |    130 KB |",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQjrgig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40tsLk",
                                           "createdAt":  "2021-07-21T18:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I took a quick look.  I don\u0027t think this is due to the performance of Serialize; rather, this is about the ctor itself.  XmlSerializer uses reflection emit to emit a custom assembly for serializing the relevant types.  The constructor that just takes the target type caches that generated assembly in a static cache, whereas the constructor that also takes an XmlRootAttribute does not, which means WithDefaultRootElement is reusing the same assembly over and over again, while WithCustomRootElement is emitting and JIT\u0027ing a brand new assembly on each iteration.  That\u0027s why it\u0027s so much slower.",
                                           "updatedAt":  "2021-07-21T18:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5COuCK",
                                           "createdAt":  "2022-04-27T15:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbc2",
                                           "body":  "This is actually documented, and has been since .NET 2.0.  From the documentation page [XmlSerializer: Dynamically Generated Assemblies](https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer?view=net-6.0#dynamically-generated-assemblies):\r\n\r\n\u003e Dynamically Generated Assemblies\r\n\u003e \r\n\u003e To increase performance, the XML serialization infrastructure dynamically generates assemblies to serialize and deserialize specified types. The infrastructure finds and reuses those assemblies. This behavior occurs only when using the following constructors:\r\n\u003e \r\n\u003e [XmlSerializer.XmlSerializer(Type)](https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer.-ctor?view=net-6.0#system-xml-serialization-xmlserializer-ctor(system-type))\r\n\u003e \r\n\u003e [XmlSerializer.XmlSerializer(Type, String)](https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer.-ctor?view=net-6.0#system-xml-serialization-xmlserializer-ctor(system-type-system-string))\r\n\u003e \r\n\u003e **If you use any of the other constructors, multiple versions of the same assembly are generated and never unloaded, which results in a memory leak and poor performance. The easiest solution is to use one of the previously mentioned two constructors. Otherwise, you must cache the assemblies in a [Hashtable](https://docs.microsoft.com/en-us/dotnet/api/system.collections.hashtable?view=net-6.0)...**\r\n\r\nSo, as explained in the docs, when constructing an `XmlSerializer` with an `XmlRootAttribute` override, you must cache it statically and reuse it when needed.\r\n\r\nSee also: \r\n\r\n - [XmlSerializer Performance Issue when Specifying XmlRootAttribute](https://stackoverflow.com/q/1534810/3744182)\r\n - [Memory Leak using StreamReader and XmlSerializer](https://stackoverflow.com/q/23897145/3744182)\r\n\r\n",
                                           "updatedAt":  "2022-04-27T15:39:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XmlSerializer serialization is considerably slower when specifying XmlRootAttribute",
        "labels":  [
                       "area-Serialization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56440",
        "createdAt":  "2021-07-28T00:09:37Z",
        "number":  56440,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-23T22:54:10Z",
        "body":  "\u003e This is non-obvious. We need to do something about this. Either through documentation, or by letting it fail and have an AppContext switch to add this check. I\u0027ll let you decide which as it can be argued both ways whether we should be breaking people to alert them that they aren\u0027t getting the data they expect vs not introducing breaks and it\u0027s a philosophical more than technical question. But this behavior needs to be discoverable either through an exception or documentation. I\u0027m going to approve this based on the presumption you will go the documentation route.\r\n\r\n_Originally posted by @mconnew in https://github.com/dotnet/runtime/pull/55101#discussion_r670037877_\r\n\r\nThe gist is that for most primitive types, an empty element is impermissible. Nulls are represented with `xsi:nil` and \u0027default\u0027 values are implied by the abscence of the element. Empty elements result in exceptions for most types... except DateTimeOffset and TimeSpan.\r\n\r\nThe reasoning for these two exceptions is because previous versions of XmlSerializer would unfortunately emit empty elements for these two types that it did not understand. When understanding of TimeSpan was added, the choice was made to not be noisy when encountering these empty elements which probably should not have been there in the first place, but they are, so lets just be graceful about it instead of throwing a tantrum. Or something. DateTimeOffset handling was added following the precedent of TimeSpan.\r\n\r\nThe argument could be made that we should throw exceptions when parsing these empty elements, as they likely are the result of an XmlSerializer that has silently lost data by writing an empty element. The flip side of that argument is that those empty elements aren\u0027t being written by the most recent XmlSerializer anymore, and being noisy about it is just going to annoy people who have already been working with a serializer that may or may not have been losing data... and they don\u0027t seem to mind. Sometimes \"fixing a bug\" is changing a behavior that people have come to depend on. I didn\u0027t make the TimeSpan change, but I think that is the principle being applied there.\r\n\r\nAnyway, that\u0027s where we are. So we should document the special behavior of these two types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOx_Yw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc407H9j",
                                           "createdAt":  "2021-07-28T00:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-28T00:09:40Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Document empty element behavior for DateTimeOffset and TimeSpan",
        "labels":  [
                       "documentation",
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56589",
        "createdAt":  "2021-07-29T22:43:34Z",
        "number":  56589,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T22:29:17Z",
        "body":  "Discovered when looking into #37970. We should look into not maintaining duplicate code and have this generating code live in just one place.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "XmlSerializerGenerator duplicates code in System.Private.Xml",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56711",
        "createdAt":  "2021-08-02T07:22:43Z",
        "number":  56711,
        "author":  "eiriktsarpalis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRg1aA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LaughingJohn",
                                            "createdAt":  "2021-08-02T12:38:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2021-08-13T21:24:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-09-14T16:14:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CosX",
                                            "createdAt":  "2022-02-10T12:20:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2022-06-06T22:04:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Klement46",
                                            "createdAt":  "2023-06-21T13:53:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2023-07-11T09:07:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2023-07-11T09:15:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shane32",
                                            "createdAt":  "2023-08-21T14:51:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SandstromErik",
                                            "createdAt":  "2024-06-04T07:49:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgroenewoudt",
                                            "createdAt":  "2024-06-27T21:39:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alex-wicht",
                                            "createdAt":  "2024-08-19T08:24:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IceToast",
                                            "createdAt":  "2024-08-21T13:04:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hawkrin",
                                            "createdAt":  "2024-09-20T12:07:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanielHJA",
                                            "createdAt":  "2024-09-20T12:45:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "klamfeldt",
                                            "createdAt":  "2024-09-20T13:07:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D040",
                                            "createdAt":  "2024-09-20T13:11:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fremo917",
                                            "createdAt":  "2024-09-23T07:40:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmednfwela",
                                            "createdAt":  "2024-10-12T09:30:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgaffigan",
                                            "createdAt":  "2024-10-18T21:17:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eBenya",
                                            "createdAt":  "2024-11-25T11:53:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "taspeotis",
                                            "createdAt":  "2024-11-28T00:55:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lanayx",
                                            "createdAt":  "2025-07-30T20:40:07Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-08T22:01:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Regenhardt",
                                            "createdAt":  "2025-08-29T12:28:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-09-18T07:09:29Z"
                                        }
                                    ],
                          "totalCount":  26
                      },
        "updatedAt":  "2025-09-19T23:48:02Z",
        "body":  "\u003e Are XmlSerializer and DataContractSerializer also going to be supported?\r\n\r\n_Originally posted by @LaughingJohn in https://github.com/dotnet/runtime/issues/51302#issuecomment-890621946_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwajzzw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44Xpi_",
                                           "createdAt":  "2021-10-18T12:41:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drieseng",
                                           "body":  "@eiriktsarpalis Is this one up for grabs? Not committing to anything yet, but I may have some time (and interest) for this.",
                                           "updatedAt":  "2021-10-18T12:41:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44X4fO",
                                           "createdAt":  "2021-10-18T13:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I defer to the area owners of serialization cc @StephenMolloy",
                                           "updatedAt":  "2021-10-18T13:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bcpnc",
                                           "createdAt":  "2023-05-04T07:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJdPxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LaughingJohn",
                                                                               "createdAt":  "2023-05-18T09:58:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2023-07-11T09:07:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JosepBalague",
                                                                               "createdAt":  "2023-07-12T14:53:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eLPe21",
                                                                               "createdAt":  "2023-08-03T12:42:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pacanukeha",
                                                                               "createdAt":  "2023-10-06T16:30:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LordBenjamin",
                                                                               "createdAt":  "2024-01-17T14:33:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D040",
                                                                               "createdAt":  "2024-09-20T13:11:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spk33",
                                                                               "createdAt":  "2025-03-11T20:25:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "It seems, almost 2 years later, this hasn\u0027t picked up yet sadly",
                                           "updatedAt":  "2023-05-04T07:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hLrOa",
                                           "createdAt":  "2023-07-11T09:09:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzBI2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JosepBalague",
                                                                               "createdAt":  "2023-07-12T15:07:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D040",
                                                                               "createdAt":  "2024-09-20T13:11:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kirsan31",
                                           "body":  "Yes, I was very surprised to find this problem. 😯",
                                           "updatedAt":  "2023-07-11T09:09:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUVHP",
                                           "createdAt":  "2023-07-12T15:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCIILQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LaughingJohn",
                                                                               "createdAt":  "2023-07-28T18:09:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JosepBalague",
                                           "body":  "Still failing in 7.0.306\r\n\r\nDespite forcing new types like that  XmlSerializer ser = new(typeof(MyClass), new Type[] { typeof(DateOnly), typeof(TimeOnly) });\r\ncode fails. Please watch output:\r\n\r\n`\u003c?xml version=\"1.0\" encoding=\"utf-16\"?\u003e\r\n\u003cMyClass xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\r\n  \u003cValue_do /\u003e   \u003c--- MISSING `VALUE`\r\n  \u003cValue_to /\u003e    \u003c--- MISSING VALUE\r\n  \u003cValue\u003e2023-07-12T17:05:37.4485796+02:00\u003c/Value\u003e\r\n\u003c/MyClass\u003e`\r\n\r\nI attach the code.\r\n\r\nCheers\r\n[Serialize_MS.zip](https://github.com/dotnet/runtime/files/12029398/Serialize_MS.zip)\r\n",
                                           "updatedAt":  "2023-07-12T15:08:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p6NZs",
                                           "createdAt":  "2023-10-24T09:38:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rgroenewoudt",
                                           "body":  "@Maximys I see a few related commits. Would you be willing to work on a pull request?",
                                           "updatedAt":  "2023-10-24T09:38:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p8ctQ",
                                           "createdAt":  "2023-10-24T15:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKyJxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2023-10-24T15:15:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2023-10-24T15:15:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Maximys",
                                           "body":  "\u003e @Maximys I see a few related commits. Would you be willing to work on a pull request?\r\n\r\nYes, @rgroenewoudt , I\u0027ll try to continue my work",
                                           "updatedAt":  "2023-10-24T15:13:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wEbrG",
                                           "createdAt":  "2024-01-07T23:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dgolub",
                                           "body":  "Is anyone actively working on this issue?  If not, I\u0027d be willing to consider getting involved.",
                                           "updatedAt":  "2024-01-07T23:14:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xFycl",
                                           "createdAt":  "2024-01-17T23:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyH7pA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LaughingJohn",
                                                                               "createdAt":  "2024-02-01T16:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2024-05-09T17:27:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SandstromErik",
                                                                               "createdAt":  "2024-09-13T09:34:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "LordBenjamin",
                                           "body":  "@eiriktsarpalis @StephenMolloy is there any plan to progress this? EF Core 8 now scaffolds `DateOnly` and `TimeOnly` properties by default when it encounters a SQL `date` or `time` column. I have updated all of my DTOs accordingly, only to find that the DCS does not support these types.\r\n\r\nI am unable to work around using `ISerializationSurrogateProvider`  to (de)serialize as a `DateTime` also (possibly a separate bug report).",
                                           "updatedAt":  "2024-01-17T23:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50CPl6",
                                           "createdAt":  "2024-02-15T17:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJdQUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LaughingJohn",
                                                                               "createdAt":  "2024-03-21T11:53:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeroenBer",
                                                                               "createdAt":  "2024-03-22T16:06:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "digitaldias",
                                                                               "createdAt":  "2024-04-12T05:00:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SandstromErik",
                                                                               "createdAt":  "2024-06-04T07:46:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spk33",
                                                                               "createdAt":  "2025-03-11T20:26:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "InsanelyOne",
                                           "body":  "This needs to be dealt with soon!  Now that EF 8 is scaffolding DateOnly/TimeOnly properties, this is a big FAIL!",
                                           "updatedAt":  "2024-02-15T17:46:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IQkwA",
                                           "createdAt":  "2024-08-13T11:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgqtWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LaughingJohn",
                                                                               "createdAt":  "2024-09-04T11:24:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "SandstromErik",
                                                                               "createdAt":  "2024-09-13T07:55:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "alex-wicht",
                                                                               "createdAt":  "2024-10-10T12:23:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ahmednfwela",
                                                                               "createdAt":  "2024-10-12T09:29:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "taspeotis",
                                                                               "createdAt":  "2024-11-28T00:55:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "anbeng",
                                                                               "createdAt":  "2025-03-28T21:39:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "kaylumah",
                                                                               "createdAt":  "2025-05-27T09:38:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "bachratyg",
                                                                               "createdAt":  "2025-07-30T21:56:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "kirsan31",
                                                                               "createdAt":  "2025-09-03T12:37:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Moving to Future as feature development for .NET 9 is now completed.",
                                           "updatedAt":  "2024-08-13T11:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BqPPP",
                                           "createdAt":  "2025-09-03T12:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Montago",
                                           "body":  "It\u0027s now the future ... its still missing 😅\n\nIt\u0027s very much a missed feature in WCF too (which rely on DataContractSerializer): https://github.com/CoreWCF/CoreWCF/issues/1636\n\nOh - i now noticed that this feature is in the 10.0 PR ... will wait for it then :) ",
                                           "updatedAt":  "2025-09-03T12:40:15Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Add DateIOnly/TimeOnly support to XmlSerializer and DataContractSerializer",
        "labels":  [
                       "area-Serialization",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58421",
        "createdAt":  "2021-08-31T03:58:45Z",
        "number":  58421,
        "author":  "kornelpal",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3Tvww==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ruzena-kavanova",
                                            "createdAt":  "2024-04-18T08:29:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T22:29:09Z",
        "body":  "### Description\r\n\r\nWhile evaluating workarounds for #58093, I kept running into errors with [Microsoft.XmlSerializer.Generator](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator) and [WCF Core](https://github.com/dotnet/wcf):\r\n\r\n```\r\n.NET Xml Serialization Generation Utility, Version 5.0.0]\r\nSGEN : warning SGEN1: Could not load file or assembly \u0027System.ServiceModel.Primitives, Version=4.8.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL\u0027. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (0x80131058)\r\nSGEN : warning SGEN1: Cannot load a reference assembly for execution.\r\nA BadImageFormatException has been thrown while parsing the signature. This is likely due to lack of a generic context. Ensure genericTypeArguments and genericMethodArguments are provided and contain enough context.\r\nCould not load file or assembly \u0027System.ServiceModel.Primitives, Version=4.8.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (0x80131058)\r\nCannot load a reference assembly for execution.\r\n```\r\nAlthough seems to be a hack, dotnet/corefx#32403 added a workaround for a similar problem that worked while WCF Core was using `netstandard`, but broke when WCF Core changed to `netcoreapp`.\r\n\r\n### Configuration\r\n\r\n.NET 5.0.9\r\nMicrosoft.XmlSerializer.Generator 5.0.0\r\nWCF Core 3.2.1\r\nOS/architecture agnostic\r\n\r\n### Regression?\r\n\r\nYes, worked with older WCF Core releases targeting `netstandard`.\r\n\r\n### Other information\r\n\r\nI was able make it work by changing the regular expression in the tool to allow the new `netcoreapp` and `net` targets too:\r\n```csharp\r\nstring pattern = \"\\\\\\\\ref\\\\\\\\(netstandard|netcoreapp|net)\\\\d*\\\\.?\\\\d*\\\\.?\\\\d*\\\\\\\\System.ServiceModel.Primitives.dll\";\r\n```\r\n\r\n@mconnew recommended a workaround in https://github.com/dotnet/runtime/issues/1390#issuecomment-558848416 to separate data classes into a dedicated library project that probably could help with this bug too.\r\n\r\nWas great if a more generic solution could be found to either load the `lib` versions automatically or to make the tool work with the `ref` versions, potentially by loading those into a reflection-only context.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsI8BPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42NpVw",
                                           "createdAt":  "2021-08-31T19:34:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "There\u0027s currently work being done to switch to using MetadataLoadContext. Part of the problem is the changes aren\u0027t just in the Generator tool, we need changes in some runtime implementation in .NET Core as the Generator passes MemberInfo objects runtime methods which then reflect over it using GetCustomAttributes. This doesn\u0027t work with either a reflection based load context or the MetadataLoadContext as it requires instantiation of the attribute instance. So we\u0027re working through finding all the code paths and converting them to use GetCustomAttributesData instead. I know this must be frustrating waiting all this time, but it is in progress.",
                                           "updatedAt":  "2021-08-31T19:34:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42OEsh",
                                           "createdAt":  "2021-08-31T21:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODen2RA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzalamea",
                                                                               "createdAt":  "2023-12-08T23:06:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ruzena-kavanova",
                                                                               "createdAt":  "2024-04-18T08:29:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kornelpal",
                                           "body":  "I was able to work around the issue by adding the following to the MSBuild (.csproj) file that is referencing the tool:\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cSGenReferences\u003e$([System.Text.RegularExpressions.Regex]::Replace(@(ReferencePath), `(?\u0027pre\u0027[\\\\/])ref(?\u0027post\u0027[\\\\/](netstandard|netcoreapp|net)\\d+(\\.\\d+)*[\\\\/])`, `${pre}lib${post}`))\u003c/SGenReferences\u003e\r\n\u003c/PropertyGroup\u003e\r\n```",
                                           "updatedAt":  "2021-08-31T21:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wjwE-",
                                           "createdAt":  "2025-06-11T10:38:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Soundman32",
                                           "body":  "I\u0027m getting the same errors on net 8.\n\n\t\t\u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"8.0.0\" /\u003e\n\t\t\u003cPackageReference Include=\"System.ServiceModel.Primitives\" Version=\"8.1.2\" /\u003e\n\t\t\u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"8.0.0\" /\u003e\n\nThe workaround does fix the build problems, but it would be nice to see a proper fix.",
                                           "updatedAt":  "2025-06-11T10:38:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Microsoft.XmlSerializer.Generator 5.0.0 does not work with WCF Core 3.2.1",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59123",
        "createdAt":  "2021-09-14T23:57:43Z",
        "number":  59123,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T20:49:15Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataContractSerializer-cannot-deserializ/1500589)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\n_The text has been updated due to presentation issues with the code when shown on the page. It looks fine in preview._\n\nException is thrown when a class implementing IExtensibleDataObject and DataContractSerializer is used to deserialize and an unknown property contains .\n\nAn existing class, implementing IExtensibleDataObject, has been updated with a new property. The new property holds a CDATA, like some other existing properties which has been there from start. New requirements required the new property. The class is used by several applications and not all of them are interested in the new property and thus shouldn\u0027t require us to build new versions of them. The class has been used for a long time and its has newer before been any problem for older applications to read newer versions of the class. Until now.  \n\nThe following code recreates the issue\n[Program.cs](https://aka.ms/dc/file?name=Be461fd77f946465eb6c2e661fe56a875637643538426005880_Program.cs\u0026tid=e461fd77f946465eb6c2e661fe56a875637643538426005880)\n[IExtensibleDataObjectWithCDATA.csproj](https://aka.ms/dc/file?name=B41b24a7cb4254b45afffb4ca8ebed291637643475862621412_IExtensibleDataObjectWithCDATA.csproj\u0026tid=41b24a7cb4254b45afffb4ca8ebed291637643475862621412)\n\nThe code cannot be pasted here as part of it is not properly shown (even though it is marked as code.\n\nThe project was created with template \u0027Console Application\u0027 in VS 2019 (16.10.4).\n\nWhen escaping the illegal characters in Prop2, \n```\nDue to presentation issues \u0027\u0026\u0027 has been replaced with \u0027_\u0027\n\"_lt;![CDATA[_lt;InnerTag2_gt;_lt;/InnerTag2_gt;]]_gt;\"\n```\n, the data is read when deserializing as the old version of my object and ExtensionData contains Prop2. But when deserializing as the new version Prop2 is set to the string\n```\nDue to presentation issues \u0027\u0026\u0027 has been replaced with \u0027_\u0027\n\"_lt;![CDATA[_lt;InnerTag2_gt;_lt;/InnerTag2_gt;]]_gt;\"\n```\nand not as expected \n```\nDue to presentation issues \u0027\u003c\u0027 has been replaced with \u0027_\u0027\n\"_InnerTag2\u003e_/InnerTag2\u003e\"\n```\n\nWhen removing IExtensibleDataObject from MyObjectV1 the data is read when deserializing as the old version.\n\nThe code has been tested with .Net Core 3.1 and .Net 5.0. The code has also been tested with .Net Framework 4.6.1 and 4.8 with same result.\n\n---\n### Original Comments\n\n#### Johan Vik on 8/11/2021, 08:35 AM: \n\n\u003cp\u003eDon’t know what happened, it looked good in preview. Attaching the code and csproj files.\u003c/p\u003e\n\u003cp\u003e\u003ca target=\u0027_blank\u0027 href=\"https://aka.ms/dc/file?name=B84b73f548f77485fbef3b2779328d8a8637642928731089193_Program.cs\u0026amp;tid=84b73f548f77485fbef3b2779328d8a8637642928731089193\"\u003eProgram.cs\u003c/a\u003e\u003cbr\u003e\n\u003ca target=\u0027_blank\u0027 href=\"https://aka.ms/dc/file?name=B1a1e1391c7f54647a98c13ab2cb18da9637642928891535718_IExtensibleDataObjectWithCDATA.csproj\u0026amp;tid=1a1e1391c7f54647a98c13ab2cb18da9637642928891535718\"\u003eIExtensibleDataObjectWithCDATA.csproj\u003c/a\u003e\u003c/p\u003e\n\n#### Feedback Bot on 8/12/2021, 01:15 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Johan Vik on 8/12/2021, 01:43 AM: \n\n\u003cp\u003eThe issue report has been updated due to problems when presenting XML tags.\u003cbr\u003e\nThe first section, still though, misses a CDATA tag after ‘… unknown property contains’.\u003c/p\u003e\n\u003cp\u003eDisregard my first comment as the text has been updated and now contains the code as attachments.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSLxxxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5It5CZ",
                                           "createdAt":  "2022-08-18T21:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "This bug has been shifted between a couple different feedback mechanisms... and the links to the repro code do not work for me in any of them.\r\n\r\nBased on the description alone, this seems unlikely to be a regression. We would need a sample to fully understand the issue being reported though. Please re-attach repro code for further action.",
                                           "updatedAt":  "2022-08-18T21:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IvHHH",
                                           "createdAt":  "2022-08-19T06:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Johvi5",
                                           "body":  "Sample code as requested.\r\n[IExtensibleDataObjectWithCDATA.zip](https://github.com/dotnet/runtime/files/9379707/IExtensibleDataObjectWithCDATA.zip)\r\n",
                                           "updatedAt":  "2022-08-19T06:40:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DataContractSerializer cannot deserialize unknown property containing CDATA when implementing IExtensibleDataObject",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61319",
        "createdAt":  "2021-11-08T16:53:02Z",
        "number":  61319,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrV0TQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rummelsworth",
                                            "createdAt":  "2022-01-12T16:36:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ildrial",
                                            "createdAt":  "2022-11-07T15:23:38Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-07-06T20:18:51Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/XSDexe-does-not-work-with-NET-Core-ass/1210498)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\nXSD.exe seems to be a .NET Framework executable. If you try to give it a .NET Core assembly to generate XSD files from, it doesn\u0027t work. (Which makes sense, because .NET Framework executables can\u0027t load .NET Core assemblies.)\n\n- How are we supposed to generate XSD files for types in .NET Core assemblies?\n\nIn some cases, there\u0027s a workaround: Retarget your .NET Core assembly to netstandard2.0. Then XSD.exe handles it fine. I can\u0027t use this workaround, because there are non-trivial dependencies that prohibit me from retargeting to netstandard2.0.\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/8/2020, 11:07 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### null on 1/18/2021, 11:53 PM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003c/p\u003e\n\u003cp\u003eIf so, in order for us to investigate further, please provide more information by recording your repro steps via the Visual Studio Feedback Tool (Help -\u0026gt; Send Feedback -\u0026gt; Report A Problem). The feedback tool will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace). Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool– \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019#when-further-information-is-needed\"\u003efull instructions\u003c/a\u003e\u003cbr\u003e\nIn our \u003ca target=\u0027_blank\u0027 href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\"\u003eguidelines\u003c/a\u003e , you can get tips on how to provide clear and simple reproducible steps.\u003c/p\u003e\n\u003cp\u003eGet performance issues fixed quicker, please see \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### William Rummler on 1/19/2021, 08:00 AM: \n\n\u003cp\u003eYes, I can still reproduce the issue with the latest stable version of VS.\u003c/p\u003e\n\u003cp\u003eI used the Feedback Tool to record the repro steps and upload my logs, but I’m not sure how much it’ll help you, since it’s just running a console app from the SDK through a Developer Powershell window within VS. Hopefully it’s actually capturing the logging data you expect and need.\u003c/p\u003e\n\u003cp\u003eIf not, it’s easy to reproduce manually. Just create a new .NET Core class library project, build it, open a VS developer prompt in that project folder, and run “xsd path\\to\\output\\assembly.dll /t:Class1” (assuming Class1 is the default type name used by the project template).\u003c/p\u003e\n\u003cp\u003eLet me know if you need something else. Thanks.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYNA-bg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45a7TY",
                                           "createdAt":  "2021-11-08T16:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/XSDexe-does-not-work-with-NET-Core-ass/1210498)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\nXSD.exe seems to be a .NET Framework executable. If you try to give it a .NET Core assembly to generate XSD files from, it doesn\u0027t work. (Which makes sense, because .NET Framework executables can\u0027t load .NET Core assemblies.)\n\n- How are we supposed to generate XSD files for types in .NET Core assemblies?\n\nIn some cases, there\u0027s a workaround: Retarget your .NET Core assembly to netstandard2.0. Then XSD.exe handles it fine. I can\u0027t use this workaround, because there are non-trivial dependencies that prohibit me from retargeting to netstandard2.0.\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/8/2020, 11:07 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### null on 1/18/2021, 11:53 PM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003c/p\u003e\n\u003cp\u003eIf so, in order for us to investigate further, please provide more information by recording your repro steps via the Visual Studio Feedback Tool (Help -\u0026gt; Send Feedback -\u0026gt; Report A Problem). The feedback tool will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace). Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool– \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019#when-further-information-is-needed\"\u003efull instructions\u003c/a\u003e\u003cbr\u003e\nIn our \u003ca target=\u0027_blank\u0027 href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\"\u003eguidelines\u003c/a\u003e , you can get tips on how to provide clear and simple reproducible steps.\u003c/p\u003e\n\u003cp\u003eGet performance issues fixed quicker, please see \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### William Rummler on 1/19/2021, 08:00 AM: \n\n\u003cp\u003eYes, I can still reproduce the issue with the latest stable version of VS.\u003c/p\u003e\n\u003cp\u003eI used the Feedback Tool to record the repro steps and upload my logs, but I’m not sure how much it’ll help you, since it’s just running a console app from the SDK through a Developer Powershell window within VS. Hopefully it’s actually capturing the logging data you expect and need.\u003c/p\u003e\n\u003cp\u003eIf not, it’s easy to reproduce manually. Just create a new .NET Core class library project, build it, open a VS developer prompt in that project folder, and run “xsd path\\to\\output\\assembly.dll /t:Class1” (assuming Class1 is the default type name used by the project template).\u003c/p\u003e\n\u003cp\u003eLet me know if you need something else. Thanks.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T16:53:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45a7XB",
                                           "createdAt":  "2021-11-08T16:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/XSDexe-does-not-work-with-NET-Core-ass/1210498)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\nXSD.exe seems to be a .NET Framework executable. If you try to give it a .NET Core assembly to generate XSD files from, it doesn\u0027t work. (Which makes sense, because .NET Framework executables can\u0027t load .NET Core assemblies.)\n\n- How are we supposed to generate XSD files for types in .NET Core assemblies?\n\nIn some cases, there\u0027s a workaround: Retarget your .NET Core assembly to netstandard2.0. Then XSD.exe handles it fine. I can\u0027t use this workaround, because there are non-trivial dependencies that prohibit me from retargeting to netstandard2.0.\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/8/2020, 11:07 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### null on 1/18/2021, 11:53 PM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003c/p\u003e\n\u003cp\u003eIf so, in order for us to investigate further, please provide more information by recording your repro steps via the Visual Studio Feedback Tool (Help -\u0026gt; Send Feedback -\u0026gt; Report A Problem). The feedback tool will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace). Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool– \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019#when-further-information-is-needed\"\u003efull instructions\u003c/a\u003e\u003cbr\u003e\nIn our \u003ca target=\u0027_blank\u0027 href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\"\u003eguidelines\u003c/a\u003e , you can get tips on how to provide clear and simple reproducible steps.\u003c/p\u003e\n\u003cp\u003eGet performance issues fixed quicker, please see \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### William Rummler on 1/19/2021, 08:00 AM: \n\n\u003cp\u003eYes, I can still reproduce the issue with the latest stable version of VS.\u003c/p\u003e\n\u003cp\u003eI used the Feedback Tool to record the repro steps and upload my logs, but I’m not sure how much it’ll help you, since it’s just running a console app from the SDK through a Developer Powershell window within VS. Hopefully it’s actually capturing the logging data you expect and need.\u003c/p\u003e\n\u003cp\u003eIf not, it’s easy to reproduce manually. Just create a new .NET Core class library project, build it, open a VS developer prompt in that project folder, and run “xsd path\\to\\output\\assembly.dll /t:Class1” (assuming Class1 is the default type name used by the project template).\u003c/p\u003e\n\u003cp\u003eLet me know if you need something else. Thanks.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T16:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45bUXW",
                                           "createdAt":  "2021-11-08T18:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "See also \u003chttps://github.com/dotnet/runtime/issues/1391\u003e.",
                                           "updatedAt":  "2021-11-08T18:42:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45cmCy",
                                           "createdAt":  "2021-11-09T04:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@HongGit maybe a dupe as noted.",
                                           "updatedAt":  "2021-11-09T04:05:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QyCz",
                                           "createdAt":  "2022-01-12T13:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danglund",
                                           "body":  "Here are some minimal repro-steps that demonstrates how xsd.exe generates classes that don\u0027t work with .NET Core, but they do work with .NET Standard: \r\n\r\n1. Download XSD schema for German e-commerce items from: \r\nhttps://www.bme.de/fileadmin/content/Initativen/BMEcat/Download_BMEcat_2005/bmecat_2005_xsd.zip\r\n\r\n2. Using Visual Studio 2022 command line, use xsd.exe to generate C# classes from the XML Schema: \r\n\r\n`C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\u003exsd /c bmecat_2005_1.xsd /o:c:\\temp`\r\n\r\n3. Create a new project using .NET Core 3.1\r\n4. Add the class you generated in c:\\temp\r\n5. Download a sample XML file. For example:\r\nhttps://github.com/stephanstapel/BMECat.net/blob/master/Documentation%20and%20Samples/WEI_BMECat_8965490000.xml\r\n\r\n6. Attempt do deserialize the sample XML file in code\r\n\r\n```\r\nvar ser = new XmlSerializer(typeof(BMECAT));\r\nconst string filename = @\"c:\\temp\\WEI_BMECat_8965490000.xml\";\r\nvar bmeCat = ser.Deserialize(new FileStream(filename, FileMode.Open)) as BMECAT;\r\n \r\nif (bmeCat != null) \r\n{\r\n   // do whatever here...\r\n}\r\n```\r\n\r\nThe above code will work in .NET Standard. In .NET Core 3.1 you will get the error: \r\n**System.PlatformNotSupportedException: \u0027Compiling JScript/CSharp scripts is not supported\u0027**\r\n",
                                           "updatedAt":  "2022-01-12T13:15:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Qz9c",
                                           "createdAt":  "2022-01-12T13:21:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Does the code generated by xsd.exe work in .NET Core 3.1 (or .NET 6) if you also add the Microsoft.XmlSerializer.Generator package as described in [Using Microsoft XML Serializer Generator on .NET Core](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator)?",
                                           "updatedAt":  "2022-01-12T13:21:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Rvib",
                                           "createdAt":  "2022-01-12T17:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danglund",
                                           "body":  "\u003e Does the code generated by xsd.exe work in .NET Core 3.1 (or .NET 6) if you also add the Microsoft.XmlSerializer.Generator package as described in [Using Microsoft XML Serializer Generator on .NET Core](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator)?\r\n\r\nThanks for the tip! I can follow the instructions and it works for the simple MyClass example in the article. The code generated by xsd.exe fails as before. It fails on runtime when it creates the XmlSerializer. \r\n\r\nWORKS\r\nvar serializer = new System.Xml.Serialization.XmlSerializer(typeof(MyClass));\r\n\r\nFAILS\r\nvar serializer = new System.Xml.Serialization.XmlSerializer(typeof(BMECAT));\r\n\r\nThe failing example warns while building the project. Something about implicit conversion between FT_VALUE and FT_VALUES.\r\n\r\n`1\u003e.NET Xml Serialization Generation Utility, Version 6.0.0]\r\n1\u003eSerialization Code File Name: C:\\Users\\\u003cuser\u003e\\source\\repos\\MyApp\\obj\\Debug\\net6.0\\MyApp.XmlSerializers.cs.\r\n1\u003eGenerated serialization code for assembly C:\\Users\\\u003cuser\u003e\\source\\repos\\MyApp\\obj\\Debug\\net6.0\\MyApp.dll --\u003e \u0027C:\\Users\\\u003cuser\u003e\\source\\repos\\MyApp\\obj\\Debug\\net6.0\\MyApp.XmlSerializers.cs\u0027.\r\n1\u003eobj\\Debug\\net6.0\\MyApp.XmlSerializers.cs(8627,99): warning CS0030: Cannot convert type \u0027FT_VALUE\u0027 to \u0027FT_VALUES\u0027\r\n1\u003eobj\\Debug\\net6.0\\MyApp.XmlSerializers.cs(32184,123): warning CS0029: Cannot implicitly convert type \u0027FT_VALUES\u0027 to \u0027FT_VALUE\u0027\r\n1\u003eC:\\Users\\\u003cuser\u003e\\.nuget\\packages\\microsoft.xmlserializer.generator\\6.0.0\\build\\Microsoft.XmlSerializer.Generator.targets(53,5): warning MSB4181: The \"Csc\" task returned false but did not log an error.\r\n1\u003eC:\\Users\\\u003cuser\u003e\\.nuget\\packages\\microsoft.xmlserializer.generator\\6.0.0\\build\\Microsoft.XmlSerializer.Generator.targets(55,5): warning : SGEN: Failed to generate the serializer for MyApp.dll. Please follow the instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again.`\r\n",
                                           "updatedAt":  "2022-01-12T17:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48R0Y0",
                                           "createdAt":  "2022-01-12T17:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@danglund, if Microsoft.XmlSerializer.Generator generates code that fails to build, I think it\u0027s worth a separate issue because it\u0027s not a problem with xsd.exe. I searched for \"CS0030\" and \"CS0029\" in issues of this repo (where the [source code](https://github.com/dotnet/runtime/tree/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/Microsoft.XmlSerializer.Generator) is) and it looks like this error has not been reported before.",
                                           "updatedAt":  "2022-01-12T17:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5adrZu",
                                           "createdAt":  "2023-04-21T12:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Any update on this? I tried using `XsdDataContractExporter` but sadly I can\u0027t get it to work with an external DLL - so really hoping that `xsd.exe` can be updated so I can generated `xsd` files from my C# classes",
                                           "updatedAt":  "2023-04-21T12:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0D5u",
                                           "createdAt":  "2023-07-06T20:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAkpJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dahermansson",
                                                                               "createdAt":  "2023-07-13T08:55:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nalinasanka",
                                           "body":  "Hi All,\r\n\r\nI was able to generate XSD file for .Net Core library using below code. Hope it\u0027ll be helpful for all .Net Core lovers :)\r\n\r\n```\r\ntry\r\n{\r\n    XmlSchemas schemas = new XmlSchemas();\r\n    XmlSchemaExporter exporter = new XmlSchemaExporter(schemas);\r\n\r\n    XmlTypeMapping mapping = new XmlReflectionImporter().ImportTypeMapping(typeof(\"Your Class Name\"));\r\n    exporter.ExportTypeMapping(mapping);\r\n\r\n    using (TextWriter writer = new StreamWriter(\"output.xsd\"))\r\n    {\r\n        foreach (XmlSchema schema in schemas)\r\n        {\r\n            schema.Write(writer);\r\n        }\r\n    }\r\n\r\n    Console.WriteLine(\"XSD generated successfully.\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine($\"Error in generating XSD. Error: {ex.Message}\");\r\n}\r\n```\r\n\r\n\"Your Class Name\" --\u003e Needs to replace with your class name which you want to generate XSD schema.\r\n\r\nThanks\r\n",
                                           "updatedAt":  "2023-07-06T20:18:51Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "XSD.exe does not work with .NET Core assemblies",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64608",
        "createdAt":  "2022-02-01T10:22:21Z",
        "number":  64608,
        "author":  "MD-V",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMerBw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "topsterde",
                                            "createdAt":  "2022-02-01T10:24:06Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T22:29:24Z",
        "body":  "### Description\r\n\r\nGenerated XmlSerializers DLL (from Microsoft.XmlSerializer.Generator) cause FileNotFoundException when used in COM host.\r\n\r\n### Reproduction Steps\r\n\r\n1. Extract attached example [COMServerDemo.zip](https://github.com/dotnet/runtime/files/7977565/COMServerDemo.zip)\r\n2. Run dotnet publish on solution. Command: dotnet publish COMClient.sln\r\n3. Open priviledged command line\r\n4. cd into publish directory. Command: cd COMServer/bin/Debug/net6.0/publish\r\n5. Register COM Host DLL. Command: regsvr32.exe COMServer.comhost.dll\r\n6. Run COMClient in Visual Studio as Debug (Set breakpoint on line var xs = new XmlSerializer(typeof(Class1)); in Server.cs)\r\n7. Optional - unregister DLL. Command: regsvr32.exe /u COMServer.comhost.dll\r\n\r\n\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nComClient program should execute without problems.\r\n\r\n### Actual behavior\r\n\r\nProgram prints exception:\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly \u0027XmlLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027. Das System kann die angegebene Datei nicht finden.\r\nFile name: \u0027XmlLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializerContract.CanSerialize(Type type)\r\n   at System.Xml.Serialization.TempAssembly.LoadGeneratedAssembly(Type type, String defaultNamespace, XmlSerializerImplementation\u0026 contract)\r\n   at System.Xml.Serialization.XmlSerializer..ctor(Type type, String defaultNamespace)\r\n   at System.Xml.Serialization.XmlSerializer..ctor(Type type)\r\n   at COMServer.Server.IServer.ComputePi() in C:\\dev\\COMServerDemo\\COMServer\\Server.cs:line 25\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nDeleting or renaming XmlLib.XmlSerializers.dll before the execution of the program. (XmlSerializer will then build DLL at runtime in memory I suppose)\r\n\r\n### Configuration\r\n\r\nWhich version of .NET is the code running on?\r\n.NET 6.0\r\nWhat OS and version, and what distro if applicable?\r\nWindows 10 20H2 x64\r\nWhat is the architecture (x64, x86, ARM, ARM64)?\r\nx64\r\nDo you know whether it is specific to that configuration?\r\nYes, works when using it without COM host\r\nIf you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\nNo\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Generated XmlSerializers DLL (from Microsoft.XmlSerializer.Generator) cause FileNotFoundException when used in COM host",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66264",
        "createdAt":  "2022-03-06T15:34:02Z",
        "number":  66264,
        "author":  "miu-na",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-03T07:46:17Z",
        "body":  "Currently, the xml serializer will throw an error when serializing immutable arrays containing objects of reference type.\r\nIs it possible to add xml serialization support for immutable arrays containing objects of reference type? Or how to implement this function?\r\n\r\nException:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationWriterScene.Write6_Scene(System.String, System.String, SceneSerializer.Scene, Boolean, Boolean)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationWriterScene.Write7_Scene(System.Object)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Span`1\u003cSystem.Object\u003e ByRef, System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at System.Xml.Serialization.TempAssembly.InvokeWriter(System.Xml.Serialization.XmlMapping, System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces, System.String, System.String)\r\n   at System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter, System.Object, System.Xml.Serialization.XmlSerializerNamespaces, System.String, System.String)\r\n   at System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter, System.Object)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP93veA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_LhkE",
                                           "createdAt":  "2022-03-06T15:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "#66163",
                                           "updatedAt":  "2022-03-06T15:41:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_M18U",
                                           "createdAt":  "2022-03-07T08:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Xml serialization was not actively developed recently, and there\u0027s no infrastructure for rich conversions like json.",
                                           "updatedAt":  "2022-03-07T08:38:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_3e94",
                                           "createdAt":  "2022-03-17T21:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "If you try to serialize as an IEnumerable which is backed by the ImmutableArray... would this work then? That might be a way to unblock until this can be addressed.",
                                           "updatedAt":  "2022-03-17T21:19:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Feature Request] Add xml serialization support for immutable arrays",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66788",
        "createdAt":  "2022-03-17T20:04:21Z",
        "number":  66788,
        "author":  "CodeLeopard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T21:29:15Z",
        "body":  "### Description\n\nAccording to the documentation [here](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ideserializationcallback?view=netstandard-2.0) the callback should be triggered when the entire object graph has been deserialized, however it is actually called after _that specific object_ has been deserialized.\n\n### Reproduction Steps\n\nLook at the output of this console application:\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Runtime.Serialization;\r\n\r\nclass Program\r\n{\r\n\t[DataContract(IsReference = true)]\r\n\tclass Foo : IDeserializationCallback\r\n\t{\r\n\t\t[DataMember]\r\n\t\tpublic Bar bar;\r\n\r\n\t\t[DataMember]\r\n\t\tpublic int sentinel;\r\n\r\n\t\t[OnDeserialized]\r\n\t\tpublic void OnDeserialized(StreamingContext context)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"OnDeserialized   (attribute) Foo {sentinel,2}\");\r\n\t\t}\r\n\r\n\t\tpublic void OnDeserialization(object sender)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"OnDeserialization (callback) Foo {sentinel,2}\");\r\n\t\t}\r\n\t}\r\n\r\n\t[DataContract(IsReference = true)]\r\n\tclass Bar : IDeserializationCallback\r\n\t{\r\n\t\t[DataMember]\r\n\t\tpublic Foo foo;\r\n\r\n\t\t[OnDeserialized]\r\n\t\tpublic void OnDeserialized(StreamingContext context)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"OnDeserialized   (attribute) Bar {foo.sentinel,2}\");\r\n\t\t}\r\n\r\n\t\tpublic void OnDeserialization(object sender)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"OnDeserialization (callback) Bar {foo.sentinel,2}\");\r\n\t\t}\r\n\t}\r\n\r\n\tstatic void Main(string[] args)\r\n\t{\r\n\t\tvar foo = new Foo();\r\n\t\tvar bar = new Bar();\r\n\r\n\t\tfoo.bar = bar;\r\n\t\tfoo.sentinel = 42;\r\n\t\tbar.foo = foo;\r\n\r\n\t\tusing var stream = new MemoryStream();\r\n\t\tvar serializer = new DataContractSerializer(typeof(Foo));\r\n\t\tserializer.WriteObject(stream, foo);\r\n\r\n\t\tstream.Position = 0;\r\n\r\n\t\tvar _ = (Foo)serializer.ReadObject(stream);\r\n\t}\r\n}\r\n\r\n```\n\n### Expected behavior\n\nExpected Console output:\r\n```\r\nOnDeserialized   (attribute) Bar  0\r\nOnDeserialized   (attribute) Foo 42\r\nOnDeserialization (callback) Foo 42\r\nOnDeserialization (callback) Bar 42\r\n```\r\n\r\nThe callback is issued _after_ the entire object graph is deserialized: so after all invocations of the method with `[OnDeserialized]` attribute.\r\nBar observes a value of 42 in the callback.\n\n### Actual behavior\n\nActual Console output:\r\n```\r\nOnDeserialization (callback) Bar  0\r\nOnDeserialized   (attribute) Bar  0\r\nOnDeserialization (callback) Foo 42\r\nOnDeserialized   (attribute) Foo 42\r\n```\r\n\r\nThe callback is issued _before_ the entire object graph is deserialized: so before the last call to the methods with `[OnDeserialized]`.\r\nBar observes a value of 0 in the callback.\n\n### Regression?\n\nNo, from what I can see in the history of the lines I reference below in \u0027Other information\u0027 it was initially implemented this way in [this pull request](https://github.com/dotnet/corefx/pull/13760) back when the code still lived in the corefx repository.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nNetCoreApp3.1\r\nWindows 10 Pro 21H2\r\nx64 AMD\r\n\r\nI originally encountered the issue in a class library project based on NetStandard2.0.\n\n### Other information\n\nI found that the [XmlFormatReaderGenerator](https://github.com/dotnet/runtime/blob/ac20efd2a26202d272604cb353d0d365a3f69c2d/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/XmlFormatReaderGenerator.cs#L122-L125) adds a call to OnDeserialization immediately after reading the xml element.\r\nSimilarly [SurrogateDataContract](https://github.com/dotnet/runtime/blob/ac20efd2a26202d272604cb353d0d365a3f69c2d/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/SurrogateDataContract.cs#L78-L79) also calls it immediately after reading the xml element.\r\n\r\nWhile investigating the issue in my code I noted that the BinaryFormatter does trigger the callback at the expected time. I found a reference to `IDeserializzxationCallback` in [Objectmanager](https://github.com/dotnet/runtime/blob/a1bc0f34fc8ad77c31a1682841d92dbb20e39dd8/src/libraries/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/ObjectManager.cs#L686-L691) where the callback is registered to be called later.\r\n\r\n\r\nWithout the callback working as documented I don\u0027t know of a way for Bar to properly setup itself if it also depends on the state of Foo without me manually and explicitly propagating some trigger after the graph has been returned from the serializer.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu-a4Xw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AR48x",
                                           "createdAt":  "2022-03-24T22:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HongGit",
                                           "body":  "@CodeLeopard is this a regression from .NET framework 4.8?",
                                           "updatedAt":  "2022-03-24T22:12:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AX71F",
                                           "createdAt":  "2022-03-27T20:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeLeopard",
                                           "body":  "@HongGit No: I just retested the reproduction example code with these TargetFrameworks: `net472;net48;netcoreapp3.1;net5.0;net6.0` and all of them produce identical (wrong) output.",
                                           "updatedAt":  "2022-03-27T20:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc675rhf",
                                           "createdAt":  "2025-08-04T21:29:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "`BinaryFormatter` and `DataContractSerializer` are two different serializers. More different than same. Sometimes sharing concepts between the two makes sense and sometimes it doesn\u0027t. The grouping of serializers/formatter in `System.Runtime` is loose and messy at times. Of course, now that `BinaryFormatter` has been retired, we\u0027re just left with a mish-mosh of concepts that might not make complete sense anymore without the context of BF around to explain them.\n\nAnyway, with that said, since this has been the behavior for DCS going back into the days of .Net 4.X, I think it makes more sense to update the documentation than to change the behavior of DCS under peoples noses.",
                                           "updatedAt":  "2025-08-04T21:29:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "DataContractSerializer calls IDeserializationCallback before serialization is completed.",
        "labels":  [
                       "documentation",
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67221",
        "createdAt":  "2022-03-28T07:19:56Z",
        "number":  67221,
        "author":  "TrayanZapryanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-12T06:51:43Z",
        "body":  "When serializing arrays of primary type I\u0027ve found a code which fallbacks to Array.GetValue in ReflectionXmlSerializationWriter .WriteArrayItems method. Code:\r\n```\r\n var arr = o as IList;\r\n\r\n  if (arr != null)\r\n  {\r\n      for (int i = 0; i \u003c arr.Count; i++)\r\n      {\r\n          object? ai = arr[i];\r\n          WriteElements(ai, null/*choiceName + \"i\"*/, elements, text, choice, true, true);\r\n      }\r\n  }\r\n```\r\nThis results in a lot of allocations in simple serialization loop program.\r\n![image](https://user-images.githubusercontent.com/12857389/160345693-67765123-3302-40e8-8635-adb53d7c0a36.png)\r\n\r\nThis is not a real issue found in production code - just something that popups while trying to optimize the upper allocation :\r\n![image](https://user-images.githubusercontent.com/12857389/160346349-8ecb5095-9062-488d-9a7b-fb1f7bacdd54.png)\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Xml serialization]ReflectionXmlSerializationWriter is using Array.GetValue method for primary type arrays",
        "labels":  [
                       "area-Serialization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67222",
        "createdAt":  "2022-03-28T08:09:16Z",
        "number":  67222,
        "author":  "TrayanZapryanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-12T06:52:21Z",
        "body":  "This is follow up of [67005](https://github.com/dotnet/runtime/pull/67005).\r\nFor example if I want to serialize array of decimals - all of them are written into string and then to the underlying XmlWriter.\r\nBenchmark used to test :\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Xml.Serialization;\r\nusing BenchmarkDotNet.Attributes;\r\n\r\nnamespace SimpleBenchmarkConsoleApp\r\n{\r\n\t[MemoryDiagnoser]\r\n\tpublic class ReflectionXmlSerializerBenchmarks\r\n\t{\r\n\t\tprivate readonly XmlSerializer _serializer;\r\n\t\tprivate readonly decimal[] _data;\r\n\t\tprivate readonly MemoryStream _stream;\r\n\r\n\t\tprivate const string SerializationModeSetterName = \"set_Mode\";\r\n\r\n\t\tstatic ReflectionXmlSerializerBenchmarks()\r\n\t\t{\r\n\t\t\tMethodInfo method = typeof(XmlSerializer).GetMethod(SerializationModeSetterName, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static);\r\n\t\t\tif (method == null) throw new Exception($\"No method named {SerializationModeSetterName}\");\r\n\t\t\tmethod.Invoke(null, new object[] { 1 });\r\n\t\t}\r\n\t\tpublic ReflectionXmlSerializerBenchmarks()\r\n\t\t{\r\n\t\t\t_serializer = new XmlSerializer(typeof(decimal[]));\r\n\t\t\t_stream = new MemoryStream();\r\n\t\t\t_data = Enumerable.Repeat(12345.6789m, 200).ToArray();\r\n\r\n\t\t\t_serializer.Serialize(_stream, _data);\r\n\t\t\t_stream.Position = 0;\r\n\t\t}\r\n\r\n\t\t[Benchmark]\r\n\t\tpublic decimal Serialize()\r\n\t\t{\r\n\t\t\t_serializer.Serialize(_stream, _data);\r\n\t\t\tvar result = _stream.Position;\r\n\t\t\t_stream.Position = 0;\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nAnd this result into following allocations:\r\n![image](https://user-images.githubusercontent.com/12857389/160352939-45f3fca6-bbd7-45d7-bcfd-1e71bfd9d2c1.png)\r\n\r\nIdea for optimization:\r\nExtend XmlRawWriter with additional virtual WriteSpan method which fallbacks to WriteString, but in some classes can be overridden in more performant way. For example XmlUtf8RawTextWriter already has a buffer of bytes and there we can override it like this :\r\n```\r\ninternal override unsafe void WriteSpan(ReadOnlySpan\u003cchar\u003e value)\r\n{\r\n    Debug.Assert(value.Length != 0);\r\n    fixed (char* pSrc = value)\r\n    {\r\n        char* pSrcEnd = pSrc + value.Length;\r\n        if (_inAttributeValue)\r\n        {\r\n            WriteAttributeTextBlock(pSrc, pSrcEnd);\r\n        }\r\n        else\r\n        {\r\n            WriteElementTextBlock(pSrc, pSrcEnd);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI will add a draft PR , just to visualize the idea and a sample how decimals can benefit from it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Xml Serialization] Possible optimization when writing primitive objects",
        "labels":  [
                       "area-Serialization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67789",
        "createdAt":  "2022-04-09T01:12:40Z",
        "number":  67789,
        "author":  "JustinSchneiderPBI",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T21:16:11Z",
        "body":  "### Description\r\n\r\nI\u0027m unable to install the XmlSerializer.Generator tool on 2 separate machines. dotnet reports that the package is not DotnetTool type. I\u0027m not finding others hitting this issue and I do see a blogpost by someone discussing how to parameterize the calls, so clearly others are getting farther than me.\r\nI\u0027ve tried including the packageReference and DotNetCliToolReference at the project level. I\u0027ve tried with only the PackageReference since the package build/*.props file already handles DotNetCliToolReference for the user. I\u0027ve tried directly installing the tool. The package installs just fine, but installing it as a tool does not work on either machine. I gave the repro with V6.0.0, but I\u0027ve also tried with 1.0.0 and 7.0.0-preview.1.22076.8\r\nMicrosoft.VisualStudio.SlnGen.Tool installs without issue.\r\n\r\n### Reproduction Steps\r\n\r\ndotnet tool install --ignore-failed-sources --global --version 6.0.0 Microsoft.XmlSerializer.Generator\r\n\r\n### Expected behavior\r\n\r\nXmlSerializers tool is installed\r\n\r\n### Actual behavior\r\n\r\nC:\\PQ\u003edotnet tool install --ignore-failed-sources --global --version 6.0.0 Microsoft.XmlSerializer.Generator\r\n%user%\\AppData\\Local\\Temp\\h030q1t3.yju\\restore.csproj : error NU1212: Invalid project-package combination fo\r\nr Microsoft.XmlSerializer.Generator 6.0.0. DotnetToolReference project style can only contain references of the DotnetT\r\nool type\r\nThe tool package could not be restored.\r\nTool \u0027microsoft.xmlserializer.generator\u0027 failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n\r\nFor more reasons, including package naming enforcement, visit https://aka.ms/failure-installing-tool\r\nDescription:\r\n  Install global or local tool. Local tools are added to manifest and restored.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nC:\\PQ\u003edotnet --version\r\n7.0.100-preview.1.22110.4\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQS5CEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BLkIS",
                                           "createdAt":  "2022-04-09T01:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-09T01:12:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.XmlSerializer.Generator tool cannot be installed as a tool",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69435",
        "createdAt":  "2022-05-17T14:19:05Z",
        "number":  69435,
        "author":  "zivkan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T16:59:06Z",
        "body":  "### Description\n\nNuGet is designed to be deterministic, meaning every restore should, in theory, work the same. Therefore, on command line restores, NuGet tells MSBuild to ignore props and targets files from packages, so they can\u0027t modify the restore graph. However, in Visual Studio, NuGet does not interact with MSBuild directly, VS is designed for project systems to interact with MSBuild, and other components use APIs on the project system instead. The project system does not honor NuGet\u0027s deterministic quality.\r\n\r\nThe Microsoft.XmlSerializer.Generator package tries to add a `\u003cDotNetCliToolReference` item to the project in its props file: https://github.com/dotnet/runtime/blob/9c938f726b7ca6d432114dae0504a5c164e8fbd6/src/libraries/Microsoft.XmlSerializer.Generator/src/GenerateNupkgProps.targets#L20\r\n\r\nAs described above, this will not work from command line restores. But in Visual Studio, if you `git clean`, on solution load NuGet will see a PackageReference to this package, and restore it, but since the package\u0027s props file is not yet available, the `DotNetCliToolReference` is not added, just like on the command line. After the VS project system then re-evaluates the project, to see what changes the packages make (needed for things like Source Link, Git Versioning, etc), it will see that there\u0027s a new `DotNetCliToolReference` that was not there before, and tell NuGet to do a second restore. In this second restore NuGet will include the package as both a package reference and a DotNetCliToolReference.\r\n\r\nNote, the docs for the package explicitly tell customers to add both a PackageReference and DotNetCliToolReference reference: https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator\r\n\r\nIf the package\u0027s props file did not try to add the DotNetCliToolReference itself, then customers would more quickly learn that they\u0027re not using the package as intended, rather than being confused about why it works in VS but not on the command line. In fact, the props or targets file could check if the DotNetCliToolReference is missing, and give customers a clear error message, rather than the obscure error that currently happens on the command line.\n\n### Reproduction Steps\n\nCreate a project that uses/needs Microsoft.XmlSerializer.Generator, and delete the `obj/` folder in between tests.\n\n### Expected behavior\n\nProject works the same in Visual Studio and on the command line (think CI build server)\n\n### Actual behavior\n\nCustomer is reporting that they get an error message: https://discord.com/channels/732297728826277939/734779766137421894/975976174117322783\r\n\r\n\u003e Version for package Microsoft.XmlSerializer.Generator cannot be resolved\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nFeel free to reach out to me, or others in the NuGet team if you want to discuss any of this. It\u0027s been a long, long time since we (NuGet team) talked to the project system team about this, so I planning on bringing up this topic, to see if we can find a way to make VS work the same way as CLI restores (ignore package props/targets files), which will have the unfortunate consequence of breaking this package in VS, but will have the benefit of no longer giving package authors a false impression that their package works, when they only test in VS.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU097nQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DSiDR",
                                           "createdAt":  "2022-05-17T14:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNuGet is designed to be deterministic, meaning every restore should, in theory, work the same. Therefore, on command line restores, NuGet tells MSBuild to ignore props and targets files from packages, so they can\u0027t modify the restore graph. However, in Visual Studio, NuGet does not interact with MSBuild directly, VS is designed for project systems to interact with MSBuild, and other components use APIs on the project system instead. The project system does not honor NuGet\u0027s deterministic quality.\r\n\r\nThe Microsoft.XmlSerializer.Generator package tries to add a `\u003cDotNetCliToolReference` item to the project in its props file: https://github.com/dotnet/runtime/blob/9c938f726b7ca6d432114dae0504a5c164e8fbd6/src/libraries/Microsoft.XmlSerializer.Generator/src/GenerateNupkgProps.targets#L20\r\n\r\nAs described above, this will not work from command line restores. But in Visual Studio, if you `git clean`, on solution load NuGet will see a PackageReference to this package, and restore it, but since the package\u0027s props file is not yet available, the `DotNetCliToolReference` is not added, just like on the command line. After the VS project system then re-evaluates the project, to see what changes the packages make (needed for things like Source Link, Git Versioning, etc), it will see that there\u0027s a new `DotNetCliToolReference` that was not there before, and tell NuGet to do a second restore. In this second restore NuGet will include the package as both a package reference and a DotNetCliToolReference.\r\n\r\nNote, the docs for the package explicitly tell customers to add both a PackageReference and DotNetCliToolReference reference: https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator\r\n\r\nIf the package\u0027s props file did not try to add the DotNetCliToolReference itself, then customers would more quickly learn that they\u0027re not using the package as intended, rather than being confused about why it works in VS but not on the command line. In fact, the props or targets file could check if the DotNetCliToolReference is missing, and give customers a clear error message, rather than the obscure error that currently happens on the command line.\n\n### Reproduction Steps\n\nCreate a project that uses/needs Microsoft.XmlSerializer.Generator, and delete the `obj/` folder in between tests.\n\n### Expected behavior\n\nProject works the same in Visual Studio and on the command line (think CI build server)\n\n### Actual behavior\n\nCustomer is reporting that they get an error message: https://discord.com/channels/732297728826277939/734779766137421894/975976174117322783\r\n\r\n\u003e Version for package Microsoft.XmlSerializer.Generator cannot be resolved\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nFeel free to reach out to me, or others in the NuGet team if you want to discuss any of this. It\u0027s been a long, long time since we (NuGet team) talked to the project system team about this, so I planning on bringing up this topic, to see if we can find a way to make VS work the same way as CLI restores (ignore package props/targets files), which will have the unfortunate consequence of breaking this package in VS, but will have the benefit of no longer giving package authors a false impression that their package works, when they only test in VS.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezivkan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-libraries`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-17T14:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DWeg_",
                                           "createdAt":  "2022-05-18T12:50:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "cc @StephenMolloy @HongGit ",
                                           "updatedAt":  "2022-05-18T12:50:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FwF0N",
                                           "createdAt":  "2022-06-29T16:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@ericstj do you know who the owners are?",
                                           "updatedAt":  "2022-06-29T16:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GEXX4",
                                           "createdAt":  "2022-07-05T22:07:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Yeah, @StephenMolloy @HongGit.  It is `area-Serialization` here https://github.com/dotnet/runtime/blob/main/docs/area-owners.md",
                                           "updatedAt":  "2022-07-05T22:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PHbtq",
                                           "createdAt":  "2022-11-25T11:16:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Just to make sure, @StephenMolloy @HongGit are you aware of the above raised issue? The `Microsoft.XmlSerializer.Generator` package doesn\u0027t work in some use cases when using the dotnet CLI and it hinders improving the nuget restore mechanism inside Visual Studio.",
                                           "updatedAt":  "2022-11-25T11:16:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TT3ud",
                                           "createdAt":  "2023-01-19T22:57:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "After talking about this this afternoon, @mconnew and I think this package should probably be classified as both a [tool and a dependency](https://learn.microsoft.com/en-us/nuget/create-packages/set-package-type?tabs=dotnet). The package should stop adding \u0027DotNetCliToolReference\u0027... which will \"break\" the VS scenario that still works right now. But we can restore correct behavior on builds both in VS and the command line by creating Tasks in the package and targeting those tasks instead of calling out to exec a dotnet tool. ",
                                           "updatedAt":  "2023-01-19T22:57:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Microsoft.XmlSerializer.Generator adds DotNetCliToolReference to project",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69602",
        "createdAt":  "2022-05-20T10:18:31Z",
        "number":  69602,
        "author":  "davidullrich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0znzA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "warappa",
                                            "createdAt":  "2023-12-23T00:14:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-02-05T10:07:00Z",
        "body":  "### Background and motivation\n\nSimilar to the requirements for serialization of JSON, there is also the challenge with XML that requirements for values before serialization and after deserialization cannot simply be modeled via attributes.\r\n\r\nAnalogous to the support for notifications implemented in .net 6 for the serialization of JSON, this should also be supported for XML.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Xml.Serialization;\r\n\r\n/// Specifies that the type should have its OnDeserializing() method called before deserialization occurs.\r\npublic interface IXmlOnDeserializing\r\n{\r\n    /// The method that is called before deserialization.\r\n    void OnDeserializing();\r\n}\r\n\r\n/// Specifies that the type should have its OnDeserialized() method called after deserialization occurred.\r\npublic interface IXmlOnDeserialized\r\n{\r\n    /// The method that is called after deserialization.\r\n    void OnDeserialized();\r\n}\r\n\r\n/// Specifies that the type should have its OnSerializing() method called before serialization occurs.\r\npublic interface IXmlOnSerializing\r\n{\r\n    /// The method that is called before serialization.\r\n    void OnSerializing();\r\n}\r\n\r\n/// Specifies that the type should have its OnSerialized() method called after serialization occurred.\r\npublic interface IXmlOnSerialized\r\n{\r\n    /// The method that is called after serialization.\r\n    void OnSerialized();\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing System;\r\nusing System.Text;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace org.example;\r\n\r\npublic class Foo : IOnDeserializing, IOnDeserialized\r\n{\r\n    public void OnDeserializing()\r\n    {\r\n        Console.WriteLine(\"Deserializing object!\");\r\n    }\r\n\r\n    public void OnDeserialized()\r\n    {\r\n        Console.WriteLine(\"Object deserialized!\");\r\n    }\r\n}\r\n\r\npublic class App\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        var serializer = new XmlSerializer(typeof(Foo));\r\n        var text = \"\u003c?xml version=\\\"1.0\\\"?\u003e\u003cFoo/\u003e\";\r\n        var reader = new StringReader(text);\r\n        _ = serializer.Deserialize(reader);\r\n    }\r\n}\r\n```\n\n### Alternative Designs\n\nOther approaches can use Attributes.\n\n### Risks\n\nThis should be a low risk approach as the class definitions have to implement the interfaces. For classes not implementing the interfaces, this would be a non-breaking change in serialization behavior. The proposed approach was already discussed for JSON serialization in [#54528](https://github.com/dotnet/runtime/issues/54528)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVHpnIg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DhHpI",
                                           "createdAt":  "2022-05-20T10:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidullrich",
                                           "body":  "I would be able to implement the issue.",
                                           "updatedAt":  "2022-05-20T10:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uemci",
                                           "createdAt":  "2023-02-05T10:05:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQaJ7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "warappa",
                                                                               "createdAt":  "2023-12-23T00:13:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "zvrba",
                                           "body":  "Why 4 different single-method interfaces? With default interface members, these could all be collected in a single interface with 4 methods. Because of empty DIMs, the users then only need to implement the members they need. Concretely:\r\n\r\n```\r\npublic interface ISerializationEvents\r\n{\r\n    void OnDeserializing() { }\r\n    void OnDeserialized() { }\r\n    // etc.\r\n}\r\n```\r\n",
                                           "updatedAt":  "2023-02-05T10:07:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add support for XML serialization callbacks",
        "labels":  [
                       "api-suggestion",
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73961",
        "createdAt":  "2022-08-15T17:48:00Z",
        "number":  73961,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-04T13:01:37Z",
        "body":  "# All failures\r\nSeen on `main`, and https://github.com/dotnet/runtime/pull/73894 :\r\n[Rolling builds](https://dev.azure.com/dnceng/public/_build/results?buildId=1942952\u0026view=results) failing due to trimming errors like:\r\n\r\n```\r\n[22:39:56] fail: [FAIL] DataContractJsonSerializerTests.DCJS_VerifyDateTimeForFormatStringDCJsonSerSettings\r\n[22:39:56] info: System.Runtime.Serialization.SerializationException : No set method for property \u0027System.DateTime UtcDateTime\u0027 in type \u0027System.Runtime.Serialization.DateTimeOffsetAdapter\u0027.\r\n[22:39:56] info:    at System.Runtime.Serialization.Json.JsonFormatReaderGenerator.CriticalHelper.GenerateClassReader(ClassDataContract )\r\n[22:39:56] info:    at System.Runtime.Serialization.Json.JsonClassDataContract.get_JsonFormatReaderDelegate()\r\n[22:39:56] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator , Boolean , DataContractResolver )\r\n[22:39:56] info:    at DataContractJsonSerializerTests.SerializeAndDeserialize[DateTimeOffset](DateTimeOffset value, String baseline, DataContractJsonSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[22:39:56] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[22:39:56] fail: [FAIL] DataContractJsonSerializerTests.DCJS_ClassWithDatetimeOffsetTypeProperty\r\n[22:39:56] info: System.Runtime.Serialization.SerializationException : No set method for property \u0027System.DateTime UtcDateTime\u0027 in type \u0027System.Runtime.Serialization.DateTimeOffsetAdapter\u0027.\r\n[22:39:56] info:    at System.Runtime.Serialization.Json.JsonFormatReaderGenerator.CriticalHelper.GenerateClassReader(ClassDataContract )\r\n[22:39:56] info:    at System.Runtime.Serialization.Json.JsonClassDataContract.get_JsonFormatReaderDelegate()\r\n[22:39:56] info:    at System.Object.ReadTypeWithDateTimeOffsetTypePropertyFromJson(XmlReaderDelegator , XmlObjectSerializerReadContextComplexJson , XmlDictionaryString , XmlDictionaryString[] )\r\n[22:39:56] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator , Boolean , DataContractResolver )\r\n[22:39:56] info:    at DataContractJsonSerializerTests.SerializeAndDeserialize[TypeWithDateTimeOffsetTypeProperty](TypeWithDateTimeOffsetTypeProperty value, String baseline, DataContractJsonSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[22:39:56] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[22:39:56] info: Finished:    System.Runtime.Serialization.Json.Tests.dll\r\n```\r\n\r\n\u003cdiv style=\"font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none; caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0);\"\u003e\u003cbr\u003e\u003cbr\u003e\r\n\r\nTestName | ConsoleUri\r\n-- | --\r\n~~normal-System.Runtime.Serialization.Json.ReflectionOnly.Tests~~ | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Runtime.Serialization.Json.ReflectionOnly.Tests/1/console.22326ac1.log?helixlogtype=result\r\n~~normal-System.Runtime.Serialization.Json.Tests~~ | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Runtime.Serialization.Json.Tests/1/console.ae864d7d.log?helixlogtype=result\r\nnormal-System.Runtime.Serialization.Schema.Tests | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Runtime.Serialization.Schema.Tests/1/console.53a021b1.log?helixlogtype=result\r\n~~normal-System.Runtime.Serialization.Xml.ReflectionOnly.Tests~~ | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Runtime.Serialization.Xml.ReflectionOnly.Tests/1/console.943b0a42.log?helixlogtype=result\r\n~~normal-System.Runtime.Serialization.Xml.Tests~~ | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Runtime.Serialization.Xml.Tests/1/console.76324c76.log?helixlogtype=result\r\nnormal-System.Xml.XmlSerializer.ReflectionOnly.Tests | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Xml.XmlSerializer.ReflectionOnly.Tests/1/console.7177f9b5.log?helixlogtype=result\r\nnormal-System.Xml.XmlSerializer.Tests | https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-1ee9e77bee6d490fac/normal-System.Xml.XmlSerializer.Tests/1/console.a2208202.log?helixlogtype=result\r\n\r\n\u003c/div\u003e\r\n\r\nThe trimming related build errors were fixed in https://github.com/dotnet/runtime/commit/7d986fa00cfc93e656e5bc548f244df82c401b59 . These are actual test failures now. I have pushed fixes for some of these to https://github.com/dotnet/runtime/pull/73894 .\r\n\r\ncc @eerhardt @stephentoub \r\n\r\n# Failures for which the tests have been disabled\r\n\r\n[System.Runtime.Serialization.Schema.Tests log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Schema.Tests/1/console.2e21e33a.log?helixlogtype=result):\r\n\r\n```\r\n[11:27:00] fail: [FAIL] System.Runtime.Serialization.Schema.Tests.RoundTripTest.RountTripTest\r\n[11:27:00] info: System.Runtime.Serialization.InvalidDataContractException : Type \u0027System.ComponentModel.MarshalByValueComponent\u0027 cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute. Alternatively, you can ensure that the type is public and has a parameterless constructor - all public members of the type will then be serialized, and no attributes will be required.\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException(String , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContractSkipValidation(Int32 id, RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract.ClassDataContractCriticalHelper..ctor(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract..ctor(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContractSkipValidation(Int32 id, RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.GetDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.GetMemberTypeDataContract(DataMember )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.AddClassDataContract(ClassDataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.InternalAdd(XmlQualifiedName , DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(XmlQualifiedName , DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.XsdDataContractExporter.AddType(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.XsdDataContractExporter.Export(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.Schema.Tests.RoundTripTest.RountTripTest()\r\n[11:27:00] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\r\n\r\n[System.Runtime.Serialization.Xml.ReflectionOnly.Tests log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Xml.ReflectionOnly.Tests/1/console.37b11bcb.log?helixlogtype=result):\r\n\r\n```\r\n[11:26:59] info: Starting:    System.Runtime.Serialization.Xml.ReflectionOnly.Tests.dll\r\n[11:27:03] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Deserialize_CompatibleWithFullFramework\r\n[11:27:03] info: System.NullReferenceException : Object reference not set to an instance of an object.\r\n[11:27:03] info:    at System.Runtime.Serialization.MemoryStreamAdapter.GetMemoryStream(MemoryStreamAdapter value)\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionReader.ResolveAdapterObject(Object , ClassDataContract )\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionReader.ReflectionReadClass(XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString[] , XmlDictionaryString[] , ClassDataContract )\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionXmlClassReader.ReflectionReadClass(XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString[] , XmlDictionaryString[] )\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract.ReadXmlValue(XmlReaderDelegator , XmlObjectSerializerReadContext )\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadDataContractValue(DataContract , XmlReaderDelegator )\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator reader, String name, String ns, Type declaredType, DataContract\u0026 dataContract)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, String name, String ns)\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName)\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContractSerializer.ReadObject(XmlReader )\r\n[11:27:03] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Deserialize_CompatibleWithFullFramework\u003eg__DeserializeObjectAndValidate|241_0(String input, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable, Boolean expectedWritable)\r\n[11:27:03] info:    at DataContractSerializerTests.DCS_MemoryStream_Deserialize_CompatibleWithFullFramework()\r\n[11:27:03] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[11:27:03] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter\r\n[11:27:03] info: XML comparison is also failing\r\n[11:27:03] info: Test failed for input: System.IO.MemoryStream\r\n[11:27:03] info: Expected: \u003cMemoryStream xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\"\u003e\u003c__identity i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/System\" /\u003e\u003c_buffer\u003e\u003c/_buffer\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:03] info: Actual: \u003cMemoryStream xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\u003c_buffer/\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:03] info: Expected: True\r\n[11:27:03] info: Actual:   False\r\n[11:27:03] info:    at System.Runtime.Serialization.Tests.DataContractSerializerHelper.SerializeAndDeserialize[MemoryStream](MemoryStream value, String baseline, DataContractSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[11:27:03] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Serialize_UsesBuiltInAdapter\u003eg__ValidateObject|240_0(MemoryStream original, String expectedXml, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable)\r\n[11:27:03] info:    at DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter()\r\n[11:27:03] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\r\n\r\n[System.Runtime.Serialization.Xml.Tests log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Xml.Tests/1/console.21dcc89b.log?helixlogtype=result):\r\n\r\n```\r\n[11:27:07] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter\r\n[11:27:07] info: XML comparison is also failing\r\n[11:27:07] info: Test failed for input: System.IO.MemoryStream\r\n[11:27:07] info: Expected: \u003cMemoryStream xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\"\u003e\u003c__identity i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/System\" /\u003e\u003c_buffer\u003e\u003c/_buffer\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:07] info: Actual: \u003cMemoryStream xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\u003c_buffer/\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:07] info: Expected: True\r\n[11:27:07] info: Actual:   False\r\n[11:27:07] info:    at System.Runtime.Serialization.Tests.DataContractSerializerHelper.SerializeAndDeserialize[MemoryStream](MemoryStream value, String baseline, DataContractSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[11:27:07] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Serialize_UsesBuiltInAdapter\u003eg__ValidateObject|238_0(MemoryStream original, String expectedXml, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable)\r\n[11:27:07] info:    at DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter()\r\n[11:27:07] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[11:27:08] fail: [FAIL] System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(testname: \"Exp2\", export: Action`1 { Method = Void \u003cExport_MemberData\u003eb__7_2(System.Runtime.Serialization.XsdDataContractExporter), Target = \u003c\u003ec { } }, schemaCheck: Action`2 { Method = Void \u003cExport_MemberData\u003eb__3(System.String, System.Xml.Schema.XmlSchemaSet), Target = \u003c\u003ec__DisplayClass7_0 { autoImportKVP = False } })\r\n[11:27:08] info: Assert.Equal() Failure\r\n[11:27:08] info: Expected: 20\r\n[11:27:08] info: Actual:   4\r\n[11:27:08] info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.\u003c\u003ec__DisplayClass7_0.\u003cExport_MemberData\u003eb__3(String s, XmlSchemaSet ss)\r\n[11:27:08] info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(String testname, Action`1 export, Action`2 schemaCheck)\r\n[11:27:08] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[257329](https://dev.azure.com/dnceng-public/public/_build/results?buildId=257329)|dotnet/runtime|[XmlSerializerTests.Xml_DefaultValueAttributeSetToNegativeInfinityTest](https://dev.azure.com/dnceng-public/public/_build/results?buildId=257329\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5022798\u0026resultId=124788)|dotnet/runtime#85565|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSZ5J2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IcvYa",
                                           "createdAt":  "2022-08-15T17:48:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSeen on `main`, and https://github.com/dotnet/runtime/pull/73894 :\r\n\r\n[System.Runtime.Serialization.Schema.Tests log][https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Schema.Tests/1/console.2e21e33a.log?helixlogtype=result]:\r\n\r\n```\r\n[11:27:00] fail: [FAIL] System.Runtime.Serialization.Schema.Tests.RoundTripTest.RountTripTest\r\n[11:27:00] info: System.Runtime.Serialization.InvalidDataContractException : Type \u0027System.ComponentModel.MarshalByValueComponent\u0027 cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute. Alternatively, you can ensure that the type is public and has a parameterless constructor - all public members of the type will then be serialized, and no attributes will be required.\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException(String , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContractSkipValidation(Int32 id, RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract.ClassDataContractCriticalHelper..ctor(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract..ctor(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.CreateDataContract(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(Int32 , RuntimeTypeHandle , Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContractSkipValidation(Int32 id, RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(RuntimeTypeHandle typeHandle, Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContract.GetDataContract(Type type)\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.GetDataContract(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.GetMemberTypeDataContract(DataMember )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.AddClassDataContract(ClassDataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.InternalAdd(XmlQualifiedName , DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(XmlQualifiedName , DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(DataContract )\r\n[11:27:00] info:    at System.Runtime.Serialization.DataContracts.DataContractSet.Add(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.XsdDataContractExporter.AddType(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.XsdDataContractExporter.Export(Type )\r\n[11:27:00] info:    at System.Runtime.Serialization.Schema.Tests.RoundTripTest.RountTripTest()\r\n[11:27:00] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\r\n\r\n[System.Runtime.Serialization.Xml.ReflectionOnly.Tests log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Xml.ReflectionOnly.Tests/1/console.37b11bcb.log?helixlogtype=result):\r\n\r\n```\r\n[11:26:59] info: Starting:    System.Runtime.Serialization.Xml.ReflectionOnly.Tests.dll\r\n[11:27:03] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Deserialize_CompatibleWithFullFramework\r\n[11:27:03] info: System.NullReferenceException : Object reference not set to an instance of an object.\r\n[11:27:03] info:    at System.Runtime.Serialization.MemoryStreamAdapter.GetMemoryStream(MemoryStreamAdapter value)\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionReader.ResolveAdapterObject(Object , ClassDataContract )\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionReader.ReflectionReadClass(XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString[] , XmlDictionaryString[] , ClassDataContract )\r\n[11:27:03] info:    at System.Runtime.Serialization.ReflectionXmlClassReader.ReflectionReadClass(XmlReaderDelegator , XmlObjectSerializerReadContext , XmlDictionaryString[] , XmlDictionaryString[] )\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContracts.ClassDataContract.ReadXmlValue(XmlReaderDelegator , XmlObjectSerializerReadContext )\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadDataContractValue(DataContract , XmlReaderDelegator )\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator reader, String name, String ns, Type declaredType, DataContract\u0026 dataContract)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializerReadContext.InternalDeserialize(XmlReaderDelegator xmlReader, Type declaredType, DataContract dataContract, String name, String ns)\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContractSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n[11:27:03] info:    at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName)\r\n[11:27:03] info:    at System.Runtime.Serialization.DataContractSerializer.ReadObject(XmlReader )\r\n[11:27:03] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Deserialize_CompatibleWithFullFramework\u003eg__DeserializeObjectAndValidate|241_0(String input, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable, Boolean expectedWritable)\r\n[11:27:03] info:    at DataContractSerializerTests.DCS_MemoryStream_Deserialize_CompatibleWithFullFramework()\r\n[11:27:03] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[11:27:03] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter\r\n[11:27:03] info: XML comparison is also failing\r\n[11:27:03] info: Test failed for input: System.IO.MemoryStream\r\n[11:27:03] info: Expected: \u003cMemoryStream xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\"\u003e\u003c__identity i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/System\" /\u003e\u003c_buffer\u003e\u003c/_buffer\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:03] info: Actual: \u003cMemoryStream xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\u003c_buffer/\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:03] info: Expected: True\r\n[11:27:03] info: Actual:   False\r\n[11:27:03] info:    at System.Runtime.Serialization.Tests.DataContractSerializerHelper.SerializeAndDeserialize[MemoryStream](MemoryStream value, String baseline, DataContractSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[11:27:03] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Serialize_UsesBuiltInAdapter\u003eg__ValidateObject|240_0(MemoryStream original, String expectedXml, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable)\r\n[11:27:03] info:    at DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter()\r\n[11:27:03] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\r\n\r\n[System.Runtime.Serialization.Xml.Tests log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73894-merge-81b30ad20ea9433393/normal-System.Runtime.Serialization.Xml.Tests/1/console.21dcc89b.log?helixlogtype=result):\r\n\r\n```\r\n[11:27:07] fail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter\r\n[11:27:07] info: XML comparison is also failing\r\n[11:27:07] info: Test failed for input: System.IO.MemoryStream\r\n[11:27:07] info: Expected: \u003cMemoryStream xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\"\u003e\u003c__identity i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/System\" /\u003e\u003c_buffer\u003e\u003c/_buffer\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:07] info: Actual: \u003cMemoryStream xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\u003c_buffer/\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\n[11:27:07] info: Expected: True\r\n[11:27:07] info: Actual:   False\r\n[11:27:07] info:    at System.Runtime.Serialization.Tests.DataContractSerializerHelper.SerializeAndDeserialize[MemoryStream](MemoryStream value, String baseline, DataContractSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare)\r\n[11:27:07] info:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Serialize_UsesBuiltInAdapter\u003eg__ValidateObject|238_0(MemoryStream original, String expectedXml, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable)\r\n[11:27:07] info:    at DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter()\r\n[11:27:07] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n[11:27:08] fail: [FAIL] System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(testname: \"Exp2\", export: Action`1 { Method = Void \u003cExport_MemberData\u003eb__7_2(System.Runtime.Serialization.XsdDataContractExporter), Target = \u003c\u003ec { } }, schemaCheck: Action`2 { Method = Void \u003cExport_MemberData\u003eb__3(System.String, System.Xml.Schema.XmlSchemaSet), Target = \u003c\u003ec__DisplayClass7_0 { autoImportKVP = False } })\r\n[11:27:08] info: Assert.Equal() Failure\r\n[11:27:08] info: Expected: 20\r\n[11:27:08] info: Actual:   4\r\n[11:27:08] info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.\u003c\u003ec__DisplayClass7_0.\u003cExport_MemberData\u003eb__3(String s, XmlSchemaSet ss)\r\n[11:27:08] info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(String testname, Action`1 export, Action`2 schemaCheck)\r\n[11:27:08] info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `disabled-test`, `trimming-for-aot`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-15T17:48:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IdaFz",
                                           "createdAt":  "2022-08-15T19:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Likely the result of https://github.com/dotnet/linker/pull/2929, which turned off the serialization heuristics by default.",
                                           "updatedAt":  "2022-08-15T19:33:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JnknZ",
                                           "createdAt":  "2022-09-02T06:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@sbomer, @lewing, and @radical - What is the expected path forward here? The serializer assemblies are not field-level trimmable. This isn\u0027t really an \u0027area-Serialization\u0027 issue as nothing changed with the serializers to cause this. Who should be responsible for ensuring that the serialization exceptions are enabled when running serialization tests?",
                                           "updatedAt":  "2022-09-02T06:17:11Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[trimming] Test failures only when trimming",
        "labels":  [
                       "arch-wasm",
                       "area-Serialization",
                       "disabled-test",
                       "os-ios",
                       "trimming-for-aot"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74310",
        "createdAt":  "2022-08-21T18:03:18Z",
        "number":  74310,
        "author":  "mcpat-it",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5Oa3Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tompazourek",
                                            "createdAt":  "2024-07-09T09:46:15Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T22:29:06Z",
        "body":  "### Description\r\nWhen using the Microsoft.XmlSerializer.Generator NuGet package (v6 and also pre v7), I receive some warnings during compilation.\r\n\r\n### Reproduction Steps\r\n\r\nCan supply simple sample app, but I used the description more or less written [here](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator).\r\n### Expected behavior\r\nThe Microsoft.XmlSerializer.Generator tool generates an optimized assembly for the XmlSerializer without warnings.\r\n\r\n### Actual behavior\r\nThe Microsoft.XmlSerializer.Generator generates warnings:\r\n\r\n```\r\n1\u003e------ Erstellen gestartet: Projekt: xxx, Konfiguration: Debug Any CPU ------\r\n1\u003exxx-\u003e C:\\xxx\\bin\\Debug\\net6.0-windows\\xxx.dll\r\n1\u003e.NET Xml Serialization Generation Utility, Version 7.0.0-preview.7.22375.6]\r\n1\u003eSGEN : warning SGEN1: Could not load file or assembly \u0027PresentationFramework, Version=6.0.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\u0027. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (0x80131058)\r\n1\u003eSGEN : warning SGEN1: Cannot load a reference assembly for execution.\r\n1\u003eSGEN : warning SGEN1: Could not load file or assembly \u0027Microsoft.VisualBasic.Forms, Version=6.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (0x80131058)\r\n1\u003eSGEN : warning SGEN1: Cannot load a reference assembly for execution.\r\n1\u003eSGEN : warning SGEN1: Could not load file or assembly \u0027System.Configuration.ConfigurationManager, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL\u0027. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (0x80131058)\r\n1\u003eSGEN : warning SGEN1: Cannot load a reference assembly for execution.\r\n1\u003eSerialization Code File Name: C:\\xxx\\obj\\Debug\\net6.0-windows\\xxx.XmlSerializers.cs.\r\n1\u003eGenerated serialization code for assembly C:\\xxx\\obj\\Debug\\net6.0-windows\\xxx.dll --\u003e \u0027C:\\xxx\\obj\\Debug\\net6.0-windows\\xxx.XmlSerializers.cs\u0027.\r\n1\u003eErstellen des Projekts xxx.csproj beendet.\r\n========== Erstellen: 1 erfolgreich, 0 Fehler, 2 aktuell, 0 übersprungen ==========\r\n```\r\n### Regression?\r\nIt\u0027s the first time I try the Microsoft.XmlSerializer.Generator tool so I can\u0027t say.\r\n\r\n### Known Workarounds\r\nAdd following in csproj file:\r\n```\r\n\u003cPropertyGroup Condition=\" \u0027$(Configuration)|$(Platform)\u0027 == \u0027Debug|AnyCPU\u0027 \"\u003e\r\n    \u003cNoWarn\u003eSGEN1\u003c/NoWarn\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n\r\n### Configuration\r\n```\r\ndotnet --info\r\n.NET SDK (gemäß \"global.json\"):\r\n Version:   7.0.100-preview.7.22377.5\r\n Commit:    ba310d9309\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.100-preview.7.22377.5\\\r\n\r\nHost:\r\n  Version:      7.0.0-preview.7.22375.6\r\n  Architecture: x64\r\n  Commit:       eecb028078\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.421 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-rc.1.20452.10 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.411 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.108 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.100-preview.7.22377.5 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.0-preview.7.22376.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0-preview.7.22375.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.1.20452.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0-preview.7.22377.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\n### Other information\r\nI can use the generated `xxx.XmlSerializers.dll`, but this warnings are annoying...",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW842pQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5I0AsR",
                                           "createdAt":  "2022-08-21T18:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-21T18:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bzjal",
                                           "createdAt":  "2023-05-09T14:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ilchert",
                                           "body":  "Faced with the same issue in WCF projects. It happens when class has attribute from .net framework assembly. \r\nSimple repro target .net472:\r\n\r\n```C#\r\n[System.Web.Services.WebServiceBindingAttribute(Name = \"...\", Namespace = \"1\")]\r\npublic class Class1\r\n{\r\n}\r\n```\r\ncsproj\r\n```xml\r\n\u003cReference Include=\"System.Web.Services\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"6.0.0\" /\u003e\r\n\u003cPackageReference Include=\"System.Memory\" Version=\"4.5.5\" /\u003e\r\n\u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"6.0.0\" /\u003e\r\n```\r\nAnother workaround (thanks to @kant2002) is adding reference to System.Web.Services explicitly from Framework64\\v4.0.30319\r\n\r\n```XML\r\n\u003cSGenReferences\u003eC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\System.Web.Services.dll\u003c/SGenReferences\u003e\r\n```\r\n",
                                           "updatedAt":  "2023-05-09T14:39:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.XmlSerializer.Generator returns warnings with the .NET 6 and 7 SDK",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75956",
        "createdAt":  "2022-09-21T09:12:00Z",
        "number":  75956,
        "author":  "damnlogin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-22T21:20:22Z",
        "body":  "### Description\r\n\r\nI am using `Microsoft.XmlSerializer.Generator` nuget package (v6.0.0) to generate xml serialization assemblies. The assembly gets correctly created but then results are not copied to `$(OutDir)` that I override with `dotnet build `/p:OutDir=\"some directory here\"`.\r\n\r\nAccording to Microsoft.Common.CurrentVersion.targets `$(OutDir)` must be used instead of `$(OutputPath)`\r\n\r\n\u003eOutDir and OutputPath are distinguished for legacy reasons, and OutDir should be used if at all possible.\r\n\r\n### Reproduction Steps\r\n\r\nOverride `$(OutDir)` before building any project that references Microsoft.XmlSerializer.Generator nuget package.\r\n\r\n### Expected behavior\r\n\r\nSerialization assembly gets copied to overridden `$(OutDir)`.\r\n\r\n### Actual behavior\r\n\r\nSerialization assembly gets copied to project local `$(OutputPath)` instead.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nOverride both `$(OutDir)` and `$(OutputPath)` msbuild properties.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Microsoft.XmlSerializer.Generator copies results to $(OutputPath) not $(OutDir)",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78704",
        "createdAt":  "2022-11-22T15:59:10Z",
        "number":  78704,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T21:45:54Z",
        "body":  "https://github.com/dotnet/runtime/pull/78703 adds a couple of nullable suppressions that should be removed and cleaned-up. Those suppressions are necessary as previously, the assembly compiled against ref/System.CodeDom but with the above PR now binds against src/System.CodeDom which has a different nullability setting.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY1R3Lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5O6ReS",
                                           "createdAt":  "2022-11-22T15:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/78703 adds a couple of nullable suppressions that should be removed and cleaned-up. Those suppressions are necessary as previously, the assembly compiled against ref/System.CodeDom but with the above PR now binds against src/System.CodeDom which has a different nullability setting.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eViktorHofer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-22T15:59:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jVHcv",
                                           "createdAt":  "2023-08-05T11:36:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCxOWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2023-08-05T12:07:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halgab",
                                           "body":  "Winforms repo has problems as well with the current state of nullability annotations in System.CodeDom. We bumped into the same problems with `CodeFieldReferenceExpression`, `CodePrimitiveExpression` and `CodePropertyReferenceExpression`. See dotnet/winforms#9663",
                                           "updatedAt":  "2023-08-05T11:36:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Review usage of nullable suppressions (especially `!`) in CodeExporter.cs ",
        "labels":  [
                       "area-Serialization",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80160",
        "createdAt":  "2023-01-04T01:20:20Z",
        "number":  80160,
        "author":  "dougbu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T06:36:54Z",
        "body":  "### Description\r\n\r\nIf `DataContractJsonSerializer` is given a non-UTF8 `Stream` containing a byte order mark and not given a specific encoding, it will attempt auto-detection of the encoding. This eventually calls the code at https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Json/JsonEncodingStreamWrapper.cs#L474-L503 and incorrectly \"detects\" UTF8, causing later decoding issues.\r\n\r\n### Reproduction Steps\r\n\r\n1. `dotnet new console --output DCSTest`\r\n2. Add `\u003cPackageReference Include=\"System.Runtime.Serialization.Json\" Version=\"4.3.0\" /\u003e` to an item group in the project file\r\n3. Place the code below in Program.cs\r\n4. `dotnet run`\r\n\r\n``` c#\r\nusing System.Runtime.Serialization.Json;\r\nusing System.Text;\r\n\r\nusing var stream = new MemoryStream();\r\nusing var writer = new StreamWriter(stream, new UnicodeEncoding(bigEndian: false, byteOrderMark: true));\r\nwriter.WriteLine(\"{ \\\"AnInt\\\": 42 }\");\r\nwriter.Flush();\r\nstream.Position = 0;\r\n\r\nvar serializer = new DataContractJsonSerializer(typeof(Simple));\r\nserializer.ReadObject(stream);\r\n\r\npublic class Simple\r\n{\r\n    int AnInt { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nSuccessful execution of the project.\r\n\r\n### Actual behavior\r\n\r\nProgram `throw`s:\r\n\r\n``` text\r\nUnhandled exception. System.Runtime.Serialization.SerializationException: There was an error deserializing the object of type Simple. Encountered unexpected character \u0027ÿ\u0027.\r\n ---\u003e System.Xml.XmlException: Encountered unexpected character \u0027ÿ\u0027.\r\n   at System.Xml.XmlExceptionHelper.ThrowXmlException(XmlDictionaryReader reader, XmlException exception)\r\n   at System.Runtime.Serialization.Json.XmlJsonReader.ReadAttributes()\r\n   at System.Runtime.Serialization.Json.XmlJsonReader.Read()\r\n   at System.Xml.XmlBaseReader.IsStartElement()\r\n   at System.Xml.XmlBaseReader.IsStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\r\n   at System.Runtime.Serialization.Json.DataContractJsonSerializer.InternalIsStartObject(XmlReaderDelegator reader)\r\n   at System.Runtime.Serialization.Json.DataContractJsonSerializer.InternalReadObject(XmlReaderDelegator xmlReader, Boolean verifyObjectName)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.Serialization.XmlObjectSerializer.ReadObjectHandleExceptions(XmlReaderDelegator reader, Boolean verifyObjectName, DataContractResolver dataContractResolver)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\dd\\Projects\\DCSTest\\Program.cs:line 11\r\n```\r\n\r\n### Regression?\r\n\r\nMaybe. I haven\u0027t tested w/ older versions of the package.\r\n[Edit - @StephenMolloy] Looks like this has been an issue since at least 4.8, so not a regression.\r\n\r\n### Known Workarounds\r\n\r\n1. Remove the byte order mark before passing anything to the serializer\r\n2. Use [`Encoding.GetTranscodedStream`](https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding.createtranscodingstream?view=net-7.0) if targeting a recent-enough TFM (5.0 or later) instead of relying on the serializer to auto-detect\r\n3. Use [`JsonReaderWriterFactory`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.json.jsonreaderwriterfactory?view=net-7.0) if targeting pretty much anything other than pre-`netstandard2.0` TFMs and specify the encoding explicitly\r\n\r\n----\r\n\r\nMy core recommendation here is actually to remove [`JsonEncodingStreamWrapper`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Json/JsonEncodingStreamWrapper.cs) and the XML [`EncodingStreamWrapper`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Xml/EncodingStreamWrapper.cs). Use [`TranscodingStream`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Text/TranscodingStream.cs) under the covers. And detect the encoding (when necessary) some other way, perhaps using something bulletproof like [`DetectEncoding()` in `StreamReader`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/StreamReader.cs#L470).\r\n\r\nThat recommendation relates to my need to use DCS for both JSON and XML in `netstandard1.3` projects. In addition, this would remove unnecessary encoding restrictions, support non-UTF8 XML deserialization without the (silly?) XML declaration requirement, and simplify your code.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUdVOXg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RyAov",
                                           "createdAt":  "2023-01-05T10:54:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "[`System.Runtime.Serialization.Json`](https://www.nuget.org/packages/System.Runtime.Serialization.Json) is a super old NuGet package from the .NET Core 1.x era and does not need to be installed in modern .NET applications. Not that it would fix the bug, the inbox assemblies would still be used because they have a higher version.",
                                           "updatedAt":  "2023-01-05T10:54:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R1NAZ",
                                           "createdAt":  "2023-01-05T23:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dougbu",
                                           "body":  "\u003e [`System.Runtime.Serialization.Json`](https://www.nuget.org/packages/System.Runtime.Serialization.Json) is a super old NuGet package from the .NET Core 1.x era and does not need to be installed in modern .NET applications. Not that it would fix the bug, the inbox assemblies would still be used because they have a higher version.\r\n\r\n1. the package remains necessary when targeting `netstandard1.3` even in very new projects\r\n2. the package remains necessary in legacy .NET Framework projects (those not using a .NET SDK)\r\n3. your point doesn\u0027t address the odd XML declaration requirement (even when a BOM exists in an XML stream) nor the limited encoding support (UTF8, UTF16BE, UTF16LE) support in both Serialization.Json or Serialization.Xml.",
                                           "updatedAt":  "2023-01-05T23:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R1QR0",
                                           "createdAt":  "2023-01-05T23:15:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "1. True, but .NET Standard 1.x does not qualify as \"modern\". 😅\r\n2. Just tested it, the package is not necessary, a reference to the inbox `System.Runtime.Serialization` assembly suffices.\r\n3. Also true, I had acknowledged that it\u0027s unrelated to the bug you reported, it was just an observation about the package\u0027s use.",
                                           "updatedAt":  "2023-01-05T23:15:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R1U5e",
                                           "createdAt":  "2023-01-05T23:40:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "To help with triage, I quickly ran the repro on a few different runtimes... it seems this has been an issue going back to at least 4.8.",
                                           "updatedAt":  "2023-01-05T23:40:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "`JsonEncodingStreamWrapper` cannot handle UTF16 BOMs",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80699",
        "createdAt":  "2023-01-16T14:27:38Z",
        "number":  80699,
        "author":  "KN4CK3R",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJeJAA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "TimSirmovics",
                                            "createdAt":  "2023-09-05T02:35:58Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-01T07:12:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-04T22:33:59Z",
        "body":  "### Description\n\nI need to process some XML input which has HTML code in some tags. For these tags I want the raw content to process it later. I followed [this answer on Stackoverflow](https://stackoverflow.com/a/11235379) and used `XmlElement` as member which works fine in most cases. The only problem I\u0027m facing are self closing tags.\n\n### Reproduction Steps\n\n```csharp\r\nusing System.IO;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar serializer = new XmlSerializer(typeof(Root));\r\n\r\n\t\tvar obj1 = serializer.Deserialize(new StringReader(@\"\u003cRoot\u003e\u003cDescription\u003e\u003cp\u003etest\u003c/p\u003e\u003c/Description\u003e\u003cName\u003eTest\u003c/Name\u003e\u003c/Root\u003e\"));\r\n\t\t// Description: \"Element, Name=\\\"p\\\"\"\r\n\t\t// Name: \"Test\"\r\n\r\n\t\tvar obj2 = serializer.Deserialize(new StringReader(@\"\u003cRoot\u003e\u003cDescription\u003e\u003c/Description\u003e\u003cName\u003eTest\u003c/Name\u003e\u003c/Root\u003e\"));\r\n\t\t// Description: null\r\n\t\t// Name: \"Test\"\r\n\r\n\t\tvar obj3 = serializer.Deserialize(new StringReader(@\"\u003cRoot\u003e\u003cDescription/\u003e\u003cName\u003eTest\u003c/Name\u003e\u003c/Root\u003e\"));\r\n\t\t// Description: \"Element, Name=\\\"Name\\\"\"\r\n\t\t// Name: null\r\n\t}\r\n\r\n\tpublic class Root\r\n\t{\r\n\t\tpublic XmlElement Description { get; set; }\r\n\t\tpublic string Name { get; set; }\r\n\t}\r\n}\r\n```\n\n### Expected behavior\n\n`obj2` and `obj3` should be equal.\n\n### Actual behavior\n\n`obj1` and `obj2` are ok (`obj2.Description == \"\"` would be better) but in `obj3` the `Description` member is greedy and contains the `Name` part.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nI have tested it on .NET 5 and .NET 7 without differences.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVX5mXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vdo8P",
                                           "createdAt":  "2023-02-16T22:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2U1EQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ondrejtucny",
                                                                               "createdAt":  "2023-02-18T11:54:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "Self-closing tags are not valid Xml. Thus, XmlSerializer does not know how to handle them. If you need to embed html inside an xml document, you will need to Xml-Encode the html or wrap it in CData.",
                                           "updatedAt":  "2023-02-16T22:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VfmZf",
                                           "createdAt":  "2023-02-17T09:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEBOiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KN4CK3R",
                                                                               "createdAt":  "2023-02-17T09:38:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TimSirmovics",
                                                                               "createdAt":  "2023-09-05T02:37:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-01-25T23:06:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ondrejtucny",
                                           "body":  "\u003e Self-closing tags are not valid Xml. Thus, XmlSerializer does not know how to handle them. If you need to embed html inside an xml document, you will need to Xml-Encode the html or wrap it in CData.\r\n\r\nWhat the OP actually means is an _empty-element tag_ as per [syntax rule [44], section 3.1](https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-starttags) of the XML 1.1 Specification. It is clear from the example provided.\r\n\r\nIt actually _is_ a bug in XmlSerializer and/or the underlying infrastructure.",
                                           "updatedAt":  "2023-02-17T09:09:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "XML deserialize raw empty-element",
        "labels":  [
                       "area-Serialization",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81214",
        "createdAt":  "2023-01-26T13:19:38Z",
        "number":  81214,
        "author":  "vanillajonathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIxQwQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pvlst",
                                            "createdAt":  "2024-10-01T16:57:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2024-10-02T17:48:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xforman2",
                                            "createdAt":  "2024-11-08T22:01:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kkamikadzee",
                                            "createdAt":  "2025-07-28T13:43:46Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-12T13:33:46Z",
        "body":  "### Description\n\n`XmlSerializer` cannot deserialize XML into a class where the member is a collection interface.\n\n### Reproduction Steps\n\n```csharp\r\n[XmlRoot(\"Document\", Namespace = \"urn:example:test\")]\r\npublic class Document\r\n{\r\n    public ICollection\u003cPet\u003e Pets { get; init; } = null!; // ICollection does not work, but List works\r\n}\r\n```\n\n### Expected behavior\n\nI expected it to be able to deserialize XML into a class with collection members that are interfaces, such as `IEnumerable\u003cT\u003e`, `ICollection\u003cT\u003e`, `IReadOnlyCollection\u003cT\u003e` and `IList\u003cT\u003e`.\n\n### Actual behavior\n\n\u003e NotSupportedException: Cannot serialize member Example.Document.Pets of type System.Collections.Generic.ICollection`1[[Example.Pets, Example, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] because it is an interface.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI have to deserialize into `List\u003cT\u003e` or `Pet[]`.\n\n### Configuration\n\n.NET 7\r\nWindows 11 - 21H2 / 22000.1516\r\nx64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvYFHTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OP2bB",
                                           "createdAt":  "2024-10-01T16:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcLJyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-10-02T17:48:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pmaslan",
                                                                               "createdAt":  "2024-10-03T15:39:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xforman2",
                                                                               "createdAt":  "2024-11-08T22:01:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kkamikadzee",
                                                                               "createdAt":  "2025-07-28T13:43:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pvlst",
                                           "body":  "Can you please make this a priority? If you want to deserialize XML code that contains a collection, the only choice is to either use\r\n- array property =\u003e triggers warning [CA1819](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1819)\r\n- List property =\u003e triggers warning [CA1002](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1002)\r\n\r\nSo basically, you cannot write a clean code now. Or am I wrong?",
                                           "updatedAt":  "2024-10-01T16:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Zo3C",
                                           "createdAt":  "2025-08-12T04:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "As I\u0027m sure you know, `XmlSerializer` is unable to deserialize properties typed as interfaces (such as `ICollection\u003cT\u003e`, `IEnumerable\u003cT\u003e`, or `IReadOnlyCollection\u003cT\u003e`) because interfaces do not provide sufficient information for object instantiation. During deserialization, `XmlSerializer` needs to construct an object to hold the incoming data. However, interfaces in .NET are abstract contracts—they don’t specify how to create an actual instance, nor do they guarantee the presence of a default constructor. As a result, `XmlSerializer` cannot know what concrete implementation to use, and so it throws an error when it encounters a property of interface type.\n\nThis limitation is rooted in how `XmlSerializer` operates: it relies on being able to create instances of your types using default constructors. When you use a concrete type like `List\u003cT\u003e` or `Pet[]`, `XmlSerializer` knows precisely how to instantiate that collection and fill it with elements. With an interface type, there’s no such guarantee, which is why serialization and deserialization of interface properties are not supported natively.\n\nAs a workaround, you can use a concrete “backing” property specifically for serialization, while keeping your public API typed to the interface. For example, you can mark your interface property with `[XmlIgnore]` and introduce a corresponding concrete property (e.g., `List\u003cPet\u003e`) with `[XmlElement]` or `[XmlArray]` attributes for `XmlSerializer` to use. You can then map between the interface and the concrete type in your property\u0027s getter and setter. This approach maintains compatibility with analyzers and best practices by keeping your public API abstracted, while still allowing `XmlSerializer` to work with a serializable concrete type.\n\nHere’s a quick example:\n\n```csharp\n[XmlIgnore]\npublic ICollection\u003cPet\u003e Pets { get; set; } = new List\u003cPet\u003e();\n\n[XmlArray(\"Pets\")]\n[XmlArrayItem(\"Pet\")]\npublic List\u003cPet\u003e PetsBacking\n{\n    get =\u003e Pets.ToList();\n    set =\u003e Pets = value;\n}\n```\n\nThis technique allows your model to adhere to best practices (using interfaces for public properties) while still being compatible with `XmlSerializer`\u0027s requirements. It’s a bit of boilerplate, but it’s currently the most reliable way to bridge the gap between modern .NET design and the limitations of `XmlSerializer`.\n\nI recognize this is not an ideal answer, but it is the general case answer. Given that the current exception happens before deserialization, I\u0027m not sure how much flexibility we have to do anything differently or if any common cases (`IList\u003c\u003e` for example) might be able to find some more palatable workaround.",
                                           "updatedAt":  "2025-08-12T04:00:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69gUdN",
                                           "createdAt":  "2025-08-12T13:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vanillajonathan",
                                           "body":  "I think whenever it comes across a property with a interface either is `IEnumerable\u003cT\u003e` or inherits from `IEnumerable\u003cT\u003e` then it should instantiate it as a `List\u003cT\u003e`.\n\nEF Core and System.Text.Json are able to work with classes where the properties are interfaces of collections. ",
                                           "updatedAt":  "2025-08-12T13:33:46Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "XmlSerializer: Cannot serialize member because it is an interface",
        "labels":  [
                       "area-Serialization",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82967",
        "createdAt":  "2023-03-04T00:07:18Z",
        "number":  82967,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T04:11:47Z",
        "body":  "```\r\n  info: Starting:    managed/System.Runtime.Serialization.Xml.Tests.dll\r\n  fail: [FAIL] System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests.TypesTest_Negative(badType: typeof(System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests+TypeWithReadWriteCollectionAndNoCtorOnCollection), exType: typeof(System.Runtime.Serialization.InvalidDataContractException), exMsg: \"System.Runtime.Serialization.Xml.XsdDataContractEx\"...)\r\n  info: Assert.Throws() Failure\r\n  info: Expected: typeof(System.Runtime.Serialization.InvalidDataContractException)\r\n  info: Actual:   (No exception was thrown)\r\n  info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests.TypesTest_Negative(Type badType, Type exType, String exMsg)\r\n  info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, IntPtr* args)\r\n  info:    at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n\r\n```\r\nfail: [FAIL] System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(testname: \"Exp2\", export: Action`1 { Method = Void \u003cExport_MemberData\u003eb__7_2(System.Runtime.Serialization.XsdDataContractExporter), Target = \u003c\u003ec { } }, schemaCheck: Action`2 { Method = Void \u003cExport_MemberData\u003eb__3(System.String, System.Xml.Schema.XmlSchemaSet), Target = \u003c\u003ec__DisplayClass7_0 { autoImportKVP = False } })\r\ninfo: Assert.Equal() Failure\r\ninfo: Expected: 20\r\ninfo: Actual:   4\r\ninfo:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.\u003c\u003ec__DisplayClass7_0.\u003cExport_MemberData\u003eb__3(String s, XmlSchemaSet ss)\r\ninfo:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterApiTests.Export(String testname, Action`1 export, Action`2 schemaCheck)\r\ninfo:    at System.Object.InvokeStub_ExporterApiTests.Export(Object , Object , IntPtr* )\r\ninfo:    at System.Reflection.MethodInvoker.Invoke(Object , IntPtr* , BindingFlags )\r\n\r\nfail: [FAIL] DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter\r\ninfo: XML comparison is also failing\r\ninfo: Test failed for input: System.IO.MemoryStream\r\ninfo: Expected: \u003cMemoryStream xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\"\u003e\u003c__identity i:nil=\"true\" xmlns=\"http://schemas.datacontract.org/2004/07/System\" /\u003e\u003c_buffer\u003e\u003c/_buffer\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\ninfo: Actual: \u003cMemoryStream xmlns=\"http://schemas.datacontract.org/2004/07/System.IO\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\u003c_buffer/\u003e\u003c_capacity\u003e0\u003c/_capacity\u003e\u003c_expandable\u003efalse\u003c/_expandable\u003e\u003c_exposable\u003etrue\u003c/_exposable\u003e\u003c_isOpen\u003etrue\u003c/_isOpen\u003e\u003c_length\u003e0\u003c/_length\u003e\u003c_origin\u003e0\u003c/_origin\u003e\u003c_position\u003e0\u003c/_position\u003e\u003c_writable\u003etrue\u003c/_writable\u003e\u003c/MemoryStream\u003e\r\ninfo: Expected: True\r\ninfo: Actual:   False\r\ninfo:    at System.Runtime.Serialization.Tests.DataContractSerializerHelper.SerializeAndDeserialize[MemoryStream](MemoryStream value, String baseline, DataContractSerializerSettings settings, Func`1 serializerFactory, Boolean skipStringCompare, Boolean verifyBinaryRoundTrip)\r\ninfo:    at DataContractSerializerTests.\u003cDCS_MemoryStream_Serialize_UsesBuiltInAdapter\u003eg__ValidateObject|238_0(MemoryStream original, String expectedXml, Byte[] expectedData, Int32 expectedPosition, Boolean expectedExposable)\r\ninfo:    at DataContractSerializerTests.DCS_MemoryStream_Serialize_UsesBuiltInAdapter()\r\ninfo:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object , IntPtr* )\r\ninfo:    at System.Reflection.MethodInvoker.Invoke(Object , IntPtr* , BindingFlags )\r\n\r\n```\r\n\r\nThe two tests above are trimming related, and disabled for browser too - https://github.com/dotnet/runtime/issues/73961 .",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvq8AvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Wrqir",
                                           "createdAt":  "2023-03-04T00:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n```\r\n  info: Starting:    managed/System.Runtime.Serialization.Xml.Tests.dll\r\n  fail: [FAIL] System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests.TypesTest_Negative(badType: typeof(System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests+TypeWithReadWriteCollectionAndNoCtorOnCollection), exType: typeof(System.Runtime.Serialization.InvalidDataContractException), exMsg: \"System.Runtime.Serialization.Xml.XsdDataContractEx\"...)\r\n  info: Assert.Throws() Failure\r\n  info: Expected: typeof(System.Runtime.Serialization.InvalidDataContractException)\r\n  info: Actual:   (No exception was thrown)\r\n  info:    at System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests.TypesTest_Negative(Type badType, Type exType, String exMsg)\r\n  info:    at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, IntPtr* args)\r\n  info:    at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `test-failure`, `os-wasi`, `wasi-tests-wip`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-04T00:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-rwC9",
                                           "createdAt":  "2025-08-19T04:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "I have re-enabled a bunch of serialization tests in PR #118507.\nPer these two runs ([1118444](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1118444), [1118071](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1118071)), many of these testcases are failing anymore.\n\n`System.Runtime.Serialization.Xml.XsdDataContractExporterTests.ExporterTypesTests.TypesTest_Negative` still fails.",
                                           "updatedAt":  "2025-08-19T04:11:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasi] Failing tests in `System.Runtime.Serialization.Xml.Tests`",
        "labels":  [
                       "test-failure",
                       "arch-wasm",
                       "area-Serialization",
                       "os-wasi",
                       "wasi-tests-wip"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83765",
        "createdAt":  "2023-03-22T08:04:48Z",
        "number":  83765,
        "author":  "topsterde",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T16:57:28Z",
        "body":  "### Description\n\nMicrosoft.XmlSerializer.Generator does not find the Span\u003c\u003e type when .NET Standard 2.0 is used.\n\n### Reproduction Steps\n\nJust compile the attached example:\r\n[XmlSerializerAppWithGenerator.zip](https://github.com/dotnet/runtime/files/11037662/XmlSerializerAppWithGenerator.zip)\r\n\n\n### Expected behavior\n\n*.XmlSerializer.dll is generated\n\n### Actual behavior\n\nCS0234: The type or namespace \"Span\u003c\u003e\" \r\nwarning : SGEN: Failed to generate the serializer for XmlSerializerLibWithGenerator.dll\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nChange `\u003cTargetFramework\u003enetstandard2.0\u003c/TargetFramework\u003e` to `\u003cTargetFramework\u003enetstandard2.1\u003c/TargetFramework\u003e`\n\n### Configuration\n\n.NET SDK:\r\n Version:   7.0.202\r\n Commit:    6c74320bc3\r\n\r\n\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.202\\\r\n\r\nHost:\r\n  Version:      7.0.4\r\n  Architecture: x64\r\n  Commit:       0a396acafe\r\n\r\n.NET SDKs installed:\r\n  6.0.405 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.202 [C:\\Program Files\\dotnet\\sdk]\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWQwEgw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YM43Z",
                                           "createdAt":  "2023-03-22T15:24:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4Y03w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "topsterde",
                                                                               "createdAt":  "2023-03-23T08:37:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "If I add a package reference to `System.Memory` then the problem goes away. The project file looks like:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetstandard2.0\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n    \u003cItemGroup\u003e\r\n        \u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"7.0.0\" PrivateAssets=\"All\" /\u003e\r\n        \u003cPackageReference Include=\"System.Memory\" Version=\"4.5.5\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n    \u003cItemGroup\u003e\r\n        \u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"7.0.0\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```",
                                           "updatedAt":  "2023-03-22T15:24:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZDASD",
                                           "createdAt":  "2023-04-03T09:11:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "topsterde",
                                           "body":  "It also does not work for .NET Framework libraries, that do not reference System.Memory.",
                                           "updatedAt":  "2023-04-03T09:11:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.XmlSerializer.Generator not working with any .NET Standard 2.0 library",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89420",
        "createdAt":  "2023-07-25T08:15:35Z",
        "number":  89420,
        "author":  "FerdinandStapenhorst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9NfOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SylwesterZarebski",
                                            "createdAt":  "2023-08-14T14:55:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjpooley",
                                            "createdAt":  "2024-09-03T15:02:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meixger",
                                            "createdAt":  "2024-12-05T08:07:35Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-03T07:52:14Z",
        "body":  "See this example class\r\n```\r\n    [XmlRoot(\"MyClass\", Namespace = \"\")]\r\n    public class MyClass\r\n    {\r\n        [XmlAttribute(\"Name\")]\r\n        public string? Name { get; set; }\r\n\r\n        [XmlArray(\"List\")]\r\n        [XmlArrayItem(\"Item\")]\r\n        public List\u003cstring\u003e? List { get; set; } = null;\r\n    }\r\n```\r\n... and this Xml string: \r\n`string xmlString = \"\u003cMyClass Name=\\\"Test\\\" /\u003e\";`\r\nWhen deserializing the xml string like this\r\n\r\n```\r\nvar Serializer = new XmlSerializer(typeof(MyClass));\r\nvar reader = new StringReader(xmlString);\r\nMyClass myclass = Serializer.Deserialize(reader) as MyClass;\r\n```\r\n... the myclass property List is not null but an empty list.\r\n\r\n**Feature request**\r\nAdd the ability to \"tell\" the deserialization process to not set the IList to new List\u003cstring\u003e() - maybe by adding a new attribute like\r\n\r\n`[XmlKeepNullIfMissing]`\r\n\r\nor anything similar.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "System.Xml.Serialization: Add ability to omit setting nullable IList types to new()",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90913",
        "createdAt":  "2023-08-22T06:26:09Z",
        "number":  90913,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-03T23:38:49Z",
        "body":  "### Description\r\n\r\nIf .NET 7 Runtime has been installed, then the MSBuild integration in Microsoft.XmlSerializer.Generator generates code that uses `ref struct` types like this:\r\n\r\n```csharp\r\nSystem.Span\u003cbool\u003e paramsRead = stackalloc bool[0];\r\n```\r\n\r\nIt then runs the `Csc` task to compile the generated code, but it does not specify the C# language version.\r\nIf the project is being built in Visual Studio 2017, then the C# language version defaults to 7.0, which does not allow `ref struct` types, and the serializer assembly fails to build.\r\nThis happens even if the project that references Microsoft.XmlSerializer.Generator sets `\u003cLangVersion\u003e7.2\u003c/LangVersion\u003e` for itself.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nXmlSer.csproj:\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet48\u003c/TargetFramework\u003e\r\n    \u003cLangVersion\u003e7.2\u003c/LangVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"6.0.0\"\u003e\r\n      \u003cPrivateAssets\u003eall\u003c/PrivateAssets\u003e\r\n      \u003cIncludeAssets\u003ebuild; analyzers\u003c/IncludeAssets\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"System.Memory\" Version=\"4.5.5\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003c!--\r\n      https://docs.microsoft.com/dotnet/core/additional-tools/xml-serializer-generator#add-another-itemgroup-section-for-net-cli-tool-support\r\n    --\u003e\r\n    \u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"6.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nRoot.cs:\r\n\r\n```csharp\r\nusing System.ComponentModel;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace XmlSer\r\n{\r\n    [XmlRoot(\"Root\", IsNullable = false)]\r\n    public class Root\r\n    {\r\n        [XmlAttribute(\"id\")]\r\n        [DefaultValue(-1)]\r\n        public int Id { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nBuild in Visual Studio 2017; either in the IDE, or with MSBuild.exe.\r\n\r\n### Expected behavior\r\n\r\nThe XML serializer assembly should be built without warnings.\r\n\r\n### Actual behavior\r\n\r\n```\r\nGenerateSerializationAssembly:\r\n  Deleting file \"obj\\Debug\\net48\\XmlSer.XmlSerializers.cs\".\r\n  Running Serialization Tool\r\n  dotnet Microsoft.XmlSerializer.Generator \"obj\\Debug\\net48\\XmlSer.dll\" --force --quiet obj\\Debug\\net48\\sgen.rsp\r\n  .NET Xml Serialization Generation Utility, Version 6.0.0]\r\n  Serialization Code File Name: C:\\Projects\\XmlSer\\obj\\Debug\\net48\\XmlSer.XmlSerializers.cs.\r\n  Generated serialization code for assembly C:\\Projects\\XmlSer\\obj\\Debug\\net48\\XmlSer.dll --\u003e \u0027C:\\Projects\\XmlSer\\obj\\Debug\\net48\\XmlSer.XmlSerializers.cs\u0027.\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\bin\\Roslyn\\csc.exe /nowarn:1701,1702,219,162 /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFra\r\n  mework\\v4.8\\mscorlib.dll\" /reference:C:\\Users\\[REDACTED]\\.nuget\\packages\\system.buffers\\4.5.1\\ref\\net45\\System.Buffers.dll /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramewor\r\n  k\\v4.8\\System.Core.dll\" /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.Data.dll\" /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Fram\r\n  ework\\.NETFramework\\v4.8\\System.dll\" /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.Drawing.dll\" /reference:\"C:\\Program Files (x86)\\Reference Assemblie\r\n  s\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.IO.Compression.FileSystem.dll\" /reference:C:\\Users\\[REDACTED]\\.nuget\\packages\\system.memory\\4.5.5\\lib\\net461\\System.Memory.dll /reference:\"C:\\Program Files (x86)\\R\r\n  eference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.Numerics.dll\" /reference:C:\\Users\\[REDACTED]\\.nuget\\packages\\system.numerics.vectors\\4.5.0\\ref\\net46\\System.Numerics.Vectors.dll /reference:C:\\Us\r\n  ers\\[REDACTED]\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.5.3\\ref\\net461\\System.Runtime.CompilerServices.Unsafe.dll /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETF\r\n  ramework\\v4.8\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.Xml.dll\" /reference:\"C:\\Program Files (x86)\\Reference As\r\n  semblies\\Microsoft\\Framework\\.NETFramework\\v4.8\\System.Xml.Linq.dll\" /reference:obj\\Debug\\net48\\XmlSer.dll /debug+ /out:obj\\Debug\\net48\\XmlSer.XmlSerializers.dll /target:library obj\\Debug\\net48\\XmlSer.XmlSe\r\n  rializers.cs obj\\Debug\\net48\\SgenAssemblyInfo.cs\r\nobj\\Debug\\net48\\XmlSer.XmlSerializers.cs(78,44): warning CS8107: Feature \u0027ref structs\u0027 is not available in C# 7.0. Please use language version 7.2 or greater. [C:\\Projects\\XmlSer\\XmlSer.csproj]\r\n  The previous error was converted to a warning because the task was called with ContinueOnError=true.\r\n  Build continuing because \"ContinueOnError\" on the task \"Csc\" is set to \"true\".\r\nC:\\Users\\[REDACTED]\\.nuget\\packages\\microsoft.xmlserializer.generator\\6.0.0\\build\\Microsoft.XmlSerializer.Generator.targets(55,5): warning : SGEN: Failed to generate the serializer for XmlSer.dll. Please follow th\r\ne instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again. [C:\\Projects\\XmlSer\\XmlSer.csproj]\r\n  Deleting file \"obj\\Debug\\net48\\sgen.rsp\".\r\nDone Building Project \"C:\\Projects\\XmlSer\\XmlSer.csproj\" (default targets).\r\n```\r\n\r\n### Regression?\r\n\r\nYes!  Uninstalling .NET 7 Runtime and keeping .NET 6 SDK makes the build work again.\r\n(The bug is reproducible even without .NET 7 SDK, if .NET 7 Runtime is installed.)\r\n\r\n### Known Workarounds\r\n\r\nAdd to the project file:\r\n\r\n```XML\r\n\u003cItemGroup\u003e\r\n  \u003cCscRspFile Include=\"-langversion:7.2\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n```\r\n\r\nBut this seems risky because the `CscRspFile` name might be also used in packages other than Microsoft.XmlSerializer.Generator.\r\n\r\n### Configuration\r\n\r\nMicrosoft.XmlSerializer.Generator 6.0.0.\r\nThe `dotnet Microsoft.XmlSerializer.Generator` command is run using .NET SDK 7.0.400.\r\nVisual Studio 2017 version 15.9.56, in which `Csc` is Microsoft (R) Visual C# Compiler version 2.10.0.0 (b9fb1610).\r\nWindows 10 version 22H2 on amd64.\r\n\r\n\u003cdetails\u003e\u003csummary\u003edotnet --info\u003c/summary\u003e\r\n\r\n```\r\nC:\\Projects\u003edotnet --info\r\n.NET SDK:\r\n Version:   7.0.400\r\n Commit:    73bf45718d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.400\\\r\n\r\nHost:\r\n  Version:      7.0.10\r\n  Architecture: x64\r\n  Commit:       a6dbb800a4\r\n\r\n.NET SDKs installed:\r\n  2.1.526 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.413 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.110 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n### Other information\r\n\r\nThe specific incompatibility due to `ref struct` types (introduced in \u003chttps://github.com/dotnet/runtime/pull/66914\u003e) could be addressed by making Microsoft.XmlSerializer.Generator set the C# language version for the `Csc` task invocations, here:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/3bda6e0013ddb5b48a7b2a89fd84bf4fbbed0e37/src/libraries/Microsoft.XmlSerializer.Generator/src/build/Microsoft.XmlSerializer.Generator.targets#L53-L54\u003e\r\n\r\nBased on [Csc Task](https://learn.microsoft.com/visualstudio/msbuild/csc-task) documentation, `LangVersion=\"7.2\"` should do the job.  I think this should not depend on the `$(LangVersion)` of the referencing project, because the generated C# code doesn\u0027t depend on that either.\r\n\r\nHowever, there may be further incompatibilities coming up, if even higher versions of .NET Runtime are installed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZJZuLw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5klfCx",
                                           "createdAt":  "2023-08-22T06:35:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I get the same error if I add a global.json file that specifies .NET SDK 6.0.413.  However, even with that global.json, the \"lib\\netstandard2.0\\dotnet-Microsoft.XmlSerializer.Generator.dll\" tool in the package appears to be run by the .NET 7 runtime rather than .NET 6, so it uses the C# code generator from .NET 7.  This issue then seems related to \u003chttps://github.com/dotnet/runtime/pull/66914\u003e, which shipped in .NET 7 and not in .NET 6.\r\n\r\nMore generally, if new versions of System.Private.Xml start generating code that requires a new version of C# or a new library, then there should be a way to keep old versions of Microsoft.XmlSerializer.Generator using old versions of System.Private.Xml, so that just installing a new version of .NET SDK side by side won\u0027t break people\u0027s builds.",
                                           "updatedAt":  "2024-01-16T06:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5klm4v",
                                           "createdAt":  "2023-08-22T06:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Too bad you cannot simply change this `dotnet Microsoft.XmlSerializer.Generator` invocation here\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/Microsoft.XmlSerializer.Generator/src/build/Microsoft.XmlSerializer.Generator.targets#L51\u003e\r\n\r\nto run `dotnet --fx-version 6.0 Microsoft.XmlSerializer.Generator` instead, ensuring that it uses a runtime that generates C# code for a compatible language version; that syntax apparently requires a *path-to-application* argument that is a path rather than just a tool name.\r\n",
                                           "updatedAt":  "2023-08-22T06:53:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.XmlSerializer.Generator uses highest installed .NET Runtime, generates C# code incompatible with the SDK of the referencing project",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93054",
        "createdAt":  "2023-10-05T09:54:45Z",
        "number":  93054,
        "author":  "devprj22",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKVggw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianrondeau",
                                            "createdAt":  "2024-07-04T13:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "disshishkov",
                                            "createdAt":  "2024-11-28T16:18:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevedcc",
                                            "createdAt":  "2025-05-13T09:21:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "serban-seeq",
                                            "createdAt":  "2025-08-07T18:37:04Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-27T17:49:33Z",
        "body":  "### Description\n\nHi,\r\n\r\nWe are migrating our application from .NET Framework to .NET Core. The framework implementation had Xml serializers used in a particular flow, and we are using `Microsoft.XmlSerializer.Generator` for .NET Core (as that is the recommendation).\r\n\r\nWhile performing the integration, I keep getting the error -\r\n\r\n*Version for package Microsoft.XmlSerializer.Generator could not be resolved.*\r\n\r\nOur codebase uses central package management, which prohibits us from specifying the version attribute on the package.\r\n\r\nBased on investigation, it looks like this package expects the package reference to have version or it fails.\r\n\r\nThe ask here is to add the support for central package versioning in the targets for this package.\r\n\n\n### Reproduction Steps\n\nWrite any demo code and try to build it (from the codebase). I tried this for starters - https://learn.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator\n\n### Expected behavior\n\nBuild should have succeeded with serializers dll generated.\n\n### Actual behavior\n\nBuild fails with the error -\r\n\r\n*Version for package Microsoft.XmlSerializer.Generator could not be resolved.*\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvNS91w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rKhPx",
                                           "createdAt":  "2023-11-07T06:57:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devprj22",
                                           "body":  "@HongGit, can you please take a look at this issue? From the past issues, I see that you are the SME for Serializers package, hence tagging you for help.",
                                           "updatedAt":  "2023-11-07T06:57:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc681L3X",
                                           "createdAt":  "2025-08-08T14:07:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdoeBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ondrejtucny",
                                                                               "createdAt":  "2025-08-08T14:19:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-08-08T15:00:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "serban-seeq",
                                           "body":  "Spent some time investigating this one and wanted to share my findings/workaround\n\n1. Any project with `\u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"9.0.7/\" /\u003e` will call the `GenerateSerializationAssembly` target on build where the command `dotnet Microsoft.XmlSerializer.Generator somefile.dll --force --quiet somekey.file` will be called.\n2. The dotnet command above will look for a \"CLI\" tool under `C:\\Users\\username\\.nuget\\packages\\.tools\\microsoft.xmlserializer.generator\\9.0.7\\netcoreapp2.2\\`\n3. Its not enough to just add the `Microsoft.XmlSerializer.Generator` package to your csproject, you must also \n- [ ] Add `\u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"9.0.7\" /\u003e` to the csproj\n- [ ] Run the `Restore` target on the csproj. this will populate the `\\.tools\\microsoft.xmlserializer.generator\\9.0.7\\` folder with the required files.\n\nThe problem occurs when we use central package manager. It is able to deduce the version of the `\u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" /\u003e` property but its not able to deduce the version of `\u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" /\u003e` and as a result when you run the `restore` target, it will download version 1.0.0 and install that under the .tools folder. The next time you run `dotnet Microsoft.XmlSerializer.Generator` it will look for version 9.0.7 (because thats what your csproj has via central package manager) but it can only find 1.0.0 so it fails with \"Version for package Microsoft.XmlSerializer.Generator could not be resolved.\"\n\nWorkaround is to add `DotNetCliToolReference` and explicitly state the version in the property\n`\u003cDotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"9.0.7\" /\u003e`\n\n\n",
                                           "updatedAt":  "2025-08-08T14:08:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Central package versioning support missing in targets for Microsoft.XmlSerializer.Generator",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95369",
        "createdAt":  "2023-11-28T23:36:55Z",
        "number":  95369,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4ymxw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2024-06-21T07:11:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-30T21:17:12Z",
        "body":  "While investigating a customer\u0027s native memory leak that was causing regular OOMs in their web service, I\u0027ve found that the culprit is in the `XmlSerializer`. Every instance of the `XmlSerializer` created using the constructor with `XmlAttributesOverride` argument causes native memory growth of about 40kB. So, when `XmlSerializer` is created this way per each request, it leads to OOM after some time, which can be quite soon in containerized environments with memory limits set.\r\nThe problem is caused by the fact that every instance of `XmlSerializer` using the above-mentioned constructor creates a new dynamic assembly with `AssemblyBuilderAccess.Run` flag. Dynamic assemblies created this way stay in memory forever and can never be removed. So, all the native memory allocated for the assembly, like the in-memory image with the manifest, some hash tables and metadata, is never freed.\r\nThe default constructor with only the `type` argument doesn\u0027t suffer from this issue since it caches the dynamic assembly in a static member.\r\n\r\nIt seems that creating the dynamic assemblies with `AssemblyBuilderAccess.RunAndCollect` flag instead would fix the problem, but there might be some consequences that I cannot foresee. Alternatively, enabling caching of the dynamic assemblies even for this form of a constructor would probably be good enough for most scenarios. I am no expert on the `XmlSerializer` implementation, but my guess is that the caching was not implemented for this case as it would require using the information from the XmlAttributesOverride argument as part of the cache key.\r\n\r\nIf the decision is to not to fix the issue for whatever reason, then it seems it would at least require to document this in the `XmlSerializer` constructor doc so that developers could create workarounds by caching the `XmlSerializer` on their side.\r\n \r\nThis issue occurs in .NET 6, 7 and 8.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdV2hZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tIe9R",
                                           "createdAt":  "2023-11-28T23:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile investigating a customer\u0027s native memory leak that was causing regular OOMs in their web service, I\u0027ve found that the culprit is in the `XmlSerializer`. Every instance of the `XmlSerializer` created using the constructor with `XmlAttributesOverride` argument causes native memory growth of about 40kB. So, when `XmlSerializer` is created this way per each request, it leads to OOM after some time, which can be quite soon in containerized environments with memory limits set.\r\nThe problem is caused by the fact that every instance of `XmlSerializer` using the above-mentioned constructor creates a new dynamic assembly with `AssemblyBuilderAccess.Run` flag. Dynamic assemblies created this way stay in memory forever and can never be removed. So, all the native memory allocated for the assembly, like the in-memory image with the manifest, some hash tables and metadata, is never freed.\r\nThe default constructor with only the `type` argument doesn\u0027t suffer from this issue since it caches the dynamic assembly in a static member.\r\n\r\nIt seems that creating the dynamic assemblies with `AssemblyBuilderAccess.RunAndCollect` flag instead would fix the problem, but there might be some consequences that I cannot foresee. Alternatively, enabling caching of the dynamic assemblies even for this form of a constructor would probably be good enough for most scenarios. I am no expert on the `XmlSerializer` implementation, but my guess is that the caching was not implemented for this case as it would require using the information from the XmlAttributesOverride argument as part of the cache key.\r\n\r\nIf the decision is to not to fix the issue for whatever reason, then it seems it would at least require to document this in the `XmlSerializer` constructor doc so that developers could create workarounds by caching the `XmlSerializer` on their side.\r\n \r\nThis issue occurs in .NET 6, 7 and 8.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejanvorli\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.x\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-28T23:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tIfxB",
                                           "createdAt":  "2023-11-28T23:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "cc: @mayankkumar2",
                                           "updatedAt":  "2023-11-28T23:37:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tIhyJ",
                                           "createdAt":  "2023-11-28T23:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Here is a small repro of the issue. After the loop, about 5GB of native memory is allocated.\r\n\r\n```c#\r\nusing System.Xml.Serialization;\r\n\r\npublic class PurchaseOrder\r\n{\r\n    public string OrderDate;\r\n}\r\n\r\npublic class Test\r\n{\r\n    public static void Main()\r\n    {\r\n        for (int i = 0; i \u003c 100000; i++)\r\n        {\r\n            // The overrides argument is needed to trigger the memory leak\r\n            XmlAttributeOverrides overrides = new XmlAttributeOverrides();\r\n            XmlSerializer serializer = new XmlSerializer(typeof(PurchaseOrder), overrides);\r\n            if (i % 100 == 0)\r\n            {\r\n                GC.Collect(2);\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"Done\");\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-11-28T23:43:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tOQvP",
                                           "createdAt":  "2023-11-29T18:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bykiev",
                                           "body":  "It seems to be documented well [here](https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer?view=net-8.0\u0026redirectedfrom=MSDN#dynamically-generated-assemblies), isn\u0027t it?",
                                           "updatedAt":  "2023-11-29T18:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51Wraz",
                                           "createdAt":  "2024-02-28T12:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gverbake",
                                           "body":  "Also happens on the constructor with XmlRootAttribute overload:\r\npublic XmlSerializer (Type type, System.Xml.Serialization.XmlRootAttribute? root);\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer.-ctor?view=net-8.0#system-xml-serialization-xmlserializer-ctor(system-type-system-xml-serialization-xmlrootattribute)\r\n\r\nAlso happens in 4.8",
                                           "updatedAt":  "2024-02-28T12:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51XaFm",
                                           "createdAt":  "2024-02-28T14:12:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4T1NQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "meixger",
                                                                               "createdAt":  "2024-10-28T08:09:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e Also happens on the constructor with XmlRootAttribute overload\r\n\r\nYes, it happens with all constructors except the XmlSerializer(Type) and XmlSerializer(Type, String).\r\n\r\n\u003e It seems to be documented well [here](https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer?view=net-8.0\u0026redirectedfrom=MSDN#dynamically-generated-assemblies), isn\u0027t it?\r\n\r\nIt is very difficult to discover that comment (you need to go from the main page for the XmlSerializer to [Supplemental API remarks for XmlSerializer](https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-xml-serialization-xmlserializer) that\u0027s linked in the middle of the page and then go the middle of a document. I believe it should be mentioned in the main doc right before the constructors, as it is a major gotcha for people based on my helping with many native memory leaks investigations during the past year.\r\nBut it would be much better if the issue itself was fixed.",
                                           "updatedAt":  "2024-02-28T14:12:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "XmlSerializer leaks native memory, leading to OOM.",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96329",
        "createdAt":  "2023-12-27T10:59:18Z",
        "number":  96329,
        "author":  "fgheysels",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7kCCQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Murraylr",
                                            "createdAt":  "2024-10-04T11:03:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-03T23:44:18Z",
        "body":  "The `XmlSerializer` can currently deserialize a datetime string to a `DateTimeOffset` property.\r\nHowever, there doesn\u0027t seem to be a way to specify which cultural settings / timezone that must be used when deserialing a datetime string to `DateTimeOffset` when the datetimestring doesn\u0027t contain timezone information.\r\n\r\nSuppose this Xml fragment for instance:\r\n\r\n```xml\r\n\u003cTestClass\u003e\r\n  \u003cTimestamp\u003e2023-12-27T11:35:07\u003c/Timestamp\u003e\r\n\u003c/TestClass\u003e\r\n```\r\nNote that the date/time string doesn\u0027t contain any timezone information.\r\n\r\nWhen I deserialize the above fragment to a C# class that looks like below, the `Timestamp` property contains the date that is present in the Xml, but it gets assigned the current timezone of my computer.  \r\n\r\n```csharp\r\npublic class TestClass\r\n{\r\n    public DateTimeOffset Timestamp { get; set; }\r\n}\r\n```\r\n\r\nFor example, this piece of code:\r\n\r\n```csharp\r\nXmlSerializer serializer = new XmlSerializer(typeof(TestClass));\r\n\r\nvar reader = new StringReader(@\"\u003cTestClass\u003e\u003cTimestamp\u003e2023-12-27T11:35:07\u003c/Timestamp\u003e\u003c/TestClass\u003e\");\r\n\r\nvar result = (TestClass)serializer.Deserialize(reader);\r\n\r\nConsole.WriteLine(result.Timestamp);\r\n```\r\noutputs this:\r\n\r\n```\r\n27/12/2023 11:35:07 +01:00\r\n```\r\n\r\nIt seems that there\u0027s no way to specify which (fallback) TimeZone must be used when deserializing into `DateTimeOffset`.  In my case, I want to fallback to the \u0027Zulu / UTC\u0027 timezone when no timezone information is present in the Xml.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb4ZK_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vei4K",
                                           "createdAt":  "2023-12-27T12:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fgheysels",
                                           "body":  "It is strange though that this is not possible, as there exists an `XmlConvert.ToDateTime` overload that lets you specify how `DateTime` (so no `DateTimeOffset`) must be treated with regard to UTC / local Timezone:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlconvert.todatetime?view=net-8.0#system-xml-xmlconvert-todatetime(system-string-system-xml-xmldatetimeserializationmode)\r\n\r\nIt would be nice if something similar would  be available for `XmlConvert.ToDateTimeOffset` and if this could also be specified via some kind of options on the `XmlSerializer` class.",
                                           "updatedAt":  "2023-12-27T12:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vg_Gz",
                                           "createdAt":  "2023-12-28T08:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "This is a combination of two behaviors:\r\n1. XmlSerializer uses `DateTimeKind.Unspecifed`\r\n  This is somehow expected, because it is, well, not specified.\r\n2. Unspecifed DateTime is treated as local time when converting to DateTimeOffset\r\n  This is affecting much more than xml.",
                                           "updatedAt":  "2023-12-28T08:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vhAJg",
                                           "createdAt":  "2023-12-28T08:08:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Similar behavior can also be reproduced with JSON:\r\n\r\n```csharp\r\n        DateTimeOffset timeStamp = JsonSerializer.Deserialize\u003cDateTimeOffset\u003e(\"\\\"2023-12-27T11:35:07\\\"\");\r\n        Console.WriteLine(timeStamp);\r\n```\r\n\r\nPrints `12/27/2023 11:35:07 AM +08:00` for me.",
                                           "updatedAt":  "2023-12-28T08:08:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vhkr-",
                                           "createdAt":  "2023-12-28T11:19:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD01Q4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Murraylr",
                                                                               "createdAt":  "2024-10-04T11:03:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fgheysels",
                                           "body":  "I think it would be good if there was a way to override this behavior and specify that dates should be converted to UTC instead, both for Xml and Json deserialization :)",
                                           "updatedAt":  "2023-12-28T11:19:50Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "XmlSerializer doesn\u0027t allow to specify a fallback Timezone when deserializing to DateTimeOffset",
        "labels":  [
                       "area-Serialization",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96683",
        "createdAt":  "2024-01-09T14:31:26Z",
        "number":  96683,
        "author":  "alankbi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T00:34:08Z",
        "body":  "### Description\n\nWhen parsing the following XML:\r\n\r\n```xml\r\n\u003cDocument\u003e\r\n    \u003cTest unknown=\"attribute\"\u003e\r\n        ...\r\n    \u003c/Test\u003e\r\n\u003c/Document\u003e\r\n```\r\n\r\nInto the following classes: \r\n\r\n```csharp\r\npublic class Test\r\n{\r\n    ...\r\n}\r\n\r\npublic class Document\r\n{\r\n    public Test Test;\r\n}\r\n```\r\n\r\nXMLSerializer\u0027s Deserialize function correctly fires an UnknownAttribute event. However, for the following XML:\r\n\r\n```xml\r\n\u003cDocument\u003e\r\n    \u003cTestList unknown=\"attribute not triggered\"\u003e\r\n        ...\r\n    \u003c/TestList\u003e\r\n    \u003cStringField unknown=\"attribute not triggered\"\u003erandom\u003c/StringField\u003e\r\n\u003c/Document\u003e\r\n```\r\n\r\nAnd classes:\r\n\r\n```csharp\r\npublic class Document\r\n{\r\n    [XmlArrayItem(\"Test\")]\r\n    public List\u003cstring\u003e TestList;\r\n    public string StringField;\r\n}\r\n```\r\n\r\nNo event is fired for the unknown attribute on either the list or the string field. \n\n### Reproduction Steps\n\nUsing the XML and classes above, run the following code to verify that `HandleUnknownAttribute` is not called when erroneous attributes are present on string or list fields (or any built-in type it seems, including ints, bools, etc.): \r\n\r\n```csharp\r\nvar serializer = new XmlSerializer(typeof(Document));\r\nserializer.UnknownAttribute += HandleUnknownAttribute\r\n\r\nusing (var reader = new FileStream(\"filename.xml\", FileMode.Open))\r\n{\r\n    serializer.Deserialize(reader);\r\n}\r\n\r\n...\r\n\r\npublic void HandleUnknownAttribute(object sender, XmlAttributeEventArgs e)\r\n{\r\n    // not triggered for TestList or StringField\r\n}\r\n```\n\n### Expected behavior\n\nAn UnknownAttribute event should be fired and the event handler called\n\n### Actual behavior\n\nNo event is fired\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu0MkZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wPuko",
                                           "createdAt":  "2024-01-09T14:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alankbi",
                                           "body":  "Regardless of whether this is a bug or known limitation with XMLSerializer, is there a workaround to force validation for all unknown attributes? These attributes get dropped during deserialization, so I also can\u0027t perform a post-deserialization check on the resulting objects. ",
                                           "updatedAt":  "2024-01-09T14:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wXYEE",
                                           "createdAt":  "2024-01-10T16:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "Have you considered implementing `IXmlSerializable`?",
                                           "updatedAt":  "2024-01-10T16:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67QyRm",
                                           "createdAt":  "2025-08-01T00:32:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "### Arguments for a behavior change (fix):\n- The current behavior is surprising and inconsistent: most users would expect UnknownAttribute to fire for all deserialized objects, regardless of whether the destination is a built-in or user-defined type.\n- The event is raised on deserialization only, so the risk of breaking interoperability between clients and servers using different versions of XmlSerializer is lower than if it affected serialization output.\n- A compatibility switch (AppContext switch, etc.) would allow existing users to opt into the new, more consistent behavior without breaking current deployments.\n### Arguments for better documentation only:\n- The behavior has been this way for a long time, and some users may rely on it—perhaps unwittingly.\n- Changing event firing patterns, even with a switch, can introduce subtle bugs in codebases that handle both built-in and custom types differently.\n- Microsoft generally prefers not to change serialization behaviors unless absolutely necessary because of the risk of breaking existing code, even in edge cases.",
                                           "updatedAt":  "2025-08-01T00:32:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "XMLSerializer UnknownAttribute event does not fire on built-in types",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96796",
        "createdAt":  "2024-01-10T18:39:02Z",
        "number":  96796,
        "author":  "ivdiazsa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-10T18:39:53Z",
        "body":  "### Description\r\n\r\nWhen building and running `Microsoft.XmlSerializer.Generator.Tests` with `TestReadyToRun=true`, the test run will fail with an assertion failure, indicating that the return value was different from the expected one.\r\n\r\n### Reproduction Steps\r\n\r\n1) Clone the repo and build the `clr` and `libs` subsets. Make sure you specify `TestReadyToRun`, so that some necessary pretest components get built.\r\n\r\n```bash\r\ngit clone https://github.com/dotnet/runtime\r\ncd runtime\r\n./build.sh --subset clr+libs --configuration Release -p:TestReadyToRun=true\r\n```\r\n\r\n2) If PR #96721 has been merged when investigating this issue, then first reenable the test by removing its `ActiveIssue` annotation in `src/libraries/Microsoft.XmlSerializer.Generator/tests/SGenTests.cs`:\r\n\r\n```csharp\r\n[Fact]\r\n// Comment this one out --\u003e [ActiveIssue(\"https://github.com/dotnet/runtime/issues/96796\", typeof(PlatformDetection), nameof(PlatformDetection.IsReadyToRunCompiled))]\r\npublic static void SgenCommandTest()\r\n{\r\n    const string CodeFile = \"SerializableAssembly.XmlSerializers.cs\";\r\n    const string LKGCodeFile = \"Expected.SerializableAssembly.XmlSerializers.cs\";\r\n\r\n    var type = Type.GetType(\"Microsoft.XmlSerializer.Generator.Sgen, dotnet-Microsoft.XmlSerializer.Generator\");\r\n    MethodInfo md = type.GetMethod(\"Main\", BindingFlags.Static | BindingFlags.Public);\r\n    string[] args = new string[] { \"SerializableAssembly.dll\", \"--force\", \"--quiet\" };\r\n    int n = (int)md.Invoke(null, new object[] { args });\r\n\r\n    Assert.Equal(0, n);\r\n    Assert.True(File.Exists(CodeFile), string.Format(\"Fail to generate {0}.\", CodeFile));\r\n    // Compare the generated CodeFiles from the LKG with the live built shared framework one.\r\n    // Not comparing byte per byte as the generated output isn\u0027t deterministic.\r\n    Assert.Equal(LineEndingsHelper.Normalize(File.ReadAllText(LKGCodeFile)).Length, File.ReadAllText(CodeFile).Length);\r\n}\r\n```\r\n\r\n3) Build and run the test\r\n\r\n```bash\r\ncd Microsoft.XmlSerializer.Generator/tests\r\n# We have to specify the project file this time because this folder has two csproj files.\r\n/path/to/runtime/dotnet.sh build Microsoft.XmlSerializer.Generator.Tests.csproj -c Release -t:Test -p:TestReadyToRun=true\r\n```\r\n\r\n### Expected behavior\r\n\r\nAll tests pass, except the skipped ones.\r\n\r\n### Actual behavior\r\n\r\nTest fails with the following error, making the whole run fail:\r\n\r\n```text\r\n========================= Begin custom configuration settings ==============================\r\nexport __TestArchitecture=x64\r\nexport __IsXUnitLogCheckerSupported=1\r\n========================== End custom configuration settings ===============================\r\n----- start Wed Jan 10 10:23:10 AM PST 2024 =============== To repro directly: =====================================================\r\npushd /path/to/runtime/artifacts/bin/Microsoft.XmlSerializer.Generator.Tests/Release/net9.0/publish\r\nchmod +rwx Microsoft.XmlSerializer.Generator.Tests ^\u0026^\u0026 ./Microsoft.XmlSerializer.Generator.Tests -notrait category=OuterLoop -notrait category=failing -xml testResults.xml \r\npopd\r\n===========================================================================================================\r\n/path/to/runtime/artifacts/bin/Microsoft.XmlSerializer.Generator.Tests/Release/net9.0/publish /path/to/runtime/src/libraries/Microsoft.XmlSerializer.Generator/tests\r\nRunning assembly:Microsoft.XmlSerializer.Generator.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n.NET Xml Serialization Generation Utility, Version 9.0.0-dev]\r\nSerialization Code File Name: /path/to/runtime/artifacts/bin/Microsoft.XmlSerializer.Generator.Tests/Release/net9.0/publish/SerializableAssembly.XmlSerializers.cs.\r\nGenerated serialization code for assembly /path/to/runtime/artifacts/bin/Microsoft.XmlSerializer.Generator.Tests/Release/net9.0/publish/SerializableAssembly.dll --\u003e \u0027/path/to/runtime/artifacts/bin/Microsoft.XmlSerializer.Generator.Tests/Release/net9.0/publish/SerializableAssembly.XmlSerializers.cs\u0027.\r\n[FAIL] Microsoft.XmlSerializer.Generator.Tests.SgenTests.SgenCommandTest\r\nAssert.Equal() Failure: Values differ\r\nExpected: 844696\r\nActual:   844713\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\nFinished Microsoft.XmlSerializer.Generator.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nKeep the test disabled so that the other tests in the run can be executed unaffected.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Microsoft.XmlSerializer.Generator.Tests Fails at SgenCommandTest when TestReadyToRun is Enabled",
        "labels":  [
                       "test-failure",
                       "area-Serialization",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96900",
        "createdAt":  "2024-01-12T16:45:02Z",
        "number":  96900,
        "author":  "veleek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-03T23:45:29Z",
        "body":  "### Description\n\nWe\u0027re unable to use the Microsoft.XmlSerializer.Generator package properly because `dotnet` is unable to find it properly unless you\u0027re using `Debug` as the configuration.\r\n\r\nWe have a large solution that contains some older .NET Framework stuff and some newer .NET Standard/.NET 6+ stuff.  We build the solution using `msbuild.exe` and we use the configurations `Test` (NOT `Debug`) and `Release`.  Additionally, we have a `Directory.Build.props/targets` that redirects all build output from `bigthing/source/\u003cProject\u003e/[bin|obj]/...` and to a common output location like `bigthing/temp/Build/[bin|obj]/\u003cConfiguration\u003e/\u003cProject\u003e`.\r\n\r\nWhen building with `msbuild` we pass `/p:Configuration=Test` (or `Release`), but when the Microsoft.XmlSerializer.Generator build targets run, it eventually runs the command `dotnet Microsoft.XmlSerializer.Generator \u003csnip extra args...\u003e` (notably, this command does NOT include a configuration).  `dotnet.exe` attempts to resolve the path to the Microsoft.XmlSerializer.Generator tool by looking in for `project.assets.json`, but it ends up using `Debug` instead of `Test` as the configuration so it fails to find the file and fails to find the tool.\n\n### Reproduction Steps\n\n1. Create a Directory.Build.props/targets that redirects your build output\r\n2. Create a project and reference `Microsoft.XmlSerializer.Generator`\r\n3. Build the project using a non `Debug` configuration\n\n### Expected behavior\n\n`dotnet Microsoft.XmlSerializer.Generator` will run successfully.\n\n### Actual behavior\n\n`dotnet` will be unable to find Microsoft.XmlSerializer.Generator because it can\u0027t load the correct `project.assets.json` and will fail.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTargeting .NET 6.0\r\nBuilding using .NET 8.0\r\nThe rest of the details here are mostly irellevant. \n\n### Other information\n\nMinimal project file that can repro behavior:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"8.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nAlso required is a `Directory.Build.props/targts` but I don\u0027t have that fully isolated yet.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcNGEFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5woXTN",
                                           "createdAt":  "2024-01-12T16:45:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe\u0027re unable to use the Microsoft.XmlSerializer.Generator package properly because `dotnet` is unable to find it properly unless you\u0027re using `Debug` as the configuration.\r\n\r\nWe have a large solution that contains some older .NET Framework stuff and some newer .NET Standard/.NET 6+ stuff.  We build the solution using `msbuild.exe` and we use the configurations `Test` (NOT `Debug`) and `Release`.  Additionally, we have a `Directory.Build.props/targets` that redirects all build output from `bigthing/source/\u003cProject\u003e/[bin|obj]/...` and to a common output location like `bigthing/temp/Build/[bin|obj]/\u003cConfiguration\u003e/\u003cProject\u003e`.\r\n\r\nWhen building with `msbuild` we pass `/p:Configuration=Test` (or `Release`), but when the Microsoft.XmlSerializer.Generator build targets run, it eventually runs the command `dotnet Microsoft.XmlSerializer.Generator \u003csnip extra args...\u003e` (notably, this command does NOT include a configuration).  `dotnet.exe` attempts to resolve the path to the Microsoft.XmlSerializer.Generator tool by looking in for `project.assets.json`, but it ends up using `Debug` instead of `Test` as the configuration so it fails to find the file and fails to find the tool.\n\n### Reproduction Steps\n\n1. Create a Directory.Build.props/targets that redirects your build output\r\n2. Create a project and reference `Microsoft.XmlSerializer.Generator`\r\n3. Build the project using a non `Debug` configuration\n\n### Expected behavior\n\n`dotnet Microsoft.XmlSerializer.Generator` will run successfully.\n\n### Actual behavior\n\n`dotnet` will be unable to find Microsoft.XmlSerializer.Generator because it can\u0027t load the correct `project.assets.json` and will fail.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTargeting .NET 6.0\r\nBuilding using .NET 8.0\r\nThe rest of the details here are mostly irellevant. \n\n### Other information\n\nMinimal project file that can repro behavior:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"8.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nAlso required is a `Directory.Build.props/targts` but I don\u0027t have that fully isolated yet.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eveleek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-libraries`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-12T16:45:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5woYvc",
                                           "createdAt":  "2024-01-12T16:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "veleek",
                                           "body":  "Something interesting that I\u0027m digging into.  When you _DO NOT_ override the output locations `project.assets.json` gets put into `\u003cProjectFolder\u003e/obj/project.assets.json` (not Configuration in path), but the overrides that we have end up putting it into `BlahBuildOutput/obj/\u003cConfiguration\u003e/\u003cProject\u003e`.\r\n\r\nSo with our setup, you need to know the proper build `\u003cConfiguration\u003e` value to find the `project.assets.json`, but without it, an long as you can find the `obj` for the project, then you can find it.  ",
                                           "updatedAt":  "2024-01-12T16:49:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5woknP",
                                           "createdAt":  "2024-01-12T17:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "veleek",
                                           "body":  "`project.assets.json` is written to `\u003cBaseItermediateOutputPath\u003e/project.assets.json`.  \r\n\r\nUsually `\u003cBaseIntermediateOutputPath\u003e` doesn\u0027t have a configuration in it and `\u003cIntermediateOutputPath\u003e` is equivalent to `\u003cBaseIntermediateOutputPath\u003e/\u003cConfiguration\u003e`, but our build seems to be overriding both of these values to the same location.  \r\n\r\nYou could probably argue that that\u0027s invalid (and I think I\u0027m totally okay with that being the answer), but is there anyway to workaround the fact that `dotnet` use the wrong configuration when looking for a tool path? ",
                                           "updatedAt":  "2024-01-12T17:23:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w0YQV",
                                           "createdAt":  "2024-01-15T21:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe\u0027re unable to use the Microsoft.XmlSerializer.Generator package properly because `dotnet` is unable to find it properly unless you\u0027re using `Debug` as the configuration.\r\n\r\nWe have a large solution that contains some older .NET Framework stuff and some newer .NET Standard/.NET 6+ stuff.  We build the solution using `msbuild.exe` and we use the configurations `Test` (NOT `Debug`) and `Release`.  Additionally, we have a `Directory.Build.props/targets` that redirects all build output from `bigthing/source/\u003cProject\u003e/[bin|obj]/...` and to a common output location like `bigthing/temp/Build/[bin|obj]/\u003cConfiguration\u003e/\u003cProject\u003e`.\r\n\r\nWhen building with `msbuild` we pass `/p:Configuration=Test` (or `Release`), but when the Microsoft.XmlSerializer.Generator build targets run, it eventually runs the command `dotnet Microsoft.XmlSerializer.Generator \u003csnip extra args...\u003e` (notably, this command does NOT include a configuration).  `dotnet.exe` attempts to resolve the path to the Microsoft.XmlSerializer.Generator tool by looking in for `project.assets.json`, but it ends up using `Debug` instead of `Test` as the configuration so it fails to find the file and fails to find the tool.\n\n### Reproduction Steps\n\n1. Create a Directory.Build.props/targets that redirects your build output\r\n2. Create a project and reference `Microsoft.XmlSerializer.Generator`\r\n3. Build the project using a non `Debug` configuration\n\n### Expected behavior\n\n`dotnet Microsoft.XmlSerializer.Generator` will run successfully.\n\n### Actual behavior\n\n`dotnet` will be unable to find Microsoft.XmlSerializer.Generator because it can\u0027t load the correct `project.assets.json` and will fail.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTargeting .NET 6.0\r\nBuilding using .NET 8.0\r\nThe rest of the details here are mostly irellevant. \n\n### Other information\n\nMinimal project file that can repro behavior:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"8.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nAlso required is a `Directory.Build.props/targts` but I don\u0027t have that fully isolated yet.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eveleek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-15T21:24:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Unable to use Microsoft.XmlSerializer.Generator with non-Debug configuration",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98240",
        "createdAt":  "2024-02-09T19:18:38Z",
        "number":  98240,
        "author":  "zabulus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-09T17:53:09Z",
        "body":  "### Description\n\nWe are currently in process of porting from .net4.8 to net7.0. Utility is used to customize generation of data contracts from .xsd files. Particular complex type in xsd is a dictionary of enum-key bool-value records.\r\nError message we encounter:\r\n```\r\nSystem.Runtime.Serialization.InvalidDataContractException: Array type \u0027ArrayOfKeyValueOfDayOfWeekbooleanRDHGY3MA\u0027 in namespace \u0027http://schemas.microsoft.com/2003/10/Serialization/Arrays\u0027 cannot be imported. It is an invalid dictionary type since element \u0027KeyValueOfDayOfWeekbooleanRDHGY3MA\u0027 references a type from a different namespace \u0027http://schemas.datacontract.org/2004/07/System.Runtime.Serialization\u0027. Either fix the schema or remove the IsDictionary annotation. Either change the schema so that the types can map to data contract types or use ImportXmlType or use a different serializer.\r\n   at System.Runtime.Serialization.SchemaImporter.ThrowTypeCannotBeImportedException(String message)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportCollection(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlSchemaObjectCollection attributes, XmlSchemaAnnotation annotation, Boolean isReference)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportType(XmlQualifiedName typeName, XmlSchemaParticle rootParticle, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlQualifiedName baseTypeName, XmlSchemaAnnotation annotation)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportType(XmlSchemaType type, XmlQualifiedName typeName, Boolean isAnonymous)\r\n```\r\nError message is somewhat misleading, but gives a clue that an exception thrown from this line:\r\nhttps://github.com/dotnet/runtime/blob/a79c62ddc8089cf2879ed36eac9aa333b32bde5f/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/SchemaImporter.cs#L1113\r\nBasically it looks like that namespaces are mismatched, but our xsd doesn\u0027t have any reference of \u0027http://schemas.datacontract.org/2004/07/System.Runtime.Serialization\u0027.\r\nduring research and comparison of work of net4.8 execution path, I\u0027ve figured out that problem is mismatch of namespaces resulting in following two lines:\r\n```new CollectionDataContract(Globals.TypeOfSchemaDefinedType, CollectionKind.Array)``` used in ImportCollection method gives contract namespace \u0027null\u0027, as in net4.8.\r\nbut \r\n```new ClassDataContract(Globals.TypeOfSchemaDefinedType)``` used in ImportClass method gives namespace \u0027http://schemas.datacontract.org/2004/07/System.Runtime.Serialization\u0027 mentioned in exception message and differs from net4.8 behavior.\n\n### Reproduction Steps\n\nxsd:\r\n```\r\n            \u003cxs:complexType name=\"ArrayOfKeyValueOfDayOfWeekbooleanRDHGY3MA\"\u003e\r\n                \u003cxs:annotation\u003e\r\n                    \u003cxs:appinfo\u003e\r\n                        \u003cIsDictionary xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\"\u003etrue\u003c/IsDictionary\u003e\r\n                    \u003c/xs:appinfo\u003e\r\n                \u003c/xs:annotation\u003e\r\n                \u003cxs:sequence\u003e\r\n                    \u003cxs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"KeyValueOfDayOfWeekbooleanRDHGY3MA\"\u003e\r\n                        \u003cxs:complexType\u003e\r\n                            \u003cxs:sequence\u003e\r\n                                \u003cxs:element xmlns:q1=\"http://schemas.datacontract.org/2004/07/System\" name=\"Key\"\r\n                                            type=\"q1:DayOfWeek\"/\u003e\r\n                                \u003cxs:element name=\"Value\" type=\"xs:boolean\"/\u003e\r\n                            \u003c/xs:sequence\u003e\r\n                        \u003c/xs:complexType\u003e\r\n                    \u003c/xs:element\u003e\r\n                \u003c/xs:sequence\u003e\r\n            \u003c/xs:complexType\u003e\r\n```\r\nC#\r\n```\r\n                XsdDataContractImporter importer = new XsdDataContractImporter();\r\n                importer.Options = new ImportOptions();\r\n                importer.Options.ImportXmlType = true;\r\n                importer.Options.CodeProvider = codeProvider;\r\n                importer.Options.ReferencedCollectionTypes.Add(typeof(List\u003c\u003e));\r\n                importer.Options.ReferencedTypes.Add(typeof(Tuple\u003c,\u003e));\r\n                importer.Import(xsds);\r\n```\r\nIf you need copy-paste-and-run sample, pls give me a notice, as it is a part of 1mb complex xsd file, and narrow down only this complex type would take some effort.\n\n### Expected behavior\n\nNo exception occurs\n\n### Actual behavior\n\nException occurs\r\n```\r\nSystem.Runtime.Serialization.InvalidDataContractException: Array type \u0027ArrayOfKeyValueOfDayOfWeekbooleanRDHGY3MA\u0027 in namespace \u0027http://schemas.microsoft.com/2003/10/Serialization/Arrays\u0027 cannot be imported. It is an invalid dictionary type since element \u0027KeyValueOfDayOfWeekbooleanRDHGY3MA\u0027 references a type from a different namespace \u0027http://schemas.datacontract.org/2004/07/System.Runtime.Serialization\u0027. Either fix the schema or remove the IsDictionary annotation. Either change the schema so that the types can map to data contract types or use ImportXmlType or use a different serializer.\r\n   at System.Runtime.Serialization.SchemaImporter.ThrowTypeCannotBeImportedException(String message)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportCollection(XmlQualifiedName typeName, XmlSchemaSequence rootSequence, XmlSchemaObjectCollection attributes, XmlSchemaAnnotation annotation, Boolean isReference)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportType(XmlQualifiedName typeName, XmlSchemaParticle rootParticle, XmlSchemaObjectCollection attributes, XmlSchemaAnyAttribute anyAttribute, XmlQualifiedName baseTypeName, XmlSchemaAnnotation annotation)\r\n   at System.Runtime.Serialization.SchemaImporter.ImportType(XmlSchemaType type, XmlQualifiedName typeName, Boolean isAnonymous)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net7.0 running on windows\r\n```\r\n    \u003cPackageReference Include=\"System.Web.Services.Description\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"System.Runtime.Serialization.Schema\" Version=\"8.0.0\" /\u003e\r\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Bug in XsdDataContractImporter when importing ComplexType",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98447",
        "createdAt":  "2024-02-14T20:09:19Z",
        "number":  98447,
        "author":  "wegylexy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCnvRQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meixger",
                                            "createdAt":  "2025-05-21T06:18:31Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-03T23:46:56Z",
        "body":  "### Description\n\nFirst of all, the classes generated for https://aixm.aero/document/aixm-51-xml-schema-xsd are not fully supported. For example, array of `double`s in XML text content, e.g. `\u003cdoubleList\u003e123.45 678.9 12.3 4.5\u003c/doubleList\u003e`.\r\n```cs\r\n[XmlText]\r\npublic double[] Text { get; set; }\r\n```\r\nThe above throws an `InvalidOperationException` at runtime. So I use a surrogate as follow.\r\n```diff\r\n [XmlText]\r\n+[JsonIgnore]\r\n+public string TextAsString {\r\n+  get =\u003e string.Join(\u0027 \u0027, Text.Select(d =\u003e d.ToString()));\r\n+  set =\u003e Text = value.Split(\u0027 \u0027).Select(double.Parse).ToArray();\r\n+}\r\n+[XmlIgnore]\r\n public double[] Text { get; set; }\r\n```\r\n(It works without using the source generator.)\r\nThen, `Microsoft.XmlSerializer.Generator` hangs at compile-time when I apply this workaround to more than 2 such properties. It also hangs if I implement `IXmlSerializable` on the classes instead of applying the surrogates. The CPU fan keeps spinning, so it is not a dead lock, but potential infinite loop?\r\nIdeally, it should support deserializing numeric arrays encoded in XML text content.\n\n### Reproduction Steps\n\n```cs\r\n[System.CodeDom.Compiler.GeneratedCodeAttribute(\"xsd\", \"4.8.3928.0\")]\r\n[System.SerializableAttribute()]\r\n[System.Diagnostics.DebuggerStepThroughAttribute()]\r\n[System.ComponentModel.DesignerCategoryAttribute(\"code\")]\r\n[System.Xml.Serialization.XmlTypeAttribute(Namespace=\"http://www.opengis.net/gml/3.2\")]\r\n[System.Xml.Serialization.XmlRootAttribute(\"valueList\", Namespace=\"http://www.opengis.net/gml/3.2\", IsNullable=false)]\r\npublic partial class MeasureListType {\r\n        \r\n    private string uomField;\r\n        \r\n    private double[] textField;\r\n        \r\n    /// \u003cremarks/\u003e\r\n    [System.Xml.Serialization.XmlAttributeAttribute()]\r\n    public string uom {\r\n        get {\r\n            return this.uomField;\r\n        }\r\n        set {\r\n            this.uomField = value;\r\n        }\r\n    }\r\n        \r\n    /// \u003cremarks/\u003e\r\n    [System.Xml.Serialization.XmlTextAttribute()]\r\n    [JsonIgnore]\r\n    public string TextAsString\r\n    {\r\n        get =\u003e string.Join(\u0027 \u0027, Text);\r\n        set =\u003e Text = value.Split(\u0027 \u0027).Select(s =\u003e double.Parse(s)).ToArray();\r\n    }\r\n\r\n    [XmlIgnore]\r\n    public double[] Text {\r\n        get {\r\n            return this.textField;\r\n        }\r\n        set {\r\n            this.textField = value;\r\n        }\r\n    }\r\n}\r\n```\r\nBuild a simple library project with the tool enabled.\n\n### Expected behavior\n\nIt should generate a serializer that at least won\u0027t throw during run-time when the properties concerned do not appear in the raw XML.\n\n### Actual behavior\n\nThe source generator hangs during compile-time.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisable the XML serializer generator tool.\n\n### Configuration\n\n- .NET 8\r\n- Windows 11 22631.3085\r\n- x64\r\n- not specific to the configuration\r\n- not specific to any browser\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Microsoft.XmlSerializer.Generator hangs",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99613",
        "createdAt":  "2024-03-12T15:59:41Z",
        "number":  99613,
        "author":  "Dash",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD563w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MauNguyenVan",
                                            "createdAt":  "2024-10-08T10:52:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienriver49",
                                            "createdAt":  "2025-05-09T13:36:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brettiegabber",
                                            "createdAt":  "2025-05-09T19:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daeghanelkin",
                                            "createdAt":  "2025-05-12T20:00:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EngineerFaunce",
                                            "createdAt":  "2025-05-13T13:27:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgaffigan",
                                            "createdAt":  "2025-06-14T17:09:11Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-07-31T16:48:57Z",
        "body":  "### Description\n\nWhen defining a ```struct``` that implements ```IXmlSerializable``` AND has a parameterless constructor defined; an InvalidProgramException will occur when using ```XmlSerializer.Deserialize(object)```.\n\n### Reproduction Steps\n\nExample test cases: https://github.com/Dash/XmlSerializableStructTest/blob/master/Program.cs\r\n\r\nWhen using a struct like this in a class and then deserializing it with XmlSerializer:\r\n\r\n```csharp\r\npublic struct SerializableInitStruct : IXmlSerializable\r\n{\r\n\tpublic SerializableInitStruct() \r\n\t{ \r\n\t\tthis.Data = \"Nope\";\r\n\t}\r\n\tpublic string Data { get; set; }\r\n\r\n\tpublic XmlSchema? GetSchema()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic void ReadXml(XmlReader reader)\r\n\t{\r\n\t\tthis.Data = reader.GetAttribute(\"Data\");\r\n\t}\r\n\r\n\tpublic void WriteXml(XmlWriter writer)\r\n\t{\r\n\t\twriter.WriteAttributeString(\"Data\", this.Data);\r\n\t}\r\n}\r\n```\r\n\n\n### Expected behavior\n\nThe Xml content to deserialise correctly into a POCO class, without exception, in the same way as would happen if there wasn\u0027t a parameterless constructor defined.\n\n### Actual behavior\n\n```text\r\n\"System.InvalidOperationException: There is an error in XML document (2, 2).\r\n ---\u003e System.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderSerializableInitWrapper.Read2_SerializableInitWrapper(Boolean isNullable, Boolean checkType)\r\n   at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationReaderSerializableInitWrapper.Read3_SerializableInitWrapper()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\\r\\n   --- End of inner exception stack trace ---\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events)\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(Stream stream)\r\n   at XmlSerializableStructTest.Program.FromXmlStream[T](Stream strea\r\nm) in ...\"\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nNo known workaround as of yet.\n\n### Configuration\n\n* .NET 8\r\n* Windows 11 Enterprise\r\n* x64\n\n### Other information\n\nIf run against .NET 4.8 using the Compilers NuGet package to get newer C# versions, this error is raised at the same time:\r\n\r\n```\r\nManaged Debugging Assistant \u0027FatalExecutionEngineError\u0027 \r\n  Message=Managed Debugging Assistant \u0027FatalExecutionEngineError\u0027 : \u0027The runtime has encountered a fatal error. The address of the error was at 0x729e0019, on thread 0x2904. The error code is 0xc0000005. This error may be a bug in the CLR or in the unsafe or non-verifiable portions of user code. Common sources of this bug include user marshaling errors for COM-interop or PInvoke, which may corrupt the stack.\u0027\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjwW1Ow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PBbU7",
                                           "createdAt":  "2024-10-08T10:52:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MauNguyenVan",
                                           "body":  "My same the error.",
                                           "updatedAt":  "2024-10-08T10:52:23Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IXmlSerializable on a struct with a parameterless constructor throws an InvalidProgramException on Derserialize",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100453",
        "createdAt":  "2024-03-29T20:54:54Z",
        "number":  100453,
        "author":  "alundporchsoftware",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRv7Zg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-05-17T09:52:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josedan98",
                                            "createdAt":  "2024-06-12T07:59:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sWozzAres",
                                            "createdAt":  "2024-06-21T13:21:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "metalvalor",
                                            "createdAt":  "2024-09-23T08:16:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kurt-rudin",
                                            "createdAt":  "2024-11-20T10:43:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Leon99",
                                            "createdAt":  "2025-01-15T04:03:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tnguyen-alarm",
                                            "createdAt":  "2025-01-27T19:02:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "agabi10",
                                            "createdAt":  "2025-03-11T13:51:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcOcram",
                                            "createdAt":  "2025-04-17T13:51:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bparks13",
                                            "createdAt":  "2025-08-26T17:47:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Laura7089",
                                            "createdAt":  "2025-09-09T09:48:49Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-09-18T21:53:53Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-09-18T21:54:40Z",
        "body":  "### Description\r\n\r\nThis week my team was burned by an unexpected interaction between the Obsolete attribute and the behavior of XmlSerializer, which nearly caused production data loss had we not noticed. When the Obsolete attribute is applied to a property in a class subject to XML serialization, the property isn\u0027t serialized. \r\n\r\nIn reading around, this appears to be a very old decision originating in .NET Framework 3.5, that is not in alignment with the purpose of the Obsolete attribute (see https://weblogs.asp.net/psteele/xml-serialization-and-the-obsolete-attribute). The current documentation states that \"Marking an element as obsolete informs users that the element may be removed in a future version of the product.\" Not serializing based on the presence of Obsolete seems like a secondary purpose, for what is practically a single purpose attribute. It seems especially egregious when considering the XmlIgnore attribute exists for the dedicated purpose of preventing serialization of a property. The interaction also wasn\u0027t documented (see https://github.com/dotnet/docs/issues/40232)\r\n\r\nI consider this issue a bug; it\u0027s an interaction between disparate parts of the dotnet platform which really shouldn\u0027t be interacting the way they do, and is a pretty significant gotcha when a developer encounters it. That said, it\u0027s almost certainly a breaking change to adjust this behavior, because someone is no doubt relying on this functionality, but I can\u0027t really think of an alternative that would be a practical fix otherwise. I don\u0027t trust the compiler or roslyn analyzers to be able to reliably detect when a class might be XML Serialized, so a compiler warning is impractical, and a pragma or other compiler flag to adjust the functionality seems heavy handed (although it might be best solution overall). About the only other thing I can think of is introducing an XMLSerializationOptions class similar to JSON serialization, which doesn\u0027t seem in line with the current state of the API. \r\n\r\nIf someone knows, I would be eager to hear the reasoning for this functionality. \r\n\r\n### Reproduction Steps\r\n\r\nThis code reproduces the issue: \r\n\r\n```\r\nusing System.Xml.Serialization;\r\n\r\nXmlSerializer serializer = new XmlSerializer(typeof(Thing));\r\n\r\nvar thing = new Thing();\r\n\r\nusing(var file = File.OpenWrite(\"bad.xml\"))\r\n{\r\n\tserializer.Serialize(file, thing);\r\n}\r\n\r\npublic class Thing\r\n{\r\n\tpublic string FineProp { get; set; } = nameof(FineProp); //Is properly serialized\r\n\t[XmlIgnore]\r\n\tpublic string IgnoreProp { get; set; } = nameof(IgnoreProp); //Is properly ignored\r\n\t[Obsolete]\r\n\tpublic string ObsoleteProp { get; set; } = nameof(ObsoleteProp); //Isn\u0027t serialiZed?\r\n}\r\n\r\n```\r\n\r\nThe resulting xml generated looks like this: \r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cThing xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\r\n  \u003cFineProp\u003eFineProp\u003c/FineProp\u003e\r\n\u003c/Thing\u003e\r\n```\r\n\r\n### Expected behavior\r\n\r\nWhen marked with the Obsolete attribute, a property of a class should be serialized by an instance of XMLSerializer\r\n\r\n### Actual behavior\r\n\r\nWhen marked with the Obsolete attribute, public properties are not serialized by XMLSerializer\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET SDK 6.0.416 \r\nWindows 11 x64\r\nNot specific\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxUgTPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6WDVof",
                                           "createdAt":  "2024-12-04T13:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "twdkeule",
                                           "body":  "The ObsoleteAttribute also makes the XMLSerializer ignore Xml specific attributes.\n\nDeserializing this class throws an exception:\n```\n[Obsolete]\n[XmlRoot(\"root\")]\npublic class Message {...}\n```\n\nDeserializing this does not (notice the order of the attributes):\n```\n[XmlRoot(\"root\")]\n[Obsolete]\npublic class Message {...}\n```",
                                           "updatedAt":  "2024-12-04T13:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6se5bO",
                                           "createdAt":  "2025-05-20T10:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chvogel",
                                           "body":  "I second OP\u0027s view that this should be considered a bug instead of a feature.\n\nThe purpose of the `Obsolete` attribute is to indicate that a class/member is not safe to use in *consuming* code anymore.\nIt should NOT affect the function of existing code, in this case serializing or deserializing a property.\n\nAll the suggested workarounds (like using the `UnknownElement` event) require customizing the serializer instance which breaks generic implementations.\nIt would be so much easier to handle backwards compatibility within the class itself, for example by changing the setter of the obsolete property to support deserialization of old data but return null from the getter to prevent obsolete serialization output.\n\nHowever, seeing as this has been the behavior since .NET 3.5 (for almost 17 years), it\u0027s safe to assume that the existing behavior will not be changed.\nThe only alternative that I see is adding a new property to the `ObsoleteAttribute` to indicate that the target should still be serialized.",
                                           "updatedAt":  "2025-05-20T13:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C5Vhk",
                                           "createdAt":  "2025-09-09T09:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lol768",
                                           "body":  "This behaviour is completely nonsensical to me, and I would be incredibly surprised if anyone has ever actually _wanted_ this to do what it does (rather than just being bitten by it).",
                                           "updatedAt":  "2025-09-09T09:40:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FSBM9",
                                           "createdAt":  "2025-09-18T21:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenMolloy",
                                           "body":  "@copilot - Our xml serializers shouldn\u0027t be silently ignoring [Obsolete] members. The way this should work is if a member is marked [Obsolete(IsError=true)], then the serializer should throw an exception. If \u0027IsError\u0027 is not set or not true, then the member should still serialize normally.",
                                           "updatedAt":  "2025-09-18T21:54:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Obsolete attribute impacts XML Serialization",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100518",
        "createdAt":  "2024-04-02T11:55:40Z",
        "number":  100518,
        "author":  "gnattu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T07:20:27Z",
        "body":  "### Description\n\nThe XmlSerializer in collectible ALC can use the direct types from the ALC fine, but if the type is wrapped inside a collection like `List`, then it will throw `System.NotSupportedException: A non-collectible assembly may not reference a collectible assembly.`\n\n### Reproduction Steps\n\nGet this repo: https://github.com/uffebjorklund/AssemblyLoadContextBug\r\n\r\nChange line 10 of https://github.com/uffebjorklund/AssemblyLoadContextBug/tree/master/Module/Foo.cs to use `typeof(List\u003cBar\u003e)` instead of `typeof(Bar)`\r\n\r\nRun CrashSample, see the `System.NotSupportedException: A non-collectible assembly may not reference a collectible assembly.`\n\n### Expected behavior\n\nThe context created successfully just like when using `typeof(Bar)`.\n\n### Actual behavior\n\nIt throws with `System.NotSupportedException: A non-collectible assembly may not reference a collectible assembly.`\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nThe collection can be wrapped in another class so that it can be used with XmlSerializer\n\n### Configuration\n\ndotnet 8\r\nmacOS 14\r\narm64\r\nNot specific to this configuration\n\n### Other information\n\nI\u0027m not very sure if this is a bug or an intended behavior. But there is some use cases where we want to use a collection directly and not wrapping it with a class.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "XmlSerializer does not work with collections in collectible ALC",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100553",
        "createdAt":  "2024-04-02T21:14:24Z",
        "number":  100553,
        "author":  "lucienmaloney",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJcy7A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lipchev",
                                            "createdAt":  "2024-08-29T06:06:44Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-01T02:07:11Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-01T02:07:20Z",
        "body":  "### Description\n\nIf you have a `DataContractJsonSerializer `object that you call `SetSerializationSurrogateProvider `on to provide an `ISerializationSurrogateProvider `instance, that instance doesn\u0027t seem to be passed down to the internal serializer class used by `DataContractJsonSerializer`.\r\n\r\nFor example, calling `DataContractJsonSerializer.ReadObject` eventually hits `DataContractJsonSerializer.InternalReadObject`, which calls `XmlObjectSerializerReadContextComplexJson.CreateContext`. That calls the `XmlObjectSerializerReadContextComplexJson(DataContractJsonSerializer serializer, DataContract rootTypeDataContract)` constructor, which calls the `XmlObjectSerializerReadContextComplex(XmlObjectSerializer serializer, int maxItemsInObjectGraph, StreamingContext streamingContext, bool ignoreExtensionDataObject)` constructor.\r\n\r\nThis is where it seems to go wrong, since this constructor doesn\u0027t set `_serializationSurrogateProvider` - only the `XmlObjectSerializerReadContextComplex(DataContractSerializer serializer, DataContract rootTypeDataContract, DataContractResolver? dataContractResolver)` constructor can do that. So `_serializationSurrogateProvider` just stays null on that inner serializer, and doesn\u0027t come into play.\n\n### Reproduction Steps\n\nI can include a simplified version of the code I\u0027m using as an example snippet, if requested. However, I think any attempt to use `SetSerializationSurrogateProvider` on `DataContractJsonSerializer` will have the same problem. (If not, and there\u0027s a workaround that allows it to work, that\u0027d be good.)\n\n### Expected behavior\n\nThat the surrogate would be used in deserialization/serialization.\n\n### Actual behavior\n\nThe surrogate is null internally, so in our deserialization use case, we get an incorrectly initialized instance, or just an exception.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "DataContractJsonSerializer not passing ISerializationSurrogateProvider to internal xml serializer",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101654",
        "createdAt":  "2024-04-28T00:16:32Z",
        "number":  101654,
        "author":  "MMariusch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-02T05:47:04Z",
        "body":  "### Description\r\n\r\nWhen a base class implements IXmlSerializable then XmlSerializer Deserializing tries to create an instance of base class and calls it\u0027s virtual ReadXml instead of the overriden  ReadXml in the derived class. \r\n\r\n### Reproduction Steps\r\n\r\nIn the following example the deserializer is trying to make an instance of the base class instead of the derived one.\r\n\r\nRepository with an example: https://github.com/MMariusch/Example\r\n\r\nThe code:\r\n```cs\r\npublic class TestClass\r\n{\r\n\t[XmlElement(\"AClass\", typeof(AClass))]\r\n\tList\u003cBaseClass\u003e objects = new List\u003cBaseClass\u003e();\r\n\t\r\n\tpublic TestClass(){}\r\n\t\r\n\tpublic void SaveToFile()\r\n\t{\r\n\t\tobjects.Add(new AClass(\"someString\"));\r\n\t\tobjects.Add(new AClass(\"anotherString\"));\r\n\t\tvar xmlSerializer = new XmlSerializer(typeof(List\u003cBaseClass\u003e));\r\n\t\tusing (var writer = new StreamWriter(\"SaveList.xml\"))\r\n\t\t{\r\n\t\t\txmlSerializer.Serialize(writer, objects);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void LoadFromFile()\r\n\t{\r\n\t\tif (File.Exists(\"SaveList.xml\"))\r\n\t\t{\r\n\t\t\tusing (var reader = new StreamReader(\"SaveList.xml\"))\r\n\t\t\t{\r\n\t\t\t\tvar deserializedList = new XmlSerializer(typeof(List\u003cBaseClass\u003e)).Deserialize(reader) as List\u003cBaseClass\u003e;\r\n\t\t\t\tif (deserializedList != null \u0026\u0026 deserializedList.Count \u003e 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tobjects = deserializedList;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n[XmlInclude(typeof(AClass))]\r\npublic class BaseClass : IXmlSerializable\r\n{\r\n\tpublic BaseClass() { }\r\n\tpublic XmlSchema GetSchema() { return null; }\r\n\tpublic virtual void ReadXml(XmlReader reader) \r\n\t{\r\n\t\tConsole.Write(\"It shouldn\u0027t be triggered.\");\r\n\t}\r\n\tpublic virtual void WriteXml(XmlWriter writer) { }\r\n}\r\n\r\npublic class AClass : BaseClass\r\n{\r\n\tprivate string _stringVar;\r\n\tpublic string StringVar { get =\u003e _stringVar; private set =\u003e _stringVar = value; }\r\n\tpublic AClass() { }\r\n\tpublic AClass(string stringVar)\r\n\t{\r\n\t\t_stringVar = stringVar;\r\n\t}\r\n\r\n\tpublic override void ReadXml(XmlReader reader)\r\n\t{\r\n\t\treader.MoveToContent();\r\n\t\tvar anyElements = !reader.IsEmptyElement;\r\n\t\treader.ReadStartElement();\r\n\t\tif (anyElements)\r\n\t\t{\r\n\t\t\t_stringVar = reader.ReadElementContentAsString(\"StringVar\", \"\");\r\n\t\t\treader.ReadEndElement();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic override void WriteXml(XmlWriter writer)\r\n\t{\r\n\t\twriter.WriteAttributeString(\"xsi\", \"type\", null, \"AClass\");\r\n\t\twriter.WriteElementString(\"StringVar\", _stringVar);\r\n\t}\r\n}\r\n```\r\n### Expected behavior\r\n\r\nShould create an instance of the derived class.\r\n\r\n### Actual behavior\r\n\r\nCreates an instance of the base class.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhZXGyg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58VSuA",
                                           "createdAt":  "2024-04-30T16:47:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The `[XmlElement(\"AClass\", typeof(AClass))]` attribute on the TestClass.objects field is ignored by XmlSerializer because it is not serializing or deserializing a TestClass instance.\r\n\r\nThe generated SaveList.xml is:\r\n\r\n```XML\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cArrayOfBaseClass xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\r\n  \u003cBaseClass xsi:type=\"AClass\"\u003e\r\n    \u003cStringVar\u003esomeString\u003c/StringVar\u003e\r\n  \u003c/BaseClass\u003e\r\n  \u003cBaseClass xsi:type=\"AClass\"\u003e\r\n    \u003cStringVar\u003eanotherString\u003c/StringVar\u003e\r\n  \u003c/BaseClass\u003e\r\n\u003c/ArrayOfBaseClass\u003e\r\n```\r\n\r\nIf BaseClass did not implement IXmlSerializable, then XmlSerializer.Deserialize would recognize `xsi:type=\"AClass\"` and create an instance of AClass.  But now when BaseClass implements IXmlSerializable, XmlSerializer ignores the `xsi:type` attribute.\r\n\r\n## Analysis\r\n\r\nThe behaviour seems to be the same in .NET 8.0 and in .NET Framework 4.8.\r\n\r\nXmlSerializer in .NET Framework still includes the legacy C# code generator.  That likewise has the same behaviour.  The generated C# code can be debugged with this app.config:\r\n\r\n```XML\r\n\u003cconfiguration\u003e\r\n  \u003csystem.xml.serialization\u003e\r\n    \u003cxmlSerializer useLegacySerializerGeneration=\"true\" /\u003e\r\n  \u003c/system.xml.serialization\u003e\r\n  \u003csystem.diagnostics\u003e\r\n    \u003cswitches\u003e\r\n      \u003cadd name=\"XmlSerialization.Compilation\" value=\"true\" /\u003e\r\n    \u003c/switches\u003e\r\n  \u003c/system.diagnostics\u003e\r\n\u003c/configuration\u003e\r\n```\r\n\r\nThe deserializer code generators have branches specifically for checking the `xsi:type` attribute when deserializing a type that implements IXmlSerializable:\r\n\r\n* [.NET Framework: XmlSerializationReaderCodeGen.WriteElement checking DerivedMappings](https://github.com/microsoft/referencesource/blob/51cf7850defa8a17d815b4700b67116e3fa283c2/System.Xml/System/Xml/Serialization/XmlSerializationReader.cs#L4421-L4437)\r\n* [.NET 8.0.0: XmlSerializationReaderCodeGen.WriteElement checking DerivedMappings](https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlSerializationReader.cs#L4807-L4824)\r\n* [.NET 8.0.0: XmlSerializationReaderILGen.WriteElement checking DerivedMappings](https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlSerializationReaderILGen.cs#L3225-L3266)\r\n\r\nThose do not trigger with your sample code; SerializableMapping.DerivedMappings is apparently null.\r\n\r\n## Workaround (or intended use?)\r\n\r\nIf you apply XmlSchemaProviderAttribute, then the deserializer checks the `xsi:type` attribute and creates an instance of AClass:\r\n\r\n```csharp\r\n[XmlSchemaProvider(nameof(GetSchema))]\r\npublic partial class BaseClass : IXmlSerializable\r\n{\r\n    internal static XmlSchema Schema { get; }\r\n        = new XmlSchema()\r\n    {\r\n        Items =\r\n        {\r\n            new XmlSchemaComplexType()\r\n            {\r\n                Name = \"BaseClass\",\r\n            },\r\n            new XmlSchemaComplexType()\r\n            {\r\n                Name = \"AClass\",\r\n                ContentModel = new XmlSchemaComplexContent()\r\n                {\r\n                    Content = new XmlSchemaComplexContentExtension()\r\n                    {\r\n                        BaseTypeName = new XmlQualifiedName(\"BaseClass\"),\r\n                        Attributes =\r\n                        {\r\n                            new XmlSchemaAttribute()\r\n                            {\r\n                                Name = \"StringVar\",\r\n                                SchemaTypeName = new XmlQualifiedName(\"string\", ns: XmlSchema.Namespace),\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    public static XmlQualifiedName GetSchema(XmlSchemaSet xs)\r\n    {\r\n        xs.Add(BaseClass.Schema);\r\n        return new XmlQualifiedName(\"BaseClass\");\r\n    }\r\n}\r\n\r\n[XmlSchemaProvider(nameof(GetSchema))]\r\npublic partial class AClass : BaseClass\r\n{\r\n    public static new XmlQualifiedName GetSchema(XmlSchemaSet xs)\r\n    {\r\n        xs.Add(BaseClass.Schema);\r\n        return new XmlQualifiedName(\"AClass\");\r\n    }\r\n}\r\n```\r\n\r\nI don\u0027t know how much detail can be omitted from the XML schema.",
                                           "updatedAt":  "2024-04-30T16:47:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58cC_T",
                                           "createdAt":  "2024-04-30T23:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MMariusch",
                                           "body":  "Thank you for the answer. If I understand correctly, if I want to add another derived class then I need to modify the scheme. \r\nI made something like this:\r\n\r\n```cs\r\ninternal static XmlSchema Schema { get; } = new XmlSchema()\r\n{\r\n  Items = \r\n  { \r\n    new XmlSchemaComplexType() { Name = \"BaseClass\" },\r\n    new XmlSchemaComplexType() \r\n    {\r\n      Name = \"AClass\", ContentModel = new XmlSchemaComplexContent()\r\n      {\r\n        Content = new XmlSchemaComplexContentExtension()\r\n        {\r\n          BaseTypeName = new XmlQualifiedName(\"BaseClass\"), Attributes =\r\n          {\r\n            new XmlSchemaAttribute() \r\n            { Name = \"AStringVar\", SchemaTypeName = new XmlQualifiedName(\"string\", ns: XmlSchema.Namespace), },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    new XmlSchemaComplexType() \r\n    { \r\n      Name = \"BClass\", ContentModel = new XmlSchemaComplexContent()\r\n      { \r\n        Content = new XmlSchemaComplexContentExtension() \r\n        {\r\n          BaseTypeName = new XmlQualifiedName(\"BaseClass\"), Attributes = \r\n          { \r\n            new XmlSchemaAttribute()\r\n            { Name = \"BStringVar\", SchemaTypeName = new XmlQualifiedName(\"string\", ns: XmlSchema.Namespace), }, \r\n          },\r\n        },\r\n      },\r\n    },\r\n  }\r\n};\r\n```\r\n\r\nUnfortunately this doesn\u0027t work. The deserializer skips BClass.",
                                           "updatedAt":  "2024-04-30T23:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58dwPv",
                                           "createdAt":  "2024-05-01T08:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Please show how you define BClass and what goes into the XML file.",
                                           "updatedAt":  "2024-05-01T08:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58e0c_",
                                           "createdAt":  "2024-05-01T13:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MMariusch",
                                           "body":  "Oops. I forgot to add the XmlInclude attribute. Everything works fine. Thank you. \r\n\r\nGetting IXmlSerializable to work takes a lot of work. That\u0027s why I\u0027m wondering whether this shouldn\u0027t be treated as an bug.",
                                           "updatedAt":  "2024-05-01T13:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58fSeF",
                                           "createdAt":  "2024-05-01T14:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgPifw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MMariusch",
                                                                               "createdAt":  "2024-05-01T15:44:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The documentation could be improved for sure. The IXmlSerializable documentation explains how to provide a schema but does not mention that XmlSerializer requires a schema for deserialising instances of a derived class.  I think a note about this would be useful in the XmlIncludeAttribute documentation as well.\n\nIt makes some sense that, by implementing IXmlSerializable, the developer also takes responsibility of choosing the XmlQualifiedName for the `xsi:type` attribute.  But perhaps XmlSerializer could be changed to require only this XmlQualifiedName and not an entire XmlSchema.",
                                           "updatedAt":  "2024-05-01T14:50:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58f0DX",
                                           "createdAt":  "2024-05-01T16:21:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MMariusch",
                                           "body":  "You are right. An improved documentation would be also really helpful. But personally I would prefer to keep modifications of the base class to a minimum.\r\n\r\nCurrently I\u0027ve encountered another problem. I changed the BaseClass into an abstract class and updated the XmlSchemaComplexType of \"BaseClass\" by setting IsAbstract flag to true. Unfortunately I get an error because deserializer tries to create an instance of BaseClass instead of the derived class.\r\n\r\nI updated my project on repo: https://github.com/MMariusch/Example",
                                           "updatedAt":  "2024-05-01T16:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FHsh2",
                                           "createdAt":  "2024-07-17T13:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Jrpalazzo",
                                           "body":  "@MMariusch Just to contribute for future readers. If you remove the constructor from abstract BaseClass it deserializes correctly. ",
                                           "updatedAt":  "2024-07-17T13:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FlcbK",
                                           "createdAt":  "2024-07-20T15:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MMariusch",
                                           "body":  "Thank you for your suggestion. It does work, but I think a better solution would be to make the constructor protected rather than removing it.\r\n\r\nAlso, this is still a workaround because adding \"IsAbstract = true\" to \"XmlSchemaComplexType\" should be enough (if I understand correctly).",
                                           "updatedAt":  "2024-07-20T15:32:04Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "IXmlSerializable makes XmlSerializer Deserialize creates instance of base class instead of derived class",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102245",
        "createdAt":  "2024-05-15T07:55:44Z",
        "number":  102245,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-20T16:33:31Z",
        "body":  "The XML serializer generator uses `Assembly.LoadFile` to examine the original assembly for serializable types:\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.XmlSerializer.Generator/src/Sgen.cs#L480C24-L480C41\r\n\r\nCan it result in unintended code execution (eg. module initilizers)? Wouldn\u0027t it be more appropriate to use `Assembly.ReflectionOnlyLoad`?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOffNpSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5982lI",
                                           "createdAt":  "2024-05-15T17:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "As @MichalPetryka pointed out to me, .NET [Core] doesn\u0027t support `Assembly.ReflectionOnlyLoad[From]` which makes this significantly more complicated to fix. Ideally I would like the code to use `MetadataLoadContext` but the `XmlReflectionImporter` class used under the covers heavily depends on the types existing in the same context which makes such fix non-trivial. ",
                                           "updatedAt":  "2024-05-15T17:41:15Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.XmlSerializer.Generator use of Assembly.LoadFile",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106580",
        "createdAt":  "2024-08-18T01:24:57Z",
        "number":  106580,
        "author":  "danielo-unity3d",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNXGRg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maknapp",
                                            "createdAt":  "2025-07-10T18:45:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2025-07-17T09:50:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2025-08-29T20:07:29Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-02T06:00:45Z",
        "body":  "### Description\r\n\r\nWhen publishing a test application which uses XML serialization, vi code generated via `xscgen` (see [here](https://www.nuget.org/packages/dotnet-xscgen)) along with `PublishAot`, the application crashes because the serialization code relies heavily upon reflection.\r\n\r\nThe stack trace is, then:\r\n```\r\nbin/Debug/net8.0/linux-x64/publish/XmlSerializationTest\r\nUnhandled Exception: System.InvalidOperationException: There is an error in the XML document.\r\n ---\u003e System.InvalidOperationException: There was an error reflecting type \u0027ACME.Package.Xml.Schema.PackageACL\u0027.\r\n ---\u003e System.InvalidOperationException: You must implement a default accessor on System.Collections.ObjectModel.Collection`1[[ACME.Package.Xml.Schema.Package, XmlSerializationTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] because it inherits from ICollection.\r\n   at System.Xml.Serialization.TypeScope.GetDefaultIndexer(Type, String) + 0x4e9\r\n   at System.Xml.Serialization.TypeScope.GetCollectionElementType(Type, String) + 0x44\r\n   at System.Xml.Serialization.TypeScope.ImportTypeDesc(Type, MemberInfo, Boolean) + 0x732\r\n   at System.Xml.Serialization.TypeScope.GetTypeDesc(Type, MemberInfo, Boolean, Boolean) + 0x172\r\n   at System.Xml.Serialization.StructModel.GetPropertyModel(PropertyInfo) + 0xf6\r\n   at System.Xml.Serialization.StructModel.GetFieldModel(MemberInfo) + 0xb0\r\n   at System.Xml.Serialization.XmlReflectionImporter.InitializeStructMembers(StructMapping, StructModel, Boolean, String, RecursionLimiter) + 0x777\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportStructLikeMapping(StructModel, String, Boolean, XmlAttributes, RecursionLimiter) + 0x57f\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(TypeModel, String, XmlReflectionImporter.ImportContext, String, XmlAttributes, Boolean, Boolean, RecursionLimiter) + 0x90d\r\n   --- End of inner exception stack trace ---\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(TypeModel, String, XmlReflectionImporter.ImportContext, String, XmlAttributes, Boolean, Boolean, RecursionLimiter) + 0xb9f\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(TypeModel, String, XmlReflectionImporter.ImportContext, String, XmlAttributes, RecursionLimiter) + 0x57\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportElement(TypeModel, XmlRootAttribute, String, RecursionLimiter) + 0x15e\r\n   at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(Type, XmlRootAttribute, String) + 0xa5\r\n   at System.Xml.Serialization.XmlSerializer.GenerateXmlTypeMapping(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, String defaultNamespace) + 0xba\r\n   at System.Xml.Serialization.XmlSerializer.GetMapping() + 0x5e\r\n   at System.Xml.Serialization.XmlSerializer.DeserializeUsingReflection(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0x33\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0x1e9\r\n   --- End of inner exception stack trace ---\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0x4ed\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle) + 0x83\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader) + 0x27\r\n   at ACME.Xml.XmlExtensions.\u003cParseTag\u003ed__0`1.MoveNext() + 0x222\r\n   at System.Linq.Enumerable.TryGetSingle[TSource](IEnumerable`1, Boolean\u0026) + 0x16d\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1) + 0x4c\r\n   at ACME.XmlSerializationTest.Program.Main(String[] args) + 0x125\r\n   at XmlSerializationTest!\u003cBaseAddress\u003e+0x9e6cc7\r\n   at XmlSerializationTest!\u003cBaseAddress\u003e+0x9e6d4d\r\n[1]    500757 IOT instruction (core dumped)  bin/Debug/net8.0/linux-x64/publish/XmlSerializationTest\r\n```\r\n\r\nHowever, I have (in the real application) also seen the following stack:\r\n```\r\n ---\u003e System.NotSupportedException: \u0027System.Xml.Serialization.ReflectionXmlSerializationReaderHelper.GetSetMemberValueDelegateWithType[ACME.Package.Xml.Schema.PackageACL,System.DateTime](System.Reflection.MemberInfo)\u0027 is missing native code. MethodInfo.MakeGenericMethod() is not compatible with AOT compilation. Inspect and fix AOT related warnings that were generated when the app was published. For more information see https://aka.ms/nativeaot-compatibility\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x61\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeConstructedGenericMethodInfo.get_UncachedMethodInvoker() + 0x3b\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0x60\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x363\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.GetSetMemberValueDelegate(Object, String) + 0x40a\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.SetOrAddValueToMember(Object, Object, MemberInfo) + 0xc5\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.\u003c\u003ec__DisplayClass53_1.\u003cWriteLiteralStructMethod\u003eg__Wrapper|1(Object value) + 0x61\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteAttribute(ReflectionXmlSerializationReader.Member, Object) + 0x4be\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteAttributes(ReflectionXmlSerializationReader.Member[], ReflectionXmlSerializationReader.Member, UnknownNodeAction, Object\u0026) + 0x35b\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteLiteralStructMethod(StructMapping, Boolean, Boolean, String) + 0x13dc\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteStructMethod(StructMapping, Boolean, Boolean, String) + 0x72\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteElement(ElementAccessor, Boolean, Boolean, String, Int32, XmlSerializationReader.Fixup, ReflectionXmlSerializationReader.Member) + 0xc34\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteMemberElementsIf(ReflectionXmlSerializationReader.Member[], ReflectionXmlSerializationReader.Member, UnknownNodeAction, XmlSerializationReader.Fixup, ReflectionXmlSerializationReader.CheckTypeSource) + 0x718\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.WriteMemberElements(ReflectionXmlSerializationReader.Member[], UnknownNodeAction, UnknownNodeAction, ReflectionXmlSerializationReader.Member, ReflectionXmlSerializationReader.Member, XmlSerializationReader.Fixup, List`1) + 0x116\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.GenerateTypeElement(XmlTypeMapping) + 0x3f7\r\n   at System.Xml.Serialization.ReflectionXmlSerializationReader.ReadObject() + 0xd4\r\n   at System.Xml.Serialization.XmlSerializer.DeserializeUsingReflection(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0xc6\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0x1e9\r\n   --- End of inner exception stack trace ---\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events) + 0x4ed\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle) + 0x83\r\n   at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader) + 0x27\r\n```\r\nThe test project, which I have tried to prune as much as possible, can be found here: [XmlSerializationTest.zip](https://github.com/user-attachments/files/16645447/XmlSerializationTest.zip)\r\n\r\n- Can the linker be forced to instantiate the pruned functions? (private/internal classes and methods, with generic types)\r\n  - Is it generally preferable to use [ILLink Descriptor Format](https://github.com/dotnet/runtime/blob/main/docs/tools/illink/data-formats.md#descriptor-format) or the [Rd.xml File Format](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/docs/rd-xml-format.md) (marked as internal)?\r\n- In the test project. does it matter what flags are used for `xscgen`, and what attributes are finally used to mark the generated classes and fields, and \r\n  - what collections are eventually used (default is ``System.Collections.ObjectModel.Collection`1``)\r\n- Are there any plans to support this scenario? (I could only find issue #75480)\r\n- How can `System.Private.Xml` be modified (to support this scenario)?\r\n  - Is this just a question of addressing all linker warnings (IL3050) that are printed during the link phase (when `TrimmerSingleWarn` is true), or are other warnings/issues (perhaps being masked)?\r\n  - Occurrences of IL3050 are:\r\n    - `src/libraries/System.Private.Xml/src/System/Xml/Serialization/Types.cs`: 25 hits\r\n    - `src/libraries/System.Private.Xml/src/System/Xml/Serialization/CodeGenerator.cs`: 1 hit\r\n    - `src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlSerializationReader.cs`: 6 hits\r\n    - `src/libraries/System.Private.Xml/src/System/Xml/Serialization/XmlSerializationWriter.cs`: 1 hit\r\n    - `src/libraries/System.Private.Xml/src/System/Xml/Serialization/NameTable.cs`: 1 hit\r\n- Would the support ever be available in .Net 8, or just .Net 9? (could the solution be back-ported if we get to that point?)\r\n\r\n### Reproduction Steps\r\n\r\nCompile and run attached project:\r\n```\r\ndotnet publish -c Debug\r\nbin/Debug/net8.0/linux-x64/publish/XmlSerializationTest\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe test program should successfully serialize and deserialize a basic data structure to and from XML.\r\n\r\n### Actual behavior\r\n\r\nSee stack trace of crash in the description.\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:           8.0.303\r\n Commit:            29ab8e3268\r\n Workload version:  8.0.300-manifests.c915c39d\r\n MSBuild version:   17.10.4+10fbfbf2e\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  24.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /home/user/.dotnet/sdk/8.0.303/\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.7\r\n  Architecture: x64\r\n  Commit:       2aade6beb0\r\n\r\n.NET SDKs installed:\r\n  6.0.424 [/home/user/.dotnet/sdk]\r\n  7.0.410 [/home/user/.dotnet/sdk]\r\n  8.0.303 [/home/user/.dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.32 [/home/user/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.20 [/home/user/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.7 [/home/user/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.32 [/home/user/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.20 [/home/user/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.7 [/home/user/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  DOTNET_ROOT       [/home/user/.dotnet]\r\n\r\nglobal.json file:\r\n  /home/user/Unity/licensing.entitlement4/global.json\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\n### Other information\r\n\r\nSee also this [issue](https://github.com/mganss/XmlSchemaClassGenerator/issues/500) in `xscgen`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtOoUVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IzFl2",
                                           "createdAt":  "2024-08-18T03:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc3-XA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-18T14:29:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-08-18T18:17:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2024-08-19T07:30:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lechu445",
                                                                               "createdAt":  "2024-10-02T20:23:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "coltonk9043",
                                                                               "createdAt":  "2025-01-06T19:49:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jure-BB",
                                                                               "createdAt":  "2025-01-27T14:02:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HotCakeX",
                                                                               "createdAt":  "2025-02-04T13:51:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "HotCakeX",
                                                                               "createdAt":  "2025-02-04T13:51:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "HotCakeX",
                                                                               "createdAt":  "2025-02-04T13:51:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "n00j",
                                                                               "createdAt":  "2025-02-15T04:33:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaldobrodenka",
                                                                               "createdAt":  "2025-06-28T06:13:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-02T06:04:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "RenderMichael",
                                           "body":  "It would be amazing if XML serialization could get the same treatment as JSON and have a source-generated AOT-safe {de}serializer.\r\n\r\nSuch a thing would be a large undertaking, and although I think it would be worth it (a shocking amount of people and enterprises use XML and have no plans on transitioning away), I can understand any hesitancy in committing to that kind of project.",
                                           "updatedAt":  "2024-08-18T03:13:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IzhGL",
                                           "createdAt":  "2024-08-18T10:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbg9kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "pastrasigns",
                                                                               "createdAt":  "2025-07-22T19:27:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "We were [facing the same issue](https://github.com/filipnavara/nativeaot-notes/blob/main/third-party-libraries.md#xml-serialization-and-deserialization), and I had some short discussion with people on the .NET team. There\u0027s no immediate solution right now, and in the end we ended up rewriting most of our code to manually implement `IXmlSerializable` interface and manually [de]serialize through `XmlReader` and `XmlWriter`. For cases where that was not viable we use\r\n`DynamicDependency` attribute at the moment to tell the AOT compiler what to preserve. One option that was discussed was to extend [Serde.NET](https://github.com/serdedotnet/serde) to support some of the XML scenarios and have people migrate to it.",
                                           "updatedAt":  "2024-08-18T10:10:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Izh8g",
                                           "createdAt":  "2024-08-18T10:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Such a thing would be a large undertaking\r\n\r\nThe thing is, there\u0027s already a code for the source generation (SGen) but there\u0027s no way to integrate it into NativeAOT executable easily. The traditional SGen (available on modern .NET as NuGet) generates an additional assembly and the `XmlSerializer` has code paths that find this assembly and load it at runtime. That obviously doesn\u0027t work on NativeAOT since you cannot load assembly dynamically, you need to precompile it, and the code to do the loading in `XmlSerializer` is stripped anyway.\r\n\r\nSGen uses reflection to load the original assembly and to form an object model for the XML schema. It then uses the XML schema model to source generate the code. Unfortunately, the reflection code is quite old and depends on the runtime loading of the assembly. It\u0027s [not possible to simply migrate it to work on top of `System.Reflection.Metadata`](https://github.com/dotnet/runtime/issues/102245#issuecomment-2113104200).\r\n\r\nI had the idea to use a modified [Roslyn.Reflection](https://github.com/davidfowl/Roslyn.Reflection) to create a source generator that would simply reuse most of the existing infrastructure for source generation. The problem turned out to be that lot of the schema reading code depends on the types existing in the same runtime context, much like the issue with `System.Reflection.Metadata` linked above.\r\n\r\n(Now, if you start from an XML schema in the first place, you can write a code that load it, runs the same SGen internal code to produce the source code, and you will be 90% there with \"nice\" C# code. It still doesn\u0027t fix everything since the source generated code still relies on some reflection logic that doesn\u0027t quite work in NativeAOT scenarios, but that would be fixable.)",
                                           "updatedAt":  "2024-08-18T10:24:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I426v",
                                           "createdAt":  "2024-08-19T13:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu2mhg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2024-08-19T14:18:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2024-08-20T04:18:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "After some back and forth with @Suchiman here\u0027s a minimal sample of using SGen in NativeAOT: https://gist.github.com/filipnavara/1e8831c256498bad53b3aae94af87a20\r\n\r\nThere are few things that were done there:\r\n1) Added SGen using [official documentation](https://learn.microsoft.com/en-us/dotnet/core/additional-tools/xml-serializer-generator)\r\n2) Added `LinkSerializationAssembly` target in .csproj to add the SGen output as ILC input w/ rooting\r\n3) Added hack in .csproj / ILLink.Substitutions.xml to override `XmlSerializer.Mode` to `ReflectionAsBackup`. The default for NativeAOT is `ReflectionOnly` which breaks loading the pre-generated assemblies.\r\n4) Added `[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]` to the root XML class.\r\n\r\nPresumably,\r\n2) can be scripted in the Microsoft.XmlSerializer.Generator NuGet,\r\n3) should be fixable by adjusting the behavior of existing `ReflectionOnly` mode, and,\r\n4) can be fixed with the right annotations in .NET Runtime\r\n",
                                           "updatedAt":  "2024-08-19T13:39:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JTmz8",
                                           "createdAt":  "2024-08-22T03:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danielo-unity3d",
                                           "body":  "Thanks for your comments, @filipnavara.\r\n\r\nI took your gist, and ran with it. \r\nI appear to have hit a bug caused by `SGen` (or rather, the `XmlReflectionImporter` inside `System.Private.Xml`) not taking the namespace into account when building its typemap (such that two classes with the same name in two separate XML namespaces, mapped into two distinct C# namespaces, will collide).\r\n\r\nI have a fix, and can generate the serialization _code_ (for my assembly), but:\r\n- it needs to be integrated (ie. the csproj needs to run the fixed version of the tool), and I\u0027m have issues with the workflow. \r\n- I need to check that the generated code actually works with AOT.\r\n\r\nStay tuned.",
                                           "updatedAt":  "2024-08-22T03:48:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nsfl1",
                                           "createdAt":  "2024-09-26T15:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc3-fg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ProviceUnify",
                                                                               "createdAt":  "2024-09-26T19:16:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HotCakeX",
                                                                               "createdAt":  "2024-12-06T12:46:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "coltonk9043",
                                                                               "createdAt":  "2025-01-06T19:49:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TickThunder",
                                                                               "createdAt":  "2025-05-04T09:38:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-02T06:05:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "alex-everitt-2277",
                                           "body":  "Also running into this issue, unfortuantely looks like AOT will not be possible for our usecase until some sort of support comes along for XmlSerialization. Praying for that JSON treatment and a proper source generator 🤞 ",
                                           "updatedAt":  "2024-09-26T15:10:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NuWBm",
                                           "createdAt":  "2024-09-26T19:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProviceUnify",
                                           "body":  "Same issue on NET 8 and NET 9 RC 1. But AOT can deal with simple XML files. But i got dead end error with XmlArray on List\u003cT\u003e public fields\r\n\r\n```csharp\r\npublic class ClassName\r\n{\r\n    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(ClassName))]\r\n    public ClassName() { }\r\n\r\n    [XmlArray(\"ItemsName\")]\r\n    [XmlArrayItem(\"ItemName\")]\r\n    public List\u003cItemType\u003e Item { get; init; }\r\n}\r\n```\r\n```\r\nYou must implement a default accessor on System.Collections.Generic.List`1[[ItemName, Namespace, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] because it inherits from ICollection\r\n```",
                                           "updatedAt":  "2024-09-26T19:14:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nu0Nm",
                                           "createdAt":  "2024-09-26T20:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "That exception is being raised from here https://github.com/dotnet/runtime/blob/c4ebd384047f8ec8ac53c6b79cec9753c4a71ce5/src/libraries/System.Private.Xml/src/System/Xml/Serialization/Types.cs#L1356\r\nIf i read the code correctly, it\u0027s trying to find the indexer on the `List\u003cItemType\u003e` (that is `list[42] = ...`) but its probably trimmed away or omitted from reflection info.\r\nTry adding `typeof(List\u003cItemType\u003e).GetDefaultMembers();` somewhere in your code that is guaranteed to execute.\r\nThat should hint NAOT sufficiently to make sure to include that information.",
                                           "updatedAt":  "2024-09-26T20:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N1-u_",
                                           "createdAt":  "2024-09-27T17:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProviceUnify",
                                           "body":  "Yes. It works, thank you @Suchiman. I have large and complex xml with few levels of nesting. Good way to hint NAOT what types are using in model is adding `new TypeName = new()` or `typeof(TypeName).GetDefaultMembers()` in constructors (or other place. I haven\u0027t checked other variants).\r\n\r\nPseudo-code for clarification what i mean. You should recheck it if you suppose to use it but main conception saved:\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?\u003e\r\n\u003cRoot\u003e\r\n\t\u003cChildNode/\u003e\r\n\t\u003cAnotherChildNodes\u003e\r\n\t\t\u003cAnotherChildNode/\u003e\r\n\t\t\u003cAnotherChildNode/\u003e\r\n\t\t\u003cAnotherChildNode/\u003e\r\n\t\t\u003cAnotherChildNode/\u003e\r\n\t\u003c/AnotherChildNodes\u003e\r\n\u003c/Root\u003e\r\n```\r\n\r\n```csharp\r\n// this code won\u0027t work in NativeAot\r\n\r\n[XmlRoot]\r\npublic class Root {\r\n   public ChildNodeType ChildNode {get;set;}\r\n\r\n  [XmlArray(\"AnotherChildNodes\")]\r\n  [XmlArrayItem(\"AnotherChildNode\")]\r\n  public List\u003cAnotherChildNodeType\u003e AnotherChildNodes {get;set;}\r\n}\r\n\r\npublic class AnotherChildNodeType {\r\n  // fields\r\n}\r\n\r\npublic class ChildNodeType {\r\n  // fields\r\n}\r\n```\r\n\r\n```csharp\r\n// this code will\r\n\r\n[XmlRoot]\r\npublic class Root {\r\n  [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(Root))]\r\n  public Root() {\r\n   typeof(List\u003cAnotherChildNodeType\u003e).GetDefaultMembers();\r\n   typeof(AnotherChildNodeType).GetDefaultMembers();\r\n   typeof(ChildNodeType).GetDefaultMembers();\r\n  }  \r\n\r\n   public ChildNodeType ChildNode {get;set;}\r\n\r\n  [XmlArray(\"AnotherChildNodes\")]\r\n  [XmlArrayItem(\"AnotherChildNode\")]\r\n  public List\u003cAnotherChildNodeType\u003e AnotherChildNodes {get;set;}\r\n}\r\n\r\npublic class AnotherChildNodeType {\r\n  public AnotherChildNodeType() {\r\n    // typeof(FieldOfClass).GetDefaultMembers(); ...\r\n  }\r\n  // fields\r\n}\r\n\r\npublic class ChildNodeType {\r\n  public ChildNodeType() {\r\n    // typeof(FieldOfClass).GetDefaultMembers(); ...\r\n  }\r\n  // fields\r\n}\r\n```",
                                           "updatedAt":  "2024-09-27T17:33:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6em3LE",
                                           "createdAt":  "2025-02-15T16:13:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc3-Uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-07-04T09:35:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-02T06:03:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Any updates on this?\nI am running into the same issue when trying to migrate my Library to NativeAoT (It\u0027s used as a library for a Clarion project, the only part left is the XML stuff)",
                                           "updatedAt":  "2025-02-15T16:13:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc606hRV",
                                           "createdAt":  "2025-07-04T09:43:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "How about https://github.com/ZingBallyhoo/StackXML",
                                           "updatedAt":  "2025-07-04T09:43:32Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "NativeAOT and XmlSerializer",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107288",
        "createdAt":  "2024-09-03T11:22:34Z",
        "number":  107288,
        "author":  "TiltonJH",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T15:54:27Z",
        "body":  "### Description\r\n\r\nBeginning with the `Microsoft.XmlSerializer.Generator 7.*` or greater (#2335; #73550), the generated `*.XmlSerialization.all` are added to the nuget package in the `lib\\*\\` folder. Thereby, those become part of the compilation process down the line.\r\n\r\nThis will cause an CS0436 on another project also using `Microsoft.XmlSerializer.Generator`.\r\n\r\n### Reproduction Steps\r\n\r\nIf one creates two libraries both using the `Microsoft.XmlSerializer.Generator` and lib.B depends on lib.A via NuGet (package reference), than lib.B will have an CS0436.\r\n\r\n### Expected behavior\r\n\r\nNo warning. (Obviously 😉)\r\n\r\nAdd the generated `*.XmlSerialization.dll` not to the lib folder, but rather to the build folder including a `.targets` file which will ensure that the `*.XmlSerialization.all` is copied to the output directory (for example).\r\n\r\n### Actual behavior\r\n\r\n```\r\nWarning (active) CS0436\tThe type \u0027XmlSerializationReader1\u0027 in [...]\\Lib.B\\obj\\Debug\\net8.0\\Lib.B.XmlSerializers.cs\u0027 conflicts with the imported type \u0027XmlSerializationReader1\u0027 in \u0027Lib.A, Version=[...] Culture=neutral, PublicKeyToken=null\u0027.\r\nUsing the type defined in \u0027[...]\\Lib.B\\obj\\Debug\\net8.0\\Lib.B.XmlSerializers.cs\u0027.\r\n```\r\n\r\n### Regression?\r\n\r\nMicrosoft.XmlSerializer.Generator 6.0.0 work fine, because it did not add the generated `*.XmlSerialization.dll` to the nuget package.\r\n\r\n### Known Workarounds\r\n\r\nUse the Microsoft.XmlSerializer.Generator 6.0.0.\r\n\r\n### Configuration\r\n\r\nnet6.0 / net8.0; VS 2022\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiqjYwA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KqNjA",
                                           "createdAt":  "2024-09-03T11:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TiltonJH",
                                           "body":  "Example *.targets file for the nuget `build` dir as mentioned above:\r\n\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cProject xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n\t\u003cItemGroup\u003e\r\n\t\t\u003cNone Include=\"$(MSBuildThisFileDirectory)*.XmlSerializers.dll\"\r\n\t\t\t  Link=\"%(Filename)%(Extension)\"\r\n\t\t\t  Visible=\"false\"\u003e\r\n\t\t\t\u003cCopyToOutputDirectory\u003ePreserveNewest\u003c/CopyToOutputDirectory\u003e\r\n\t\t\u003c/None\u003e\r\n\t\u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```",
                                           "updatedAt":  "2024-09-03T11:49:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.XmlSerializer.Generator added *.XmlSerialization.all to nuget package which causes CS0436",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109264",
        "createdAt":  "2024-10-27T20:50:57Z",
        "number":  109264,
        "author":  "Takym",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T15:16:43Z",
        "body":  "When I use event methods for the `DataContractSerializer` system, I still need a `StreamingContext` parameter even though the `BinaryFormatter` stuff is deprecated. The constructor and state property of `StreamingContext` is marked as obsolete.\n\nThe `StreamingContext _` parameter is unused in the below code. I feel it is redundant.\n```cs\n[OnSerializing()]\nvoid OnSerializing(StreamingContext _) { ... }\n\n[OnSerialized()]\nvoid OnSerializing(StreamingContext _) { ... }\n\n[OnDeserializing()]\nvoid OnSerializing(StreamingContext _) { ... }\n\n[OnDeserialized()]\nvoid OnSerializing(StreamingContext _) { ... }\n```\n\nParameter-less one like the code below makes me feel refreshed. Also, we do not need to type unused parameters. So, developing efficiency is more improved. In addition, maybe, passing (copying structure data) the parameter makes a program slow. Or maybe, the speed is the same because of checking parameters.\n```cs\n[OnSerializing()]\nvoid OnSerializing() { ... }\n\n[OnSerialized()]\nvoid OnSerializing() { ... }\n\n[OnDeserializing()]\nvoid OnSerializing() { ... }\n\n[OnDeserialized()]\nvoid OnSerializing() { ... }\n```\n\nI agree that we should still support with `StreamingContext _` parameter for compatibility but I want a parameter-less option.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnLYXvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Rcg3i",
                                           "createdAt":  "2024-10-27T20:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-27T20:51:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UwMig",
                                           "createdAt":  "2024-11-23T21:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Takym",
                                           "body":  "\u003cdetails\u003e\n\u003csummary\u003eRelated codes\u003c/summary\u003e\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/ClassDataContract.cs#L1063-L1142\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/ReflectionClassWriter.cs#L130-L150\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Json/JsonFormatWriterGenerator.cs#L174-L198\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/XmlFormatWriterGenerator.cs#L207-L231\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/ReflectionReader.cs#L398-L418\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/XmlFormatReaderGenerator.cs#L290-L322\n\nhttps://github.com/dotnet/runtime/blob/f1332ab0d82ee0e21ca387cbd1c8a87c5dfa4906/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/Json/JsonFormatReaderGenerator.cs#L232-L258\n\n\u003c/details\u003e",
                                           "updatedAt":  "2024-11-23T21:39:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cthe8",
                                           "createdAt":  "2025-02-02T00:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027binaryformatter-migration\u0027: @adamsitnik, @bartonjs, @jeffhandley, @terrajobst\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-02T00:33:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support parameter-less event methods in `DataContractSerializer` (without a `StreamingContext` parameter)",
        "labels":  [
                       "area-Serialization",
                       "binaryformatter-migration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110435",
        "createdAt":  "2024-12-05T12:44:59Z",
        "number":  110435,
        "author":  "theolivenbaum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T07:20:36Z",
        "body":  "### Description\n\nCross-post from this bug, which is still active: https://github.com/dotnet/interactive/issues/1881\n\n### Reproduction Steps\n\nSee: https://github.com/dotnet/interactive/issues/1881\n\n### Expected behavior\n\nXmlSerializer works on runtime-created assemblies\n\n### Actual behavior\n\nException: \n````\nError: System.ArgumentException: Identifier \u0027Submission#8\u0027 is not CLS-compliant. (Parameter \u0027ident\u0027)\nat System.Xml.Serialization.CodeIdentifier.CheckValidIdentifier(String ident)\nat System.Xml.Serialization.CodeIdentifier.EscapeKeywords(String identifier, StringBuilder sb)\nat System.Xml.Serialization.CodeIdentifier.GetCSharpName(Type t, Type[] parameters, Int32 index, StringBuilder sb)\nat System.Xml.Serialization.CodeIdentifier.GetCSharpName(Type t, Type[] parameters, Int32 index, StringBuilder sb)\nat System.Xml.Serialization.CodeIdentifier.GetCSharpName(Type t)\nat System.Xml.Serialization.TypeDesc.get_CSharpName()\nat System.Xml.Serialization.SourceInfo.CastTo(TypeDesc td)\nat System.Xml.Serialization.XmlSerializationWriterILGen.WriteElements(SourceInfo source, String enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, String arrayName, Boolean writeAccessors, Boolean isNullable)\nat System.Xml.Serialization.XmlSerializationWriterILGen.WriteMember(SourceInfo source, String choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, Boolean writeAccessors)\nat System.Xml.Serialization.XmlSerializationWriterILGen.GenerateTypeElement(XmlTypeMapping xmlTypeMapping)\nat System.Xml.Serialization.XmlSerializationWriterILGen.GenerateElement(XmlMapping xmlMapping)\nat System.Xml.Serialization.TempAssembly.GenerateRefEmitAssembly(XmlMapping[] xmlMappings, Type[] types, String defaultNamespace)\nat System.Xml.Serialization.TempAssembly..ctor(XmlMapping[] xmlMappings, Type[] types, String defaultNamespace, String location)\nat System.Xml.Serialization.XmlSerializer.GenerateTempAssembly(XmlMapping xmlMapping, Type type, String defaultNamespace, String location)\nat System.Xml.Serialization.XmlSerializer..ctor(Type type, String defaultNamespace)\nat System.Xml.Serialization.XmlSerializer..ctor(Type type)\nat Submission#8.\u003c\u003cInitialize\u003e\u003ed__0.MoveNext()\n--- End of stack trace from previous location ---\nat Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.RunSubmissionsAsync[TResult](ImmutableArray`1 precedingExecutors, Func`2 currentExecutor, StrongBox`1 exceptionHolderOpt, Func`2 catchExceptionOpt, CancellationToken cancellationToken)\n````\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Error: System.ArgumentException: Identifier is not CLS-compliant. (Parameter \u0027ident\u0027)",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114813",
        "createdAt":  "2025-04-18T03:15:05Z",
        "number":  114813,
        "author":  "BradBarnich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMXzIA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-23T05:00:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-31T16:48:53Z",
        "body":  "### Description\n\nWhen using DataContractSerializer with a type that contains a DateTimeOffset, that implements IXmlSerializable, and uses DataContractSerializer in the implementation of ReadXml/WriteXml, on .net7.0+\n\nThe xml looks something like this and is the same across versions.\n```xml\n\u003cContainer xmlns=\"http://schemas.datacontract.org/2004/07/\"\u003e\n  \u003cTestObject xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e\n    \u003cDate xmlns:d2p1=\"http://schemas.datacontract.org/2004/07/System\"\u003e\n      \u003cd2p1:DateTime\u003e2025-04-18T02:57:13.1151301Z\u003c/d2p1:DateTime\u003e \n      \u003cd2p1:OffsetMinutes\u003e-240\u003c/d2p1:OffsetMinutes\u003e\n    \u003c/Date\u003e\n  \u003c/TestObject\u003e\n\u003c/Container\u003e\n```\n\nThe deserialized DateTimeOffset is shifted from the true value. Something like the UTC time is interpreted as the local time, with the specified offset\n\n### Reproduction Steps\n\n```cs\nusing System.Diagnostics;\nusing System.Runtime.Serialization;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\n\nvar testObject = new TestObject { Date = DateTimeOffset.Now };\nvar container = new Container { TestObject = testObject };\n\nvar dcsContainer = new DataContractSerializer(typeof(Container));\nusing var streamContainer = new MemoryStream();\ndcsContainer.WriteObject(streamContainer, container);\nstreamContainer.Position = 0;\nvar resultContainer = dcsContainer.ReadObject(streamContainer) as Container;\n\nConsole.WriteLine(container.TestObject.Date);\nConsole.WriteLine(resultContainer.TestObject.Date);\nDebug.Assert(container.TestObject.Date == resultContainer.TestObject.Date);\n\n\npublic class Container : IXmlSerializable\n{\n    public TestObject TestObject { get; set; }\n\n    public XmlSchema? GetSchema()\n    {\n        return null;\n    }\n\n    public void ReadXml(XmlReader reader)\n    {\n        var serializer = new DataContractSerializer(typeof(TestObject));\n        reader.ReadStartElement();\n        TestObject = (TestObject)serializer.ReadObject(reader);\n        reader.ReadEndElement();\n    }\n\n    public void WriteXml(XmlWriter writer)\n    {\n        var serializer = new DataContractSerializer(typeof(TestObject));\n        serializer.WriteObject(writer, TestObject);\n    }\n}\n\n[DataContract]\npublic class TestObject\n{\n    [DataMember]\n    public DateTimeOffset Date { get; set; }\n}\n```\n\n### Expected behavior\n\nIt is expected that two lines are printed, both the same value.\n\n\n### Actual behavior\n\nOn net48 and net6.0, they do. \n```\n4/17/2025 10:45:00 PM -04:00\n4/17/2025 10:45:00 PM -04:00\n```\n\nOn net7.0+ the last value is shifted by the UTC offset (but still has a UTC offset, so the real time is different)\n```\n4/17/2025 10:45:00 PM -04:00\n4/18/2025 2:45:00 AM -04:00\n```\n\n### Regression?\n\nYes, on .net framework and .net 6.0\n\n### Known Workarounds\n\nwithin the `IXmlSerializable.ReadXml` implementation, use reflection to grab the `InnerReader` from the passed in `XmlSerializableReader reader`, and pass this inner reader to `DataContractSerializer`\n\n### Configuration\n\nWindows x64\n\n### Other information\n\nfound when upgrading a CoreWCF application upgrading from .net 6 to 8",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqGYIHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6oZbzs",
                                           "createdAt":  "2025-04-23T18:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BradBarnich",
                                           "body":  "I believe this line https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/XmlSerializableReader.cs#L118 should be `return InnerReader.ReadContentAsDateTime()` as it is in the net48 source https://github.com/microsoft/referencesource/blob/master/System.Runtime.Serialization/System/Runtime/Serialization/XmlSerializableReader.cs#L117\n\nprior to https://github.com/dotnet/runtime/pull/71752, `ReadContentAsString()` was used",
                                           "updatedAt":  "2025-04-23T18:58:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oZggd",
                                           "createdAt":  "2025-04-23T19:01:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BradBarnich",
                                           "body":  "`DateTimeOffset.DateTime` returns an unspecified datetime kind, which causes the `DateTimeOffsetAdapter` to misinterpret the value https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/DateTimeOffsetAdapter.cs#L42-L53",
                                           "updatedAt":  "2025-04-23T19:01:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "incorrect DateTimeOffset with DataContractSerializer and IXmlSerializable",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115837",
        "createdAt":  "2025-05-21T14:00:34Z",
        "number":  115837,
        "author":  "meixger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJeLug==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-01T07:19:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-01T07:19:30Z",
        "body":  "### Description\n\nA `[XmlTextAttribute] string[]  { get; set; }` property with value `[\"a\", \"b\", \"c\", \"d\"]` should be serialized as a space-separated list in the xml text.\n\nList datatypes on https://www.w3.org/TR/xmlschema-2/#dt-list\n\n### Reproduction Steps\n\nhttps://dotnetfiddle.net/dPcLua\n\n```\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\t// Arrange\n\t\t// XML taken from https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.Xml/tests/XmlSchema/TestFiles/StandardTests/xsd10/simpleType/bug102159_1.xml\n                var bug102159_1 = \"\"\"\n                                  \u003c?xml version=\"1.0\"?\u003e\n                                  \u003croot xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"bug102159_1.xsd\"\u003e\n                                    \u003cnms\u003ea b c d\u003c/nms\u003e\n                                    \u003cmylist\u003ea b c d\u003c/mylist\u003e\n                                  \u003c/root\u003e\n                                  \"\"\";\n\t\tvar serializer = new XmlSerializer(typeof(Root));\n\n\t\t// Act\n\t\tvar instance = (Root)serializer.Deserialize(new StringReader(bug102159_1))!;\n\t\t\t\n\t\t// Assert\n\t\tif (instance.Nms.Items.Length != 4) throw new InvalidOperationException($\"Property Nms contains {instance.Nms.Items.Length} elements.\");\n\t\tif (instance.MyList.Items.Length != 4) throw new InvalidOperationException($\"Property MyList contains {instance.MyList.Items.Length} elements.\");\n\t}\n}\n\n[XmlRootAttribute(\"root\")]\npublic class Root\n{\n    [XmlElement(\"nms\")]\n    public Nms Nms { get; set; }\n    \n    [XmlElement(\"mylist\")]\n    public MyList MyList { get; set; }\n}\n\npublic class Nms\n{\n    [XmlText]\n    public string[] Items { get; set; }\n}\n\npublic class MyList\n{\n    [XmlText]\n    public string[] Items { get; set; }\n}\n```\n\n### Expected behavior\n\nSerialization of `string[]` should produce a white-space separated simple list.\n\n```xml\n\u003croot\u003ea b c d\u003c/root\u003e\n```\n\n### Actual behavior\n\nOn serialization the array values are squashed into a string without white-space separators:\n\n```xml\n\u003croot\u003eabcd\u003c/root\u003e\n```\n\nDeserialization should produce an array with values split on white-space.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nAccessing the value via a shadow property and split or join string manually.\n\nhttps://dotnetfiddle.net/155cRB\n\n### Configuration\n\n.NET 9.0\n\n### Other information\n\n\"The .NET Framework provides accurate bindings for XML attribute declarations with list types, **but not for element declarations**.\" [source](https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/t84dzyst(v=vs.100))\n\nRelated issue https://github.com/dotnet/runtime/issues/98447",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrPvUTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6svvMp",
                                           "createdAt":  "2025-05-21T14:33:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-xml\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-21T14:33:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s7kXw",
                                           "createdAt":  "2025-05-22T13:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "What would `[\"a b\", \"c d\"]` serialize into? XML Schema and serialization are independent entities - all validation constructs don\u0027t have to have translation in the serialization world. I agree the serialization with joined entries doesn\u0027t look right but I\u0027m not sure if that\u0027s expected or if how to change it.",
                                           "updatedAt":  "2025-05-22T14:38:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s8YSJ",
                                           "createdAt":  "2025-05-22T14:46:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETPbaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meixger",
                                                                               "createdAt":  "2025-05-22T18:27:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "I believe you can achieve the behavior you expect with some combination of `[XmlIgnore]` and extra property, i.e.:\n\n```csharp\n    [XmlIgnore] // or just make property private\n    public List\u003cstring\u003e Items { get; set; } = new();\n\n    [XmlElement(\"Items\")]\n    public string ItemsSerialization\n    {\n        get =\u003e string.Join(\" \", Words);\n        set =\u003e Words = (value ?? \"\")\n                       .Split(\u0027 \u0027, StringSplitOptions.RemoveEmptyEntries)\n                       .ToList();\n    }\n```\n\nmake sure to consider any item being `\"a b c\"` case when making any members public\n",
                                           "updatedAt":  "2025-05-22T14:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s-9RM",
                                           "createdAt":  "2025-05-22T18:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meixger",
                                           "body":  "\u003e What would `[\"a b\", \"c d\"]` serialize into? \n\nReading [XML Schema Definition Language](https://www.w3.org/TR/xmlschema11-2/#list-datatypes), which specifies lists as \u0027space-separated sequence\u0027, i would expect `\u003celement\u003ea b c d\u003c/element\u003e`.\n\nNow it is serialized to `\u003celement\u003ea bc d\u003c/element\u003e\"` because of no white-space separation.\n\nThe situation is different with attributes, which are serialized as expected into `\u003celement attr=\"a b c d\" /\u003e`.\n\nThis was documented previously:\n\u003e The .NET Framework provides accurate bindings for XML attribute declarations with list types, but not for element declarations. ([source](https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/t84dzyst(v=vs.100)))\n",
                                           "updatedAt":  "2025-05-22T18:26:04Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "XML serialization of xs:list elements doesn\u0027t respect white-space separation",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117842",
        "createdAt":  "2025-07-18T23:10:12Z",
        "number":  117842,
        "author":  "mconnew",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-18T18:00:54Z",
        "body":  "### Description\n\nThis is an mtom scenario. When writing with an `XmlMtomWriter`, if you call `WriteValue(object value)` and the object you pass implements `IStreamProvider`, then it stores the `IStreamProvider` instance and writes out a place holder in the xml. When you call `WriteEndElement` on the final element, it uses `IStreamProvider.GetStream()` to get the payload for a multi-part mime part.  \n\nWhen serializing using `XmlSerializer`, calling `Serialize` and passing in an `XmlMtomWriter`, if a class in the object graph implements `IXmlSerializable`, it calls `IXmlSerializable.WriteXml` passing the `XmlMtomWriter`. This enables a class to pass an `IStreamProvider` to `WriteValue(object value)` and the correct mtom output to be generated.  \n\nWhen serializing with `DataContractSerializer` and having implemented `IXmlSerializable` in a type in the object graph, the `XmlWriter` passed to `IXmlSerializable.WriteXml` is not the same `XmlWriter` as was passed to `DataContractSerializer.WriteObject`. It\u0027s wrapped in a [XmlSerializableWriter](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/XmlSerializableWriter.cs) instance. This class passes through most of the calls to the inner `XmlWriter`, which is the `XmlMtomWriter` that was passed to `WriteObject`, but not with the method `WriteValue(object value)`. This method falls through to the base `XmlWriter` class which attempts to convert the object to a `String` via a convertor, and then would pass that string to `WriteString` (if it didn\u0027t currently thrown an exception) which then passes the string through to the inner writer. By not overriding `WriteValue(object value)`, serialization using `IStreamProvider` is not possible with `DataContractSerializer`.\n\n### Reproduction Steps\n\nSerialize the following object using the xml writer from `XmlDictionaryWriter.CreateTextWriter`. All the XmlDictionaryWriter implementations support writing `IStreamProvider` via `WriteValue(object value)`.\n```c#\npublic class ByteArrayWrapper : IStreamProvider, IXmlSerializable\n{\n    public byte[] Data { get; set; } = Array.Empty\u003cbyte\u003e();\n    public Stream GetStream()\n    {\n        return new FixedMemoryStream(Data);\n    }\n\n    public void ReleaseStream(Stream stream)\n    {\n        stream.Dispose();\n    }\n\n    public XmlSchema? GetSchema() =\u003e null;\n\n    public void ReadXml(XmlReader reader)\n    {\n        reader.ReadStartElement();\n        var buffer = new byte[8192]; // 8KB buffer size\n        using (var ms = new MemoryStream())\n        {\n            int bytesRead;\n            while ((bytesRead = reader.ReadContentAsBase64(buffer, 0, buffer.Length)) \u003e 0)\n            {\n                ms.Write(buffer, 0, bytesRead);\n            }\n            Data = ms.ToArray();\n        }\n        reader.ReadEndElement();\n    }\n\n    public void WriteXml(XmlWriter writer)\n    {\n        writer.WriteValue(this);\n    }\n\n    // Implicit conversion from ByteArrayWrapper to byte[]\n    public static implicit operator byte[](ByteArrayWrapper wrapper)\n    {\n        return wrapper?.Data ?? Array.Empty\u003cbyte\u003e();\n    }\n\n    // Implicit conversion from byte[] to ByteArrayWrapper\n    public static implicit operator ByteArrayWrapper(byte[] data)\n    {\n        return new ByteArrayWrapper { Data = data ?? Array.Empty\u003cbyte\u003e() };\n    }\n}\n\npublic class FixedMemoryStream : MemoryStream\n{\n    public FixedMemoryStream(byte[] buffer) : base(buffer) { }\n    public FixedMemoryStream(byte[] buffer, int index, int count) : base(buffer, index, count) { }\n    public FixedMemoryStream(int capacity) : base(capacity) { }\n    public FixedMemoryStream() : base() { }\n}\n```\n\n### Expected behavior\n\nThe `XmlDictionaryWriter` passed to `DataContractSerializer.WriteObject` has `WriteValue(object value)` called and doesn\u0027t throw an exception (unless the type happens to be convertable to a string).\n\n### Actual behavior\n\nThe serializer throws:\n```\nUnhandled exception. System.InvalidCastException: Xml type \u0027List of xdt:untypedAtomic\u0027 does not support a conversion from Clr type \u0027ByteArrayWrapper\u0027 to Clr type \u0027String\u0027.\n```\n\n### Regression?\n\nI don\u0027t believe this is a regression.\n\n### Known Workarounds\n\nUse `XmlSerializer` instead. This could be a big deal for WCF if you have a large contract.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThe use of `FixedMemoryStream` is to work around #117789 which breaks this scenario using a regular `MemoryStream` with WCF. It\u0027s probably replaceable with `MemoryStream` outside of WCF if you aren\u0027t using `BufferedStream`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "DataContractSerializer serializing an IXmlSerializable doesn\u0027t support XmlWriter.WriteValue(object)",
        "labels":  [
                       "area-Serialization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118358",
        "createdAt":  "2025-08-04T19:39:07Z",
        "number":  118358,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T19:40:22Z",
        "body":  "The `ActiveIssue` attribute says so, and my experience shows this is true. Whether this is by design or not, I think the `ActiveIssue` attribute should have an actual issue for tracking. If it is decided that this is by design, then the test should be removed.\n\nhttps://github.com/dotnet/runtime/blob/53aa2bc97c6015fa52ec8fafb917709529588072/src/libraries/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs#L4043-L4048\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu-FWCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc674VYL",
                                           "createdAt":  "2025-08-04T19:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issue:\n- https://github.com/dotnet/runtime/issues/17363",
                                           "updatedAt":  "2025-08-04T19:39:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DataContractSerializerTest.DCS_KnownSerializableTypes_CultureInfo - CultureInfo is not serializable",
        "labels":  [
                       "area-Serialization",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118688",
        "createdAt":  "2025-08-13T17:20:03Z",
        "number":  118688,
        "author":  "StephenMolloy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T17:20:03Z",
        "body":  "Our Xml-based serializers have tests excluded for several reasons (like AOT) in the src/libraries/tests.proj file. As the serializers evolve and gain the ability to run in more non-standard environments, their exclusions in tests.proj should be updated.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Serializer test exclusions",
        "labels":  [
                       "area-Serialization",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119486",
        "createdAt":  "2025-09-09T09:11:52Z",
        "number":  119486,
        "author":  "imcarolwang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T11:56:40Z",
        "body":  "### Description\n\nDeserializing nullable tuples (e.g., (double,string)?) in WCF triggers a DataContractCacheOverflow exception. The root cause is in DataContract.GetIdForInitialization ([runtime source](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.DataContractSerialization/src/System/Runtime/Serialization/DataContract.cs#L395)), where the fallback loop incorrectly references id instead of the loop variable i, so existing contracts are never properly scanned.\n\n### Reproduction Steps\n\nSee the detailed repro in the WCF issue: [dotnet/wcf#5833](https://github.com/dotnet/wcf/issues/5833).\n\n### Expected behavior\n\nThe existing contract for the nullable tuple type is found in the cache, deserialization succeeds without throwing DataContractCacheOverflow, and the WCF client receives non-null tuple operation result.\n\n### Actual behavior\n\nDataContractCacheOverflow is thrown.\n\n### Regression?\n\nYes, works on .NET Framework, the issue appears in .NET.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "DataContractCacheOverflow in GetIdForInitialization for nullable tuples",
        "labels":  [
                       "area-Serialization",
                       "untriaged"
                   ]
    }
]
