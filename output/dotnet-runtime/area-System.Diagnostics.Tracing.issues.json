[
    {
        "url":  "https://github.com/dotnet/runtime/issues/23285",
        "createdAt":  "2017-08-21T22:43:50Z",
        "number":  23285,
        "author":  "brianrob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAqNS2w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2019-06-09T21:56:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-03-04T22:19:32Z",
        "body":  "As @NickCraver points out in dotnet/runtime#20992, we need documentation that describes how DiagnosticSource is supposed to work from event production to consumption.  Further, this documentation should describe from a user\u0027s perspective what is required and expected.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPyfNGA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMzg3NDA3Ng==",
                                           "createdAt":  "2017-08-21T22:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "If this is for docs.dot.net the issue should be in https://github.com/dotnet/docs I think",
                                           "updatedAt":  "2017-08-21T22:59:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMzg3NDI1MQ==",
                                           "createdAt":  "2017-08-21T23:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "It\u0027s not yet clear where this documentation should live, but should we determine it to be docs.dot.net, I can move it.",
                                           "updatedAt":  "2017-08-21T23:00:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyOTYyOTIxOA==",
                                           "createdAt":  "2017-09-14T22:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "@brianrob can you move this issue to the docs repo? None of our framework documentation lives in this repo",
                                           "updatedAt":  "2017-09-14T22:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_J80Y",
                                           "createdAt":  "2022-03-04T22:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "DiagnosticListener needs documentation as well. See [dotnet diagnostics 515](https://github.com/dotnet/diagnostics/issues/515)",
                                           "updatedAt":  "2022-03-04T22:19:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DiagnosticSource Needs Documentation",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25035",
        "createdAt":  "2018-02-13T22:53:30Z",
        "number":  25035,
        "author":  "brianrob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-24T14:12:52Z",
        "body":  "Both of these tests fail because the event names are incorrect.  They both use TraceLogging but have statically defined events as well which results in them having a manifest produced as well (because they are not strictly marked as SelfDescribing EventSources).  TraceEvent loads the manifests correctly but does not load the templates for the TraceLogging events.\r\n\r\nTemplate loading appears to be specific to TraceLog but swapping in TraceLog results in a bunch of other failures.  This should be investigated so that these tests can be re-activated.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOImvxHQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzQ5OTQyMQ==",
                                           "createdAt":  "2020-01-23T04:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I think this issue was closed accidentally, having the same issue number as one in coreclr.  There are still three tests ActiveIssue\u0027d against this.",
                                           "updatedAt":  "2020-01-23T04:32:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Fix ETW EventCounter Tests and Manifest_Write_T Tests",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "disabled-test",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26463",
        "createdAt":  "2018-06-12T20:06:56Z",
        "number":  26463,
        "author":  "SergeyKanzhelev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T22:21:51Z",
        "body":  "## Motivation\r\n[W3C spec for distributed tracing context](https://github.com/w3c/distributed-tracing) defines a new concept of `tracestate`. In order to implement W3C specification this concept should be implemented in `Activity` class.\r\n\r\n`Tracestate` collection should allow to make multiple types of modifications:\r\n    - remove name/value pair.\r\n    - add or modify name/value pair that will be applied to every child Activity.\r\n    - add or modify name/value pair for a certain scope. For instance - just before making an outgoing call to dependent service. This modification should only be applied to this scope, not to the parent activities.\r\n\r\nCC: @seth-capistron, @vancem, @jacpull, @lmolkova, @glennc, @davidfowl\r\n\r\n## Proposed API\r\n\r\n``` csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public class Activity\r\n    {\r\n        ...\r\n        // \u003csummary\u003e\r\n        //  List of key/value pairs representing the tracestate field of distributed tracing context.\r\n        //  https://github.com/w3c/distributed-tracing/blob/master/trace_context/HTTP_HEADER_FORMAT.md#tracestate-field\r\n        //  TraceState is a list of named opaque values. Both key and value has a set of limitation imposed by W3C specification.\r\n        //      key:  \r\n        //          Identifiers are short (up to 256 characters) textual identifiers. Note that identifiers \r\n        //          MUST begin with a lowercase letter, and can only contain lowercase letters a-z, digits 0-9, \r\n        //          underscores _, dashes -, asterisks *, and forward slashes /.\r\n        //      value: \r\n        //          Opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the range 0x20 to 0x7E) \r\n        //          except comma , and =. Note that this also excludes tabs, newlines, carriage returns, etc.\r\n        //  There is also a limit on overall length of the TraceState collection. For complete specification refer to W3C document.\r\n        //\r\n        //  Setting of key/value pair with incorrect key or value will result in ArgumentException.\r\n        // \u003c/summary\u003e\r\n        public SortedDictionary\u003cKeyValuePair\u003cstring, string\u003e\u003e TraceState { get; }\r\n        ...\r\n    }\r\n}\r\n```\r\n## Notes\r\n\r\n- Proposed API will throw `ArgumentException` for incorrectly formatted values. This may be unexpected as collection is defined as string/string collection. However throwing exception is better alternative to defining custom class.\r\n- Mutation of entries requires shift of values in the list. Most recently accessed key/value pairs should be moved to the begginning of the list. This should be noted by implementors. This may also cause confusion as `.Add` method will add value to the beggining of the list, not to the end as one may expect.\r\n- W3C spec is in draft form and may change. This implementation may be an input for the change of W3C spec.\r\n\r\n## Usage\r\n\r\n**Read tracestate key\u0027s value**\r\n\r\nThis example shows how the value of `sampling-score` which is double can be read from `TraceState`.\r\n\r\n``` csharp\r\nvar samplingScoreStr = Activity.Current.TraceState[\"sampling-score\"];\r\nvar samplingScore = string.IsNullOrEmpty(samplingScoreStr) ? 1 : Convert.ToDouble(samplingScoreStr);\r\nif (samplingScore \u003e sampling)\r\n{\r\n    // Do not track telemetry.\r\n}\r\n```\r\n\r\nChange of tracestate should be reflected in every child activity of this activity. Supported mutations of trace state:\r\n\r\n**Update key value**\r\n\r\n``` csharp\r\nActivity.Currnet.TraceState[\"sampling-score\"] = (0.23).ToString();\r\n```\r\n\r\n**Add new key-value pair**\r\n\r\nAny other values with the same name should be removed from the list.\r\n\r\n``` csharp\r\nActivity.Currnet.TraceState[\"sampling-score\"] = (0.23).ToString();\r\n```\r\n\r\n**Delete the key-value pair**\r\n\r\n``` csharp\r\nActivity.Currnet.TraceState.Remove(\"sampling-score\");\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGfUZaw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzE3NTEyMg==",
                                           "createdAt":  "2018-06-14T05:26:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergeyKanzhelev",
                                           "body":  "Some additional thoughts on proposed API after discussion with @adriancole:\r\n- most common operation is expected to be take `0` element. This is because in many distributed apps single instrumentation library is used across the app\r\n- number of elements will always be small. So perhaps `IList` or `IEnumerable` may suffice instead of random access dictionary that will take more space and memory\r\n- also  with list other elements can be lazily parsed on demand\r\n- however any lazy parsing will require either pluggable implementation or bake in a few serialization formats into Activity class itself\r\n\r\nI will update Usage section to indicate common vs. uncommon scenarios. Please comment if you have feedback",
                                           "updatedAt":  "2018-06-14T05:26:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzE3NTMwMw==",
                                           "createdAt":  "2018-06-14T05:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergeyKanzhelev",
                                           "body":  "Comment from @lmolkova before - APIs of Activity do not throw generally. Altermative is to swallow exception or clean up data (e.g. lowercase the `key`). @karelz any guidance here?",
                                           "updatedAt":  "2018-06-14T05:27:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzM2ODk2NA==",
                                           "createdAt":  "2018-06-14T17:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "I let area experts - @vancem @brianrob to chime in. IMO we should be resilient to invalid data. Ignoring them or cleaning them up sounds reasonable.",
                                           "updatedAt":  "2018-06-14T17:07:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzQyNzgxNQ==",
                                           "createdAt":  "2018-06-14T20:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "I would like to separate the \u0027HTTP-like stuff\u0027 from the Activity class.   Its job is to be a container that propagates things in a way useful for causality tracining.   Stuff associated with HTTP conventions for encoding and parsing stuff does not really belong here.    Also the W3C rules for propagating this value don\u0027t belong in activity.  \r\n\r\nMy knee-jerk reaction is that \u0027tracestate\u0027 should be just a piece of baggage (That is the whole string that encodes all the pieces just gets put into the \u0027traceState\u0027).  To do this well I think it is useful to have a UTF8String version of the baggage APIs (so you don\u0027t have to convert your UTF8 to strings which is nice), and I am also open to a \u0027Remove\u0027 API for baggage if we need it.  \r\n\r\nEffectively \u0027traceState\u0027 just becomes one more piece of baggage, which you already have to enumerate tu support  \u0027correlation-context\u0027.   Thus you just need to watch for \u0027traceState\u0027 as you process that and encode/process it specially when you see it.  \r\n\r\nI do think having UTF8String (bascially Span\u003cbyte\u003e) versions of the Baggage APIs makes sense so as to avoid lots of allocation / parsing.\r\n\r\n",
                                           "updatedAt":  "2018-06-14T20:28:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzQ0NzgyNA==",
                                           "createdAt":  "2018-06-14T21:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergeyKanzhelev",
                                           "body":  "@vancem `tracestate` is not a collection of tags associated with distributed trace. It is a current position in a distributed graph of a specific vendor. It may be updated on every request to indicate the \"last seen `span-id`\" that belong to the current vendor. There is an explanation in section 2.1 of https://w3c.github.io/distributed-tracing/report-trace-context.html\r\n\r\nAlso the concept is not http specific. Unless your comment was about lazy parsing. Than I agree that base Activity class may not be the best place for it.\r\n\r\nThat\u0027s said the idea to put it in Correlation Context will require some extra parsing and memory allocations. Especially if one will need to update the value in `tracestate` for every outgoing call. Which is the case for any hierarchical state implementation.\r\n\r\nDoes it make sense with this semantics of `tracestate` explanation to create a dedicated collection? Or you feel strongly about placing it into Correlation Context collection?\r\n",
                                           "updatedAt":  "2018-06-14T21:43:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzQ1NDEwOQ==",
                                           "createdAt":  "2018-06-14T22:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "@SergeyKanzhelev.   Yes I know that tracestate is a list of IDs that represent transition points.    But it is also just a string that needs to be propagated through user-code so that when other operations (e.g. HTTP sends) happen, knowledgeable code can update the state and send it out.   \r\n\r\nIn that sense FROM ACTIVITY\u0027s point of view, tracestate is just a piece of baggage (something it remembers so that other things can use it.    The only thing that Activity has to do is remember it (and propagate it to all its children). \r\n\r\nYes, something needs to update tracestate.  I am just saying that we have the choice of what that is, and arguably all that logic ideally would be together.    Thus I am arguing that logic that hooks request can also do the update and update the \u0027tracestate\u0027 key of the baggage to be the new string that will be written to output requests.   Activity\u0027s job is simply to remember it.   \r\n\r\nNote that Activity\u0027s baggage is actually NOT a dictionary, and in fact, my suggestion is we make it so that you pass in Span\u003cbyte\u003e for the key and values as UTF8 blobs, and Activity pretty much simply saves a big blob of concatenated blobs.   \r\n\r\nAlso note that hopefully tracestate is in fact empty most of the time and tends not to be modified (this is the single vendor case).    It seems like other pieces of the correlation context might be at least as likely to be updates as this piece (is there is not a strong perf reason to treat it specially, we need to make fiddling with the correlation context reasonably efficient)\r\n\r\nI am not trying to be difficult, but I do think the devil is in the details, and we are talking about very hot code paths (anything that is per-request or faster needs careful consideration).    This means we want to be super lazy about parsing (especially if common scenario may be pass through, or a simple morph that could be done without exploding the data into some data structure (like a SortedDictionary).  \r\n\r\nI am OK with having a string or UTF8String blob tracestate property on Activity (in general I am OK with \u0027well known\u0027 pieces of baggage, since it encourages type safety, discoverability.    Do you want to do that?   \r\n\r\nI think the more interesting/probelmatic issue is what we do about IDs.  \r\n",
                                           "updatedAt":  "2018-06-14T22:11:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzY2ODYyMw==",
                                           "createdAt":  "2018-06-15T16:08:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergeyKanzhelev",
                                           "body":  "@vancem I\u0027ll need to think about it and prototype a little to understand the most common patterns. Two concerns I have immediately are:\r\n1. With unparsed tracestate is that it moves knowledge of format from technology that recieved that field in one form or another (http vs. grpc vs. amqp...) to consumer of that information that ideally should be protocol-neutral. We need to understand whether tracestate is compresseable at all or will have the same format in every protocol.\r\n2. We discussed that there potentially will be no truly generic tracers. And every tracer may just copy current `traceparent` to `tracestate` under it\u0027s name. So `tracestate` is never empty. However talking to people implementing platforms (for instance azure services) I see a strong desire to avoid doing it. Mostly because they don\u0027t know which vendor will consume traces in the end of the day. Actual behavior here will contribute into what\u0027s typical pattern and what\u0027s not.\r\n\r\nI like the idea to keep tracestate in correlation context for now as a workaround. @lmolkova it may be a good idea to work you are doing in Azure Functions. At least for the short term.\r\n\r\n\u003eI am not trying to be difficult\r\n\r\nI\u0027m not trying to be pushy and see where you are coming from =)",
                                           "updatedAt":  "2018-06-15T16:08:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3Mzg5NQ==",
                                           "createdAt":  "2018-06-16T00:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codefromthecrypt",
                                           "body":  "\u003e\n\u003e\n\u003e\n\u003e    1. We discussed that there potentially will be no truly generic\n\u003e    tracers. And every tracer may just copy current traceparent to\n\u003e    tracestate under it\u0027s name. So tracestate is never empty. However\n\u003e    talking to people implementing platforms (for instance azure services) I\n\u003e    see a strong desire to avoid doing it. Mostly because they don\u0027t know which\n\u003e    vendor will consume traces in the end of the day. Actual behavior here will\n\u003e    contribute into what\u0027s typical pattern and what\u0027s not.\n\u003e\n\u003e Agree about currently no generic ones, but there could be. More\nimportantly the lifecycle in-process is different than out of process. If\nyou originate a trace in-process it could be that you don\u0027t want to\nserialize your state eagerly (in case you never push anything downstream).\nSo you could have a special case in a library where you see no state, but\nyou do see parent (for correlation purposes). This depends on if the api is\nexposing the serialized state. Agree that if it is deserialized authority\nof in-process state, then you always have state here.\n",
                                           "updatedAt":  "2018-06-16T00:45:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTExMzQ5NQ==",
                                           "createdAt":  "2018-06-21T14:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cwe1ss",
                                           "body":  "I\u0027m with @vancem on this one. We have to be super careful with what gets added to `Activity`. `Activity`\u0027s main purpose is code \"instrumentation\" and that code shouldn\u0027t have to know about tracer-specific stuff like propagation headers etc. \r\n\r\nIf baggage is not sufficient for this, we must make sure that this has a general reason of existence - independent of any specification. The W3C spec is not yet finalized and even if it will be, it\u0027s \"just one spec\". It might win, it might not... There might be a new spec (or a new version of this spec) in 5 years. \r\n\r\nThere already are the proprietary `Request-Id` and `Correlation-Context` headers which have been hard-coded into the system. This mistake should not happen again. If the .NET framework decides to implement a specification, it should give people a choice to choose whichever specification they want. ",
                                           "updatedAt":  "2018-06-21T14:00:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDE0NzEwOA==",
                                           "createdAt":  "2018-06-26T01:28:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codefromthecrypt",
                                           "body":  "Baggage has been a liability in practice due to its lack of definition (like ttl), bloat, likelihood of leaking secrets, or abstraction breaking (ex [encouraging business code to use tracing apis to do business functionality](https://github.com/opentracing/opentracing.io/blob/master/_docs/pages/instrumentation/common-use-cases.md#in-process-request-context-propagation)). It is problems with OT baggage (including entry control, [privacy](https://github.com/w3c/distributed-tracing/issues/55) etc) which led to some of the delays in correlation context, ex how to make sure these problems aren\u0027t re-introduced under a new name. Many have mentioned baggage was a bit half-baked, if we are talking about OT baggage as opposed to the [original](https://groups.google.com/forum/#!topic/distributed-tracing/m2ztbNAPsjY).\r\n\r\nTLDR I would steer very clear from having request scoping behavior being in any way tainted with OT behavior which in practice is propagate anything forever downstream via headers.",
                                           "updatedAt":  "2018-06-26T01:34:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDIwMjAwNQ==",
                                           "createdAt":  "2018-06-26T07:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cwe1ss",
                                           "body":  ".NET\u0027s `Activity` type is roughly based on OT\u0027s `Span` but it definitely isn\u0027t an OT implementation. \r\n\r\nI had another look at the W3C spec document. Seems like what we currently have with `Baggage` more closely relates to W3C\u0027s `Correlation-Context`, right?\r\n\r\nBut I\u0027m now confused by @SergeyKanzhelev example in this issue where he used `sampling-rate` as a key. Shouldn\u0027t that also be a `Correlation-Context` value? The W3C spec seems to only talk about vendor-specific span ids in its definition of the `tracestate` header.",
                                           "updatedAt":  "2018-06-26T07:04:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNTQ5MzIyNw==",
                                           "createdAt":  "2018-11-02T20:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "I know I\u0027m coming late to this game, but I have some questions, some specifically about how this would relate to WCF. The W3C spec only talks about how this pertains to HTTP, but in the discussion there\u0027s talk about grpc and amqp. WCF also has it\u0027s own protocols so anything that is done has to be transport agnostic.  \r\nThe W3C spec also quickly breaks down and fails hard when WCF is used. The tracestate can be up to 512 bytes long, and each state item can be up to 513 bytes (256 bytes for key, = character, 256 bytes for the value). Ignoring that off by 1 bug in the spec, you are only guaranteed to be able to have a single item in the tracestate. The whole purpose of the spec is to allow correlation across different tracing technologies. WCF has it\u0027s own end to end correlation tracing which if turned on means you have two different logging systems on at the same time (DiagnosticsSource based and WCF\u0027d own tracing). This means you must propagate two tracing states or you will break one of the tracing correlation mechanisms. You aren\u0027t guaranteed to be able to do that.  \r\nBut if this is the correlation standard is the one we are going to hitch our horse to, then there should be an API to manage the data. Otherwise WCF will need to write the parsing code and truncation logic to add our state to the data. But it shouldn\u0027t be part of the Activity class, it should be a separate implementation which can handle mutating the state correctly and exposing data strongly typed and have the ability to easily and cheaply import/export the values in a way that it can be added to the baggage as an opaque value. ApplicationInsights can have extra handling to pull the value out of the baggage and put it as it\u0027s own http header if needed. Frameworks such as WCF can add it as a SOAP header which carries the baggage transparently so the data flows and if this is the industry winner, add smarter handling later to add our own state.",
                                           "updatedAt":  "2018-11-02T20:04:32Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Support for tracestate collection in Activity of DiagnosticSource",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "tracking",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26466",
        "createdAt":  "2018-06-12T20:33:37Z",
        "number":  26466,
        "author":  "SergeyKanzhelev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-27T20:34:24Z",
        "body":  "## Motivation\r\n\r\nActivity should support an easy-to-use trace restart API. It was mentioned before that the use of unfiltered incoming headers https://github.com/aspnet/Hosting/issues/1385 may be dangerous or confusing. Allowing to restart the traces mitigate risks.\r\n\r\nIt will be nice to allow to return the new trace-id in response headers.\r\n\r\nCC: @seth-capistron, @vancem, @jacpull, @lmolkova, @glennc, @davidfowl\r\n\r\n## Proposed API\r\n\r\n``` csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public class Activity\r\n    {\r\n        ...\r\n        // \u003csummary\u003e\r\n        // Re-generates trace identifiers and clear up all correlation collections. Used for security and privacy reasons in front-end services.\r\n        // \u003c/summary\u003e\r\n        public Activity Restart();\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nvar oldActivity = Activity.Current.Restart();\r\n\r\n## Notes\r\n\r\n- All existing child activity should start using the new trace identifier. Returned `Activity` may be a copy of one being restarted.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF8nZ2Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTEwNDQ3Mw==",
                                           "createdAt":  "2018-06-21T13:31:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cwe1ss",
                                           "body":  "Who would call this under which circumstances?\r\n\r\nThe problem with https://github.com/aspnet/Hosting/issues/1385 is that propagation logic has been put into the responsibility of instrumentation code. This is is wrong and needs a different fix IMO. Activity clearly lacks [OpenTracing\u0027s Inject/Extract concept](http://opentracing.io/documentation/pages/api/cross-process-tracing.html) which would move this responsibility to the tracers. They could then use whichever header-names / validation logic they want.",
                                           "updatedAt":  "2018-06-21T13:31:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trace restart API for DiagnsoticSource activity",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "tracking",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26467",
        "createdAt":  "2018-06-12T20:51:15Z",
        "number":  26467,
        "author":  "SergeyKanzhelev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-27T20:33:53Z",
        "body":  "## Motivation\r\n\r\nIn distributed tracing scenarios it is not uncommon to return extra context as a response headers when possible. DiagnosticsSource Acitvity should implement API that will allow to set the response context that was read from http response from dependant service or to be propagated to the client who made the call originally.\r\n\r\n`ResonseRootId` and `ResponseId` can be let caller know the identity of initiated or [re-started](https://github.com/dotnet/corefx/issues/30334) activity. `ResponseTraceState` can be used to return additional context to the caller.\r\n\r\nCC: @seth-capistron, @vancem, @jacpull, @lmolkova, @glennc, @davidfowl\r\n\r\n## Proposed API\r\n\r\n``` csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public class Activity\r\n    {\r\n        ...\r\n        // Response Trace State\r\n        public SortedDictionary\u003cKeyValuePair\u003cstring, string\u003e\u003e ResponseTraceState { get; }\r\n\r\n        // \r\n        public string ResponseRootId { get; }\r\n        //\r\n        public string ResponseId { get; }\r\n\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n``` csharp\r\nvar oldActivity = Activity.Current.Restart();\r\n\r\n// now instruct .NET to return those values in the http response:\r\nActivity.Current.ResponseRootId = Activity.Current.ResponseRootId;\r\nActivity.Current.ResponseId = Activity.Current.Id;\r\n\r\n// add current component identity as a resonse trace state\r\nActivity.Current.ResponseTraceState.Add({\"app-id\", \"a6a64497-6123-460f-8589-5c15850b9484\"});\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF8nnBA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTEwNzg0NA==",
                                           "createdAt":  "2018-06-21T13:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cwe1ss",
                                           "body":  "Who would write these values onto the actual transport objects (like ASP.NET Core\u0027s `HttpResponse`) and who would ensure that transport-specific rules are handled properly (e.g. invalid characters in tracestate keys, ...)? \r\n\r\nRequiring every library developer to do this manually will not work IMO. This would make instrumenting code even more complex - ASP.NET Core\u0027s diagnostics file already has more than 200 lines of code.\r\n\r\nIMO, there would have to be one central hook for this (similar to OpenTracing\u0027s Inject/Extract concepts) where the *tracer* would have to do this in a controlled way. ",
                                           "updatedAt":  "2018-06-21T13:42:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Define response context for DiagnosticsSource Activity",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "tracking",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26488",
        "createdAt":  "2018-06-13T20:46:00Z",
        "number":  26488,
        "author":  "seth-capistron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-28T16:07:37Z",
        "body":  "## Motivation\r\nActivity and HttpClient currently support correlation tracking and propagation using the Request-Id header. There is a need for services to support other forms of correlation, namely Correlation Vector and the MS-CV header. The motivation is to allow developers to use the same semantics and mechanism that already exists with Activity, while being able to optionally enable additional forms of correlation in a single place in code. The idea is that developers would register the new correlation type with the Activity class, and then register a new correlation propagation type with HttpClient. The rest of their code would remain the same and the additional Correlation Vector would just work without other code changes.\r\n\r\n## Proposed API (Activity)\r\n```cs\r\nnamespace System.Diagnostics\r\n{\r\n    /// \u003csummary\u003e\r\n    /// User-defined correlation types will inherit from this abstract class in order to\r\n    /// hook in to the existing Activity lifecycle.\r\n    /// \u003c/summary\u003e\r\n    public abstract class ActivityExtension\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Constructor will be called when a new Activity is created. There will be a \r\n        /// one to one mapping of Activity to an instance of a given Activity Extension\r\n        /// type.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"activity\"\u003eThe Activity that created this extension.\u003c/param\u003e\r\n        public ActivityExtension(Activity activity)\r\n        {\r\n            Activity = activity;\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// A reference to the Activity that created this extension.\r\n        /// \u003c/summary\u003e\r\n        public Activity Activity { get; private set; }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Called after the linked Activity is started.\r\n        /// \u003c/summary\u003e\r\n        public abstract void ActivityStarted();\r\n\r\n        /// \u003csummary\u003e\r\n        /// Called after the linked Activity is stopped.\r\n        /// \u003c/summary\u003e\r\n        public abstract void ActivityStopped();\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\nnamespace System.Diagnostics\r\n{\r\n    public class Activity\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Developers only need call this method once for the lifetime of their application.\r\n        /// When a new Activity is created, they will automatically get a linked instance of\r\n        /// an ActivityExtension type.\r\n        /// \u003c/summary\u003e\r\n        /// \u003ctypeparam name=\"T\"\u003eType that handles the custom correlation mechanism.\u003c/typeparam\u003e\r\n        public static void RegisterActivityExtension\u003cT\u003e() where T : ActivityExtension { }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Returns the linked ActivityExtension of the given type, or null if an Activity\r\n        /// Extension of that type was not registered at time of Activity creation.\r\n        /// \u003c/summary\u003e\r\n        public T GetActivityExtension\u003cT\u003e() where T : ActivityExtension { ... }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Gets all the linked ActivityExtensions for this Activity.\r\n        /// \u003c/summary\u003e\r\n        public IEnumerable\u003cActivityExtension\u003e ActivityExtensions { get; }\r\n    }\r\n}\r\n```\r\n\r\n## Proposed API (HttpClient)\r\n\r\n```cs\r\nnamespace System.Diagnostics\r\n{\r\n    public class HttpClientHandler\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Developers only need to call this method once for the lifetime of their application.\r\n        /// The registered delegate will get called prior to the HttpRequestMessage being sent.\r\n        /// \u003c/summary\u003e\r\n        public static void RegisterCorrelationPropagationDelegate(\r\n\t\t    Action\u003cHttpRequestMessage\u003e propagationDelegate)\r\n        { ... }\r\n\r\n        /// \u003csummary\u003e\r\n        /// On a one-off basis, developers can override any propagation delegates that are\r\n\t/// registered. This delegate can be a no-op, or it can propagate the correlation\r\n        /// differently than the registered static delegate.\r\n        /// \u003c/summary\u003e\r\n        public Action\u003cHttpRequestMessage\u003e CorrelationPropagationOverride { get; set; }\r\n    }\r\n}\r\n```\r\n## Usage\r\n\r\n```cs\r\nActivity.RegisterActivityExtension\u003cCorrelationVectorExtension\u003e();\r\n\r\nHttpClientHandler.RegisterCorrelationPropagationDelegate(\r\n    (HttpRequestMessage requestMessage) =\u003e\r\n    {\r\n        Activity currentActivity = Activity.Current;\r\n        CorrelationVectorExtension currentExtension =\r\n            currentActivity?.GetActivityExtension\u003cCorrelationVectorExtension\u003e();\r\n\r\n        if (currentExtension != null)\r\n        {\r\n            requestMessage.Headers.Add(\"MS-CV\", currentExtension.CorrelationVector.Increment());\r\n        }\r\n    });\r\n```\r\n\r\nCC: @SergeyKanzhelev, @vancem, @jacpull, @lmolkova, @glennc, @davidfowl, @AaronRM",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF8ad0g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzM4MTY4MA==",
                                           "createdAt":  "2018-06-14T17:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAX9Mzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidsh",
                                                                               "createdAt":  "2018-06-14T18:25:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SergeyKanzhelev",
                                                                               "createdAt":  "2018-06-14T21:50:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "I don\u0027t understand the purpose of the `CorrelationPropagationOverride `.\r\nWouldn\u0027t it be easier to wrap the `HttpClient` with `CorrelationHttpClient` which exposes this kind of logic? The scenario seems rather advanced to justify new APIs on HttpClient IMO.",
                                           "updatedAt":  "2018-06-14T22:43:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzQ0OTMwMQ==",
                                           "createdAt":  "2018-06-14T21:49:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SergeyKanzhelev",
                                           "body":  "@seth-capistron would it be easier to subscribe on `System.Net.Http.Request` event of `HttpClient` and inject additional headers there. The way it\u0027s done [today in Application Insights](https://github.com/Microsoft/ApplicationInsights-dotnet-server/blob/6c4415f1e2e4255ed9d785586d6b6184cb1dbe94/Src/DependencyCollector/Shared/HttpCoreDiagnosticSourceListener.cs#L372-L393)",
                                           "updatedAt":  "2018-06-14T21:49:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODg5MjQ5OA==",
                                           "createdAt":  "2018-06-20T20:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seth-capistron",
                                           "body":  "@SergeyKanzhelev, sorry for the delay. I was spending some time getting more familiar with the Application Insights approach and how we could do something similar. Using Diagnostics Source events would work for us for being able to inject correlation info on outbound traffic and consume it on incoming. A few things I’ve noticed though and am interested to get your thoughts on…\r\n\r\n1. First is just around sparse documentation (for all versions) and quirky corner cases (for .NET Fx). @lmolkova has been very helpful identifying these, but I think we would benefit from better documentation around this (or let me know if I’ve missed it). I understand we’re stuck with the weirdness for .NET Fx, but documentation would be nice to have for all versions. Especially since these events aren’t strongly-typed.\r\n2. By leveraging Diagnostic Source for our own correlation mechanism, service owners will automatically start propagating the Request-Id header. I wouldn’t expect this to matter for most services, but shouldn’t we allow developers to opt out of Request-Id while still using their own correlation mechanism? Is this ability to turn off Request-Id covered in planned work elsewhere?\r\n3. If we want to leverage the existing semantics of Activity (causation, parent-child relationship, etc), but track our own correlation identifier… how do you envision that being accomplished? Originally I was thinking of the extension model shown above, where ‘ActivityExtension’ instances automatically get attached to new Activities. Should we instead plan on hooking into new Start and Stop DiagnosticSource events that are described here - https://github.com/dotnet/corefx/issues/30337 ?\r\n",
                                           "updatedAt":  "2018-06-20T20:51:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support for user defined correlation tracking",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "tracking",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28225",
        "createdAt":  "2018-12-18T00:53:02Z",
        "number":  28225,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvkjQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "metablaster",
                                            "createdAt":  "2020-12-15T19:16:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jessiewestlake",
                                            "createdAt":  "2023-04-18T22:56:01Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-06-12T15:00:59Z",
        "body":  "\r\nFrom user feedback at \r\nhttps://developercommunity.visualstudio.com/content/problem/385483/eventrecordformatdescriptionienumberable.html\r\n\r\nI verified this same issue exists in the code being ported to .NET Core here https://github.com/dotnet/corefx/pull/33662\r\n\r\n===========start report\r\nTLDR: The EventRecord.FormatDescription(IEnumerable\u003cobject\u003e values) in the System.Diagnostics.Eventing namespace is not properly inserting the provided values, and is instead returning as if empty strings were supplied.\r\n\r\nAll testing has been performed on Windows 10, build 17134.345, with .NET Framework 4.7.2.  The project I\u0027m using for testing/reproduction has been tested targeting .NET 4.0, .NET 4.5, .NET 4.5.2, .NET 4.6.2, and .NET 4.7.1, and all display the issue.  \r\n\r\nWhen calling EventRecord.FormatDescription() with no parameters, the event returns properly formatted, with an example shown below: \r\n\r\n\"Application \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\ONENOTEM.EXE\u0027 (pid 14832) cannot be restarted - Application SID does not match Conductor SID..\"\r\n\r\nHowever, there is an overload available, EventRecord.FormatDescription(IEnumerable\u003cobject\u003e values), the function returns a string that essentially appears as if all the supplied values were empty.  Here\u0027s an example of the same event above called with the overload using all of the same property values (meaning the output should be identical):\r\n\r\n\"Application \u0027\u0027 (pid 0) cannot be restarted - .\"\r\n\r\nI\u0027ve tried both passing the event properties collection in directly, as well as preparing the parameters as a List\u003cobject\u003e that is then cast to an IEnumerable\u003cobject\u003e prior to passing it in in hopes of removing any odd conversion issues.\r\n\r\nI\u0027ve stepped through the reference source, and the .NET framework isn\u0027t really doing any heavy lifting here, it\u0027s basically just a passthrough layer to the underlying WinEvt API, ultimately calling the function described here - https://docs.microsoft.com/en-us/windows/desktop/api/winevt/nf-winevt-evtformatmessage\r\n\r\n This leads me to believe one of two things is the case:\r\n\r\nOption 1: The .NET Framework is misusing the WinEvt API, perhaps failing to supply a proper value for one of the inputs or flags, and thus getting an odd result.  I\u0027m really hoping this is the answer, as I think it would be the easiest to resolve.\r\n\r\nOption 2: The underlying WinEvt API is not working as expected even with a proper call.  I have no idea how to even begin debugging (or even reporting) an error at this layer, but I\u0027m assuming the MS folks have the tools and connections to follow up on this.  \r\n\r\nThis seems to potentially have been reported as far back as 2007 (https://qa.social.msdn.microsoft.com/Forums/vstudio/en-US/7e0f9fd5-c421-4e13-ac02-211e51189305/how-to-use-eventrecordformatdescriptionienumerableobject?forum=netfxbcl), and I\u0027m also seeing a recent StackOverflow issue that seems to be the same (https://stackoverflow.com/questions/53328834/cannot-get-eventrecord-formatdescriptionienumerableobject-to-work)\r\n\r\nI\u0027ve posted basic reproduction code to a GitHub repo, available here: https://github.com/OperatorOverload/WinEventErrorRepro\r\n\r\n```c#\r\n            EventLogQuery eventsQuery = new EventLogQuery(\"Application\",\r\n                PathType.LogName, queryString);\r\n            EventLogReader = new EventLogReader(\"*[System/Level=3]\");\r\n\r\n            for (EventRecord eventInstance = logReader.ReadEvent();\r\n                    eventInstance != null; eventInstance = logReader.ReadEvent())\r\n            {\r\n                List\u003cobject\u003e varRepSet = new List\u003cobject\u003e();\r\n                for (int i = 0; i \u003c eventInstance.Properties.Count; i++)\r\n                {\r\n                    varRepSet.Add((object)(eventInstance.Properties[i].Value.ToString()));\r\n                }\r\n\r\n                    //WORKS\r\n                    string description1 = eventInstance.FormatDescription();\r\n\r\n                    //BROKEN: format description with the built-in properties array\r\n                    string description2 = eventInstance.FormatDescription(eventInstance.Properties);\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXp-n4g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0ODA1NTUzNQ==",
                                           "createdAt":  "2018-12-18T00:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I had a look. In the working case - FormatDescription() - the library is calling EvtFormatMessage with null for the replacement values:\r\n`EvtFormatMessage(pmHandle, eventHandle, 0, 0, null, UnsafeNativeMethods.EvtFormatMessageFlags.EvtFormatMessageEvent, bufferNeeded, sb, out bufferNeeded);`\r\nwhich gives a string like eg `Application \u0027C:\\Windows\\CCM\\SCNotification.exe\u0027 (pid 11884) cannot be restarted - Application SID does not match Conductor SID..`\r\n\r\nNow in the failing case, it fills eventInstance.Properties using \r\n`EvtRender(contextHandle, eventHandle, flag, bufferNeeded, buffer, out bufferNeeded, out propCount);`\r\ncreating a collection like eg\r\n```\r\n-\t\tvalues\t{string[9]}\tstring[]\r\n\t\t[0]\t\"0\"\tstring\r\n\t\t[1]\t\"11884\"\tstring\r\n\t\t[2]\t\"C:\\\\Windows\\\\CCM\\\\SCNotification.exe\"\tstring\r\n\t\t[3]\t\"SCNotification\"\tstring\r\n\t\t[4]\t\"0\"\tstring\r\n\t\t[5]\t\"0\"\tstring\r\n\t\t[6]\t\"1\"\tstring\r\n\t\t[7]\t\"67108865\"\tstring\r\n\t\t[8]\t\"1\"\tstring\r\n```\r\n(not clear whether that has all the values expected) and then passes them to EvtFormatMessage eg\r\n\r\n`EvtFormatMessage(handle, eventHandle, 0xffffffff, values.Length, stringVariants, UnsafeNativeMethods.EvtFormatMessageFlags.EvtFormatMessageEvent, bufferNeeded, sb, out bufferNeeded);`\r\n\r\nwhich gives a string like `Application \u0027\u0027 (pid 0) cannot be restarted - .`\r\n\r\nI tried replacing the 0xfffffff with 0, per MSDN, but that did not help.\r\n\r\nI did find one bug, which made it impossible to work, but after fixing that, it seems there is some other issue remaining. The fix for the bug mentioned was below -- it was doing `ToString()` on `EventProperty`\u0027s and that was getting the type name rather than the value.\r\n```\r\n--- a/src/System.Diagnostics.EventLog/src/System/Diagnostics/Reader/EventLogRecord.cs\r\n+++ b/src/System.Diagnostics.EventLog/src/System/Diagnostics/Reader/EventLogRecord.cs\r\n@@ -292,7 +292,14 @@ namespace System.Diagnostics.Eventing.Reader\r\n             {\r\n                 if (theValues.Length == i)\r\n                     Array.Resize(ref theValues, i + 1);\r\n-                theValues[i] = o.ToString();\r\n+                if (o is EventProperty elp)\r\n+                {\r\n+                    theValues[i] = elp.Value.ToString();\r\n+                }\r\n+                else\r\n+                {\r\n+                    theValues[i] = o.ToString();\r\n+                }\r\n                 i++;\r\n             }\r\n```\r\nWe should apply that fix to our ported code. I do not know the fix for the scenario as a whole though.",
                                           "updatedAt":  "2018-12-18T00:54:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0ODA3NTUxOA==",
                                           "createdAt":  "2018-12-18T02:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OperatorOverload",
                                           "body":  "Thanks for the confirmation @danmosemsft.  Your post here aligns with my experience, and at this point I\u0027m fairly confident that the error is in the underlying WinEvent API.  I tried to hunt down a location to file a bug report for that and ultimately couldn\u0027t find one, hence opening an issue on the .NET Developer Community in hopes of reaching someone who could connect with the appropriate folks at MS to get this looked at.  In my case, I\u0027m using the parameter-less overload now, but I have some use cases where being able to resolve or otherwise map some of the values prior to the event resolution would be a big performance improvement and time savings on the back end.  \r\n\r\nIf you happen to know any pathways for reporting bugs in the WinAPIs, I\u0027d appreciate a pointer in the right direction.",
                                           "updatedAt":  "2018-12-18T02:37:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0ODM0MTczMA==",
                                           "createdAt":  "2018-12-18T19:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@OperatorOverload if you are able to boil it down to a repro that runs directly against the native API (either in C# or C++) I can try to find the API owner. I probably won\u0027t have time to spend on this issue myself for some time.",
                                           "updatedAt":  "2018-12-18T19:32:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0ODM4NTIwMw==",
                                           "createdAt":  "2018-12-18T21:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OperatorOverload",
                                           "body":  "I can probably do that, my C++ is a bit rusty so I may go at it in C#, but I\u0027ll try to get something up here in the next couple days.",
                                           "updatedAt":  "2018-12-18T21:55:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjUwMjUxOQ==",
                                           "createdAt":  "2019-02-22T18:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "@OperatorOverload do you have a repro that runs directly against the native Api ?",
                                           "updatedAt":  "2019-02-22T18:42:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjY2MzYyMg==",
                                           "createdAt":  "2019-02-23T15:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OperatorOverload",
                                           "body":  "@Anipik I started working on it, but I\u0027m pretty rusty on native, and the API here seemed to require a lot of prep that I haven\u0027t been able to find good documentation on, so I haven\u0027t made a ton of progress.  I may be able to revisit in the next week.",
                                           "updatedAt":  "2019-02-23T15:49:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NjE0MzcwMQ==",
                                           "createdAt":  "2019-03-25T10:49:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Qjames",
                                           "body":  "Are there any updates for this issue?",
                                           "updatedAt":  "2019-03-25T10:49:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NjE1MTkwNQ==",
                                           "createdAt":  "2019-03-25T11:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "/cc @maryamariyan you linked this issue from PR is this solved?Never mind missed `but doesn\u0027t address the whole bug.`",
                                           "updatedAt":  "2019-03-25T11:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44oYt3",
                                           "createdAt":  "2021-10-23T07:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Robo210",
                                           "body":  "The Win32 API is failing in this case because the string variants being passed in have a count of 0, whereas the API is expecting the count to contain the string length.\r\n\r\nThe documentation is not super clear about this, but this assumption that the count contains the string length is all over the code in wevtapi.dll.",
                                           "updatedAt":  "2021-10-23T07:37:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ohWp",
                                           "createdAt":  "2021-10-23T12:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks @Robo210 (how did you find this issue...)\n\nWhat do you think of offering a PR against the docs to record this? IIRC you work on this area.",
                                           "updatedAt":  "2021-10-23T12:37:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ovkM",
                                           "createdAt":  "2021-10-23T19:55:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Robo210",
                                           "body":  "Yes, I work in this area, so I was able to set a few breakpoints inside wevtapi.dl and step through the code to see what was happening.\r\n\r\nI can work on getting the docs updated.",
                                           "updatedAt":  "2021-10-23T19:55:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44o707",
                                           "createdAt":  "2021-10-24T03:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OperatorOverload",
                                           "body":  "Awesome to see some activity on this... @Robo210, apologies, but I\u0027m not as familiar with the wevtapi internals, any pointers on how this could be fixed to be functional on the .Net side?",
                                           "updatedAt":  "2021-10-24T03:49:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44o-xe",
                                           "createdAt":  "2021-10-24T06:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6Ikrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jessiewestlake",
                                                                               "createdAt":  "2023-04-18T22:56:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Robo210",
                                           "body":  "I imagine it should be as simple as adjusting [this code](https://github.com/dotnet/runtime/blob/3e94696ad6ee352119ccebcca70305efd7e3b31f/src/libraries/System.Diagnostics.EventLog/src/System/Diagnostics/Reader/NativeWrapper.cs#L1031) (and any other place that creates a new variant of type String or AnsiString) to set the count:\r\n\r\n```C#\r\n        public static string EvtFormatMessageFormatDescription(EventLogHandle handle, EventLogHandle eventHandle, string[] values)\r\n        {\r\n            int bufferNeeded;\r\n\r\n            UnsafeNativeMethods.EvtStringVariant[] stringVariants = new UnsafeNativeMethods.EvtStringVariant[values.Length];\r\n            for (int i = 0; i \u003c values.Length; i++)\r\n            {\r\n                stringVariants[i].Type = (uint)UnsafeNativeMethods.EvtVariantType.EvtVarTypeString;\r\n                stringVariants[i].StringVal = values[i];\r\n\r\n                ////////////// Add this and I think maybe it might possibly work //////////////\r\n                stringVariants[i].Count = values[i].length();\r\n            }\r\n```\r\n\r\nThe Count needs to be whatever wcslen(values[i]) would return in C - no embedded nulls, string is nul-terminated but the nul-terminator is not included in the size. The string still needs to be marshalled as a C-string, not a counted string; the count is just there for fun it seems.\r\n\r\nUnfortunately, while the code strongly expects the count to be set for strings that are passed in, it is not (currently) diligent about setting the count for strings that it returns from the various APIs (e.g. EvtGetEventInfo). It\u0027s a bit hypocritical, I know, but without a time machine all I can do it fix it for the next release and hope it doesn\u0027t break app-compat somehow. Everything you get from EvtRender(..., EvtRenderEventValues, ...), however, should be suitable for passing back to EvtFormatMessage as long as it isn\u0027t mangled by the marshalling process.\r\n\r\nIn general, the Count field needs to be set for:\r\n```C\r\ntypedef struct _EVT_VARIANT {\r\n  union {\r\n    BOOL       BooleanVal;\r\n    INT8       SByteVal;\r\n    INT16      Int16Val;\r\n    INT32      Int32Val;\r\n    INT64      Int64Val;\r\n    UINT8      ByteVal;\r\n    UINT16     UInt16Val;\r\n    UINT32     UInt32Val;\r\n    UINT64     UInt64Val;\r\n    float      SingleVal;\r\n    double     DoubleVal;\r\n    ULONGLONG  FileTimeVal;\r\n    SYSTEMTIME *SysTimeVal;\r\n    GUID       *GuidVal;\r\n    LPCWSTR    StringVal;        // set count to wcslen(StringVal)\r\n    LPCSTR     AnsiStringVal;    // set count to strlen(AnsiStringVal)\r\n    PBYTE      BinaryVal;        // set count to number of bytes\r\n    PSID       SidVal;           // set count to GetLengthSid(SidVal)\r\n    size_t     SizeTVal;\r\n\r\n    // Set count to the number of items in an array\r\n    // There\u0027s basically no reason to use any of these as an \"in\" parameter.\r\n\r\n    BOOL       *BooleanArr;\r\n    INT8       *SByteArr;\r\n    INT16      *Int16Arr;\r\n    INT32      *Int32Arr;\r\n    INT64      *Int64Arr;\r\n    UINT8      *ByteArr;\r\n    UINT16     *UInt16Arr;\r\n    UINT32     *UInt32Arr;\r\n    UINT64     *UInt64Arr;\r\n    float      *SingleArr;\r\n    double     *DoubleArr;\r\n    FILETIME   *FileTimeArr;\r\n    SYSTEMTIME *SysTimeArr;\r\n    GUID       *GuidArr;\r\n    LPWSTR     *StringArr;      // multi-sz\r\n    LPSTR      *AnsiStringArr;  // multi-sz\r\n    PSID       *SidArr;         // \"multi-sid\"\r\n    size_t     *SizeTArr;\r\n    EVT_HANDLE EvtHandleVal;\r\n    LPCWSTR    XmlVal;\r\n    LPCWSTR    *XmlValArr;\r\n  };\r\n  DWORD Count;\r\n  DWORD Type;\r\n} EVT_VARIANT, *PEVT_VARIANT;\r\n```",
                                           "updatedAt":  "2021-10-24T06:09:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44o-19",
                                           "createdAt":  "2021-10-24T06:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@OperatorOverload any interest in having a go at that fix?",
                                           "updatedAt":  "2021-10-24T06:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44p4qn",
                                           "createdAt":  "2021-10-25T03:59:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC83YRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anipik",
                                                                               "createdAt":  "2021-10-25T16:38:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jessiewestlake",
                                                                               "createdAt":  "2023-04-18T22:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mjanulaitis",
                                                                               "createdAt":  "2023-05-31T20:08:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "OperatorOverload",
                                           "body":  "@danmoseley Sure, will review the latest contributing info and give it a go.",
                                           "updatedAt":  "2021-10-25T03:59:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5doaD1",
                                           "createdAt":  "2023-05-31T20:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjanulaitis",
                                           "body":  "Any update?",
                                           "updatedAt":  "2023-05-31T20:08:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dobsP",
                                           "createdAt":  "2023-05-31T20:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Are you interested in offering a fix @mjanulaitis ?",
                                           "updatedAt":  "2023-05-31T20:12:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5doiTS",
                                           "createdAt":  "2023-05-31T20:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjanulaitis",
                                           "body":  "@danmoseley I was checking up to see if this bug had been resolved.",
                                           "updatedAt":  "2023-05-31T20:31:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5duXKk",
                                           "createdAt":  "2023-06-01T17:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It seems not\r\nhttps://github.com/dotnet/runtime/blame/3747edb1812106f0b88a42b724c3e44b69dc79c4/src/libraries/System.Diagnostics.EventLog/src/System/Diagnostics/Reader/NativeWrapper.cs#L1062",
                                           "updatedAt":  "2023-06-01T17:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5enBwT",
                                           "createdAt":  "2023-06-12T12:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjanulaitis",
                                           "body":  "Both calls throw \"Safe handle has been closed.\r\nObject name: \u0027SafeHandle\u0027.\" :(\r\n\r\n```\r\ntry\r\n{\r\n    SetMessage(e.FormatDescription(e.Properties));\r\n}\r\ncatch (Exception)\r\n{\r\n    try\r\n    {\r\n        SetMessage(e.FormatDescription());\r\n    }\r\n    catch (Exception)\r\n    {\r\n}\r\n```\r\n\r\n               ",
                                           "updatedAt":  "2023-06-12T12:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5enCKX",
                                           "createdAt":  "2023-06-12T12:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjanulaitis",
                                           "body":  "@danmoseley, Do you know of another way to read these messages?",
                                           "updatedAt":  "2023-06-12T12:57:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5enk88",
                                           "createdAt":  "2023-06-12T14:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjanulaitis",
                                           "body":  "@danmoseley  EventRecord.FormatDescription() with no parameters does not work either.  The only solution I can find is to add the logs to the full log name as a key to the Event Log Service in the registry and use the WMI API.",
                                           "updatedAt":  "2023-06-12T14:15:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5en6fi",
                                           "createdAt":  "2023-06-12T15:00:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Unfortunately we have no expertise here.",
                                           "updatedAt":  "2023-06-12T15:00:58Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "FormatDescription() on an EventRecord does not work if properties are passed in explicitly",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28290",
        "createdAt":  "2018-12-30T11:21:09Z",
        "number":  28290,
        "author":  "benaadams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCe9qJQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NickCraver",
                                            "createdAt":  "2018-12-30T12:24:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2018-12-30T12:45:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2019-01-01T15:12:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2022-05-27T08:54:52Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-06-21T21:25:39Z",
        "body":  "Make the `internal` [EventSource .ctors](https://github.com/dotnet/coreclr/blob/3b5782fa0aa4086ee72904b6052f21cba693bcf7/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/EventSource.cs#L1340-L1351) that take Guid and name `protected` \r\n```csharp\r\nclass EventSource\r\n{\r\n    protected EventSource(Guid eventSourceGuid, string eventSourceName);\r\n    protected EventSource(Guid eventSourceGuid, string eventSourceName, EventSourceSettings settings, string[] traits = null);\r\n}\r\n```\r\nThe non Guid .ctors cause a lot of reflection to look up the Guid and name from the applied attribute and for first use a lot of Jit compilation of the reflection methods:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/50546648-15c2fe00-0c23-11e9-84ed-f7a8bd700a28.png)\r\n\r\nWhich if it is in the startup path directly impacts startup times.\r\n\r\nFor coreclr they can use the internal .ctors https://github.com/dotnet/coreclr/pull/21714, https://github.com/dotnet/coreclr/pull/16054, https://github.com/dotnet/coreclr/pull/16060\r\n\r\nHowever there are still many corefx, aspnet and other app model `EventSource`s that get triggered on startup and cannot use these .ctor overloads (e.g. `Microsoft-Diagnostics-DiagnosticSource`, `Microsoft-System-Net-Sockets`, `Microsoft-System-Net-NameResolution`, `Microsoft-AspNetCore-Hosting`, `Microsoft-Extensions-DependencyInjection`) and directly impact startup time:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/50546728-90d8e400-0c24-11e9-9d1e-a36d96dc68e0.png)\r\n\r\n\r\n/cc @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHGtJ3w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDU3MDk1Nw==",
                                           "createdAt":  "2018-12-30T16:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @vancem @noahfalk ",
                                           "updatedAt":  "2018-12-30T16:19:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDU3MTExNA==",
                                           "createdAt":  "2018-12-30T16:21:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Related discussion: https://github.com/dotnet/coreclr/pull/16054#issuecomment-361299759",
                                           "updatedAt":  "2018-12-30T16:21:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDU3MjYxMQ==",
                                           "createdAt":  "2018-12-30T16:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "re the discussion; `protected` makes it a little less visible than `public` and it isn\u0027t providing anything more problematic than what is already exposed via the ability to set the Guid via the `EventSourceAttribute`; other than that going via the slower reflection path.",
                                           "updatedAt":  "2018-12-30T16:45:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTAxNTU5OA==",
                                           "createdAt":  "2019-01-02T23:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "The fundamental problem with this change is that it promotes something (forcing people to use GUIDS in EventSources), that we really don\u0027t want people to do (GUIDS are really supposed to be hidden and uninteresting).   \r\n\r\nNow if there was a important reason, then maybe we do this bad thing, but we should do some due-dillegence first (lets see if we can fix the perf without doing violance to the code base).  \r\n\r\nFundamentally, the GUID is DERIVED from the STRING name given to it (or part of the attribute), via a GenerateGuidFromName, method.   Thus dropping the GUID parameter should only cost you that method (all the other reflection should be avoidable).     From your traces this is a small amount, and looks like it could be made smaller with some tweeks to that method.     This seems like a better approach.  \r\n\r\nFinally, we should be very careful with startup TIMES, as often it is the case that the FIRST time for APIs is significantly larger than all others.    Thus you spend time fixing one place only to have it pop up somewhere else.   Moreover, many of these methods are generic (use of Guids, use of Culture, use of Reflection), where it is unlikely that non-trivial programs don\u0027t also touch them (and thus incur the FIRST time penalty).    \r\n\r\nThus I would like to insure we have first pursued all the options that avoid new ugly APIs.    I would first review the profiles to see if ALL eventsource construction take similar time (they should, unless there are startup effects), and get a handle on the non-one-time costs.    Minimize those first (which may be optimizing GenerateGuidFromName).   After that determine if the one-time costs are likely to be hit anyway and it was simply EventSource that was \u0027first\u0027 (I am suspicious about this with respect to the reflection costs).    We can then look at what our options are about eliminating those costs (since like I said the only REAL work that should be done is GenerateGuidFromName).  \r\n\r\n\r\n",
                                           "updatedAt":  "2019-01-02T23:19:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTAxOTUzMw==",
                                           "createdAt":  "2019-01-02T23:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "The workload to consider start-up time most for optimizing would be likely be Azure Functions/AWS Lambda as first response cold start is paid close attention to here, also Azure Web Apps *without* \"Always On\" switched on as then you pay the startup cost continuously (assuming low traffic site).\r\n\r\nIts less significant in other areas; though new workloads like Desktop startup it may be more significant, but I imagine there is lower hanging fruit in for those. ",
                                           "updatedAt":  "2019-01-02T23:42:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTAyMjY3OA==",
                                           "createdAt":  "2019-01-03T00:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "To be clear, I am not doubting that there are important startup scenarios, or even that EventSource startup is important to optimize and that changes woudl be good.    Only that we should look first for solutions that don\u0027t force users to trade off simplicity for performance, and that we believe that we are not just \u0027pushing\u0027 the cost somewhere else.  ",
                                           "updatedAt":  "2019-01-03T00:00:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MjkxMTA1Mg==",
                                           "createdAt":  "2019-01-09T23:39:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e  and get a handle on the non-one-time costs. Minimize those first \r\n\r\nHad a go https://github.com/dotnet/coreclr/pull/21832, https://github.com/dotnet/coreclr/pull/21720, https://github.com/dotnet/coreclr/pull/21729, https://github.com/dotnet/coreclr/pull/21765 also added the Guid to RuntimeEventSource https://github.com/dotnet/coreclr/pull/21714 and cleaned up some of the startup costs from EventPipe https://github.com/dotnet/coreclr/pull/21718 and Environment https://github.com/dotnet/coreclr/pull/21715\r\n\r\nWaiting for the AspNetCore repo to pick up a runtime from this year to see if any of it makes a meaningful impact to startup-time/time to first response time (from cold):\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/50936440-98d82580-1467-11e9-9420-af0b4addc82d.png)\r\n",
                                           "updatedAt":  "2019-01-09T23:46:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzE1NDg2Mg==",
                                           "createdAt":  "2019-01-10T16:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "This is good stuff @benaadams  thanks for pursuing this",
                                           "updatedAt":  "2019-01-10T16:16:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTkyNDMxNg==",
                                           "createdAt":  "2019-03-24T03:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Waiting for the AspNetCore repo to pick up a runtime from this year to see if any of it makes a meaningful impact to startup-time/time to first response time (from cold)\r\n\r\nAnything interesting here, @benaadams?",
                                           "updatedAt":  "2019-03-24T03:13:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NjMwMTI5MQ==",
                                           "createdAt":  "2019-03-25T17:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Seems to be going the otherway\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/54940762-4a450e00-4f23-11e9-9c98-e721a257825e.png)\r\n\r\nUnfortunately the flow of the runtime into aspnet is a bit slow, so is hard to bisect what changes the increases relate to as its a very large range.",
                                           "updatedAt":  "2019-03-25T17:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Njc5MzMxMQ==",
                                           "createdAt":  "2019-03-26T18:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Looks like there are other issues for the increased startup https://github.com/aspnet/AspNetCore/issues/8836",
                                           "updatedAt":  "2019-03-26T18:42:41Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Add EventSource guid ctors for non-reflection creation",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29064",
        "createdAt":  "2019-03-26T00:21:05Z",
        "number":  29064,
        "author":  "lmolkova",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAxj5ow==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "skst",
                                            "createdAt":  "2019-09-28T04:30:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-09-30T23:53:13Z",
        "body":  "**Repro app**: [ConsoleApp1.zip](https://github.com/dotnet/corefx/files/3005969/ConsoleApp1.zip)\r\n\r\n**Repro steps**: \r\n- create new console app with new csproj that targets netfx (e.g. net461).\r\n- install latest (nightly build) DiagnosticSource 4.6.0-preview4.19164.7\r\n- run `Console.WriteLine(System.Diagnostics.ActivityTraceId.CreateRandom().ToHexString());` in Main\r\n\r\n**Result**:\r\n```\r\nUnhandled Exception: System.TypeInitializationException: The type initializer for \u0027PerTypeValues`1\u0027 threw an exception. ---\u003e System.IO.FileLoadException: Could not load file or assembly \u0027System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027 or one of its dependencies. The located assembly\u0027s manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at System.SpanHelpers.PerTypeValues`1.MeasureArrayAdjustment()\r\n   at System.SpanHelpers.PerTypeValues`1..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.ActivityTraceId.CreateRandom()\r\n   at ConsoleApp1.Program.Main(String[] args)\r\nPress any key to continue . . .\r\n```\r\n\r\n\r\n**Workarounds and observations**:  installing System.Memory 4.5.2 explicitly  solves the issue (DiagnosticSource brings 4.5.0)\r\n\r\nInterestingly, there is no problem  with old csproj -  binding redirect forSystem.Runtime.CompilerServices.Unsafe v4.0.5.0 is added automatically everything works.\r\n\r\n```\r\n      \u003cdependentAssembly\u003e\r\n        \u003cassemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" /\u003e\r\n        \u003cbindingRedirect oldVersion=\"0.0.0.0-4.0.5.0\" newVersion=\"4.0.5.0\" /\u003e\r\n      \u003c/dependentAssembly\u003e\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHGWwfw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NjQyNjM2Nw==",
                                           "createdAt":  "2019-03-26T00:21:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lmolkova",
                                           "body":  "/cc @vancem ",
                                           "updatedAt":  "2019-03-26T00:21:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.TypeInitializationException: when using DiagnosticSource\u0027s Activity on netfx",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12338",
        "createdAt":  "2019-03-26T01:41:19Z",
        "number":  12338,
        "author":  "VincentBu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-09T13:49:21Z",
        "body":  "**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/26/\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests.ListenerWithFilter\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests.ListenerWithFilter [FAIL]\r\n      Assert.DoesNotContain() Failure\r\n      Found:    2304\r\n      In value: \u003cE2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\"\u003e\u003cSystem xmlns=\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\"\u003e\u003cEventID\u003e0\u003c/EventID\u003e\u003cType\u003e3\u003c/Type\u003e\u003cSubType Name=\"Error\"\u003e0\u003c/SubType\u003e\u003cLevel\u003e2\u003c/Level\u003e\u003cTimeCreated SystemTime=\"2019-03-25T05:10:28.3197363-07:00\" /\u003e\u003cSource Name=\"Trace\" /\u003e\u003cCorrelation ActivityID=\"{00000000-0000-0000-0000-000000000000}\" /\u003e\u003cExecution ProcessName=\"dotnet\" ProcessID=\"4924\" ThreadID=\"9\" /\u003e\u003cChannel/\u003e\u003cComputer\u003eARM64-AMD-023\u003c/Computer\u003e\u003c/System\u003e\u003cApplicationData\u003eGoodbye\u003c/ApplicationData\u003e\u003c/E2ETraceEvent\u003e\u003cE2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\"\u003e\u003cSystem xmlns=\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\"\u003e\u003cEventID\u003e1\u003c/EventID\u003e\u003cType\u003e3\u003c/Type\u003e\u003cSubType Name=\"Critical\"\u003e0\u003c/SubType\u003e\u003cLevel\u003e1\u003c/Level\u003e\u003cTimeCreated SystemTime=\"2019-03-25T05:10:28.3230435-07:00\" /\u003e\u003cSource Name=\"Trace\" /\u003e\u003cCorrelation ActivityID=\"{00000000-0000-0000-0000-000000000000}\" /\u003e\u003cExecution ProcessName=\"dotnet\" ProcessID=\"4924\" ThreadID=\"9\" /\u003e\u003cChannel/\u003e\u003cComputer\u003eARM64-AMD-023\u003c/Computer\u003e\u003c/System\u003e\u003cApplicationData\u003e\u003cTraceData\u003e\u003cDataItem\u003eshouldbehere\u003c/DataItem\u003e\u003c/TraceData\u003e\u003c/ApplicationData\u003e\u003c/E2ETraceEvent\u003e\u003cE2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\"\u003e\u003cSystem xmlns=\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\"\u003e\u003cEventID\u003e1\u003c/EventID\u003e\u003cType\u003e3\u003c/Type\u003e\u003cSubType Name=\"Critical\"\u003e0\u003c/SubType\u003e\u003cLevel\u003e1\u003c/Level\u003e\u003cTimeCreated SystemTime=\"2019-03-25T05:10:28.3230857-07:00\" /\u003e\u003cSource Name=\"Trace\" /\u003e\u003cCorrelation ActivityID=\"{00000000-0000-0000-0000-000000000000}\" /\u003e\u003cExecution ProcessName=\"dotnet\" ProcessID=\"4924\" ThreadID=\"9\" /\u003e\u003cChannel/\u003e\u003cComputer\u003eARM64-AMD-023\u003c/Computer\u003e\u003c/System\u003e\u003cApplicationData\u003e\u003cTraceData\u003e\u003cDataItem\u003eexistent\u003c/DataItem\u003e\u003cDataItem\u003e.net\u003c/DataItem\u003e\u003cDataItem\u003ecode\u003c/DataItem\u003e\u003c/TraceData\u003e\u003c/ApplicationData\u003e\u003c/E2ETraceEvent\u003e\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Diagnostics.TextWriterTraceListener\\tests\\XmlWriterTraceListenerTests.cs(142,0): at System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests.ListenerWithFilter()\r\n  Finished:    System.Diagnostics.TextWriterTraceListener.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.TextWriterTraceListener.Tests  Total: 110, Errors: 0, Failed: 1, Skipped: 0, Time: 4.328s\r\n----- end  5:10:30.71 ----- exit code 1 ----------------------------------------------------------\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHJYXMg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTU5ODM4Ng==",
                                           "createdAt":  "2019-04-03T18:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This test is failing often across Window, OSX and Linux (228 failures in last 90 days) and it does not seems arch specific. \r\n",
                                           "updatedAt":  "2019-04-03T18:06:45Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[arm64] Test failed: System.Diagnostics.TextWriterTraceListenerTests.XmlWriterTraceListenerTests.ListenerWithFilter",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Tracing",
                       "test-bug"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30690",
        "createdAt":  "2019-08-27T06:14:37Z",
        "number":  30690,
        "author":  "oocx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBa0hHw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matkoliptak",
                                            "createdAt":  "2020-06-02T08:36:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ndc",
                                            "createdAt":  "2020-11-20T11:44:25Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kirillkovalenko",
                                            "createdAt":  "2020-12-23T14:15:54Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2021-09-22T06:41:30Z",
        "body":  "I\u0027m confused by the three available sources of EventSource, and unsure which one is the correct one to use.\r\n\r\nThe Microsoft.Diagnostics.Tracing.EventSource package has not been updated since 2015. However, the Microsoft.Diagnostics.Tracing.EventSource.Redist package has newer versions and seems to be under active development. The description of the Redist package says \"Application developers that need this functionality should instead reference the Microsoft.Diagnostics.Tracing.EventSource\", however, that\u0027s the package that is not maintained any more. And then there is also the built in System.Diagnostics.Tracing.EventSource.\r\n\r\nI\u0027m using EventSource in a library that is used by several applications. Some of them are .NET Framework, others are .NET Core applications, so I\u0027d like to develop a .NET Standard class library. Which EventSource version is the correct one for my use case and why?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONxzE-g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTM3NTIyMw==",
                                           "createdAt":  "2019-08-27T16:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @tommcdon ",
                                           "updatedAt":  "2019-08-27T16:16:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTQwNjAxMQ==",
                                           "createdAt":  "2019-08-27T17:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@josalem @sywhang @noahfalk ",
                                           "updatedAt":  "2019-08-27T17:36:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTQ5NzA2NA==",
                                           "createdAt":  "2019-08-27T21:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXe-gg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oocx",
                                                                               "createdAt":  "2019-08-28T05:10:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2019-08-28T11:16:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matkoliptak",
                                                                               "createdAt":  "2020-06-02T08:36:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ndc",
                                                                               "createdAt":  "2020-11-20T11:43:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "josalem",
                                           "body":  "Unless you are targeting a version of .NET older than 4.5 or netstandard 1.1, you will want to use `System.Diagnostics.Tracing.EventSource`.  The `Redist` package is meant for adding EventSource in for older versions of the framework and is actually the same code base as the baked in version.  @brianrob is there a way we can make this more explicit in the package descriptions?",
                                           "updatedAt":  "2019-08-27T21:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTUwNTI5MA==",
                                           "createdAt":  "2019-08-27T22:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvZimw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2019-08-27T22:29:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oocx",
                                                                               "createdAt":  "2019-08-28T05:10:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "brianrob",
                                           "body":  "It would be reasonable to update the package description [here](https://github.com/dotnet/corefx/blob/master/pkg/descriptions.json#L36) with more details.",
                                           "updatedAt":  "2019-08-27T22:19:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTU4NjkxOA==",
                                           "createdAt":  "2019-08-28T05:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oocx",
                                           "body":  "Thanks for the quick response and clarification.",
                                           "updatedAt":  "2019-08-28T05:11:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjQxMjUzMQ==",
                                           "createdAt":  "2019-08-30T00:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "My pleasure!  I\u0027m going to leave this open as work item for updating the description of the packages.",
                                           "updatedAt":  "2019-08-30T00:51:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDMyOTcxNg==",
                                           "createdAt":  "2020-12-23T14:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kirillkovalenko",
                                           "body":  "There are more problems to the current state of things:\r\n\r\n1. [There is a bug in the old versions of EventSource](https://developercommunity.visualstudio.com/content/problem/263463/etw-events-lost-due-to-bug-in-eventsourcecreateman.html) that prevents using it when a class exceeds a certain number of methods. @vancem commented there with suggestions how to workaround the problem [but nothing really works for me](https://github.com/Microsoft/perfview/issues/718).\r\n2. Latest version of [EventRegister package](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventRegister) (1.1.28) could not be used with the current version (5.0) of the [Microsoft.Diagnostics.Tracing.EventSource](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource.Redist) because assembly public key has changed. \r\n3. It seems that the current version of Microsoft.Diagnostics.Tracing.EventSource does not allow sending events to event log because it no longer uses [EventWrite API](https://docs.microsoft.com/en-us/windows/win32/api/evntprov/nf-evntprov-eventwrite) and uses EventWriteTransfer instead. The documentation says [EventWriteTransfer is for end-to-end scenario](https://docs.microsoft.com/en-us/windows/win32/api/evntprov/nf-evntprov-eventwritetransfer). I guess this mean real-time performance tracing tools only such as xperf.\r\n\r\nIt would be nice to have an updated version of the Microsoft.Diagnostics.Tracing.EventSource.Redist package that works with the event log. This would allow using it with legacy projects as a drop-in replacement for buggy System* counterpart. \r\n\r\n@vancem Could you please comment?\r\n",
                                           "updatedAt":  "2020-12-23T14:41:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDEyODE3Mg==",
                                           "createdAt":  "2021-01-04T18:07:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "tagging dotnet/diagnostics#515",
                                           "updatedAt":  "2021-01-04T18:07:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDE0MjI5OQ==",
                                           "createdAt":  "2021-01-04T18:35:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@kirillkovalenko, have you tested that EventWriteTransfer cannot write to event logs? In the Windows Event Log XML schema, [Correlation (SystemPropertiesType) Element](https://docs.microsoft.com/en-us/windows/win32/wes/eventschema-correlation-systempropertiestype-element) allows both ActivityID and RelatedActivityID attributes, so I think it would be strange if those could not be logged with the API.",
                                           "updatedAt":  "2021-01-04T18:35:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDI3ODMyMw==",
                                           "createdAt":  "2021-01-04T23:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "heads up @vancem retired from Microsoft a while ago so we won\u0027t get any more updates from him. Ownership got split a bit:\r\n\r\n@brianrob owns EventRegister and services it from the perfview repo. I opened https://github.com/microsoft/perfview/issues/1339 to track getting that part addressed. \r\n\r\nThe other issue I think is already being tracked by https://github.com/dotnet/runtime/issues/27002. I have updated that issue to indicate some research is needed to understand why EventLog isn\u0027t supported. Was there anything in specific that lead you to the conclusion that EventWrite() will work with EventLog but EventWriteTransfer() won\u0027t? EventLog integration isn\u0027t something I know much about yet so I am trying to learn what might be needed here. Thanks!\r\n\r\n\u003e The documentation says EventWriteTransfer is for end-to-end scenario. I guess this mean real-time performance tracing tools only such as xperf.\r\n\r\nI believe it is refering to the ability of EventWriteTransfer to receive ActivityID and RelatedActivityID fields. These GUIDs allow ETW events to encode parent child relationships between events that are used to describe how work on one thread connects to work occuring on other threads. It is similar in principle to [distributed tracing](https://opentracing.io/docs/overview/what-is-tracing/) except it is only connecting work across threads of the same app rather than across machines in a distributed system.",
                                           "updatedAt":  "2021-01-04T23:12:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDUxMzIzMQ==",
                                           "createdAt":  "2021-01-05T09:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kirillkovalenko",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e @kirillkovalenko, have you tested that EventWriteTransfer cannot write to event logs? In the Windows Event Log XML schema, [Correlation (SystemPropertiesType) Element](https://docs.microsoft.com/en-us/windows/win32/wes/eventschema-correlation-systempropertiestype-element) allows both ActivityID and RelatedActivityID attributes, so I think it would be strange if those could not be logged with the API.\r\n\r\nYes I have. and I haven\u0027t been able to get both a minimal example and our real code working.",
                                           "updatedAt":  "2021-01-05T09:20:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDUyMDA4MA==",
                                           "createdAt":  "2021-01-05T09:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kirillkovalenko",
                                           "body":  "\u003e Was there anything in specific that lead you to the conclusion that EventWrite() will work with EventLog but EventWriteTransfer() won\u0027t?\r\n\r\nI compared and debug EventSource source code from net472 and core 5. I tracked down to native API calls and the difference was that in net472 it\u0027s EventWrite is being called and in core 5 it\u0027s EventWriteTransfer. I\u0027m not sure that\u0027s the ultimate reason. However documentation mentions that EventWriteTransfer is for \u0027end-to-end scenarion\u0027. My guess it\u0027s realtime performance tracking for tools such as xperf. ",
                                           "updatedAt":  "2021-01-05T09:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41rd6d",
                                           "createdAt":  "2021-08-17T19:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB2yZdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kirillkovalenko",
                                                                               "createdAt":  "2021-08-18T09:25:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e There is a bug in the old versions of EventSource that prevents using it when a class exceeds a certain number of methods. \r\n\r\n\u003chttps://github.com/dotnet/runtime/issues/6020\u003e suggests that it has been fixed in .NET Core. \u003chttps://github.com/dotnet/runtime/issues/13705\u003e is still a problem, though.\r\n\r\n\u003e Latest version of EventRegister package (1.1.28) could not be used with the current version (5.0) of the Microsoft.Diagnostics.Tracing.EventSource because assembly public key has changed.\r\n\r\nI don\u0027t think the public key can be changed back because it already shipped in 5.0 and there is not much time before 6.0. But perhaps it would be possible to publish a new version of EventRegister. There doesn\u0027t seem to be a separate issue tracking that.\r\n\r\n\u003e It seems that the current version of Microsoft.Diagnostics.Tracing.EventSource does not allow sending events to event log because it no longer uses EventWrite API and uses EventWriteTransfer instead.\r\n\r\nAFAIK, this was fixed as \u003chttps://github.com/dotnet/runtime/issues/27002\u003e and Microsoft.Diagnostics.Tracing.EventSource is now able to write to Windows Event Log. The problem was not caused by EventWriteTransfer but rather the keyword bits were wrong.",
                                           "updatedAt":  "2021-08-17T19:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41s6bh",
                                           "createdAt":  "2021-08-18T09:31:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kirillkovalenko",
                                           "body":  "Thank you for the update @KalleOlaviNiemitalo\r\n\r\nEventRegister remains a show stopper. Without it it\u0027s impossible to generate manifest.  \r\n\r\n\u003e But perhaps it would be possible to publish a new version of EventRegister. There doesn\u0027t seem to be a separate issue tracking that.\r\n\r\nAs far as I understand EventRegister has not been open-sourced yet. Not sure where should we go from here.  Should I create another ticket for it?\r\n",
                                           "updatedAt":  "2021-08-18T09:31:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41s99i",
                                           "createdAt":  "2021-08-18T09:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "IIRC, the main features of EventRegister are:\r\n\r\n- Loading the specified DLL. Perhaps there was some AppDomain trickery involved.\r\n- Calling [EventSource.GenerateManifest](https://docs.microsoft.com/dotnet/api/system.diagnostics.tracing.eventsource.generatemanifest) and saving the result to a file.\r\n- Compiling the manifest to resources. MC.exe from Windows SDK can do that but I don\u0027t think there is open-source code for this. The binary format of the resource might not be documented in public.\r\n- Linking the resources to a separate DLL.\r\n- Integrating with MSBuild.\r\n\r\nSo it would be difficult to anyone other than Microsoft to reimplement EventRegister. Especially if it must be possible for projects using EventRegister to be built on operating systems other than Windows.",
                                           "updatedAt":  "2021-08-18T09:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41tAbD",
                                           "createdAt":  "2021-08-18T10:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kirillkovalenko",
                                           "body":  "\u003e The binary format of the resource might not be documented in public.\r\n\r\n\u003e Especially if it must be possible for projects using EventRegister to be built on operating systems other than Windows.\r\n\r\nMost likely these are the reasons they haven\u0027t published it so far. BTW, I dotpeeked EventRegister and found out that it embeds SDK tools rather than using those potentially installed on the filesystem.  \r\n\r\nI guess I would not be too difficult to call  `EventSource.GenerateManifest` from MSBulid or PowerShell and then call mc.exe but it\u0027s definitely as not as straightforward as using EventRegister now.",
                                           "updatedAt":  "2021-08-18T10:09:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42o1HB",
                                           "createdAt":  "2021-09-10T06:49:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If someone wants to reverse engineer the binary format of the resource, [[MS-EVEN6]: EventLog Remoting Protocol Version 6.0](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-even6/18000371-ae6d-45f7-95f3-249cbe2be39b) may be useful; section 2.2.12 (BinXml) in particular, and perhaps also 3.1.1.14 and 3.1.4.26. Although there is no requirement that Windows use the same binary formats in the resource as in the documented protocol, it may have done so to save some effort.",
                                           "updatedAt":  "2021-09-10T06:49:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43HMT6",
                                           "createdAt":  "2021-09-22T06:41:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "MC.exe and RC.exe from Windows SDK are shipped in [Microsoft.Windows.SDK.BuildTools](https://www.nuget.org/packages/Microsoft.Windows.SDK.BuildTools/10.0.20348.19). A third-party reimplementation of EventRegister could take a dependency on that, instead of needing to reverse engineer the resource format or to acquire a separate license for redistributing the files. That would require building on Windows, though.",
                                           "updatedAt":  "2021-09-22T06:41:30Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Microsoft.Diagnostics.Tracing.EventSource vs. System.Diagnostics.Tracing.EventSource",
        "labels":  [
                       "documentation",
                       "question",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13705",
        "createdAt":  "2019-11-01T00:36:33Z",
        "number":  13705,
        "author":  "flaviocdc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-17T13:21:17Z",
        "body":  "While adding a new event to my Instrumentation project, I started getting the following error while building: \r\n\r\n\u003e Unexpected error: An event with stop suffix must have an event ID one larger than the corresponding event with a start\r\n\r\nAfter a lot of digging through my source code and EventSource\u0027s source code, I figured out that the problem was that `CreateManifestAndDescriptors` assumes that _Start_ methods will always show up before _Stop_ methods when calling `System.Type.GetMethods`, but that\u0027s not true (checkout the remarks section of [this page](https://docs.microsoft.com/en-us/dotnet/api/system.type.getmethods?view=netframework-4.8)).\r\n\r\nLet\u0027s take the following event pair:\r\n\r\n```csharp\r\n[EventSource(Name = \"MyProvider\")]\r\nclass MyProvider : EventSource {\r\n  \r\n  [Event(100, Message = \"Start\")]\r\n  public void OperationFooStart() { \r\n    WriteEvent(100);\r\n  }\r\n\r\n  [Event(101, Message = \"Stop\")]\r\n  public void OperationFooStop() { \r\n    WriteEvent(101);\r\n  }  \r\n}\r\n```\r\n\r\nIf, for some reason, `typeof(MyProvider).GetMethods()` returns the `OperationFooStop` method before `OperationFooStart`, manifest generation will fail with the message reported above.\r\n\r\nThe reason for this seems to be that, once [here](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Diagnostics/Tracing/EventSource.cs#L3317). This code assumes that `eventData[startEventId]` is already populated in the `EventData` array, but *it may not be depending on the order in which `GetMethods` returned the members of the class*.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZqra2Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODYyMjI5Mw==",
                                           "createdAt":  "2019-11-01T00:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "flaviocdc",
                                           "body":  "Adding @josalem to the thread since I\u0027ve discussed this with him offline.",
                                           "updatedAt":  "2019-11-01T00:37:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqtrZ",
                                           "createdAt":  "2023-09-17T13:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhfk930129",
                                           "body":  "The root cause seems to be: From the “Remark“ section in [the public doc for Type.GetMethods](https://learn.microsoft.com/en-us/dotnet/api/system.type.getmethods?view=net-7.0#system-type-getmethods): \"**In .NET 6 and earlier versions, the [GetMethods](https://learn.microsoft.com/en-us/dotnet/api/system.type.getmethods?view=net-7.0) method does not return methods in a particular order, such as alphabetical or declaration order**\".\r\n\r\nSo this still blocks us from adding new log events because we are still using .NET Framework 4.7.2...\r\n\r\nFrom EventSource project perspective, is there any plan to fix this by not depending on the order of GetMethods return values?",
                                           "updatedAt":  "2023-09-17T13:21:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "EventSource.CreateManifestAndDescriptors fails with \"Unexpected error: An event with stop suffix must have an event ID one larger than the corresponding event with a start\"",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/429",
        "createdAt":  "2019-12-02T09:51:57Z",
        "number":  429,
        "author":  "rzontar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-21T21:25:38Z",
        "body":  "The package `System.Diagnostics.DiagnosticSource` in version 4.6 has a dependency on `System.Memory` in the `net45` and `net46` builds. This was introduced by using `Span\u003c\u003e` and `ReadOnlySpan\u003c\u003e` in https://github.com/dotnet/corefx/pull/37395.\r\n\r\nSince the package is commonly used in profiling frameworks like:\r\n- [ApplicationInsights](https://www.nuget.org/packages/Microsoft.ApplicationInsights.Web/)\r\n- [MiniProfiler](https://www.nuget.org/packages/MiniProfiler.Shared/)\r\n- [EntityFrameworkProfiler](https://www.nuget.org/packages/EntityFrameworkProfiler.Appender/)\r\nit can introduce a quite complex dependency graph especially for Asp.Net applications. \r\n\r\nMy question is weather this is intended and we should accept the additional packages pulled in by `System.Memory` or could there be an alternative implementation on full framework? I also don\u0027t know if there is an performance benefit of the current implementation which would justify the dependency.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIWe8fw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MDQxODUzNQ==",
                                           "createdAt":  "2019-12-02T14:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e it can introduce a quite complex dependency graph especially for Asp.Net applications.\r\n\r\nCan you expand on that? what do you see happen?",
                                           "updatedAt":  "2019-12-02T14:26:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MDQ0NjU5MQ==",
                                           "createdAt":  "2019-12-02T15:31:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzontar",
                                           "body":  "Installing the current version of System.Diagnostics.DiagnosticSource produces the following entries in `packages.config`:\r\n```\r\n\u003cpackages\u003e\r\n  \u003cpackage id=\"System.Buffers\" version=\"4.4.0\" targetFramework=\"net471\" /\u003e\r\n  \u003cpackage id=\"System.Diagnostics.DiagnosticSource\" version=\"4.6.0\" targetFramework=\"net471\" /\u003e\r\n  \u003cpackage id=\"System.Memory\" version=\"4.5.3\" targetFramework=\"net471\" /\u003e\r\n  \u003cpackage id=\"System.Numerics.Vectors\" version=\"4.4.0\" targetFramework=\"net471\" /\u003e\r\n  \u003cpackage id=\"System.Runtime.CompilerServices.Unsafe\" version=\"4.5.2\" targetFramework=\"net471\" /\u003e\r\n\u003c/packages\u003e\r\n```\r\nThis are 4 additional packages which could all require binding redirects if used in different projects across an application. We currently have binding redirects for System.Diagnostics.DiagnosticSource in place, since the above mentioned packages depend on different versions.",
                                           "updatedAt":  "2019-12-02T15:31:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Diagnostics.DiagnosticSource dependency on System.Memory on Full Framework",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31927",
        "createdAt":  "2020-02-07T18:08:56Z",
        "number":  31927,
        "author":  "SteveHarveyUK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:31:36Z",
        "body":  "When using the System.Diagnostics.Tracing EventSource, EventListener and EventCounter classes, it would appear that the fired EventCounter events are not being filtered through the EventSource to the EventListener. \r\n\r\nAll of the custom EventListener instances I create seem to receive all EventCounter events regardless of which EventSource I use to EnableEvents on.\r\n\r\nNot entirely sure if this is as designed, or if I\u0027m doing something wrong, but I was expecting that EventListeners would only get events through the EventSource they were enabled against.\r\n\r\nI have a repo that contains an example project that reproduces this issue (Thanks to Expecho and his blog):\r\n[https://github.com/SteveHarveyUK/Blog.git](https://github.com/SteveHarveyUK/Blog.git)\r\n\r\nBe interested to see if this is a bug or by design.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn6pZJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzU2NDIyMQ==",
                                           "createdAt":  "2020-02-07T19:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@josalem @sywhang \r\ncc: @dotnet/dotnet-diag ",
                                           "updatedAt":  "2020-02-07T19:22:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDIzMDQ3Nw==",
                                           "createdAt":  "2020-02-10T17:12:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "I\u0027ll admit I haven\u0027t attempted to run your sample, but I have a good guess on what\u0027s going on.\r\n\r\nYou\u0027re conflating `EventSource` (where you synthesize Events/Metrics) with `EventListener` (used for consuming Events/Metrics). In addition to your synthesized metrics, the runtime also synthesizes metrics for things that happen in the runtime.\r\n\r\nI\u0027d recommend using this pattern in your `EventListener` and only enable the events you want to consume. See https://github.com/shirhatti/Metrics/blob/master/src/Microsoft.Extensions.Metrics/Listener.cs#L19-L63\r\n\r\n",
                                           "updatedAt":  "2020-02-10T17:12:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDI5NTk5MQ==",
                                           "createdAt":  "2020-02-10T19:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "@SteveHarveyUK thanks for reporting this! I\u0027ve seen this issue before and yup, this shouldn\u0027t be happening (i.e. it is a bug). ",
                                           "updatedAt":  "2020-02-10T19:00:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDM3NjIzNw==",
                                           "createdAt":  "2020-03-04T07:54:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Is this a duplicate of #31500?",
                                           "updatedAt":  "2020-03-04T07:54:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDM3Njk0Mw==",
                                           "createdAt":  "2020-03-04T07:56:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "@KalleOlaviNiemitalo Yes, it is.",
                                           "updatedAt":  "2020-03-04T07:56:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aNEzO",
                                           "createdAt":  "2023-04-18T15:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "YARP got bit by this one as well: https://github.com/microsoft/reverse-proxy/issues/2102\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eStandalone repro\u003c/summary\u003e\r\n\r\n```c#\r\nusing var _ = new HttpEventListener();\r\nusing var __ = new SocketsEventListener();\r\n\r\nusing var httpClient = new HttpClient();\r\nawait httpClient.GetStringAsync(\"http://httpbin.org/get\");\r\nawait Task.Delay(3000);\r\n\r\nsealed class HttpEventListener : EventListener\r\n{\r\n    protected override void OnEventSourceCreated(EventSource eventSource)\r\n    {\r\n        if (eventSource.Name == \"System.Net.Http\")\r\n        {\r\n            EnableEvents(eventSource, EventLevel.Informational, EventKeywords.None,\r\n                new Dictionary\u003cstring, string?\u003e { { \"EventCounterIntervalSec\", 1.ToString() } });\r\n        }\r\n    }\r\n\r\n    protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n    {\r\n        Console.WriteLine($\"Http saw an event from {eventData.EventSource.Name}\");\r\n    }\r\n}\r\n\r\nsealed class SocketsEventListener : EventListener\r\n{\r\n    protected override void OnEventSourceCreated(EventSource eventSource)\r\n    {\r\n        if (eventSource.Name == \"System.Net.Sockets\")\r\n        {\r\n            EnableEvents(eventSource, EventLevel.Informational, EventKeywords.None,\r\n                new Dictionary\u003cstring, string?\u003e { { \"EventCounterIntervalSec\", 1.ToString() } });\r\n        }\r\n    }\r\n\r\n    protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n    {\r\n        Console.WriteLine($\"Sockets saw an event from {eventData.EventSource.Name}\");\r\n    }\r\n}\r\n```\r\n\r\n```log\r\nHttp saw an event from System.Net.Http\r\nSockets saw an event from System.Net.Http\r\nHttp saw an event from System.Net.Sockets\r\nSockets saw an event from System.Net.Sockets\r\n```\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-18T15:36:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aOquZ",
                                           "createdAt":  "2023-04-18T21:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEJMlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2023-04-21T20:05:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "wsugarman",
                                                                               "createdAt":  "2023-08-19T22:51:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davmason",
                                           "body":  "I just took a look and learned something new about EventListeners. We create a dispatcher for every EventListener and EventSource combination, even if you never call EnableEvents.\r\n\r\nThen in WriteEvent, if it is a self describing event we uncontionally write it to all dispatchers. So for all self describing events (which counters uses) we will always write to all EventListeners, even if they never called EnableEvents.\r\n\r\nI\u0027m torn here, it is clearly a bug but it has been this way forever and would be a breaking change if we altered the behavior. \r\n\r\n",
                                           "updatedAt":  "2023-04-18T21:05:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IK2hL",
                                           "createdAt":  "2024-08-12T17:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I suspect @JamesNK hit this issue [here](https://github.com/dotnet/aspnetcore/pull/57269#issuecomment-2282944812).\r\n\r\n\u003e I\u0027m torn here, it is clearly a bug but it has been this way forever and would be a breaking change if we altered the behavior.\r\n\r\nI think we\u0027ve had reports from at least 5 different people hitting this issue and I expect it is going to keep happening. While I wouldn\u0027t say its urgent I do think we should fix this. We could always offer a compat-switch to aid with back compat.\r\n",
                                           "updatedAt":  "2024-08-12T17:21:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fqlkl",
                                           "createdAt":  "2025-02-24T15:07:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antmjones",
                                           "body":  "@noahfalk make that 6 people! Just wasted a chunk of time thinking I done something wrong with an EventListener because it was receiving events I wasn\u0027t expecting.\n\nAlso to echo what @davmason has noted above - while stepping through framework source trying to work out what I had done wrong, I was surprised to find that it appears that an EventDispatcher is getting created for _every_ EventListener (at least if that EventSource existed before the EventListener was created), even if that EventListener is in no way interested in the EventSource. For example [this line](https://github.com/dotnet/runtime/blob/v9.0.2/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L4147) in the EventListener constructor calls `args.EventSource.AddListener(...)` rather than `this.OnEventSourceCreated(...)`.\n\n",
                                           "updatedAt":  "2025-02-24T20:11:54Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "EventCounter events not filtered by EventSource/EventListener relationship",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37328",
        "createdAt":  "2020-06-02T22:28:27Z",
        "number":  37328,
        "author":  "kzu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-28T16:08:12Z",
        "body":  "### Description\r\n\r\nWhen libraries and apps use `DiagnosticSource` (which is really nice!), there is an [automatic bridge](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L600) to also automatically get ETW events \"for free\", pretty much. This is immensely useful!\r\n\r\nThere is one big drawback, however: the only supported listener filter [is an exact match for a listener name (or no filter at all)](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L600). This is less than ideal, since an app that uses `DiagnosticSource` extensively and has extensions contributing to it too, can no longer selectively collect traces for areas of the app and not others. This is specially problematic when using PerfView since you\u0027d get machine-wide logs from anything that\u0027s using `DiagnosticSource`, basically.\r\n\r\nProposal:\r\n\r\nExtend the supported [format for event name](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L53-L56) so that it can also include a `*` character at the end of the `DIAGNOSTIC_SOURCE_NAME` part. This would indicate that the filter should do a `StartsWith` match instead of an `==` comparison with the listener name.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJiULBg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzg0MTM2OQ==",
                                           "createdAt":  "2020-06-02T22:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-02T22:28:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzg0NTczOA==",
                                           "createdAt":  "2020-06-02T22:42:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tommcdon @noahfalk I assume you\u0027ll triage this as the owners.",
                                           "updatedAt":  "2020-06-02T22:42:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODQ0MDM1MQ==",
                                           "createdAt":  "2020-06-03T20:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGbjFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2020-06-04T21:50:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@kzu thank you for the suggestion. I\u0027m marking this as milestone 5.0 for now, though depending on other competing priorities and remaining time left in the 5.0, we may defer this issue to the next milestone. If you are interested in contributing a pull request, please feel free to do so.\r\ncc @josalem ",
                                           "updatedAt":  "2020-06-03T20:21:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzOTEzNzI2Nw==",
                                           "createdAt":  "2020-06-04T21:49:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kzu",
                                           "body":  "Cool, thanks! Yes, the plan is to contribute the fix, if you\u0027d be willing to take it in once approved 👍 ",
                                           "updatedAt":  "2020-06-04T21:49:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzOTk2MTg2Mg==",
                                           "createdAt":  "2020-06-06T02:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGlhvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2020-06-06T18:34:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Seems like a very reasonable proposal to me : )\r\nIf you want to submit a PR including a working test case I\u0027d be glad to review it. If all looks good we\u0027ll merge it.",
                                           "updatedAt":  "2020-06-06T02:36:59Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft-Diagnostic-DiagnosticSource does not support wildcard filtering for listener names in ETW",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38804",
        "createdAt":  "2020-07-06T09:27:37Z",
        "number":  38804,
        "author":  "John0King",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2LgRw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pakrym",
                                            "createdAt":  "2020-07-13T23:04:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ogxd",
                                            "createdAt":  "2021-01-22T10:38:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "John0King",
                                            "createdAt":  "2022-02-21T09:17:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mic-max",
                                            "createdAt":  "2022-08-31T20:36:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m-komilov",
                                            "createdAt":  "2022-09-28T09:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "f-alizada",
                                            "createdAt":  "2024-02-28T13:33:26Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-07-12T08:35:16Z",
        "body":  "### Description\r\n\r\nwhen I looking this doc https://github.com/dotnet/diagnostics/blob/master/documentation/design-docs/eventcounters.md#sample-code,  I find that there is a private field in the construct that this sample code do not use, \r\nafter I \"correct\" the code , the  `SimpleEventListener`  won\u0027t work.  After debug , I find that the method `OnEventSourceCreated` called before the constructor code,  and this is caused by the  the base constructor  eg. `EventCounter()/base()`  were doing all the work to call `OnEventSourceCreated` ,   and the only way to fix is to use event `EventSourceCreated`.\r\n\r\nthis behavior is against the normal code execution, that  constructor should run first , and cause error behaviors for  `private readonly field`\r\n\r\n```c#\r\n public class SimpleEventListener : EventListener\r\n{\r\n        private readonly int _intervalSec;\r\n\r\n        public SimpleEventListener()\r\n        {\r\n            _intervalSec = 1;  // this field should be 1 only , but   it also can be 0\r\n        }\r\n\r\n         protected override void OnEventSourceCreated(EventSource source)\r\n        {\r\n            var a = _internalSec; //   the a  is  0  when this method call\r\n        }\r\n}\r\n```\r\n\r\nso I think we should  add  a new method `ListenEvents()`   , to  start listen  after the instance being created\r\n\r\n```\r\nusing(var listener = new SimpleListenner())\r\n{\r\n    listener.ListenEvents()\r\n}\r\n``` \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhJ_4KA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDEyMjI4MA==",
                                           "createdAt":  "2020-07-06T09:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-06T09:27:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTAxNjQwNg==",
                                           "createdAt":  "2020-07-07T17:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-07T17:35:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTA4NzE5Mg==",
                                           "createdAt":  "2020-07-07T19:46:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@noahfalk @tommcdon can triage this one as owners. ",
                                           "updatedAt":  "2020-07-07T19:46:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTEyMTg4OQ==",
                                           "createdAt":  "2020-07-07T20:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@sywhang @josalem ",
                                           "updatedAt":  "2020-07-07T20:42:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE4Njk3OA==",
                                           "createdAt":  "2020-07-07T23:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@John0King - Thanks for the suggestion! I agree that callbacks running before the derived constructor runs is confusing. I suspect the largest challenge here is how to handle back-compat. We wouldn\u0027t want to make a change that causes existing code which doesn\u0027t call ListenEvents() to stop working. Let me know if you have any thoughts on how we could address that problem?",
                                           "updatedAt":  "2020-07-07T23:15:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTMwNDIzNQ==",
                                           "createdAt":  "2020-07-08T05:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "John0King",
                                           "body":  "Yes， the challenge is back-compat. \r\nhere are the ideas  I thought:\r\n1.  use some like netstanrd. dll to redirect this type to new assembly and it\u0027s new implementation. \r\n2.  do introduce the blocking changes, and suggest  multiple target for . net 5 and below\r\n3.  use a timer to start listen if user not call `listen event`  after the instance been created\r\n4.  do introduce the blocking changes, and suggest  to use event  to support both version\r\n\r\n_____________\r\n\r\nbecause the event  do we still need to create our child  class?   why not create a static method `CreateEventListener()`  to just create a blanking event and use event  to   Enable and logging the data? ",
                                           "updatedAt":  "2020-07-08T05:57:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTM0NTIxNQ==",
                                           "createdAt":  "2020-07-08T07:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "If I had to choose between breaking changes and not running the constructor beforehand I would consider not running the constructor to be the lesser evil. Unfortunately the options 1-4 don\u0027t appear to avoid the breaking changes - 2 and 4 accept them directly, 1 is breaking if the retargeting applies to any code automatically, and 3 is breaking for any events that would have otherwise been delivered before the timer expires.\r\n\r\nCreateEventListener() could be done without a breaking change but down that road seems to be ignoring the existing API and starting over? New API design is an involved process and new/alternate variations of old APIs add complexity. Sometimes it is justified but this issue doesn\u0027t appear problematic enough yet that we\u0027d want to do that.\r\n\r\nAs a potential workaround you could write something like this?\r\n````\r\n    class SimpleEventListener : EventListener\r\n    {\r\n        private readonly int _intervalSec = 1;\r\n\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            Debug.Assert(_intervalSec == 1);\r\n            base.OnEventSourceCreated(eventSource);\r\n        }\r\n    }\r\n````\r\n\r\nDerived class constructors are run after the base class, but initializers are run beforehand. Sorry it may not be as satisfying as an updated API but hopefully it helps?",
                                           "updatedAt":  "2020-07-08T07:36:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTM5ODgwOQ==",
                                           "createdAt":  "2020-07-08T09:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "# Possible API 5\r\n\r\n```C#\r\npartial class EventListener\r\n{\r\n    // Change the existing constructor to call the new one.\r\n    protected EventListener() : this(listen: true) {}\r\n\r\n    // Calls ListenEvents if listen == true.\r\n    protected EventListener(bool listen);\r\n\r\n    // Calls OnEventSourceCreated for existing event sources\r\n    // and starts calling it for future event sources.\r\n    // Throws InvalidOperationException if ListenEvents has\r\n    // already been called, because that suggests the earlier\r\n    // call was made before initialization was complete.\r\n    // Throws ObjectDisposedException if Dispose has been called.\r\n    protected void ListenEvents();\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```C#\r\npublic class SimpleEventListener : EventListener\r\n{\r\n    private readonly int _intervalSec;\r\n\r\n    public SimpleEventListener() : base(listen: false)\r\n    {\r\n        _intervalSec = 1;\r\n        this.ListenEvents();\r\n    }\r\n\r\n    protected override void OnEventSourceCreated(EventSource source)\r\n    {\r\n        var a = _internalSec; //  is reliably 1\r\n    }\r\n}\r\n```\r\n\r\nHowever, if you wanted to offer the same capability to classes derived from `SimpleEventListener`, then this API would require the following, which looks inconvenient.\r\n\r\n```C#\r\npublic SimpleEventListener(bool listen) : base(listen: false)\r\n{\r\n    _intervalSec = 1;\r\n\r\n    if (listen)\r\n    {\r\n        this.ListenEvents();\r\n    }\r\n}\r\n```\r\n\r\n# Bad API 6\r\n\r\n```C#\r\npartial class EventListener\r\n{\r\n    protected virtual void ListenEvents(); // called by constructor\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```C#\r\npublic class SimpleEventListener : EventListener\r\n{\r\n    private int _intervalSec; // now cannot be readonly\r\n\r\n    public SimpleEventListener()\r\n    {\r\n    }\r\n\r\n    protected override void ListenEvents()\r\n    {\r\n        _intervalSec = 1; // set here, not in constructor\r\n        base.ListenEvents();\r\n    }\r\n\r\n    protected override void OnEventSourceCreated(EventSource source)\r\n    {\r\n        var a = _internalSec; //  is reliably 1\r\n    }\r\n}\r\n```\r\n\r\nHowever, if you wanted to add a `public SimpleEventListener(int intervalSec)` constructor, you\u0027d be unable to pass `intervalSec` to `ListenEvents`, except via a thread-static field or similar. So I don\u0027t think this is going to fly.\r\n",
                                           "updatedAt":  "2020-07-08T09:17:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDQzMTIwOQ==",
                                           "createdAt":  "2020-11-10T03:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@KalleOlaviNiemitalo - thanks for the suggestion! I haven\u0027t scrutinized in detail but \u0027Possible API 5\u0027 looks like a pretty reasonable solution to me. It keeps complexity fairly low, largely reuses the existing API, and has no apparent breaking changes.",
                                           "updatedAt":  "2020-11-10T03:45:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDU2MDE5OQ==",
                                           "createdAt":  "2020-11-10T08:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "John0King",
                                           "body":  "personally, I think  auto listen  in  constructor is not a good idea,  I\u0027d like the `void ListenEvents()`  is `public` ,  and I also see many api from history  that try fix the old problem.  for example `TranscationScope` and `async`,  today async is everywhere but the default option for `TranscationScope`  is not support async.\r\n\r\nhere\u0027s my suggestion:\r\n-  if the goals for .Net 6 (for .net 5 it\u0027s too late)  is 100%  back compatible with .net 5 code  then try`Possible API 5` but with `public` ,  and mark this api  `[BackCompatibleAttribute]` (just a mark , we can also find a txt  file and  write it down)\r\n- if the goals for .Net7 (or 6)   is not 100% back compatible, then let\u0027s make a big change to those historical api and make those api work  as it should be.",
                                           "updatedAt":  "2020-11-10T08:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc425-ph",
                                           "createdAt":  "2021-09-16T19:07:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eatdrinksleepcode",
                                           "body":  "It appears to me that the _only_ way to use `EventListener` correctly is to do what [AzureEventSourceListener](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/Diagnostics/AzureEventSourceListener.cs) does: save any event sources raised during construction in a temporary list, and then wire them up after construction is done (although `AzureEventSourceListener` is wiring up those pre-existing sources twice, before _and_ after construction, for reasons I don\u0027t understand).\r\n\r\nCan this approach be documented? I have spent the better part of a day just trying to figure out how to use `EventListener` as intended.",
                                           "updatedAt":  "2021-09-16T19:07:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOqcq",
                                           "createdAt":  "2022-07-07T21:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving older issues to the Future milestone as it is unlikely we will have time to address this in the .NET 7 timeframe.  Please feel free to move this issue back to .NET 7 if there is active work to address the feature request.",
                                           "updatedAt":  "2022-07-07T21:27:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GVEpb",
                                           "createdAt":  "2022-07-11T03:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "John0King",
                                           "body":  "@tommcdon   what\u0027s your suggestion for using the `EventListener` if you cut this from v7.0.0 ?",
                                           "updatedAt":  "2022-07-11T03:33:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GZR0M",
                                           "createdAt":  "2022-07-11T23:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "For anyone using EventListener in 7.0 (or any earlier release since it was first created) I\u0027d suggest:\r\n- do you have state that needs to be initialized in the constructor prior to receiving events?\r\n   - no -\u003e subscribe to EventSources directly in the OnEventSourceCreated callback.\r\n   - yes -\u003e in OnEventSourceCreated callback put relevant EventSources into an array if your state isn\u0027t initialized yet. Once your state has been initialized iterate over the array of cached sources and enable them",
                                           "updatedAt":  "2022-07-11T23:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6En_go",
                                           "createdAt":  "2024-07-12T08:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skomis-mm",
                                           "body":  "Primary constructors come to the rescue along with @noahfalk\u0027s approach using fields initializer:\r\n```csharp\r\nclass SimpleEventListener(int intervalSec) : EventListener\r\n{\r\n     private readonly int _intervalSec = intervalSec;\r\n\r\n     protected override void OnEventSourceCreated(EventSource eventSource)\r\n     {\r\n         Debug.Assert(_intervalSec == intervalSec);\r\n         base.OnEventSourceCreated(eventSource);\r\n     }\r\n}\r\n```\r\nOr just reference primary constructor parameter (intervalSec) directly in the `OnEventSourceCreated` method.",
                                           "updatedAt":  "2024-07-12T08:35:16Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[EventListener] We should add  a new method  `ListenEvents()`",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39353",
        "createdAt":  "2020-07-15T09:54:15Z",
        "number":  39353,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T23:51:46Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe following sample program exercises EventSource and EventListener logging with Activity IDs. Copy and build it in a new Visual Studio .Net Core console app project.\r\n````\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp28\r\n{\r\n    class Program\r\n    {\r\n        static MyEventSource log = new MyEventSource();\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            \r\n            SimpleEventListener d = new SimpleEventListener();\r\n            Console.WriteLine(\"{0,-6} {1,-36} {2,-36} {3,-12} {4}\", \"TID\", \"ActivityId\", \"RelatedActivityId\", \"EventName\", \"Message\");\r\n\r\n            log.ThingyStart(\"begin\");\r\n            DoAsyncThings().Wait();\r\n            log.ThingyStop(\"end\");\r\n        }\r\n\r\n        static async Task DoAsyncThings()\r\n        {\r\n            await DoThingA();\r\n            await DoThingB();\r\n        }\r\n\r\n        static async Task DoThingA()\r\n        {\r\n            log.ThingyStart(\"Starting a\");\r\n            await Task.Delay(100);\r\n            log.Log(\"I did something in A!\");\r\n            log.ThingyStop(\"Stopping a\");\r\n        }\r\n        static async Task DoThingB()\r\n        {\r\n            log.ThingyStart(\"Starting b\");\r\n            await Task.Delay(100);\r\n            log.Log(\"I did something in B!\");\r\n            log.ThingyStop(\"Stopping b\");\r\n        }\r\n    }\r\n\r\n    [EventSource(Name =\"MyEventSource\")]\r\n    class MyEventSource : EventSource\r\n    {\r\n        [Event(1)]\r\n        public void Log(string message)\r\n        {\r\n            WriteEvent(1, message);\r\n        }\r\n\r\n        [Event(2, ActivityOptions = EventActivityOptions.Recursive)]\r\n        public void ThingyStart(string message)\r\n        {\r\n            WriteEvent(2, message);\r\n        }\r\n\r\n        [Event(3, ActivityOptions = EventActivityOptions.Recursive)]\r\n        public void ThingyStop(string message)\r\n        {\r\n            WriteEvent(3, message);\r\n        }\r\n    }\r\n\r\n    class SimpleEventListener : EventListener\r\n    {\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if(eventSource.Name == \"System.Threading.Tasks.TplEventSource\")\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Informational, (EventKeywords)0x80);\r\n            }\r\n            else if(eventSource.Name == \"MyEventSource\")\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Informational);\r\n            }\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            string message = \"\";\r\n            int index = eventData.PayloadNames.IndexOf(\"message\");\r\n            if(index != -1)\r\n            {\r\n                message = (string)eventData.Payload[index];\r\n            }\r\n            Console.WriteLine(\"{0,-6} {1,-36} {2,-36} {3,-12} {4}\", eventData.OSThreadId, eventData.ActivityId, eventData.RelatedActivityId, eventData.EventName, message);\r\n        }\r\n    }\r\n}\r\n````\r\n\r\n2. Run it using CTRL-F5 to avoid using the debugger and note the output. For example:\r\n````\r\nTID    ActivityId                           RelatedActivityId                    EventName    Message\r\n39416  00000011-0000-0000-0000-0000ea039d59 00000000-0000-0000-0000-000000000000 ThingyStart  begin\r\n39416  00001011-0000-0000-0000-0000ea339d59 00000011-0000-0000-0000-0000ea039d59 ThingyStart  Starting a\r\n39152  00001011-0000-0000-0000-0000ea339d59 00000000-0000-0000-0000-000000000000 Log          I did something in A!\r\n39152  00001011-0000-0000-0000-0000ea339d59 00000000-0000-0000-0000-000000000000 ThingyStop   Stopping a\r\n39152  00002011-0000-0000-0000-0000ea239d59 00000011-0000-0000-0000-0000ea039d59 ThingyStart  Starting b\r\n39152  00002011-0000-0000-0000-0000ea239d59 00000000-0000-0000-0000-000000000000 Log          I did something in B!\r\n39152  00002011-0000-0000-0000-0000ea239d59 00000000-0000-0000-0000-000000000000 ThingyStop   Stopping b\r\n39416  00000011-0000-0000-0000-0000ea039d59 00000000-0000-0000-0000-000000000000 ThingyStop   end\r\n````\r\nNotice that each GUID in the RelatedActivityId column matches the first row GUID in the ActivityId column. This is correct behavior indicating that the child activities are parented to the root activity.\r\n\r\n3. Now run the app again using F5 so that the debugger will be activated and note the output again. For example:\r\n\r\n````\r\nTID    ActivityId                           RelatedActivityId                    EventName    Message\r\n11720  00000011-0000-0000-0000-00000ac99d59 00000000-0000-0000-0000-000000000000 ThingyStart  begin\r\n11720  00001011-0000-0000-0000-00000af99d59 00000011-0000-0000-0000-00000ac99d59 ThingyStart  Starting a\r\n24580  00001011-0000-0000-0000-00000af99d59 00000000-0000-0000-0000-000000000000 Log          I did something in A!\r\n24580  00001011-0000-0000-0000-00000af99d59 00000000-0000-0000-0000-000000000000 ThingyStop   Stopping a\r\n24580  00002011-0000-0000-0000-00000ae99d59 00000002-0001-0000-b450-0000ffdcd7b5 ThingyStart  Starting b\r\n24580  00002011-0000-0000-0000-00000ae99d59 00000000-0000-0000-0000-000000000000 Log          I did something in B!\r\n24580  00002011-0000-0000-0000-00000ae99d59 00000000-0000-0000-0000-000000000000 ThingyStop   Stopping b\r\n11720  00000011-0000-0000-0000-00000ac99d59 00000000-0000-0000-0000-000000000000 ThingyStop   end\r\n````\r\n\r\nExpected behavior: Debug output should also have RelatedActivityIds that match the root activity\r\nActual behavior: In row 5 the RelatedActivityId will be a novel GUID not seen anywhere else. \r\n\r\nFor a monitoring system (or human) trying to do activity correlation this novel id prevents parent-child relationships from being inferred.\r\n\r\n\r\n### Configuration\r\n\r\nI reproed on Windows x64 .Net Core 3.1.3 but I wouldn\u0027t be surprised if the bug reproes across many versions/OS/arch combinations\r\n\r\n### Regression?\r\n\r\nUnsure, but probably not\r\n\r\n### Other information\r\n\r\nI partially debugged the issue and observed that both TplEventSource keyword \u0027TaskSetActivityIds\u0027 (0x10000) and keyword \u0027TasksFlowActivityIds\u0027 (0x80) were enabled. The source indicates these two keywords are supposed to be mutually exclusive but code review on [the implementation](https://source.dot.net/#System.Private.CoreLib/TplEventSource.cs,35) suggests the invariant isn\u0027t fully enforced. In any single pass of OnEventCommand only one keyword or the other can be turned on, but with two separate concurrent sessions each session can turn on one of them without ever disabling the other. This repro scenario probably creates exactly that two session setup.\r\n\r\nIt wouldn\u0027t be hard to enforce the mutual exclusion more strongly in the code but that could have follow on issues where whichever session doesn\u0027t get the activity id logging it requested has new failures.\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONQxMQA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODY3MTI3MQ==",
                                           "createdAt":  "2020-07-15T09:54:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-15T09:54:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41CECa",
                                           "createdAt":  "2021-07-30T08:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0jmuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-07-30T16:15:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Any change in behavior here is probably a (minor) breaking change. I don\u0027t think we\u0027d want to change it at this point in the release.",
                                           "updatedAt":  "2021-07-30T08:32:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41DExA",
                                           "createdAt":  "2021-07-30T16:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "Agreed.",
                                           "updatedAt":  "2021-07-30T16:15:50Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Debugging an app using TplEventSource keyword 0x80 generates spurious ActivityIDs.",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42061",
        "createdAt":  "2020-09-10T06:40:13Z",
        "number":  42061,
        "author":  "indigogiant",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-21T21:25:40Z",
        "body":  "There\u0027s a `Thread.Sleep(15)` on line 2908 of `EventSource.cs` which causes pathological behavior when testing a simple Service Fabric client.\r\n\r\nWith the `Thread.Sleep(15)` in place making a simple first call such as `fabricClient.ClusterManager.GetClusterManifestAsync()` takes about 6.6 seconds. Removing that line reduces the delay to about 200ms.\r\n\r\nThe comment above that line says \"For large manifests we want to not overflow any receiver\u0027s buffer\". Is it actually necessary to do this? Is 15 milliseconds required? Is there a way to achieve this goal without incurring such a large time penalty?\r\n\r\nNote that it appears that there may be a 300ms pause any time a new ETW session is created in this particular case.\r\n\r\nA simple test case:\r\n\r\n```csharp\r\npublic static class Program\r\n{\r\n        public static async Task Main()\r\n        {\r\n            var sw = new Stopwatch();\r\n            var fc = new FabricClient();\r\n            Console.Write(\"Warming up connection...\");\r\n            sw.Restart();\r\n            await fc.ClusterManager.GetClusterManifestAsync(); // ~6,600ms with Thread.Sleep(15), ~200ms without it.\r\n            Console.WriteLine($\" took {sw.ElapsedMilliseconds}ms\"); \r\n        }\r\n}\r\n```\r\n\r\nThe offending line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/44bac4135a7d74f2ced92f5b4d54263d895f0f41/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L2904-L2909\r\n\r\nThe ETW manifest sent by the Service Fabric client is large, around 430KB. Using a simple dotnet core 3.1 console app I can see that, for some reason, the ETW buffer is less than 8K in size, leading to the code choosing a 4KB chunk size, and thus hitting that `Thread.Sleep(15)` about 20 times for a total delay of 300ms.\r\n\r\nThis might not sound like all that much, but during startup a number of commands are deferred and then dispatched at the end of `Initialize()`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/b443d6e2f4bdfcfc0a2ac7bca95a47ba0b3086be/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L1540-L1552\r\n\r\nAnd in `DoCommand()` we see that there is potentially a call to `SendManifest()` for every command.\r\n\r\nhttps://github.com/dotnet/runtime/blob/b443d6e2f4bdfcfc0a2ac7bca95a47ba0b3086be/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L2664-L2673\r\n\r\nAnd in my test app it appears that the manifest is sent over 20 times, for a total delay in excess of 6 seconds.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKSFvjw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MDAyMzYxNw==",
                                           "createdAt":  "2020-09-10T06:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-10T06:40:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MDA1NzEwMw==",
                                           "createdAt":  "2020-09-10T07:47:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-10T07:47:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Thread.Sleep() in EventSource causes significant first-call delays with Service Fabric client",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42128",
        "createdAt":  "2020-09-11T17:15:37Z",
        "number":  42128,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-21T21:25:43Z",
        "body":  "I ran into this while working on tests for #41670.\r\n\r\nhttps://github.com/dotnet/runtime/blob/abeadc24da4a2aa14f607ea95bb6540101d53e3a/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L4544-L4557\r\n\r\nThe `ActivityId` property will return the `m_activityId` field if set (Start/Stop events).\r\nIf it wasn\u0027t set, it will fetch the current thread\u0027s activity id - but it won\u0027t save it.\r\n\r\nThis means that the behavior is correct when the EventArgs are analyzed in the event callback itself.\r\nIf the EventArgs are stored and looked at later, ActivityId info is lost (it\u0027ll always return Zero).\r\n\r\nConsidering that the property is described as `Activity ID for the thread on which the event was written`, this seems like a bug and not intentional behavior (which is also incredibly confusing to debug).\r\n\r\nIs there a significant perf drawback to the approach of simply always fetching `EventSource.CurrentThreadActivityId` when creating the EventArgs and removing the getter logic?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKTVs1A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTIxNTM1OA==",
                                           "createdAt":  "2020-09-11T17:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-11T17:15:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTIyMDU3MA==",
                                           "createdAt":  "2020-09-11T17:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @noahfalk who can address this issue. ",
                                           "updatedAt":  "2020-09-11T17:27:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTIyMTEzMw==",
                                           "createdAt":  "2020-09-11T17:28:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQKTpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2020-09-11T18:01:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "adding @sywhang @josalem.  It sounds like we should document this behavior for 5.0 and try to address it in 6.0.",
                                           "updatedAt":  "2020-09-11T17:28:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTIzNTY2Mw==",
                                           "createdAt":  "2020-09-11T18:00:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "\u003e This means that the behavior is correct when the EventArgs are analyzed in the event callback itself.\r\nIf the EventArgs are stored and looked at later, ActivityId info is lost (it\u0027ll always return Zero).\r\n\r\nHow are you consuming these events?  Are you listening to these events live via an `EventListener` or are you using EventPipe to collect these events and save them to a file?",
                                           "updatedAt":  "2020-09-11T18:00:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTI0MTc1Mw==",
                                           "createdAt":  "2020-09-11T18:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The use case here is using `TestEventListener` during tests, and saving events to a `ConcurrentQueue`.\r\nAfter the tested code runs, EventArgs are analyzed (including comparing ActivityIds).\r\n\r\nI modified the `TestEventListener` to allow subscribing to multiple event sources (including TplEventSource to track activities in tests) - I will ping you on the PR.\r\n\r\n```c#\r\nusing var listener = new TestEventListener(\"System.Net.Sockets\", EventLevel.Verbose, 0.1);\r\nlistener.AddActivityTracking(); // Doesn\u0027t exist on current TestEventListener\r\n\r\nvar events = new ConcurrentQueue\u003cEventWrittenEventArgs\u003e();\r\nawait listener.RunWithCallbackAsync(events.Enqueue, async () =\u003e\r\n{\r\n    // Stuff that triggers events\r\n}\r\n\r\nEventWrittenEventArgs start = Assert.Single(events, e =\u003e e.EventName == \"FooStart\");\r\nEventWrittenEventArgs something = Assert.Single(events, e =\u003e e.EventName == \"FooSomething\");\r\nEventWrittenEventArgs stop = Assert.Single(events, e =\u003e e.EventName == \"FooStop\");\r\n\r\nAssert.NotEqual(Guid.Empty, start.ActivityId);\r\nAssert.Equal(start.ActivityId, something.ActivityId); // Fail\r\nAssert.Equal(start.ActivityId, stop.ActivityId);\r\n```\r\n\r\nHere, ActivityId would be set correctly for FooStart/FooStop, but `Guid.Empty` for FooSomething.\r\n\r\nIf instead you look at the EventArgs inside the `RunWithCallbackAsync` callback, it will be correct (as you\u0027re still on the Thread that logged the event).\r\n```c#\r\nlistener.RunWithCallbackAsync(e =\u003e { Console.WriteLine(e.ActivityId); events.Enqueue(e); }, ...\r\n```",
                                           "updatedAt":  "2020-09-11T18:16:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTM1NTk0NQ==",
                                           "createdAt":  "2020-09-11T23:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "I\u0027m not sure if there is an explicit reason for this behavior (the code hasn\u0027t changed in ~1 year), but I agree with Tom on how we should handle this (document now; address/change in 6.0).  For now, would it be sufficient for the test to store a tuple `(Guid, EventWrittenEventArgs)` in the queue and just fetch the Activity ID in the callback directly?",
                                           "updatedAt":  "2020-09-11T23:42:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTM2NzEyNA==",
                                           "createdAt":  "2020-09-12T00:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Yes a temporary fix would be changing the test / adding 2 lines of reflection into TestEventListener to set the private field.",
                                           "updatedAt":  "2020-09-12T00:42:34Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "EventSource EventWrittenEventArgs.ActivityId isn\u0027t always set",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42244",
        "createdAt":  "2020-09-15T08:28:59Z",
        "number":  42244,
        "author":  "macrogreg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-20T18:19:03Z",
        "body":  "This is a question / suggestion / request about the current RC of **System.Diagnostics.DiagnosticSource**.\r\n\r\nAuto-instrumentation scenarios require an in-proc agent / tracer to load `DiagnosticSource` dynamically while performing non-trivial logic to avoid potential versioning conflicts with assemblies referenced by the application being instrumented. The logic would be considerably simpler and more robust if the `DiagnosticSource`-assembly itself did not have any additional dependencies.\r\n\r\nOn the recent NetFx and Net Core versions the `System.Diagnostics.DiagnosticSource`-NuGet depends on **System.Memory**.(When targeting older Net Core and Net Standard flavors there are more NuGet dependencies.) In turn, `System.Memory` requires (depending on the targeted runtime version): **System.Runtime.CompilerServices.Unsafe**, **System.Buffers** and **System.Numerics.Vectors**. Older runtime flavors require more.\r\n\r\nI am guessing that the dependencies are on actor types rather than on data exchange types on public APIs. If so, it should be possible to build the types that are referenced from `System.Memory` and `System.Runtime.CompilerServices.Unsafe` directly into the `DiagnosticSource`-assembly (copy code or, better, just reference the respective sources at Framework build time). That way  `DiagnosticSource`-assembly would not contain any downstream dependencies.\r\n\r\nThis would considerably simplify scenarios where an auto-instrumentation agent needs to dynamically load `DiagnosticSource` (and all its dependencies) without causing versioning conflicts with the instrumented application.\r\n\r\n@noahfalk  and @davmason have context on the related discussion in the OTel SIG.\r\n\r\nThis should be a build-logic change only. Can this be considered for Net 5? ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP_g68Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjU1NjI3Mg==",
                                           "createdAt":  "2020-09-15T08:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-15T08:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjYwNjQ1NA==",
                                           "createdAt":  "2020-09-15T09:51:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e Can this be considered for Net 5?\r\n\r\nSorry it is too late : ( At the runtime and BCL layers of the stack we are already winding down for the release. We can consider this for .NET 6. Also I believe some of those types are special-cased JIT intrinsics - copying the source to another assembly may cause significant performance regressions or outright failures because the JIT no longer recognizes the special casing applies.",
                                           "updatedAt":  "2020-09-15T09:51:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjc3MDQzNA==",
                                           "createdAt":  "2020-09-15T14:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQey_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-09-15T18:55:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I am guessing that the dependencies are on actor types rather than on data exchange types on public APIs.\r\n\r\nThis does not appear to be the case:\r\n\r\n```csharp\r\n    public readonly partial struct ActivitySpanId : System.IEquatable\u003cSystem.Diagnostics.ActivitySpanId\u003e\r\n    {\r\n        public static System.Diagnostics.ActivitySpanId CreateFromBytes(System.ReadOnlySpan\u003cbyte\u003e idData);\r\n        public static System.Diagnostics.ActivitySpanId CreateFromString(System.ReadOnlySpan\u003cchar\u003e idData);\r\n        public static System.Diagnostics.ActivitySpanId CreateFromUtf8String(System.ReadOnlySpan\u003cbyte\u003e idData);\r\n    }\r\n```\r\n\r\n`System.ReadOnlySpan\u003cT\u003e` lives in `System.Memory`.",
                                           "updatedAt":  "2020-09-15T14:54:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgxOTQzMw==",
                                           "createdAt":  "2020-09-15T16:12:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003chttps://github.com/dotnet/runtime/issues/429\u003e looks similar.",
                                           "updatedAt":  "2020-09-15T16:12:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk2MzQxMg==",
                                           "createdAt":  "2020-09-15T20:33:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "macrogreg",
                                           "body":  "Yes, @KalleOlaviNiemitalo , it does, indeed appear to be the same issue. Looks like it\u0027s not super new. Since then we have more scenarios that highlight the problem (auto-instrumentation), wished we realized it in time. :)",
                                           "updatedAt":  "2020-09-15T20:33:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk5MDAxNA==",
                                           "createdAt":  "2020-09-15T21:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "macrogreg",
                                           "body":  "@jkotas , thank you for spotting this, it\u0027s a bummer. I really wished we could instead use an API shape that takes an array and an index. It\u0027s not as modern as a ReadOnlySpan, but the dependencies are a real challenge (details below).\r\n\r\nBtw, the latest RC takes a direct additional dependency on `System.Runtime.CompilerServices.Unsafe` (it existed before transitively via `System.Memory`). Is it one of those types that have special-cased JIT intrinsics (see @noahfalk \u0027s comment above), or could a copy of it be theoretically built into the DiagnosticSource Nuget? (This is for my own education.)\r\n\r\nThe challenge presented by these dependencies to auto-instrumentation is not only that an auto-instrumentation agent becomes more complex. It overall limits the scenarios it can cover:\r\n\r\nIf  DiagnosticSource  did not have dependencies, we can use a logic such as (simplified):\r\n\r\n* When the auto-instrumentation attaches, if DiagnosticSource is loaded, use the loaded version.\r\n* Otherwise load a relatively recent one as a \"fall-back\" strategy.\r\n* If an app was going to load DiagnisticSource later, it is still OK because of the stability of DiagnisticSource in respect to back-compatibility. It is generally OK for apps to use a newer version than they expected.\r\n\r\nConsider now that an app did not have DiagnosticSource loaded, but it had an older version of System.Memory (or another dependency) loaded. If that version is older than required by our \"fall-back\" DiagnosticSource, we cannot load it. So applications that reference old versions of DiagnosticSource\u0027s dependencies without referencing a similarly old version of DiagnosticSource itself cannot be instrumented.  (I\u0027d love to find out that I am missing something, so please correct me if I am wrong. :) )\r\n\r\nAn even bigger issue (because it cannot be pre-preemptively detected) is that an app may want to load one of the DiagnosticSource dependencies _after_ the tracer is attached. By then we have loaded the \"fall-back\", i.e. a recent DiagnosticSource version with respectively recent versions of its dependencies. Consider now that an app wanted to load an old version System.Memory (or another DiagnosticSource dependency). Instead, it will get a more recent version forced on it. If there is some backward incompatibility, there can be a very hard to debug issue or crash.\r\n\r\nI will be researching workarounds and I would appreciate any thoughts you guys may have to share. Until then, I am somewhat concerned that these dependencies may put at risk the entire idea to have auto-instrumentation agents (incl. the OTel tracer) be Activity centric.\r\n\r\nThanks!",
                                           "updatedAt":  "2020-09-15T21:30:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzAxMzcxMA==",
                                           "createdAt":  "2020-09-15T22:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e System.Runtime.CompilerServices.Unsafe (it existed before transitively via System.Memory). Is it one of those types that have special-cased JIT intrinsics\r\n\r\nSystem.Runtime.CompilerServices.Unsafe does not have special-cased JIT intrinsics.",
                                           "updatedAt":  "2020-09-15T22:30:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Njg4ODk1Nw==",
                                           "createdAt":  "2020-09-22T18:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "macrogreg",
                                           "body":  "@noahfalk - Could you please point to some information about \r\n\u003e Also I believe some of those types are special-cased JIT intrinsics - copying the source to another assembly may cause significant performance regressions or outright failures because the JIT no longer recognizes the special casing applies.\r\n\r\nAs discussed in the OTel meeting, vendoring DiagnosticSource into a Tracer may be a fallback strategy when it is not on the default assembly loading path, and cannot be loaded dynamically from there. I\u0027d like to understand what risks are associated with this. \r\n\r\nThank you!",
                                           "updatedAt":  "2020-09-22T18:06:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NzE0NTE2Mw==",
                                           "createdAt":  "2020-09-23T05:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027m hoping we can stick to a simple rule of thumb, \"don\u0027t transitively replicate any of DiagnosticSource.dll\u0027s dependencies.\" For any given dependency assembly we can either eliminate the requirement for it or accept that it will be needed for the scenario to work. \r\n\r\nMore info about intrinsics: https://github.com/dotnet/runtime/blob/master/docs/design/coreclr/botr/vectors-and-intrinsics.md\r\n",
                                           "updatedAt":  "2020-09-23T05:38:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Kcej",
                                           "createdAt":  "2022-03-05T06:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Smartisa",
                                           "body":  "\u003e @jkotas , thank you for spotting this, it\u0027s a bummer. I really wished we could instead use an API shape that takes an array and an index. It\u0027s not as modern as a ReadOnlySpan, but the dependencies are a real challenge (details below).\r\n\u003e \r\n\u003e Btw, the latest RC takes a direct additional dependency on `System.Runtime.CompilerServices.Unsafe` (it existed before transitively via `System.Memory`). Is it one of those types that have special-cased JIT intrinsics (see @noahfalk \u0027s comment above), or could a copy of it be theoretically built into the DiagnosticSource Nuget? (This is for my own education.)\r\n\u003e \r\n\u003e The challenge presented by these dependencies to auto-instrumentation is not only that an auto-instrumentation agent becomes more complex. It overall limits the scenarios it can cover:\r\n\u003e \r\n\u003e If DiagnosticSource did not have dependencies, we can use a logic such as (simplified):\r\n\u003e \r\n\u003e * When the auto-instrumentation attaches, if DiagnosticSource is loaded, use the loaded version.\r\n\u003e * Otherwise load a relatively recent one as a \"fall-back\" strategy.\r\n\u003e * If an app was going to load DiagnisticSource later, it is still OK because of the stability of DiagnisticSource in respect to back-compatibility. It is generally OK for apps to use a newer version than they expected.\r\n\u003e \r\n\u003e Consider now that an app did not have DiagnosticSource loaded, but it had an older version of System.Memory (or another dependency) loaded. If that version is older than required by our \"fall-back\" DiagnosticSource, we cannot load it. So applications that reference old versions of DiagnosticSource\u0027s dependencies without referencing a similarly old version of DiagnosticSource itself cannot be instrumented. (I\u0027d love to find out that I am missing something, so please correct me if I am wrong. :) )\r\n\u003e \r\n\u003e An even bigger issue (because it cannot be pre-preemptively detected) is that an app may want to load one of the DiagnosticSource dependencies _after_ the tracer is attached. By then we have loaded the \"fall-back\", i.e. a recent DiagnosticSource version with respectively recent versions of its dependencies. Consider now that an app wanted to load an old version System.Memory (or another DiagnosticSource dependency). Instead, it will get a more recent version forced on it. If there is some backward incompatibility, there can be a very hard to debug issue or crash.\r\n\u003e \r\n\u003e I will be researching workarounds and I would appreciate any thoughts you guys may have to share. Until then, I am somewhat concerned that these dependencies may put at risk the entire idea to have auto-instrumentation agents (incl. the OTel tracer) be Activity centric.\r\n\u003e \r\n\u003e Thanks!\r\n\r\nBackward incompatibility is a headache. You know how to decide whether the version of a package is backward compatible or the API has changed",
                                           "updatedAt":  "2022-03-05T06:05:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_-Drx",
                                           "createdAt":  "2022-03-20T11:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Here are the packages I see still references S.R.CS.U in the dotnet-7 feeds so far:\r\n\r\n- System.Diagnostics.DiagnosticSource: removing it would reduce it to 0 package dependencies 🎉.\r\n- System.Collections.Immutable: removing it would reduce it to 0 package dependencies 🎉.\r\n\r\nNeedless packages in dotnet/efcore (there may be other repos that reference the package versions of what is in ``Microsoft.NETCore.App`` that needs changed:\r\n- System.Diagnostics.DiagnosticSource\r\n- System.Collections.Immutable\r\n\r\nOther work that needs done (I think): Migrate all common package references ``Microsoft.Extensions.*`` (in the org and outside of it) to an new default installed runtime \u0026 ref pack and name it ``Microsoft.NETCore.Extensions.App`` and have dotnet/aspnetcore reference that instead of bundling them inside it\u0027s framework (so other types of apps can reference the ``Extensions`` FrameworkReference implicitly from the sdk with ``UseNetCoreExtensions=true`` in csproj/Directory.Build.props). This would greatly simplify infrastructure for everyone as well as enable RID based crossgen2 deployments of the ``Microsoft.Extensions.*`` projects.",
                                           "updatedAt":  "2022-03-20T11:42:22Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Reducing transitive dependency closure of System.Diagnostics.DiagnosticSource",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43635",
        "createdAt":  "2020-10-20T12:38:18Z",
        "number":  43635,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-21T21:25:44Z",
        "body":  "`ActivityTracker` really only works if `TplEventSource` is enabled, so if all event sources are disabled via a feature switch `EventSourceSupport` there\u0027s really no need to keep its implementation around for anything.\r\n\r\nIdeally we would refactor the code in it such that linker will be able to remove most of the implementation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMB8DmQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjgxODkzOA==",
                                           "createdAt":  "2020-10-20T12:38:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-20T12:38:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTY1NzgxMw==",
                                           "createdAt":  "2021-03-15T18:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "In addition to the `TplEventSource,` [`AssemblyLoadContext`](https://github.com/dotnet/runtime/blob/6d238511167bdbf8cd16103e84b6befb45c0e301/src/coreclr/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.CoreCLR.cs#L202) and [`EventSource`](https://github.com/dotnet/runtime/blob/6d238511167bdbf8cd16103e84b6befb45c0e301/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L3789) has references to this class",
                                           "updatedAt":  "2021-03-15T18:39:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzMxNTAyNg==",
                                           "createdAt":  "2021-03-25T19:16:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@LakshanF - are you addressing this issue with the EventSource work you\u0027ve been doing?",
                                           "updatedAt":  "2021-03-25T19:16:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzMzODkwNQ==",
                                           "createdAt":  "2021-03-25T19:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "I was not planning to - I took a quick look when I closed #43657 to see if its an easy fix but noted the additional references from AssemblyLoadCpntext, EventSource and left this issue separate from that work",
                                           "updatedAt":  "2021-03-25T19:31:35Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ActivityTracker is mostly untrimmed even when event source is disabled",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43709",
        "createdAt":  "2020-10-21T22:40:49Z",
        "number":  43709,
        "author":  "brianrob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBUcWFw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "hoyosjs",
                                            "createdAt":  "2020-10-23T03:46:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-23T14:51:55Z",
        "body":  "Right now, TPL events are part of the default set of events captured by PerfView and Visual Studio.  With the proliferation of async, these events are dominating traces more and more, which preturbs the data, and results in recommendations to look at Task overhead, where in fact the overhead is all in emitting TPL ETW events.\r\n\r\nThe goal of this issue is to track looking into options to make these events less verbose if possible.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKpa8Pw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzkxOTM0Ng==",
                                           "createdAt":  "2020-10-21T22:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "cc: @tommcdon",
                                           "updatedAt":  "2020-10-21T22:41:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzk4MTU3Ng==",
                                           "createdAt":  "2020-10-21T23:32:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUj6Rw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brianrob",
                                                                               "createdAt":  "2020-10-21T23:33:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2020-10-23T03:46:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2020-10-24T03:39:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m all for this.  We just need to keep in mind that various tools rely on some subset of these events for things like stitching together async call stacks for both debugging and profiling.  We\u0027ll need to make sure not to break said tools. ",
                                           "updatedAt":  "2020-10-21T23:32:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDUyMTY2Mw==",
                                           "createdAt":  "2020-10-22T14:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-22T14:10:44Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Consider Lowering Verbosity of TPL Events",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45215",
        "createdAt":  "2020-11-25T17:02:18Z",
        "number":  45215,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T22:21:14Z",
        "body":  "## Background and Motivation\r\n\r\nThe typical pattern with EventSource is to have an EventSource-derived type that exposes one method per event; arguments to these method calls are then generally included in some form as part of the event payload.  With the goal of logging being a nop / as cheap as possible when it\u0027s not enabled, any expensive work should be guarded by checks for whether the EventSource is actually enabled, e.g.\r\n```C#\r\nif (MyEventSource.Log.IsEnabled())\r\n{\r\n    MyEventSource.Log.SomethingInterestingHappened(ComputeArgument());\r\n}\r\n```\r\nbut it\u0027s easy to accidentally forget such a guard. https://github.com/dotnet/aspnetcore/pull/27956 has examples of cases in ASP.NET that we shipped in .NET 5, where unguarded log calls were doing fairly expensive work, e.g.\r\n```C#\r\nLog.DescribeFoundCertificates(ToCertificateDescription(matchingCertificates));\r\n```\r\n\r\n## Proposed Analyzer\r\n\r\nWe won\u0027t be able to catch all such uses perfectly, but we should be able to flag many, with a reasonably low false positive rate, e.g. find calls to SomeEventSource.Log.SomeMethod, and if any argument isn\u0027t a field/local or some property access off of one (making the assumption that properties are cheap), then find if there\u0027s a SomeEventSource.Log.IsEnabled() check guarding it, and if there isn\u0027t, warn there should be.  An auto-fixer could add one.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK8ECMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzgzMTcwNQ==",
                                           "createdAt":  "2020-11-25T17:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nThe typical pattern with EventSource is to have an EventSource-derived type that exposes one method per event; arguments to these method calls are then generally included in some form as part of the event payload.  With the goal of logging being a nop / as cheap as possible when it\u0027s not enabled, any expensive work should be guarded by checks for whether the EventSource is actually enabled, e.g.\r\n```C#\r\nif (MyEventSource.Log.IsEnabled())\r\n{\r\n    MyEventSource.Log.SomethingInterestingHappened(ComputeArgument());\r\n}\r\n```\r\nbut it\u0027s easy to accidentally forget such a guard. https://github.com/dotnet/aspnetcore/pull/27956 has examples of cases in ASP.NET that we shipped in .NET 5, where unguarded log calls were doing fairly expensive work, e.g.\r\n```C#\r\nLog.DescribeFoundCertificates(ToCertificateDescription(matchingCertificates));\r\n```\r\n\r\n## Proposed Analyzer\r\n\r\nWe won\u0027t be able to catch all such uses perfectly, but we should be able to flag many, with a reasonably low false positive rate, e.g. find calls to SomeEventSource.Log.SomeMethod, and if any argument isn\u0027t a field/local or some property access off of one (making the assumption that properties are cheap), then find if there\u0027s a SomeEventSource.Log.IsEnabled() check guarding it, and if there isn\u0027t, warn there should be.  An auto-fixer could add one.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Tracing`, `code-analyzer`, `code-fixer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-25T17:02:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDA2OTI5Ng==",
                                           "createdAt":  "2020-11-26T04:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBcsCNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "sywhang",
                                                                               "createdAt":  "2021-01-17T01:01:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@sywhang ",
                                           "updatedAt":  "2020-11-26T04:38:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Analyzer proposal: EventSource log argument guarding",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing",
                       "help wanted",
                       "feature-request",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49248",
        "createdAt":  "2021-03-05T21:03:44Z",
        "number":  49248,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T21:22:29Z",
        "body":  "### Description\r\n\r\nEventSource\u0027s `WriteEvent(int,params object?[])` and `Write\u003cT\u003e` methods have been annotated with the `RequiresUnreferencedCode `to prevent developers who derive EventSource to get into trimming problems due to serialization issue. Developers need to manually look at the event method arguments and make them safe (either via additional dependecy attributes or if the arguments are primitive)\r\n\r\nAs part of making the [change ](https://github.com/dotnet/runtime/pull/48823) to add the `RequiresUnreferencedCode`, we manually looked at all the library eventsource and ensured that they are safe as described above.\r\n\r\nWe need to add a test (likely a reflection based one) to ensure that these methods continue to be safe\r\n\r\n### Configuration\r\n\r\n.NET 6.0\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nTake a look at similar tests @eerhardt  added for other areas in the library ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjqZkw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTY5MDc1Ng==",
                                           "createdAt":  "2021-03-05T21:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n### Description\r\n\r\nEventSource\u0027s WriteEvent(int,params object?[]) and Write\u003cT\u003e methods have been annotated with the RequiresUnreferencedCode to prevent developers who derive EventSource to get into trimming problems due to serialization issue. Developers need to manually look at the event method arguments and make them safe (either via additional dependecy attributes or if the arguments are primitive)\r\n\r\nAs part of making the [change ](https://github.com/dotnet/runtime/pull/48823) to add the RequiresUnreferencedCode, we manually looked at all the library eventsource and ensured that they are safe as described above.\r\n\r\nWe need to add a test (likely a reflection based one) to ensure that these methods continue to be safe\r\n\r\n### Configuration\r\n\r\n.NET 6.0\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nTake a look at similar tests @eerhardt  added for other areas in the library \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-05T21:03:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTY5MTMwOA==",
                                           "createdAt":  "2021-03-05T21:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @tannergooding, @sbomer\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n### Description\r\n\r\nEventSource\u0027s WriteEvent(int,params object?[]) and Write\u003cT\u003e methods have been annotated with the RequiresUnreferencedCode to prevent developers who derive EventSource to get into trimming problems due to serialization issue. Developers need to manually look at the event method arguments and make them safe (either via additional dependecy attributes or if the arguments are primitive)\r\n\r\nAs part of making the [change ](https://github.com/dotnet/runtime/pull/48823) to add the RequiresUnreferencedCode, we manually looked at all the library eventsource and ensured that they are safe as described above.\r\n\r\nWe need to add a test (likely a reflection based one) to ensure that these methods continue to be safe\r\n\r\n### Configuration\r\n\r\n.NET 6.0\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\nTake a look at similar tests @eerhardt  added for other areas in the library \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `linkable-framework`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-05T21:04:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tw9x",
                                           "createdAt":  "2021-07-21T18:46:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "Cannot think of an easy way to add a generic test and moving this issue the next version. The best practice for any new Framework `EventSource `should have the following flavor (and avoid the need for a generic testing approach) but need to get consensus and evangelize this;\r\n\r\n- Ensure that the tests for the new `EventSource `run in trimmed mode (will ensure that the above problem will be caught)\r\n- Ensure that there is no unused code in the new `EventSource `since the trimmer will keep all the members as specified in the class tagging. See #54859 for more details\r\n",
                                           "updatedAt":  "2021-07-21T18:46:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4094RY",
                                           "createdAt":  "2021-07-28T21:33:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "Added a manifest trimming test, #56463. And there is a good smoke `EventSource `test in the same directory that should cover the basic scenarios testing for .NET6",
                                           "updatedAt":  "2021-07-28T21:33:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOpmT",
                                           "createdAt":  "2022-07-07T21:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving older issues to the Future milestone as it is unlikely we will have time to address this in the .NET 7 timeframe",
                                           "updatedAt":  "2022-07-07T21:22:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add a unit test to validate FX EventSource Events that are trimmer suppressed",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49659",
        "createdAt":  "2021-03-15T17:39:17Z",
        "number":  49659,
        "author":  "sywhang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBj6jdQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josalem",
                                            "createdAt":  "2021-03-15T18:05:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2021-03-15T20:51:59Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "benaadams",
                                            "createdAt":  "2021-03-15T20:52:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2021-03-16T05:34:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-03-16T06:05:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-03-16T06:05:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hoyosjs",
                                            "createdAt":  "2021-03-17T00:50:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2021-03-18T07:52:32Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-07-23T21:29:57Z",
        "body":  "EventSource suffers from reflection-heavy ops upon initialization to generate manifest for the event data where it uses reflection to look up every single event-annotated method + their attributes defined to generate the manifest data.\r\n\r\nThis issue tracks the work to assist the generation of these manifest data for EventSources in System.Private.CoreLib to use source generator. Once this is successful, we can look into expanding the set of EventSources in the BCL to use the generator. \r\n\r\nRelated issues: \r\n#49592 #45466\r\n\r\ncc @tommcdon @josalem ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL69aqg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTYxMjgzNw==",
                                           "createdAt":  "2021-03-15T17:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEventSource suffers from reflection-heavy ops upon initialization to generate manifest for the event data where it uses reflection to look up every single event-annotated method + their attributes defined to generate the manifest data.\r\n\r\nThis issue tracks the work to assist the generation of these manifest data for EventSources in System.Private.CoreLib to use source generator. Once this is successful, we can look into expanding the set of EventSources in the BCL to use the generator. \r\n\r\nRelated issues: \r\n#49592 #45466\r\n\r\ncc @tommcdon @josalem \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esywhang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esywhang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `enhancement`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-15T17:39:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTc0ODIzMQ==",
                                           "createdAt":  "2021-03-15T20:59:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e Once this is successful, we can look into expanding the set of EventSources in the BCL to use the generator.\r\n\r\nFor scope on other `EventSource`s (from https://github.com/dotnet/runtime/issues/43390#issuecomment-794874647)\r\n\r\nFor a standard ASP.NET Core site + ApplicationInsights (e.g. https://themesof.net/) it creates 27 `EventSource`s on start-up.\r\n\r\nWith all the ones not in `System.Private.CoreLib.dll` doing reflection to get the `Guid` to use for the constructor (as that overload is not available outside SPCL):\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/110577951-a2e73300-815b-11eb-8141-c2671ac6fcff.png)",
                                           "updatedAt":  "2021-03-15T20:59:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDAyMTE2Mg==",
                                           "createdAt":  "2021-03-16T07:23:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBkNLHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-03-16T18:40:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-03-18T07:53:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-03-20T09:18:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sywhang",
                                           "body":  "Thanks for the additional info @benaadams and all the great feedback you\u0027ve given us so far in the tracing space and the initial source generator work you did that I\u0027m building on top of : )\r\n\r\nI\u0027m hopeful that we\u0027ll be able to get this into System.Private.CoreLib and BCL in .NET 6. I\u0027m going to try my best to push this up the stack as much as time allows, but it may not be possible to push it up the stack before the .NET 6 deadline if other work takes over in the meantime. If that happens, I\u0027ll still push this through the next release version of .NET. \r\n\r\nJust for context, the main challenge around the source generator work so far has been around figuring out the versioning + customer adoption story (i.e. can we ship it with Roslyn analyzers to assist developers to move towards source-generator friendly EventSources, should this ship as its own NuGet package or with the SDK, etc.), trying to come up with a reasonable public API that wouldn\u0027t break existing code written around EventSources (unfortunately self-describing EventSources are not exactly source-generator friendly with some methods allowing anonymous objects to be logged) as well as defining the set of APIs that would allow the minimal set of changes for one to move over to source-generated EventSource.\r\n\r\nMany of these can go unanswered for BCL/System.Private.CoreLib EventSources, but to push it up the stack, some of these questions will need to be answered. \r\n",
                                           "updatedAt":  "2021-03-16T07:23:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Use source generator to assist EventSource initialization for SPCL EventSources",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56073",
        "createdAt":  "2021-07-21T07:56:10Z",
        "number":  56073,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-07T08:03:15Z",
        "body":  "- BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity()\r\n    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: ed27419e-317a-43a7-be88-6b793b146141\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 33f1669b-7f05-46a8-bf4c-f321de6083f6\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n\r\ncc @steveisok ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpdb0og==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40sGMM",
                                           "createdAt":  "2021-07-21T07:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-21T07:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40sH2L",
                                           "createdAt":  "2021-07-21T08:06:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaximLipnin",
                                           "body":  "Those tests have been added recently in https://github.com/dotnet/runtime/pull/55625. They are skipped for WASM, I\u0027m not sure if we want to do the same for Apple mobile platforms.",
                                           "updatedAt":  "2021-07-21T08:06:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40s9Ri",
                                           "createdAt":  "2021-07-21T13:43:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity()\r\n    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: ed27419e-317a-43a7-be88-6b793b146141\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 33f1669b-7f05-46a8-bf4c-f321de6083f6\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n\r\ncc @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-21T13:43:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tBOa",
                                           "createdAt":  "2021-07-21T14:04:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@MaximLipnin Can you check to see what the value is for `\u003cEventSourceSupport\u003e` ?",
                                           "updatedAt":  "2021-07-21T14:04:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tHIL",
                                           "createdAt":  "2021-07-21T14:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaximLipnin",
                                           "body":  "@steveisok Something close to the mobile targets is https://github.com/dotnet/runtime/blob/main/eng/testing/tests.mobile.targets#L26 but we don\u0027t set EAT for the staging lanes so perhaps `EventSourceSupport` is not set ",
                                           "updatedAt":  "2021-07-21T14:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tKcZ",
                                           "createdAt":  "2021-07-21T14:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Do we build with diagnostics tracing component support enabled when running tests on mobile, link or deploy needed components? I guess this tests will end up in ves_icall_System_Diagnostics_Tracing_EventPipeInternal_EventActivityIdControl and if we don\u0027t have component support loaded that will be a nop operation so won\u0027t set thread activity ID and that will trigger the assert in this test.",
                                           "updatedAt":  "2021-07-21T14:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tL3i",
                                           "createdAt":  "2021-07-21T15:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I don\u0027t think we do.  We probably should skip these for the time being.",
                                           "updatedAt":  "2021-07-21T15:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tL6m",
                                           "createdAt":  "2021-07-21T15:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity()\r\n    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: ed27419e-317a-43a7-be88-6b793b146141\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 33f1669b-7f05-46a8-bf4c-f321de6083f6\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n\r\ncc @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `os-android`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-21T15:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tL9n",
                                           "createdAt":  "2021-07-21T15:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @directhex\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity()\r\n    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.NotEqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.NotEqual() Failure\\nExpected: Not 00000000-0000-0000-0000-000000000000\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.ActivityFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: ed27419e-317a-43a7-be88-6b793b146141\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdBeforeEventFlowsAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n- BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync\r\n```\r\n\u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n    \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 33f1669b-7f05-46a8-bf4c-f321de6083f6\\nActual:   00000000-0000-0000-0000-000000000000]]\u003e\u003c/message\u003e\r\n    \u003cstack-trace\u003e\u003c![CDATA[   at BasicEventSourceTests.ActivityTracking.SetCurrentActivityIdAfterEventDoesNotFlowAsync()\r\n    --- End of stack trace from previous location ---]]\u003e\r\n    \u003c/stack-trace\u003e\r\n\u003c/failure\u003e\r\n```\r\n\r\ncc @steveisok \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximLipnin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-mono`, `area-System.Diagnostics.Tracing`, `os-android`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-21T15:02:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HTJZt",
                                           "createdAt":  "2022-07-27T02:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "These are now enabled.  Closing.",
                                           "updatedAt":  "2022-07-27T02:39:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IFs-x",
                                           "createdAt":  "2022-08-09T14:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "These are still failing on tvOS",
                                           "updatedAt":  "2022-08-09T14:26:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iNUKg",
                                           "createdAt":  "2025-03-13T14:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I\u0027m trying to make this work on browser now. \nAnd I\u0027m not clear how this could work on Mono. I can\u0027t find what\u0027s calling `ActivityTracker.Instance.Enable()` on Mono",
                                           "updatedAt":  "2025-03-13T14:09:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iOuCm",
                                           "createdAt":  "2025-03-13T15:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@pavelsavara If EventSource is being initialized, it [enables an ActivityTracker instance](https://github.com/dotnet/runtime/blob/721686ed840e8d2609b1f7e32e7f1d6419a5b655/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L1661), so whenever events are being written to EventPipe on Mono, OnStart could be called from [WriteEventVarArgs](https://github.com/dotnet/runtime/blob/721686ed840e8d2609b1f7e32e7f1d6419a5b655/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L2013) or [WriteEventWithRelatedActivityIdCore](https://github.com/dotnet/runtime/blob/721686ed840e8d2609b1f7e32e7f1d6419a5b655/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L1389) and that could be the things calling `ActivityTracker.Instance.Enable()`",
                                           "updatedAt":  "2025-03-13T15:57:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iO15A",
                                           "createdAt":  "2025-03-13T16:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e enables an ActivityTracker instance\n\nYes, but that\u0027s just instance, but not `Enable()` and `ActivityTracker.OnStart` would enable it only if you have `TplEventSource` enabled, right ?\n\nhttps://github.com/dotnet/runtime/blob/9c9178f37155eae923db9b686538297bd3afcfc8/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/ActivityTracker.cs#L47-L59",
                                           "updatedAt":  "2025-03-13T16:05:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iPoah",
                                           "createdAt":  "2025-03-13T17:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJ1D1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-03-13T17:05:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Right. I think what\u0027s happening is the test has a custom EventSource/EventListener that [looks for TplEventSource being created](https://github.com/dotnet/runtime/blob/9c9178f37155eae923db9b686538297bd3afcfc8/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/ActivityTracking.cs#L144-L147) to enable that provider. Then later in these tests `SetCurrentActivityIdBeforeEventFlowsAsync` and `SetCurrentActivityIdAfterEventDoesNotFlowAsync`, they call `SetCurrentThreadActivityId` which then instantiates [`TplEventSource.Log`](https://github.com/dotnet/runtime/blob/9c9178f37155eae923db9b686538297bd3afcfc8/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L615).",
                                           "updatedAt":  "2025-03-13T17:00:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iPspL",
                                           "createdAt":  "2025-03-13T17:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Thanks",
                                           "updatedAt":  "2025-03-13T17:05:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iQxN1",
                                           "createdAt":  "2025-03-13T18:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e they call `SetCurrentThreadActivityId` which then instantiates `TplEventSource.Log`\n\nThat solves how it works in the unit test, but it would not make it work in production, unless user code also enables `System.Threading.Tasks.TplEventSource` in the `OnEventSourceCreated`. That sounds fishy.\n\nIt seems to me that CoreCLR does it always when `FEATURE_EVENT_TRACE` is enabled. That\u0027s always true, right ?\n\n`FireAssemblyLoadStart` -\u003e `ActivityTracker::Start` -\u003e `AssemblyLoadContext.StartAssemblyLoad` -\u003e `ActivityTracker.Instance.Enable()`\n\nShould we do `ActivityTracker.Instance.Enable()` fist time that any `EventListener` is created ? \n\nOr do something Mono specific when ? Maybe any time that we link `libmono-component-diagnostics_tracing-static.lib` ?\n\ncc @lewing \n",
                                           "updatedAt":  "2025-03-13T18:12:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iQ_rP",
                                           "createdAt":  "2025-03-13T18:39:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Yeah, I think you\u0027re right that CoreCLR will enable ActivityTracker by default, but I don\u0027t know if Mono also should. If Browser needs ActivityTracking, I think we could try turning it on in 10. @lateralusX, do you happen to know if ActivityTracker was not on by default on Mono for a particular reason?",
                                           "updatedAt":  "2025-03-13T18:39:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iXj1f",
                                           "createdAt":  "2025-03-14T09:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJ95mg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-03-14T09:12:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mdh1418",
                                                                               "createdAt":  "2025-03-14T15:10:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "The trigger in CoreCLR is when its raising FireEtwAssemblyLoadStart/FireEtwAssemblyLoadStop event pairs (and there is a listener registering for those events):\n\nhttps://github.com/dotnet/runtime/blob/a9b700a1f6f3f524595393433bda6115b39afd71/src/coreclr/binder/bindertracing.cpp#L28\n\nThat will call into ActivityTracker start/stop that will end up in the managed call that will enable ActivityTracker.Instance.Enable(). The other option is to enable specific keyword on the TPLEventSource. Those are the only two scenarios actively supporting activity tracking and since activity tracking comes with some overhead it only gets enabled when really used.\n\nMono never ported the specific assembly start/stop events, probably since tools at that point didn\u0027t consume them, we just emit FireEtwModuleLoad/FireEtwModuleUnload and FireEtwAssemblyLoad/FireEtwAssemblyUnload. Since Mono don\u0027t support the assembly loader events that uses activity tracking, it will only enable it in the scenario that we support, when using TPLEventSource listener with TasksFlowActivityIds keyword.\n\nIf we decide to support FireEtwAssemblyLoadStart/FireEtwAssemblyLoadStop then we would enable it in similar way as CoreClr does.",
                                           "updatedAt":  "2025-03-14T09:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l1vSi",
                                           "createdAt":  "2025-04-07T07:46:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "So the question is when wasm/browser should enable activity tracking.\n\nIt seems to me that the \"activity\" is allocated any time when `EventSource` method with `Start` and `Stop` suffix is called.\n\nThe interesting example is `class HttpTelemetry` with `RequestStart`, `RequestStop`, `RequestHeadersStart`, `RequestHeadersStop`, `RequestContentStart`, `RequestContentStop`, `ResponseHeadersStart`, `ResponseHeadersStop`, `ResponseContentStart` and `ResponseContentStop`. There are more events for other OS where HTTP is on top of socket.\n\n\nAll of this works when `DiagnosticsHandler` is enabled. Via `System.Net.Http.EnableActivityPropagation` via `HttpActivityPropagationSupport` which is `false` for [browser](https://github.com/dotnet/sdk/blob/9d75e4cc419c047cd8c6de205e0addc7e6f466bc/src/BlazorWasmSdk/Targets/Microsoft.NET.Sdk.BlazorWebAssembly.6_0.targets#L49).\n\nAlso maybe `MetricsHandler` when is enabled ?\nWhich at the moment is not guarded, but I think it should be behind `\u003cMetricsSupport\u003e` \u0026 `System.Diagnostics.Metrics.Meter.IsSupported`. And that is `false` by default on browser.\n\n\u003e since activity tracking comes with some overhead it only gets enabled when really used.\n\nThe `HttpTelemetry` nor `MetricsHandler` nor `DiagnosticsHandler` doesn\u0027t call the `ActivityTracker.Instance.Enable()` at the moment. \nShould it do that ?\n\nWhat other EventSources should ?",
                                           "updatedAt":  "2025-04-07T08:03:14Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[tvOS] Test failures in System.Diagnostics.Tracing.Tests",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "os-android",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56154",
        "createdAt":  "2021-07-22T14:20:26Z",
        "number":  56154,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:33:29Z",
        "body":  "Using `EventSource `to log data to a listener is fairly advanced ([this](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L11-L164) blurb from `EventSource `describes the high level details). Even though .NET runtime take a lot of effort to hide the implementation details from developers who want to write their own `EventSource`, it can be still quite challenging to do so. A practical challenge that a user can run into can be seen at #27635.\r\n\r\nCreating an `EventSource ` and using it in a trimmed applications make this situation almost untenable currently. Issue #32863 discusses some of the challenges. The trimmer has to reason about the `EventSource `in libraries as well since there are increasingly proliferating number of `EventSources `in our runtime libraries.\r\n\r\nIn .NET6, there was an effort to address trimming challenges with enhancements to the trimmer and changes to the `EventSource `code. The details below captures the current status with regards the unique characteristics of `EventSource `in trim mode;\r\n1.\t`EventSource `is tagged with the attribute, `DynamicallyAccessedMembersAttribute`, at the class level. This was done primarily to address generating a [manifest ](https://github.com/dotnet/runtime/blob/b937677e8f8601848d29bc072a93cc0c6e21576d/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L2822)for a derived `EventSource `type.      \r\n                - This means that the trimmer will preserve members of the full type inheritance graph for EventSource. Specifically, this can lead to situation like, #54859, where the current expectation from runtime library developers that the trimmer will get rid of unused methods cannot be honored.\r\n2.\t`EventSource `has some event methods that are marked with `RequiresUnreferencedCodeAttribute `with parameters that could take non-primitive types. This was primarily to address the inability for the trimmer to handle complex serialization (there is a type recursion involving code [here](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/TraceLogging/TypeAnalysis.cs#L64))\r\n                   - Any library `EventSource `that uses these methods need to be managed usually by adding `UnconditionalSuppressMessageAttribute` attribute after checking that the specific `EventSource `does not pass any non-primitive types to the parent method (or take steps to preserve the complex type).\r\n3.\tThe above 2 can interact in complex ways and the trimmer needs to do the right thing\r\n                   - `EventSources `that do not use the complex parent methods to send event data should not get any warnings\r\n                   - `EventSources `that do use the complex parent need to see the warning with actionable details\r\n4.\tIn spite of the work above, `EventSource `and its derived types continue to be treated in a special way in the trimmer in library mode trimming. In .NET 6.0, we moved the special handling logic to be only applicable in library mode via a flag (named `DisableEventSourceSpecialHandling `that is set to false in library mode). Specifically, preserve all static fields in nested types named `\"Keywords\", \"Tasks\", \"Opcodes\"` in `EventSource `derived types. Also preserve public instance methods that has the EventDataAttribute attribute.\r\n\r\nIt is not reasonable to expect developers to understand the intricacies of trimming when they write event sources. We should make trimming `EventSource `seamless. Some options we should consider include\r\n1.\t(Suggestion from @vitek-karas) Refactor `EventSource` code such that contract definition and implementation details are separate.\r\n2.\tMake progress on source generators for `EventSources `\r\n3.  Encourage runtime library `EventSource` tests to run in trim mode\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMGVOQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40v0ww",
                                           "createdAt":  "2021-07-22T14:20:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nUsing `EventSource `to log data to a listener is fairly advanced ([this](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L11-L164) blurb from `EventSource `describes the high level details). Even though .NET runtime take a lot of effort to hide the implementation details from developers who want to write their own `EventSource`, it can be still quite challenging to do so. A practical challenge that a user can run into can be see [here](https://github.com/dotnet/runtime/issues/27635).\r\n\r\nCreating an `EventSource ` and using it in a trimmed applications make this situation almost untenable currently. [This ](https://github.com/dotnet/runtime/issues/32863)issue discusses some of the challenges. The trimmer has to reason about the `EventSource `in libraries as well since there are increasingly proliferating number of `EventSources `in our runtime libraries.\r\n\r\nIn .NET6, there was an effort to address trimming challenges with enhancements to the trimmer and changes to the `EventSource `code. The details below captures the current status with regards the unique characteristics of `EventSource `in trim mode;\r\n1.\t`EventSource `is tagged with the attribute, `DynamicallyAccessedMembersAttribute`, at the class level. This was done primarily to address generating a [manifest ](https://github.com/dotnet/runtime/blob/b937677e8f8601848d29bc072a93cc0c6e21576d/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L2822)for a derived `EventSource `type.      \r\n                - This means that the trimmer will preserve members of the full type inheritance graph for EventSource. Specifically, this can lead to situation like, #32863, where the current expectation from runtime library developers that the trimmer will get rid of unused methods cannot be honored.\r\n2.\t`EventSource `has some event methods that are marked with `RequiresUnreferencedCodeAttribute `with parameters that could take non-primitive types. This was primarily to address the inability for the trimmer to handle complex serialization (there is a type recursion involving code [here](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/TraceLogging/TypeAnalysis.cs#L64))\r\n                   - Any library `EventSource `that uses these methods need to be managed usually by adding `UnconditionalSuppressMessageAttribute` attribute after checking that the specific `EventSource `does not pass any non-primitive types to the parent method (or take steps to preserve the complex type).\r\n3.\tThe above 2 can interact in complex ways and the trimmer needs to do the right thing\r\n                   - `EventSources `that do not use the complex parent methods to send event data should not get any warnings\r\n                   - `EventSources `that do use the complex parent need to see the warning with actionable details\r\n4.\tIn spite of the work above, `EventSource `and its derived types continue to be treated in a special way in the trimmer in library mode trimming. In .NET 6.0, we moved the special handling logic to be only applicable in library mode via a flag (named `DisableEventSourceSpecialHandling `that is set to false in library mode). Specifically, preserve all static fields in nested types named `\"Keywords\", \"Tasks\", \"Opcodes\"` in `EventSource `derived types. Also preserve public instance methods that has the EventDataAttribute attribute.\r\n\r\nIt is not reasonable to expect developers to understand the intricacies of trimming when they write event sources. We should make trimming `EventSource `seamless. Some options we should consider include\r\n1.\tEncourage runtime library `EventSource` tests to run in trim mode\r\n2.\tMake progress on source generators for `EventSources`\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-22T14:20:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40v1AK",
                                           "createdAt":  "2021-07-22T14:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "cc @vitek-karas, @sbomer, @eerhardt, @agocke, @MichalStrehovsky ",
                                           "updatedAt":  "2021-07-22T14:21:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wZU5",
                                           "createdAt":  "2021-07-22T17:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJlV1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2021-07-23T04:45:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LakshanF",
                                                                               "createdAt":  "2021-07-28T21:43:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2022-01-12T13:53:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Event source is an example of reflection-based serializer. Every reflection-based serializer faces very similar set of problems with trimming. I believe source generators are the only sustainable way to solve them.",
                                           "updatedAt":  "2021-07-22T17:53:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Improve EventSource trimming",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56378",
        "createdAt":  "2021-07-27T12:49:32Z",
        "number":  56378,
        "author":  "noahfalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:34:34Z",
        "body":  "Normally when ETW or EventPipe sessions end a disable command is sent to any EventSources that were being monitored to indicate that monitoring has stopped. EventListener also stops listening when it is disposed, but it doesn\u0027t provide any notification that it is doing so.\r\n\r\nRepro:\r\n```C#\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        \r\n        MyEventSource source = new MyEventSource();\r\n        using (MyEventListener listener = new MyEventListener())\r\n        {\r\n            listener.EnableEvents(source, EventLevel.Informational);\r\n            Debug.Assert(source.Enabled);\r\n            // uncommenting this line will make the assert below pass, but it shouldn\u0027t be necessary\r\n            //listener.DisableEvents(source);\r\n        }\r\n        Debug.Assert(!source.Enabled); // once the listener is disposed we expect OnEventCommand to be called with a disable command\r\n    }\r\n}\r\n\r\n[EventSource(Name =\"MyEventSource\")]\r\npublic class MyEventSource : EventSource\r\n{\r\n    public bool Enabled;\r\n\r\n    protected override void OnEventCommand(EventCommandEventArgs command)\r\n    {\r\n        if(command.Command == EventCommand.Enable)\r\n        {\r\n            Enabled = true;\r\n        }\r\n        else\r\n        {\r\n            Enabled = false;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyEventListener : EventListener\r\n{\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOXtLQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc405e0t",
                                           "createdAt":  "2021-07-27T12:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNormally when ETW or EventPipe sessions end a disable command is sent to any EventSources that were being monitored to indicate that monitoring has stopped. EventListener also stops listening when it is disposed, but it doesn\u0027t provide any notification that it is doing so.\r\n\r\nRepro:\r\n```C#\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        \r\n        MyEventSource source = new MyEventSource();\r\n        using (MyEventListener listener = new MyEventListener())\r\n        {\r\n            listener.EnableEvents(source, EventLevel.Informational);\r\n            Debug.Assert(source.Enabled);\r\n            // uncommenting this line will make the assert below pass, but it shouldn\u0027t be necessary\r\n            //listener.DisableEvents(source);\r\n        }\r\n        Debug.Assert(!source.Enabled); // once the listener is disposed we expect OnEventCommand to be called with a disable command\r\n    }\r\n}\r\n\r\n[EventSource(Name =\"MyEventSource\")]\r\npublic class MyEventSource : EventSource\r\n{\r\n    public bool Enabled;\r\n\r\n    protected override void OnEventCommand(EventCommandEventArgs command)\r\n    {\r\n        if(command.Command == EventCommand.Enable)\r\n        {\r\n            Enabled = true;\r\n        }\r\n        else\r\n        {\r\n            Enabled = false;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyEventListener : EventListener\r\n{\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enoahfalk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T12:49:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Disposing EventListener doesn\u0027t send disable command",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58546",
        "createdAt":  "2021-09-02T10:24:00Z",
        "number":  58546,
        "author":  "taozuhong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-21T21:25:45Z",
        "body":  "### Background and motivation\n\nWant to write a clear message via TraceSource to its listener, so we need to add methods:\r\nWrite\r\nWriteLine\n\n### API Proposal\n\n...\n\n### API Usage\n\n```C#\r\n// Fancy the value\r\nvar traceSource = new TraceSource(\"sample\", SourceLevels.All);\r\ntraceSource.Write(\"Clear message\");\r\ntraceSource.WriteLine(\"Clear message\");\r\n```     \r\n\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONlR4Zw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42VHhn",
                                           "createdAt":  "2021-09-02T10:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWant to write a clear message via TraceSource to its listener, so we need to add methods:\r\nWrite\r\nWriteLine\n\n### API Proposal\n\n...\n\n### API Usage\n\n```C#\r\n// Fancy the value\r\nvar traceSource = new TraceSource(\"sample\", SourceLevels.All);\r\ntraceSource.Write(\"Clear message\");\r\ntraceSource.WriteLine(\"Clear message\");\r\n```     \r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etaozuhong\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-02T10:24:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: TraceSource add Write serie methods",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65938",
        "createdAt":  "2022-02-27T23:47:14Z",
        "number":  65938,
        "author":  "jeffhandley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-17T23:35:25Z",
        "body":  "[Cleanup Issue-URLs in Code · Issue #63902 · dotnet/runtime](https://github.com/dotnet/runtime/issues/63902) identified a workaround that was applied to `ProcessEvent` for when event source is disabled via a feature switch. The comment indicates the \"simple fix\" should be reconsidered once #43657 is done. That issue has been closed, but it\u0027s unclear if this workaround is still necessary.\r\n\r\n- The referenced issue is: [Define and implement behavior of tracing functionality when EventSource is disabled via a feature switch · Issue #43657 · dotnet/runtime](https://github.com/dotnet/runtime/issues/43657)\r\n- The PR that introduced this workaround was: [Correctly apply EventSourceSupport feature switch to NativeRuntimeEventSource by vitek-karas · Pull Request #43602 · dotnet/runtime](https://github.com/dotnet/runtime/pull/43602)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f04a24249835096eea1a1a66e4af03cfec5ed32b/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs#L40-L44\r\n\r\nThe applied fix should be reconsidered per the comment to determine if a different fix should be made. With the findings we should either apply a different fix, update the comment to reflect it\u0027s a permanent fix as-is, or update the code comment to reference this open issue for tracking.\r\n\r\n/cc @deeprobin",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPtmQDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-zpg0",
                                           "createdAt":  "2022-02-27T23:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Cleanup Issue-URLs in Code · Issue #63902 · dotnet/runtime](https://github.com/dotnet/runtime/issues/63902) identified a workaround that was applied to `ProcessEvent` for when event source is disabled via a feature switch. The comment indicates the \"simple fix\" should be reconsidered once #43657 is done. That issue has been closed, but it\u0027s unclear if this workaround is still necessary.\r\n\r\n- The referenced issue is: [Define and implement behavior of tracing functionality when EventSource is disabled via a feature switch · Issue #43657 · dotnet/runtime](https://github.com/dotnet/runtime/issues/43657)\r\n- The PR that introduced this workaround was: [Correctly apply EventSourceSupport feature switch to NativeRuntimeEventSource by vitek-karas · Pull Request #43602 · dotnet/runtime](https://github.com/dotnet/runtime/pull/43602)\r\n\r\nhttps://github.com/dotnet/runtime/blob/f04a24249835096eea1a1a66e4af03cfec5ed32b/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/NativeRuntimeEventSource.cs#L40-L44\r\n\r\nThe applied fix should be reconsidered per the comment to determine if a different fix should be made. With the findings we should either apply a different fix, update the comment to reflect it\u0027s a permanent fix as-is, or update the code comment to reference this open issue for tracking.\r\n\r\n/cc @deeprobin\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejeffhandley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-27T23:47:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-2ZAM",
                                           "createdAt":  "2022-02-28T16:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs ",
                                           "updatedAt":  "2022-02-28T16:39:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Review workaround for ProcessEvent when event source is disabled",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70688",
        "createdAt":  "2022-06-13T18:53:54Z",
        "number":  70688,
        "author":  "mikelle-rogers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-15T04:26:59Z",
        "body":  "Transferred from https://github.com/microsoft/perfview/issues/1622 in perfview repo opened by Zheltov in the diagnostics repo.\r\n\r\nHello everyone!\r\n\r\nI have been using DiagnosticsClient for subscribe to EventSource in same process. I have got events successfully, but TraceEvent.FormattedMessage is always null. However, i can see the message in Diagnostics Events window in Visual Studio.\r\nWhat happened?\r\n\r\nusing Microsoft.Diagnostics.NETCore.Client;\r\nusing Microsoft.Diagnostics.Tracing;\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ETWSelfSignedAgentTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            RunAgent();\r\n\r\n            Task.Run(() =\u003e\r\n            {\r\n                for(int i =0; i \u003c int.MaxValue; i++)\r\n                {\r\n                    ServiceEventSource.Log.Iteration(i);\r\n                    Thread.Sleep(1000);\r\n                }\r\n            });\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static void RunAgent()\r\n        {\r\n            Task.Factory.StartNew(() =\u003e\r\n            {\r\n                var client = new DiagnosticsClient(Process.GetCurrentProcess().Id);\r\n                using var session = client.StartEventPipeSession(new EventPipeProvider[] { new EventPipeProvider(\"ExampleEventSource\", EventLevel.Verbose, long.MaxValue) });\r\n                using var source = new EventPipeEventSource(session.EventStream);\r\n                source.Dynamic.All += (TraceEvent traceEvent) =\u003e\r\n                {\r\n                    Console.Write($\"{traceEvent.ProviderName} [{traceEvent.Level}] FormattedMessage: {traceEvent.FormattedMessage}\");\r\n                    foreach (string payloadName in traceEvent.PayloadNames)\r\n                    {\r\n                        Console.Write($\"{payloadName}: {traceEvent.PayloadStringByName(payloadName)}\");\r\n                    }\r\n                    Console.WriteLine();\r\n                };\r\n\r\n                try\r\n                {\r\n                    source.Process();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Console.WriteLine(e.ToString());\r\n                }\r\n            },\r\n            TaskCreationOptions.LongRunning);\r\n        }\r\n    }\r\n\r\n    [EventSource(Name = \"ExampleEventSource\")]\r\n    public sealed class ServiceEventSource : EventSource\r\n    {\r\n        public static readonly ServiceEventSource Log = new ServiceEventSource();\r\n\r\n        private ServiceEventSource() : base() { }\r\n\r\n        [Event(1, Level = EventLevel.Informational, Message = \"It`s {0} iteration\")]\r\n        public void Iteration(int i)\r\n        {\r\n            WriteEvent(1, i);\r\n        }\r\n    }\r\n}\r\nim_console\r\n\r\n![image](https://user-images.githubusercontent.com/45022607/173424235-ec8ad48e-0ca6-4288-b106-98f41ba42692.png)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORNHQ1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EzLOs",
                                           "createdAt":  "2022-06-13T18:53:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-13T18:53:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E0dDW",
                                           "createdAt":  "2022-06-14T01:04:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTransferred from https://github.com/microsoft/perfview/issues/1622 in perfview repo opened by Zheltov in the diagnostics repo.\r\n\r\nHello everyone!\r\n\r\nI have been using DiagnosticsClient for subscribe to EventSource in same process. I have got events successfully, but TraceEvent.FormattedMessage is always null. However, i can see the message in Diagnostics Events window in Visual Studio.\r\nWhat happened?\r\n\r\nusing Microsoft.Diagnostics.NETCore.Client;\r\nusing Microsoft.Diagnostics.Tracing;\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ETWSelfSignedAgentTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            RunAgent();\r\n\r\n            Task.Run(() =\u003e\r\n            {\r\n                for(int i =0; i \u003c int.MaxValue; i++)\r\n                {\r\n                    ServiceEventSource.Log.Iteration(i);\r\n                    Thread.Sleep(1000);\r\n                }\r\n            });\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static void RunAgent()\r\n        {\r\n            Task.Factory.StartNew(() =\u003e\r\n            {\r\n                var client = new DiagnosticsClient(Process.GetCurrentProcess().Id);\r\n                using var session = client.StartEventPipeSession(new EventPipeProvider[] { new EventPipeProvider(\"ExampleEventSource\", EventLevel.Verbose, long.MaxValue) });\r\n                using var source = new EventPipeEventSource(session.EventStream);\r\n                source.Dynamic.All += (TraceEvent traceEvent) =\u003e\r\n                {\r\n                    Console.Write($\"{traceEvent.ProviderName} [{traceEvent.Level}] FormattedMessage: {traceEvent.FormattedMessage}\");\r\n                    foreach (string payloadName in traceEvent.PayloadNames)\r\n                    {\r\n                        Console.Write($\"{payloadName}: {traceEvent.PayloadStringByName(payloadName)}\");\r\n                    }\r\n                    Console.WriteLine();\r\n                };\r\n\r\n                try\r\n                {\r\n                    source.Process();\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Console.WriteLine(e.ToString());\r\n                }\r\n            },\r\n            TaskCreationOptions.LongRunning);\r\n        }\r\n    }\r\n\r\n    [EventSource(Name = \"ExampleEventSource\")]\r\n    public sealed class ServiceEventSource : EventSource\r\n    {\r\n        public static readonly ServiceEventSource Log = new ServiceEventSource();\r\n\r\n        private ServiceEventSource() : base() { }\r\n\r\n        [Event(1, Level = EventLevel.Informational, Message = \"It`s {0} iteration\")]\r\n        public void Iteration(int i)\r\n        {\r\n            WriteEvent(1, i);\r\n        }\r\n    }\r\n}\r\nim_console\r\n\r\n![image](https://user-images.githubusercontent.com/45022607/173424235-ec8ad48e-0ca6-4288-b106-98f41ba42692.png)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emikelle-rogers\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-14T01:04:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TraceEvent Formatted Message is always null",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77520",
        "createdAt":  "2022-10-26T23:10:51Z",
        "number":  77520,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T21:08:18Z",
        "body":  "Eventsource can provide a lot of useful information for diagnosing problems. It works well when you can isolate the machine and application so that it is the only source of trace messages.\r\n\r\nIf however you are trying to analyze performance or errors in a high load environment, then turning on diagnostic logging will produce a fire-hose of information, and the production of that information will have an impact on the performance (the schrodinger\u0027s cat problem).\r\n\r\nWhat you ideally want to be able to do is to sample the tracing, but sampling should be on a \"request\" basis. You want to be able to mark a request as sampled, and then collect detailed logs, just for those requests. This needs to flow through the async call stacks and trace all work that is done on its behalf.\r\n\r\nAs an illustration, we have been trying to do better analysis of YARP performance, to better understand where time is going in processing requests, and why we are not getting as good results as some other products. In the test lab, we are running around 200k req/s and each request is taking ~800ms. If we turn on tracing, it will have an adverse effect on perf. What we want to be able to do is set a flag on maybe 0.1% of requests and get detailed logging for them.\r\n\r\n@MihaZupan has done an experiment where he is using Activity.Record as the bit to indicate the request should be sampled, and a custom build of System.Net. He came up with the following results:\r\n\r\n![results](https://raw.githubusercontent.com/samsp-msft/scrap/main/MicrosoftTeams-image.png)\r\n\r\n| Column | Definition |\r\n|---|---|\r\n| win-noevents-sampled | regular YARP with no EventSource enabled |\r\n| win-all-net-verbose-base | enable all System.Net.* and InternalDiagnostics EventSources without any changes to the instrumentation |\r\n| win-all-net-verbose-sampled | enable all System.Net.* and InternalDiagnostics EventSources but with a patched build of runtime that does Activity.Current checks |\r\n| win-sampled-enabled50percent | actively choose to sample 50% of requests (you can see the perf hit is pretty much 50% compared to enabling everything without changes) |\r\n\r\nWhat this says is that actually checking for `Log.IsEnabled() \u0026\u0026 (Activity.Current?.Recorded ?? false)` is not having an impact on performance, and so you can make sample based event profiling pay for play.\r\n\r\nThis makes me think that we should look to have a mechanism build into EventSource to be able to set a log level for activities with the record flag, so that you can easily collect sample-based traces. What is cool about this is that you can collect very detailed traces, including verbose level detail, for a small number of requests, so collect really detailed information, but while having minimal effect on the overall performance of the system. This kind of capability is required to be able to diagnose problems against the running infrastructure without affecting other customers, or overall system performance. If we can enable this for the BCL and other libraries then customers can get a much better picture of what is going on without having to rework the application to detect what is going on.\r\n\r\nYou can then either decide to mark requests at the beginning of processing to be sampled, or use distributed tracing to be able to flow that flag through a graph of services.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTTo-UA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NDfjR",
                                           "createdAt":  "2022-10-26T23:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEventsource can provide a lot of useful information for diagnosing problems. It works well when you can isolate the machine and application so that it is the only source of trace messages.\r\n\r\nIf however you are trying to analyze performance or errors in a high load environment, then turning on diagnostic logging will produce a fire-hose of information, and the production of that information will have an impact on the performance (the schrodinger\u0027s cat problem).\r\n\r\nWhat you ideally want to be able to do is to sample the tracing, but sampling should be on a \"request\" basis. You want to be able to mark a request as sampled, and then collect detailed logs, just for those requests. This needs to flow through the async call stacks and trace all work that is done on its behalf.\r\n\r\nAs an illustration, we have been trying to do better analysis of YARP performance, to better understand where time is going in processing requests, and why we are not getting as good results as some other products. In the test lab, we are running around 200k req/s and each request is taking ~800ms. If we turn on tracing, it will have an adverse effect on perf. What we want to be able to do is set a flag on maybe 0.1% of requests and get detailed logging for them.\r\n\r\n@MihaZupan has done an experiment where he is using Activity.Record as the bit to indicate the request should be sampled, and a custom build of System.Net. He came up with the following results:\r\n\r\n![results](https://raw.githubusercontent.com/samsp-msft/scrap/main/MicrosoftTeams-image.png)\r\n\r\n| Column | Definition |\r\n-----\r\n| win-noevents-sampled | regular YARP with no EventSource enabled |\r\n| win-all-net-verbose-base | enable all System.Net.* and InternalDiagnostics EventSources without any changes to the instrumentation |\r\n| win-all-net-verbose-sampled | enable all System.Net.* and InternalDiagnostics EventSources but with a patched build of runtime that does Activity.Current checks |\r\n| win-sampled-enabled50percent | actively choose to sample 50% of requests (you can see the perf hit is pretty much 50% compared to enabling everything without changes) |\r\n\r\nWhat this says is that actually checking for `Log.IsEnabled() \u0026\u0026 (Activity.Current?.Recorded ?? false)` is not having an impact on performance.\r\n\r\nThis makes me think that we should look to have a mechanism build into EventSource to be able to set a log level for activities with the record flag, so that you can easily collect sample-based traces. What is cool about this is that you can collect very detailed traces, including verbose level detail, for a small number of requests, so collect really detailed information, but while having minimal effect on the overall performance of the system. This kind of capability is required to be able to diagnose problems against the running infrastructure without affecting other customers, or overall system performance. If we can enable this for the BCL and other libraries then customers can get a much better picture of what is going on without having to rework the application to detect what is going on.\r\n\r\nYou can then either decide to mark requests at the beginning of processing to be sampled, or use distributed tracing to be able to flow that flag through a graph of services.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esamsp-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-26T23:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NNbhZ",
                                           "createdAt":  "2022-10-28T19:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@samsp-msft, I think your idea here is a good one.  It\u0027s actually been attempted before - around 2014.  There were a couple of issues that ended up causing us not to ship it.\r\n\r\n1. It was not clear how we were going toggle the sampling bit - specifically how could we toggle it early enough to capture everything.  This was back when we were dealing with IIS and .NET Framework - the landscape is certainly different now.\r\n2. It was not clear which requests should be sampled.  A random sampling is fine as far as I\u0027m concerned, but it would also be nice to be able to turn on sampling for anomalies, such as long requests.  It might just be too late though.\r\n3. We did not have the right events in place to do async causality.\r\n\r\nAttempting this again seems very reasonable - I suspect the async causality may still be an issue, though probably more because the events are very verbose and can have a significant impact on cost.  Out of curiosity, did the experiment also enable the TPL events, or was this just for the System.Net.Http events?",
                                           "updatedAt":  "2022-10-28T19:19:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NNmr3",
                                           "createdAt":  "2022-10-28T20:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "1. In terms of catching everything, are you talking about before .NET \"gets its hands on\" the request. That story is pretty different now with Kestrel and ASP.NET Core. There are ways to have access very early in the request processing. This is done today for TLS and DoS prevention. \r\n\r\n2. That is where Activity.Record comes in - its the property defined for this purpose for Distributed Tracing. So it can be activated by sending in a request with that header as part of Open Telemetry.\r\nI would also expect to have app code at the early part of the request chain be able to decide that it wants to sample say 0.1% of requests and use a counter/randomizer to pick which requests it sets the bit for.\r\n\r\n3. Is that now in place with the activity work?\r\n\r\nAFAIK the experiment was just with System.Net as that is something that @MihaZupan is intimately familiar with. I would love your expertize on how we can make this a real part of the product. In terms of test scenarios, if it can help us with YARP performance, then I think it will have proven its worth.\r\n\r\n",
                                           "updatedAt":  "2022-10-28T20:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NNvJW",
                                           "createdAt":  "2022-10-28T20:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Out of curiosity, did the experiment also enable the TPL events, or was this just for the System.Net.Http events?\r\n\r\nIt was everything in `*System.Net.*`, so in the YARP benchmark that means:\r\n- `System.Net.Http`\r\n- `System.Net.NameResolution`\r\n- `System.Net.Security`\r\n- `System.Net.Sockets`\r\n- `Private.InternalDiagnostics.System.Net.Http`\r\n- `Private.InternalDiagnostics.System.Net.NameResolution`,\r\n- `Private.InternalDiagnostics.System.Net.Security`\r\n- `Private.InternalDiagnostics.System.Net.Sockets`\r\n\r\nThe `System.Net.*` sources are designed to be efficient, and you can turn all of them on with minimal performance impact.\r\nThe `InternalDiagnostics` are there to log \"everything\" that may be useful for debugging (including buffers), and normally come with a significant performance overhead.",
                                           "updatedAt":  "2022-10-28T20:47:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NOj5Q",
                                           "createdAt":  "2022-10-29T00:34:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCusY9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2022-10-29T00:49:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I suspect the async causality may still be an issue\r\n\r\nBrian for your concern around async causality are you worried about:\r\n1. Flowing the sampling information at runtime\r\n2. Reconstructing the causal links between work happening on different threads in the final trace\r\n3. Constructing async-aware stack traces for individual events\r\n4. Something else?\r\n\r\nFor (1) we use AsyncLocal and distributed tracing already depends on us doing a good job of it. As far as I know there are no significant issues at this point.\r\nFor (2) I don\u0027t think it is must-have to make the sampled logs useful. We can stamp events with Activity IDs which correlates them together per-request. In simple cases there won\u0027t be any parallelism intra-request so timestamps are sufficient to infer causation. In more complex cases that do use parallelism then someone might need to acquire a little domain knowledge if they need to infer causation from the events that got logged.\r\nFor (3) David Mason is doing an experiment to see if we can construct those stacks at runtime without emitting any TPL events. Even if we couldn\u0027t I don\u0027t think we are any worse off than traces we collect today without TPL events. For example in the YARP case shown here you might not know why we are processing a particular request, or even how the request code makes call within itself, but I assume you could still get lots of interesting information about the latency distribution and identify what portions of request processing take the most time.\r\n\r\n\u003e it would also be nice to be able to turn on sampling for anomalies, such as long requests. It might just be too late though.\r\n\r\nIn distributed tracing this is often called head-based and tail-based sampling. Head-based is when you decide up-front and tail-based is when you capture everything and decide after-the-fact what to keep. As a starting point I\u0027d propose we stick to head-based because it is simpler and lower overhead. If we want to add a tail-based option that can be a future feature.\r\n\r\n\u003e It was not clear how we were going toggle the sampling bit - the landscape is certainly different now\r\n\r\nYeah, as long as it is based on Activity.IsRecorded there is a well-defined mechanism to set that bit using the ActivityListener.Sample callback.",
                                           "updatedAt":  "2022-10-29T00:34:36Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Enable sample based tracing to track issues in high performance/load scenarios",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77572",
        "createdAt":  "2022-10-27T21:57:59Z",
        "number":  77572,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrN6iQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2022-10-27T22:30:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noahfalk",
                                            "createdAt":  "2022-10-28T09:10:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2022-10-28T11:32:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-10-29T10:46:39Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-15T18:30:51Z",
        "body":  "Trying to configure dotnet-trace with which providers, levels and flags is complicated, and typically involves reading through a bunch of documentation to figure out what the possible providers are, and what events they are firing.\r\n\r\nOne way to solve this would be to have a mode for dotnet-trace which rather than collecting all the events, would do an enumeration for the event sources and the events that get fired - enumerating each event only once. You can then run your app in this mode and get a listing of the events that were fired. You can then feed this back into the command line for dotnet-trace as the mapping of the providers and levels that are needed for further analysis.\r\n\r\nIt could be something like:\r\n```\r\ndotnet-trace info [-h|--help]\r\n    [-n, --name \u003cname\u003e] [--diagnostic-port] [-o|--output \u003ctrace-file-path\u003e] [-p|--process-id \u003cpid\u003e]\r\n    [--show-child-io]\r\n    [-- \u003ccommand\u003e] (for target applications running .NET 5 or later) \r\n```\r\n\r\nAnd give an output of something like:\r\n\r\n```\r\n=== Events Seen ===\r\nProvider Name : Event Name : Event ID : Event Level (int) : Count\r\n-----------------------------------------------------------------\r\nSystem.Buffers.ArrayPoolEventSource : BufferRented : 1 : Verbose (5) : 79\r\nSystem.Buffers.ArrayPoolEventSource : BufferAllocated : 2 : Informational (4) : 11\r\nSystem.Buffers.ArrayPoolEventSource : BufferReturned : 3 : Verbose (5) : 80\r\nSystem.Buffers.ArrayPoolEventSource : BufferTrimPoll : 5 : Informational (4) : 2\r\nSystem.Buffers.ArrayPoolEventSource : BufferTrimmed : 4 : Informational (4) : 7\r\nMicrosoft-Extensions-Logging : FormattedMessage : 1 : LogAlways (0) : 33\r\nMicrosoft-Extensions-Logging : Message : 2 : LogAlways (0) : 33\r\nMicrosoft-Extensions-Logging : MessageJson : 5 : LogAlways (0) : 33\r\nMicrosoft-Diagnostics-DiagnosticSource : Message : 1 : Informational (4) : 1\r\nMicrosoft-Diagnostics-DiagnosticSource : NewDiagnosticListener : 10 : Informational (4) : 2\r\nMicrosoft-Diagnostics-DiagnosticSource : Event : 2 : Informational (4) : 2\r\nMicrosoft-Extensions-DependencyInjection : ServiceProviderBuilt : 7 : Informational (4) : 1\r\nMicrosoft-Extensions-DependencyInjection : ServiceProviderDescriptors : 8 : Informational (4) : 4\r\nMicrosoft-Extensions-DependencyInjection : CallSiteBuilt : 1 : Verbose (5) : 80\r\nMicrosoft-Extensions-DependencyInjection : ServiceResolved : 2 : Verbose (5) : 76\r\nMicrosoft-Extensions-DependencyInjection : DynamicMethodBuilt : 4 : Verbose (5) : 3\r\nMicrosoft-Extensions-DependencyInjection : ScopeDisposed : 5 : Verbose (5) : 1\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadPoolEnqueueWork : 30 : Verbose (5) : 12\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadPoolDequeueWork : 31 : Verbose (5) : 12\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadTransferSend : 150 : Informational (4) : 1\r\nMicrosoft.AspNetCore.Hosting : HostStart : 1 : Informational (4) : 1\r\nMicrosoft.AspNetCore.Hosting : HostStop : 2 : Informational (4) : 1\r\nPrivate.InternalDiagnostics.System.Net.Sockets : Info : 4 : Informational (4) : 76\r\nPrivate.InternalDiagnostics.System.Net.Sockets : ErrorMessage : 5 : Error (2) : 4\r\nDotnet-dev-certs : ListCertificatesStart : 1 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeFoundCertificates : 2 : Verbose (5) : 1\r\nDotnet-dev-certs : CheckCertificatesValidity : 3 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeValidCertificates : 4 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeInvalidCertificates : 5 : Verbose (5) : 1\r\nDotnet-dev-certs : ListCertificatesEnd : 6 : Verbose (5) : 1\r\nSystem.Net.Sockets : AcceptStart : 4 : Informational (4) : 4\r\nSystem.Net.Sockets : AcceptFailed : 6 : Error (2) : 4\r\nSystem.Net.Sockets : AcceptStop : 5 : Informational (4) : 4\r\nMicrosoft-AspNetCore-Server-Kestrel : Configuration : 11 : LogAlways (0) : 1\r\nSystem.Net.NameResolution : ResolutionStart : 1 : Informational (4) : 1\r\nSystem.Net.NameResolution : ResolutionStop : 2 : Informational (4) : 1\r\nPrivate.InternalDiagnostics.System.Net.NameResolution : Info : 4 : Informational (4) : 1\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTTPnkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NIt4F",
                                           "createdAt":  "2022-10-27T21:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-27T21:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NIvEy",
                                           "createdAt":  "2022-10-27T22:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTrying to configure dotnet-trace with which providers, levels and flags is complicated, and typically involves reading through a bunch of documentation to figure out what the possible providers are, and what events they are firing.\r\n\r\nOne way to solve this would be to have a mode for dotnet-trace which rather than collecting all the events, would do an enumeration for the event sources and the events that get fired - enumerating each event only once. You can then run your app in this mode and get a listing of the events that were fired. You can then feed this back into the command line for dotnet-trace as the mapping of the providers and levels that are needed for further analysis.\r\n\r\nIt could be something like:\r\n```\r\ndotnet-trace info [-h|--help]\r\n    [-n, --name \u003cname\u003e] [--diagnostic-port] [-o|--output \u003ctrace-file-path\u003e] [-p|--process-id \u003cpid\u003e]\r\n    [--show-child-io]\r\n    [-- \u003ccommand\u003e] (for target applications running .NET 5 or later) \r\n```\r\n\r\nAnd give an output of something like:\r\n\r\n```\r\n=== Events Seen ===\r\nProvider Name : Event Name : Event ID : Event Level (int) : Count\r\n-----------------------------------------------------------------\r\nSystem.Buffers.ArrayPoolEventSource : BufferRented : 1 : Verbose (5) : 79\r\nSystem.Buffers.ArrayPoolEventSource : BufferAllocated : 2 : Informational (4) : 11\r\nSystem.Buffers.ArrayPoolEventSource : BufferReturned : 3 : Verbose (5) : 80\r\nSystem.Buffers.ArrayPoolEventSource : BufferTrimPoll : 5 : Informational (4) : 2\r\nSystem.Buffers.ArrayPoolEventSource : BufferTrimmed : 4 : Informational (4) : 7\r\nMicrosoft-Extensions-Logging : FormattedMessage : 1 : LogAlways (0) : 33\r\nMicrosoft-Extensions-Logging : Message : 2 : LogAlways (0) : 33\r\nMicrosoft-Extensions-Logging : MessageJson : 5 : LogAlways (0) : 33\r\nMicrosoft-Diagnostics-DiagnosticSource : Message : 1 : Informational (4) : 1\r\nMicrosoft-Diagnostics-DiagnosticSource : NewDiagnosticListener : 10 : Informational (4) : 2\r\nMicrosoft-Diagnostics-DiagnosticSource : Event : 2 : Informational (4) : 2\r\nMicrosoft-Extensions-DependencyInjection : ServiceProviderBuilt : 7 : Informational (4) : 1\r\nMicrosoft-Extensions-DependencyInjection : ServiceProviderDescriptors : 8 : Informational (4) : 4\r\nMicrosoft-Extensions-DependencyInjection : CallSiteBuilt : 1 : Verbose (5) : 80\r\nMicrosoft-Extensions-DependencyInjection : ServiceResolved : 2 : Verbose (5) : 76\r\nMicrosoft-Extensions-DependencyInjection : DynamicMethodBuilt : 4 : Verbose (5) : 3\r\nMicrosoft-Extensions-DependencyInjection : ScopeDisposed : 5 : Verbose (5) : 1\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadPoolEnqueueWork : 30 : Verbose (5) : 12\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadPoolDequeueWork : 31 : Verbose (5) : 12\r\nSystem.Diagnostics.Eventing.FrameworkEventSource : ThreadTransferSend : 150 : Informational (4) : 1\r\nMicrosoft.AspNetCore.Hosting : HostStart : 1 : Informational (4) : 1\r\nMicrosoft.AspNetCore.Hosting : HostStop : 2 : Informational (4) : 1\r\nPrivate.InternalDiagnostics.System.Net.Sockets : Info : 4 : Informational (4) : 76\r\nPrivate.InternalDiagnostics.System.Net.Sockets : ErrorMessage : 5 : Error (2) : 4\r\nDotnet-dev-certs : ListCertificatesStart : 1 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeFoundCertificates : 2 : Verbose (5) : 1\r\nDotnet-dev-certs : CheckCertificatesValidity : 3 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeValidCertificates : 4 : Verbose (5) : 1\r\nDotnet-dev-certs : DescribeInvalidCertificates : 5 : Verbose (5) : 1\r\nDotnet-dev-certs : ListCertificatesEnd : 6 : Verbose (5) : 1\r\nSystem.Net.Sockets : AcceptStart : 4 : Informational (4) : 4\r\nSystem.Net.Sockets : AcceptFailed : 6 : Error (2) : 4\r\nSystem.Net.Sockets : AcceptStop : 5 : Informational (4) : 4\r\nMicrosoft-AspNetCore-Server-Kestrel : Configuration : 11 : LogAlways (0) : 1\r\nSystem.Net.NameResolution : ResolutionStart : 1 : Informational (4) : 1\r\nSystem.Net.NameResolution : ResolutionStop : 2 : Informational (4) : 1\r\nPrivate.InternalDiagnostics.System.Net.NameResolution : Info : 4 : Informational (4) : 1\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esamsp-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-27T22:00:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NIw0P",
                                           "createdAt":  "2022-10-27T22:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "This kind of information can be collected at runtime by modifying the code, for example https://github.com/samsp-msft/scrap/blob/main/EventSourceEnumerator.cs can be used to collect the data. In this case run the app within the body of a lambda, and it will dump out the events after the app has finished. \r\n\r\nFor example:\r\n\r\n```\r\nEventSourceEnumerator.Run(async () =\u003e\r\n{\r\n    var builder = WebApplication.CreateBuilder();\r\n    var app = builder.Build();\r\n\r\n    app.MapGet(\"/\", () =\u003e \"Error incorrect path: Use /TileService to access the service\");\r\n    app.Run();\r\n});\r\n```\r\n\r\nBut the whole point of dotnet-trace is to be able to use it outside of the process that is being instrumented.",
                                           "updatedAt":  "2022-10-27T22:04:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NI87J",
                                           "createdAt":  "2022-10-27T22:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ldillonel @noahfalk @davmason ",
                                           "updatedAt":  "2022-10-27T22:30:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NLCNz",
                                           "createdAt":  "2022-10-28T09:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "what if we did dynamic discovery of EventSources and static analysis to determine their events? Counting the number of events could be very high performance overhead for verbose events and other events may never occur depending on the workload? This would keep overhead minimal and make the list more complete.\r\n\r\nOn a side note, the demo is missing the runtime events due to a long standing sharp edge in how EventListener API is designed. No need to fix it though, it totally fulfills its demo role :) Sadly the EventListener starts enumerating event sources from within the base class constructor and that code runs prior to when the derived class constructor had a chance to register the event callback. Any EventSources that existed prior to the Listener being created didn\u0027t get observed.",
                                           "updatedAt":  "2022-10-28T09:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NM-eQ",
                                           "createdAt":  "2022-10-28T17:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "The \"demo\" was a quick mockup to validate a separate issue, and make sure specific events are being fired, but the need for it illustrated that trying to fish this information from documentation is not very efficient. \r\nThere are 2 ways to view the problem:\r\n- which events could be fired\r\n- which events are actually being fired\r\n\r\nThe former could be done all by static analysis - pass in the app, and then use reflection to see what classes are present. But I feel that knowing what event sources are actually used has a lot of value. I show the actual events fired mostly so that the correct level can be selected for the filter - the demo should probably have ordered the events listed based on the level.\r\nIf there was a uniform way of knowing how the flags would be used, it would be helpful to show the events from them all, but I suspect that is beyond the scope of this.\r\n\r\nHaving a count of events fired was something that naturally fell out of the implementation of the prototype and is not necessary for the scenario, but if live enumeration is used, it helps to get an idea of what the volume is going to be expected to be.",
                                           "updatedAt":  "2022-10-28T17:10:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "dotnet-trace: Make it easier to get a dump of what EventSources and Events are actually used by a process",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80251",
        "createdAt":  "2023-01-05T18:32:43Z",
        "number":  80251,
        "author":  "NikitaMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsJKXw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avparuch",
                                            "createdAt":  "2023-01-05T21:52:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vidommet",
                                            "createdAt":  "2023-01-06T21:17:18Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-11-02T06:06:02Z",
        "body":  "Observed in .net 6 (6.0.12). \r\n\r\nTo reproduce you should first run an application with EventSource-based in-proc listener and then run dotnet-counters (or any other EventPipeProvider-based listener) that would listen to events from your app but with a higher refresh interval. Observe actual refresh interval and frequency of OnEventWritten callback in your in-proc EventSource-based app to change to the higher interval you specified for out-proc listener. If necessary, stop and repeatedly run dotnet-counters several times. Usually, it takes 1-3 attempts of re-run dotnet-counters to repro. As a bonus issue you might also dotnet-counters to temporarily freeze.\r\n\r\n1) Application \u0027A\u0027 with in-proc well-known event counters subscriber with some refresh interval: \r\n`\r\n    public class PlatformCountersListener : EventListener\r\n    {\r\n            if (this.AllEventCounterSources.Contains(source.Name))\r\n            {\r\n                this.EnableEvents(source, EventLevel.Critical, EventKeywords.All, new Dictionary\u003cstring, string\u003e()\r\n                {\r\n                    [\"EventCounterIntervalSec\"] = \"10\"\r\n                });\r\n            }\r\n     };\r\n`\r\n\r\nYou can use the example from here: [https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/#creating-our-eventlistener](url)\r\n\r\n2) Another application subscribed to the same event counter out-proc using EventPipeProvider with a different refresh interval:\r\n`\r\n            IEnumerable \u003c EventPipeProvider \u003e eventCounterProviders = _counters.Keys.Select(\r\n                providerName =\u003e new EventPipeProvider(providerName, EventLevel.Informational, 0, new Dictionary\u003cstring, string\u003e()\r\n                                { { \"EventCounterIntervalSec\", \"120\" } })); \r\n`\r\n\r\nAs such you can use dotnet-counters tool, like: `dotnet-counters monitor --name CELTestWebService --refresh-interval 60 --counters System.Runtime`.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOarMdnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R0ABQ",
                                           "createdAt":  "2023-01-05T18:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTo reproduce you should first run an application with EventSource-based in-proc listener and then run dotnet-counters (or any other EventPipeProvider-based listener) that would listen to events from your app but with a higher refresh interval. Observe actual refresh interval and frequency of OnEventWritten callback in your in-proc EventSource-based app to change to the higher interval you specified for out-proc listener.\r\n\r\n1) Application \u0027A\u0027 with in-proc well-known event counters subscriber with some refresh interval: \r\n`\r\n    public class PlatformCountersListener : EventListener\r\n    {\r\n            if (this.AllEventCounterSources.Contains(source.Name))\r\n            {\r\n                this.EnableEvents(source, EventLevel.Critical, EventKeywords.All, new Dictionary\u003cstring, string\u003e()\r\n                {\r\n                    [\"EventCounterIntervalSec\"] = \"10\"\r\n                });\r\n            }\r\n     };\r\n`\r\n\r\nYou can use the example from here: [https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/#creating-our-eventlistener](url)\r\n\r\n2) Another application subscribed to the same event counter out-proc using EventPipeProvider with a different refresh interval:\r\n`\r\n            IEnumerable \u003c EventPipeProvider \u003e eventCounterProviders = _counters.Keys.Select(\r\n                providerName =\u003e new EventPipeProvider(providerName, EventLevel.Informational, 0, new Dictionary\u003cstring, string\u003e()\r\n                                { { \"EventCounterIntervalSec\", \"120\" } })); \r\n`\r\n\r\nAs such you can use dotnet-counters tool, like: `dotnet-counters monitor --name CELTestWebService --refresh-interval 60 --counters System.Runtime`.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNikitaMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Tracing`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-05T18:32:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SAjBv",
                                           "createdAt":  "2023-01-09T16:09:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@davmason",
                                           "updatedAt":  "2023-01-09T16:09:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SIjfp",
                                           "createdAt":  "2023-01-10T22:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @NikitaMSFT,\r\n\r\nThis behavior is intended, even if it is a bit surprising the first time you run in to it. When we originally developed the counters we made the conscious decision to only support one interval.\r\n\r\nI will leave this issue as a feature request to support multiple sessions with different intervals.",
                                           "updatedAt":  "2023-01-10T22:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kp2TE",
                                           "createdAt":  "2023-08-22T18:17:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NikitaMSFT",
                                           "body":  "Hi guys, is there any progress with this issue in .NET 8?",
                                           "updatedAt":  "2023-08-22T18:17:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5krgTx",
                                           "createdAt":  "2023-08-23T01:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @NikitaMSFT - unfortunately this did not make the cut for 8. We have to balance feature requests against competing priorities and were not able to address this. If you have business justification that we should prioritize this higher in the future please let me know.",
                                           "updatedAt":  "2023-08-23T01:24:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oRY3I",
                                           "createdAt":  "2023-10-05T17:53:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eturnersumi",
                                           "body":  "@davmason any chance of prioritization for this issue?",
                                           "updatedAt":  "2023-10-05T17:53:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5phHNC",
                                           "createdAt":  "2023-10-19T08:11:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Hi @eturnersumi,\r\n\r\nFor .net 8 we are past the point that we can make changes so it definitely won\u0027t be addressed in .net 8. Generally speaking we are starting to encourage people who need more advanced capabilities than the counters provide to look at [meters](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics-instrumentation) instead.  The logic around updating the counters interval was designed in such a way that there is no clear way to fix this issue and maintain compatibility.",
                                           "updatedAt":  "2023-10-19T08:11:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_6uX",
                                           "createdAt":  "2023-10-25T02:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NikitaMSFT",
                                           "body":  "Hi @davmason, thank you for your answer. Honestly, I\u0027m failing to understand how Metrics can be relevant. AFAIS in the docs Metrics is not the thing that allows to deliver well-known platform-level metric from another process. All documentation references in such cases refer to event counters.\r\nLet me describe the use case: big organization has many teams deploying various services, and the goal is to have a universal mechanism of collecting platform level metrics (.NET health, HTTP statistics, etc - i.e. well-known event counters) related to those services in real-time while considering those services as black-boxes. I.e. out-proc metrics collection, pretty much the use case of performance counters deployed either as a separate process running on the same machine or in a side-container running on the same pod. Event-counters in theory satisfied that goal. Please correct me if I\u0027m wrong but I don\u0027t see how Metrics  API is intended for delivering such well-known pre-defined set of counters. \r\nI\u0027m aware of OpenTelemetry, it allows to collect counters in some external storage for future out-bound analyses, but it doesn\u0027t help much if we are trying to analyze metrics right on the machine/pod where service runs for immediate action. I\u0027m aware of possible workarounds but with this issue present it seems there is no reliable way in .NET Core to get something comparable to perf counters that allowed out-proc access to that data without the risk of affecting target service functionality.",
                                           "updatedAt":  "2023-10-25T02:06:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qsx2f",
                                           "createdAt":  "2023-11-02T06:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I spoke with @NikitaMSFT offline, but wanted to summarize what we talked about for anyone else that might be encountering a similar issue.\r\n\r\n- There is no complete + easy solution to this problem today, but we do have partial solutions and working to make those better in the future.\r\n- The .NET metrics API does support out-of-process collection of the data. This could be either:\r\n  - Tools such as dotnet-counters and dotnet-monitor that can read metrics without any modification to application code ([docs](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics-collection#view-metrics-with-dotnet-counters)). Its also possible to do custom tool development directly against [MetricsEventSource](https://source.dot.net/#System.Diagnostics.DiagnosticSource/System/Diagnostics/Metrics/MetricsEventSource.cs,8048e6b52e7aa6d1).\r\n  - Libraries such as OpenTelemetry and pluggable exporters can transmit metrics data via various protocols such as OTLP or Prometheus line format. These require the application author to add reference to additional NuGet packages and write a little bit of code to configure it.\r\n- The main issue that stops the metrics API from being a complete solution on this problem today is that the System.Runtime EventCounters are built-in to the runtime, but there is no equivalent set built-in using the System.Diagnostics.Metrics API. OpenTelemetry does have some instrumentation packages that apps can include ([here](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.Process) and [here](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/tree/main/src/OpenTelemetry.Instrumentation.Runtime)), but this relies on each app opting into adding those packages. Someone writing a tool that is external to the apps and treating each app as a black box can\u0027t rely on apps having opted into those dependencies. I\u0027m hoping we can add similar metrics built-in so they are present in all apps by default during .NET 9 but that isn\u0027t a committed plan yet.\r\n- The metrics API also isn\u0027t completely free of this competing refresh interval issue, but it does reduce the scope of the problem. The underlying issue is that when sending data over EventSource/ETW/EventPipe there is no mechanism for two different subscribers to register to receive the same events but emitted at different frequencies with different data values. EventCounters are tightly tied to EventSource so there is no way to avoid the limitation without a substantial redesign. The newer Metrics API on the other hand is not tightly coupled to EventSource so there are multiple paths to access the data which do not encounter EventSource-related limitations. For example there can be any number of [MeterListeners](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics-collection#create-a-custom-collection-tool-using-the-net--api) operating in parallel and OpenTelemetry is built on top of MeterListener. Tools such as dotnet-counters and dotnet-monitor access the data via MetricsEventSource that does impose the single refresh interval limitation, but it is unlikely there would be any 2nd competing EventListener session within the app because MeterListener and OpenTelemetry provide better in-proc API alternatives. MetricsEventSource also adopted a fail-fast approach where any attempt to add a 2nd subscriber with a different interval generates an immediate error event and the 1st subscriber\u0027s session is unaffected. This means a tool like dotnet-counters might not be able to connect, but it won\u0027t subtly change the behavior for another session that was already running. Fully solving the competing refresh interval would either involve moving all remaining tooling off of EventSource or adding new EventSource capabilities for targeting which clients receive which events.\r\n\r\n\r\nHope that helps!",
                                           "updatedAt":  "2023-11-02T06:06:01Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "In-Proc EventSource subscriber changes its refresh interval to one specified by out-proc EventPipeProvider-based subscriber (like dotnet-counters)",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88027",
        "createdAt":  "2023-06-26T01:27:33Z",
        "number":  88027,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:03:27Z",
        "body":  "## Build Information\n\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1017103\nBuild error leg or test failing: BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover\n\n## Error Message\n\n```json\n{\n  \"ErrorMessage\" : [\"BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover [FAIL]\", \"Half-way through waiting for remote process\"],\n  \"BuildRetry\" : false,\n  \"ExcludeConsoleLog\" : false\n}\n```\n\n- PR: https://github.com/dotnet/runtime/pull/114441\n- Queue: `Libraries Test Run checked coreclr windows x86 Debug`\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1017103\u0026view=logs\u0026j=f1f3e473-935f-5de7-3348-701fec448dfb\u0026t=0644e1d9-cbee-5379-e020-5995b9f78358\u0026l=56\n- Log file: https://helixr1107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-114441-merge-98298f34bbe1431f80/System.Diagnostics.Tracing.Tests/1/console.dc5c02e0.log?helixlogtype=result\n- Output:\n```\n    BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover [FAIL]\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Half-way through waiting for remote process.\n      Memory load: 14\n      \n      Image Name                     PID Services                                    \n      ========================= ======== ============================================\n      svchost.exe                    768 BrokerInfrastructure, DcomLaunch, LSM,      \n                                         PlugPlay, Power, SystemEventsBroker         \n      svchost.exe                    828 RpcEptMapper, RpcSs                         \n      svchost.exe                    928 TermService                                 \n      svchost.exe                    936 Appinfo, CertPropSvc, DsmSvc, gpsvc,        \n                                         iphlpsvc, lfsvc, ProfSvc, sacsvr, Schedule, \n                                         SENS, SessionEnv, ShellHWDetection, Themes, \n                                         UserManager, Winmgmt, wlidsvc, WpnService,  \n                                         wuauserv                                    \n      svchost.exe                    988 Dhcp, EventLog, lmhosts, NgcCtnrSvc,        \n                                         TimeBrokerSvc, vmictimesync                 \n      svchost.exe                    328 NcbService, PcaSvc, TrkWks, UALSVC,         \n                                         UmRdpService, vmickvpexchange,              \n                                         vmicshutdown, WdiSystemHost, WPDBusEnum     \n      svchost.exe                    788 CDPSvc, EventSystem, FontCache, netprofm,   \n                                         nsi, RemoteRegistry, W32Time,               \n                                         WinHttpAutoProxySvc                         \n      svchost.exe                   1116 vmicheartbeat                               \n      svchost.exe                   1188 CryptSvc, Dnscache, LanmanWorkstation,      \n                                         NlaSvc, WinRM                               \n      svchost.exe                   1212 BFE, CoreMessagingRegistrar, DPS, MpsSvc,   \n                                         pla                                         \n      svchost.exe                   1476 Wcmsvc                                      \n      svchost.exe                     76 DiagTrack                                   \n      svchost.exe                   2096 StateRepository, tiledatamodelsvc           \n      svchost.exe                   2108 AppHostSvc                                  \n      svchost.exe                   2216 W3SVC, WAS                                  \n      svchost.exe                   2248 LanmanServer                                \n      svchost.exe                   3212 CDPUserSvc_45ede, OneSyncSvc_45ede          \n      svchost.exe                   3800 AppReadiness                                \n      svchost.exe                   3856 AppXSvc, ClipSVC                            \n      svchost.exe                   5192 WerSvc                                      \n      Timed out at 4/15/2025 3:41:25 PM after 60000ms waiting for remote process.\n      Wrote mini dump to: C:\\h\\w\\A2CF0914\\w\\B04009FD\\uploads\\1128.qxjoesr3.ozz.dmp\n      \tProcess ID: 1128\n      \tHandle: 1264\n      \tName: dotnet\n      \tMainModule: C:\\h\\w\\A2CF0914\\p\\dotnet.exe\n      \tStartTime: 4/15/2025 3:40:24 PM\n      \tTotalProcessorTime: 00:00:07.1406250\n      \tThreads:\n      \t\tThread #1 (OS 0x694)   [MTA]\n      \t\t\t[InlinedCallFrame] (Interop+Kernel32.\u003cGetFileAttributesExPrivate\u003eg____PInvoke|135_0)\n      \t\t\tSystem.IO.FileSystem.FillAttributeInfo(System.String, WIN32_FILE_ATTRIBUTE_DATA ByRef, Boolean)\n      \t\t\tSystem.IO.File.Exists(System.String)\n      \t\t\tBasicEventSourceTests.TestsManifestGeneration.VerifyManifestAndRemoveFile(System.String)\n      \t\t\tBasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGenerationRollover\u003eb__3_0()\n      \t\t\t[HelperMethodFrame_PROTECTOBJ] (System.RuntimeMethodHandle.InvokeMethod)\n      \t\t\tSystem.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*)\n      \t\t\tSystem.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags)\n      \t\t\tSystem.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n      \t\t\tSystem.Reflection.MethodBase.Invoke(System.Object, System.Object[])\n      \t\t\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\n      \t\tThread #2 (OS 0x108C) [Finalizer] [Background] \n      \t\t\t[DebuggerU2MCatchHandlerFrame]\n      \n      Stack Trace:\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(225,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(55,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose()\n        /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs(81,0): at BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover()\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(48,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n  Finished:    System.Diagnostics.Tracing.Tests\n=== TEST EXECUTION SUMMARY ===\n   System.Diagnostics.Tracing.Tests  Total: 46, Errors: 0, Failed: 1, Skipped: 0, Time: 179.846s\n----- end Tue 04/15/2025 15:41:58.04 ----- exit code 1 ----------------------------------------------------------\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1017103\r\n**Error message validated:** `[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover [FAIL] Half-way through waiting for remote process`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 4/15/2025 5:02:29 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1150230](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150230)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150230\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31776906\u0026resultId=141361)|dotnet/runtime#119791|\r\n|[1147155](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147155)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147155\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31666676\u0026resultId=160389)|dotnet/runtime#119676|\r\n|[1146688](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146688)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146688\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31647312\u0026resultId=169072)|dotnet/runtime#118540|\r\n|[1138098](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138098)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138098\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31346052\u0026resultId=165987)|dotnet/runtime#119303|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|4|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrrt7DA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fv7Ol",
                                           "createdAt":  "2023-06-26T01:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Failed in:** [runtime-coreclr libraries-pgo 20230625.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=320072\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=6562706\u0026resultId=134419\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-arm64-CoreCLR_checked-defaultpgo-Windows.11.Arm64.Open\r\n   - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.get_ProviderNameToGuid()\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGenerationRollover\u003eb__3_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 98\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 59\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGenerationRollover\u003eb__3_0()\r\n\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Diagnostics.Tracing`, `os-windows`, `untriaged`, `blocking-clean-ci-optional`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-26T01:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZXYm",
                                           "createdAt":  "2023-07-26T01:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20230725.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=350963\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=7368062\u0026resultId=170812\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2023-07-26T01:12:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jd6mB",
                                           "createdAt":  "2023-08-08T01:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20230807.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=365120\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=7721008\u0026resultId=171569\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n \r\nChild exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```",
                                           "updatedAt":  "2023-08-08T01:42:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5krcOS",
                                           "createdAt":  "2023-08-23T00:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Another hit after my changes to add more logging\r\n\r\n___\r\n\r\n **Failed again in:** [runtime-coreclr libraries-jitstress 20230816.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=375585\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=7989750\u0026resultId=167582\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Half-way through waiting for remote process.\r\nMemory load: 16\r\n\r\nImage Name                     PID Services                                    \r\n========================= ======== ============================================\r\nsvchost.exe                    756 BrokerInfrastructure, DcomLaunch, LSM,      \r\n                                   PlugPlay, Power, SystemEventsBroker         \r\nsvchost.exe                    816 RpcEptMapper, RpcSs                         \r\nsvchost.exe                    964 TermService                                 \r\nsvchost.exe                    972 Appinfo, CertPropSvc, DsmSvc, gpsvc,        \r\n                                   iphlpsvc, lfsvc, ProfSvc, sacsvr, Schedule, \r\n                                   SENS, SessionEnv, ShellHWDetection, Themes, \r\n                                   UserManager, Winmgmt, WpnService, wuauserv  \r\nsvchost.exe                    476 Dhcp, EventLog, lmhosts, TimeBrokerSvc,     \r\n                                   vmictimesync                                \r\nsvchost.exe                    444 NcbService, PcaSvc, TrkWks, UALSVC,         \r\n                                   UmRdpService, vmickvpexchange,              \r\n                                   vmicshutdown, WdiSystemHost                 \r\nsvchost.exe                   1084 CDPSvc, EventSystem, FontCache, netprofm,   \r\n                                   nsi, W32Time, WinHttpAutoProxySvc           \r\nsvchost.exe                   1092 BFE, CoreMessagingRegistrar, DPS, MpsSvc,   \r\n                                   pla                                         \r\nsvchost.exe                   1164 vmicheartbeat                               \r\nsvchost.exe                   1228 CryptSvc, Dnscache, LanmanWorkstation,      \r\n                                   NlaSvc, WinRM                               \r\nsvchost.exe                   1508 Wcmsvc                                      \r\nsvchost.exe                   1372 DiagTrack                                   \r\nsvchost.exe                   1408 AppHostSvc                                  \r\nsvchost.exe                   2096 StateRepository, tiledatamodelsvc           \r\nsvchost.exe                   2152 W3SVC, WAS                                  \r\nsvchost.exe                   2160 LanmanServer                                \r\nsvchost.exe                   3852 CDPUserSvc_52c29, OneSyncSvc_52c29          \r\nsvchost.exe                   2112 AppXSvc                                     \r\nTimed out at 8/16/2023 8:21:29 AM after 60000ms waiting for remote process.\r\nWrote mini dump to: C:\\h\\w\\A1A8095F\\w\\B747098A\\uploads\\3920.em1jdkok.srh.dmp\r\n\tProcess ID: 3920\r\n\tHandle: 1172\r\n\tName: dotnet\r\n\tMainModule: C:\\h\\w\\A1A8095F\\p\\dotnet.exe\r\n\tStartTime: 8/16/2023 8:20:28 AM\r\n\tTotalProcessorTime: 00:00:07.0468750\r\n\tThreads:\r\n\t\tThread #1 (OS 0x7BC)   [MTA]\r\n\t\t\t[HelperMethodFrame] (System.Threading.Thread.SleepInternal)\r\n\t\t\tSystem.Threading.Thread.Sleep(Int32)\r\n\t\t\tBasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGenerationRollover\u003eb__3_0()\r\n\t\t\t[HelperMethodFrame_PROTECTOBJ] (System.RuntimeMethodHandle.InvokeMethod)\r\n\t\t\tSystem.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*)\r\n\t\t\tSystem.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags)\r\n\t\t\tSystem.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n\t\t\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\r\n\t\t\t[InlinedCallFrame]\r\n\t\tThread #2 (OS 0x590) [Finalizer] [Background] \r\n\t\t\t[DebuggerU2MCatchHandlerFrame]\r\n\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 225\r\n   at BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 81\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n\r\n_Originally posted by @v-wenyuxu in https://github.com/dotnet/runtime/issues/89702#issuecomment-1681463403_\r\n            ",
                                           "updatedAt":  "2023-08-23T01:00:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mzMF6",
                                           "createdAt":  "2023-09-19T01:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20230918.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=410217\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=8923074\u0026resultId=172379\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2023-09-19T01:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oZ4lN",
                                           "createdAt":  "2023-10-07T06:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20231006.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=429569\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9493042\u0026resultId=164699\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-CoreCLR_checked-zapdisable-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.get_ProviderNameToGuid()\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 52\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n```",
                                           "updatedAt":  "2023-10-07T06:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pnZr1",
                                           "createdAt":  "2023-10-20T01:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20231019.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=443629\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9911736\u0026resultId=172500\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2023-10-20T01:32:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qFpLT",
                                           "createdAt":  "2023-10-25T18:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Same failure on [net9.0-windows-Debug-x86-CoreCLR_checked-Windows.10.Amd64](https://dev.azure.com/dnceng-public/public/_build/results?buildId=450992\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10110616\u0026paneView=debug\u0026resultId=139616)\r\n```\r\nChild exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n```",
                                           "updatedAt":  "2023-10-25T18:52:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qzDx6",
                                           "createdAt":  "2023-11-03T01:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20231102.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=458208\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10325256\u0026resultId=172529\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n Child exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2023-11-03T01:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5smJMs",
                                           "createdAt":  "2023-11-22T01:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20231120.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=476685\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10906932\u0026resultId=177649\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-zapdisable-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\r\n```\r\n\r\n**Error message:**\r\n```\r\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\nChild exception:\r\n  Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at BasicEventSourceTests.TestsManifestGeneration.\u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs:line 73\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n\r\nChild process:\r\n  System.Diagnostics.Tracing.Tests, Version=9.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 BasicEventSourceTests.TestsManifestGeneration Void \u003cTest_EventSource_EtwManifestGeneration\u003eb__2_0()\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2023-11-22T01:16:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53f3qf",
                                           "createdAt":  "2024-03-18T20:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another failure of BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover:\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=607042\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14799298\u0026resultId=153660\u0026paneView=debug\r\n\r\nnet9.0-windows-Release-arm64-disabler2r-Windows.11.Arm64.Open\r\n\r\n```\r\nC:\\h\\w\\B2540993\\w\\AD7909B9\\e\u003eset DOTNET \r\nDOTNET_ReadyToRun=0\r\nDOTNET_TieredCompilation=0\r\n\r\nC:\\h\\w\\B2540993\\w\\AD7909B9\\e\u003ecall RunTests.cmd --runtime-path C:\\h\\w\\B2540993\\p \r\n========================= Begin custom configuration settings ==============================\r\nset __IsXUnitLogCheckerSupported=1\r\n========================== End custom configuration settings ===============================\r\n----- start Mon 03/18/2024 17:48:27.43 ===============  To repro directly: =====================================================\r\npushd C:\\h\\w\\B2540993\\w\\AD7909B9\\e\\\r\n\"C:\\h\\w\\B2540993\\p\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Tracing.Tests.runtimeconfig.json --depsfile System.Diagnostics.Tracing.Tests.deps.json xunit.console.dll System.Diagnostics.Tracing.Tests.dll -xml testResults.xml -nologo -nocolor -maxthreads 1 -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n\r\nC:\\h\\w\\B2540993\\w\\AD7909B9\\e\u003e\"C:\\h\\w\\B2540993\\p\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Tracing.Tests.runtimeconfig.json --depsfile System.Diagnostics.Tracing.Tests.deps.json xunit.console.dll System.Diagnostics.Tracing.Tests.dll -xml testResults.xml -nologo -nocolor -maxthreads 1 -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: System.Diagnostics.Tracing.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Tracing.Tests (found 38 of 49 test cases)\r\n  Starting:    System.Diagnostics.Tracing.Tests (parallel test collections = on [1 thread], stop on fail = off)\r\nDid not see ManifestData event from SimpleEventSource, test will fail. Additional info:\r\n    file name initialFile.1624.etl\r\n    total event count 1\r\n    total providers 1\r\n        Provider name MSNT_SystemTrace event count 1\r\n    BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs(123,0): at BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n  Finished:    System.Diagnostics.Tracing.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Tracing.Tests  Total: 39, Errors: 0, Failed: 1, Skipped: 0, Time: 56.834s\r\n```\r\n\r\n@davmason ",
                                           "updatedAt":  "2024-03-18T20:04:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E5OXE",
                                           "createdAt":  "2024-07-15T23:05:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "**BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover** test also failed in [runtime-coreclr superpmi-collect](https://dev.azure.com/dnceng/internal/_build?definitionId=977\u0026_a=summary)/[20240714.1](https://dev.azure.com/dnceng/internal/_build/results?buildId=2494622)\r\n\r\nFailed test:\r\nnet9.0-windows-Release-x64-coreclr_Checked-normal-windows.10.amd64.x86.rt\r\n\r\n```\r\nC:\\h\\w\\AE9F099F\\w\\B41D0982\\e\u003ecall RunTests.cmd --runtime-path C:\\h\\w\\AE9F099F\\p \r\nSuperPMI collection enabled\r\nSuperPMIShimLogPath=C:\\h\\w\\AE9F099F\\w\\B41D0982\\u\\spmi_collect\r\nSuperPMIShimPath=C:\\h\\w\\AE9F099F\\p\\coreclr\\clrjit.dll\r\nDOTNET_EnableExtraSuperPmiQueries=1\r\nDOTNET_JitPath=C:\\h\\w\\AE9F099F\\p\\coreclr\\superpmi-shim-collector.dll\r\n========================= Begin custom configuration settings ==============================\r\nset __IsXUnitLogCheckerSupported=1\r\n========================== End custom configuration settings ===============================\r\n----- start Sun 07/14/2024 18:47:26.16 ===============  To repro directly: =====================================================\r\npushd C:\\h\\w\\AE9F099F\\w\\B41D0982\\e\\\r\n\"C:\\h\\w\\AE9F099F\\p\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Tracing.Tests.runtimeconfig.json --depsfile System.Diagnostics.Tracing.Tests.deps.json xunit.console.dll System.Diagnostics.Tracing.Tests.dll -xml testResults.xml -nologo -nocolor -maxthreads 1 -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n\r\nC:\\h\\w\\AE9F099F\\w\\B41D0982\\e\u003e\"C:\\h\\w\\AE9F099F\\p\\dotnet.exe\" exec --runtimeconfig System.Diagnostics.Tracing.Tests.runtimeconfig.json --depsfile System.Diagnostics.Tracing.Tests.deps.json xunit.console.dll System.Diagnostics.Tracing.Tests.dll -xml testResults.xml -nologo -nocolor -maxthreads 1 -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: System.Diagnostics.Tracing.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Tracing.Tests (found 38 of 49 test cases)\r\n  Starting:    System.Diagnostics.Tracing.Tests (parallel test collections = on [1 thread], stop on fail = off)\r\nDid not see ManifestData event from SimpleEventSource, test will fail. Additional info:\r\n    file name initialFile.4464.etl\r\n    total event count 0\r\n    total providers 0\r\n    BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsManifestGeneration.Etw.cs(123,0): at BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n  Finished:    System.Diagnostics.Tracing.Tests\r\n```\r\n\r\n@davmason ",
                                           "updatedAt":  "2024-07-15T23:05:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FQ6Rq",
                                           "createdAt":  "2024-07-18T07:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Disabling with #105069",
                                           "updatedAt":  "2024-07-18T07:20:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nTaMo",
                                           "createdAt":  "2025-04-15T17:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "I modified the description to make it a KnownBuildFailure.",
                                           "updatedAt":  "2025-04-15T17:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uu3sM",
                                           "createdAt":  "2025-06-02T16:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-06-02T16:34:58Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Test failure BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGenerationRollover",
        "labels":  [
                       "arch-x86",
                       "area-System.Diagnostics.Tracing",
                       "os-windows",
                       "runtime-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96968",
        "createdAt":  "2024-01-15T01:36:10Z",
        "number":  96968,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:03Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=762567\r\nBuild error leg or test failing: BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\nPull request: https://github.com/dotnet/runtime/pull/105777\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener [FAIL]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n**Failed in:** [runtime-coreclr libraries-pgo 20240114.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=526820\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=12404250\u0026resultId=136092\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-fullpgo_methodprofiling-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 77\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=762567\r\n**Error message validated:** `[BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener [FAIL]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/4/2024 3:24:07 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1131386](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131386)|dotnet/runtime|[BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131386\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31126780\u0026resultId=108718)|dotnet/runtime#119071|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwShJfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wuPQz",
                                           "createdAt":  "2024-01-15T01:36:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Failed in:** [runtime-coreclr libraries-pgo 20240114.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=526820\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=12404250\u0026resultId=136092\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-fullpgo_methodprofiling-Windows.10.Amd64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 77\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-x86`, `area-System.Diagnostics.Tracing`, `os-windows`, `blocking-clean-ci-optional`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-15T01:36:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xrUsL",
                                           "createdAt":  "2024-01-24T01:11:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed again in:** [runtime-coreclr libraries-jitstress 20240122.6](https://dev.azure.com/dnceng-public/public/_build/results?buildId=536862\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=12692084\u0026resultId=103560\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-CoreCLR_checked-jitminopts-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 77\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
                                           "updatedAt":  "2024-01-24T01:11:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50NNDd",
                                           "createdAt":  "2024-02-17T02:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20240210.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=561410\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=13397112\u0026resultId=110573\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-CoreCLR_checked-jitstress2_jitstressregs1-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n    at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 77\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
                                           "updatedAt":  "2024-02-17T03:33:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56y7Fd",
                                           "createdAt":  "2024-04-17T01:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240416.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=644977\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15914408\u0026resultId=131626\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-disabler2r-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
                                           "updatedAt":  "2024-04-17T01:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57vyje",
                                           "createdAt":  "2024-04-25T01:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240424.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=654448\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=16195492\u0026resultId=128744\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-disabler2r-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
                                           "updatedAt":  "2024-04-25T01:08:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DbV4",
                                           "createdAt":  "2024-04-28T01:09:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20240427.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=657939\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=16295704\u0026resultId=116157\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress2_jitstressregs8-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-04-28T01:09:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-22q3",
                                           "createdAt":  "2024-05-24T01:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240523.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=685133\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17006990\u0026resultId=115692\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress1-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-05-24T01:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_GycS",
                                           "createdAt":  "2024-05-27T01:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstressregs 20240526.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=687882\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17080370\u0026resultId=101883\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstressregs0x10-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
                                           "updatedAt":  "2024-05-27T01:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_zTPE",
                                           "createdAt":  "2024-06-03T02:11:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstressregs 20240602.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=695102\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17271088\u0026resultId=107352\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstressregs8-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-06-03T02:11:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BdiWt",
                                           "createdAt":  "2024-06-17T01:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20240615.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=708802\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17695182\u0026resultId=104252\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress2_jitstressregs0x10-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 78\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 115\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-06-17T01:27:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GZXqJ",
                                           "createdAt":  "2024-07-29T01:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstressregs 20240728.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=758045\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19232752\u0026resultId=107773\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstressregs0x1000-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-07-29T01:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LTh16",
                                           "createdAt":  "2024-09-09T05:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240908.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=801129\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20667198\u0026resultId=110335\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitminopts-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-09-09T05:24:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUE7J",
                                           "createdAt":  "2024-09-16T21:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another failure:\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=808531\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20909856\u0026resultId=101866\u0026paneView=debug\r\n\r\nin \r\n\r\nruntime-coreclr libraries-jitstress2-jitstressregs\r\nnet9.0-windows-Release-arm64-jitstress2_jitstressregs3-Windows.11.Arm64.Open\r\n",
                                           "updatedAt":  "2024-09-16T21:38:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUFkz",
                                           "createdAt":  "2024-09-16T21:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@tommcdon This failure has been happening for 9 months (maybe randomly?). Has anyone investigated it?",
                                           "updatedAt":  "2024-09-16T21:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUUo1",
                                           "createdAt":  "2024-09-16T22:26:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@BruceForstall The bug is assigned to @thaystg who will be investigating.  ",
                                           "updatedAt":  "2024-09-16T22:26:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MiNrZ",
                                           "createdAt":  "2024-09-18T08:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20240914.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=808531\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20909856\u0026resultId=101866\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress2_jitstressregs3-Windows.11.Arm64.Open\r\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.NullReferenceException : Object reference not set to an instance of an object.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\r\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\r\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\r\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\r\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-09-18T08:03:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Pbjs7",
                                           "createdAt":  "2024-10-11T01:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241010.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=837632\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=21690228\u0026resultId=109174\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress1-Windows.11.Arm64.Open\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\n```\n\n**Error message:**\n```\n System.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-10-11T01:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4dAj",
                                           "createdAt":  "2024-12-30T01:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20241228.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=903656\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23755992\u0026resultId=111538\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-jitosr_stress_random-Windows.10.Amd64.Open\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\n```\n\n**Error message:**\n```\n System.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n    at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-12-30T01:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aI5CJ",
                                           "createdAt":  "2025-01-13T01:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250109.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=912973\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24095206\u0026resultId=112201\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress2_tiered-Windows.11.Arm64.Open\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\n```\n\n**Error message:**\n```\n System.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-01-13T01:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64ycH2",
                                           "createdAt":  "2025-07-22T01:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20250720.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1100285)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-fullpgo_random_gdv-Windows.10.Amd64.Open\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\n```\n\n**Error message:**\n```\nSystem.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor) in /_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs:line 1168\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-07-22T01:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BKEl-",
                                           "createdAt":  "2025-09-01T01:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstressregs 20250831.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1135809)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-jitstressregs0x1000-Windows.10.Amd64.Open\n    - BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener\n```\n\n**Error message:**\n```\nSystem.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventProviders.GetProviderGuidByName(String name)\n   at Microsoft.Diagnostics.Tracing.Session.TraceEventSession.EnableProvider(String providerName, TraceEventLevel providerLevel, UInt64 matchAnyKeywords, TraceEventProviderOptions options)\n   at BasicEventSourceTests.EtwListener.EventSourceCommand(String eventSourceName, EventCommand command, FilteringOptions options) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EtwListener.cs:line 74\n   at BasicEventSourceTests.TestsUserErrors.Test_Bad_EventSource_Startup(Boolean onStartup, Listener listener, EventSourceSettings settings) in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.cs:line 110\n   at BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener() in /_/src/libraries/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestsUserErrors.Etw.cs:line 48\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-09-01T01:52:29Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Test failure BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds_WithEtwListener",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "os-windows",
                       "blocking-clean-ci-optional",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102197",
        "createdAt":  "2024-05-14T14:26:44Z",
        "number":  102197,
        "author":  "desdesdes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-31T15:24:25Z",
        "body":  "### Description\r\n\r\nWhen raising EventSource events and an ETW listener is attached and the event contains more than 4 string parameters it uses this overload:\r\n\r\n```cs\r\nWriteEvent(int eventId, params EventSourcePrimitive[] args)\r\n```\r\n\r\nWhen the WriteEvent is called with one or more parameter has the null value the debug log contains `EventSource Error: EventSourceException while processing event \"TestEvent\": Null` passed as a event argument and the event is not passed to ETW.\r\n\r\nThis does work when we use .net 6 (uses a method with different signature) or when it has less then 4 parameters (uses a different overload) of when all parameters contain a non-null value.\r\n\r\n### Reproduction Steps\r\n\r\nOpen perfview.exe and listen to MyEventSource events. Then run the following program.\r\n\r\n```cs\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        MyEventSource.Log.TestEvent(\"Hallo\", null, null, null);\r\n        Console.WriteLine(\"Ready!\");\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n\r\npublic class MyEventSource : EventSource\r\n{\r\n    public MyEventSource() //: base(EventSourceSettings.EtwSelfDescribingEventFormat)\r\n    {\r\n\r\n    }\r\n\r\n    internal static MyEventSource Log = new MyEventSource();\r\n\r\n    [Event(1)]\r\n    public void TestEvent(string a, string b, string c, string d)\r\n    {\r\n        WriteEvent(1, a, b, c, d);\r\n    }\r\n}\r\n```\r\n\r\nIn the debug output of the console application we see:\r\nEventSource Error: EventSourceException while processing event \"TestEvent\": Null passed as a event argument.\r\n\r\nIf we use .net 6 of if we use EtwSelfDescribingEventFormat or if we use less then 3 parameters this error is not logged and the event is properly traced. Because usually the parameters are filled or not filled at runtime it is very hard to spot the problem and tracing may apprear unrelayable.\r\n\r\n### Expected behavior\r\n\r\nEvent is captured in ETW (perfview)\r\n\r\n### Actual behavior\r\n\r\nEvent is not captured in ETW (perfview)\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nUse EventSourceSettings.EtwSelfDescribingEventFormat\r\n\r\n### Configuration\r\n\r\n.NET 8 on x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhsDdjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59ygbo",
                                           "createdAt":  "2024-05-14T14:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-14T14:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-ZZeB",
                                           "createdAt":  "2024-05-20T14:33:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Seems to be a duplicate to https://github.com/dotnet/runtime/issues/12662",
                                           "updatedAt":  "2024-05-20T14:33:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GwN2O",
                                           "createdAt":  "2024-07-31T15:24:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Confirmed that the behavior exists in .NET 6, 8, and in main.  The root issue is described in https://github.com/dotnet/runtime/pull/77172#issuecomment-1283066705 and is tracked on https://github.com/dotnet/runtime/issues/12662.  After careful consideration, we do not plan to action this particular item in this release and will continue to evaluate it for future releases.  ",
                                           "updatedAt":  "2024-07-31T15:24:19Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "EventSource event with 4 string parameters with null values behaves inconsistent in .NET 8",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102820",
        "createdAt":  "2024-05-29T14:29:47Z",
        "number":  102820,
        "author":  "tvass83",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-04T20:15:03Z",
        "body":  "The platform is heavily instrumented with ETW event providers which is more than welcome.\r\nThere seems to be a few partial implementations of NetEventSource throughout the code base, like this guy:\r\n\r\nhttps://github.com/dotnet/runtime/blob/919e5b2b4995c0769f49d272042de50533b47c75/src/libraries/System.Net.Security/src/System/Net/Security/NetEventSource.Security.cs#L14-L15\r\n\r\n\r\nThis distinction is great, but something seems to break WPA\u0027s ability to correctly decode the captured events:\r\n![image](https://github.com/dotnet/runtime/assets/31535082/e1f3f1a5-69ca-4110-8d76-6d1e8938ea48)\r\n\r\nPerfView on the other hand is able to cope with the same events in the same .etl file.\r\n![image](https://github.com/dotnet/runtime/assets/31535082/d09620d3-1981-4cf6-bce9-a57ec960a0b6)\r\n\r\nNot 100% sure about the root cause, but in a debug session, I changed the default EventSource creation logic\r\nhttps://github.com/dotnet/runtime/blob/919e5b2b4995c0769f49d272042de50533b47c75/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L659 to use EtwSelfDescribingEventFormat instead of EtwManifestEventFormat and that fixed the issue:\r\n![image](https://github.com/dotnet/runtime/assets/31535082/ef716130-040e-440f-92b4-8a2a3f2ae4f4)\r\n\r\nWould it be possible to default to EtwSelfDescribingEventFormat for all EventSource implementations in the runtime?\r\n\r\nTest environment:\r\nWindows 10 Enterprise (10.0.19045)\r\n.NET runtime: Microsoft.NETCore.App 8.0.6\r\n.NET SDK: 8.0.301\r\nWindows SDK including the Windows Performance Toolkit: 10.0.26100.1\r\nCPU: 11th Gen i7-11800H (16 logical processors)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgA0drQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_aJt_",
                                           "createdAt":  "2024-05-29T14:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-29T14:30:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_9TXS",
                                           "createdAt":  "2024-06-04T07:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alois-xx",
                                           "body":  "See ticket 2210140040001578 where the .NET Runtime events did cause lost events. In general the self describing manifests are a nice idea but they break if you are running many .NET processes on one box. During ETW Start/Rundown you will loose with 100% parts of the manifest data leading to merge errors, or sometimes working, sometimes not working ETL files, depending on how many processes were running at that point in time.",
                                           "updatedAt":  "2024-06-04T07:12:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AB2gG",
                                           "createdAt":  "2024-06-04T16:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "\u003e Would it be possible to default to EtwSelfDescribingEventFormat for all EventSource implementations in the runtime?\r\n\r\n@noahfalk @brianrob @tarekgh ",
                                           "updatedAt":  "2024-06-04T16:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ACRFc",
                                           "createdAt":  "2024-06-04T17:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tvass83",
                                           "body":  "Thanks for the additional context @Alois-xx! Great to see you still have a keen eye on ETW-related issues! :) \r\nI remember that issue btw, glad it was \"solved\".\r\nSometimes it would be super helpful to be able to debug WPA itself.. but I guess that\u0027s not gonna happen for a while.\r\nAt least, we have a \"Microsoft Performance Toolkit SDK\" now, that\u0027s a start.",
                                           "updatedAt":  "2024-06-04T17:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AC0m0",
                                           "createdAt":  "2024-06-04T19:11:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "\u003e \u003e Would it be possible to default to EtwSelfDescribingEventFormat for all EventSource implementations in the runtime?\r\n\u003e \r\n\u003e @noahfalk @brianrob @tarekgh\r\n\r\nThis would be a pretty significant breaking change.  Any parsers that are out there and expect a manifest would be broken.  Based on the fact that PerfView can parse these events, but WPA cannot, I expect that the manifest is present in the trace, but for some reason, WPA isn\u0027t able to consume it.  I would recommend filing a feedback ticket for WPA.",
                                           "updatedAt":  "2024-06-04T19:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ADR2t",
                                           "createdAt":  "2024-06-04T20:15:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkj54w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brianrob",
                                                                               "createdAt":  "2024-06-04T22:06:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tvass83",
                                           "body":  "Thanks @brianrob, that makes sense. The manifest is definitely in there, see the first screenshot (event # 65534).\r\nWould be nice to have greater control over emitting manifests or the EventSourceSettings being used, maybe those are some areas that could be improved in the future.\r\nFor now, I\u0027ll file a ticket with the WPA guys and update this issue with any updates from them.",
                                           "updatedAt":  "2024-06-04T20:15:01Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "WPA can\u0027t decode ETW events from some of the Private.InternalDiagnostics.* event sources",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104427",
        "createdAt":  "2024-07-04T11:14:52Z",
        "number":  104427,
        "author":  "dxynnez",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-12T05:01:03Z",
        "body":  "I always think when using DiagnosticSource to write an event, it would not wait for the Listener to complete processing the event. But recently I found code like this:\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/38cd9638966bc7d97470d30bde9e232faa5e6f3f/src/OpenTelemetry.Instrumentation.AspNetCore/Implementation/HttpInListener.cs#L63C1-L64C1\r\nand this:\r\nhttps://github.com/Azure/azure-cosmos-dotnet-v3/blob/5287ffb4ba8f1271c38e3b42365fa5fcb8ba6cc0/Microsoft.Azure.Cosmos.Samples/Usage/CustomDiagnosticAndEventListener/CustomDiagnosticAndEventListener.cs#L68C1-L69C1\r\n\r\nThey both seem to assume that the execution will wait for the listener to finish the processing, and hence it\u0027s safe to rely on the Activity.Current to retrieve other contextual information that\u0027s not provided in the event payload.\r\n\r\n1. **I want to understand if it\u0027s true that when using DiagnosticSource to write an event, it will wait for the listener to complete the processing and hence the Activity.Current (in the OnNext callback) will always be in the same state as when the event was written.**\r\n\r\n2. **Another thing is, is the callback on the listener guaranteed to be executed in the same execution context as where the event is written? I asked as the Activity.Current is, essentially an AyncLocal. If the callback might get invoked in a different execution context then we will not see the same AsyncLocal value.**\r\n\r\nLast thing is, for code:\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/38cd9638966bc7d97470d30bde9e232faa5e6f3f/src/OpenTelemetry.Instrumentation.Http/Implementation/HttpHandlerDiagnosticListener.cs#L95\r\n\r\n3) **The piece of code subscribes to the HttpHandlerDiagnosticListener and mutate the HttpRequestMessage in the event payload - it expects the HttpRequestMessage instance it mutated will be the one getting sent out later by the DiagnosticsHandler. But to my understanding, that is an implementation details of the runtime DiagnosticsHandler and there is no contract for that. \r\nShould I consider such approach fragile and avoid it?**\r\n\r\nAny pointers would be greatly appreciated!\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhJlB8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Dplo8",
                                           "createdAt":  "2024-07-04T11:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T11:15:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dse1s",
                                           "createdAt":  "2024-07-04T19:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@noahfalk could you please help with the mentioned questions? Thanks!",
                                           "updatedAt":  "2024-07-04T19:15:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ETixd",
                                           "createdAt":  "2024-07-10T07:03:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dxynnez",
                                           "body":  "@noahfalk Could you shed some light on the above questions?\r\n\r\nAlso, I have a similar question for the ActivityListener too - when the ActivityStarted \u0026 ActivityStopped are invoked, is the AsyncLocal state (presumably populated right before the Activity is started / stopped) trustable in the Action callback?",
                                           "updatedAt":  "2024-07-10T07:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EU3up",
                                           "createdAt":  "2024-07-10T09:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I want to understand if it\u0027s true that when using DiagnosticSource to write an event, it will wait for the listener to complete the processing and hence the Activity.Current (in the OnNext callback) will always be in the same state as when the event was written.\r\n\r\nYes, that is true. DiagnosticSource.Write() won\u0027t complete until IObserver.OnNext() has returned for each subscriber. Here is [the source](https://source.dot.net/#System.Diagnostics.DiagnosticSource/System/Diagnostics/DiagnosticListener.cs,256) if that helps. You can rely on those calls remaining synchronous.\r\n\r\n\u003e Another thing is, is the callback on the listener guaranteed to be executed in the same execution context as where the event is written?\r\n\r\nYep, same thread, same ExecutionContext. You can think of it similar to a callback that uses a delegate.\r\nOne caveat, .NET runtime doesn\u0027t control the code that runs inside of DiagnosticListener callbacks and in some scenarios a 3rd party may have registered a callback in addition to your own. That other 3rd party callback could, in theory, change the ExecutionContext.\r\n\r\n\u003e The piece of code subscribes to the HttpHandlerDiagnosticListener and mutate the HttpRequestMessage in the event payload - it expects the HttpRequestMessage instance it mutated will be the one getting sent out later by the DiagnosticsHandler. But to my understanding, that is an implementation details of the runtime DiagnosticsHandler and there is no contract for that.\r\nShould I consider such approach fragile and avoid it?\r\n\r\nIn general each DiagnosticSource is free to establish whatever conventions it wants to about the events it sends. Its similar to a class that declares it has `event EventHandler\u003cFooArgs\u003e Foo` where you\u0027d hope that the docs for the Foo event would tell you what you can rely on about it. The best doc I am aware of for HttpHandlerDiagnosticListener is [here](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Http/src/HttpDiagnosticsGuide.md). I didn\u0027t notice that it offers any clarification about when/if mutating the HttpRequest is considered legal so unforetunately at least in terms of documentation its murky. In practice OTel\u0027s instrumentation is an important scenario and we are unlikely to ever intentionally break it. If some other instrumentation is staying within the same bounds as what OTel is doing thats probably a safe place to be. \r\n\r\n\u003e when the ActivityStarted \u0026 ActivityStopped are invoked, is the AsyncLocal state (presumably populated right before the Activity is started / stopped) trustable in the Action callback?\r\n\r\nI\u0027m not sure what it would mean for AsyncLocal state to be \"trustable\"? :) I can say that whatever thread and async locals were present at the time code called Activity.Start() or Activity.Stop(), that is the same thread/locals you will see in the ActivityListener callback. Two caveats:\r\n1. Activity.Current is an async local and it changes during those calls. Activity.Start() updates Current before invoking callbacks. Activity.Stop invokes callbacks first, then changes Activity.Current.\r\n2. .NET runtime has no control over the code that might run inside an ActivityListener callback. Its possible that some other 3rd party ActivityListener callback decides that it wants to change all the async locals before/after your callback runs.\r\n\r\n",
                                           "updatedAt":  "2024-07-10T09:56:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EV3u4",
                                           "createdAt":  "2024-07-10T11:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dxynnez",
                                           "body":  "That really helps! Thanks @noahfalk !\r\n\r\nFor the synchronous callback of DiagnosticSource.Write \u0026 Activity.Start / Stop, is there any public doc I can refer to? Would love to link it in my code so people know what\u0027s going on there :)\r\n",
                                           "updatedAt":  "2024-07-10T11:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EmUHx",
                                           "createdAt":  "2024-07-12T05:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Docs I\u0027m aware of:\r\nhttps://learn.microsoft.com/en-us/dotnet/core/diagnostics/diagnosticsource-diagnosticlistener\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md\r\n\r\nYou can also of course link to this GH issue or directly to the source. HTH!",
                                           "updatedAt":  "2024-07-12T05:01:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Question around DiagnosticSource \u0026 DiagnosticListener \u0026 execution context",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104667",
        "createdAt":  "2024-07-10T10:53:05Z",
        "number":  104667,
        "author":  "abbottdev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-BQMg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-10T13:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2024-07-11T00:05:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-07-16T12:14:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2024-10-30T18:27:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjatkin",
                                            "createdAt":  "2025-01-10T00:42:51Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-07-20T02:44:46Z",
        "body":  "### Background and motivation\n\nAs a consumer of Metrics, I find it difficult/confusing to understand there are many implementations for a collection of tags. In the Metrics/Counter APIs I may pass enumerables of KVPs of tags, or, I can pass a `TagList` struct. In the Activity APIs which were designed before TagList they use an `ActivityTagCollection`. \r\n\r\nI\u0027ve been using .NET for 10+ years, and I wasted some time trying to ensure I was actually using the correct APIs because of the inconsistency.\r\n\r\nI propose making the Activity APIs, specifically, at this point `ActivityEvent` support a `TagList` overload which will allow users to re-use their tags between calls to Metrics or Activity events. \r\n\r\nI\u0027ve been shown that the overload exists internally, so a quick win would be making that public:\r\nhttps://github.com/dotnet/runtime/blob/844e6fe2546c973b3b04b05449c0066aa9e7d53a/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/ActivityEvent.cs#L33\r\n\r\nHowever, I wouldn\u0027t be opposed to a more extensive use of TagList over ActivityTagCollection and bringing them inline. (It would be nice to avoid the allocations that would be made in `Activity.TagsLinkedList` when the tags are enumerated, but that\u0027s an implementation decision I guess!)\r\n\r\nThe following code demonstrates the use case more succinctly:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Metrics;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tprivate static readonly Meter s_meter = new Meter(\"my-app\");\r\n\tprivate static readonly ActivitySource s_source = new ActivitySource(\"my-source\");\r\n\tprivate static readonly Counter\u003cint\u003e s_fruitCounter = s_meter.CreateCounter\u003cint\u003e(\"my-counter\");\r\n\t\r\n\tpublic static void Main()\r\n\t{\r\n\t\ts_source.CreateActivity(\"FruitPicker\", ActivityKind.Internal);\r\n\t\t\r\n\t\tConsole.WriteLine(\"Hello World\");\r\n\t}\r\n\t\r\n\tpublic static void PickFruit(string fruit, int qty)\r\n\t{\r\n\t\tvar tags = new TagList\r\n\t\t{\r\n\t\t\t{ \"fruit\", \"apple\" },\r\n\t\t};\r\n\t\t\r\n\t\ts_fruitCounter.Add(1, tags);\r\n\t\t// I can\u0027t do this:\r\n\t\t//Activity.Current?.AddEvent(new ActivityEvent(\"fruit.picked\", DateTime.UtcNow, tags));\r\n\t\t\r\n\t\t//Instead I must:\r\n\t\tActivity.Current.AddEvent(\r\n\t\t\tnew ActivityEvent(\"fruit.picked\", DateTime.UtcNow, \r\n\t\t\t\t\t\t\t  new ActivityTagsCollection\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\t{ \"fruit\", \"apple\" },\r\n\t\t\t\t\t\t\t  }));\r\n\r\n\t\tConsole.WriteLine(\"Fruit picked!\");\r\n\t}\r\n}\r\n```\r\n\r\nSee #104607 for previous discussions.\n\n### API Proposal\n\n```diff\r\nnamespace System.Diagnostics;\r\n\r\npublic readonly struct ActivityEvent\r\n{\r\n     //  ... omitted for brevity ...\r\n-   internal ActivityEvent(string name, DateTimeOffset timestamp, ref TagList tags) : this(name, timestamp, tags, tags.Count) { \r\n+   public ActivityEvent(string name, DateTimeOffset timestamp, ref TagList tags) : this(name, timestamp, tags, tags.Count) { \r\n}\r\n\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nprivate static readonly Counter\u003cint\u003e s_fruitCounter = Meter.CreateCounter\u003cint\u003e(\"my-counter\");\r\n\t\r\nvar tags = new TagList\r\n{\r\n\t{ \"fruit\", \"apple\" },\r\n};\r\n\r\ns_fruitCounter.Add(1, tags);\r\n\r\nActivity.Current?.AddEvent(new ActivityEvent(\"fruit.picked\", DateTime.UtcNow, tags));\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n- By using a `TagList` consumers may assume that the underlying calls are allocation free if the assignment is \u003c 8 tags if we don\u0027t change `ActivityTagCollection`\r\n  - This would be mitigated if we changed the underlying implementations to use `TagList` as it\u0027s enumerable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[API Proposal]: Add TagList overload to ActivityEvent API",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105293",
        "createdAt":  "2024-07-23T03:03:58Z",
        "number":  105293,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-23T18:05:24Z",
        "body":  "Enabling the Test_Bad_WriteRelatedID_ParameterName test causes the StartStopCreatesActivity to fail:\n```\n      BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity [FAIL]\n        Assert.Equal() Failure: Values differ\n        Expected: 00000000-0000-0000-0000-000000000000\n        Actual:   f6e94c85-7f76-4101-8b94-6eb92bdadfad\n        Stack Trace:\n          D:\\repos\\runtime\\src\\libraries\\System.Diagnostics.Tracing\\tests\\BasicEventSourceTest\\ActivityTracking.cs(22,0): at BasicEventSourceTests.ActivityTracking.StartStopCreatesActivity()\n             at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n          D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n          D:\\repos\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhcMxxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FwzHH",
                                           "createdAt":  "2024-07-23T03:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-23T03:05:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test_Bad_WriteRelatedID_ParameterName EventSource tests causes StartStopCreatesActivity test failure",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106087",
        "createdAt":  "2024-08-07T17:28:19Z",
        "number":  106087,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6BZEg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tommcdon",
                                            "createdAt":  "2024-08-08T01:32:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-11T14:55:07Z",
        "body":  "### Description\r\n\r\nhttps://github.com/dotnet/runtime/issues/80666 uncovered an issue where [EventPipeEventProvider\u0027s callback had been invoked after the gchandle was freed](https://github.com/dotnet/runtime/issues/80666#issuecomment-2249343314). To align EventPipe with [ETW which blocks disposal for in-flight callbacks](https://github.com/dotnet/runtime/issues/80666#issuecomment-2253506595), https://github.com/dotnet/runtime/pull/106040 added a signal wait/set blocking behavior to `ep_delete_provider`. As a result, a deadlock can occur should users invoke EventPipeEventProvider\u0027s Unregister or `ep_delete_provider` within a callback.\r\n\r\nThe same behavior is exhibited on ETW\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nusing System.Diagnostics.Tracing;\r\n\r\nMyEventSource eventSource = new MyEventSource();\r\nConsole.WriteLine(\"MyEventSource is ready to be enabled\");\r\nConsole.ReadLine();\r\n\r\n[EventSource(Name =\"MyEventSource\")]\r\nclass MyEventSource : EventSource\r\n{\r\n    override protected void OnEventCommand(EventCommandEventArgs command)\r\n    {\r\n        Console.WriteLine($\"Command: {command.Command}\");\r\n        this.Dispose();\r\n        Console.WriteLine($\"Dispose() complete\");\r\n    }\r\n}\r\n```\r\n\r\n`dotnet-trace collect --providers MyEventSource -p \u003cpid of running sample\u003e`\r\n\r\n### Expected behavior\r\n\r\nSample\u0027s output\r\n```\r\nMyEventSource is ready to be enabled\r\nCommand: Enable\r\nDispose() complete\r\n```\r\n\r\n### Actual behavior\r\n\r\nSample\u0027s output\r\n```\r\nMyEventSource is ready to be enabled\r\nCommand: Enable\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh4oQKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HihAr",
                                           "createdAt":  "2024-08-07T17:28:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-07T17:28:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Tracing] EventProvider Disposal hangs within a callback",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107069",
        "createdAt":  "2024-08-28T03:47:40Z",
        "number":  107069,
        "author":  "Cricle",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:30:12Z",
        "body":  "### Background and motivation\n\nAccording to [eventsource-getting-started](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/eventsource-getting-started)\n\nEventone must call like `WriteEvent` or `WriteEventCore` to write event.\n\nBut this is a regular code.\n\n### API Proposal\n\nNo any changed, but the partial base on `EventSource` class, partial  method and has `EventAttribute` method will be generated.\n\n### API Usage\n\n```csharp\ninternal sealed unsafe /*It\u0027s mandatory or in method write unsafe*/ partial class RuntimeEventSource : EventSource\n{\n    [Event(1)]\n    public partial void GoHome(string address,double usedTime);\n}\n\n\n//Will generated\npublic void GoHome(string address,double usedTime)\n{\n    address ??= System.String.Empty;\n    global::System.Diagnostics.Tracing.EventSource.EventData* datas = stackalloc global::System.Diagnostics.Tracing.EventSource.EventData[2];\n\n    fixed(char* addressPtr = address)\n    {\n        datas[0] = new global::System.Diagnostics.Tracing.EventSource.EventData\n        {\n            DataPointer = addressPtr,\n            Size = (address.Length + 1) * sizeof(char)\n        };\n        datas[1] = new global::System.Diagnostics.Tracing.EventSource.EventData\n        {\n            DataPointer = (nint)(\u0026usedTime),\n            Size = sizeof(double)\n        };     \n        WriteEventWithRelatedActivityIdCore(1, null, 2, datas);\n    }\n}\n```\n\n### Alternative Designs\n\nNo\n\n### Risks\n\nNo",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlLtEcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KAdCV",
                                           "createdAt":  "2024-08-28T13:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "`ActivitySource` is mentioned in the title but not in the post. Can you elaborate what the benefits would be for that?",
                                           "updatedAt":  "2024-08-28T13:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KAfEv",
                                           "createdAt":  "2024-08-28T13:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e ActivitySource is mentioned in the title but not in the post. Can you elaborate what the benefits would be for that?\n\nOh！I forgot write that 😱",
                                           "updatedAt":  "2024-08-28T13:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KJink",
                                           "createdAt":  "2024-08-29T14:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @Cricle!  Some source generator work has been done on EventSource, for example https://github.com/dotnet/runtime/pull/45699.  Remaining work is tracked on https://github.com/dotnet/runtime/issues/56154.  Our team does not have immediate plans to work on this - please do feel free to submit a PR if you plan on working on it as we welcome community contributions!",
                                           "updatedAt":  "2024-08-29T14:01:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KP-Yb",
                                           "createdAt":  "2024-08-29T23:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwWCUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2024-08-30T02:36:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Cricle",
                                           "body":  "I think this will be a huge challenge  for me.\n\nBut I will try to do it.\n\nI am not familiar with the code structure of runtime, so I may not be able to complete it in 10.0.0.",
                                           "updatedAt":  "2024-08-29T23:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kvmiu",
                                           "createdAt":  "2024-09-04T01:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "But in reality, the form of `ActivitySource` event generation is still unknown",
                                           "updatedAt":  "2024-09-04T01:30:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QyjSb",
                                           "createdAt":  "2024-10-22T12:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e         //Use unsafe method because it is faster than fixed, and easily to generate\n\u003e        DataPointer = (nint)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(global::System.MemoryExtensions.AsSpan(address)),\n\nThis is invalid use of AsPointer. It would introduce intermittent crashes. From https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.aspointer: \"If the original managed pointer points within a GC-managed object, the caller must ensure that the source object is pinned\". You are not doing that here.",
                                           "updatedAt":  "2024-10-22T12:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q3scO",
                                           "createdAt":  "2024-10-22T23:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e \u003e         //Use unsafe method because it is faster than fixed, and easily to generate\n\u003e \u003e        DataPointer = (nint)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref global::System.Runtime.InteropServices.MemoryMarshal.GetReference(global::System.MemoryExtensions.AsSpan(address)),\n\u003e \n\u003e This is invalid use of AsPointer. It would introduce intermittent crashes. From https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.aspointer: \"If the original managed pointer points within a GC-managed object, the caller must ensure that the source object is pinned\". You are not doing that here.\n\nDo I change to \u0027fixed\u0027 for the manage object？",
                                           "updatedAt":  "2024-10-22T23:47:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q301g",
                                           "createdAt":  "2024-10-23T00:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Do I change to \u0027fixed\u0027 for the manage object？\n\nRight",
                                           "updatedAt":  "2024-10-23T00:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RAwIW",
                                           "createdAt":  "2024-10-23T17:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e \u003e Do I change to \u0027fixed\u0027 for the manage object？\n\u003e \n\u003e Right\n\nDone to change it",
                                           "updatedAt":  "2024-10-23T17:08:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RGVDo",
                                           "createdAt":  "2024-10-24T05:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Thanks @Cricle! I started looking through this and a couple questions so far:\n\n1. The attribute you are proposing is named \u0027GeneratedEventSourceEventAttribute\u0027 but the attribute in the proposed usage is \u0027EventSourceEventGenerate\u0027. Are these two attributes intended to be the same or am I misunderstanding something?\n\n2. Your example has a partial OnRaise(int,string) method, but doesn\u0027t show an implementation so I wouldn\u0027t expect the code to compile as-is. What is the goal for this OnRaise() method and who is intended to implement it?\n\n3. The OnRaise method has a parameter signature that is int, string but I\u0027m not sure how the generator would determine this parameter list? \n\n\n@jaredpar - I don\u0027t have a lot of expertise and what is easy/hard to implement in a source generator so I was hoping to get your advice on a design question here.\n\nMy hope is that we wouldn\u0027t need a new attribute that drives the source generator and instead it could activate automatically whenever the implementation for one of these EventSource [Event] attributed methods is missing.  Would it be challenging for the source generator to determine the set of partial methods with that attribute for which no implementation is present? Are there any other problems you are aware of trying to use that approach?\n\nExample EventSource:\n\n```C#\n[EventSource(Name=\"Foo\")]\npartial class FooEventSource\n{\n    // this method already has an impl so the source generator shouldn\u0027t create one.\n    [Event(1)]\n    public partial void AppStarted(string message, int favoriteNumber) =\u003e WriteEvent(1, message, favoriteNumber);\n\n    // this method is missing an impl and needs an auto-generated implementation\n    [Event(2)]\n    public partial void AppStopped(string message);\n}\n```\n\nAlthough I wouldn\u0027t expect it is common, I\u0027d also hope the generator could be robust in the presence of extra partial definitions:\n\n```C#\npartial class FooEventSource\n{\n    // Even though the method doesn\u0027t have an impl here, the generator would need to recognize the previous\n    // partial definition site above does provide an impl so it avoids creating a duplicate one.\n    [Event(1)]\n    public partial void AppStarted(string message, int favoriteNumber);\n    [Event(2)]\n    public partial void AppStopped(string message);\n}\n```\n\n\n\n",
                                           "updatedAt":  "2024-10-24T22:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RJHKD",
                                           "createdAt":  "2024-10-24T12:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@333fred, @CyrusNajmabadi ",
                                           "updatedAt":  "2024-10-24T12:00:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RP7OD",
                                           "createdAt":  "2024-10-25T05:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "@noahfalk Thanks for discussing \n1. The new attribute I think can be removed, as your hope say. \nLess change is the best.\n\n2. I think generate OnXXX and the parameter same as event, can provide to Meter and Counter.\nThe parameter list generate has been implemented.\n\nYou can see my project [Diagnostics.Net](https://github.com/Cricle/Diagnostics.Net)\n\nThe issure content will be change later.",
                                           "updatedAt":  "2024-10-25T06:33:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Romy5",
                                           "createdAt":  "2024-10-29T06:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I think generate OnXXX and the parameter same as event, can provide to Meter and Counter\n\nThe way you have it written above, they don\u0027t match:\n\n```\npublic void GoHome(string address,double usedTime)\npartial void OnRaise(int i, string address)\n```\n\nIf I assume they were supposed to match that would be `OnGoHome(string address, double usedTime)` right?\n\n\nIf the developer would be responsible for writing OnGoHome() I think it might be easier if we let the developer create and name their own wrapper rather than asking them to learn about a specific callback naming convention the generator is using. For example the developer could write:\n\n```\npublic MyEventSource : EventSource\n{\n    [NonEvent]\n    public HandleGoHome(string address, double usedTime)\n    {\n        // do some other custom work first. This can have whatever the dev would have written in OnGoHome()\n        AddCounter();\n\n        // write the EventSource event\n        GoHome(address, usedTime);\n    }\n\n\n    [Event(1)]\n    partial void GoHome(string address,double usedTime);\n}\n```\n\nIf the generator is automatically implementing OnGoHome() via yet more attributes similar to your Diagnostics.Net project, that may be code-gen better left to external source-generator rather than something bundled with the runtime. I don\u0027t know that there would be much demand for it so I\u0027d prefer not to have the runtime team become responsible for maintaining it. I believe there are mechanisms for NuGet packages to disable a built-in source generator in favor of a custom one but I\u0027d need to hunt down the details.",
                                           "updatedAt":  "2024-10-29T06:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rpv90",
                                           "createdAt":  "2024-10-29T09:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "Right, it is a written error.\n\nThe difference between these two lies in who is responsible for maintenance and the issue of code volume.\n\nThe special situation may be relatively rate.\n\nI will change the issue content later",
                                           "updatedAt":  "2024-10-30T09:38:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SmzuV",
                                           "createdAt":  "2024-11-06T12:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "@noahfalk @jaredpar I still want to add attribute to control it.\n\nPlease roslyn team join in the discussion.",
                                           "updatedAt":  "2024-11-07T03:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SpS4-",
                                           "createdAt":  "2024-11-06T16:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e My hope is that we wouldn\u0027t need a new attribute that drives the source generator and instead it could activate automatically whenever the implementation for one of these EventSource [Event] attributed methods is missing.  \n\nThe ideal state is having a source generator that triggers off an attribute. There is a bit of work to determine if the method is missing or not but that is doable. ",
                                           "updatedAt":  "2024-11-06T16:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S-h3f",
                                           "createdAt":  "2024-11-08T22:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e The ideal state is having a source generator that triggers off an attribute\n\nThanks! When you say an attribute, I assume you mean a new attribute whose only purpose is to activate the source generator as opposed to the pre-existing Event attribute?\n\n\u003e @noahfalk @jaredpar I still want to add attribute to control it.\n\nIf we do use an attribute, what do you think about having it be per-method rather than per-type? I\u0027m anticipating that there is a fair amount of history where developers have been writing custom EventSource method implementations and it may be more awkward to adopt the generator if it is an all or nothing choice at the class level.",
                                           "updatedAt":  "2024-11-08T22:47:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S-8cs",
                                           "createdAt":  "2024-11-09T01:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "Same as LoggerMessage generator?\n\nIn history EventSource the Event method does not write partial keyword, because it must be implemented.\n\nThe class level means: tag class, write your events and use partial keyword, the generator will do it.\n\nThe method level means: tag all what you want to be generated methods, use partial keyword, the generator will do it.\n\nThe difference with class level no need to write many control attributes, but the method level has higher precision in control.\n\nFor me, I prefer to write less, what about you.",
                                           "updatedAt":  "2024-11-09T01:35:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T3rOE",
                                           "createdAt":  "2024-11-16T23:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e For me, I prefer to write less, what about you.\n\nI\u0027m not opposed to having a class level option, but I\u0027d be skeptical if it is the only option because anyone who wants to customize a single method would have to abandon the auto generation completely.",
                                           "updatedAt":  "2024-11-16T23:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T4AJv",
                                           "createdAt":  "2024-11-17T05:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "Do you mean the user can select the class or method control?",
                                           "updatedAt":  "2024-11-17T05:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UPPkZ",
                                           "createdAt":  "2024-11-20T00:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Yeah, I mean the user could write either:\n\n```\n[AutoGenerate] // TBD what the actual name of this attribute should be\n[EventSource(Name=\"Foo\")]\npublic class FooEventSource\n{\n    [Event(1)]\n    public partial void GoHome(string address,double usedTime);\n    [Event(2)]\n    public partial void SomeOtherEvent(string arg);\n}\n```\n\nOR\n```\n[EventSource(Name=\"Foo\")]\npublic class FooEventSource\n{\n    [Event(1)]\n    [AutoGenerate]\n    public partial void GoHome(string address,double usedTime);\n    [Event(2)]\n    [AutoGenerate]\n    public partial void SomeOtherEvent(string arg);\n}\n```\n\nAs a heads up, I\u0027ll be on an extended vacation starting at the end of this week and I don\u0027t know if anyone else will be available to discuss the design. Unfortunately it may need to pause until January unless someone else can take over.\n",
                                           "updatedAt":  "2024-11-20T00:13:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Uu0Rx",
                                           "createdAt":  "2024-11-23T04:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "I think this is feasible and practical, do others have any other opinions?",
                                           "updatedAt":  "2024-11-23T04:34:27Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "[API Proposal]:  Add `EventSourceEventGenerateAttribute` to generate event code",
        "labels":  [
                       "enhancement",
                       "question",
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107505",
        "createdAt":  "2024-09-08T00:34:47Z",
        "number":  107505,
        "author":  "birojnayak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:13:18Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nWhile benchmarking few of libraries we realized the method ```EventSource.WriteEvent``` perform slow when ran between 2 versions of Amazon Linux. Amazon Linux 2 and Amazon Linux 2023. Source code to test is below.\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\n\r\n### Configuration\r\n[benchmarkSourceCode.zip](https://github.com/user-attachments/files/16920224/benchmark.zip)\r\n\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\nI don\u0027t think this is a regression. This happens under heavy load and multi threaded scenario.\r\n\r\n### Data\r\n\r\n**Amazon Linux 2/ 8(vCPU)**\r\n\r\n```\r\ndev-dsk-biroj-2b-2ab33525 % dotnet run -c Release\r\nTotal time took 00:00:25.7931139\r\n```\r\n\r\n\r\n\r\n**Amazon Linux 2023/ t2.xlarge / 4(vCPU)/16GB RAM**\r\n```\r\n[ec2-user@ip-172-31-27-101 BenchMarkEvent]$ dotnet run -c Release\r\nTotal time took 00:00:23.9892903\r\n```\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n\r\n### Analysis\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbnZtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LRBwv",
                                           "createdAt":  "2024-09-08T00:39:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-08T00:39:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dudm2",
                                           "createdAt":  "2025-02-09T12:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-09T12:13:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Performance of EVentSource (WriteEvent) is slow when compared across Amazon Linux distros",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "tenet-performance",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112621",
        "createdAt":  "2025-02-17T01:39:13Z",
        "number":  112621,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T01:24:07Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20250216.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=953953\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25367542\u0026resultId=162678\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitosr_stress-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents\nnet10.0-linux-Release-x64-jitosr_stress-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents\nnet10.0-windows-Release-x64-jitosr_stress-Windows.10.Amd64.Open\n    - System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 134 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\n   at System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents() in /_/src/libraries/System.Diagnostics.DiagnosticSource/tests/DiagnosticSourceEventSourceBridgeTests.cs:line 38\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtZ40yQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ep1rg",
                                           "createdAt":  "2025-02-17T01:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-17T01:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eqCmC",
                                           "createdAt":  "2025-02-17T02:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Most likely this is a time out in the remote executor. Increasing the remote executor timeout in the test should help.",
                                           "updatedAt":  "2025-02-17T02:33:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n71ZC",
                                           "createdAt":  "2025-04-21T02:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20250420.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1021374\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27358624\u0026resultId=159448\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-jitosr_stress_random-Windows.10.Amd64.Open\n    - System.Reflection.Metadata.ApplyUpdateTest.TestGenericAddStaticField\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was -1073740286 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at System.Reflection.Metadata.ApplyUpdateUtil.TestCase(Action testBody, RemoteInvokeOptions options) in /_/src/libraries/System.Runtime.Loader/tests/ApplyUpdateUtil.cs:line 130\n   at System.Reflection.Metadata.ApplyUpdateTest.TestGenericAddStaticField() in /_/src/libraries/System.Runtime.Loader/tests/ApplyUpdateTest.cs:line 896\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 126\n```",
                                           "updatedAt":  "2025-04-21T02:00:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oA0en",
                                           "createdAt":  "2025-04-21T15:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQ52Lg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SakeTao",
                                                                               "createdAt":  "2025-05-06T01:30:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@SakeTao this is a different failure than the one reported in this issue. You may open a new issue track the new one under `System.Reflection.Metadat` area. ",
                                           "updatedAt":  "2025-04-21T15:27:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qDKvo",
                                           "createdAt":  "2025-05-06T01:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250503.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1032977\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27748028\u0026resultId=191060\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x86-jitstress_random_2-Windows.10.Amd64.Open\n    - System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents\n```\n\n**Error message:**\n```\n Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was -1073740286 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\n   at System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents() in /_/src/libraries/System.Diagnostics.DiagnosticSource/tests/DiagnosticSourceEventSourceBridgeTests.cs:line 39\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-05-06T01:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qNGE2",
                                           "createdAt":  "2025-05-06T18:38:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@SakeTao are you interested in submitting a PR to fix this issue? I think we just need to increase the timeout to the remote executor for the failing test, something like the following:\n\nhttps://github.com/dotnet/runtime/blob/6a3a32e2574778edcd9602a468b00c21cc400a57/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/ConsoleLifetimeExitTests.cs#L139",
                                           "updatedAt":  "2025-05-06T18:38:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rn-xc",
                                           "createdAt":  "2025-05-14T08:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shimingsg",
                                           "body":  "\u003e [@SakeTao](https://github.com/SakeTao) are you interested in submitting a PR to fix this issue? I think we just need to increase the timeout to the remote executor for the failing test, something like the following:\n\u003e \n\u003e [runtime/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/ConsoleLifetimeExitTests.cs](https://github.com/dotnet/runtime/blob/6a3a32e2574778edcd9602a468b00c21cc400a57/src/libraries/Microsoft.Extensions.Hosting/tests/UnitTests/ConsoleLifetimeExitTests.cs#L139)\n\u003e \n\u003e Line 139 in [6a3a32e](/dotnet/runtime/commit/6a3a32e2574778edcd9602a468b00c21cc400a57)\n\u003e \n\u003e  }, new RemoteInvokeOptions() { TimeOut = 30_000, ExpectedExitCode = expectedExitCode }); // give a 30 second time out, so if this does hang, it doesn\u0027t hang for the full timeout\n\nSystem.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents in the latest run [1038678](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038678) is passed, keep tracking.",
                                           "updatedAt":  "2025-05-14T08:57:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61ZBRn",
                                           "createdAt":  "2025-07-07T01:29:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250705.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1086398)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress_random_2-(Debian.13.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-13-helix-arm32v7\n    - System.Security.Cryptography.X509Certificates.Tests.RevocationTests.AiaTests.AiaIgnoresCertOverLimit\n```\n\n**Error message:**\n```\nMicrosoft.DotNet.RemoteExecutor.RemoteExecutionException : Exit code was 139 but it should have been 42\n```\n\n**Stack trace:**\n```\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/arcade/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 242\n   at System.Security.Cryptography.X509Certificates.Tests.RevocationTests.AiaTests.AiaIgnoresCertOverLimit() in /_/src/libraries/System.Security.Cryptography/tests/X509Certificates/RevocationTests/AiaTests.cs:line 189\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-07-07T01:29:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61iZMX",
                                           "createdAt":  "2025-07-07T15:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@VincentBu this is a different issue. The original issue was in `DiagnosticSourceEventSourceBridgeTests` but your stack is from a different test `System.Security.Cryptography.X509Certificates.Tests.RevocationTest`. If there is not an issue for the crypto tests, please open one for that. ",
                                           "updatedAt":  "2025-07-07T15:49:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61njTJ",
                                           "createdAt":  "2025-07-08T01:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZy1Nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-07-08T15:47:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "\u003e [@VincentBu](https://github.com/VincentBu) this is a different issue. The original issue was in `DiagnosticSourceEventSourceBridgeTests` but your stack is from a different test `System.Security.Cryptography.X509Certificates.Tests.RevocationTest`. If there is not an issue for the crypto tests, please open one for that.\n\n@tarekgh I have created a new issue for this [failed test](https://github.com/dotnet/runtime/issues/117401) ",
                                           "updatedAt":  "2025-07-08T01:24:07Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Test failure: System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestEnableAllActivitySourcesAllEvents",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Tracing",
                       "os-linux",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114461",
        "createdAt":  "2025-04-09T22:11:29Z",
        "number":  114461,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:27:53Z",
        "body":  "https://github.com/dotnet/runtime/pull/109006#discussion_r2035471157:\n\n`OnProcessExit` is no longer called on normal program termination -\u003e the tracing shutdown is no longer executed during shutdown -\u003e we should see tracing tests fail -\u003e we have a test hole since no tracing tests are failing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpmBQqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mXMkz",
                                           "createdAt":  "2025-04-09T22:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T22:12:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mYFCr",
                                           "createdAt":  "2025-04-10T01:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@mdh1418 ",
                                           "updatedAt":  "2025-04-10T01:37:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Missing test coverage of event pipe shutdown handlers [nativeaot]",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116883",
        "createdAt":  "2025-06-20T22:49:05Z",
        "number":  116883,
        "author":  "orange-puff",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T14:55:14Z",
        "body":  "### Description\n\nIt seems that calling\n`EnableEvents` for one instance of an `EventListener` is causing another instance to have events enabled for it. Not only that, it seems that disabling an `EventSource` for a specific instance of an `EventListener` will only stop some events from being written, but not `EventCounters` type events.\n\n### Reproduction Steps\n\nThis shows the behavior where enabling events for one `EventListener` enables `EventCounters` from the `EventSource` and the other `EventListener` receives those events.\nhttps://github.com/orange-puff/EventListenerBugRepro/tree/main\n\nThis branch shows the behavior where disabling events for an instance of `EventListener` that enabled events for this `EventSource` only stops some events from being written to it, but not `EventCounters`. All `EventListener` which enabled events for a given `EventSource` need to disable it for `EventCounters` events to stop being written to them.\nhttps://github.com/orange-puff/EventListenerBugRepro/tree/disabling-behavior\n\n### Expected behavior\n\nhttps://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener?view=net-8.0\nAccording to the docs;\n\n\u003e Multiple event listeners can be defined in a single application domain. Each listener is logically independent of the other listeners so that events that are enabled or disabled by one listener affect only that listener. It is possible for commands sent with the [SendCommand](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventsource.sendcommand?view=net-8.0) method to do a semantic operation (such as a garbage collection or flushing data) that affects the other listeners, but this is the exception rather than the rule.\n\nThis does not seem to be true\n\n### Actual behavior\n\nAfter some experimentation and code reading, I think this is how it works:\n\n1. When an `EventListener` calls `EnableEvents` for an `EventSource` with `EventCounterIntervalSec` set in the args parameter, `EventCounters` from this `EventSource` will be sent to ALL `EventListener` . When `EventCounterIntervalSec` is not set, `EventCounters` events will not be sent.\nhttps://github.com/dotnet/dotnet/blob/main/src/runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/CounterGroup.cs#L56\n2. only after all `EventListener` which enabled events for the `EventSource` disable events for the `EventSource` will `EventCounters` for that `EventSource` stop being sent\nhttps://github.com/dotnet/dotnet/blob/main/src/runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/CounterGroup.cs#L81\n3. The first `EventListener` to call `EnableEvents` for an `EventSource` with `EventCounterIntervalSec` set in the args parameter will have its value used for the interval. Subsequent calls with different `EventCounterIntervalSec` will not be \nhttps://github.com/dotnet/dotnet/blob/main/src/runtime/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/CounterGroup.cs#L163\n\nused### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsmaQvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6yZpC_",
                                           "createdAt":  "2025-06-20T22:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @steveisok, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-20T22:49:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "EnableEvents for one EventListener seems to impact another EventListener",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117520",
        "createdAt":  "2025-07-10T21:16:55Z",
        "number":  117520,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:02Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1091361\nBuild error leg or test failing: BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\nPull request: https://github.com/dotnet/runtime/pull/116534\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration\", \"Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1091361\r\n**Error message validated:** `[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/10/2025 9:17:28 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1152145](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152145)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152145\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31826890\u0026resultId=163119)|dotnet/runtime#119859|\r\n|[1151910](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151910)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151910\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31821078\u0026resultId=174826)|dotnet/runtime#119720|\r\n|[1150230](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150230)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150230\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31776906\u0026resultId=141361)|dotnet/runtime#119791|\r\n|[1143020](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143020)|dotnet/runtime|[BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143020\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31514292\u0026resultId=145751)|dotnet/runtime#119482|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|3|4|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtpEnAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc62kScA",
                                           "createdAt":  "2025-07-11T16:36:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @steveisok, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-11T16:36:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "BasicEventSourceTests.TestsManifestGeneration.Test_EventSource_EtwManifestGeneration is failing in CI",
        "labels":  [
                       "area-System.Diagnostics.Tracing",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118983",
        "createdAt":  "2025-08-22T08:48:32Z",
        "number":  118983,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T17:05:45Z",
        "body":  "**Failed in:** [runtime-coreclr outerloop 20250821.7](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1129297)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked no_tiered_compilation @ (Alpine.322.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-arm64v8\n    - tracing/eventpipe/diagnosticport/diagnosticport/diagnosticport.cmd\n```\n\n**Error message:**\n```\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\nProcess terminated.\nAssertion failed.\ncurrentBlock.m_ChunkOffset == prevBlock.m_ChunkOffset + prevBlock.m_ChunkLength\n   at System.Text.StringBuilder.AssertInvariants()\n   at System.Text.StringBuilder.ToString()\n   at Tracing.Tests.Common.Utils.RunSubprocess(Assembly currentAssembly, Dictionary`2 environment, Func`1 beforeExecution, Func`2 duringExecution, Func`1 afterExecution)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result)\n   at Tracing.Tests.DiagnosticPortValidation.DiagnosticPortValidation.\u003c\u003ec__DisplayClass1_0.\u003c\u003cTEST_MultipleConnectPortsNoSuspend\u003eb__0\u003ed.MoveNext()\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\n   at System.Threading.Tasks.Task.TrySetResult()\n   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result)\n   at System.Threading.Tasks.UnwrapPromise`1.TrySetFromTask(Task task, Boolean lookForOce)\n   at System.Threading.Tasks.UnwrapPromise`1.ProcessInnerTask(Task task)\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\n   at System.Threading.Thread.StartCallback()\nwaitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\n/root/helix/work/workitem/e/tracing/tracing/../eventpipe/diagnosticport/diagnosticport/diagnosticport.sh: line 496:  1603 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/eventpipe/diagnosticport/diagnosticport/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/tracing/eventpipe/diagnosticport/diagnosticport/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\n02:46:46\nResponse file: /root/helix/work/workitem/e/tracing/eventpipe/diagnosticport/diagnosticport/Microsoft.Diagnostics.NETCore.Client.dll.rsp\n/root/helix/work/workitem/e/tracing/eventpipe/diagnosticport/diagnosticport/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\n-o:/root/helix/work/workitem/e/tracing/eventpipe/diagnosticport/diagnosticport/Microsoft.Diagnostics.NETCore.Client.dll\n-O\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/roo\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor17|0_18(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv6GJlw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_naVa",
                                           "createdAt":  "2025-08-22T15:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @steveisok, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-22T15:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_oYmX",
                                           "createdAt":  "2025-08-22T17:05:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Something is causing the stdout StringBuilder contents to get corrupted. Either a subprocess race or junky output in musl. ",
                                           "updatedAt":  "2025-08-22T17:05:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure: tracing/eventpipe/diagnosticport/diagnosticport/diagnosticport.cmd",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Tracing",
                       "os-linux",
                       "blocking-outerloop"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119014",
        "createdAt":  "2025-08-22T17:18:44Z",
        "number":  119014,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T17:24:08Z",
        "body":  "### Description\n\nStarting `dotnet-counters` during .NET app initialization can lead to a deadlock between the `EventListenersLock` and the `ListLock` acquired during `ArrayPoolEventSource`\u0027s static constructor.\n\nThread 0 acquires the EventListenersLock and waits for the ArrayPoolEventSource ListLock\nThread 8 acquires the ArrayPoolEventSource ListLock and waits for the EventListenerLock\n\n```\n0:000\u003e ~*k\n\n.  0  Id: 84c8.fd14 Suspend: 0 Teb: 00000066`91771000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 00000066`919788e8 00007ffc`bdeb993f     ntdll!NtWaitForAlertByThreadId+0x14\n01 00000066`919788f0 00007ffc`bdefaa3f     ntdll!RtlpWaitOnCriticalSection+0x58f\n02 00000066`919789f0 00007ffc`bdefa1b2     ntdll!RtlpEnterCriticalSectionContended+0x1ef\n03 00000066`91978a70 00007ffb`4c55b6db     ntdll!RtlEnterCriticalSection+0xf2\n04 00000066`91978ab0 00007ffb`4bc3d29f     coreclr!minipal_mutex_enter+0x3b [Q:\\source\\mdh1418\\runtime\\src\\native\\minipal\\mutex.c @ 50] \n05 00000066`91978ae0 00007ffb`4bbfe993     coreclr!CrstBase::Enter+0x1ef [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\crst.cpp @ 262] \n06 00000066`91978b50 00007ffb`4bbfdde9     coreclr!ListLockEntryBase\u003cvoid *\u003e::FinishDeadlockAwareEnter+0x43 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\listlock.h @ 202] \n07 00000066`91978ba0 00007ffb`4bdd63c8     coreclr!ListLockEntryBase\u003cvoid *\u003e::LockHolder::DeadlockAwareAcquire+0x49 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\listlock.h @ 228] \n08 00000066`91978bd0 00007ffb`4bdcf79f     coreclr!MethodTable::DoRunClassInitThrowing+0x768 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3708] \n09 00000066`91979b10 00007ffb`4be3f12d     coreclr!MethodTable::CheckRunClassInitThrowing+0x42f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3852] \n0a 00000066`91979d40 00007ffb`4be4a59e     coreclr!DynamicHelperFixup+0x55d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\prestub.cpp @ 3193] \n0b 00000066`9197a460 00007ffb`4c4e547a     coreclr!DynamicHelperWorker+0x26e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\prestub.cpp @ 3504] \n0c 00000066`9197a7e0 00007ffb`45127372     coreclr!DelayLoad_Helper+0x7a [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 59] \n0d 00000066`9197a8a0 00007ffb`45033528     System_Private_CoreLib!System.Buffers.SharedArrayPool\u003cchar\u003e.Rent+0x22 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Buffers\\SharedArrayPool.cs @ 52] \n0e 00000066`9197a930 00007ffa`ed4978ad     System_Private_CoreLib!System.Runtime.CompilerServices.DefaultInterpolatedStringHandler..ctor+0x38 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\DefaultInterpolatedStringHandler.cs @ 58] \n0f 00000066`9197a970 00007ffa`ed491470     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource.CommandHandler.ParseSpecs+0xfd [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\src\\System\\Diagnostics\\Metrics\\MetricsEventSource.cs @ 721] \n10 00000066`9197aa90 00007ffa`ed490617     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource.CommandHandler.OnEventCommand+0xb50 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\src\\System\\Diagnostics\\Metrics\\MetricsEventSource.cs @ 513] \n11 00000066`9197ad60 00007ffb`450d64db     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource.OnEventCommand+0xb7 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\src\\System\\Diagnostics\\Metrics\\MetricsEventSource.cs @ 329] \n12 00000066`9197adc0 00007ffb`450d4120     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource.DoCommand+0x3db [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 2792] \n13 00000066`9197ae60 00007ffb`450d28af     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource.Initialize+0x2e0 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 1738] \n14 00000066`9197af10 00007ffb`450d27c2     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource..ctor+0x9f\n15 00000066`9197af70 00007ffa`ed48f408     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource..ctor+0x12\n16 00000066`9197afa0 00007ffa`ed48f3bd     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource..ctor+0x18\n17 00000066`9197afd0 00007ffb`4c4e39d3     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource..cctor+0x2d\n18 00000066`9197b010 00007ffb`4bf63710     coreclr!CallDescrWorkerInternal+0x83 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n19 00000066`9197b050 00007ffb`4bf64be6     coreclr!CallDescrWorkerWithHandler+0x130 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n1a 00000066`9197b0b0 00007ffb`4bf643c6     coreclr!`DispatchCallDebuggerWrapper\u0027::`3\u0027::__Body::Run+0x66 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 139] \n1b 00000066`9197b100 00007ffb`4bf64690     coreclr!DispatchCallDebuggerWrapper+0x76 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 143] \n1c 00000066`9197b1a0 00007ffb`4bdf14e4     coreclr!DispatchCallSimple+0x250 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 233] \n1d 00000066`9197b330 00007ffb`4bdd647f     coreclr!MethodTable::RunClassInitEx+0x5b4 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3545] \n1e 00000066`9197b750 00007ffb`4bdcf79f     coreclr!MethodTable::DoRunClassInitThrowing+0x81f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3727] \n1f 00000066`9197c690 00007ffb`4c0bb242     coreclr!MethodTable::CheckRunClassInitThrowing+0x42f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3852] \n20 00000066`9197c8c0 00007ffb`4502f7df     coreclr!InitClassHelper+0x232 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\jithelpers.cpp @ 257] \n21 00000066`9197cab0 00007ffb`450311f8     System_Private_CoreLib!System.Runtime.CompilerServices.InitHelpers.InitClassSlow+0x3f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\InitHelpers.cs @ 20] \n22 00000066`9197cb80 00007ffb`4503123c     System_Private_CoreLib!System.Runtime.CompilerServices.StaticsHelpers.GetGCStaticBaseSlow+0x18 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\StaticsHelpers.cs @ 57] \n23 00000066`9197cbc0 00007ffa`ed48f369     System_Private_CoreLib!System.Runtime.CompilerServices.StaticsHelpers.GetGCStaticBase+0x1c\n24 00000066`9197cbf0 00007ffa`ed48f325     system_diagnostics_diagnosticsource!System.Diagnostics.Metrics.MetricsEventSource.GetInstance+0x19 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\src\\System\\Diagnostics\\Metrics\\MetricsEventSource.cs @ 59] \n25 00000066`9197cc20 00007ffb`450db34c     System_Private_CoreLib!\n26 00000066`9197cc60 00007ffb`450db0bc     System_Private_CoreLib!System.Diagnostics.Tracing.EventSourceInitHelper.GetMetricsEventSource+0xc [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 3927] \n27 00000066`9197cc90 00007ffb`450cd0cc     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource.OverrideEventProvider.OnControllerCommand+0x2c [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 2496] \n28 00000066`9197cd20 00007ffb`450d1e50     System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventProvider.HandleEnableNotification+0x8c\n29 00000066`9197cd70 00007ffb`450cd1d5     System_Private_CoreLib!System.Diagnostics.Tracing.EventProviderImpl.ProviderCallback+0x90 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventProvider.cs @ 1283] \n2a 00000066`9197cde0 00007ffb`4b86a43a     System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventProvider.Callback+0xf5 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventPipeEventProvider.cs @ 68] \n2b 00000066`9197ce80 00007ffb`4b879e05     coreclr!ep_rt_provider_invoke_callback+0xea [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 492] \n2c 00000066`9197cfd0 00007ffb`4b860aeb     coreclr!provider_invoke_callback+0x385 [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ep-provider.c @ 435] \n2d 00000066`9197d0f0 00007ffb`4b7f3f7b     coreclr!ep_create_provider+0x14b [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ep.c @ 1347] \n2e 00000066`9197d1c0 00007ffb`4c01ef0b     coreclr!EventPipeAdapter::CreateProvider+0x1ab [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\eventpipeadapter.h @ 334] \n2f 00000066`9197d2f0 00007ffb`450cc3e2     coreclr!EventPipeInternal_CreateProvider+0x21b [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\eventpipeinternal.cpp @ 103] \n30 00000066`9197d4e0 00007ffb`450cd26a     System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeInternal.CreateProvider+0x72 [Q:\\source\\mdh1418\\runtime\\artifacts\\obj\\coreclr\\System.Private.CoreLib\\windows.x64.Debug\\generated\\Microsoft.Interop.LibraryImportGenerator\\Microsoft.Interop.LibraryImportGenerator\\LibraryImports.g.cs @ 5793] \n31 00000066`9197d5c0 00007ffb`450cf8ca     System_Private_CoreLib!System.Diagnostics.Tracing.EventPipeEventProvider.Register+0x6a [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventPipeEventProvider.cs @ 78] \n32 00000066`9197d600 00007ffb`450db4a7     System_Private_CoreLib!System.Diagnostics.Tracing.EventProvider.Register+0x3a\n33 00000066`9197d640 00007ffb`450d92ec     System_Private_CoreLib!System.Diagnostics.Tracing.EventSourceInitHelper.PreregisterEventProviders+0x147 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 3969] \n34 00000066`9197d6d0 00007ffb`4c4e39d3     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource.InitializeDefaultEventSources+0x9c\n35 00000066`9197d740 00007ffb`4bf63710     coreclr!CallDescrWorkerInternal+0x83 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n36 00000066`9197d780 00007ffb`4bf642ab     coreclr!CallDescrWorkerWithHandler+0x130 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n37 00000066`9197d7e0 00007ffb`4b84bcb4     coreclr!MethodDescCallSite::CallTargetWorker+0xb8b [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 546] \n38 00000066`9197dfd0 00007ffb`4bc390b2     coreclr!MethodDescCallSite::Call+0x24 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.h @ 446] \n39 00000066`9197e000 00007ffb`4c51ec82     coreclr!CorHost2::CreateAppDomainWithManager+0x842 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\corhost.cpp @ 669] \n3a 00000066`9197e6d0 00007ff7`e6c0e140     coreclr!coreclr_initialize+0x412 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\dlls\\mscoree\\exports.cpp @ 310] \n3b 00000066`9197e8d0 00007ff7`e6c133ca     corerun!run+0x1210 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\hosts\\corerun\\corerun.cpp @ 474] \n3c 00000066`9197f610 00007ff7`e6c1ff09     corerun!wmain+0x12a [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\hosts\\corerun\\corerun.cpp @ 713] \n3d 00000066`9197f770 00007ff7`e6c1fe22     corerun!invoke_main+0x39 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 91] \n3e 00000066`9197f7c0 00007ff7`e6c1fcde     corerun!__scrt_common_main_seh+0x132 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 288] \n3f 00000066`9197f830 00007ff7`e6c1ff7e     corerun!__scrt_common_main+0xe [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 331] \n40 00000066`9197f860 00007ffc`bda7e8d7     corerun!wmainCRTStartup+0xe [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_wmain.cpp @ 17] \n41 00000066`9197f890 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n42 00000066`9197f8c0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   1  Id: 84c8.3f8 Suspend: 0 Teb: 00000066`91775000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 00000066`91aff858 00007ffc`bdf1259e     ntdll!NtWaitForWorkViaWorkerFactory+0x14\n01 00000066`91aff860 00007ffc`bda7e8d7     ntdll!TppWorkerThread+0x37e\n02 00000066`91affbc0 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n03 00000066`91affbf0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   2  Id: 84c8.9888 Suspend: 0 Teb: 00000066`91777000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 00000066`91c7fa78 00007ffc`bdf1259e     ntdll!NtWaitForWorkViaWorkerFactory+0x14\n01 00000066`91c7fa80 00007ffc`bda7e8d7     ntdll!TppWorkerThread+0x37e\n02 00000066`91c7fde0 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n03 00000066`91c7fe10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   3  Id: 84c8.c048 Suspend: 0 Teb: 00000066`91779000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 00000066`91dff838 00007ffc`bdf1259e     ntdll!NtWaitForWorkViaWorkerFactory+0x14\n01 00000066`91dff840 00007ffc`bda7e8d7     ntdll!TppWorkerThread+0x37e\n02 00000066`91dffba0 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n03 00000066`91dffbd0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   4  Id: 84c8.127e8 Suspend: 0 Teb: 00000066`9177b000 Unfrozen \".NET EventPipe\"\n # Child-SP          RetAddr               Call Site\n00 00000066`91f7f3d8 00007ffc`bb45df43     ntdll!NtWaitForMultipleObjects+0x14\n01 00000066`91f7f3e0 00007ffc`bb45de11     KERNELBASE!WaitForMultipleObjectsEx+0x123\n02 00000066`91f7f6d0 00007ffb`4b9fdf9e     KERNELBASE!WaitForMultipleObjects+0x11\n03 00000066`91f7f710 00007ffb`4b857f78     coreclr!ds_ipc_poll+0x3be [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ds-ipc-pal-namedpipe.c @ 263] \n04 00000066`91f7fa20 00007ffb`4b87ad8a     coreclr!ds_ipc_stream_factory_get_next_available_stream+0x298 [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ds-ipc.c @ 393] \n05 00000066`91f7fbb0 00007ffb`4b87b0a4     coreclr!server_loop_tick+0x5a [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ds-server.c @ 118] \n06 00000066`91f7fc50 00007ffc`bda7e8d7     coreclr!server_thread+0x94 [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ds-server.c @ 185] \n07 00000066`91f7fc80 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n08 00000066`91f7fcb0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   5  Id: 84c8.13b78 Suspend: 0 Teb: 00000066`9177d000 Unfrozen \".NET Debugger\"\n # Child-SP          RetAddr               Call Site\n00 00000066`920ff018 00007ffc`bb45df43     ntdll!NtWaitForMultipleObjects+0x14\n01 00000066`920ff020 00007ffb`4b9ee29a     KERNELBASE!WaitForMultipleObjectsEx+0x123\n02 00000066`920ff310 00007ffb`4b9f13a0     coreclr!DebuggerRCThread::MainLoop+0x81a [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 926] \n03 00000066`920ff7b0 00007ffb`4b9f14ee     coreclr!DebuggerRCThread::ThreadProc+0x890 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 731] \n04 00000066`920ffb00 00007ffc`bda7e8d7     coreclr!DebuggerRCThread::ThreadProcStatic+0x9e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\debug\\ee\\rcthread.cpp @ 1322] \n05 00000066`920ffb40 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n06 00000066`920ffb70 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   6  Id: 84c8.11a5c Suspend: 0 Teb: 00000066`9177f000 Unfrozen \".NET Finalizer\"\n # Child-SP          RetAddr               Call Site\n00 00000066`9227ec48 00007ffc`bb45df43     ntdll!NtWaitForMultipleObjects+0x14\n01 00000066`9227ec50 00007ffb`4c0263c4     KERNELBASE!WaitForMultipleObjectsEx+0x123\n02 00000066`9227ef40 00007ffb`4c0257b5     coreclr!FinalizerThread::WaitForFinalizerEvent+0x144 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\finalizerthread.cpp @ 290] \n03 00000066`9227efb0 00007ffb`4bec5f8d     coreclr!FinalizerThread::FinalizerThreadWorker+0xd5 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\finalizerthread.cpp @ 376] \n04 00000066`9227f2a0 00007ffb`4bec602c     coreclr!ManagedThreadBase_DispatchInner+0x19d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 6830] \n05 00000066`9227f3c0 00007ffb`4bec944e     coreclr!ManagedThreadBase_DispatchMiddle+0x6c [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 6874] \n06 00000066`9227f6a0 00007ffb`4bec953d     coreclr!``ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run\u0027::`5\u0027::__Body::Run+0x5e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7032] \n07 00000066`9227f6f0 00007ffb`4bec6181     coreclr!`ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run+0x8d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7034] \n08 00000066`9227f790 00007ffb`4bec583f     coreclr!ManagedThreadBase_DispatchOuter+0x111 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7054] \n09 00000066`9227f8a0 00007ffb`4c0253bf     coreclr!ManagedThreadBase::KickOff+0x19f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7072] \n0a 00000066`9227f9f0 00007ffc`bda7e8d7     coreclr!FinalizerThread::FinalizerThreadStart+0x16f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\finalizerthread.cpp @ 518] \n0b 00000066`9227fa30 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n0c 00000066`9227fa60 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   7  Id: 84c8.110c4 Suspend: 0 Teb: 00000066`91781000 Unfrozen\n # Child-SP          RetAddr               Call Site\n00 00000066`923ff318 00007ffc`bb45cbbf     ntdll!NtWaitForSingleObject+0x14\n01 00000066`923ff320 00007ffb`4c214137     KERNELBASE!WaitForSingleObjectEx+0xaf\n02 00000066`923ff3c0 00007ffb`4c216a0e     coreclr!CLREventWaitHelper2+0x27 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 373] \n03 00000066`923ff3f0 00007ffb`4c2141c5     coreclr!`CLREventWaitHelper\u0027::`3\u0027::__Body::Run+0x6e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 397] \n04 00000066`923ff440 00007ffb`4c2174dd     coreclr!CLREventWaitHelper+0x85 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 399] \n05 00000066`923ff4e0 00007ffb`4c217049     coreclr!CLREventBase::WaitEx+0x48d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 466] \n06 00000066`923ff6b0 00007ffb`4b86bd8f     coreclr!CLREventBase::Wait+0x49 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 413] \n07 00000066`923ff6f0 00007ffb`4b87c65f     coreclr!ep_rt_wait_event_wait+0xaf [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 725] \n08 00000066`923ff830 00007ffb`4b86a9e2     coreclr!streaming_thread+0x19f [Q:\\source\\mdh1418\\runtime\\src\\native\\eventpipe\\ep-session.c @ 124] \n09 00000066`923ff990 00007ffc`bda7e8d7     coreclr!ep_rt_thread_coreclr_start_func+0x32 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 850] \n0a 00000066`923ff9e0 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n0b 00000066`923ffa10 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n\n   8  Id: 84c8.f440 Suspend: 0 Teb: 00000066`91783000 Unfrozen \".NET Counter Poller\"\n # Child-SP          RetAddr               Call Site\n00 00000066`9257b168 00007ffc`bb45df43     ntdll!NtWaitForMultipleObjects+0x14\n01 00000066`9257b170 00007ffb`4bebc4c0     KERNELBASE!WaitForMultipleObjectsEx+0x123\n02 00000066`9257b460 00007ffb`4bebce4f     coreclr!Thread::DoAppropriateAptStateWait+0x2b0 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 3143] \n03 00000066`9257b590 00007ffb`4bec96d1     coreclr!Thread::DoAppropriateWaitWorker+0x6df [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 3323] \n04 00000066`9257b960 00007ffb`4bebc689     coreclr!`Thread::DoAppropriateWait\u0027::`9\u0027::__Body::Run+0xb1 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 3038] \n05 00000066`9257b9e0 00007ffb`4c21746d     coreclr!Thread::DoAppropriateWait+0x189 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 3040] \n06 00000066`9257bac0 00007ffb`4c217049     coreclr!CLREventBase::WaitEx+0x41d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 459] \n07 00000066`9257bc90 00007ffb`4bea48fe     coreclr!CLREventBase::Wait+0x49 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\synch.cpp @ 413] \n08 00000066`9257bcd0 00007ffb`4bea45ff     coreclr!AwareLock::EnterEpilogHelper+0x2be [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\syncblk.cpp @ 2572] \n09 00000066`9257be60 00007ffb`4bea44ed     coreclr!AwareLock::EnterEpilog+0x8f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\syncblk.cpp @ 2443] \n0a 00000066`9257bf10 00007ffb`4bea4c17     coreclr!AwareLock::Enter+0x45d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\syncblk.cpp @ 2344] \n0b 00000066`9257c180 00007ffb`4bea4c3c     coreclr!SyncBlock::EnterMonitor+0x17 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\syncblk.h @ 1031] \n0c 00000066`9257c1b0 00007ffb`4bad2d3c     coreclr!ObjHeader::EnterObjMonitor+0x1c [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\syncblk.cpp @ 1487] \n0d 00000066`9257c1e0 00007ffb`4bad5048     coreclr!Object::EnterObjMonitor+0x1c [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\object.h @ 280] \n0e 00000066`9257c210 00007ffb`44f9a3a7     coreclr!Monitor_Enter_Slowpath+0x238 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\classlibnative\\bcltype\\objectnative.cpp @ 199] \n0f 00000066`9257c4a0 00007ffb`44f9a552     System_Private_CoreLib!System.Threading.Monitor.Enter_Slowpath+0x57 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Threading\\Monitor.CoreCLR.cs @ 73] \n10 00000066`9257c570 00007ffb`450dbc64     System_Private_CoreLib!System.Threading.Monitor.Enter+0x32 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Threading\\Monitor.CoreCLR.cs @ 123] \n11 00000066`9257c5b0 00007ffb`450d4021     System_Private_CoreLib!System.Diagnostics.Tracing.EventListener.AddEventSource+0x34 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 4324] \n12 00000066`9257c630 00007ffb`450d3e30     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource.Initialize+0x1e1 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\EventSource.cs @ 1714] \n13 00000066`9257c6e0 00007ffb`44f88d5d     System_Private_CoreLib!System.Diagnostics.Tracing.EventSource..ctor+0x80\n14 00000066`9257c730 00007ffb`44f88da7     System_Private_CoreLib!System.Buffers.ArrayPoolEventSource..ctor+0x6d\n15 00000066`9257c770 00007ffb`4c4e39d3     System_Private_CoreLib!System.Buffers.ArrayPoolEventSource..cctor+0x17\n16 00000066`9257c7a0 00007ffb`4bf63710     coreclr!CallDescrWorkerInternal+0x83 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n17 00000066`9257c7e0 00007ffb`4bf64be6     coreclr!CallDescrWorkerWithHandler+0x130 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n18 00000066`9257c840 00007ffb`4bf643c6     coreclr!`DispatchCallDebuggerWrapper\u0027::`3\u0027::__Body::Run+0x66 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 139] \n19 00000066`9257c890 00007ffb`4bf64690     coreclr!DispatchCallDebuggerWrapper+0x76 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 143] \n1a 00000066`9257c930 00007ffb`4bdf14e4     coreclr!DispatchCallSimple+0x250 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 233] \n1b 00000066`9257cac0 00007ffb`4bdd647f     coreclr!MethodTable::RunClassInitEx+0x5b4 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3545] \n1c 00000066`9257cee0 00007ffb`4bdcf79f     coreclr!MethodTable::DoRunClassInitThrowing+0x81f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3727] \n1d 00000066`9257de20 00007ffb`4be3f12d     coreclr!MethodTable::CheckRunClassInitThrowing+0x42f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\methodtable.cpp @ 3852] \n1e 00000066`9257e050 00007ffb`4be4a59e     coreclr!DynamicHelperFixup+0x55d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\prestub.cpp @ 3193] \n1f 00000066`9257e770 00007ffb`4c4e547a     coreclr!DynamicHelperWorker+0x26e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\prestub.cpp @ 3504] \n20 00000066`9257eaf0 00007ffb`45127372     coreclr!DelayLoad_Helper+0x7a [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\ExternalMethodFixupThunk.asm @ 59] \n21 00000066`9257ebb0 00007ffb`45033528     System_Private_CoreLib!System.Buffers.SharedArrayPool\u003cchar\u003e.Rent+0x22 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Buffers\\SharedArrayPool.cs @ 52] \n22 00000066`9257ec40 00007ffb`450e3789     System_Private_CoreLib!System.Runtime.CompilerServices.DefaultInterpolatedStringHandler..ctor+0x38 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Runtime\\CompilerServices\\DefaultInterpolatedStringHandler.cs @ 58] \n23 00000066`9257ec80 00007ffb`450ca7c8     System_Private_CoreLib!System.Diagnostics.Tracing.PollingCounter.WritePayload+0xe9 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\PollingCounter.cs @ 64] \n24 00000066`9257ed70 00007ffb`450caa05     System_Private_CoreLib!System.Diagnostics.Tracing.CounterGroup.OnTimer+0xd8 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\CounterGroup.cs @ 256] \n25 00000066`9257ee20 00007ffb`44f9afff     System_Private_CoreLib!System.Diagnostics.Tracing.CounterGroup.PollForValues+0xf5 [Q:\\source\\mdh1418\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Diagnostics\\Tracing\\CounterGroup.cs @ 323] \n26 00000066`9257ef10 00007ffb`4c4e39d3     System_Private_CoreLib!System.Threading.Thread.StartCallback+0x8f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\System.Private.CoreLib\\src\\System\\Threading\\Thread.CoreCLR.cs @ 108] \n27 00000066`9257ef50 00007ffb`4bf63710     coreclr!CallDescrWorkerInternal+0x83 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n28 00000066`9257ef90 00007ffb`4bf646ac     coreclr!CallDescrWorkerWithHandler+0x130 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 59] \n29 00000066`9257eff0 00007ffb`4bf96807     coreclr!DispatchCallSimple+0x26c [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\callhelpers.cpp @ 239] \n2a 00000066`9257f180 00007ffb`4bec5f8d     coreclr!KickOffThread_Worker+0x3c7 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\comsynchronizable.cpp @ 137] \n2b 00000066`9257f390 00007ffb`4bec602c     coreclr!ManagedThreadBase_DispatchInner+0x19d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 6830] \n2c 00000066`9257f4b0 00007ffb`4bec944e     coreclr!ManagedThreadBase_DispatchMiddle+0x6c [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 6874] \n2d 00000066`9257f790 00007ffb`4bec953d     coreclr!``ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run\u0027::`5\u0027::__Body::Run+0x5e [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7032] \n2e 00000066`9257f7e0 00007ffb`4bec6181     coreclr!`ManagedThreadBase_DispatchOuter\u0027::`8\u0027::__Body::Run+0x8d [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7034] \n2f 00000066`9257f880 00007ffb`4bec583f     coreclr!ManagedThreadBase_DispatchOuter+0x111 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7054] \n30 00000066`9257f990 00007ffb`4bf963a8     coreclr!ManagedThreadBase::KickOff+0x19f [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\threads.cpp @ 7072] \n31 00000066`9257fae0 00007ffc`bda7e8d7     coreclr!KickOffThread+0x278 [Q:\\source\\mdh1418\\runtime\\src\\coreclr\\vm\\comsynchronizable.cpp @ 206] \n32 00000066`9257fcd0 00007ffc`bdebc34c     kernel32!BaseThreadInitThunk+0x17\n33 00000066`9257fd00 00000000`00000000     ntdll!RtlUserThreadStart+0x2c\n```\n\n### Reproduction Steps\n\nIt should repro with just `dotnet run`, but I\u0027ve mostly been hitting this through `corerun \u003capp\u003e.dll` and `corerun --debug \u003capp\u003e.dll`.\n\nWith a simple console app\n\nTerminal window 1: `corerun \u003capp\u003e.dll`\n\nImmediately afterwards,\nTerminal window 2: `dontet-counters collect/monitor -n corerun`\n\n### Expected behavior\n\nThe .NET app progresses and counters are collected/monitored.\n\n### Actual behavior\n\n.NET app stalls and counters makes no progress\n\n### Regression?\n\nNo, this has been a recurring issue with EventSource callbacks.\n\n### Known Workarounds\n\nStart dotnet-counters later instead of immediately after\nor\nStart the .NET app as a child process of `dotnet-counters` (this seemed to work)\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv6JAhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_ohyf",
                                           "createdAt":  "2025-08-22T17:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @steveisok, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-22T17:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_okCG",
                                           "createdAt":  "2025-08-22T17:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/105682",
                                           "updatedAt":  "2025-08-22T17:24:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Deadlock between EventListenerLock and ArrayPoolEventSource static ctor",
        "labels":  [
                       "area-System.Diagnostics.Tracing"
                   ]
    }
]
