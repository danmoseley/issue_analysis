[
    {
        "url":  "https://github.com/dotnet/runtime/issues/18847",
        "createdAt":  "2016-10-04T20:14:00Z",
        "number":  18847,
        "author":  "ghost",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-17T18:43:07Z",
        "body":  "Just need to wait for the fix in coreclr to propagate over to corefx.\n\nhttps://github.com/dotnet/coreclr/issues/7346\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTF9aog==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MTU0NjUwOA==",
                                           "createdAt":  "2016-10-04T23:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@AtsushiKan I unassigned it from you to reflect \u0027up for grabs\u0027. If/when you work on it, please assign it to yourself. Thanks!\n",
                                           "updatedAt":  "2016-10-04T23:53:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk2MzE2Mw==",
                                           "createdAt":  "2020-08-11T13:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future based on schedule + priority.",
                                           "updatedAt":  "2020-08-11T13:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MX1qi",
                                           "createdAt":  "2022-10-17T18:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Evaluated; keeping in Future due to lower priority. ",
                                           "updatedAt":  "2022-10-17T18:43:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add unit test for issue #7346 (custom attribute constructor crash on null array of enums)",
        "labels":  [
                       "area-System.Reflection",
                       "test-enhancement",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/21268",
        "createdAt":  "2017-04-21T20:16:20Z",
        "number":  21268,
        "author":  "mellinoe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-17T18:41:37Z",
        "body":  "This is a tracking issue describing the current performance tests we have in the System.Reflection area, and what coverage is missing. The work items below can be completed independently, and they are all of different priority.\r\n\r\nWhen adding performance tests, please adhere to [the guidelines listed here](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/performance-tests.md#adding-new-performance-tests).\r\n\r\nNOTE: System.Reflection is split across several \"contracts\", but the majority is actually located and implemented in System.Private.CoreLib / System.Runtime.\r\n\r\n## Existing Coverage:\r\n**None**\r\n\r\n## Missing Coverage:\r\nCore Types (System.Runtime), listed in a general order of importance (but not set in stone).\r\n* Type\r\n* TypeInfo\r\n* Assembly\r\n* MemberInfo (and subtypes)\r\n* RuntimeReflectionExtensions\r\n* TypedReference\r\n* CustomAttributeExtensions\r\n\r\nSystem.Reflection.TypeExtensions (less important than above)\r\n* TypeExtensions\r\n* *_InfoExtensions\r\n* AssemblyExtensions",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTF9UeA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk2MjI2Nw==",
                                           "createdAt":  "2020-08-11T13:56:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future based on schedule + priority.",
                                           "updatedAt":  "2020-08-11T13:56:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MX1R4",
                                           "createdAt":  "2022-10-17T18:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We now have some coverage around Invoke (see https://github.com/dotnet/performance/pull/2602 and the earlier PR) but still missing coverage elsewhere.",
                                           "updatedAt":  "2022-10-17T18:41:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Reflection Performance Tests",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "test-enhancement",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/7976",
        "createdAt":  "2017-04-28T21:48:22Z",
        "number":  7976,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1ls8A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lauren-van-sloun",
                                            "createdAt":  "2019-02-26T15:47:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-02-12T15:01:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-02-01T18:54:30Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-10-17T18:28:01Z",
        "body":  "From https://codeblog.jonskeet.uk/2017/04/26/surprise-creating-an-instance-of-an-open-generic-type/\r\n\r\n```\r\nusing System;\r\nusing System.Reflection;\r\n \r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        object x = GetWeirdValue();\r\n        // This line prints True\r\n        Console.WriteLine(x.GetType().GetTypeInfo().IsGenericTypeDefinition);\r\n    }\r\n \r\n    static object GetWeirdValue() =\u003e\r\n        typeof(Generic\u003c\u003e.GenericEnum).GetTypeInfo()\r\n            .GetDeclaredField(\"Foo\")\r\n            .GetValue(null);\r\n \r\n    class Generic\u003cT\u003e\r\n    {\r\n        public enum GenericEnum\r\n        {\r\n            Foo = 0\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTF8Z4Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODExNDY2Mw==",
                                           "createdAt":  "2017-04-28T21:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @AtsushiKan ",
                                           "updatedAt":  "2017-04-28T21:49:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODExODE5OA==",
                                           "createdAt":  "2017-04-28T22:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfiTXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2018-11-27T21:52:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "Would this issue ever be \u0027up-for-grabs\u0027? \r\n\r\nIf so I\u0027d be happy to attempt it, I\u0027ve recently looked at the reflection code for dotnet/runtime#7321.",
                                           "updatedAt":  "2017-04-28T22:10:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODExOTUyNg==",
                                           "createdAt":  "2017-04-28T22:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@mattwarren It\u0027s yours. Thanks!",
                                           "updatedAt":  "2017-04-28T22:18:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODE3MTgwNg==",
                                           "createdAt":  "2017-04-29T14:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "Thanks, I just want to check, is fix is to make \u0027GetValue(null)\u0027 through an exception or something else.",
                                           "updatedAt":  "2017-04-29T14:19:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODE3MTk4OA==",
                                           "createdAt":  "2017-04-29T14:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think it may be better to return value of the underlying type.",
                                           "updatedAt":  "2017-04-29T14:23:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODI4MjE3OA==",
                                           "createdAt":  "2017-05-01T03:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "@jkotas Is this for 2.0?",
                                           "updatedAt":  "2017-05-01T03:55:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODI4MjI2MA==",
                                           "createdAt":  "2017-05-01T03:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think that this is must have for 2.0.",
                                           "updatedAt":  "2017-05-01T03:56:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODY2MDEwMg==",
                                           "createdAt":  "2017-05-02T14:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "That same article sites two other ways to do this so if this loophole really needs to be closed, it needs to be done at the lower level than the specific apis - i.e. at the point where the runtime tries to instantiate the value with an open type as its umm.. \"pMethodTable\" - substituting the raw type might have other ripple effects.\r\n\r\nI\u0027m not sure if this loophole needs to be closed, though. We don\u0027t need to support it in CoreRT or other DotNet flavors. ",
                                           "updatedAt":  "2017-05-02T14:55:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDg1Njg3Mw==",
                                           "createdAt":  "2017-05-11T17:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAkAHlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lauren-van-sloun",
                                                                               "createdAt":  "2019-02-26T15:48:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "I\u0027ve been digging into this a bit more, to re-cap there are 3 scenarios:\r\n\r\n### Scenario One (from [Jon Skeet\u0027s Blog](https://codeblog.jonskeet.uk/2017/04/26/surprise-creating-an-instance-of-an-open-generic-type/))\r\n\r\n``` csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        object x = typeof(Generic\u003c\u003e.GenericEnum).GetTypeInfo()\r\n            .GetDeclaredField(\"Foo\")\r\n            .GetValue(null);\r\n        Console.WriteLine(x.GetType().GetTypeInfo().IsGenericTypeDefinition); // True!!!\r\n    }\r\n     \r\n    class Generic\u003cT\u003e { public enum GenericEnum { Foo = 0 } }\r\n}\r\n```\r\n\r\n### Scenario Two (from [Kirill Osenkov\u0027s blog](https://blogs.msdn.microsoft.com/kirillosenkov/2014/01/08/creating-an-instance-of-an-open-generic-type-without-specifying-a-type-argument/))\r\n\r\n``` csharp\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var open = Enum.ToObject(typeof(C\u003c\u003e.E), 0);\r\n        Console.WriteLine(open.GetType().GetTypeInfo().IsGenericTypeDefinition); // True!!!\r\n    }\r\n}\r\n \r\nclass C\u003cT\u003e { public enum E { } }\r\n```\r\n\r\n### Scenario Three (also from [Kirill Osenkov\u0027s blog](https://blogs.msdn.microsoft.com/kirillosenkov/2014/01/08/creating-an-instance-of-an-open-generic-type-without-specifying-a-type-argument/))\r\n\r\n``` csharp\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Action\u003cC\u003cint\u003e.E\u003e a = M;\r\n        var open = a.Method.GetGenericMethodDefinition().GetParameters()[0].DefaultValue;\r\n        Console.WriteLine(open.GetType().GetTypeInfo().IsGenericTypeDefinition); // True!!!\r\n    }\r\n \r\n    static void M\u003cT\u003e(C\u003cT\u003e.E e = 0) { }\r\n}\r\n \r\nclass C\u003cT\u003e { public enum E { } }\r\n```",
                                           "updatedAt":  "2017-05-11T17:17:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDg1NzYxNA==",
                                           "createdAt":  "2017-05-11T17:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "Scenarios **One** and **Three** end up in [ReflectionInvocation::CreateEnum(..)](https://github.com/dotnet/coreclr/blob/b4f28d7470da18ec871ae1240a6c9df2db44da2c/src/vm/reflectioninvocation.cpp#L2451-L2467), Scenario **Two** however goes to [ReflectionEnum::InternalBoxEnum(..)](https://github.com/dotnet/coreclr/blob/b4f28d7470da18ec871ae1240a6c9df2db44da2c/src/vm/reflectioninvocation.cpp#L2991-L3005) \r\n\r\nSo as a *possible* fix I made this change in [ReflectionInvocation::CreateEnum(..)](https://github.com/dotnet/coreclr/blob/b4f28d7470da18ec871ae1240a6c9df2db44da2c/src/vm/reflectioninvocation.cpp#L2451-L2467) \r\n\r\n``` diff\r\n     REFLECTCLASSBASEREF refType = (REFLECTCLASSBASEREF)ObjectToOBJECTREF(pTypeUNSAFE);\r\n \r\n     TypeHandle typeHandle = refType-\u003eGetType();\r\n     OBJECTREF obj = NULL;\r\n     HELPER_METHOD_FRAME_BEGIN_RET_1(refType);\r\n+    if (typeHandle.ContainsGenericVariables())\r\n+    {\t\t\r\n+        COMPlusThrow(kInvalidOperationException, W(\"Acc_CreateGeneric\")); //TODO is this the right error message?\r\n+    }\r\n     MethodTable *pEnumMT = typeHandle.AsMethodTable();\r\n     obj = pEnumMT-\u003eBox(ArgSlotEndianessFixup ((ARG_SLOT*)\u0026value,\r\n                                              pEnumMT-\u003eGetNumInstanceFieldBytes()));\r\n```\r\n\r\nand this one in [ReflectionEnum::InternalBoxEnum(..)](https://github.com/dotnet/coreclr/blob/b4f28d7470da18ec871ae1240a6c9df2db44da2c/src/vm/reflectioninvocation.cpp#L2991-L3005)\r\n\r\n``` diff\r\n     FCALL_CONTRACT;\r\n     \r\n     VALIDATEOBJECT(target);\r\n     OBJECTREF ret = NULL;\r\n \r\n     MethodTable* pMT = target-\u003eGetType().AsMethodTable();\r\n     HELPER_METHOD_FRAME_BEGIN_RET_0();\r\n \r\n+    if (typeHandle.ContainsGenericVariables())\r\n+    {\r\n+        COMPlusThrow(kInvalidOperationException, W(\"Acc_CreateGeneric\")); //TODO is this the right error message?\r\n+    }\r\n\r\n     ret = pMT-\u003eBox(ArgSlotEndianessFixup((ARG_SLOT*)\u0026value, pMT-\u003eGetNumInstanceFieldBytes()));\r\n \r\n     HELPER_METHOD_FRAME_END();\r\n```\r\n\r\nBoth changes are in [reflectioninvocation.cpp](https://github.com/dotnet/coreclr/blob/master/src/vm/reflectioninvocation.cpp), which is useful because it limits the changes to \u0027reflection\u0027 scenarios. The single, common place where one fix could be done is in [MethodTable::Box(void* data)](https://github.com/dotnet/coreclr/blob/b4f28d7470da18ec871ae1240a6c9df2db44da2c/src/vm/methodtable.cpp#L3736-L3765), but that *seems* to be used by code-paths that aren\u0027t related to reflection.\r\n\r\nAm I on the right track?\r\n\r\n\u003e I\u0027m not sure if this loophole needs to be closed, though. We don\u0027t need to support it in CoreRT or other DotNet flavors.\r\n\r\nDoes this need fixing at all?",
                                           "updatedAt":  "2017-05-11T17:19:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDg2MjI1MA==",
                                           "createdAt":  "2017-05-11T17:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Well the existing behavior won\u0027t be easy to support in CoreRT so I suppose it\u0027s worth trying to close this loophole now - with the exception first, and keep \"return the underlying int\" as a Plan B if that turns out to break more than expected.\r\n\r\nHow expensive is TypeHandle.ContainsGenericVariables()? If it\u0027s super cheap, I\u0027d say fix it in the common place (MethodTable::Box).  ",
                                           "updatedAt":  "2017-05-11T17:35:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMDg2NTQ5NQ==",
                                           "createdAt":  "2017-05-11T17:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "Sorry, I forgot too add that the reason I looked at throwing an `InvalidOperationException` was because I found that if you change **Scenario One** to instead fetch `value__` (the magic compiler field)\r\n\r\n``` csharp\r\nobject x = typeof(Generic\u003c\u003e.GenericEnum).GetTypeInfo()\r\n            .GetDeclaredField(\"value__\") // the \u0027value__\u0027 field is emitted by the compiler\r\n            .GetValue(null);\r\n```\r\n\r\nThen `InvalidOperationException` is thrown with [the message](https://github.com/dotnet/coreclr/blob/bb70a71ee1aa9c5ff6b4ff0851a8e622bb23c1ac/src/mscorlib/Resources/Strings.resx#L736-L738):\r\n\r\n\u003e Late bound operations cannot be performed on fields with types for which Type.ContainsGenericParameters is true.\r\n\r\nBecause it hits [this check in RtFieldInfo::InternalGetValue(..)](https://github.com/dotnet/coreclr/blob/cdff8b0babe5d82737058ccdae8b14d8ae90160d/src/mscorlib/src/System/Reflection/RtFieldInfo.cs#L217), in comparision if you access the \u0027Foo\u0027 field it goes via [MdFieldInfo::GetValue(..)](https://github.com/dotnet/coreclr/blob/cdff8b0babe5d82737058ccdae8b14d8ae90160d/src/mscorlib/src/System/Reflection/MdFieldInfo.cs#L94-L104) which doesn\u0027t have the check",
                                           "updatedAt":  "2017-05-11T17:46:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzQ5MjkwNA==",
                                           "createdAt":  "2019-02-26T15:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauren-van-sloun",
                                           "body":  "Is this issue resolved? Can it be closed?",
                                           "updatedAt":  "2019-02-26T15:51:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NzMwNzQ4Nw==",
                                           "createdAt":  "2020-03-10T20:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Still repros on latest 5.0 master.\r\n@mattwarren do you still want to take this or should one of us tackle it?",
                                           "updatedAt":  "2020-03-10T20:50:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDM3MDcyMA==",
                                           "createdAt":  "2020-03-26T11:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "@GrabYourPitchforks realistically I\u0027m not going to get round to doing this, so feel to assign it to someone else",
                                           "updatedAt":  "2020-03-26T11:13:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MXxnh",
                                           "createdAt":  "2022-10-17T18:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This still repros on 7.0.\r\n\r\nFWIW if the test shown in the description is modified to close the generic, the test returns `false` as expected.",
                                           "updatedAt":  "2022-10-17T18:27:47Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Reflection on enums creates instances of open generic types",
        "labels":  [
                       "bug",
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10057",
        "createdAt":  "2018-03-28T18:14:26Z",
        "number":  10057,
        "author":  "ahsonkhan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC05Qjg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamkvd",
                                            "createdAt":  "2018-09-05T13:10:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cdmihai",
                                            "createdAt":  "2018-09-07T18:36:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TETYYS",
                                            "createdAt":  "2019-12-31T12:30:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scottbilas",
                                            "createdAt":  "2022-09-18T01:51:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-12-17T19:26:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "utkumaden",
                                            "createdAt":  "2023-02-04T14:43:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2023-11-27T16:24:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leandromoh",
                                            "createdAt":  "2023-12-31T00:53:20Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-08-01T18:10:19Z",
        "body":  "This addresses long-standing issues with reflection around support for byref-like types. For additional detail, see\r\n- https://github.com/dotnet/designs/pull/286 (this issue is a subset of the proposed design)\r\n- https://github.com/dotnet/runtime/issues/45152\r\n- https://github.com/dotnet/runtime/issues/75349\r\n\r\n## API\r\nNote that these are all new types so the `diff` format was not used for readability.\r\n```cs\r\nnamespace System.Reflection\r\n{\r\n    public ref struct MethodInvoker\r\n    {\r\n        // This type is designed for supporting a variable-length number of arguments allocated by the caller\r\n        public unsafe MethodInvoker(ArgumentValue* argumentStorage, int argCount)\r\n        // Dispose needs to be called to unregister GC tracking\r\n        public void Dispose()\r\n\r\n        // Target\r\n        public object? GetTarget()\r\n        public ref T GetTarget\u003cT\u003e()\r\n        public void SetTarget(object value)\r\n        public unsafe void SetTarget(void* value, Type type)\r\n        public void SetTarget\u003cT\u003e(ref T value)\r\n\r\n        // Arguments\r\n        public object? GetArgument(int index)\r\n        public ref T GetArgument\u003cT\u003e(int index)\r\n        public void SetArgument(int index, object? value)\r\n        public unsafe void SetArgument(int index, void* value, Type type)\r\n        public void SetArgument\u003cT\u003e(int index, ref T value)\r\n\r\n        // Return\r\n        public object? GetReturn()\r\n        public ref T GetReturn\u003cT\u003e()\r\n        public void SetReturn(object value)\r\n        public unsafe void SetReturn(void* value, Type type)\r\n        public void SetReturn\u003cT\u003e(ref T value)\r\n       \r\n        // Unsafe versions; no conversions or validation\r\n        public unsafe void InvokeDirectUnsafe(MethodBase method)\r\n        // Faster for fixed parameter count (object-only) and no ref\\out. Any extra args are ignored.\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target)\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target, ReadOnlySpan\u003cobject?\u003e args)\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target, object? arg1)\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target, object? arg1, object? arg2)\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target, object? arg1, object? arg2, object? arg3)\r\n        public static unsafe object? InvokeDirectUnsafe(MethodBase method, object? target, object? arg1, object? arg2, object? arg3, object? arg4)\r\n\r\n        // Safe versions; validation and conversions as in reflection today\r\n        public void Invoke(MethodBase method)\r\n        public static object? Invoke(MethodBase method, object? target)\r\n        public static object? Invoke(MethodBase method, object? target, ReadOnlySpan\u003cobject?\u003e args)\r\n        public static object? Invoke(MethodBase method, object? target, object? arg1)\r\n        public static object? Invoke(MethodBase method, object? target, object? arg1, object? arg2)\r\n        public static object? Invoke(MethodBase method, object? target, object? arg1, object? arg2, object? arg3)\r\n        public static object? Invoke(MethodBase method, object? target, object? arg1, object? arg2, object? arg3, object? arg4)\r\n     }\r\n\r\n    // Used to define the correct storage requirements for the MethodInvoker constructor.\r\n    public struct ArgumentValue { }\r\n}\r\n```\r\n\r\n## Samples\r\n```cs\r\nunsafe\r\n{\r\n    using (MethodInvoker invoker = new MethodInvoker(argCount: 3))\r\n    {\r\n        invoker.SetArgument(0, new MyClass());\r\n        invoker.SetArgument(1, null);\r\n        invoker.SetArgument(2, 42);\r\n        invoker.SetArgument(3, \"Hello\");\r\n        invoker.InvokeDirectUnsafe(method);\r\n    }\r\n}\r\n```\r\n### Avoiding boxing\r\nValue types can be references to avoid boxing.\r\n```cs\r\nint i = 42;\r\nint ret = 0;\r\nusing (MethodInvoker invoker = new MethodInvoker(argCount: 3))\r\n{\r\n    invoker.SetArgument(0, new MyClass());\r\n    invoker.SetArgument(1, null);\r\n    invoker.SetArgument\u003cint\u003e(2, ref i); // No boxing (argument not required to be byref)\r\n    invoker.SetArgument(3, \"Hello\");\r\n    invoker.SetReturn\u003cint\u003e(ref ret); // No boxing; \u0027ret\u0027 variable updated automatically\r\n    unsafe\r\n    {\r\n        invoker.InvokeDirectUnsafe(method);\r\n    }\r\n}\r\n```\r\n### Pass a `Span\u003cT\u003e` to a method\r\n```cs\r\nSpan\u003cint\u003e span = new int[] { 42, 43 };\r\nusing (MethodInvoker invoker = new MethodInvoker(argCount: 1))\r\n{\r\n    unsafe\r\n    {\r\n          MethodInvoker invoker = new MethodInvoker(ref args);\r\n#pragma warning disable CS8500    \r\n          void* ptr = (void*)new IntPtr(\u0026span);\r\n#pragma warning restore CS8500    \r\n          // Ideally in the future we can use __makeref(span) instead of the above.\r\n          invoker.SetArgument(0, ptr, typeof(Span\u003cint\u003e));\r\n          invoker.InvokeDirectUnsafe(method);\r\n    }\r\n}\r\n```\r\n\r\n## Future\r\nFor perf, we may add fixed-length parameter storage to MethodInvoker:\r\n```cs\r\n        // Fixed length (say up to 8)\r\n        public MethodInvoker(ref ArgumentValuesFixed values)\r\n```\r\nalong with the supporting type:\r\n```cs\r\n    // Used for fastest perf for the MethodInvoker ctor above where the arguments are of a known small count.\r\n    public ref struct ArgumentValuesFixed\r\n    {\r\n        public const int MaxArgumentCount; // 8 shown here (pending perf measurements to find optimal value) \r\n        \r\n        // Used for the general case instead of the ctors below that only take \u0027object\u0027.\r\n        public ArgumentValuesFixed(int argCount)\r\n\r\n        public ArgumentValuesFixed(object? arg1)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3, object? arg4)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3, object? arg4, object? arg5)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3, object? arg4, object? arg5, object? arg6)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3, object? arg4, object? arg5, object? arg6, object? arg7)\r\n        public ArgumentValuesFixed(object? arg1, object? arg2, object? arg3, object? arg4, object? arg5, object? arg6, object? arg7, object? arg8)\r\n    }\r\n```\r\nwith samples:\r\n### Fixed-length arguments\r\n```cs\r\nMethodInfo method = ... // Some method to call\r\nArgumentValuesFixed values = new(4); // 4 parameters\r\nMethodInvoker= new MethodInvoker(ref values);\r\ninvoker.SetArgument(0, new MyClass());\r\ninvoker.SetArgument(1, null);\r\ninvoker.SetArgument(2, 42);\r\ninvoker.SetArgument(3, \"Hello\");\r\n// Can inspect before or after invoke:\r\nobject o0 = invoker.GetArgument(0);\r\nobject o1 = invoker.GetArgument(1);\r\nobject o2 = invoker.GetArgument(2);\r\nobject o3 = invoker.GetArgument(3);\r\ninvoker.InvokeDirect(method);\r\nint ret = (int)invoker.GetReturn();\r\n```\r\n### Fixed-length object arguments (faster)\r\n```cs\r\nArgumentValuesFixed args = new(new MyClass(), null, 42, \"Hello\");\r\nMethodInvoker invoker = new MethodInvoker(ref args);\r\ninvoker.InvokeDirect(method);\r\n```\r\n\r\n\r\n\r\n## Original issue text from @ahsonkhan:\r\n\u003e From https://github.com/dotnet/coreclr/issues/5851#issuecomment-337356969\r\n\r\n\u003e\u003e It is about calling methods on Span or that take Span arguments via reflection:\r\n- [x] It is not possible to do it via existing reflection methods. We should have test to verify that e.g. `typeof(SpanExtensions).GetMethod(\"AsReadOnlySpan\", new Type[] { typeof(string) }).Invoke(null, new object[] { \"Hello\" });` fails gracefully.\r\n- [ ] We may want to look into adding new reflection APIs that allow calling these methods via reflection.\r\n\r\n\u003e cc @jkotas, @AtsushiKan, @RussKeldorph ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkNXRg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzAyMzg5Mg==",
                                           "createdAt":  "2018-03-28T20:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "https://github.com/dotnet/corefx/issues/14021\r\n\r\nis the bug you’re looking for.\r\n\r\n",
                                           "updatedAt":  "2018-03-28T20:24:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzY1NjcyNA==",
                                           "createdAt":  "2018-03-31T01:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "\u003e We should have test to verify that\r\n\r\nDone in https://github.com/dotnet/corefx/pull/28674",
                                           "updatedAt":  "2018-03-31T01:36:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Nzk0MTk0Mw==",
                                           "createdAt":  "2018-04-02T14:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "@ahsonkhan - Any ideas on what an api that allows this would even look like? You can\u0027t box Spans, you can\u0027t use them as arguments to a generic instantiation, you can\u0027t take refs to them (I think) - I\u0027m drawing a blank here.",
                                           "updatedAt":  "2018-04-02T14:31:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Nzk1NTcyMw==",
                                           "createdAt":  "2018-04-02T15:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCHwpjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cdmihai",
                                                                               "createdAt":  "2018-08-31T20:03:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamkvd",
                                                                               "createdAt":  "2018-09-05T13:10:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2020-11-05T22:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vukovinski",
                                                                               "createdAt":  "2020-12-18T11:10:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gregmac",
                                                                               "createdAt":  "2021-02-26T19:37:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-12-23T14:15:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is not Span-specific problem. This is about introducing new reflection APIs that are both fast (do not allocate) and full fidelity (give you full control over byrefs). We have several issues on this topic.\r\n\r\nWe would need to extend TypedReference, and introduce a new type that can hold array of TypedReferences. It may look something like this:\r\n\r\n```csharp\r\n// CoreRT has prior art for this. https://github.com/dotnet/corert/search?q=LocalVariableSet\r\npublic ref struct TypedReferences\r\n{\r\n    public TypedReferences(int length);\r\n\r\n    public int Length { get; }\r\n    public public TypedReference T this[int index] { get; set; }\r\n}\r\n\r\npublic class MethodInfo\r\n{\r\n    public abstract void Invoke(TypedReference returnValue, TypedReferences arguments);\r\n}\r\n```\r\n\r\nUse:\r\n\r\n```csharp\r\nSpan\u003cbyte\u003e s1, s2, result;\r\n\r\nvar args = new TypedReferenceArray(2);\r\nargs[0] = new TypedReference(ref s1);\r\nargs[1] = new TypedReference(ref s2);\r\n\r\nmi.Invoke(new TypedReference(ref result), args);\r\n```\r\n\r\nThis does not compile today because of several language and runtime restrictions. We would need to fix these restrictions to make this work. This would not be a simple local feature. It would be a set of small features spanning language, runtime and framework.",
                                           "updatedAt":  "2018-04-02T15:28:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Nzk1Njk4OQ==",
                                           "createdAt":  "2018-04-02T15:34:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks - that\u0027s the info I was looking for.\r\n",
                                           "updatedAt":  "2018-04-02T15:34:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzMwNjE0Mg==",
                                           "createdAt":  "2018-05-30T20:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahsonkhan",
                                           "body":  "Related to https://github.com/dotnet/corefx/issues/29990, Activator.CreateInstance boxes the value it returns (since it returns an object). This is not supported for byref types. Should we support this as part of the reflection work?",
                                           "updatedAt":  "2018-05-30T20:24:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNzc3Njg5NQ==",
                                           "createdAt":  "2018-08-31T20:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cdmihai",
                                           "body":  "Not being able to use Spans as arguments / return values in reflection calls via `MethodInfo` is blocking some Span adoption in MSBuild :(\r\nThere are workarounds, but they either limit span usage or introduce minor breaking changes. So limiting span usage remains the only option.",
                                           "updatedAt":  "2018-08-31T20:11:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTk4MDI0MQ==",
                                           "createdAt":  "2018-09-10T16:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cdmihai",
                                           "body":  "Beyond calling methods on Span or that take Span arguments via reflection, another thing to do is to add overloads to existing reflection APIs to take spans instead of string. For example `Type.GetMember`, `Type.InvokeMember` and friends take strings as their first parameter. MSBuild parses a lot of strings to pseudo interpret c# code, and it derives type names, method names,  and other member names via substringing.",
                                           "updatedAt":  "2018-09-10T16:43:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDAyNTM5NQ==",
                                           "createdAt":  "2018-09-10T19:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cdmihai",
                                           "body":  "@steveharter ",
                                           "updatedAt":  "2018-09-10T19:06:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDA1NzQwMw==",
                                           "createdAt":  "2018-09-10T20:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Proposals to spanify existing overloads that take member names should be in its own proposal - I suspect the odds of it getting accepted are low though as \r\n\r\n- these are already expensive methods. If performance is an issue, the results of member queries should be cached for multiple calls.\r\n\r\n- Reflection is already staggering from a bad case of \"overload overload\" due to its long history and various (and sometimes aborted) attempts to redesign. Furthermore, Reflection is a contract that\u0027s implemented by multiple and third party providers so each new member is something that would be expected to be supported by them. `GetMethod` in particular has ten different overloads now and is already a pain to sort out in Intellisense. So the bar for adding new overloads on this family of apis will be extremely high.\r\n",
                                           "updatedAt":  "2018-09-10T20:54:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzY2MTMxMQ==",
                                           "createdAt":  "2020-09-05T20:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e * It is not possible to do it via existing reflection methods. We should have test to verify that e.g. typeof(SpanExtensions).GetMethod(\"AsReadOnlySpan\", new Type[] { typeof(string) }).Invoke(null, new object[] { \"Hello\" }); fails gracefully.\r\n\r\n~~Can\u0027t we define a custom delegate type like `internal delegate ReadOnlySpan\u003cchar\u003e AsSpanDelegate(string str)`, call `MethodInfo.CreateDelegate` and call the methods via the delegate, instead of dynamically invoking them?~~\r\n\r\nNope, doesn\u0027t seem to work.",
                                           "updatedAt":  "2020-09-08T20:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4999TI",
                                           "createdAt":  "2022-02-14T22:51:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "We talked about this via phone the other day, but typing it here just so it\u0027s not lost. The combination of the proposed methods _FromObject_ and _AsRef_ can be used as an unsafe-equivalent when used to unwrap boxed value types.\r\n\r\n```cs\r\nobject boxedBool = false;\r\nTypedReferenced refToBool = TypedReference.FromObject(ref boxedBool);\r\nrefToBool.AsRef\u003cbool\u003e() = true; // ECMA violation: mutates boxed value type\r\n```\r\n\r\nThis would be equivalent to `Unsafe.Unbox\u003cT\u003e(object)`, which is not type-safe. See [that API\u0027s remarks section](https://docs.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.unbox#remarks) for more information on why it is unsafe.",
                                           "updatedAt":  "2022-02-14T22:51:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CBkam",
                                           "createdAt":  "2022-04-24T04:33:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "The part that bites is that with reflection there is no way to call ``private static string TrimNewline(Span\u003cchar\u003e errorInfo)`` in the COM2PropertyDescriptor tests to Windows Forms. Yes I made changes to that function that required using a span in it\u0027s parameter in a pull request of mine.\r\n\r\nI could have simply done it as a string, but doing from span -\u003e string to call ``TrimNewline`` which then takes that string -\u003e span -\u003e string again is a bit much for performance.",
                                           "updatedAt":  "2022-04-24T04:35:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ1dG",
                                           "createdAt":  "2023-07-24T20:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4LCDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "UlyssesWu",
                                                                               "createdAt":  "2024-10-26T09:06:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9.0. A [functional prototype](https://github.com/steveharter/runtime/tree/MethodInvoker) for invoking and passing by-ref like types was created, along with a variable-length, stack-based collection. However, the perf numbers were not that great, so we decided to [add new invoke APIs to address the \"fast invoke\" portion](https://github.com/dotnet/runtime/issues/85539) before the byref-like type support.\r\n\r\nAlso, we need to evaluate byref-like type support in the context of loosely-coupled reflection including how byref-like types can be created in a loosely-typed way (today they can\u0027t; see the tests in the prototype above).",
                                           "updatedAt":  "2023-07-24T20:49:37Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal] Add reflection support to byref-like types",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26101",
        "createdAt":  "2018-05-08T02:03:32Z",
        "number":  26101,
        "author":  "yaakov-h",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQlXJA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2020-12-29T22:39:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "panost",
                                            "createdAt":  "2021-05-04T16:44:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2022-01-07T12:15:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2022-12-02T19:50:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-07-14T08:29:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-03-31T11:29:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "compujuckel",
                                            "createdAt":  "2024-04-05T12:30:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dubzer",
                                            "createdAt":  "2025-02-18T16:53:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-09-15T12:44:11Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-04-30T23:42:10Z",
        "body":  "## Background and Motivation\r\n\r\nI\u0027d like to be able to get a ReadOnlySpan into an Assembly\u0027s Embedded Resources, in order to minimise memory allocations and copying when dealing with such resources.\r\n\r\nAt the moment the only way to get at an Embedded Resource is either via the Stream APIs, or by using unsafe code to read from the UnmanagedMemoryStream\u0027s pointer.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Reflection\r\n{\r\n    public class Assembly\r\n    {\r\n        // ...\r\n        public virtual Stream GetManifestResourceStream(string name);\r\n        public virtual Stream GetManifestResourceStream(Type type, string name);\r\n+       public virtual ReadOnlySpan\u003cbyte\u003e GetManifestResourceSpan(string name);\r\n+       public virtual ReadOnlySpan\u003cbyte\u003e GetManifestResourceSpan(Type type, string name);\r\n        // ...\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\nUsage mirrors existing `GetManifestResourceStream` use, but with spans:\r\n\r\n```csharp\r\nReadOnlySpan\u003cbyte\u003e ros1 = GetType().Assembly.GetManifestResourceSpan(\"Namespace.ResourceName.txt\");\r\n// do something with ros1\r\n```\r\n\r\n```csharp\r\nReadOnlySpan\u003cbyte\u003e ros2 = typeof(X).Assembly.GetManifestResourceSpan(typeof(X), \"ResourceName.txt\");\r\n// do something with ros2\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAn alternative was discussed below where the `ReadOnlySpan` could be created from the `UnmanagedMemoryStream`, but this was deemed to be unsafe as the pointer from the `UnmanagedMemoryStream` does not contain a live reference to the assembly. If a Span is created directly from the pointer and then the assembly is unloaded, the application can crash when accessing the Span.\r\n\r\n## Risks\r\n\r\nNone known.\r\n\r\n---\r\n\r\n## Original post\r\n\r\nHi,\r\n\r\nWould it be possible to add an API to `Assembly` that allows applications to get a `ReadOnlySpan\u003c\u003e` view of an embedded resource, rather than a stream?\r\n\r\nIf this has been discussed before, please just point me at that issue.\r\n\r\nThanks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfHAtRg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODE3NDYxOA==",
                                           "createdAt":  "2018-05-10T20:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "What is the scenario that is driving this?\r\n\r\nI have several concerns about this:\r\n\r\n1. `Assembly` is a user-subclassable type. Any time you add an api that cannot have a default implemention based on existing members, you\u0027re creating another api whose functionality depends on implementation types that we don\u0027t control.\r\n\r\n2. On UWP scenarios, the resource bytes are in files, not in memory. An api returning `ReadOnlySpan` would have to read the entire resource into memory. In another words, a giant allocation which goes against the implicit promise of a `Span` returning api.\r\n\r\n3. Resources are not actually part of metadata and ideally are not the responsibility of Reflection. While we\u0027ve had to carry over this burden from .NETFX, I\u0027m not eager to add to it.\r\n\r\n",
                                           "updatedAt":  "2018-05-10T20:29:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODE3OTQxNQ==",
                                           "createdAt":  "2018-05-10T20:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjHU0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ceztko",
                                                                               "createdAt":  "2024-05-24T15:32:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e An api returning ReadOnlySpan would have to read the entire resource into memory.\r\n\r\nIt does not need to read it. It can just map the file.\r\n\r\nThere is a ton of code out there that expects the Stream returned by GetManifestResourceStream to be UnmanagedMemoryStream, gets a pointer out of it and parties on it. I do not think we would be ever able to change this implementation detail.\r\n\r\nI see this suggestion as a desire to make this flow more Span friendly. I agree that adding Span returning GetResource method on Assembly does not sound right. Maybe adding Span returning property on UnmanagedMemoryStream would help?",
                                           "updatedAt":  "2018-05-10T20:42:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODE4MjA5OA==",
                                           "createdAt":  "2018-05-10T20:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "\u003e It can just map the file\r\n\r\nIn order to have uniform API between UWP and non-UWP, does it make sense to propose `MemoryMappedFile MemoryMappedFile.CreateFromMemory` (in addition to `CreateFromFile`) API addition?",
                                           "updatedAt":  "2018-05-10T22:39:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODE4NDQ0OQ==",
                                           "createdAt":  "2018-05-10T21:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJ8a1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yaakov-h",
                                                                               "createdAt":  "2018-05-11T00:26:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2020-01-21T05:27:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2023-05-03T09:45:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DeafMan1983",
                                                                               "createdAt":  "2023-10-17T05:44:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  null,
                                           "body":  "Let\u0027s pursue this as a potential `UnmanagedMemoryStream` property then. (a `CreateFromMemory` should probably be tracked separately.)\r\n\r\nThough it appears, the flow can already be simplified by a simple user extension method:\r\n\r\n```\r\nReadOnlySpan\u003cbyte\u003e GetManifestResourceStreamAsSpan(this Assembly a, string name)\r\n{\r\n     UnmanagedMemoryStream s = (UnmanagedMemoryStream)a.GetManifestResourceStream(name);\r\n     return new ReadOnlySpan\u003cbyte\u003e(s.PositionPointer, checked((int)s.Length)));\r\n}\r\n\r\n```",
                                           "updatedAt":  "2018-05-10T21:00:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDMzMzU4Ng==",
                                           "createdAt":  "2018-12-28T10:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "panost",
                                           "body":  "@AtsushiKan \r\nThe UnmanagedMemoryStream should be disposed, according to [this](https://github.com/dotnet/coreclr/blob/030a3ea9b8dbeae89c90d34441d4d9a1cf4a7de6/src/System.Private.CoreLib/shared/System/IO/UnmanagedMemoryStream.cs#L228)\r\n\r\nso the extension method should be\r\n\r\n```c#\r\n        public static unsafe ReadOnlySpan\u003cbyte\u003e GetManifestResource(this Assembly a, string name) {\r\n            using(var s = (UnmanagedMemoryStream)a.GetManifestResourceStream(name)) {\r\n                return new ReadOnlySpan\u003cbyte\u003e( s.PositionPointer, checked((int)s.Length) );\r\n            }\r\n        }\r\n```",
                                           "updatedAt":  "2020-01-22T23:57:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDM1NjEwOQ==",
                                           "createdAt":  "2018-12-28T13:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e according to this\r\n\r\nThat comment is stale or wrong. Stream.Dispose(bool) is a nop:\r\nhttps://source.dot.net/#System.Private.CoreLib/shared/System/IO/Stream.cs,230",
                                           "updatedAt":  "2018-12-28T13:03:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NjUyMzg5OQ==",
                                           "createdAt":  "2020-01-21T05:27:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "This hasn\u0027t been touched in over a year. What\u0027s the actual API suggestion here?",
                                           "updatedAt":  "2020-01-21T05:27:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTYzMDQyMg==",
                                           "createdAt":  "2020-01-29T07:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "panost",
                                           "body":  "@GrabYourPitchforks To add a method to the assembly that returns directly a ReadOnlySpan\u003cbyte\u003e of a Manifest Resource, without using hacks (or creating UnmanagedMemoryStream), but most importantly safe, so you dont have to mark your project as unsafe, just for using the proposed hack",
                                           "updatedAt":  "2020-01-29T07:29:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTYzNTU4Mw==",
                                           "createdAt":  "2020-01-29T07:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e but most importantly safe, so you dont have to mark your project as unsafe, just for using the proposed hack\r\n\r\nI don\u0027t know if it\u0027s possible to do this \"safely\". Imagine a scenario where an assembly is loaded, the resource is returned as a `ReadOnlySpan\u003cbyte\u003e`, then the assembly is unloaded. Attempting to access the `ReadOnlySpan\u003cbyte\u003e` after this point could have undefined behavior, including AVing the process. There might be some potential workarounds we could do from the runtime, such as forbidding unload of the assemblies once a resource stream has been projected to a span, but these workarounds might not be desirable in all situations.\r\n\r\nIn order to move the proposal forward somebody (anybody, really) would need to write down a proposed API signature and the behaviors that we\u0027d expect that API to have. Once that\u0027s down we can move this forward to the next step.",
                                           "updatedAt":  "2020-01-29T07:48:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTYzODI1Ng==",
                                           "createdAt":  "2020-01-29T07:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brian-reichle",
                                           "body":  "@GrabYourPitchforks What if the method returned an `IMemoryOwner\u003cbyte\u003e` which kept the assembly loaded at least until disposed?",
                                           "updatedAt":  "2020-01-29T07:58:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTY1MjU5OA==",
                                           "createdAt":  "2020-01-29T08:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Neither `Memory\u003cT\u003e` nor `Span\u003cT\u003e` is \"safe\" when pointer-backed. The reason `UnmanagedMemoryStream` is \"safe\" (aside from the scenario where you write unsafe code to call the pointer getter manually) is that all read / write operations go through a memcpy operation, so they can be guarded appropriately. Such a guard cannot be implemented if the consumer is given a raw projection of the backing memory.",
                                           "updatedAt":  "2020-01-29T08:42:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTQ3NzU0Mw==",
                                           "createdAt":  "2021-04-29T18:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "@GrabYourPitchforks said:\r\n\u003e Neither `Memory\u003cT\u003e` nor `Span\u003cT\u003e` is \"safe\" when pointer-backed. The reason `UnmanagedMemoryStream` is \"safe\" (aside from the scenario where you write unsafe code to call the pointer getter manually) is that all read / write operations go through a memcpy operation, so they can be guarded appropriately. Such a guard cannot be implemented if the consumer is given a raw projection of the backing memory.\r\n\r\nUnfortunately, your statement that `all read / write operations go through a memcpy operation` for pointer based  `UnmanagedMemoryStream`, is not true (Specifically the ReadByte method uses the pointer directly to read the byte, and does not use memcpy/memmove).\r\n\r\nAlso the memcopy does not seem to actually be preventing access violations in the first place. Sure perhaps it would be possible to add checks for that, but right now it does not seem to be doing anything of the sort.\r\n\r\nThis has also led me to discover a way to crash .NET 5 with an AV without using unsafe code, and without framework methods that are obviously unsafe (Marshal classes, and or Unsafe class, etc). This is by getting the framework to return an UnmanagedMemoryStream pointing into an assembly that gets unloaded.  This was fixed for `RuntimeAssembly.GetManifestResourceStream` back in #22925, by making the stream reference the RuntimeAssembly. But it was not fixed for ResourceManager.GetStream, when returning the default version of a localizable resource, which then points inside the already mapped dll file. I\u0027ve filed #52061 for this part.\r\n\r\n-----\r\n\r\nBack to the current issue: I think the bottom line for this issue is that pointer based Span\u003cT\u003e cannot keep an assembly alive via a pointer into the memory mapped PE file. Technically Memory\u003cT\u003e could keep the assembly alive via a custom IMemoryOwner\u003cbyte\u003e, but that would be unsafe, as nothing will ensure the spans created from It\u0027s `.Span` property won\u0027t outlive the Memory\u003cT\u003e instance. If one really needs to to avoid an extra copy while reading a manifest resource using Span\u003cbyte\u003e APIs, then something like the following is actually safe, despite the use of unsafe, and is probably the best that would actually happen:\r\n\r\n```\r\nvar s = (UnmanagedMemoryStream)a.GetManifestResourceStream(name))\r\nunsafe {\r\nvar span =ReadOnlySpan\u003cbyte\u003e( s.PositionPointer, checked((int)s.Length) );\r\n//use span here. in a way that it cannot outlive this method.\r\n}\r\nGC.KeepAlive(s); // ensure the stream remains alive. \r\n```\r\n\r\nI really want to say that a `using` block could function as an alternative to GC.KeepAlive, but I\u0027m not 100% sure that a combination of aggressive inlining (allowing the exact stream type to be discovered), de-virtualization, and escape analysis to conclude that the field writes in dispose are safe to omit (as the object cannot be visible to other threads), allowing the lifetime to end earlier. This would obviously be more aggressive than the current JIT, but potentially a sufficiently aggressive AOT compiler (think a .NET Native like heavily optimizing AOT compiler) might do something like that, unless I\u0027m missing something. The fact that the ECMA spec severely underspecifies what optimizations are legal does not help this analysis.",
                                           "updatedAt":  "2021-04-29T18:08:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTA1MzU4Ng==",
                                           "createdAt":  "2021-05-03T06:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "panost",
                                           "body":  "I am still using embedded resources instead of inline them in the source code (a large byte array with some thousands lines of source code). It might be stupid or pointless, but I have the feeling that they slow down the compilation and they mess with the version control.\r\n\r\nI stopped commenting on this issue because I realized after the response of @GrabYourPitchforks that I do not know many low level details. It is not clear to me the nature of the pointer returned by the `UnmanagedMemoryStream`. It is a read only pointer to the memory mapped PE file ? Is that the case also in Linux and the other platforms? I did try to follow the source code to find answers for this, but it was hard to me.\r\n\r\nAlso reading the source code of the net core, I see several examples (ie [here](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Globalization/CharUnicodeInfoData.cs#L23)) where it seems that in-lining a large resource and getting a `ReadOnlySpan\u003cbyte\u003e` is the preferred method.\r\n\r\nHow this pointer differs from the pointer returned by the `UnmanagedMemoryStream`, is still unclear to me.\r\nAlso the argument that the assembly might be unloaded, is a valid point in .net core (no AppDomains here) and that, affects the `GetManifestResourceStream` pointers but not the pointers obtained by this new trick \r\n```csharp \r\nprivate static ReadOnlySpan\u003cbyte\u003e CategoryCasingLevel1Index =\u003e new byte[2176]\r\n```",
                                           "updatedAt":  "2021-05-03T06:35:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTQ4MzMzNQ==",
                                           "createdAt":  "2021-05-03T19:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiRpGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2021-05-03T19:35:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-15T12:45:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "The compiler and runtime together ensure that the syntax `ReadOnlySpan\u003cbyte\u003e span = new byte[...];` will keep the assembly from being unloaded. The GC essentially sees the `ROS\u003cbyte\u003e` as a live reference to the assembly, so you can think of this as equivalent to \"we won\u0027t let a reachable object be collected.\" It is completely safe from the consumer\u0027s perspective.\r\n\r\nUnfortunately there is no generalized way to accomplish the same thing for an arbitrary `UnmanagedMemoryStream` instance. The closest you can get is to call `UnmanagedMemoryStream.PositionPointer` to get the `byte*` and to call `new ReadOnlySpan\u003cbyte\u003e(byte* ptr, int length)`, but _you are manually responsible for keeping the underlying stream alive_. The runtime cannot guarantee that the GC will see the resulting `ROS\u003cbyte\u003e` as a live reference to the stream, and it will not be able to detect if you\u0027ve disposed of the stream but are still holding on to the `ROS\u003cbyte\u003e` and later try to dereference it.\r\n\r\nNote: _as an implementation detail_, the particular stream returned by `GetManifestResourceStream` might be able to make stronger statements about lifetime management. But that guarantee would absolutely __not__ extend to arbitrary `UnmanagedMemoryStream` instances, which means that exposing a span property on `UnmanagedMemoryStream` would undoubtedly lead to a pit of failure.\r\n\r\nIf the very particular scenario is \"I want to be able to read an embedded resource as a ROS\\\u003cbyte\\\u003e,\" then propose an API specifically for that scenario. Something like `Assembly.GetManifestResourceSpan(string resourceName) : ReadOnlySpan\u003cbyte\u003e`. Trying to slap this behavior on to `UnmanagedMemoryStream` (which `GetManifestResourceStream` doesn\u0027t even guarantee as its return value!) seems like a losing proposition.",
                                           "updatedAt":  "2021-05-03T19:33:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTU3NDE4Nw==",
                                           "createdAt":  "2021-05-03T22:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Ah, from the sounds of things (per #40346), the entirely PE file gets treated specially for spans pointing into them. That should make such a `Assembly.GetManifestResourceSpan(string resourceName) : ReadOnlySpan\u003cbyte\u003e` method rather feasible to implement.\r\n\r\nIdeally there would a similar API for localizable resources accessed via `ResourceManager`, too. I\u0027m not sure what name makes sense there. Currently `GetStream` is used. `GetSpan` would be misleading, because it only works on resources of \"stream\" type.\r\n\r\nFor the case where the resource has fallen back to the main assembly it works exactly the same was as ManifestResourceSpan would.  For the satellite assembly case, the code already reads into an array. For the stream version it pins the array, since GetStream requires returning an UnmanagedMemoryStream. That code could be simplified by using the pinned object heap for this array, but I\u0027m not sure if these streams typically stick around long enough for that to make sense. In any case since the underlying memory is a managed array, returning a ReadOnlySpan for those is not a problem at all. ",
                                           "updatedAt":  "2021-05-03T22:26:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYxMzkzMg==",
                                           "createdAt":  "2021-05-04T00:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "\u003e If the very particular scenario is \"I want to be able to read an embedded resource as a ROS\u003cbyte\u003e,\" then propose an API specifically for that scenario.\r\n\r\nWell that\u0027s what I started off by asking for, until ghost (whoever that was, I don\u0027t recall) redirect the discussion towards the already-existing UnmanagedMemoryStream object and renamed this issue...",
                                           "updatedAt":  "2021-05-04T00:19:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYyNzYyOA==",
                                           "createdAt":  "2021-05-04T01:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Its your issue, so I\u0027m pretty sure you should be able to rename it back. And we have now determined this is actually implementable and safely, which is also good. This also only became obviously possible to implement safely when the byte array case become safe for the unload case back in August.\r\n\r\nJan favored the something like a property on UnmanagedMemoryStream, but Levi has pointed out that is unsafe.\r\n\r\nI\u0027m not sure if there is a better place for the method to live than Assembly. I mean RuntimeAssembly would be correct, but that is internal by design. I think proposing it as a method on Assembly, and letting FXDC decide if there is some better place for it is the best we can do unless somebody else comes along with a clever idea.\r\n\r\nSo creating a formal API proposal sounds like the next step. You can update your first post to use the template from https://github.com/dotnet/runtime/issues/new?template=02_api_proposal.md to make this easy for the reviewers.  If you do that this can potentially move forward. For an example of another simple API proposal that add members to an existing type, see #49407. \r\n\r\nHope this helps.",
                                           "updatedAt":  "2021-05-04T01:01:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYzMTI5OQ==",
                                           "createdAt":  "2021-05-04T01:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "Done and done.",
                                           "updatedAt":  "2021-05-04T01:16:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYzMTY5Mg==",
                                           "createdAt":  "2021-05-04T01:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "Potentially the `name` parameter(s) could be `ReadOnlySpan\u003cchar\u003e` rather than `string` but I don\u0027t personally see the need for it.",
                                           "updatedAt":  "2021-05-04T01:17:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYzMjUzMA==",
                                           "createdAt":  "2021-05-04T01:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Jan favored the something like a property on UnmanagedMemoryStream, but Levi has pointed out that is unsafe.\r\n\r\nI do not think it is worth it to add a new Span returning method to Assembly for this scenario. I think that doing nothing and recommending that anybody who needs this writes a bit of unsafe code is better than adding a new method to Assembly.\r\n\r\nNote that Span returning virtual method on Assembly would not solve the scenarios where the data are needed more than once: The slow lookup of the data stream by name would have to be done each time the data is needed; or the code would have to cache the stream and use the unsafe code to convert it to Span.",
                                           "updatedAt":  "2021-05-04T01:21:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTY0NzYwMQ==",
                                           "createdAt":  "2021-05-04T02:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Ok, but now that we understand that it is possible to implement such a feature safely in some cases, but it is not possible to do so for a general UnmanagedMemoryStream, there are potentially more options. Both `ManifestResourceStream` and `PinnedBufferMemoryStream` (and WPF has its own version of the latter) are safe to return spans from, which means we have a situation in which it is not uncommon for this to be safe, but it is not always safe. So a `TryGetSpan` on UnmanagedMemoryStream, that returns false when it is not safe is one option. \r\n\r\nThe other two subclasses in the framework at the moment are safe if you keep the stream alive for the duration of using Span.\r\n\r\nOf the uses of just plain UnmanagedMemoryStream, we have two right now that can destabilize the runtime, even when only used as a stream. (Amusingly both of which would be completely safe if exposed as a span.) The last usage I\u0027m not entirely sure about, but I\u0027d not be shocked if it was also at risk of causing access violations.\r\n\r\nSo to summarize:\r\n- 2 (+1 variant) subclasses that could safely expose span. These seem like they could be used nicely with a `TryGetSpan()` that only returns true when safe. \r\n- some more subclasses that cannot do so safely, but can be used as spans if you keep the streams alive. (could be candidates for a `DangerousGetSpan()`).\r\n- 2 non-subclasses uses of UnmanagedMemoryStream that can definitely crash the runtime even when used only as streams due to assemblies getting unloaded. (Once fixed, these would be in the \"can safely expose spans category\".)\r\n- 1 use that I\u0027m not sure about, but am concerned is at risk of crashing the runtime even when used as a stream, since It is not obvious that the memory will always outlive the stream.\r\n",
                                           "updatedAt":  "2021-05-04T02:23:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTg1Njc3OA==",
                                           "createdAt":  "2021-05-04T11:02:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "panost",
                                           "body":  "How we returned to streams?\r\nIf the PE image is memory mapped, then a resource (as any other object of the PE file) has a starting address and a length. \r\nUsing just that, the runtime found a safe way to return that pointer to in-lined byte arrays, as we see above.\r\n\r\nCan use the same trick, to return other objects?\r\nFor example is this feasible ?\r\n\r\n```csharp\r\nprivate static ReadOnlySpan\u003cbyte\u003e CategoryCasingLevel1Index =\u003e Resources.System.Globalization.CategoryCasingLevel1.bin;\r\n```\r\n\r\nwhere Resources is a pseudo static class that has every embedded resource of the current assembly and \"System.Globalization.CategoryCasingLevel1.bin\" denotes an embedded resource with the file name \"CategoryCasingLevel1.bin\" in the /System/Globalization folder.\r\n\r\nAlso, no wasted search time to find a named resource, since all those pointers can be resolved once, at mapping time.\r\n",
                                           "updatedAt":  "2021-05-04T11:02:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTg5NDY1Nw==",
                                           "createdAt":  "2021-05-04T12:13:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "That approach would basically be a C Sharp compiler feature. The compiler certainly could do something like that, where it generates an RVA static that points into the bytes of the embedded resource. This might be slightly risky if anything tried to edit the assembly afterwards, since it might not understand RVA statics pointing into .mresource data, but that ought to be possible to overcome for things like the trimmer. I’m not certain if it is possible to make that safe for an Ildasm/Ilasm round trip. \r\n\r\nAlso, starting the pseudo class name “Resources” is basically guaranteed to clash with the code behind helper for the resx file used by the resources tab in the project level property page. It also just generally gives the impression of being related to “resources” which annoyingly is the complete official name of the localizable resources generated from resx files, rather than being about manifest resources. (Which is what a build action of “Embedded Resource” results in).\r\n\r\nA different alternative is not to have compiler magic, but to have a code generator that can provide a similar experience. The problem with that though, is that at best it could implement the unsafe code pattern for you. It could cache the pointer and length safely though, since by being embedded in the same assembly, it cannot be accessed unless the assembly is reachable, and thus there is no risk that the cached pointer is stale, since it property that reads from it would go away as part of assembly unloading.\r\n\r\nSuch a code generator would also rely on the fact that right now the runtime implements the whole PE file as a valid target for interior pointers (for assemblies loaded from disk, as opposed to dynamically generated ones). While I think it is fine for System.Private.CoreLib to to rely on such details, I’m not sure it is reasonable to generate code into user assemblies that rely on such runtime details.",
                                           "updatedAt":  "2021-05-04T12:18:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjEyMzM2NQ==",
                                           "createdAt":  "2021-05-04T17:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Jan had a good comment about caching (see https://github.com/dotnet/runtime/issues/26101#issuecomment-831632530). Assume for the sake of argument that we want to add a new API to `Assembly`. Would it make sense to return an object instead of a span and to have that object fully responsible for lifetime management?\r\n\r\n```cs\r\npublic class Assembly\r\n{\r\n    public virtual EmbeddedResourceInfo? GetEmbeddedResourceInfo(string resourceName);\r\n}\r\n\r\npublic abstract class EmbeddedResourceInfo : IDisposable\r\n{\r\n    public abstract Stream GetResourceStream(); // creates a new Stream instance on each call\r\n    public abstract ReadOnlySpan\u003cbyte\u003e GetResourceContents();\r\n}\r\n```\r\n\r\nThe `EmbeddedResourceInfo` type could be cacheable by the caller. I don\u0027t expect the `Assembly`-derived class to cache these instances.\r\n\r\nFor a `RuntimeAssembly`, the internal `EmbeddedResourceInfo`-derived class could forward to `Assembly.GetManifestResourceStream()` and could also make sure that the returned `ROS\u003cbyte\u003e` points to within the assembly image itself, which would keep the GC from unloading it. For any other `Assembly`, we provide a default implementation which turns the embedded resource into a `byte[]` and returns a span into that array. That way, the span returned by `GetResourceContents` will always be valid, even if somebody called `EmbeddedResourceInfo.Dispose` or tried to unload the assembly.\r\n\r\n(`EmbeddedResourceInfo.Dispose` wouldn\u0027t actually dispose of any unmanaged resources. The only thing it would do is break the link between the `ERI` instance and the `Assembly`, so holding on to the `ERI` wouldn\u0027t prevent the `Assembly` from being unloaded. I\u0027m not sold on this interface even being necessary to be honest.)",
                                           "updatedAt":  "2021-05-04T17:45:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjEzNDQ2MA==",
                                           "createdAt":  "2021-05-04T18:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Or make the existing `ManifestResourceStream` type public and expose the Span returning method that way.\r\n```csharp\r\npublic class ManifestResourceStream : UnmanagedMemoryStream\r\n{\r\n    public ReadOnlySpan\u003cbyte\u003e GetContents();\r\n}\r\n```\r\nExample of use: `ReadOnlySpan\u003cbyte\u003e span = ((ManifestResourceStream)a.GetManifestResourceStream(name)).GetContents()`",
                                           "updatedAt":  "2021-05-04T18:00:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjEzOTc4OA==",
                                           "createdAt":  "2021-05-04T18:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@jkotas Do you know if Mono also guarantees that the returned unmanaged memory stream points to a GC-trackable region of the image?",
                                           "updatedAt":  "2021-05-04T18:08:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjE0NDk1MA==",
                                           "createdAt":  "2021-05-04T18:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Mono does not support unloadable code today.",
                                           "updatedAt":  "2021-05-04T18:17:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjE3NDg0Mw==",
                                           "createdAt":  "2021-05-04T19:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "#40394 (despite its title) tracks the various known cases that must keep an assembly alive that we don\u0027t yet have tests in the test suite for for, so that when mono implements that, they can ensure compatibility. So if we take advantage of this behavior we should document it over there. ",
                                           "updatedAt":  "2021-05-04T19:05:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjI3NjgyNQ==",
                                           "createdAt":  "2021-05-04T21:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "If we were to expose a new type for this, should we name it `ModuleImageMemoryStream`? The name indicates \"this is a stream over an in-memory module image.\" We can also expose the `Module` instance as a first-class property on the type. The behavior would be that any reference to the stream (or a span retrieved from it) will keep the underlying `Module` alive. Dropping \"manifest resource\" from the name also allows us to repurpose this stream type for later non-resource use if we so choose.",
                                           "updatedAt":  "2021-05-04T21:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q_2jv",
                                           "createdAt":  "2022-12-20T06:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiRpjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2023-11-02T19:05:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmja",
                                                                               "createdAt":  "2024-06-04T09:43:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dubzer",
                                                                               "createdAt":  "2025-02-18T16:58:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-15T12:46:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Hey stumbled on this issue, as I was looking for a code generator based solution that could bake the resource into the PE file directly for NativeAOT scenarios and this library [EmbeddingResourceCSharp](https://github.com/pCYSl5EDgo/EmbeddingResourceCSharp) does the job nicely. \r\nThough, not for the dotnet/runtime, but it would be great to have this built-in in C# 12+!",
                                           "updatedAt":  "2022-12-20T06:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RAdlM",
                                           "createdAt":  "2022-12-20T09:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nI\u0027d like to be able to get a ReadOnlySpan into an Assembly\u0027s Embedded Resources, in order to minimise memory allocations and copying when dealing with such resources.\r\n\r\nAt the moment the only way to get at an Embedded Resource is either via the Stream APIs, or by using unsafe code to read from the UnmanagedMemoryStream\u0027s pointer.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Reflection\r\n{\r\n    public class Assembly\r\n    {\r\n        // ...\r\n        public virtual Stream GetManifestResourceStream(string name);\r\n        public virtual Stream GetManifestResourceStream(Type type, string name);\r\n+       public virtual ReadOnlySpan\u003cbyte\u003e GetManifestResourceSpan(string name);\r\n+       public virtual ReadOnlySpan\u003cbyte\u003e GetManifestResourceSpan(Type type, string name);\r\n        // ...\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\nUsage mirrors existing `GetManifestResourceStream` use, but with spans:\r\n\r\n```csharp\r\nReadOnlySpan\u003cbyte\u003e ros1 = GetType().Assembly.GetManifestResourceSpan(\"Namespace.ResourceName.txt\");\r\n// do something with ros1\r\n```\r\n\r\n```csharp\r\nReadOnlySpan\u003cbyte\u003e ros2 = typeof(X).Assembly.GetManifestResourceSpan(typeof(X), \"ResourceName.txt\");\r\n// do something with ros2\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAn alternative was discussed below where the `ReadOnlySpan` could be created from the `UnmanagedMemoryStream`, but this was deemed to be unsafe as the pointer from the `UnmanagedMemoryStream` does not contain a live reference to the assembly. If a Span is created directly from the pointer and then the assembly is unloaded, the application can crash when accessing the Span.\r\n\r\n## Risks\r\n\r\nNone known.\r\n\r\n---\r\n\r\n## Original post\r\n\r\nHi,\r\n\r\nWould it be possible to add an API to `Assembly` that allows applications to get a `ReadOnlySpan\u003c\u003e` view of an embedded resource, rather than a stream?\r\n\r\nIf this has been discussed before, please just point me at that issue.\r\n\r\nThanks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eyaakov-h\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-20T09:34:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pPufW",
                                           "createdAt":  "2023-10-17T06:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "@xoofx great idea but problem with `byte` or `sbyte` for ClangSharpPInvokeGenerator\r\n\r\nExample embedded texture for `DeafMan1983.Interop.SDL2`\r\n```\r\n       [EmbedResourceCSharp.FolderEmbed(\"../data/\", \"*.png\")]\r\n        private static partial System.ReadOnlySpan\u003csbyte\u003e GetResouceFileContent(System.ReadOnlySpan\u003cchar\u003e path);\r\n        public static void Main()\r\n        {\r\n            var tex_data = GetResouceFileContent(\"data/tex_data.png\");\r\n            ...\r\n            SDL_Texture* tex_data_tex\r\n            fixed (sbyte* tex_data_ptrs = tex_data)\r\n            {\r\n                tex_data_tex = IMG_LoadTexture_RW(..., SDL_RWFromMen(tex_data_ptrs, ...), ..);\r\n            }\r\n            ...\r\n        }\r\n```\r\n\r\nIs it correct or wrongly? But my library `DeafMan1983.Interop.SDL2` is working in progress. ",
                                           "updatedAt":  "2023-10-17T06:13:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qxsg0",
                                           "createdAt":  "2023-11-02T19:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdQDHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2023-11-02T22:57:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "compujuckel",
                                                                               "createdAt":  "2024-04-05T12:27:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Xpl0itR",
                                                                               "createdAt":  "2024-04-06T15:23:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The code-gen approaches mentioned are a feasible approach for these high-performance cases.\r\n\r\nI don\u0027t see how the ability to return the raw backing memory of the assembly file on disk will work with NativeAOT and trimming.\r\n\r\nClosing since this issue is \u003e 5 years old with no concrete proposal that addresses the original ask (safe; no Streams; no cache needed; need to expose raw memory safely).",
                                           "updatedAt":  "2023-11-02T19:21:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q0gsF",
                                           "createdAt":  "2023-11-03T09:57:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiRpog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yaakov-h",
                                                                               "createdAt":  "2023-11-04T11:55:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "compujuckel",
                                                                               "createdAt":  "2024-04-05T12:28:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xpl0itR",
                                                                               "createdAt":  "2024-04-06T15:26:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-15T12:46:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pentp",
                                           "body":  "I don\u0027t understand the reasons for closing this - there is a concrete API proposal (although no full agreement on that and multiple alternatives also).\r\n\r\nHow is having a span directly to the embedded resource in the assembly fundamentally different from having a span to a `.field/.data`? Why would NativeAOT have any trouble with that? AFAIK the open questions here have been about unloadable assemblies and I wouldn\u0027t really mind if this API throwed for unloadable assemblies for example.\r\n\r\nThe fact that this is 5 years old just means that it hasn\u0027t been resolved in 5 years, not a reason for closing this.\r\nPeople have used hacks (`UnmanagedMemoryStream.PositionPointer`) to work around this issue for 5 years and will continue to do so until a proper API is implemented.",
                                           "updatedAt":  "2023-11-03T09:59:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q1g48",
                                           "createdAt":  "2023-11-03T13:10:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I don\u0027t understand the reasons for closing this - there is a concrete API proposal (although no full agreement on that and multiple alternatives also).\r\n\r\nWhat is not working with [EmbeddingResourceCSharp](https://github.com/pCYSl5EDgo/EmbeddingResourceCSharp) for your use case?",
                                           "updatedAt":  "2023-11-03T13:10:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q2Iyj",
                                           "createdAt":  "2023-11-03T14:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pentp",
                                           "body":  "I\u0027m not going to add an additional package that generates an inefficient solution to replace a 3 line hack (using `UnmanagedMemoryStream.PositionPointer`) that already works. I\u0027m just asking for a proper API so that this hack wouldn\u0027t be needed.",
                                           "updatedAt":  "2023-11-03T14:48:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q2c0-",
                                           "createdAt":  "2023-11-03T15:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I\u0027m not going to add an additional package that generates an inefficient solution to replace a 3 line hack (using `UnmanagedMemoryStream.PositionPointer`) that already works. I\u0027m just asking for a proper API so that this hack wouldn\u0027t be needed.\r\n\r\nThe package is only used at compile time, it doesn\u0027t flow at runtime. Also, not sure to follow what do you mean by inefficient solution? The `ROS\u003cbyte\u003e` static property is the fastest solution, doesn\u0027t allocate any object, is trimmable/compatible with NativeAOT, resolves directly to a constant address at JIT/AOT compilation time when using it, which is definitely not the case for `GetManifestResourceStream` + `UnmanagedMemoryStream`.",
                                           "updatedAt":  "2023-11-03T16:35:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q294b",
                                           "createdAt":  "2023-11-03T16:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "I tried file with EmbedResouceCSharp and it works fine for me because I have tested with Half-Life sky inside my SDL2 Wrapper and it works fine in NativeAot because I already pack to native executable. Look example:\r\n![image](https://github.com/dotnet/runtime/assets/57066679/ac7b95f1-1f48-4256-9be0-5d6f0f904252)\r\nThat\u0027s using data for EmbedResouceCSharp. And NativeAot is okay. You understand that 💯 ",
                                           "updatedAt":  "2023-11-03T16:49:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q3ydY",
                                           "createdAt":  "2023-11-03T19:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I don\u0027t understand the reasons for closing this - there is a concrete API proposal (although no full agreement on that and multiple alternatives also).\r\n\r\nI appreciate the feedback here about closing since there has been little activity or progress in the last year, and there is still not an API provided that addresses the requirements along with assembly unloading concern. I\u0027ll re-open the issue here for discussion purposes.\r\n\r\n\u003e Why would NativeAOT have any trouble with that?\r\n\r\nI was thinking about trimming in general. If there\u0027s not a reference to either a generated resource property name or a resource name as a literal string passed to well-known method(s), then the linker\\trimmer would (or could) trim the resource since it wouldn\u0027t detect usage of it. However, at this time I don\u0027t think resources are trimmed but I can see wanting this in the future. In any case, a new API should consider being trimmer-friendly in these regards.\r\n\r\nSo moving forward, IMO a nice approach would be to leverage the C# work to reference raw memory which supports trimming:\r\n- https://github.com/dotnet/runtime/pull/40346\r\n- https://github.com/dotnet/runtime/issues/13348#issuecomment-666626838\r\n\r\nby creating an RVA static field for each embedded resource. This was also mentioned above in https://github.com/dotnet/runtime/issues/26101#issuecomment-831856778 and https://github.com/dotnet/runtime/issues/26101#issuecomment-831894657 and also has the advantage of not having to scan for a resource name.\r\n\r\nA RVA static field would work nicely with source generation of binary resources, although I imagine huge resources might slow down compilation time.",
                                           "updatedAt":  "2023-11-03T19:47:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q4DBs",
                                           "createdAt":  "2023-11-03T20:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "@steveharter why do you open issue? Check my proof of my picture that\u0027s embedding tga file inside data as byte[] ( from `Span\u003cbyte\u003e` and I have written in fixed statement with embedded data (tga) byte array then I have tested `dotnet build` and `dotnet run` and output directory doesn\u0027t have directory data/desertbk.tga ( Half-Life\u0027s Sky ) and my app runs fine without errors. ",
                                           "updatedAt":  "2023-11-03T20:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q4Kj8",
                                           "createdAt":  "2023-11-03T21:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdJLjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DeafMan1983",
                                                                               "createdAt":  "2023-11-03T21:32:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yaakov-h",
                                                                               "createdAt":  "2023-11-04T11:56:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "compujuckel",
                                                                               "createdAt":  "2024-04-05T12:29:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I re-opened this issue since I think there is a path forward with a built-in source-gen feature and to continue discussion on that. Typically, we don\u0027t have discussions on closed issues.",
                                           "updatedAt":  "2023-11-03T21:09:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q5Xn9",
                                           "createdAt":  "2023-11-04T11:58:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdJL2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DeafMan1983",
                                                                               "createdAt":  "2023-11-04T13:32:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "compujuckel",
                                                                               "createdAt":  "2024-04-05T12:30:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "A built-in source generator for files that are already marked as embedded resources sounds like a much more intuitive system than the third-party source generator referenced here, which (as far as I can tell) requires adding an attribute to C# source code with a relative file path that isn\u0027t necessarily included in any csproj.",
                                           "updatedAt":  "2023-11-04T11:58:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q5dvK",
                                           "createdAt":  "2023-11-04T13:47:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeafMan1983",
                                           "body":  "@yaakov-h that\u0027s correct like I tell about packing to native aot executable. Embedded resources load inside in native executable like read data.\r\n\r\nNative executable means after `dotnet publish -c Release -r \u003crid\u003e -p:PublishAot=true -p:StripSymbols=true --self-contained=true`\r\n\r\nIf you want know to load embedded resources like texture or picture from native library.\r\n\r\nYou can try out [AppWithPlugin for NativeAot](https://github.com/DeafMan1983/AppWithPluginForNativeAot).\r\n\r\nThat\u0027s all. But I never embed resources in native library. We could test with dotnet\u0027s native library ( static or shared )\r\n\r\n// UPDATE:\r\nGreat news: I have tested with load image from native library = It works fine like in C/C++.\r\n\r\n![image](https://github.com/DeafMan1983/TestLoadingImageFromAnything/assets/57066679/05cd62dc-a822-48f3-8d00-e55d03af2696)\r\n\r\nSee my new [repository](https://github.com/DeafMan1983/TestLoadingImagesFromAnything)!",
                                           "updatedAt":  "2023-11-04T20:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58cC1G",
                                           "createdAt":  "2024-04-30T23:42:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiRp1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "panost",
                                                                               "createdAt":  "2024-05-02T13:59:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2024-05-06T07:56:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rmja",
                                                                               "createdAt":  "2024-06-04T10:32:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AigioL",
                                                                               "createdAt":  "2024-06-13T16:09:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-15T12:47:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "PJB3005",
                                           "body":  "The existing source-gen as shown, which AFAICT just emits a `public static ReadOnlySpan\u003cbyte\u003e Data =\u003e new byte[] { ... }`, would be extremely bad to have in the runtime. Embedding large binary files would nuke compile performance easily. This really is not a path forward.",
                                           "updatedAt":  "2024-04-30T23:42:09Z"
                                       }
                                   ],
                         "totalCount":  44
                     },
        "title":  "Get Span view of embedded resource data",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26506",
        "createdAt":  "2018-06-15T11:37:50Z",
        "number":  26506,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-15T12:06:26Z",
        "body":  "Currently at ~35% line coverage.\n\nTo test and measure coverage run `dotnet build src/System.Reflection.Context/tests/ /t:Test /p:Coverage=true`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi42rDQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjcyNTk3Mg==",
                                           "createdAt":  "2018-08-14T01:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAalDeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2018-08-14T01:55:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mbrameld",
                                           "body":  "I\u0027d like to take this one on and add some tests. I\u0027m following [this guide to build and run the tests](https://github.com/dotnet/corefx/wiki/Build-and-run-tests). Everything works fine from the command line, but when I try to run the tests in Visual Studio 2017 by setting the test project as startup and running it, I get an error saying a project with an output type of class library can\u0027t be started. The tests all show up in the test explorer, but when I try to run them it tells me: No test is available in corefx\\bin\\AnyOS.AnyCPU.Debug\\System.Reflection.Context.Tests\\netcoreapp\\System.Reflection.Context.Tests.dll. Make sure that test discoverer \u0026 executors are registered and platform \u0026 framework version settings are appropriate and try again.\r\n\r\nAm I missing a step somewhere?",
                                           "updatedAt":  "2018-08-14T01:49:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjcyNzEwNQ==",
                                           "createdAt":  "2018-08-14T01:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Debugging is currently broken in VS: https://github.com/dotnet/corefx/issues/30913\r\n\r\nBut should be back in a few days (finger crossed).",
                                           "updatedAt":  "2018-08-14T01:55:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjcyNzk4MA==",
                                           "createdAt":  "2018-08-14T02:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mbrameld",
                                           "body":  "Ah, thanks! I\u0027ll keep an eye on that issue and come back to this one.",
                                           "updatedAt":  "2018-08-14T02:00:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjcyODg2MA==",
                                           "createdAt":  "2018-08-14T02:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Yeah, sure. Thanks a lot for the help! I\u0027ll keep you updated. But you don\u0027t really need VS. The easiest way to test is:\r\n\r\n```\r\ncd src/System.Reflection.Context/tests\r\ndotnet msbuild /t:RebuildAndTest /p:Coverage=true\r\n```\r\n\r\n",
                                           "updatedAt":  "2018-11-27T16:33:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjcyOTg3OA==",
                                           "createdAt":  "2018-08-14T02:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mbrameld",
                                           "body":  "That does run the tests for me, but I could benefit from stepping through things. I\u0027m not familiar with how System.Reflection.Context all works yet and I\u0027m struggling a little without the debugger!",
                                           "updatedAt":  "2018-08-14T02:11:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjczMTE0Mw==",
                                           "createdAt":  "2018-08-14T02:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Understandable. I suggest to wait a few days then 👍 ",
                                           "updatedAt":  "2018-08-14T02:18:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjc1MjU5NQ==",
                                           "createdAt":  "2018-08-14T04:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Or add `while(!Debugger.IsAttached) Thread.Sleep(1000)` to a test them attach VS at leisure?",
                                           "updatedAt":  "2018-08-14T04:39:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjgzNjk3Mw==",
                                           "createdAt":  "2018-08-14T11:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e Or add while(!Debugger.IsAttached) Thread.Sleep(1000) to a test them attach VS at leisure?\r\n\r\nOr simply a `Debugger.Break();` ",
                                           "updatedAt":  "2018-08-14T11:12:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjg1MjUwNg==",
                                           "createdAt":  "2018-08-14T12:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "@mbrameld I sent you a collabor invite so that I can assign you to the issue. Please respond when you accepted it. Make sure to unfollow all the repos as they will be followed by default after you accepted. Otherwise you will get A LOT of emails 😁",
                                           "updatedAt":  "2018-08-14T12:19:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjk0ODE1Mw==",
                                           "createdAt":  "2018-08-14T17:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mbrameld",
                                           "body":  "I accepted it, thank you!",
                                           "updatedAt":  "2018-08-14T17:15:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMjk1NTY3Nw==",
                                           "createdAt":  "2018-08-14T17:40:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "I flagged it as easy but it could me more of an intermediate level of work. If you have questions / need help, reach out :)",
                                           "updatedAt":  "2018-08-14T17:40:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjA5NDA3OA==",
                                           "createdAt":  "2018-11-27T15:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Adam25T",
                                           "body":  "Hello, in the coming week a group of people trying to gain experience with open source are going to be contributing to corefx. Issues that focus on increasing test coverage seem like a good place to start. How do I become a collaborator on this repo?",
                                           "updatedAt":  "2018-11-27T15:13:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjEyNDc4NQ==",
                                           "createdAt":  "2018-11-27T16:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Hi @Adam25T. Awesome, great to hear!! Few things:\r\n\r\n1. If you tell me all the github handles of people who are going to contribute I can add them now. Please make sure to unsubscribe from all the repos as being a members means auto-subscribing to 50+ repos which results in ~500 emails a day.\r\n2. If you are looking for issue that are relatively easy for first-time-contributors, not just code-coverage, then I can make sure to label all appropriate issues till next week with the `easy` and `up-for-grabs` label. If your group is part of a Hackathon we can probably also support you in our Gitter channel to unblock you and make sure that you can work in a productive way. Our docs should be self-explanatory but some advanced topics like System.Private.CoreLib work in coreclr requires tend to cause troubles.\r\n\r\ncc @karelz @danmosemsft ",
                                           "updatedAt":  "2018-11-27T16:32:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjEzNDE0MQ==",
                                           "createdAt":  "2018-11-27T16:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Adam25T",
                                           "body":  "Thanks for the prompt reply @ViktorHofer . Technically it is a small scale hackathon for junior level people and I don\u0027t have their github handles. Just looking for some simple issues to try and tackle!",
                                           "updatedAt":  "2018-11-27T16:56:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjEzODQ4NQ==",
                                           "createdAt":  "2018-11-27T17:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@Adam25T check our \"Pick issue\" guide in developer docs: https://github.com/dotnet/corefx/wiki/Pick-issue",
                                           "updatedAt":  "2018-11-27T17:07:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk2MzQ2Mg==",
                                           "createdAt":  "2020-08-11T13:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future based on schedule + priority.",
                                           "updatedAt":  "2020-08-11T13:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H-6FJ",
                                           "createdAt":  "2022-08-08T05:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "Howdy, is this issue still up for work/PRs?  Looks like code coverage is still ~35%? ",
                                           "updatedAt":  "2022-08-08T05:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H_Gdx",
                                           "createdAt":  "2022-08-08T06:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@JosieBigler  you are welcome to take it. I can assign you?",
                                           "updatedAt":  "2022-08-08T06:34:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IAmS5",
                                           "createdAt":  "2022-08-08T13:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "Yea, sounds good. : )",
                                           "updatedAt":  "2022-08-08T13:16:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IBCwS",
                                           "createdAt":  "2022-08-08T14:51:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqNkFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "JosieBigler",
                                                                               "createdAt":  "2022-08-08T15:00:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Assigned!",
                                           "updatedAt":  "2022-08-08T14:51:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ITtXR",
                                           "createdAt":  "2022-08-12T13:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "I finally got my feet under me, is there a way to see which Lines/Branches/Methods aren\u0027t covered by tests so I can target those areas for Test Scenarios? ",
                                           "updatedAt":  "2022-08-12T13:43:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IT29R",
                                           "createdAt":  "2022-08-12T14:22:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@JosieBigler  have you gone through\n\nhttps://github.com/dotnet/runtime/blob/daf25da8e67857fde603b16d92192cd1368bafc7/docs/workflow/building/libraries/code-coverage.md",
                                           "updatedAt":  "2022-08-12T14:22:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IT8cY",
                                           "createdAt":  "2022-08-12T14:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "I had not, the reports generated are very clear. Thank you! ",
                                           "updatedAt":  "2022-08-12T14:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IUK_4",
                                           "createdAt":  "2022-08-12T15:39:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Those are generated by the fantastic ReportGenerator tooling 👍",
                                           "updatedAt":  "2022-08-12T15:39:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeEr2",
                                           "createdAt":  "2022-09-16T13:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "I\u0027m still planning on working on this.  Life has gotten busy \u003e_\u003e     \r\n\r\nMaybe I can PR what I have done so far? i\u0027ve uped the code coverage to ~50% ish. ",
                                           "updatedAt":  "2022-09-16T13:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeMZs",
                                           "createdAt":  "2022-09-16T14:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@JosieBigler definitely ok to submit PRs with more tests even if you plan to add more later. You will at least see feedback and potentially avoid some patterns/things that would not pass in code review in future.\r\nIn issues like these we do not shoot for PRs to \"have it all\".",
                                           "updatedAt":  "2022-09-16T14:24:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N2vq6",
                                           "createdAt":  "2022-11-07T21:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@JosieBigler I see that there was a PR for this that you closed -- was it incomplete?\r\n\r\nIf you are unable to finish that PR, we may use that as a base for this issue. Thanks",
                                           "updatedAt":  "2022-11-07T21:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N3tIi",
                                           "createdAt":  "2022-11-08T00:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvOhGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2022-11-08T15:12:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "@steveharter  I pushed the PR, but got failures on different System Architectures that I wasn\u0027t expecting. And wanted to correct, and then got busy again.  Let me do a pull from `main` again and push a draft PR to see the results. ",
                                           "updatedAt":  "2022-11-08T00:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N3uPS",
                                           "createdAt":  "2022-11-08T00:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "The current draft PR: https://github.com/dotnet/runtime/pull/77999",
                                           "updatedAt":  "2022-11-08T00:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LjasN",
                                           "createdAt":  "2024-09-10T15:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aturnbul",
                                           "body":  "Is this still an open issue? If so, I\u0027d like to help but with the caveat that I\u0027m completely new to Open Source and to Testing in .NET.",
                                           "updatedAt":  "2024-09-10T15:47:29Z"
                                       }
                                   ],
                         "totalCount":  30
                     },
        "title":  "Improve System.Reflection.Context.Tests code coverage (~35%)",
        "labels":  [
                       "area-System.Reflection",
                       "good first issue",
                       "increase-code-coverage",
                       "test-enhancement",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10842",
        "createdAt":  "2018-08-06T16:07:30Z",
        "number":  10842,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:05Z",
        "body":  "dotnet/coreclr#17732 added support for reflection-invoking methods that return unmanaged pointers by reference (so e.g. `ref void* Do()`), but methods that get them by-reference as their parameters are still pretty broken (so e.g. `void Do(ref void* x)`).\r\n\r\nFor example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Reflection;\r\n\r\nunsafe class Program\r\n{\r\n    public static void InvokeMe(out int* pointer)\r\n    {\r\n        pointer = (int*)0x12345;\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        typeof(Program).GetMethod(nameof(InvokeMe)).Invoke(null, new object[] { null });\r\n    }\r\n}\r\n```\r\n\r\nWill crash the runtime with an `ExecutionEngineException`.\r\n\r\n(Note this behavior is on parity with the desktop CLR, so it has quite likely been this broken for 17 years.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhgryJw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDc2MTQ3Mg==",
                                           "createdAt":  "2018-08-06T16:08:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Cc @AtsushiKan @sergiy-k ",
                                           "updatedAt":  "2018-08-06T16:08:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTE4NDI5MQ==",
                                           "createdAt":  "2019-01-31T01:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@MichalStrehovsky marked future. feel free to change.",
                                           "updatedAt":  "2019-01-31T01:54:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDY3MDU4NQ==",
                                           "createdAt":  "2020-03-26T20:34:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "__Expected behavior:__ Once this method returns, the `object[]` that\u0027s passed in contains a single element which is equivalent to having written `System.Reflection.Pointer.Box((int*)12345, typeof(int))`.",
                                           "updatedAt":  "2020-03-26T20:34:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDY3MTI3Nw==",
                                           "createdAt":  "2020-03-26T20:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This does repro on 5.0 - ExecutionEngineException is thrown. Trying to ignore the exception with a try\\catch results in `Fatal error. Internal CLR error. (0x80131506)`",
                                           "updatedAt":  "2020-03-26T20:36:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDY3MjAwNA==",
                                           "createdAt":  "2020-03-26T20:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@MichalStrehovsky Is this actually blocking a critical scenario? A workaround right now would be to define a delegate with an appropriate signature and to wrap that delegate around the target method.\r\n\r\nWhat we want to avoid is spending a bunch of time addressing one-off issues in reflection that very few people will ever realistically run in to. We\u0027d rather prioritize more impactful work items.",
                                           "updatedAt":  "2020-03-26T20:37:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDY3MzY0Mw==",
                                           "createdAt":  "2020-03-26T20:40:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky Is this actually blocking a critical scenario?\r\n\r\nNope. If I remember correctly, I found this when we were adding `System.Reflection.Pointer` support into .NET Native (for NetStandard 2.0, since `Pointer` was new to NS2.0). I was writing tests and found out this doesn\u0027t work so I logged a bug. FWIW I think I made it work as expected in .NET Native.",
                                           "updatedAt":  "2020-03-26T20:40:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjYjI",
                                           "createdAt":  "2022-07-13T21:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "See also https://github.com/dotnet/runtime/issues/7430 which is similar but using a binder.",
                                           "updatedAt":  "2022-07-13T21:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCvIn",
                                           "createdAt":  "2024-07-24T20:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "In v9, this now crashes with `NullReferenceException` in `System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs`.",
                                           "updatedAt":  "2024-07-24T20:42:39Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Support for reflection-invoking methods that take pointers by reference",
        "labels":  [
                       "enhancement",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27803",
        "createdAt":  "2018-11-02T23:18:46Z",
        "number":  27803,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBVd2OA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2018-11-16T02:12:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weltkante",
                                            "createdAt":  "2019-02-08T14:06:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeeminglyScience",
                                            "createdAt":  "2020-11-02T17:47:38Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-11-04T18:08:54Z",
        "body":  "As part of the review for feature dotnet/runtime#15033 and PR dotnet/corefx#33201, there was concern about the lack of support for assemblies not backed by a physical file.\r\n\r\nFrom the comments @jkotas:\r\n\u003e There is no way to load runtime loaded assembly into MetadataLoadContext that it not backed by a physical file. The runtime has AssemblyExtensions.TryGetRawMetadata API to handle this case, but there is no way to give the blob returned by TryGetRawMetadata to MetadataLoadContext. The assemblies not backed by physical file are rare today, but they are very likely going to become more common as part of the single-file project.\r\nI am wondering whether there should be a LoadFrom method that takes MetadataReaderProvider to address both these problems and/or whether we should expose a resolver that can resolve the runtime loaded assemblies for you.\r\n\r\nImplementation\\design TBD. One approach is to use runtime reflection over the dynamic assembly, and convert those from `System.RuntimeType` to the MetadataLoadContext types (`System.RoType`).\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTbjqxQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODg0NDkwNw==",
                                           "createdAt":  "2019-06-04T21:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future.",
                                           "updatedAt":  "2019-06-04T21:10:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE0NjEzMA==",
                                           "createdAt":  "2020-07-07T21:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "There have been no customer asks for this so far, although the scenario is valid.\r\n\r\nDue to 5.0 schedule constraints, this is being moved to Future.",
                                           "updatedAt":  "2020-07-07T21:30:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTk2NzQxOA==",
                                           "createdAt":  "2020-10-31T18:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe1Qnw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yenneferofvengerberg",
                                                                               "createdAt":  "2024-04-19T15:17:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "slang25",
                                           "body":  "I would really like support for this 🙂. I want to load some dynamic assemblies that are built in memory with S.R.Emit, and then load them into MetadataLoadContext for unit testing my load context reflection logic.",
                                           "updatedAt":  "2020-10-31T18:01:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E3EHk",
                                           "createdAt":  "2022-06-14T14:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChxTfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2022-06-14T15:42:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Per offline discussion, the scenario for \"dynamic assemblies\" can be scoped to being able to use MLC to inspect a single-file app which contains embedded assemblies as resource blobs. To support this there are two general options:\r\n1) Add a helper method (like the existing `GetRawMetadata()`) to the runtime to obtain the assembly(s) from a single file app as blob(s). These then should be able to be passed to MLC.\r\n2) Add a method to MLC that understands single-file apps. This could layer on (1).\r\n\r\n\u003e I am wondering whether there should be a LoadFrom method that takes MetadataReaderProvider \r\n\r\nExposing an a `MLC.LoadFrom(MetadataReaderProvider)` seems straightforward. MLC does already have `LoadFromStream` and \r\n`LoadFromByteArray` however (not quite as flexible).\r\n\r\nSome prototype thoughts:\r\n- Bridge between GetRawMetadata() and MetadataReader - what is needed to use that blob in the reader?\r\n- Does the blob from GetRawMetadata have the assembly references? Update: No it does not. AssemblyBuilder.Save() would be necessary or a larger feature to be able to consume the in-memory metadata from MLC.\r\n- Does the output from AssemblyBuilder support GetRawMetadata()?\r\n\r\n\u003e and/or whether we should expose a resolver that can resolve the runtime loaded assemblies for you.\r\n\r\nI assume this means an addition to or a replacement for the path-based resolver that we already have to help with dynamically produced assemblies referencing each other without physical files?\r\n\r\n\u003e  I want to load some dynamic assemblies that are built in memory with S.R.Emit, and then load them into \r\nMetadataLoadContext for unit testing my load context reflection logic.\r\n\r\nNote that `GetRawMetadata()` does not work with `AssemlbyBuilder` output. Supporting `AssemblyBuilder.Save()` would also address the scenario.",
                                           "updatedAt":  "2022-06-16T17:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FBTQw",
                                           "createdAt":  "2022-06-16T17:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future based on priority + schedule. Currently there are no community asks for this.\r\n\r\n@vitek-karas do you have thoughts on enabling MLC to work on single-file apps?",
                                           "updatedAt":  "2022-06-16T17:54:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FBaiy",
                                           "createdAt":  "2022-06-16T18:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I must admit that I don\u0027t understand how \"dynamic assemblies\" relate to single-file, other than both don\u0027t have a backing file.\r\n\r\nSo far we\u0027ve been trying to avoid introducing APIs to read from the single-file. The main reason being that there are effectively 3 or 4 implementations of single-file already and each is likely to behave differently:\r\n* The single-file feature which can be trigged by specifying `/p:PublishSinfleFile=true`\r\n* Android app target - which is packaged as a bundle as well (but using different mechanisms)\r\n* iOS app target - which I\u0027m not that familiar with, but it effectively acts similarly\r\n* Blazor WASM - to a degree the assemblies here don\u0027t have true file paths either - and I don\u0027t know if it\u0027s possible to read them as byte streams\r\n\r\nOn top of that there are full AOT scenarios (NativeAOT, WASM AOT, Android AOT, iOS AOT) where there\u0027s no IL to begin with.\r\n\r\nOn top of that, we\u0027re hesitant to allow access to the bundle parts as that would directly lead to requests to allow bundling of random content/data files and access to those - which would effectively create another API to access data alongside of existing File APIs and ResourceManager APIs. And more importantly we\u0027re trying to get to a place where well written code would work in single-file or multi-file deployments without changes.\r\n\r\nTo that end the `GetRawMetadata` approach feels like the best option:\r\n* It already exists as an API and works for file based assemblies and probably also for single-file assemblies (I didn\u0027t try this)\r\n* It is scoped to just assemblies so has not chance of spreading to other content\r\n* It could be made to work even on dynamic assemblies if we really wanted to (do `Save` behind the scenes and return the metadata part of that stream) - but that\u0027s a long shot.\r\n\r\nIt would still not solve full AOT support - but that is likely never going to work.",
                                           "updatedAt":  "2022-06-16T18:21:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NuOrF",
                                           "createdAt":  "2022-11-04T18:08:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I would really like support for this 🙂. I want to load some dynamic assemblies that are built in memory with S.R.Emit, and then load them into MetadataLoadContext for unit testing my load context reflection logic.\r\n\r\nIf we implement [AssemblyBuilder.Save()](https://github.com/dotnet/runtime/issues/62956) it would be possible to load those into MLC.",
                                           "updatedAt":  "2022-11-04T18:08:54Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "MetadataLoadContext to support dynamic assemblies",
        "labels":  [
                       "enhancement",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27817",
        "createdAt":  "2018-11-05T17:27:15Z",
        "number":  27817,
        "author":  "weshaggard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-21T21:08:17Z",
        "body":  "```\r\nAssert.Throws() Failure\r\nExpected: typeof(System.IO.FileNotFoundException)\r\nActual:   (No exception was thrown)\r\nStack Trace :\r\n   at System.Reflection.Tests.AssemblyNameTests.Constructor_String_LoadVersionTest() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Reflection/tests/AssemblyNameTests.cs:line 559\r\n```\r\n\r\nA couple examples:\r\nhttps://mc.dot.net/#/user/weshaggard/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/84cf25a2c8d2bd2819584e57de87a5c1c0fa6efa/workItem/System.Reflection.Tests/analysis/xunit/System.Reflection.Tests.AssemblyNameTests~2FConstructor_String_LoadVersionTest\r\nhttps://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/b4be508ae9f11a42286a828728d537eca987d0bb/workItem/System.Reflection.Tests/analysis/xunit/System.Reflection.Tests.AssemblyNameTests~2FConstructor_String_LoadVersionTest",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKBF37g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzY1NjU0OA==",
                                           "createdAt":  "2019-06-19T17:31:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Also occurred on\r\n```\r\nWindows.10.Amd64.Core-x64 \r\nRelease\r\nRedHat.73.Amd64-x64 \r\nRelease\r\n```",
                                           "updatedAt":  "2019-06-19T17:31:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTUyNTE3MQ==",
                                           "createdAt":  "2020-08-10T18:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Note the failing test is marked with [ActiveIssue]",
                                           "updatedAt":  "2020-08-10T18:47:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjAzNDA2Mg==",
                                           "createdAt":  "2020-08-11T15:52:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This test is not working on Windows either, it is throwing `FileLoadException` not `FileNotFoundException`.\r\n\r\nThis test is not valid for coreclr. It assumes the binding semantics of assemblyname that only exist in NetFx, not CoreFx.\r\n\r\nThe CoreFx binding\\loader (core-setup) has the rough algorithm:\r\n- During bootstrapping of the native `dotnet` executable, it obtains version information from the .deps.json file, not the assemblyname from the assembly manifest. This is used to support roll-forward only (major\\minor\\patch depending on settings).\r\n- Passes the list of assemblies (names, not including version) to the CoreClr when initializing the CoreClr.\r\n- When assembly is loaded, the CLR verifies the reference\u0027s assembly name is compatible with the target assembly\u0027s version (from the assembly manifest). The versions match exactly except for patch\\build version.\r\n\r\nAt a minimum this test should catch `FileLoadException` not `FileNotFoundException` (at least to match current Core semantics). The file exists, just the assembly manifest version is not compatible.",
                                           "updatedAt":  "2020-08-11T18:45:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjIxODA1Mg==",
                                           "createdAt":  "2020-08-11T19:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "In CI, sometimes `FileLoadException` is thrown, but mostly `FileNotFoundException` is thrown.\r\n\r\nIn a local build (Windows x64),  `FileLoadException` is always thrown. It is thrown because:\r\n- `IsCompatibleAssemblyVersion` fails due to the AssemblyName version not equal to the manifest version.\r\n- `hr = FUSION_E_REF_DEF_MISMATCH` is returned and a `EEFileLoadException::Throw` is performed.\r\n- There is a subsequent check in a catch (`PostBindResolveAssembly`) but that just re-throws the same exception.\r\n\r\nIn a local console app,  `FileNotFoundException` is always thrown for the same scenario.\r\n\r\nI believe XUnit is interfering in some manner, and that the run-time semantics are consistent.\r\n\r\nMore debugging is necessary. ",
                                           "updatedAt":  "2020-08-11T19:28:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjIzMzQ1NA==",
                                           "createdAt":  "2020-08-11T19:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to Future; bug (likely test) also occurred in 3.1.",
                                           "updatedAt":  "2020-08-11T19:44:45Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Constructor_String_LoadVersionTest failing on Fedora runs",
        "labels":  [
                       "investigate",
                       "area-System.Reflection",
                       "disabled-test",
                       "os-linux",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28001",
        "createdAt":  "2018-11-27T11:04:36Z",
        "number":  28001,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOSOCA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "redknightlois",
                                            "createdAt":  "2018-11-27T16:47:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "xoofx",
                                            "createdAt":  "2018-11-27T17:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Starnick",
                                            "createdAt":  "2018-11-27T17:27:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2019-03-19T00:55:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjsabby",
                                            "createdAt":  "2019-07-17T05:10:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2020-03-26T12:37:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ziflin",
                                            "createdAt":  "2020-06-03T23:11:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-07-10T06:43:36Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-07-10T06:43:38Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "zgramana",
                                            "createdAt":  "2020-08-28T17:36:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nsentinel",
                                            "createdAt":  "2024-12-05T16:54:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2025-03-11T22:45:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-03-25T05:38:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-03-25T05:38:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-25T06:52:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2025-09-04T00:04:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hamarb123",
                                            "createdAt":  "2025-09-04T00:04:12Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-08-23T10:37:56Z",
        "body":  "**Proposal**\r\n\r\nI suggest we add the following method to System.Runtime.CompilerServices.RuntimeHelpers:\r\n\r\n```csharp\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    public static class RuntimeHelpers\r\n    {\r\n        public static ref byte GetRawData(object o);\r\n    }\r\n}\r\n```\r\n\r\nGiven an object instance `o`, this would return a managed reference to the first field of the type (or first element of an array if `o` is an array, or first character of a string if `o` is string). This can be implemented the same way JitHelpers.GetPinningHelper is implemented within the CLR and would have similar use.\r\n\r\n**Alternatives considered**\r\n\r\nWe could place the helper in System.Runtime.CompilerServices.Unsafe, but that would be troublesome for variable-length types (arrays and string). If we ever add new ones (such as the Utf8string prototype), the API might not do what the user expects. This API needs to be versioned with the underlying runtime.\r\n\r\n**Example Usage**\r\n\r\nCreate a strongly typed reflection-free field getter and setter:\r\n\r\n```csharp\r\nabstract class FastFieldAccessor\r\n{\r\n    public abstract object GetValue(object o);\r\n    public abstract void SetValue(object o);\r\n}\r\n\r\nclass FastFieldAccessor\u003cT\u003e : FastFieldAccessor\r\n{\r\n    private IntPtr _offset;\r\n\r\n    public FastFieldAccessor(object o, ref T field)\r\n    {\r\n        _offset = Unsafe.ByteOffset(ref RuntimeHelpers.GetRawData(o), ref Unsafe.As\u003cT, byte\u003e(ref field));\r\n    }\r\n\r\n    public override object GetValue(object o)\r\n    {\r\n        return Unsafe.As\u003cbyte, T\u003e(ref Unsafe.Add(ref RuntimeHelpers.GetRawData(o), _offset));\r\n    }\r\n\r\n    public override void SetValue(object o)\r\n    {\r\n        Unsafe.As\u003cbyte, T\u003e(ref Unsafe.Add(ref RuntimeHelpers.GetRawData(o), _offset)) = (T)o;\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv7rSVg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE0NTU4OA==",
                                           "createdAt":  "2018-11-27T17:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Would love to have this actually. Typically, the fact that we don\u0027t have access today to [JitHelpers.GetRawSzArrayData(this Array array)](https://github.com/dotnet/coreclr/blob/030a3ea9b8dbeae89c90d34441d4d9a1cf4a7de6/src/System.Private.CoreLib/src/System/Runtime/CompilerServices/jithelpers.cs#L187) is annoying because there are many optimizations that CoreCLR can do internally on arrays that we can\u0027t do on our own.....\r\n\r\n@MichalStrehovsky, what would be the story to calculate the offset field? I\u0027m not a fan of the convoluted code we have to go through today like this:\r\n\r\n```\r\n    class MyClass\r\n    {\r\n        public string field;\r\n        public int field2;\r\n    }\r\n\r\n    class MyClassOffset\r\n    {\r\n        private static readonly MyClass Temp = new MyClass(); \r\n        public static readonly int OffsetField2 = Unsafe.ByteOffset(ref Unsafe.As\u003cstring, int\u003e(ref Temp.field), ref Temp.field2).ToInt32();\r\n    }\r\n```\r\n\r\nWondering if as part of the CLR change required for interface static methods, if we should not introduce more IL opcodes for these kind of scenarios... 🤔 ",
                                           "updatedAt":  "2018-11-27T19:38:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE0OTE5Mw==",
                                           "createdAt":  "2018-11-27T17:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Wondering if as part of the CLR change required for interface static methods, if we should not introduce more IL opcodes for these kind of scenarios... \r\n\r\nThinking more seriously about this, I\u0027m worried that we could miss an opportunity here (we don\u0027t have the occasion to have breaking changes to the IL),  so should we think more broadly about what would be relevant to bring to these CLR changes? @jkotas what do you think?",
                                           "updatedAt":  "2018-11-27T17:37:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE1Mzk3OQ==",
                                           "createdAt":  "2018-11-27T17:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGS4IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ltrzesniewski",
                                                                               "createdAt":  "2018-11-27T20:31:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2018-11-27T20:58:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2019-03-18T23:13:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2019-03-19T01:01:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-03-19T13:15:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sakno",
                                                                               "createdAt":  "2019-08-15T21:48:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ziflin",
                                                                               "createdAt":  "2020-06-03T23:12:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think that `GetRawData(object o)` is too low-level as public API with unclear semantics around arrays, etc. I would be ok with `ref char GetRawData(string s)` or `ref T GetRawData\u003cT\u003e(T[] s)`.\r\n\r\nThe fast field accessors that are shown in example usage should be first class public APIs exposed by the runtime. I believe we have some related issues about this. I do not think we want everybody to be implementing their own version of them from low-level building blocks. We want them to be owned by the runtime so that we can optimize the heck out of them, without compromising type safety.\r\n\r\n\u003e  breaking changes to the IL\r\n\r\nI do not think this proposal requires any changes to the IL. Also, note that interface static methods are not a breaking change. It would be a breaking change if existing programs stopped working which is not the case. The fact that new features require new runtimes is not a breaking change.",
                                           "updatedAt":  "2018-11-27T17:52:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE1NTc0Nw==",
                                           "createdAt":  "2018-11-27T17:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I do not think this proposal requires any changes to the IL. \r\n\r\nYeah, I was not asking about this issue in particular. For example, calculating the offset of a field from a root object is \"quite common\" for low level access so a `fld.offset`  opcode would be actually useful, while today we have to go through lots of convoluted unsafe API to get something like this.... ",
                                           "updatedAt":  "2018-11-27T17:57:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE1NzI3Ng==",
                                           "createdAt":  "2018-11-27T18:01:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e For example, calculating the offset of a field from a root object is quite common\r\n\r\nWhat are the scenarios you need the offsets for? I would rather look at what you are trying to do and see what is the best way to address it. Offsets are way too low-level.",
                                           "updatedAt":  "2018-11-27T18:01:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE5MjQ1MQ==",
                                           "createdAt":  "2018-11-27T19:48:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e What are the scenarios you need the offsets for? \r\n\r\nFor example: an animation engine, instead of having full codegen for accessing fields of structured data (which incurs an indirect call and hurts instruction cache in the end with too many of them) you can use instead field offsets to manipulate the data efficiently. Today, we need to use the code I showed above to calculate the offset, which incurs to allocate a temporary object to calculate this offset and calling multiple methods from Unsafe, while this offset is accessible from the JIT/AOT compiler relatively easily. In C# this could translate to something like `offsetof(MyStruct.field2)` with a direct opcode for it...",
                                           "updatedAt":  "2018-11-27T19:48:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjMyODEyNw==",
                                           "createdAt":  "2018-11-28T05:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e an animation engine, instead of having full codegen for accessing fields of structured data \r\n\r\nWould the type safe field accessors work for this? I would like to have a type safe default that would be  used in most cases, and have unsafe escape hatch for cases where the type safety check is too expensive.",
                                           "updatedAt":  "2018-11-28T05:48:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjMyODc2Nw==",
                                           "createdAt":  "2018-11-28T05:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Would the type safe field accessors work for this?\r\n\r\nNot sure I know this, do you have an example how does it work?",
                                           "updatedAt":  "2018-11-28T05:52:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjMzMTE2NQ==",
                                           "createdAt":  "2018-11-28T06:06:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAlQ1hA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-03-19T13:16:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "E.g. We can introduce a fully type safe field accessor like this:\r\n \r\n```\r\nstruct FieldAccessor\u003cTType, TField\u003e where TType : class\r\n{\r\n    int _offset;\r\n\r\n    public ref TField GetValue(TType obj)\r\n    {\r\n        return ref *(obj + _offset); // pseudo code \r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2018-11-28T06:07:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjMzMjAxMg==",
                                           "createdAt":  "2018-11-28T06:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e E.g. We can introduce a fully type safe field accessor like this:\r\n\r\nOh right, this is what I would use in the end once I have the offset.\r\n\r\nMy concern is more for the calculation of `_offset`.  Today, we don\u0027t have an IL instruction for calculating it. We have to go through something like `Unsafe.ByteOffset(ref Unsafe.As\u003cstring, int\u003e(ref Temp.field), ref Temp.field2).ToInt32();` (and create a temp instance  of MyStruct for example) while I\u0027m looking for something like `offsetof(MyStruct.field2)`",
                                           "updatedAt":  "2018-11-28T06:12:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjMzNTM0Nw==",
                                           "createdAt":  "2018-11-28T06:30:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There would be a factory method to get the FieldAccessor from the FieldInfo or RuntimeFieldHandle. The factory would be a slower method - it would validate the types.",
                                           "updatedAt":  "2018-11-28T06:30:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjM0MjgyMA==",
                                           "createdAt":  "2018-11-28T07:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e There would be a factory method to get the FieldAccessor from the FieldInfo or RuntimeFieldHandle. The factory would be a slower method - it would validate the types.\r\n\r\nAs long as we can avoid using reflection (and allocating lots of managed memory) to fetch this token, I\u0027m fine with this approach. I assume that we would have proper support in Roslyn to do a ldtoken via something like `handleof(xxx)` as described in the [intrinsics support proposal](https://github.com/dotnet/csharplang/blob/221ca694e340d0e0792956c632cb781addf75236/proposals/intrinsics.md#handleof)?",
                                           "updatedAt":  "2018-11-28T07:09:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjM0MzU1Mw==",
                                           "createdAt":  "2018-11-28T07:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfjhWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2018-11-28T07:13:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right.",
                                           "updatedAt":  "2018-11-28T07:12:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjM1NDE3OQ==",
                                           "createdAt":  "2018-11-28T08:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I assume that we would have proper support in Roslyn to do a ldtoken\r\n\r\nAnd for a cross-cutting feature like this, we can look forward to having it available in .NET Core 5 or 6 :).\r\n\r\nI\u0027m proposing to expose a low level building block like this to address the needs people have _right now_. It\u0027s similar to the function pointer support that C# is adding - they could have waited for static delegates, but they want to address problems people are having now, as opposed to selling them on how great things will be 3 years from now.\r\n\r\nML.net is using Reflection.Emit because of what appears to be a lack of building blocks: https://github.com/dotnet/machinelearning/issues/1736",
                                           "updatedAt":  "2018-11-28T08:00:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjM1NjA2OA==",
                                           "createdAt":  "2018-11-28T08:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e And for a cross-cutting feature like this, we can look forward to having it available in .NET Core 5 or 6 :).\r\n\r\nBut I thought that `handleof` is so simple (and similar to nameof) that it should not be much trouble to bring this to Roslyn. What is the alternative if we don\u0027t have support baked into Roslyn? (considering Reflection.Emit is a no go)",
                                           "updatedAt":  "2018-11-28T08:08:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjQ1MzcyNA==",
                                           "createdAt":  "2018-11-28T13:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAlOnxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2019-03-19T00:17:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I\u0027m proposing to expose a low level building block like this to address the needs people have right now\r\n\r\nSo what would `ML.NET` do with the low-level `GetRawData(object o)` ? They would still need to use hacky unsafe code to compute the field offset or hardcode it. If they were ok with doing that, they can also write a 5 lines more of it and add their own our hacky local implementation of `GetRawData(object o)` too. We do not need to do anything. They have all the low-level unsafe tools they need.\r\n\r\nWe would not need to wait for `handleof` to expose the type-safe field accessory. Getting the reflection object to create the type-safe field accessor from would not be as efficient or straightforward as handleof, but that\u0027s fine. It would still be a lot more efficient and straightforward compared to  Reflection.Emit solutions frequently used to solve this problem today.\r\n\r\n\u003e they could have waited for static delegates\r\n\r\nNot really. It would be ugly for static delegates to solve all the problems (e.g. around interop) that the function pointers are solving.",
                                           "updatedAt":  "2018-11-28T13:56:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDE0Mjg0Nw==",
                                           "createdAt":  "2019-03-18T23:40:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwo49g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2019-09-16T09:04:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I opened https://github.com/dotnet/corefx/issues/36133 to track the SzArray-specific helper method.",
                                           "updatedAt":  "2019-03-18T23:40:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMjAzNDg5Mw==",
                                           "createdAt":  "2019-07-16T23:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "@MichalStrehovsky We can get this in S.P.C first right? This and also GetObjectSize and HasReferences.",
                                           "updatedAt":  "2019-07-16T23:03:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMjE1NjU0MA==",
                                           "createdAt":  "2019-07-17T08:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky We can get this in S.P.C first right? This and also GetObjectSize and HasReferences.\r\n\r\nYes, exposing this as a private API on `RuntimeHelpers` for frozen objects serializer should work. It feels like a better place for it than JitHelpers.",
                                           "updatedAt":  "2019-07-17T08:28:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDQzMzEzNw==",
                                           "createdAt":  "2020-03-26T13:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Following up [this conversation](https://twitter.com/MStrehovsky/status/1243100387843989504) with @MichalStrehovsky, it\u0027d be nice if we also had an API just like [`GetArrayDataReference`](https://github.com/dotnet/runtime/blob/8cc28d7ee63ae6f07dd9a37b1b8a935be565076e/src/coreclr/src/System.Private.CoreLib/src/System/Runtime/InteropServices/MemoryMarshal.CoreCLR.cs#L24), but for 2D arrays. I mean, ideally it\u0027d be nice to have a built-in way to do that for ND arrays in general, but having that API for at least 2D arrays would be very useful 👍\r\n\r\nI know multidimensional arrays in general are not used that often, but I do think they could use some more love from the new APIs (`Span\u003cT\u003e` and `Memory\u003cT\u003e` in particular).\r\n\r\nPartially related: it\u0027d be nice if `MemoryExtensions` also had an [`AsSpan`](https://github.com/dotnet/runtime/blob/991011be71703d33724bb038df7cad2bc6e4bb79/src/libraries/System.Private.CoreLib/src/System/MemoryExtensions.cs#L29) API for 2D arrays. At least that can be worked around already by using [`MemoryMarshal.CreateSpan(ref T, int)`](https://github.com/dotnet/runtime/blob/991011be71703d33724bb038df7cad2bc6e4bb79/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/MemoryMarshal.cs#L223), but having a built-in API to achieve the same would make it easier to do for developers not familiar with that class.\r\n\r\nI can create issues for these various points, but I thought quickly running this by you guys to get some early feedback could be useful to avoid creating many (potentially unnecessary) issues 😄",
                                           "updatedAt":  "2020-03-26T13:32:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjU1MjI1NA==",
                                           "createdAt":  "2020-07-10T08:22:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BreyerW",
                                           "body":  "Just wanted to make sure this wont work with `struct` s at least not in-place correct? Im quite interested in reflection free field acessor but it seems with current impl of GetRawData reflection will be still necesssary when mutating struct in-place right?\r\n\r\nOr do you expect some trick/api/pattern to work well in this specific case when mutating struct in-place-like?",
                                           "updatedAt":  "2020-07-10T08:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjU4NjcwMA==",
                                           "createdAt":  "2020-07-10T09:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Or do you expect some trick/api/pattern to work well in this specific case when mutating struct in-place-like?\r\n\r\nIf you want to modify struct in-place, there\u0027s `TypedReference.MakeTypedReference` that allows you to pass an object and `FieldInfo`s that specify a \"path\" to a field. Once you have a `TypedReference`, you would do `__refvalue(myRef, X) = value;` to set it (X is the type of the field, and value is the value to assign. `__refvalue` is an undocumented C# keyword to manipulated` TypedReference`.",
                                           "updatedAt":  "2020-07-10T09:41:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjYwNjMyMA==",
                                           "createdAt":  "2020-07-10T10:31:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BreyerW",
                                           "body":  "@MichalStrehovsky  according to documentation on `Typed` it wont work with non-primitive structs eg any struct that contain array or reference type in general at least if i understand docu correctly. We are still screwed in such case right?\r\n\r\nSetting that aside i wonder if it would be possible to introduce an overload like `public static ref byte GetRawData\u003cT\u003e(ref T object) where T: struct` or something similar to make it smoother to work with struct (it could use typedreference under the hood maybe? But then `unmanaged` constraint would likely be required and that wouldnt cover 100% cases)",
                                           "updatedAt":  "2020-07-10T10:40:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTc3NjQ4Mw==",
                                           "createdAt":  "2020-07-29T16:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Given the timeline for 5.0 and the state of this issue, I don\u0027t see it making in.  Moving to 6.0.",
                                           "updatedAt":  "2020-07-29T16:45:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzAyMDExNA==",
                                           "createdAt":  "2020-11-24T14:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Closing; assuming https://github.com/dotnet/runtime/issues/45152 supersedes this.",
                                           "updatedAt":  "2020-11-24T14:46:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qPrsN",
                                           "createdAt":  "2023-10-27T08:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Reopening per https://github.com/dotnet/runtime/issues/45152#issuecomment-1781439989.",
                                           "updatedAt":  "2023-10-27T08:16:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qRiL8",
                                           "createdAt":  "2023-10-27T14:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The suggestion at https://github.com/dotnet/runtime/issues/45152#issuecomment-1779969381 also had a way to return an object. Assuming we want to do that with this PR, I suggest we\u0027ll also want to:\r\n- Add a Type parameter to handle raw (unboxed) value types and possibly strings\\arrays.\r\n- Add to the Unsafe class instead of RuntimeHelpers.\r\n- Might as well add the generic overload.\r\n```diff\r\nnamespace System.Runtime.CompilerServices;\r\npublic class Unsafe\r\n{\r\n+    public static object? GetObject(Type type, ref byte reference, nuint offset = 0);\r\n+    public static T? GetObject\u003cT\u003e(ref byte reference, nuint offset = 0);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2023-10-27T14:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qRj4_",
                                           "createdAt":  "2023-10-27T14:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e The suggestion at [#45152 (comment)](https://github.com/dotnet/runtime/issues/45152#issuecomment-1779969381) also had a way to return an object. Assuming we want to do that with this PR, I suggest we\u0027ll also want to:\r\n\r\nI don\u0027t know what\u0027s the use case for such API - do we have a use for something like this in CoreLib? We certainly have uses for `GetRawData`. I don\u0027t know a place where we\u0027d do inverse. Unless there\u0027s a good use case, I\u0027d not muddy this proposal with that.",
                                           "updatedAt":  "2023-10-27T14:12:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qRk9R",
                                           "createdAt":  "2023-10-27T14:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "A reference implementation of a `GetObject()` exists in [TypedReference ](https://github.com/dotnet/runtime/blob/2dc7c31b6b1ef1ebe5c3914aa4a03b8348a12873/src/coreclr/System.Private.CoreLib/src/System/TypedReference.CoreCLR.cs#L19) today.",
                                           "updatedAt":  "2023-10-27T14:15:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qRtGT",
                                           "createdAt":  "2023-10-27T14:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e A reference implementation of a `GetObject()` exists in [TypedReference ](https://github.com/dotnet/runtime/blob/2dc7c31b6b1ef1ebe5c3914aa4a03b8348a12873/src/coreclr/System.Private.CoreLib/src/System/TypedReference.CoreCLR.cs#L19) today.\r\n\r\nLooking at this again, https://github.com/dotnet/runtime/issues/45152#issuecomment-1779969381 and https://github.com/dotnet/runtime/issues/28001#issuecomment-1782981372 each propose a very different API.\r\n\r\nHow does https://github.com/dotnet/runtime/issues/28001#issuecomment-1782981372 differ from `Unsafe.As`? Is there a difference between these two?\r\n\r\n```csharp\r\nFoo x = Unsafe.GetObject\u003cFoo\u003e(ref myRef, 123);\r\n\r\nFoo x = Unsafe.As\u003cbyte, Foo\u003e(ref Unsafe.AddByteOffset(ref myRef, 123));\r\n```",
                                           "updatedAt":  "2023-10-27T14:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_utJW",
                                           "createdAt":  "2025-08-23T10:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfZAIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2025-08-23T21:07:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "+1 to this proposal. We could use this API to improve the perf of all our CCW vtables in CsWinRT 3.0 for all boxed enum types (see use case example mentioned in #118989). I see this one is tagged as `area:system-reflection`, is there anyone from that area that would be willing to help bring this to API review? Is the proposal fine as is, or are there any concerns with the proposed shape before we mark this as ready for review? Would be nice to get this into .NET 11 🙂",
                                           "updatedAt":  "2025-08-23T10:37:56Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "Proposal: RuntimeHelpers.GetRawData",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28033",
        "createdAt":  "2018-11-30T14:45:04Z",
        "number":  28033,
        "author":  "jbogard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBQscdw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "revengineering",
                                            "createdAt":  "2018-11-30T18:32:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2018-11-30T19:43:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khalidabuhakmeh",
                                            "createdAt":  "2018-11-30T20:41:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khellang",
                                            "createdAt":  "2018-12-02T00:39:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2018-12-02T10:17:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dzmitry-lahoda",
                                            "createdAt":  "2018-12-13T14:23:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dadhi",
                                            "createdAt":  "2018-12-14T16:49:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cocowalla",
                                            "createdAt":  "2018-12-15T08:02:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vermorel",
                                            "createdAt":  "2019-02-13T21:58:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joshfree",
                                            "createdAt":  "2019-03-06T23:37:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tilyupo",
                                            "createdAt":  "2019-12-23T23:06:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jskeet",
                                            "createdAt":  "2020-03-05T14:04:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-03-10T12:08:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dotnetjunkie",
                                            "createdAt":  "2020-07-09T20:47:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "damiensawyer",
                                            "createdAt":  "2020-07-13T13:03:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sixlettervariables",
                                            "createdAt":  "2020-07-17T23:38:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nnnvvvcv",
                                            "createdAt":  "2020-07-22T12:48:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dquist",
                                            "createdAt":  "2020-07-28T15:40:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "poke",
                                            "createdAt":  "2020-08-02T13:57:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VolkmarR",
                                            "createdAt":  "2020-08-13T16:01:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kindermannhubert",
                                            "createdAt":  "2020-08-13T18:57:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rikbosch",
                                            "createdAt":  "2020-08-13T21:59:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hhalim",
                                            "createdAt":  "2020-08-13T22:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gabrielsadaka",
                                            "createdAt":  "2020-08-15T00:11:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huysentruitw",
                                            "createdAt":  "2020-08-15T06:27:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2020-08-15T20:48:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmezach",
                                            "createdAt":  "2020-08-25T14:38:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "schneidenbach",
                                            "createdAt":  "2020-08-25T14:40:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CheloXL",
                                            "createdAt":  "2020-08-25T14:42:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mviegas",
                                            "createdAt":  "2020-08-25T14:46:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "drauch",
                                            "createdAt":  "2020-08-25T15:21:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ankitvijay",
                                            "createdAt":  "2020-08-25T15:25:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dario-l",
                                            "createdAt":  "2020-08-25T21:04:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jposert",
                                            "createdAt":  "2020-08-25T21:19:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Arasz",
                                            "createdAt":  "2020-08-26T08:32:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rookian",
                                            "createdAt":  "2020-08-26T12:12:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pwhe23",
                                            "createdAt":  "2020-08-26T16:38:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bwegman",
                                            "createdAt":  "2020-08-26T20:15:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "circleupx",
                                            "createdAt":  "2020-08-27T22:19:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raminmjj",
                                            "createdAt":  "2020-08-29T18:08:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "forrestab",
                                            "createdAt":  "2020-08-31T13:28:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hhalim3555",
                                            "createdAt":  "2020-09-01T17:45:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chgl",
                                            "createdAt":  "2020-09-02T07:49:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tompazourek",
                                            "createdAt":  "2020-09-02T14:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vmamore",
                                            "createdAt":  "2020-09-03T22:53:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patterson-philip",
                                            "createdAt":  "2020-09-06T14:06:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarkusEischeid",
                                            "createdAt":  "2020-09-09T14:06:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jgilm",
                                            "createdAt":  "2020-09-10T01:31:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryangribble",
                                            "createdAt":  "2020-09-10T03:59:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexBar",
                                            "createdAt":  "2020-09-17T10:25:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ikendiken",
                                            "createdAt":  "2020-10-05T14:19:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucaswalter",
                                            "createdAt":  "2020-10-05T22:13:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "garyng",
                                            "createdAt":  "2020-10-06T05:38:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hellfirehd",
                                            "createdAt":  "2020-10-07T21:10:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rdadkins",
                                            "createdAt":  "2020-10-08T16:23:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanaguilario",
                                            "createdAt":  "2020-10-09T18:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anielsen",
                                            "createdAt":  "2020-10-14T09:44:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GFoley83",
                                            "createdAt":  "2020-10-19T19:32:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zHaytam",
                                            "createdAt":  "2020-10-22T12:54:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lsancho",
                                            "createdAt":  "2020-10-24T19:28:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StevenTCramer",
                                            "createdAt":  "2020-10-28T05:08:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gschuager",
                                            "createdAt":  "2020-10-31T15:23:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "randygeyer",
                                            "createdAt":  "2020-11-05T06:43:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mario-mestrovic",
                                            "createdAt":  "2020-11-23T12:49:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevo-knievo",
                                            "createdAt":  "2021-01-03T02:18:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LutsenkoVlad",
                                            "createdAt":  "2021-01-05T07:07:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CleytonGoncalves",
                                            "createdAt":  "2021-01-22T14:31:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tarasverq",
                                            "createdAt":  "2021-01-29T11:18:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lawrencek76",
                                            "createdAt":  "2021-02-20T02:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "takato1314",
                                            "createdAt":  "2021-02-23T14:02:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "agc93",
                                            "createdAt":  "2021-03-25T13:52:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gkruszewski",
                                            "createdAt":  "2021-04-09T18:21:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "algel",
                                            "createdAt":  "2021-04-09T19:08:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dradovic",
                                            "createdAt":  "2021-04-21T05:05:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KashMoneyMillionaire",
                                            "createdAt":  "2021-04-26T16:13:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ronbrogan",
                                            "createdAt":  "2021-05-03T04:18:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "enkelmedia",
                                            "createdAt":  "2021-07-12T23:35:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CarlosHAraujo",
                                            "createdAt":  "2021-09-30T20:32:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilFusion",
                                            "createdAt":  "2021-11-24T08:48:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Weldryn",
                                            "createdAt":  "2021-12-15T18:01:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OculiViridi",
                                            "createdAt":  "2022-04-06T09:40:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teneko",
                                            "createdAt":  "2022-04-14T04:32:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lbargaoanu",
                                            "createdAt":  "2022-06-08T15:47:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jbogard",
                                            "createdAt":  "2022-06-09T21:05:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YoussefSell",
                                            "createdAt":  "2022-06-15T20:48:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CutieDaisy",
                                            "createdAt":  "2022-06-16T09:01:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "henriksen",
                                            "createdAt":  "2022-10-27T21:03:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hangy",
                                            "createdAt":  "2022-10-27T21:49:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lvermeulen",
                                            "createdAt":  "2022-10-28T15:56:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-10-29T12:14:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "U7nk",
                                            "createdAt":  "2022-11-08T20:16:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmednfwela",
                                            "createdAt":  "2022-11-22T18:43:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ScarletKuro",
                                            "createdAt":  "2022-12-02T17:54:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aldrashan",
                                            "createdAt":  "2023-01-25T12:00:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pkudrel",
                                            "createdAt":  "2023-01-26T03:56:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anderly",
                                            "createdAt":  "2023-03-01T20:31:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uhfath",
                                            "createdAt":  "2023-04-18T13:55:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2023-05-02T23:33:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Eneuman",
                                            "createdAt":  "2023-05-12T13:30:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahmoudsalahmis",
                                            "createdAt":  "2023-08-30T08:26:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zzort",
                                            "createdAt":  "2023-09-18T18:41:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inkysquid",
                                            "createdAt":  "2023-09-20T13:36:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2023-10-07T04:42:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:18:39Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T11:40:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pyth0ff",
                                            "createdAt":  "2023-11-20T10:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Epicguru",
                                            "createdAt":  "2023-12-22T11:51:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2024-04-23T05:37:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quixoticaxis",
                                            "createdAt":  "2024-05-08T12:58:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vas6ili",
                                            "createdAt":  "2024-05-14T14:11:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ROMYIM",
                                            "createdAt":  "2024-05-31T02:13:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Noctree",
                                            "createdAt":  "2024-07-13T15:58:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-10-14T22:02:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Blitheness",
                                            "createdAt":  "2024-11-11T17:14:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koniecdev",
                                            "createdAt":  "2024-11-18T20:38:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meinsiedler",
                                            "createdAt":  "2024-12-19T06:24:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "feberhard",
                                            "createdAt":  "2024-12-19T07:47:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-01-28T17:12:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GabrielEquusoftware",
                                            "createdAt":  "2025-03-04T20:44:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2025-03-22T14:06:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doesicool",
                                            "createdAt":  "2025-04-02T07:29:35Z"
                                        }
                                    ],
                          "totalCount":  121
                      },
        "updatedAt":  "2024-08-29T11:22:50Z",
        "body":  "## Background and Motivation\r\n\r\nToday, the only way at runtime to determine if a generic type definition can successfully close based on a set of generic parameters is to call `Type.MakeGenericType` and catch any exceptions:\r\n\r\n```csharp\r\nvar genericTypeDefinition = typeof(List\u003c\u003e);\r\nType closedType = null;\r\ntry {\r\n    closedType = genericTypeDefinition.MakeGenericType(typeof(int));\r\n} catch (ArgumentException) { }\r\nbool canClose = closedType == null;\r\n```\r\n\r\nIn libraries that use open generic types heavily (such as DI containers), either the logic for determining whether or not an open generic type *can* be closed is duplicated, or this exception is caught. Many times, the libraries will do both - cover the basic cases but still rely on exceptions.\r\n\r\nThis is especially useful in generic constraints, where I have a collection of open generic types, and I only want to resolve the closed types that satisfy the generic constraint at runtime.\r\n\r\n## Proposed API\r\n\r\nExpose an API to check if a given set of types can successfully satisfy the generic constraints of an open generic type:\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public abstract class Type \r\n    {\r\n+       public virtual bool SatisfiesGenericConstraints(params Type[] typeArguments);\r\n    }\r\n```\r\n\r\nOr can check a specific generic parameter:\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public abstract class Type \r\n    {\r\n+       public virtual bool SatisfiesConstraints(Type parameter);\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\nSimple example:\r\n\r\n```csharp\r\nclass MyType\u003cT\u003e where T : class\r\n{\r\n}\r\n```\r\n\r\n```csharp\r\ntypeof(MyType\u003c\u003e).GetGenericArguments()[0].SatisfiesConstraints(typeof(int)) // This should be false\r\ntypeof(MyType\u003c\u003e).SatisfiesGenericConstraints(typeof(int)) // This should be false.\r\n```\r\n\r\n\r\n## Risks\r\n\r\nThis API is not exposed directly in the CLR.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiiA3Yg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzI1NzA0NQ==",
                                           "createdAt":  "2018-11-30T16:22:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Moved the API proposal to CoreFX (https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md)",
                                           "updatedAt":  "2018-11-30T16:22:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDkxNTgzNA==",
                                           "createdAt":  "2020-03-04T22:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Can you provide details on the scenario where you don\u0027t know if MakeGenericType will succeed? Normally when calling that API you know the generic arguments.\r\n",
                                           "updatedAt":  "2020-03-04T22:59:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTI0MzA2OQ==",
                                           "createdAt":  "2020-03-05T13:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbogard",
                                           "body":  "@steveharter literally every single dependency injection container you look at won\u0027t know those generic arguments until resolution time, so *all* of them call `MakeGenericType` in a try-catch block. The only one that doesn\u0027t is the MS Ext DI container, and it will allow an unhandled runtime exception, blowing up the application.\r\n\r\nI have a PR to fix this behavior: https://github.com/dotnet/extensions/pull/536 but obviously that is not ideal, I would rather use the TryXyz behavior.\r\n\r\nSome DI containers try to reverse engineer the constraint check, but as you can imagine, it\u0027s horribly ugly and error-prone. So the @jskeet approved method is to [call `MakeGenericType` and catch the exception](https://stackoverflow.com/questions/4864496/checking-if-an-object-meets-a-generic-parameter-constraint/4864565#4864565).",
                                           "updatedAt":  "2020-03-05T13:59:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTM4MDE1OA==",
                                           "createdAt":  "2020-03-05T18:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "From the runtime point of view, trying to create random generic instantiations without knowing that they are valid is a bad pattern.\r\n \r\nNote that the fact `MakeGenericType` happens to succeed does not guarantee that the instantiation is valid. For example, `Vector\u003cT\u003e` instantiations are valid for certain `T`s only that is not reflected in the type constrains; or the C# `unmanaged` constrain is not checked by the runtime at all.\r\n\r\nI think that this issue can be closed. The DI systems that would like to use this pattern can keep using try / catch.",
                                           "updatedAt":  "2020-04-26T05:34:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTM2MDUxMQ==",
                                           "createdAt":  "2020-06-17T13:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnetjunkie",
                                           "body":  "@jkotas \r\n\r\n\u003e From the runtime point of view, trying to create random generic instantiations without knowing that they are valid is a bad pattern.\r\n\r\nAs @jbogard already mentioned, for DI Containers it is very common to build generic types. [Simple Injector](https://simpleinjector.org) for instance applies decorators conditionally and filters collections based on generic type constraints. And generic type constrains can become very, very complex, but they can do so because of valid reasons.\r\n\r\n\u003e The DI systems that would like to use this pattern can keep using try / catch.\r\n\r\nI would argue against this. The lack of a `Type.TryMakeGenericType` forces DI libraries to swallow exceptions. Swallowing exceptions still causes developers to be prompted with an exception window in the Visual Studio debugger, because of the default VS settings. This leads to confusing situations, because its not always clear that the exception can be ignored, and it is a productivity killer for the debugger to break in the middle of a debugging session.\r\n\r\nTo prevent getting these first-chance exceptions, Simple Injector currently tries to do the complete analysis of generic type constraints in order to prevent developers from getting a popup they can ignore. This, however, causes a lot of complexity, because, as I already stated, generic type constraints can become extremely complex.\r\n\r\nBut Simple Injector is by far the only library that does this. All DI Containers have this problem, and MS.DI will likely get this problem in the future when it becomes more mature. And there are likely other types of libraries that apply this kind of filtering based on generic type constraints. In other words, the addition of a `Type.TryMakeGenericType` is highly appreciated.\r\n",
                                           "updatedAt":  "2020-06-17T13:04:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTM3NTkwMw==",
                                           "createdAt":  "2020-06-17T13:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0xQTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "U7nk",
                                                                               "createdAt":  "2023-01-25T07:54:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  Swallowing exceptions still causes developers to be prompted with an exception window in the Visual Studio debugger\r\n\r\nI do not believe that it is the case. The default setting for Visual Studio debugger is to continue on exceptions (the exception gets printed into debug output window).\r\n\r\nFor reference: https://github.com/dotnet/runtime/issues/21785 has a long discussion on merits of adding Try variants for existing APIs.",
                                           "updatedAt":  "2020-06-17T13:32:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTM5MTk1Mw==",
                                           "createdAt":  "2020-06-17T14:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMgy1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damiensawyer",
                                                                               "createdAt":  "2020-07-13T13:09:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nnnvvvcv",
                                                                               "createdAt":  "2020-07-22T12:47:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "poke",
                                                                               "createdAt":  "2020-08-02T14:58:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ikendiken",
                                                                               "createdAt":  "2020-10-05T14:23:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CleytonGoncalves",
                                                                               "createdAt":  "2021-01-22T14:37:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andyblack19",
                                                                               "createdAt":  "2021-04-08T09:45:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "U7nk",
                                                                               "createdAt":  "2022-11-08T20:15:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benjaminsampica",
                                                                               "createdAt":  "2022-12-07T03:45:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joren-Thijs-KasparSolutions",
                                                                               "createdAt":  "2023-07-10T07:41:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "inkysquid",
                                                                               "createdAt":  "2023-09-20T13:41:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doesicool",
                                                                               "createdAt":  "2025-04-02T08:04:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "dotnetjunkie",
                                           "body":  "I certainly do understand the consequences of having Try* APIs, which has its downsides. But let\u0027s take a step back and look at what\u0027s actually requested here, where a `TryMakeGenericType` is just one of the solutions.\r\n\r\nThe actual problem is that we want to be able to verify whether the supplied types match a generic type\u0027s generic type constraints. Whether this is done using `Type.TryMakeGenericType`, `Type.CanMakeGenericType`, `GenericTypeConstraintVerifier.VerifyTypeConstraintsFor`, or anything else, is IMO not that relevant. We want to be able to reliably knowing up front whether we can safely call `Type.MakeGenericType`, without it throwing because of type constraint mismatches. You\u0027ve got carte blanche in designing that API ;-)",
                                           "updatedAt":  "2020-07-08T10:16:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzY3MzY3Mw==",
                                           "createdAt":  "2020-07-03T20:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seesharper",
                                           "body":  "+1",
                                           "updatedAt":  "2020-07-03T20:46:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE0NTYzOA==",
                                           "createdAt":  "2020-07-07T21:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJ6RwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbogard",
                                                                               "createdAt":  "2020-07-09T20:08:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We need an actual API proposal in order for this to get approved. Can @jbogard or other propose the APIs?\r\n\r\nHowever, the window for making API reviews is essentially closed for 5.0, so moving to Future.\r\n",
                                           "updatedAt":  "2020-07-07T21:29:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjMzNzM1MA==",
                                           "createdAt":  "2020-07-09T20:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbogard",
                                           "body":  "@steveharter updated the original comment.",
                                           "updatedAt":  "2020-07-09T20:33:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDI4Nzg5Ng==",
                                           "createdAt":  "2020-08-14T21:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think we want the alternative proposal:\r\n\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public abstract class Type {\r\n        public virtual Type MakeGenericType(params Type[] typeArguments);\r\n+        public virtual bool CanMakeGenericType(params Type[] typeArguments);\r\n     }\r\n```\r\n\r\nI can take this to API review.\r\n",
                                           "updatedAt":  "2020-08-14T21:54:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM1NTM3MQ==",
                                           "createdAt":  "2020-08-15T06:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMg0Vw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2020-08-15T07:03:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2020-08-18T21:12:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doesicool",
                                                                               "createdAt":  "2025-04-02T08:06:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I assume that this API is meant to just check the generic constraints. I would call it SatisfiesConstraints to make it clear what it does.\r\n\r\nThere is a parallel `MethodInfo.MakeGenericMethod` that should get symmetric treatment.\r\n\r\nThe implementation of this method is going to do `foreach (var parameter in GetGenericArguments()) { if (!parameter.SatisfiesConstraints(...) return false; }`. Would it make sense to have `SatisfiesConstraints` on the generic argument instead? It would allow you to figure which generic argument is not satisfying the constraints.",
                                           "updatedAt":  "2020-08-15T06:10:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM1Nzg1Mg==",
                                           "createdAt":  "2020-08-15T06:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huysentruitw",
                                           "body":  "IMO `SatisfiesConstraints` does not make it more clear, unless you\u0027d call it `SatisfiesGenericTypeConstraints`. I think from the API consumer side, the CanMakeXyz that takes the same parameters as the MakeXyz would be more clear.",
                                           "updatedAt":  "2020-08-15T06:38:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM1ODYwMw==",
                                           "createdAt":  "2020-08-15T06:47:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCv32ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smarts",
                                                                               "createdAt":  "2022-11-19T00:37:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "@jkotas If you\u0027re suggesting the usage to be e.g. `typeof(List\u003c\u003e).SatisfiesConstraints(typeof(int))`, then I think that\u0027s more confusing. I would initially read it as the nonsensical \"Does `List\u003c\u003e` satisfy the `int` constraint?\" On the other hand, I think `CanMakeGenericType` is more understandable. Specifically, I would read `typeof(List\u003c\u003e).CanMakeGenericType(typeof(int))` as \"Can `List\u003c\u003e` make generic type using `int`?\"\r\n\r\nAlso, `CanMakeGenericType` clearly indicates it\u0027s a companion API to `MakeGenericType`, `SatisfiesConstraints` does not make that association obvious.",
                                           "updatedAt":  "2020-08-15T06:47:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM1OTA5OA==",
                                           "createdAt":  "2020-08-15T06:53:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`MakeGenericType` can fail for number of reasons. Do you expect `CanMakeGenericType` to cover all reasons why it can fail, or just the constraints?",
                                           "updatedAt":  "2020-08-15T06:53:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM2MDEzNg==",
                                           "createdAt":  "2020-08-15T07:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huysentruitw",
                                           "body":  "From the CanMakeXyz perspective, it should return false for any failure reason. If that is what we want in the way the DI container will use it, is another question indeed.",
                                           "updatedAt":  "2020-08-15T07:04:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDM2Mjc0Mg==",
                                           "createdAt":  "2020-08-15T07:33:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODI7TtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huysentruitw",
                                                                               "createdAt":  "2020-08-15T07:37:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "poke",
                                                                               "createdAt":  "2020-08-15T10:27:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dquist",
                                                                               "createdAt":  "2020-08-15T12:14:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tompazourek",
                                                                               "createdAt":  "2020-08-15T18:55:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbogard",
                                                                               "createdAt":  "2020-08-24T23:37:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acraigbray",
                                                                               "createdAt":  "2020-08-26T18:08:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lsancho",
                                                                               "createdAt":  "2020-10-24T19:31:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gkruszewski",
                                                                               "createdAt":  "2021-04-09T18:26:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Weldryn",
                                                                               "createdAt":  "2021-12-15T18:01:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2023-08-25T20:01:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jerone",
                                                                               "createdAt":  "2023-09-12T12:02:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-10-07T04:44:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I agree with @jkotas that we really only care about constraints. For example, another reason it can fail today is for generic arity mismatches (we don\u0027t care as much about that).\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public abstract class Type \r\n    {\r\n+       public virtual bool SatisfiesGenericConstraints(params Type[] typeArguments);\r\n    }\r\n```\r\n\r\nI do think we want something that\u0027s simple to use so something like this would be preferred. The other API we could consider adding is the one that works on generic parameters:\r\n\r\n\u003e The implementation of this method is going to do foreach (var parameter in GetGenericArguments()) { if (!parameter.SatisfiesConstraints(...) return false; }. Would it make sense to have SatisfiesConstraints on the generic argument instead? It would allow you to figure which generic argument is not satisfying the constraints.\r\n\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public abstract class Type \r\n    {\r\n+       public virtual bool SatisfiesConstraints(Type parameter);\r\n    }\r\n```\r\n\r\nExample:\r\n\r\n```C#\r\nclass MyType\u003cT\u003e where T : class\r\n{\r\n}\r\n```\r\n\r\n```C#\r\ntypeof(MyType\u003c\u003e).GetGenericArguments()[0].SatisfiesConstraints(typeof(int)) // This should be false\r\ntypeof(MyType\u003c\u003e).SatisfiesGenericConstraints(typeof(int)) // This should be false.\r\n```",
                                           "updatedAt":  "2020-08-15T07:33:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NHxAM",
                                           "createdAt":  "2022-10-27T18:00:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@jbogard does the API proposal from @davidfowl completely address your scenario? (not to throw due to generic constraints)\r\n\r\nIf so, please update the main description to the proposal and we\u0027ll mark it \"ready for review\" if it looks good. Thanks",
                                           "updatedAt":  "2022-10-27T18:00:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NHxKD",
                                           "createdAt":  "2022-10-27T18:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-10-27T18:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NHzdH",
                                           "createdAt":  "2022-10-27T18:10:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbogard",
                                           "body":  "Yep it does, thanks!",
                                           "updatedAt":  "2022-10-27T18:10:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wZg08",
                                           "createdAt":  "2024-01-10T21:08:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMg8kQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "StevenTCramer",
                                                                               "createdAt":  "2024-01-29T16:39:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StevenTCramer",
                                                                               "createdAt":  "2024-01-29T16:39:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zachrybaker",
                                                                               "createdAt":  "2024-09-06T17:28:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meinsiedler",
                                                                               "createdAt":  "2024-12-19T07:08:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "u7pro",
                                                                               "createdAt":  "2025-02-19T10:44:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GabrielEquusoftware",
                                                                               "createdAt":  "2025-03-04T20:44:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doesicool",
                                                                               "createdAt":  "2025-04-02T08:20:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "KennethHoff",
                                           "body":  "@steveharter are we missing anything before marking it as \"ready for review\", or has this simply been forgotten about? @jbogard has approved his part",
                                           "updatedAt":  "2024-01-10T21:08:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KIDdi",
                                           "createdAt":  "2024-08-29T11:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgLiKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2024-08-30T14:01:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zachrybaker",
                                                                               "createdAt":  "2024-09-06T17:28:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meinsiedler",
                                                                               "createdAt":  "2024-12-19T07:08:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GabrielEquusoftware",
                                                                               "createdAt":  "2025-03-04T20:44:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doesicool",
                                                                               "createdAt":  "2025-04-02T08:20:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarlosHAraujo",
                                                                               "createdAt":  "2025-08-29T16:10:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "aldrashan",
                                           "body":  "Any movement on this?",
                                           "updatedAt":  "2024-08-29T11:22:49Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Type.SatisfiesGenericConstraints proposal",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30886",
        "createdAt":  "2019-09-18T14:33:14Z",
        "number":  30886,
        "author":  "jonathanpeppers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:06Z",
        "body":  "I have a benchmark here: https://github.com/jonathanpeppers/Benchmarks/blob/7db49fb3d272c5b07deda166dd4f5a5112258bbe/Benchmarks/Cecil.cs#L90-L111\r\n\r\nAnd I am getting \"not so great\" results for `SR.MetadataLoadContext`:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.18362\r\nIntel Core i9-9900K CPU 3.60GHz, 1 CPU, 16 logical and 8 physical cores\r\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.8.4010.0\r\n  DefaultJob : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.8.4010.0\r\n\r\n\r\n                                Method |        Mean |      Error |     StdDev |      Median | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n-------------------------------------- |------------:|-----------:|-----------:|------------:|------------:|------------:|------------:|--------------------:|\r\n            System.Reflection.Metadata |    32.84 ms |  0.1200 ms |  0.1123 ms |    32.85 ms |   3000.0000 |     62.5000 |           - |            15.12 MB |\r\n                            Mono.Cecil |   351.81 ms |  7.1738 ms | 21.1522 ms |   339.38 ms |  16000.0000 |  12000.0000 |   4000.0000 |           103.57 MB |\r\n System.Reflection.MetadataLoadContext | 2,058.91 ms | 19.9863 ms | 18.6952 ms | 2,051.50 ms |  97000.0000 |  90000.0000 |   6000.0000 |           544.84 MB |\r\n```\r\n\r\nThe performance compared to using raw SRM or Mono.Cecil is drastically worse.\r\n\r\nI expected it to be somewhere in the middle of using SRM and Mono.Cecil. Is there something I\u0027m doing here that would explain the poor performance?\r\n\r\nThanks!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjO-apg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTUyMzk2MQ==",
                                           "createdAt":  "2020-08-10T18:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future due to scheduling + priority.",
                                           "updatedAt":  "2020-08-10T18:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iRJo6",
                                           "createdAt":  "2023-07-24T21:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9; we should at least perform some traces to see where the perf hit is; MLC does have extensive caching but perhaps there are temporary allocs that are being done based on the alloc numbers above.",
                                           "updatedAt":  "2023-07-24T21:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KrP-p",
                                           "createdAt":  "2024-09-03T13:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "If anyone looks into this in the future, I think it\u0027s specifically iterating over methods that is slow:\r\n\r\n* https://github.com/jonathanpeppers/Benchmarks/blob/7db49fb3d272c5b07deda166dd4f5a5112258bbe/Benchmarks/Cecil.cs#L105-L107\r\n\r\nSomeone else did a comparison, and MLC performs somewhere in between Mono.Cecil and SRM if you remove these lines in all benchmarks.",
                                           "updatedAt":  "2024-09-03T13:55:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M75qm",
                                           "createdAt":  "2024-09-20T19:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jpobst",
                                           "body":  "Indeed, resolving assemblies and iterating types has excellent performance, but digging any deeper into a `Type` tanks performance (`GetNestedTypes ()`, `GetConstructors ()`, `GetMethods ()`, etc.)\r\n\r\nModifying @jonathanpeppers test case to simply iterate type names and nothing else shows performance very close to `System.Relection.Metadata`, however iterating type names and nested type names performs ~100x worse:\r\n\r\n| Method                                        | Mean       | Error      | StdDev     | Gen0       | Gen1       | Gen2      | Allocated |\r\n|---------------------------------------------- |-----------:|-----------:|-----------:|-----------:|-----------:|----------:|----------:|\r\n| S.R.M - Types          |   5.026 ms |  0.0978 ms |  0.2418 ms |    39.0625 |          - |         - |   1.11 MB |\r\n| S.R.M - Types+Nested |   5.662 ms |  0.1092 ms |  0.1531 ms |    70.3125 |          - |         - |   1.81 MB |\r\n| S.R.MLC - Types                 |   7.273 ms |  0.1367 ms |  0.2358 ms |   140.6250 |   125.0000 |         - |   3.38 MB |\r\n| S.R.MLC - Types+Nested  | 674.997 ms | 13.3861 ms | 14.3229 ms | 16000.0000 | 15000.0000 | 3000.0000 | 324.81 MB |\r\n\r\nBenchmark code:\r\n```csharp\r\n[Benchmark (Description = \"MetadataLoadContext - Types\")]\r\npublic void SystemReflectionMetadataLoadContext ()\r\n{\r\n\tvar resolver = new SimpleResolver (assemblies);\r\n\tusing (var context = new MetadataLoadContext (resolver)) {\r\n\t\tforeach (var assemblyFile in assemblies) {\r\n\t\t\tvar assembly = context.LoadFromAssemblyPath (assemblyFile);\r\n\t\t\tforeach (var t in assembly.GetTypes ()) {\r\n\t\t\t\tvar name = t.Name;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n[Benchmark (Description = \"MetadataLoadContext - Types + Nested Types\")]\r\npublic void SystemReflectionMetadataLoadContext2 ()\r\n{\r\n\tvar resolver = new SimpleResolver (assemblies);\r\n\tusing (var context = new MetadataLoadContext (resolver)) {\r\n\t\tforeach (var assemblyFile in assemblies) {\r\n\t\t\tvar assembly = context.LoadFromAssemblyPath (assemblyFile);\r\n\t\t\tforeach (var t in assembly.GetTypes ()) {\r\n\t\t\t\tvar name = t.Name;\r\n\t\t\t\tforeach (var m in t.GetNestedTypes ()) {\r\n\t\t\t\t\tvar mname = m.Name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2024-09-20T19:46:31Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Reflection.MetadataLoadContext performance",
        "labels":  [
                       "investigate",
                       "area-System.Reflection",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31171",
        "createdAt":  "2019-10-15T13:21:28Z",
        "number":  31171,
        "author":  "TylerBrinkley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx6pHQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2019-10-15T13:33:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2019-11-15T12:06:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2020-05-12T20:59:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2020-12-15T10:24:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-08-13T07:20:15Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-10-21T21:10:14Z",
        "body":  "I\u0027m not sure why this hasn\u0027t been done as `Type` already has an `Equals(Type)` method but I\u0027d like `Type` to implement `IEquatable\u003cType\u003e` so I can use `Type` as a type argument where there\u0027s a generic type constraint of `IEquatable\u003cT\u003e` such as in [DictionarySlim](https://github.com/dotnet/corefxlab/blob/master/src/Microsoft.Experimental.Collections/Microsoft/Collections/Extensions/DictionarySlim.cs#L31).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIH3MEQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NTA4MDk0Nw==",
                                           "createdAt":  "2019-10-22T17:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=VQuFvX2k-HA\u0026t=0h41m27s)\n\nWhat about other types in the `MemberInfo` hierarchy?\r\n\r\n@steveharter what are you thoughts?",
                                           "updatedAt":  "2019-10-22T19:00:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NTExNTE1Mw==",
                                           "createdAt":  "2019-10-22T19:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TylerBrinkley",
                                           "body":  "Just from a cursory look at the other derived types of `MemberInfo`, e.g. `EventInfo`, `FieldInfo`, `MethodInfo`, `ConstructorInfo`, and `PropertyInfo`, none of those include an equivalent `Equals(T)` method just an override of `Equals(object)`.\r\n\r\nIs the concern that we might want to make `MemberInfo` implement `IEquatable\u003cMemberInfo\u003e`? Would that cause issues if we also made `Type` implement `IEquatable\u003cType\u003e`? If so I think we should prefer implementing the interface on `Type` as it\u0027s abundantly more common and the only derived type of `MemberInfo` that resides in the `System` namespace and as such should get preferential treatment.",
                                           "updatedAt":  "2019-10-22T19:24:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Make Type implement IEquatable\u003cType\u003e",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36682",
        "createdAt":  "2020-05-19T06:03:06Z",
        "number":  36682,
        "author":  "RustyDes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-21T20:35:06Z",
        "body":  "### Description\r\nI ran into a stack overflow due to an infinite recursion in TypeLoading as part of using MetadataLoadContext to reflect some assemblies.\r\n\r\n### Configuration\r\nThe app I am running is .net core 3.1 x64\r\n\r\n### Regression?\r\nI don\u0027t know.\r\n\r\n### Other information\r\nI run into this while running this line:\r\n    baseType.IsAssignableFrom(type);\r\nWhere both \"baseType\" and \"type\" come from enumerating types in assemblies returned from: MetadataLoadContext.LoadFromAssemblyPath()\r\n\r\n\r\nHere\u0027s the specific repeating callstack (with a few iterations):\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.**RoAssembly**.GetTypeCore(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, bool ignoreCase, out System.Exception e) Line 113\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.Ecma.EcmaModule.GetTypeCoreNoCache(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, out System.Exception e) Line 57\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.**RoModule**.GetTypeCore(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, bool ignoreCase, out System.Exception e) Line 113\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.RoAssembly.GetTypeCore(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, bool ignoreCase, out System.Exception e) Line 113\tC#\r\n\u003e\tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.Ecma.EcmaModule.GetTypeCoreNoCache(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, out System.Exception e) Line 57\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.RoModule.GetTypeCore(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, bool ignoreCase, out System.Exception e) Line 113\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.RoAssembly.GetTypeCore(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, bool ignoreCase, out System.Exception e) Line 113\tC#\r\n \tSystem.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading.Ecma.EcmaModule.GetTypeCoreNoCache(System.ReadOnlySpan\u003cbyte\u003e ns, System.ReadOnlySpan\u003cbyte\u003e name, out System.Exception e) Line 57\tC#\r\n\r\n\r\nNote: while 2 of the 3 locations are on line 113, they are in different file (mentioning to avoid confusion).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTLxaLw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDYxMzM4NQ==",
                                           "createdAt":  "2020-05-19T06:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RustyDes",
                                           "body":  "I should add... the same code I was running, I went over \u003e150 assemblies, each with multiple values for \"type\" in them, but this only repro with this one class, but it repro consistently for that class. \r\n\r\nI am not seeing anything particularly interesting about that class. It derives from System.Configuration.ConfigurationElement.",
                                           "updatedAt":  "2020-05-19T06:32:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDY5NzEzNA==",
                                           "createdAt":  "2020-05-19T09:17:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DevDrake",
                                           "body":  "I remembering having this kind of issue, but the cause was runtimes if i recalling it well.\r\n\r\nSo I believe you are having problem with types from two different runtimes. (for example the binary you are reflecting is build on .Net framework, and you try to check the type in the dotnetcore)\r\nUnfortunatelly the typeof(int) != typeof(int) in that case.\r\n\r\n",
                                           "updatedAt":  "2020-05-19T09:17:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDkyNjA4NA==",
                                           "createdAt":  "2020-05-19T16:16:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RustyDes",
                                           "body":  "@DevDrake, that seems plausible. That said, shouldn\u0027t this get detected at runtime and a relevant error be returned at that point rather that stack overflow?\r\n\r\nAdditionally do you know if there\u0027s a way to replace this:\r\n`new PathAssemblyResolver(Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\"));\r\n`\r\nWith something that loads the correct runtime for the specific assembly being loaded?\r\nAlong the line of:\r\n```\r\n  string fileToReflectOver = \"somepath\\somefile.dll\";\r\n  new PathAssemblyResolver(Directory.GetFiles(GetRuntimeDirectory(fileToReflectOVer));\r\n```\r\n\r\nOr did you mean that it\u0027s impossible to have a single process that can reflect over assemblies built against all of:\r\n  - .net core\r\n  - .net framework\r\n  - .net standard\r\nWhich would seem like a significant short coming.",
                                           "updatedAt":  "2020-05-19T16:20:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTM5MDcxMg==",
                                           "createdAt":  "2020-05-20T10:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DevDrake",
                                           "body":  "@RustyDes, The better exception would be great. however it is not as this is a bug - MetadataLoadContext allow you to load any framework assemblies and you are in control what are you doing with it. \r\nSaid this i think there should be a way to bridge types between framework, or at least a way to map base types from one framework to another (other than `typeof(atype).FullName == typeof(btype).FullName` ), and their values.\r\nAnother thing is the refletion API that half of the methods on Assembly from MLC throws.\r\nThe current state of MLC is immature imho.\r\n\r\nAs for providing assemblies to PathAssemblyResolver, no i have no idea how to do it better without digging it from references, nugets and registry or doing that just blindly.\r\n\r\nWith MLC you can reflect on assembly form any framework. but conflicting frameworks should probably be loaded from different instances of MLC. I haven\u0027t  try it myself but i see no issue. I am digging .net framework and .net standard that are compatible with the original binaries and it works (sometimes: https://github.com/dotnet/runtime/issues/36695)\r\n",
                                           "updatedAt":  "2020-05-20T10:31:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTM2MTI1Ng==",
                                           "createdAt":  "2020-06-29T20:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We need to determine the cost:benefit of detecting this condition and throwing an alternative (catchable) exception.",
                                           "updatedAt":  "2020-06-29T20:57:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk3MDA4Mg==",
                                           "createdAt":  "2020-08-11T14:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "In order to detect this case, we need a concise repro. @RustyDes is you have one please add it here.",
                                           "updatedAt":  "2020-08-11T14:09:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk3MDY2Mw==",
                                           "createdAt":  "2020-08-11T14:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Said this i think there should be a way to bridge types between framework, or at least a way to map base types from one framework.\r\n\r\n@DevDrake please create a new issue with scenarios for this.\r\n\r\nInternally, [the tests use a \"Project()\" method](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Reflection.MetadataLoadContext/tests/src/TestUtils/TestUtils.JittedRuntimes.cs#L11-L14). This or a similar API could be added.\r\n\r\n",
                                           "updatedAt":  "2020-08-11T14:10:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTk3MDk3Mw==",
                                           "createdAt":  "2020-08-11T14:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving the \"infinite recursion detection issue\" to Future based on schedule + priority.",
                                           "updatedAt":  "2020-08-11T14:11:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjA0NDEwMQ==",
                                           "createdAt":  "2020-08-27T16:08:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DevDrake",
                                           "body":  "#41450",
                                           "updatedAt":  "2020-08-27T16:08:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MvFov",
                                           "createdAt":  "2022-10-21T20:35:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Still a valid issue; keeping as \"future\" for now.",
                                           "updatedAt":  "2022-10-21T20:35:06Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Infinite recursion in System.Reflection.MetadataLoadContext.dll!System.Reflection.TypeLoading",
        "labels":  [
                       "bug",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41450",
        "createdAt":  "2020-08-27T16:07:27Z",
        "number":  41450,
        "author":  "DevDrake",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-05T17:00:02Z",
        "body":  "## Background and Motivation\r\n\r\nCurrently when using `MetadataLoadContext ` an dll we need to provide base(like `mscorlib`) that was used to compile it. When over different runtime dll we are taking types from that library and so the base types cannot be compared. To check if a type is e.g. `bool`, we need to compare the types by `FullName `or with another hack.\r\nThis causes that user types, are seen different and incompatible with each other, as they are using different runtime base types, even they are coded just the same on program and reflected dll.\r\n\r\nIt would be beneficial if we cold reflect on dll from others runtime automatically projecting the base types to the current runtime. \r\n\r\nA precursor for that request already have been implemented for testing purposes [here](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Reflection.MetadataLoadContext/tests/src/TestUtils/TestUtils.JittedRuntimes.cs#L11-L14). However the final solution should be enclosed within MLC setting to clearly state the intention and reflecting behavior.\r\n\r\nPeople are having [issues](https://github.com/dotnet/runtime/issues/36682#issuecomment-671970663) related to this when using MLC, when they code with old reflection in mind. \r\n\r\nThis should simplify the reflection when the runtime doesn\u0027t matter (e.g compatible .net standard dll). Also it could be used to create instantiation of projected class to the current runtime, but that is not the main motivation, rather future possibilities.\r\n\r\nApplication: Code Generating, Automated dll validation, etc.\r\n\r\n## Proposed API\r\n\r\nMetadataLoadContext(MetadataAssemblyResolver resolver, string coreAssemblyName = null, MetadataLoadContextBehavior behavior = MetadataLoadContextBehavior.NoProjection)\r\n\r\nenum MetadataLoadContextBehavior\r\n{\r\nNoProjection,\r\nProjectToCurrentRuntime\r\n}\r\n\r\n## Usage Examples\r\n\r\n`var mlc = new MetadataLoadContext (anResolver, default, MetadataLoadContextBehavior.ProjectToCurrentRuntime)`\r\n\r\n## Alternative Designs\r\n\r\n\r\n## Risks\r\n\r\nIn case the current runtime doesn\u0027t have an type that is expected to be projected, an clear exception should be thrown.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT7wrxg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4Mzk0OTEyNQ==",
                                           "createdAt":  "2020-08-31T18:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Thanks @DevDrake for creating this issue (based on past discussion).\r\n\r\nA `Project()` mechanism was left out of the initial MLC design since there was not a hard case for it yet. Currently the Project mechanism used by the MLC tests require an explicit Type to be specified.\r\n\r\nA `ProjectToCurrentRuntime` in the current suggestion is somewhat ambiguous IMO and could mean several things:\r\n1) Enable just core types (in mscorlib or whatever assembly contains the core Types).\r\n2) If MLC does not have a reference to a Type yet, attempt to determine if the Type\u0027s runtime Assembly is already loaded and use that, otherwise use the configured resolver.\r\n3) If MLC does not have a reference to a Type yet, attempt to load the Type\u0027s Assembly with the current runtime and use that, otherwise use the configured resolver.\r\n\r\nI\u0027m assuming option (1) here, but wondering if there is a desire for (2) or (3)?\r\n\r\nI believe all 3 options could be implemented today through a custom `MetadataAssemblyResolver`. I can provide a prototype of such a resolver depending on feedback.\r\n",
                                           "updatedAt":  "2020-08-31T18:24:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzgzNjYyNg==",
                                           "createdAt":  "2020-09-06T16:37:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DevDrake",
                                           "body":  "Thanks @steveharter for pointing that out.\r\n\r\nI was thinking of option (1). So we can project the base types to only program current running runtime.\r\nRegarding (3), I thought we would hit problems on Ro* classes. If you could provide the prototype I would try it out :) ",
                                           "updatedAt":  "2020-09-06T16:37:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PvCvG",
                                           "createdAt":  "2022-12-05T16:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future based on priority+schedule.\r\n\r\nThere have been various community-reported issues associated with this; basically, not knowing that core types in the current runtime are different than the equivalent types in MLC including issue https://github.com/dotnet/runtime/issues/36682. However, this issue won\u0027t necessarily address that directly, but would at least help find and compare the correct types.",
                                           "updatedAt":  "2022-12-05T16:59:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "MetadataLoadContext could project reflected assemblies to current runtime",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42858",
        "createdAt":  "2020-09-29T19:24:36Z",
        "number":  42858,
        "author":  "DaleStan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-19T21:42:36Z",
        "body":  "## Background and Motivation\r\n\r\nIn my use of `System.Reflection.DispatchProxy`, I often find that I want to add readonly fields or properties to my proxy implementation. The clean way to do this is to pass the desired values to the constructor, for example\r\n``` c#\r\nclass Proxy : DispatchProxy\r\n{\r\n    private readonly string _debugName;\r\n    public Proxy(string debugName) =\u003e _debugName = debugName;\r\n    // ...\r\n}\r\n```\r\n\r\nI cannot do this since DispatchProxy currently requires a public default constructor. I would like to relax this requirement to either \"exactly one public constructor\" or \"at least one public constructor\".\r\n\r\nIn this proposal, I have settled on \"at least one public constructor with at most one parameter\"; see the Alternative Designs section for more thoughts.\r\n\r\n## Proposed API\r\n\r\n```diff\r\n namespace System.Reflection\r\n {\r\n     public abstract class DispatchProxy\r\n     {\r\n+        public static T CreateWithParameter\u003cT, TProxy, TConstructorParameter\u003e(TConstructorParameter constructorParameter) where TProxy : DispatchProxy\r\n     }\r\n```\r\n\r\n## Usage Examples\r\n\r\nOne current use I have is interception of calls to `IDataReader`, where I want to allow arbitrary SQL queries (executed locally, on a SQLite database), but I also want to present the data in a useful fashion. The timestamps stored the table are milliseconds-since-midnight, which is useless for matching with \"it happened about 8:25 PM\" or for determining the time between events more than a few seconds apart, so I want to automatically convert them to hh:mm:ss.fff. With this new API, my interception class would be this:\r\n``` C#\r\ninternal class TimestampConvertingReader : DispatchProxy\r\n{\r\n    private static readonly MethodInfo _getString = typeof(IDataRecord).GetMethod(nameof(IDataRecord.GetString));\r\n    private static readonly MethodInfo _getFieldType = typeof(IDataRecord).GetMethod(nameof(IDataRecord.GetFieldType));\r\n\r\n    // Calls the new CreateWithParameter method\r\n    public static IDataReader Create(IDataReader dr) =\u003e CreateWithParameter\u003cIDataReader, TimestampConvertingReader, IDataReader\u003e(dr);\r\n\r\n    private readonly IDataReader _actualReader;\r\n\r\n    // Called by the new CreateWithParameter method, passing the dr parameter from Create.\r\n    public TimestampConvertingReader(IDataReader actualReader) =\u003e _actualReader = actualReader;\r\n\r\n    protected override object Invoke(MethodInfo targetMethod, object[] args)\r\n    {\r\n        if (targetMethod == _getFieldType \u0026\u0026 _actualReader.GetName((int)args[0]).EndsWith(\"TimeStamp\")) { return typeof(string); }\r\n        if (targetMethod == _getString \u0026\u0026 _actualReader.GetName((int)args[0]).EndsWith(\"TimeStamp\")) { return TimeSpan.FromMilliseconds(_actualReader.GetInt64((int)args[0])).ToString(@\"hh\\:mm\\:ss\\.fff\"); }\r\n        // ...\r\n        return targetMethod.Invoke(_actualReader, args);\r\n    }\r\n}\r\n```\r\n\r\nIf there are multiple constructors, `CreateWithParameter` would use the specialized type of `TConstructorParam` to select the one-parameter constructor to invoke.\r\n\r\n## Alternative Designs\r\n\r\n* No API change; developers simply use one of the currently available solutions:\r\n  * Use reflection to write to the readonly field(s) from the `TProxy.Create` method.\r\nUgly, especially for read-only auto-properties, but the best current option in a technical sense.\r\n  * Use one or more `[ThreadStatic]` fields to pass the parameters from the `TProxy.Create` method to the default constructor.\r\nNot quite as ugly, but a pit of failure. If you forget the `[ThreadStatic]` attribute, multi-threaded use could end up with splinched proxies (if there are multiple readonly fields) or two proxies with the same data.\r\n  * Set the fields using non-reflection code in the `TProxy.Create` method.\r\nThe most likely solution a developer would select, but this requires removing the readonly field modifier, and making any read-only auto-properties writable.\r\n* Name the new method `Create` instead of `CreateWithParameter`\r\nThis is a breaking change for anyone who currently calls `typeof(DispatchProxy).GetMethod(\"Create\")`.\r\n* Declare the new method as `CreateWithParameter\u003cT, TProxy\u003e(object constructorParameter)`\r\nThis follows the pattern set by `Thread.Start`, and removes the possibly-irritating third generic parameter, but limits the `TProxy` type to one single-parameter constructor.\r\n* Declare the new method as `CreateWithParameter\u003cT, TProxy\u003e(params object[] constructorParameters)`\r\nThis follows the pattern of `MethodInfo.Invoke`, but `MethodInfo.Invoke` already knows what method it is invoking, while `CreateWithParameter` would have to do overload resolution. The `TConstructorParameter` generic parameter can almost always be intuited by the compiler, but it cannot necessarily be intuited at runtime. If I try to call `CreateWithParameter\u003cInterface, Proxy\u003e(null);` and there are multiple single-parameter constructors, there\u0027s no way to specify which type of null I passed.\r\n* Declare the new method as `CreateWithParameter\u003cT, TProxy\u003e(object[] constructorParameters, Type[] constructorParameterTypes)`\r\nUsing a `Type[]` follows the pattern of `Type.GetConstructor`, and solves the previous issue, but is starting us down the path of passing six parameters, to match the five-parameter version of `GetConstructor`. This is one of the best alternative designs, especially if overload resolution is internally handled by `Type.GetConstructor`, but I\u0027m reluctant to request an API where I\u0027d always pass null for one or more parameters.\r\n* Declare the new method as `CreateWithParameter\u003cT, TProxy\u003e(object[] constructorParameters, ConstructorInfo constructor = null)`\r\nThis is a variation on the previous, where the caller is responsible for calling `Type.GetConstructor`, unless the constructor to be called is \u0027obvious\u0027. \u0027Obvious\u0027 can be defined in several ways, including \"it\u0027s never obvious\", \"the single public constructor\", \"the single public constructor that takes the specified number of parameters\", and \"the constructor that would be selected by the overload resolution in the the `params object[]` option\".\r\n* Declare additional new methods as `CreateWithParameters\u003cT, TProxy, TConstructorParameter1, TConstructorParameter2\u003e(TConstrucorParameter1 constructorParameter1, TConstructorParameter2 constructorParameter2)`, and so on.\r\nThis follows the pattern of `Action` and `Func`, but doesn\u0027t buy any additional behavior; if the types of the parameters are known at compile-time, a struct, record, or tuple can be created to pack all parameters into one object for passage through `CreateWithParameters`. It may also increase the effort required to do overload resolution.\r\n* Create a new static class for `CreateWithParameter`, instead of placing it in `DispatchProxy`.\r\nThis alleviates the remaining breaking change in the current proposal and previous alternatives. In this case I would also rename the method back to `Create`.\r\n* In addition to the previous, and in violation of the FxCop guidelines, `DispatchProxyCreator\u003cT, TProxy\u003e.Create\u003cTConstructorParameter\u003e(TConstructorParameter constructorParameter)`\r\nThis allows `TConstructorParameter` to be intuited by the compiler, but, as mentioned, violates FxCop\u0027s guidelines.\r\n\r\n## Risks\r\n\r\nThe proposed addition is still a breaking change for anyone who calls `typeof(DispatchProxy).GetMethods().Single()`. I don\u0027t know what sorts of Reflection breaks are acceptable, but I seem to have decided that it is acceptable to assume \"This class has only one method named `Create`; there will never be another one,\" but not acceptable to assume \"This class has only one public  method; there will never be another one.\"\r\n\r\nThe proposed addition requires (1a) additional time and memory when creating the additional constructors in `Create`, or (1b) additional memory for the creation of a second proxy type if the first was created using the existing default-constructor-only `Create`. In most cases, it also requires (2) additional time when creating a proxy object with `CreateWithParameters`, for runtime overload resolution.\r\n1a is a regression for existing programs, while 1b is poor behavior for new programs that use both `Create` and `CreateWithParameters`. I expect the regression to be minimal, and would tend to choose 1b over 1a, but I don\u0027t know how to measure this.\r\n2 is a general note that `CreateWithParameters` has to do more work per object than `Create`, and will be slower.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTJGDOw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTczNjQwNA==",
                                           "createdAt":  "2021-02-09T07:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@DaleStan why not just create derived class which provides the needed arg? Alternatively take the argument through the property instead?",
                                           "updatedAt":  "2021-02-09T07:36:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NjIxMTA1Nw==",
                                           "createdAt":  "2021-02-09T20:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaleStan",
                                           "body":  "@krwq I don\u0027t think I understand your question about creating a derived class.\r\nToday, when I use `DispatchProxy.Create`, I have to create a class derived from `DispatchProxy`, and that class has to have a public parameterless constructor. `DispatchProxy.Create` will call that constructor, no matter what else I do in the derived class.\r\nIf I create a class derived from the dynamically-generated type that `DispatchProxy.Create` returns, that removes the benefit of using `DispatchProxy`, plus the generated type\u0027s constructor takes an `Action\u003cobject\u003e` that isn\u0027t (and probably shouldn\u0027t be) documented.\r\n\r\nI do know I don\u0027t want to use a property, because then I can\u0027t store the property value in a readonly field, nor can I use an auto-implemented get-only or get/init property.",
                                           "updatedAt":  "2021-02-09T20:25:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NjU2MjA4MQ==",
                                           "createdAt":  "2021-02-10T09:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I meant to create derived class per usage, i.e.:\r\n\r\n```csharp\r\nclass FooProxy : Proxy\r\n{\r\n    public FooProxy() : base(\"foo\") {}\r\n}\r\n```\r\n",
                                           "updatedAt":  "2021-02-10T09:16:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODQwOTcwNQ==",
                                           "createdAt":  "2021-02-12T19:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaleStan",
                                           "body":  "In production code, I\u0027m passing the result of a SQL query, instead of a compile-time constant. I can do something like this:\r\n``` C#\r\npublic class Proxy : DispatchProxy\r\n{\r\n    private class ProxyHelper : Proxy\r\n    {\r\n        [ThreadStatic]\r\n        internal static new IDataReader _target;\r\n        public ProxyHelper() : base(_target) { }\r\n    }\r\n\r\n    private readonly IDataReader _target;\r\n    private Proxy(IDataReader target) =\u003e _target = target;\r\n\r\n    // Call to get a proxy for an IDataReader\r\n    public static Proxy Create(IDataReader target)\r\n    {\r\n        ProxyHelper._target = target;\r\n        return (Proxy)Create\u003cIDataReader, ProxyHelper\u003e();\r\n    }\r\n    // ...\r\n}\r\n```\r\nThis is a little better than the code I\u0027m using currently (the `Proxy` constructor is no longer public) but I was hoping to get rid of that `[ThreadStatic]` field entirely.",
                                           "updatedAt":  "2021-02-12T19:38:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48ET2p",
                                           "createdAt":  "2022-01-07T21:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0_fDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtheisen",
                                                                               "createdAt":  "2023-01-28T18:57:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "It is possible to wrap the `DispatchProxy.Create()` with your own static \"Create()\" method and set state on your proxy after it\u0027s created. Below is a sample that does this where the state is just the proxy\u0027s target instance. It is a general-use proxy (can work against any Type).\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eConsole app sample of wrapping DispatchProxy.Create()\u003c/summary\u003e\r\n\r\n```cs\r\n\r\nusing System.Reflection;\r\n\r\nISample proxy = MyProxy\u003cSampleClass, ISample\u003e.Create(new SampleClass());\r\nproxy.CallMe(\"Hello\");\r\n\r\nclass SampleClass\r\n{\r\n    public void CallMe(string s)\r\n    {\r\n        Console.WriteLine($\"Called CallMe with \u0027{s}\u0027\");\r\n    }\r\n}\r\n\r\ninterface ISample\r\n{\r\n    void CallMe(string s);\r\n}\r\n\r\npublic class MyProxy\u003cTTarget, TInterface\u003e : DispatchProxy\r\n{\r\n    public TTarget Target { get; private set; } = default!;\r\n\r\n    public static TInterface Create(TTarget? target = default)\r\n    {\r\n        TInterface proxyInterface = Create\u003cTInterface, MyProxy\u003cTTarget, TInterface\u003e\u003e()!;\r\n\r\n        MyProxy\u003cTTarget, TInterface\u003e proxy = (MyProxy\u003cTTarget, TInterface\u003e)(object)proxyInterface;\r\n        proxy.Target = target ?? Activator.CreateInstance\u003cTTarget\u003e();\r\n\r\n        return proxyInterface;\r\n    }\r\n\r\n    protected override object? Invoke(MethodInfo? targetMethod, object?[]? args)\r\n    {\r\n        Console.WriteLine($\"Calling {targetMethod!}\");\r\n        return Target!.GetType().GetMethod(targetMethod!.Name, BindingFlags.Instance | BindingFlags.Public)!.Invoke(Target, args);\r\n        // If the target is known to implement the interface, we could just do this instead:\r\n        // return targetMethod.Invoke(Target, args);\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-07T21:46:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Ejwv",
                                           "createdAt":  "2022-01-07T23:57:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaleStan",
                                           "body":  "\u003e It is possible to wrap the `DispatchProxy.Create()` with your own static \"Create()\" method\r\n\r\nThat is one of the \"No API change\" options I mentioned. For the sake of comparison, my proposed API would let the `MyProxy` class look like this instead:\r\n\r\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003eMyProxy\u003c/code\u003e class after proposed API change\u003c/summary\u003e \r\n\r\n``` cs\r\npublic class MyProxy\u003cTTarget, TInterface\u003e : DispatchProxy\r\n{\r\n    // No set/init\r\n    public TTarget Target { get; }\r\n    \r\n    // Maybe protected (or even private) instead of public, depending how the constructor is selected by DispatchProxy\r\n    public MyProxy(TTarget target) =\u003e Target = target;\r\n\r\n    // No casting. On the other hand, that generic argument list got uglier.\r\n    public static TInterface Create(TTarget? target = default)\r\n        =\u003e CreateWithParameter\u003cTInterface, MyProxy\u003cTTarget, TInterface\u003e, TTarget\u003e(target ?? Activator.CreateInstance\u003cTTarget\u003e());\r\n\r\n    // Same as before\r\n    protected override object? Invoke(MethodInfo? targetMethod, object?[]? args)\r\n    {\r\n        Console.WriteLine($\"Calling {targetMethod!}\");\r\n        return Target!.GetType().GetMethod(targetMethod!.Name, BindingFlags.Instance | BindingFlags.Public)!.Invoke(Target, args);\r\n        // If the target is known to implement the interface, we could just do this instead:\r\n        // return targetMethod.Invoke(Target, args);\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-07T23:57:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MkYM7",
                                           "createdAt":  "2022-10-19T21:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Note that the similar issue https://github.com/dotnet/runtime/issues/16614 was closed because it overlaps with this issue -- both need an alternative way to create a proxy in order to easily pass or set parameters.\r\n\r\n",
                                           "updatedAt":  "2022-10-19T21:42:36Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.Reflection.DispatchProxy.Create that accepts parameters to pass to TProxy\u0027s constructor",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43864",
        "createdAt":  "2020-10-27T02:10:06Z",
        "number":  43864,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:16:00Z",
        "body":  "Area owners: @steveharter @GrabYourPitchforks\r\n\r\nThe APIs in the list below are missing some or all of their documentation. Please add the missing documentation directly in triple slash comments in source. We will make sure it gets ported to dotnet-api-docs after it\u0027s merged.\r\n\r\nMake sure to follow the documentation guidelines defined in the dotnet-api-docs wiki:\r\nhttps://github.com/dotnet/dotnet-api-docs/wiki\r\n\r\nAlso please add me as a PR reviewer.\r\n\r\nCommunity contributions are welcome.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSystem.Reflection\u003c/summary\u003e\r\n\r\nDocId | Summary | Parameters | TypeParameters | ReturnValue | Source File Path | Docs URL\r\n-- | -- | -- | -- | -- | -- | --\r\n  M:System.Reflection.Assembly.GetForwardedTypes | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/Assembly.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Assembly.GetForwardedTypes?branch=master\r\n  T:System.Reflection.AssemblyExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/AssemblyExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.AssemblyExtensions?branch=master\r\n  M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/AssemblyExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.AssemblyExtensions.GetExportedTypes?branch=master\r\n  M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/AssemblyExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.AssemblyExtensions.GetModules?branch=master\r\n  M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/AssemblyExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.AssemblyExtensions.GetTypes?branch=master\r\n  T:System.Reflection.AssemblyFlags | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/AssemblyFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.AssemblyFlags?branch=master\r\n  F:System.Reflection.BindingFlags.DoNotWrapExceptions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/BindingFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.BindingFlags?branch=master\r\n  M:System.Reflection.DispatchProxy.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/DispatchProxy.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.DispatchProxy.-ctor?branch=master\r\n  T:System.Reflection.EventInfoExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetAddMethod?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetAddMethod?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetRaiseMethod?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetRaiseMethod?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetRemoveMethod?branch=master\r\n  M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/EventInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.EventInfoExtensions.GetRemoveMethod?branch=master\r\n  T:System.Reflection.ManifestResourceAttributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/ManifestResourceAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.ManifestResourceAttributes?branch=master\r\n  M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MemberInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MemberInfo.HasSameMetadataDefinitionAs?branch=master\r\n  T:System.Reflection.MemberInfoExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MemberInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MemberInfoExtensions?branch=master\r\n  P:System.Reflection.MethodBase.IsConstructedGenericMethod | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodBase.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodBase.IsConstructedGenericMethod?branch=master\r\n  F:System.Reflection.MethodImportAttributes.BestFitMappingDisable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.BestFitMappingEnable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.BestFitMappingMask | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionCDecl | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionFastCall | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionMask | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionStdCall | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionThisCall | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CallingConventionWinApi | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CharSetAnsi | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CharSetAuto | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CharSetMask | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.CharSetUnicode | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.ExactSpelling | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  T:System.Reflection.MethodImportAttributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.None | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.SetLastError | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharDisable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharEnable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharMask | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodImportAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodImportAttributes?branch=master\r\n  M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodInfoExtensions.GetBaseDefinition?branch=master\r\n  T:System.Reflection.MethodInfoExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodInfoExtensions?branch=master\r\n  T:System.Reflection.MethodSemanticsAttributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/MethodSemanticsAttributes.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.MethodSemanticsAttributes?branch=master\r\n  M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/ModuleExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.ModuleExtensions.GetModuleVersionId?branch=master\r\n  M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/ModuleExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.ModuleExtensions.HasModuleVersionId?branch=master\r\n  T:System.Reflection.ModuleExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/ModuleExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.ModuleExtensions?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetAccessors?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetAccessors?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetGetMethod?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetGetMethod?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetSetMethod?branch=master\r\n  M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions.GetSetMethod?branch=master\r\n  T:System.Reflection.PropertyInfoExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/PropertyInfoExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PropertyInfoExtensions?branch=master\r\n  P:System.Reflection.TypeDelegator.IsByRefLike | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsByRefLike?branch=master\r\n  P:System.Reflection.TypeDelegator.IsGenericMethodParameter | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsGenericMethodParameter?branch=master\r\n  P:System.Reflection.TypeDelegator.IsGenericTypeParameter | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsGenericTypeParameter?branch=master\r\n  P:System.Reflection.TypeDelegator.IsSZArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsSZArray?branch=master\r\n  P:System.Reflection.TypeDelegator.IsTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsTypeDefinition?branch=master\r\n  P:System.Reflection.TypeDelegator.IsVariableBoundArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeDelegator.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeDelegator.IsVariableBoundArray?branch=master\r\n  M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetConstructor?branch=master\r\n  M:System.Reflection.TypeExtensions.GetConstructors(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetConstructors?branch=master\r\n  M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetConstructors?branch=master\r\n  M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetDefaultMembers?branch=master\r\n  M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetEvent?branch=master\r\n  M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetEvent?branch=master\r\n  M:System.Reflection.TypeExtensions.GetEvents(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetEvents?branch=master\r\n  M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetEvents?branch=master\r\n  M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetField?branch=master\r\n  M:System.Reflection.TypeExtensions.GetField(System.Type,System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetField?branch=master\r\n  M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetFields?branch=master\r\n  M:System.Reflection.TypeExtensions.GetFields(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetFields?branch=master\r\n  M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetGenericArguments?branch=master\r\n  M:System.Reflection.TypeExtensions.GetInterfaces(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetInterfaces?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMember?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMember?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMembers?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMembers(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMembers?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMethod?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMethod?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMethod?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMethods(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMethods?branch=master\r\n  M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetMethods?branch=master\r\n  M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetNestedType?branch=master\r\n  M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetNestedTypes?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperties(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperties?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperties?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperty?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperty?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperty?branch=master\r\n  M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.GetProperty?branch=master\r\n  M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.IsAssignableFrom?branch=master\r\n  M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions.IsInstanceOfType?branch=master\r\n  T:System.Reflection.TypeExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeExtensions?branch=master\r\n  P:System.Reflection.TypeInfo.Assembly | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.Assembly?branch=master\r\n  P:System.Reflection.TypeInfo.AssemblyQualifiedName | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.AssemblyQualifiedName?branch=master\r\n  P:System.Reflection.TypeInfo.Attributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.Attributes?branch=master\r\n  P:System.Reflection.TypeInfo.BaseType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.BaseType?branch=master\r\n  P:System.Reflection.TypeInfo.ContainsGenericParameters | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.ContainsGenericParameters?branch=master\r\n  P:System.Reflection.TypeInfo.DeclaringMethod | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.DeclaringMethod?branch=master\r\n  M:System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.FindInterfaces?branch=master\r\n  M:System.Reflection.TypeInfo.FindMembers\u003cbr /\u003e(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.FindMembers?branch=master\r\n  P:System.Reflection.TypeInfo.FullName | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.FullName?branch=master\r\n  P:System.Reflection.TypeInfo.GenericParameterAttributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GenericParameterAttributes?branch=master\r\n  P:System.Reflection.TypeInfo.GenericParameterPosition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GenericParameterPosition?branch=master\r\n  P:System.Reflection.TypeInfo.GenericTypeArguments | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GenericTypeArguments?branch=master\r\n  M:System.Reflection.TypeInfo.GetArrayRank | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetArrayRank?branch=master\r\n  M:System.Reflection.TypeInfo.GetConstructor(System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetConstructor?branch=master\r\n  M:System.Reflection.TypeInfo.GetConstructors | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetConstructors?branch=master\r\n  M:System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetConstructors?branch=master\r\n  M:System.Reflection.TypeInfo.GetDefaultMembers | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetDefaultMembers?branch=master\r\n  M:System.Reflection.TypeInfo.GetElementType | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetElementType?branch=master\r\n  M:System.Reflection.TypeInfo.GetEnumName(System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEnumName?branch=master\r\n  M:System.Reflection.TypeInfo.GetEnumNames | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEnumNames?branch=master\r\n  M:System.Reflection.TypeInfo.GetEnumUnderlyingType | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEnumUnderlyingType?branch=master\r\n  M:System.Reflection.TypeInfo.GetEnumValues | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEnumValues?branch=master\r\n  M:System.Reflection.TypeInfo.GetEvent(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEvent?branch=master\r\n  M:System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEvent?branch=master\r\n  M:System.Reflection.TypeInfo.GetEvents | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEvents?branch=master\r\n  M:System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetEvents?branch=master\r\n  M:System.Reflection.TypeInfo.GetField(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetField?branch=master\r\n  M:System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetField?branch=master\r\n  M:System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetFields?branch=master\r\n  M:System.Reflection.TypeInfo.GetFields | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetFields?branch=master\r\n  M:System.Reflection.TypeInfo.GetGenericArguments | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetGenericArguments?branch=master\r\n  M:System.Reflection.TypeInfo.GetGenericParameterConstraints | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetGenericParameterConstraints?branch=master\r\n  M:System.Reflection.TypeInfo.GetGenericTypeDefinition | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetGenericTypeDefinition?branch=master\r\n  M:System.Reflection.TypeInfo.GetInterface(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetInterface?branch=master\r\n  M:System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetInterface?branch=master\r\n  M:System.Reflection.TypeInfo.GetInterfaces | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetInterfaces?branch=master\r\n  M:System.Reflection.TypeInfo.GetMember(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMember?branch=master\r\n  M:System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMember?branch=master\r\n  M:System.Reflection.TypeInfo.GetMember\u003cbr /\u003e(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMember?branch=master\r\n  M:System.Reflection.TypeInfo.GetMembers | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMembers?branch=master\r\n  M:System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMembers?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethod(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethod?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethod?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethod?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethod?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethods?branch=master\r\n  M:System.Reflection.TypeInfo.GetMethods | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetMethods?branch=master\r\n  M:System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetNestedType?branch=master\r\n  M:System.Reflection.TypeInfo.GetNestedType(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetNestedType?branch=master\r\n  M:System.Reflection.TypeInfo.GetNestedTypes | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetNestedTypes?branch=master\r\n  M:System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetNestedTypes?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperties | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperties?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperties?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  M:System.Reflection.TypeInfo.GetProperty\u003cbr /\u003e(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GetProperty?branch=master\r\n  P:System.Reflection.TypeInfo.GUID | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.GUID?branch=master\r\n  P:System.Reflection.TypeInfo.HasElementType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.HasElementType?branch=master\r\n  P:System.Reflection.TypeInfo.IsAbstract | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsAbstract?branch=master\r\n  P:System.Reflection.TypeInfo.IsAnsiClass | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsAnsiClass?branch=master\r\n  P:System.Reflection.TypeInfo.IsArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsArray?branch=master\r\n  M:System.Reflection.TypeInfo.IsAssignableFrom(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsAssignableFrom?branch=master\r\n  P:System.Reflection.TypeInfo.IsAutoClass | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsAutoClass?branch=master\r\n  P:System.Reflection.TypeInfo.IsAutoLayout | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsAutoLayout?branch=master\r\n  P:System.Reflection.TypeInfo.IsByRef | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsByRef?branch=master\r\n  P:System.Reflection.TypeInfo.IsClass | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsClass?branch=master\r\n  P:System.Reflection.TypeInfo.IsCOMObject | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsCOMObject?branch=master\r\n  P:System.Reflection.TypeInfo.IsEnum | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsEnum?branch=master\r\n  M:System.Reflection.TypeInfo.IsEnumDefined(System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsEnumDefined?branch=master\r\n  M:System.Reflection.TypeInfo.IsEquivalentTo(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsEquivalentTo?branch=master\r\n  P:System.Reflection.TypeInfo.IsExplicitLayout | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsExplicitLayout?branch=master\r\n  P:System.Reflection.TypeInfo.IsGenericParameter | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsGenericParameter?branch=master\r\n  P:System.Reflection.TypeInfo.IsGenericType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsGenericType?branch=master\r\n  P:System.Reflection.TypeInfo.IsGenericTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsGenericTypeDefinition?branch=master\r\n  P:System.Reflection.TypeInfo.IsImport | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsImport?branch=master\r\n  M:System.Reflection.TypeInfo.IsInstanceOfType(System.Object) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsInstanceOfType?branch=master\r\n  P:System.Reflection.TypeInfo.IsInterface | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsInterface?branch=master\r\n  P:System.Reflection.TypeInfo.IsLayoutSequential | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsLayoutSequential?branch=master\r\n  P:System.Reflection.TypeInfo.IsMarshalByRef | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsMarshalByRef?branch=master\r\n  P:System.Reflection.TypeInfo.IsNested | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNested?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedAssembly | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedAssembly?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedFamANDAssem | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedFamANDAssem?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedFamily | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedFamily?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedFamORAssem | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedFamORAssem?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedPrivate | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedPrivate?branch=master\r\n  P:System.Reflection.TypeInfo.IsNestedPublic | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNestedPublic?branch=master\r\n  P:System.Reflection.TypeInfo.IsNotPublic | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsNotPublic?branch=master\r\n  P:System.Reflection.TypeInfo.IsPointer | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsPointer?branch=master\r\n  P:System.Reflection.TypeInfo.IsPrimitive | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsPrimitive?branch=master\r\n  P:System.Reflection.TypeInfo.IsPublic | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsPublic?branch=master\r\n  P:System.Reflection.TypeInfo.IsSealed | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsSealed?branch=master\r\n  P:System.Reflection.TypeInfo.IsSerializable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsSerializable?branch=master\r\n  P:System.Reflection.TypeInfo.IsSpecialName | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsSpecialName?branch=master\r\n  M:System.Reflection.TypeInfo.IsSubclassOf(System.Type) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsSubclassOf?branch=master\r\n  P:System.Reflection.TypeInfo.IsUnicodeClass | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsUnicodeClass?branch=master\r\n  P:System.Reflection.TypeInfo.IsValueType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsValueType?branch=master\r\n  P:System.Reflection.TypeInfo.IsVisible | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.IsVisible?branch=master\r\n  M:System.Reflection.TypeInfo.MakeArrayType | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MakeArrayType?branch=master\r\n  M:System.Reflection.TypeInfo.MakeArrayType(System.Int32) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MakeArrayType?branch=master\r\n  M:System.Reflection.TypeInfo.MakeByRefType | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MakeByRefType?branch=master\r\n  M:System.Reflection.TypeInfo.MakeGenericType(System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MakeGenericType?branch=master\r\n  M:System.Reflection.TypeInfo.MakePointerType | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MakePointerType?branch=master\r\n  P:System.Reflection.TypeInfo.MemberType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.MemberType?branch=master\r\n  P:System.Reflection.TypeInfo.Namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.Namespace?branch=master\r\n  P:System.Reflection.TypeInfo.StructLayoutAttribute | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.StructLayoutAttribute?branch=master\r\n  P:System.Reflection.TypeInfo.TypeInitializer | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.TypeInitializer?branch=master\r\n  P:System.Reflection.TypeInfo.UnderlyingSystemType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection/TypeInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.TypeInfo.UnderlyingSystemType?branch=master\r\n\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSystem.Reflection.Emit\u003c/summary\u003e\r\n\r\nDocId | Summary | Parameters | TypeParameters | ReturnValue | Source File Path | Docs URL\r\n-- | -- | -- | -- | -- | -- | --\r\n  P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/AssemblyBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.AssemblyBuilder.DefinedTypes?branch=master\r\n  P:System.Reflection.Emit.AssemblyBuilder.Modules | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/AssemblyBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.AssemblyBuilder.Modules?branch=master\r\n  P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/DynamicMethod.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.DynamicMethod.MethodImplementationFlags?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.Attributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.Attributes?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.ContainsGenericParameters | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.ContainsGenericParameters?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.DeclaringMethod | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.DeclaringMethod?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.GenericParameterAttributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GenericParameterAttributes?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.GenericParameterPosition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GenericParameterPosition?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.GenericTypeArguments | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GenericTypeArguments?branch=master\r\n  M:System.Reflection.Emit.EnumBuilder.GetArrayRank | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GetArrayRank?branch=master\r\n  M:System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints?branch=master\r\n  M:System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsByRefLike | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsByRefLike?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsEnum | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsEnum?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsGenericParameter | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsGenericParameter?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsGenericType | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsGenericType?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsSerializable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsSerializable?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsSZArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsSZArray?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsTypeDefinition?branch=master\r\n  P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.IsVariableBoundArray?branch=master\r\n  M:System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[]) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.EnumBuilder.MakeGenericType?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.Attributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.Attributes?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments?branch=master\r\n  M:System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank?branch=master\r\n  M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition?branch=master\r\n  P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/GenericTypeParameterBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray?branch=master\r\n  P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod?branch=master\r\n  P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.MethodBuilder.MethodImplementationFlags?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.Attributes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.Attributes?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.ContainsGenericParameters?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.GenericTypeArguments?branch=master\r\n  M:System.Reflection.Emit.TypeBuilder.GetArrayRank | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.GetArrayRank?branch=master\r\n  M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsByRefLike | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsByRefLike?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsEnum | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsEnum?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsSerializable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsSerializable?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsSZArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsSZArray?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsTypeDefinition?branch=master\r\n  P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.Emit.TypeBuilder.IsVariableBoundArray?branch=master\r\n\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSystem.Reflection.PortableExecutable\u003c/summary\u003e\r\n\r\n  DocId | Summary | Parameters | TypeParameters | ReturnValue | Source File Path | Docs URL\r\n  -- | -- | -- | -- | -- | -- | --\r\n   System.Reflection.PortableExecutable Namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-System.Reflection.PortableExecutable.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.AggressiveWSTrim | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.Bit32Machine | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.BytesReversedHi | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.BytesReversedLo | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  T:System.Reflection.PortableExecutable.Characteristics | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.DebugStripped | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.Dll | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.ExecutableImage | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.LargeAddressAware | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.LineNumsStripped | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.LocalSymsStripped | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.NetRunFromSwap | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.RelocsStripped | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.RemovableRunFromSwap | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.System | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.Characteristics.UpSystemOnly | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/Characteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.ILLibrary | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.ILOnly | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.NativeEntryPoint | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.Prefers32Bit | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.Requires32Bit | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.StrongNameSigned | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  F:System.Reflection.PortableExecutable.CorFlags.TrackDebugData | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorFlags.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorFlags?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.CodeManagerTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.CodeManagerTableDirectory?branch=master\r\n  T:System.Reflection.PortableExecutable.CorHeader | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.EntryPointTokenOrRelativeVirtualAddress | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.EntryPointTokenOrRelativeVirtualAddress?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.ExportAddressTableJumpsDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.ExportAddressTableJumpsDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.Flags | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.Flags?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.MajorRuntimeVersion | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.MajorRuntimeVersion?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.ManagedNativeHeaderDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.ManagedNativeHeaderDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.MetadataDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.MetadataDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.MinorRuntimeVersion | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.MinorRuntimeVersion?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.ResourcesDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.ResourcesDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.StrongNameSignatureDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.StrongNameSignatureDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.CorHeader.VtableFixupsDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/CorHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.CorHeader.VtableFixupsDirectory?branch=master\r\n  T:System.Reflection.PortableExecutable.DebugDirectoryBuilder | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DebugDirectoryBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DebugDirectoryBuilder?branch=master\r\n  M:System.Reflection.PortableExecutable.DebugDirectoryEntry.#ctor\u003cbr /\u003e(System.UInt32,System.UInt16,\u003cbr /\u003eSystem.UInt16,System.Reflection.PortableExecutable.DebugDirectoryEntryType,System.Int32,System.Int32,System.Int32) | Present | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DebugDirectoryEntry.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DebugDirectoryEntry.-ctor?branch=master\r\n  M:System.Reflection.PortableExecutable.DirectoryEntry.#ctor(System.Int32,System.Int32) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DirectoryEntry.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DirectoryEntry.-ctor?branch=master\r\n  T:System.Reflection.PortableExecutable.DirectoryEntry | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DirectoryEntry.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DirectoryEntry?branch=master\r\n  F:System.Reflection.PortableExecutable.DirectoryEntry.RelativeVirtualAddress | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DirectoryEntry.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DirectoryEntry.RelativeVirtualAddress?branch=master\r\n  F:System.Reflection.PortableExecutable.DirectoryEntry.Size | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/DirectoryEntry.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.DirectoryEntry.Size?branch=master\r\n  M:System.Reflection.PortableExecutable.ManagedPEBuilder.#ctor\u003cbr /\u003e(System.Reflection.PortableExecutable.PEHeaderBuilder,System.Reflection.Metadata.Ecma335.MetadataRootBuilder,\u003cbr /\u003eSystem.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.BlobBuilder,\u003cbr /\u003eSystem.Reflection.PortableExecutable.ResourceSectionBuilder,System.Reflection.PortableExecutable.DebugDirectoryBuilder,\u003cbr /\u003eSystem.Int32,System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.PortableExecutable.CorFlags,System.Func\u003cbr /\u003e{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Reflection.Metadata.BlobContentId}) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.-ctor?branch=master\r\n  M:System.Reflection.PortableExecutable.ManagedPEBuilder.CreateSections | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.CreateSections?branch=master\r\n  M:System.Reflection.PortableExecutable.ManagedPEBuilder.GetDirectories | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.GetDirectories?branch=master\r\n  T:System.Reflection.PortableExecutable.ManagedPEBuilder | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder?branch=master\r\n  F:System.Reflection.PortableExecutable.ManagedPEBuilder.ManagedResourcesDataAlignment | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.ManagedResourcesDataAlignment?branch=master\r\n  F:System.Reflection.PortableExecutable.ManagedPEBuilder.MappedFieldDataAlignment | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.MappedFieldDataAlignment?branch=master\r\n  M:System.Reflection.PortableExecutable.ManagedPEBuilder.SerializeSection\u003cbr /\u003e(System.String,System.Reflection.PortableExecutable.SectionLocation) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.SerializeSection?branch=master\r\n  M:System.Reflection.PortableExecutable.ManagedPEBuilder.Sign\u003cbr /\u003e(System.Reflection.Metadata.BlobBuilder,System.Func\u003cbr /\u003e{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Byte[]}) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/ManagedPEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.ManagedPEBuilder.Sign?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.#ctor\u003cbr /\u003e(System.Reflection.PortableExecutable.PEHeaderBuilder,System.Func\u003cbr /\u003e{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Reflection.Metadata.BlobContentId}) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.-ctor?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.CreateSections | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.CreateSections?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.GetDirectories | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.GetDirectories?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.GetSections | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.GetSections?branch=master\r\n  P:System.Reflection.PortableExecutable.PEBuilder.Header | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Header?branch=master\r\n  P:System.Reflection.PortableExecutable.PEBuilder.IdProvider | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.IdProvider?branch=master\r\n  P:System.Reflection.PortableExecutable.PEBuilder.IsDeterministic | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.IsDeterministic?branch=master\r\n  T:System.Reflection.PortableExecutable.PEBuilder | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.Serialize\u003cbr /\u003e(System.Reflection.Metadata.BlobBuilder) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Serialize?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.SerializeSection\u003cbr /\u003e(System.String,System.Reflection.PortableExecutable.SectionLocation) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.SerializeSection?branch=master\r\n  M:System.Reflection.PortableExecutable.PEBuilder.Section.#ctor\u003cbr /\u003e(System.String,System.Reflection.PortableExecutable.SectionCharacteristics) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder+Section.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Section.-ctor?branch=master\r\n  F:System.Reflection.PortableExecutable.PEBuilder.Section.Characteristics | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder+Section.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Section.Characteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.PEBuilder.Section.Name | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder+Section.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Section.Name?branch=master\r\n  T:System.Reflection.PortableExecutable.PEBuilder.Section | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEBuilder+Section.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEBuilder.Section?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.BaseRelocationTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.BaseRelocationTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.BoundImportTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.BoundImportTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.CopyrightTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.CopyrightTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.CorHeaderTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.CorHeaderTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.DebugTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.DebugTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.DelayImportTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.DelayImportTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.DllCharacteristics | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.DllCharacteristics?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ExceptionTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ExceptionTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ExportTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ExportTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.GlobalPointerTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.GlobalPointerTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ImportAddressTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ImportAddressTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ImportTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ImportTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.LoadConfigTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.LoadConfigTableDirectory?branch=master\r\n  T:System.Reflection.PortableExecutable.PEHeader | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ResourceTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ResourceTableDirectory?branch=master\r\n  P:System.Reflection.PortableExecutable.PEHeader.ThreadLocalStorageTableDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEHeader.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEHeader.ThreadLocalStorageTableDirectory?branch=master\r\n  F:System.Reflection.PortableExecutable.PEMagic.PE32 | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEMagic.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEMagic?branch=master\r\n  F:System.Reflection.PortableExecutable.PEMagic.PE32Plus | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEMagic.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEMagic?branch=master\r\n  T:System.Reflection.PortableExecutable.PEMagic | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEMagic.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEMagic?branch=master\r\n  T:System.Reflection.PortableExecutable.PEMemoryBlock | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/PEMemoryBlock.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.PEMemoryBlock?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align1024Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align128Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align16Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align1Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align2048Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align256Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align2Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align32Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align4096Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align4Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align512Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align64Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align8192Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Align8Bytes | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.AlignMask | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsCode | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsInitializedData | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsUninitializedData | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.GPRel | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerComdat | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerInfo | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerNRelocOvfl | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerOther | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerRemove | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.Mem16Bit | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemDiscardable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemExecute | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemFardata | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemLocked | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemNotCached | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemNotPaged | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemPreload | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemProtected | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemPurgeable | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemRead | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemShared | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemSysheap | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.MemWrite | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.NoDeferSpecExc | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  T:System.Reflection.PortableExecutable.SectionCharacteristics | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeCopy | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeDSect | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeGroup | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeNoLoad | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeNoPad | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeOver | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeReg | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionCharacteristics.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionCharacteristics?branch=master\r\n  M:System.Reflection.PortableExecutable.SectionLocation.#ctor(System.Int32,System.Int32) | Missing | Missing | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionLocation.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionLocation.-ctor?branch=master\r\n  P:System.Reflection.PortableExecutable.SectionLocation.PointerToRawData | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionLocation.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionLocation.PointerToRawData?branch=master\r\n  P:System.Reflection.PortableExecutable.SectionLocation.RelativeVirtualAddress | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionLocation.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionLocation.RelativeVirtualAddress?branch=master\r\n  T:System.Reflection.PortableExecutable.SectionLocation | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.Reflection.PortableExecutable/SectionLocation.xml | https://review.docs.microsoft.com/en-us/dotnet/api/System.Reflection.PortableExecutable.SectionLocation?branch=master\r\n\r\n\u003c/details\u003e\r\n\r\nNote: I noticed some of these APIs were introduced in .NET Core 1.x, but either disappeared in subsequent versions, or were moved to .NET Standard. I\u0027ll let area owners decide if they want those to document those APIs. If yes, then they would have to be documented directly in dotnet-api-docs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS58QNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Hx0wO",
                                           "createdAt":  "2022-08-03T17:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "We won\u0027t have time to add the documentation before ZBB. Adjusting milestone accordingly.",
                                           "updatedAt":  "2022-08-03T17:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LnxA3",
                                           "createdAt":  "2022-10-05T17:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "[Triage]: @buyaa-n will take a look at this one. A lot of the APIs might already be documented, but she will take a look which ones are missing.",
                                           "updatedAt":  "2022-10-05T17:20:19Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "API documentation debt - System.Reflection",
        "labels":  [
                       "documentation",
                       "area-System.Reflection",
                       "help wanted",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44318",
        "createdAt":  "2020-11-05T18:10:46Z",
        "number":  44318,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCy495w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "XavierAP",
                                            "createdAt":  "2020-11-21T16:32:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2023-09-27T16:28:14Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-12-05T16:50:55Z",
        "body":  "## Background and Motivation\r\n\r\nWhen using [`Tuple` ](https://docs.microsoft.com/en-us/dotnet/api/system.tuple) and [`ValueTuple`](https://docs.microsoft.com/en-us/dotnet/api/system.valuetuple), metadata is hard to access:\r\n- The name of the members (\"Item1\", \"Item2\", etc) must be obtained through reflection. For `Tuple`, they are the property names. For `ValueTuple`, they are field names. Also, `Tuple` is an immutable reference type while `ValueTuple` is a mutable value type which further complicates the usage patterns.\r\n- When more than 7 elements are used, the `Rest` property\\field must be used, which is another Tuple, and thus the total count is not obvious and must be calculated.\r\n- The \"TransformName\" or friendly parameter name used with `ValueTuple` must be obtained from reflection in a non-trivial manner by inspecting `[TupleElementNames]`.\r\n\r\nAt runtime, the [`ITuple`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.ituple) interface is useful to abstract away the `Rest` property\\field and provide a count, although it doesn\u0027t support the \"TransformName\". However, similar behavior is not available through reflection. See https://github.com/dotnet/csharplang/issues/1906.\r\n\r\n## Proposed API\r\n- Add extension methods to the existing [`System.Reflection.Extensions`](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs) assembly.\r\n  - This avoids runtime knowledge and pay-to-play for consumers.\r\n- These look-up the various metdata and return an new `TupleInfo` value type.\r\n  - This is somewhat slow and no extra caching is performed (like similar cases elsewhere). Caching should be done at a higher level, if necessary.\r\n- The extensions should work for both runtime-based and designtime-based reflection types (via MetadataLoadContext).\r\n\r\nAPI (in System.Reflection namespace):\r\n```diff\r\npublic static class EventInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this EventInfo eventInfo);\r\n}\r\n\r\n+public static class FieldInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this FieldInfo fieldInfo);\r\n}\r\n\r\npublic static class MemberInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this MemberInfo member);\r\n}\r\n\r\npublic static class MethodInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this MethodInfo method);\r\n}\r\n\r\n+public static class ParameterInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this ParameterInfo parameter);\r\n}\r\n\r\npublic static class PropertyInfoExtensions\r\n{\r\n+    public static TupleInfo[] GetTupleInfo(this PropertyInfo property);\r\n}\r\n\r\npublic partial struct TupleInfo\r\n{\r\n    public readonly string Name { get; }\r\n    public readonly string? TransformName { get; }\r\n    public readonly System.Type Type { get; }\r\n}\r\n```\r\n\r\n`InvalidOperationException` is thrown if the various metadata type (`PropertyInfo`, etc) is not a `Tuple` or `ValueTuple`.\r\n\r\nPrototype at https://github.com/dotnet/runtime/compare/master...steveharter:ReflectionExt\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT7wACw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTE4ODM1NQ==",
                                           "createdAt":  "2021-07-07T01:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We won\u0027t get to this during .NET 6; moving to .NET 7.",
                                           "updatedAt":  "2021-07-07T01:02:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PvAAL",
                                           "createdAt":  "2022-12-05T16:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This is a lower-priority issue with no reported asks from the community. Moving to future.",
                                           "updatedAt":  "2022-12-05T16:50:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Reflection support for Tuple and ValueTuple",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44752",
        "createdAt":  "2020-11-16T19:34:18Z",
        "number":  44752,
        "author":  "CoffeeFlux",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-21T20:47:18Z",
        "body":  "It seems at some point the `AssemblyName` version was copied from `UriHelper` and hasn\u0027t kept up with any changes, including its rewrite in https://github.com/dotnet/runtime/commit/94acc996414dcf6b4b60847775e0247fd959eaa8. We should get rid of the old unsafe implementation entirely and just share the code if possible. cc: @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK2ikVw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODI3ODEwMw==",
                                           "createdAt":  "2020-11-16T19:34:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-16T19:34:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Share AssemblyName.EscapeString with UriHelper.EscapeString",
        "labels":  [
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45152",
        "createdAt":  "2020-11-24T14:42:34Z",
        "number":  45152,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFwFXQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2020-11-24T14:59:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thaina",
                                            "createdAt":  "2020-11-24T15:13:19Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "xoofx",
                                            "createdAt":  "2020-11-24T17:09:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2020-11-24T18:39:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ziflin",
                                            "createdAt":  "2020-11-24T19:51:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antiufo",
                                            "createdAt":  "2021-01-12T23:25:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2021-05-16T19:41:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bbartels",
                                            "createdAt":  "2021-06-07T15:03:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "phobos2077",
                                            "createdAt":  "2021-07-22T14:03:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "InflexCZE",
                                            "createdAt":  "2021-09-03T08:11:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2021-09-05T02:31:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-11-02T16:58:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "zgramana",
                                            "createdAt":  "2021-11-18T23:54:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2021-11-29T23:58:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-01-14T03:40:38Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-01-31T17:26:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-01-31T17:26:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2022-03-08T04:18:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BCSharp",
                                            "createdAt":  "2022-04-11T03:54:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fifty-six",
                                            "createdAt":  "2022-04-30T23:08:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rungwiroon",
                                            "createdAt":  "2022-05-02T18:58:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MSDN-WhiteKnight",
                                            "createdAt":  "2022-05-11T06:03:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CodingMadness",
                                            "createdAt":  "2022-11-16T20:46:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "CodingMadness",
                                            "createdAt":  "2022-11-16T20:46:25Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "IS4Code",
                                            "createdAt":  "2022-12-05T17:06:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-03-13T01:48:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-07-14T09:06:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2023-10-25T14:16:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sam-Gideone",
                                            "createdAt":  "2024-01-03T12:58:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tanveerbadar",
                                            "createdAt":  "2024-02-26T08:38:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS4Code",
                                            "createdAt":  "2024-03-01T02:34:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-10-03T06:32:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2024-11-06T09:22:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndriySvyryd",
                                            "createdAt":  "2025-05-02T00:22:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "itsBuggingMe",
                                            "createdAt":  "2025-05-21T21:56:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SirIntruder",
                                            "createdAt":  "2025-07-04T19:46:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SirIntruder",
                                            "createdAt":  "2025-07-04T19:46:08Z"
                                        }
                                    ],
                          "totalCount":  37
                      },
        "updatedAt":  "2025-07-26T10:39:08Z",
        "body":  "Support `ref struct` and \"fast invoke\" by adding new reflection APIs. The new APIs will be faster than the current `object[]` boxing approach by leveraging the existing `System.TypedReference\u003cT\u003e`.\r\n\r\n`TypedReference` is a special type and is super-fast because since it is a `ref struct` with its own opcodes. By extending it with this feature, it provides alloc-free, stack-based “boxing” with support for all argument types (reference types, value types, pointers and ref structs [pending]) along with all modifiers (byval, in, out, ref, ref return). Currently reflection does not support passing or invoking a `ref struct` since it can’t be boxed to `object`; the new APIs are to support `ref struct` with new language features currently being investigated. \r\n\r\nExample syntax (actual TBD): \r\n```cs\r\nMyClass obj= …; \r\nMethodInfo methodInfo = …;\r\n\r\nint param1 = 42; // Pass an integer\r\nSpan\u003cint\u003e param2 = new Span\u003cint\u003e(new int[]{1, 2, 3}); // Pass a span (not possible with reflection today)\r\n\r\n// Adding support for Span\u003cTypedReference\u003e requires the language and runtime asks below.\r\nSpan\u003cTypedReference\u003e parameters = stackalloc TypedReference[2];\r\n\r\n// The \u0027byval\u0027, \u0027in\u0027, \u0027out\u0027 and \u0027ref\u0027 modifiers in the callee method\u0027s parameters all have the same caller syntax\r\nparameters[0] = TypedReference.FromRef(ref param1);\r\nparameters[1] = TypedReference.FromRef(ref param2);\r\nmethodInfo.GetInvoker().Invoke(returnValue: default, target: TypedReference.FromRef(ref obj), parameters);  \r\n// The first call to this methodInfo will be slower; subsequent calls used cached IL when possible\r\n\r\n// Shorter syntax using __makeref (C# specific)\r\nparameters[0] = __makeref(param1);\r\nparameters[1] = __makeref(param2);\r\nmethodInfo.Invoke(default, __makeref(obj), parameters));\r\n```\r\n\r\n# Dependencies\r\nThe Roslyn and runtime dependencies below are required for the programming model above. These are listed in the order in which they need to be implemented.\r\n- [x] [ref fields: necessary to rationalize TypedReference](https://github.com/dotnet/csharplang/pull/5602).\r\n  - [x] https://github.com/dotnet/runtime/issues/32060\r\n  - [x] https://github.com/dotnet/runtime/issues/63768\r\n- [ ] Support passing a `ref struct` as a generic argument. This would be used when adding the static factory method `public static TypedReference CreateFromRefStruct\u003cT\u003e(ref T myRefStruct) where T : ref struct` which basically wraps `__makeref(myrefstruct)`. It could also be used to enable `Span\u003cT\u003e where T : ref struct` which is the ideal stack-based collection implementation that can contain `TypedReference`s.\r\n- [x] [An arbitrary array/span of references](https://github.com/dotnet/runtime/issues/38488) to enable a stack-based, variable length container for method arguments. See also related comments in [ref fields: necessary to rationalize TypedReference](https://github.com/dotnet/csharplang/pull/5602) and [prototype using `params`](https://github.com/dotnet/roslyn/compare/main...cston:params-span). The new invoke APIs require a collection of `TypeReference`s.  There are several possible implementations; the most normalized solution would be supporting `Span\u003cT\u003e where T : ref struct` thus enabling any `ref struct` (not just `TypedReference`) to be used in a container. UPDATE: done in prototype per https://github.com/dotnet/runtime/issues/75349\r\n- [ ] Removing the concept of restricted types including `TypedReference`. (Roslyn link TBD). Ideally, `TypedReference` is a normal `ref struct`. Note that `TypedReference` currently has [`ByReference\u003cbyte\u003e`](https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/System/TypedReference.CoreCLR.cs#L16) to contain an interior pointer to the value so this will likely need a different type. Also, `TypedReference` has several compile-time limitations including not be able to be passed to another method that should be removed resulting in only standard `ref struct` semantics.\r\n- [ ] [Add reflection support for Span\u003cT\u003e and other ref struct types](https://github.com/dotnet/runtime/issues/10057) _(this is the library\\API issue and requires all of the above work items)_\r\n  * See [disabled test for `ref` fields](https://github.com/dotnet/runtime/blob/4a6d169f5391532340074b0be4cab737c6ccdfc8/src/libraries/System.Reflection.Emit/tests/TypeBuilder/TypeBuilderDefineField.cs#L182-L208).\r\n\r\n # Motivation\r\nReflection is ~20x slower than a Delegate call for a typical method. Many users including our own libraries use IL Emit instead which is non-trivial and error-prone. The expected gains are ~10x faster with no allocs; verified with a prototype. Internally, IL Emit is used but with a proposed slow-path fallback for AOT (non-emit) cases. The existing reflection invoke APIs may also layer on this. \r\n\r\n# In Scope  \r\nAPIs to invoke methods using `TypedReference` including passing a `TypedReference` collection. `TypedReference` must be treated as a normal `ref struct` (today it has nuances and special cases). \r\n\r\nSupport ref struct (passing and invoking). \r\n\r\nPerformance on par with existing ref emit scenarios:\r\n- Property get\\set\r\n- Field get\\set\r\n- Parameterized constructors and methods\r\n \r\nTo scope this feature, the minimum functionality that results in a win by allowing `System.Text.Json` to remove its dependency to System.Reflection.Emit for inbox scenarios.\r\n\r\n# Out of Scope  \r\nThis issue is an incremental improvement of reflection by adding new Invoke APIs and leveraging the existing `TypedReference` while requiring some runtime\\Roslyn changes. Longer-term we should consider a more holistic runtime and Roslin support for reflection including JIT intrinsics and\\or new \"dynamic invoke\" opcodes for performance along with perhaps C# auto-stack-boxing to\\from a `ref TypedReference`.\r\n\r\n# Implementation\r\nA design doc is forthcoming.\r\n\r\nThe implementation will likely cache the generated method on the corresponding `MethodBase` and `MemberInfo` objects. \r\n\r\n100% backwards compat with the existing object[]-based Invoke APIs is not necessary but will be designed with laying in mind (e.g. parameter validation, special types like ReflectionPointer, the `Binder` pattern, CultureInfo for culture-aware methods) so that in theory the existing object[]-based Invoke APIs could layer on this new work.\r\n\r\nThis issue supersedes other reflection performance issues that overlap:\r\n  - [Unsafe.OffsetOf to get field offsets in types](https://github.com/dotnet/runtime/issues/43285)\r\n  - [Proposal: RuntimeHelpers.GetRawData](https://github.com/dotnet/runtime/issues/28001)\r\n  - [Proposal for high-performance codegen-less Reflection factory APIs](https://github.com/dotnet/runtime/issues/23716)\r\n  - [Proposal: Add new GetValue method to System.Reflection](https://github.com/dotnet/runtime/issues/19484)\r\n  - [Faster MethodInfo.Invoke](https://github.com/dotnet/runtime/issues/7560)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaf5p0Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzAzNTcyNw==",
                                           "createdAt":  "2020-11-24T15:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This isn\u0027t just for JSON, what we\u0027ve we doing should work for any framework that uses reflection today I assume. I\u0027m hoping to see a deep analysis here of the scenarios that Would use these APIs \n\ncc @pranavkm @SteveSandersonMS ",
                                           "updatedAt":  "2020-11-24T15:10:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEwNzgyMw==",
                                           "createdAt":  "2020-11-24T16:56:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3qazA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SeeminglyScience",
                                                                               "createdAt":  "2022-12-15T19:43:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-03-13T01:48:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "PowerShell could be benefit from this - it is based on reflection, emit and dynamic.",
                                           "updatedAt":  "2020-11-24T16:56:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzExNzgyNA==",
                                           "createdAt":  "2020-11-24T17:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "As mentioned in some of the previous issues, and to add a note on the requirements as there is a reference to Reflection.Emit that might make this not clear: the solution should not involve any managed objects from `System.Reflection` but go through only `RuntimeXXXHandle` that can work directly with `ldtoken`\u0026co.",
                                           "updatedAt":  "2020-11-24T17:13:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEyOTM4OQ==",
                                           "createdAt":  "2020-11-24T17:34:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBX2V7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2020-11-24T17:45:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have discussed that these APIs should be efficient and avoid allocating lots of managed memory: https://github.com/dotnet/runtime/issues/28001#issuecomment-442342820 . Avoiding any managed objects from `System.Reflection` is much more stringent and unlikely to be practical.",
                                           "updatedAt":  "2020-11-24T17:34:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzEzNzI2Mg==",
                                           "createdAt":  "2020-11-24T17:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Avoiding any managed objects from `System.Reflection` is much more stringent and unlikely to be practical.\r\n\r\nFair enough. I don\u0027t know the cases that would involve reflection, but as long as simple cases like accessing statically known e.g fields directly from IL via ldtoken, are working without, that\u0027s ok.",
                                           "updatedAt":  "2020-11-24T17:49:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTgyNTA4Mw==",
                                           "createdAt":  "2021-05-16T14:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "How much work is this? Is there any way to make incremental progress in 6.0 towards it?\r\n\r\nI\u0027m writing up something on the code generation techniques used in ASP.NET Core and for the future reference I\u0027d like an idea of how our APIs would need to evolve. The closest I\u0027ve found is @jkotas \u0027s comment here https://github.com/dotnet/runtime/issues/10057#issuecomment-377955723.\r\n",
                                           "updatedAt":  "2021-05-16T14:29:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTgzMjQ3Nw==",
                                           "createdAt":  "2021-05-16T15:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We may be able to make some incremental progress on faster reflection in .NET by refactoring the internal implementation. \r\n\r\nWe won\u0027t be able to expose the new faster reflection APIs for .NET 6. For that, we need https://github.com/dotnet/runtime/issues/26186 that depends on https://github.com/dotnet/csharplang/blob/master/proposals/low-level-struct-improvements.md that was cut for .NET 6.",
                                           "updatedAt":  "2021-05-16T15:25:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTg0MjQxOA==",
                                           "createdAt":  "2021-05-16T16:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Got it. For .NET 7 then. I think I understand how to model the APIs we need to take advantage of this. Unfortunately this and async are at odds, but we can probably optimize the sync path with this and box in the async path. Still that would mean we need a way to create a TypedReference from this boxed value in a way that won\u0027t explode because the new API won\u0027t handle type coercion i.e a mix of this API needs to support a mix of boxed and unboxed values somehow. I can provide examples if needed.",
                                           "updatedAt":  "2021-05-16T16:42:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTAzNzE2Mg==",
                                           "createdAt":  "2021-05-26T18:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4q99g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2023-03-28T05:17:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Bumping again on the topic, more precisely for the support of `offsetof` and so by extension `handleof(A.MyField)` that we discussed [here](https://github.com/dotnet/runtime/issues/28001#issuecomment-442356068)), can we add here that it might require a language + Roslyn support, so that we can build higher primitives/intrinsics around it? (e.g like `Unsafe.OffsetOf(fieldToken)`).\r\n\r\nA scenario example for `offsetof` is when building for example an animation system that can animate dynamic (resolution based on data, not code) field values of a struct that is stored in an unmanaged memory buffer.\r\n\r\ncc: @jaredpar (for the question about Language + Roslyn support)",
                                           "updatedAt":  "2021-05-26T18:55:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTA5NzI4Mg==",
                                           "createdAt":  "2021-05-26T20:31:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "I\u0027m not sure how the language can implement `offsetof` without some underlying runtime support as it\u0027s a value you can\u0027t determine until runtime. As for that and `handleof` I think it comes down to if there is enough benefit in adding it, particularly when it\u0027s just a think wrapper over .NET API calls. ",
                                           "updatedAt":  "2021-05-26T20:31:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTEwMDU2NQ==",
                                           "createdAt":  "2021-05-26T20:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "It would probably have to be through ldflda and managed pointer difference. There\u0027s an issue discussing that if we were to allow `no.nullcheck ldflda`, it would be doable with nice codegen - https://github.com/dotnet/runtime/issues/40021#issuecomment-666596692.",
                                           "updatedAt":  "2021-05-26T20:37:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTI5OTgyNQ==",
                                           "createdAt":  "2021-05-27T03:57:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I\u0027m not sure how the language can implement offsetof without some underlying runtime support as it\u0027s a value you can\u0027t determine until runtime. \r\n\r\nYes, at native compile time (so runtime in the case of JIT) the value can be computed easily (it is part of the struct layout computation). So having an intrinsic like `int RuntimeHelper.GetFieldOffset(RuntimeFieldHandle)` could resolve to a constant in the IR of the compiler (if the runtime field handle is a const and coming from prior resolution with e.g `handleof`). Actually `Unsafe.OffsetOf` is probably a bad idea because we would need an intrinsic for it...\r\n\r\n\u003e As for that and handleof I think it comes down to if there is enough benefit in adding it, particularly when it\u0027s just a think wrapper over .NET API calls.\r\n\r\nRight the problem is that this is something we can do efficiently at the IL level already today (ldtoken) but I fail to see how we can express it with an API. We could maybe do something like `RuntimeHelper.GetFieldOffset\u003cMyStruct\u003e(\"myfield\")` but it\u0027s no longer a ldtoken at the IL level, more work for the compiler (resolution from a string is quite bad as well, linear scan on fields...etc.)\r\n\r\n\u003e It would probably have to be through ldflda and managed pointer difference. \r\n\r\nNot sure, if ldflda is necessary here while we could implement it with an intrinsic directly. ",
                                           "updatedAt":  "2021-05-27T03:58:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQxMTg0Ng==",
                                           "createdAt":  "2021-07-13T21:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCEeBag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-07-13T21:26:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bbartels",
                                                                               "createdAt":  "2021-07-13T23:10:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-11-29T23:33:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This was prototyped for V6 but due to lack of language support around `ref structs` it must be deferred.\r\n\r\nThe prototype is based on `TypedReference` and is essentially as fast as IL Emit\u0027d code (up to ~10x faster than standard reflection) while also supporting `ref` and `out` parameters and `ref` return values. Note that converting the existing object-based reflection code to IL Emit and not using `TypedReference` is ~3x faster, meaning it is worthwhile to extend the Emit-based approach to existing reflection as well.",
                                           "updatedAt":  "2022-04-12T18:40:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQxNDM3Ng==",
                                           "createdAt":  "2021-07-13T21:26:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYN3gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2024-02-26T08:43:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@steveharter if you start it now, we can finish it before .NET 7 preview 1 😄 ",
                                           "updatedAt":  "2021-07-13T21:26:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46ifpY",
                                           "createdAt":  "2021-11-29T23:16:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCEepnw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2021-11-30T01:23:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "I could also really use this in Paint.NET -- if you can believe it, I\u0027m doing COM aggregation in C#. @tannergooding \u0027s TerraFX.Interop.Windows package is very helpful for a lot of it, but my hand-rolled CCWs still need a way to calculate `offsetof(field)` in order to shift the `this` pointer for the `InternalIUnknown` implementation that is required for the aggregated objects. Right now I have a workaround but it requires additional boilerplate added to every CCW.\r\n\r\n```\r\ninternal unsafe struct CBitmapLockCcw : IWICBitmapLock.Interface // also implements IUnknown.Interface\r\n{\r\n    ...\r\n    private static readonly long offsetof_vtblInternalIUnknown;\r\n    ...\r\n    static CBitmapLockCcw()\r\n    {\r\n        // This is the workaround for not having `offsetof`\r\n        CBitmapLockCcw self = default;\r\n        offsetof_vtblInternalIUnknown = (byte*)\u0026self.vtblInternalIUnknown - (byte*)\u0026self;\r\n    }\r\n\r\n    private static CBitmapLockCcw* GetThisFromInternalIUnknownThis(CBitmapLockCcw* pInternalIUnknownThis)\r\n    {\r\n        return (CBitmapLockCcw*)((byte*)pInternalIUnknownThis - offsetof_vtblInternalIUnknown);\r\n    }\r\n    ...\r\n    private IWICBitmapLock.Vtbl\u003cCBitmapLockCcw\u003e* vtblIWICBitmapLock;\r\n    private IUnknown.Vtbl\u003cCBitmapLockCcw\u003e* vtblInternalIUnknown;\r\n    private IUnknown* pUnkOuter;\r\n    ...\r\n    // Internal IUnknown\r\n    public HRESULT InternalQueryInterface(Guid* riid, void** ppvObject)\r\n    {\r\n        if (riid == null || ppvObject == null)\r\n        {\r\n            return E_POINTER;\r\n        }\r\n        ...\r\n    }\r\n\r\n    [UnmanagedCallersOnly]\r\n    private static int InternalQueryInterface(CBitmapLockCcw* pInternalIUnknownThis, Guid* riid, void** ppvObject)\r\n    {\r\n        return GetThisFromInternalIUnknownThis(pInternalIUnknownThis)-\u003eInternalQueryInterface(riid, ppvObject);\r\n    }  \r\n}\r\n```",
                                           "updatedAt":  "2021-11-29T23:16:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C3FoR",
                                           "createdAt":  "2022-05-10T00:48:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@steveharter in the Dependencies section above the only csharplang or roslyn issue I see there is https://github.com/dotnet/csharplang/pull/5602 which is already merged (and a design). Are there issues open that we can link there for our other dependencies on them? ",
                                           "updatedAt":  "2022-05-10T00:48:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pvgrx",
                                           "createdAt":  "2022-12-05T17:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IS4Code",
                                           "body":  "I absolutely love the usage of `TypedReference` here, but I also think some sort of ByRef and `ref struct` wrapper, similar to `System.Reflection.Pointer`, might be nice to have in the future, for convenient handling of `ref struct`s and references in general. It could be doable this way:\r\n```cs\r\nnamespace System.Reflection;\r\npublic sealed class ByReference : IDisposable\r\n{\r\n    public TypedReference Value { get; private set; }\r\n    private ByReference(TypedReference value) =\u003e Value = value;\r\n    public static TResult Create\u003cTArgs, TResult\u003e(TypedReference value, Func\u003cByReference, TArgs, TResult\u003e receiver, TArgs args) // also with delegate* and Action overloads\r\n    {\r\n        using var instance = new ByReference(value);\r\n        return receiver(instance, args);\r\n    }\r\n    public void Dispose() =\u003e Value = default;\r\n}\r\n```\r\nThe idea here being that `ByReference` is usable only inside `receiver`, since it is disposed after the call and doesn\u0027t expose the reference anymore (well, it could happen with threading, but declaring it thread-unsafe might be all that\u0027s needed to \"fix\" that). Once there is a way for `ref struct`s to be allowed as generic arguments (dotnet/csharplang#1148), a generic version like `ByReference\u003cref T\u003e` might be useful too. This style of continuation passing could also be combined with `await` to get rid of the nesting.\r\n\r\nThis is not such a big improvement compared to being able to use `TypedReference` directly, but I really hope it also becomes something reflection could recognize, similarly to `Pointer`, since it can be easily incorporated into existing code (using `Activator.CreateInstance`, `TypeDescriptor` and `dynamic`).",
                                           "updatedAt":  "2022-12-14T00:51:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QfY4q",
                                           "createdAt":  "2022-12-14T05:09:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "@IllidanS4 Your example would not work as written because `TypedReference` is a `ref struct` so it cannot be stored in a `class`. This basically looks like a variant of the pattern used in `string.Create`.",
                                           "updatedAt":  "2022-12-14T05:09:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Qg9ba",
                                           "createdAt":  "2022-12-14T10:27:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IS4Code",
                                           "body":  "\u003e @IllidanS4 Your example would not work as written because `TypedReference` is a `ref struct` so it cannot be stored in a `class`.\r\n\r\n@DaZombieKiller I am well aware of that; this is just to illustrate its function, sans the limitation of C#. I it doable by storing `TypedReference*` instead of `TypedReference`, but I am hoping for something standardized and recognized by reflection (even if it would have to be implemented using some magic).\r\n\r\nGoing a bit further, perhaps a custom interface would be ever better:\r\n```cs\r\npublic interface IReflectionArgument\r\n{\r\n    TypedReference Value { get; }\r\n}\r\n```\r\nSo that anything that implements it could provide the actual value of the argument directly. The existing `Pointer` class could implement it, as well as the proposed `ByReference`.",
                                           "updatedAt":  "2022-12-14T10:27:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QhubX",
                                           "createdAt":  "2022-12-14T11:17:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Do you have any examples of where and how this would be used? I\u0027m having trouble seeing the benefits over just using `TypedReference` directly (unless I\u0027m misunderstanding the purpose).\r\n\r\nSince a `TypedReference` is a `ref struct`, `ref` escape rules should already prevent you from holding onto one beyond its lifetime. `ByReference.Create` seems to duplicate this, while also introducing the overhead of a delegate and `try`/`finally` block.\r\n\r\nI could potentially see the advantage for storing a `ref` to a field inside a `class`, but that doesn\u0027t really require anything new other than the ability to get a `ref` to the field to begin with. For example, here\u0027s an implementation I\u0027ve used before (based on how portable `Span\u003cT\u003e` worked):\r\n```cs\r\npublic readonly struct InteriorRef\u003cT\u003e\r\n{\r\n    private readonly StrongBox\u003cT\u003e _pinnable;\r\n\r\n    private readonly int _offset;\r\n\r\n    public ref T Value =\u003e ref Unsafe.AddByteOffset(ref _pinnable.Value!, _offset);\r\n\r\n    public InteriorRef(object obj, ref T reference)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(obj);\r\n        InteriorRef.ThrowIfInvalidReference(obj, ref reference);\r\n        _pinnable = Unsafe.As\u003cStrongBox\u003cT\u003e\u003e(obj);\r\n        _offset   = (int)Unsafe.ByteOffset(ref _pinnable.Value, ref reference);\r\n    }\r\n\r\n    public ref T GetPinnableReference()\r\n    {\r\n        return ref Value;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-12-14T11:17:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QjJTW",
                                           "createdAt":  "2022-12-14T13:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IS4Code",
                                           "body":  "\u003e Do you have any examples of where and how this would be used? I\u0027m having trouble seeing the benefits over just using `TypedReference` directly (unless I\u0027m misunderstanding the purpose).\r\n\r\n@DaZombieKiller Perhaps I have not expressed myself clearly; the purpose is not to add a new way of handling references in general, but a way to bridge the gap between ref structs and standard reflection, to be able to incorporate these values even in code that uses the (soon to be) old-style reflection with `object`, to wrap them in something boxable (like `Pointer.Box`) but still safe to store and pass to any code, as long as the original `ByReference.Create` method is being executed.\r\n\r\nSo one scenario would be simply:\r\n```cs\r\nMethodInfo methodThatTakesSpanByte = ...;\r\n\r\nSpan\u003cbyte\u003e arg = stackalloc byte[5];\r\nByReference.Create\u003cValueTuple, object\u003e(__makeref(arg), (byref, _) =\u003e methodThatTakesSpanByte.Invoke(null, byref), default);\r\n// Or perhaps simply, with an overload without TArgs\r\nByReference.Create(__makeref(arg), byref =\u003e methodThatTakesSpanByte.Invoke(null, byref));\r\n```\r\nAssuming `MethodInfo.Invoke` would understand an instance of `ByReference` just like it understands `Pointer`. Yes, this will also be possible with the new high-speed `TypedReference`-based reflection, but that would require getting around `ref struct` semantics \r\n\r\n----\r\n\r\nAnother use of this, unrelated to reflection, would be allowing to use ref structs safely through lambdas, like this:\r\n```cs\r\nSpan\u003cint\u003e arg = ...;\r\nList\u003cint\u003e list = ...;\r\nByReference.Create(__makeref(arg), byref =\u003e list.Sum(i =\u003e __refvalue(byref.Value, Span\u003cint\u003e)[i]));\r\n```",
                                           "updatedAt":  "2022-12-14T13:48:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yp4wg",
                                           "createdAt":  "2023-03-28T18:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cyraid",
                                           "body":  "Definitely being able to get offset of information would be nice. Ultimately, being able to set fields directly at startup (before instantiation) via a ptr would be nice (only knowing the instance ptr and field offset).",
                                           "updatedAt":  "2023-03-28T18:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ7d1",
                                           "createdAt":  "2023-07-24T20:59:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9.0. See comments at https://github.com/dotnet/runtime/issues/10057#issuecomment-1648580422",
                                           "updatedAt":  "2023-07-24T20:59:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p8y9K",
                                           "createdAt":  "2023-10-24T15:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e It would probably have to be through ldflda and managed pointer difference. There\u0027s an issue discussing that if we were to allow `no.nullcheck ldflda`, it would be doable with nice codegen - [#40021 (comment)](https://github.com/dotnet/runtime/issues/40021#issuecomment-666596692).\r\n\r\nHey, reviving the topic, I\u0027m worried that this meta issue with a faster reflection is going to take more time, while we are specifically looking for a solution for field offset. Following the issue #40021 and testing it again with .NET 7 on sharplab [here](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aaGeGB6PgwDmECABMGkMTCEwAdgxABKAIQMAdJobAArhgYBLObgzY5+uToA2VhrABmDGAm696TckgY7j2ezENzBgB5e3tcGAwAQVwAOWsrAAolVx5Oal5MhgBRBGx8AAcrGAAqBgKGAF4GSxsAblSs4gB2BkSjDCVEgDICuAA+ADEIHSgGOAZegYAtGCgIJQaM3gBfTMbG9xMoHTB9XPyimEb0rLdGYABPDADZ+aXGzIKoAwA3bBvta4CAfXI0Bg/UgAn50B7LM7uK6fYajJaZFY0FZAA), for the following C# code:\r\n\r\n```c#\r\nusing System;\r\npublic class C {\r\n\r\n    // good codegen :)! ... but instant null ref ex\r\n    public static unsafe int OffsetAsNull()\r\n    {\r\n        Example* p = null;\r\n        return (int)(\u0026p-\u003eFour - \u0026p-\u003eZero);\r\n    }    \r\n    \r\n    public struct Example\r\n    {\r\n        public byte Zero;\r\n\r\n        private byte _1, _2, _3;\r\n\r\n        public byte Four;\r\n    }\r\n}\r\n```\r\n\r\nWe are getting the following codegen, which has a NRE:\r\n\r\n```\r\nC.OffsetAsNull()\r\n    L0000: movsx rax, byte ptr [0] // NRE\r\n    L0009: mov eax, 4\r\n    L000e: ret\r\n```\r\n\r\nWould it be possible, as a short term workaround, to check during JIT optimization for the presence of an offset calculation pattern and not generate any NRE? I\u0027m more than willing to try to make a PR if such optimization could be accepted 🙂 ",
                                           "updatedAt":  "2023-10-24T15:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p86B-",
                                           "createdAt":  "2023-10-24T16:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Instead of the above, I think a faster way to make traction here would be to look at a pattern like [`Unsafe.ByteOffset()`](https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.byteoffset) and propose a new API that the JIT can lower safely.",
                                           "updatedAt":  "2023-10-24T16:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p8648",
                                           "createdAt":  "2023-10-24T16:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Instead of the above, I think a faster way to make traction here would be to look at a pattern like [`Unsafe.ByteOffset()`](https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.byteoffset) and propose a new API that the JIT can lower safely.\r\n\r\nHow would such API work? Are you thinking of something like `Unsafe.ByteOffset\u003cExample\u003e(\"Four\")` requiring the first parameter to be a const string?",
                                           "updatedAt":  "2023-10-24T16:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p8-IY",
                                           "createdAt":  "2023-10-24T16:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e How would such API work? Are you thinking of something like `Unsafe.ByteOffset\u003cExample\u003e(\"Four\")` requiring the first parameter to be a const string?\r\n\r\nI was basing my suggestion on the following statement:\r\n\r\n\u003e Would it be possible, as a short term workaround, to check during JIT optimization for the presence of an offset calculation pattern and not generate any NRE?\r\n\r\nI don\u0027t think permitting the JIT to \"allow\" that sort of operation is very tenable. Instead I think it would be much easier to take the pattern below and perform the operation. Basically, elide the `new()` and compute the result. It is easy to determine the default ctor is non-mutating and then unused, therefore can be elided. The call to `ByteOffset()` can then be pattern matched and the constant returned.\r\n\r\n```csharp\r\nExample e = new();\r\nByteOffset(ref p.Four, ref p.Zero);\r\n```\r\n\r\nMy only quibble was with permitting the current code, the idea itself seems reasonable to me.\r\n\r\n",
                                           "updatedAt":  "2023-10-24T16:23:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9A4E",
                                           "createdAt":  "2023-10-24T16:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I don\u0027t think permitting the JIT to \"allow\" that sort of operation is very tenable. Instead I think it would be much easier to take the pattern below and perform the operation. Basically, elide the `new()` and compute the result. It is easy to determine the default ctor is non-mutating and then unused, therefore can be elided. The call to `ByteOffset()` can then be pattern matched and the constant returned.\r\n\r\nOk, thanks for the clarification, understood. I\u0027m not sure if that would be more practical. We have cases where we would like to use this with e.g Class instances that could have a constructor. Removing the call to `new()` would be more laborious to detect and quite a stretch in terms of JIT optimization, compared to e.g allowing difference between 2 ldfla if both target is null.",
                                           "updatedAt":  "2023-10-24T16:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9Jnv",
                                           "createdAt":  "2023-10-24T16:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKzSTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-10-24T17:57:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Would it be possible, as a short term workaround, to check during JIT optimization for the presence of an offset calculation pattern and not generate any NRE?\r\n\r\nI do not think we should be deviating from the speced behavior to make this pattern \"work\".",
                                           "updatedAt":  "2023-10-24T16:49:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9aJz",
                                           "createdAt":  "2023-10-24T17:31:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IS4Code",
                                           "body":  "\u003e \u003e I don\u0027t think permitting the JIT to \"allow\" that sort of operation is very tenable. Instead I think it would be much easier to take the pattern below and perform the operation. Basically, elide the `new()` and compute the result. It is easy to determine the default ctor is non-mutating and then unused, therefore can be elided. The call to `ByteOffset()` can then be pattern matched and the constant returned.\r\n\u003e \r\n\u003e Ok, thanks for the clarification, understood. I\u0027m not sure if that would be more practical. We have cases where we would like to use this with e.g Class instances that could have a constructor. Removing the call to `new()` would be more laborious to detect and quite a stretch in terms of JIT optimization, compared to e.g allowing difference between 2 ldfla if both target is null.\r\n\r\n@xoofx Why are constructors an issue when you have `FormatterServices.GetSafeUninitializedObject`? And in any case the offset is basically constant for the given members so you can pretty much cache the result and forget any expensive operation happened.",
                                           "updatedAt":  "2023-10-24T17:31:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9fDf",
                                           "createdAt":  "2023-10-24T17:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e @xoofx Why are constructors an issue when you have `FormatterServices.GetSafeUninitializedObject`? And in any case the offset is basically constant for the given members so you can pretty much cache the result and forget any expensive operation happened.\r\n\r\nWe cannot afford creating thousands of uninitialised objects just to get the offset of their fields. The offset of a field is an information fully available at JIT/AOT time by the compiler, that in the end resolves to a constant. I participated to these discussions already 5 years ago, foreseeing that we would have such issues when migrating to CoreCLR.\r\n\r\nIn the context of Unity Game Engine, we are actually starting to get some stuffs running with CoreCLR, which is great, but we are also starting to see teams that were relying on field offsets for fast serialization/animation systems getting blocked, and we don\u0027t have an easy solution for them right now.\r\n\r\n\u003e I do not think we should be deviating from the speced behavior to make this pattern \"work\".\r\n\r\nUnderstood. We will sync offline with your team to see how we could proceed. Thanks.",
                                           "updatedAt":  "2023-10-24T17:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9hNG",
                                           "createdAt":  "2023-10-24T17:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYN8qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-24T17:51:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2023-10-24T17:52:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2023-10-24T18:56:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-10-24T19:10:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2024-02-26T08:53:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We can consider adding `UnsafeAccessorKind.FieldOffset`. It would return the field offset when it is available and throw when it is not (e.g. for EnC added fields).",
                                           "updatedAt":  "2023-10-24T17:50:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9hoJ",
                                           "createdAt":  "2023-10-24T17:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e We can consider adding `UnsafeAccessorKind.FieldOffset`. It would return the field offset when it is available and throw when it is not (e.g. for EnC added fields).\r\n\r\nOh, that\u0027s actually a pretty nice idea, I like it! 😍 ",
                                           "updatedAt":  "2023-10-24T17:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9qzk",
                                           "createdAt":  "2023-10-24T18:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e We can consider adding `UnsafeAccessorKind.FieldOffset`. It would return the field offset when it is available and throw when it is not (e.g. for EnC added fields).\r\n\r\n@jkotas Are you suggesting the following? The assumption being `Zero` would need to be an instance field and not a static field.\r\n\r\n```csharp\r\n[UnsafeAccessor(UnsafeAccessorKind.FieldOffset, Name=\"Zero\")]\r\nextern static nint GetZeroOffset(Example d);\r\n```\r\n",
                                           "updatedAt":  "2023-10-24T18:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9uD1",
                                           "createdAt":  "2023-10-24T18:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e @jkotas Are you suggesting the following? The assumption being `Zero` would need to be an instance field and not a static field.\r\n\u003e \r\n\u003e ```cs\r\n\u003e [UnsafeAccessor(UnsafeAccessorKind.FieldOffset, Name=\"Zero\")]\r\n\u003e extern static nint GetZeroOffset(Example d);\r\n\u003e ```\r\n\r\nYeah, I was starting to think how that would work. In the end, we would always pass a `null` reference for such method, but it might feel a bit awkward... Similarly, for struct, we should have to pass a default value, hoping that the JIT will discard the struct initialized on the stack (unless we could support that we could declare it by ref and pass a null ref?)\r\n\r\nIdeally, that would be easier to have something like this:\r\n\r\n```c#\r\n[UnsafeAccessor(UnsafeAccessorKind.FieldOffset, Name=\"Zero\")]\r\nextern static nint GetZeroOffset\u003cT\u003e();\r\n```\r\n\r\nBut it feels also a bit awkward as well, as that could be error prone. Thoughts?",
                                           "updatedAt":  "2023-10-24T18:20:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9wL7",
                                           "createdAt":  "2023-10-24T18:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKzd4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-24T18:27:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e hoping that the JIT will discard the struct initialized on the stack (unless we could support that we could declare it by ref and pass a null ref?)\r\n\r\nThere are existing cases where the first argument is ignored (for example, `UnsafeAccessorKind.StaticField`) we can do the same thing here and permit a `ref` that accepts a null reference through `Unsafe.NullRef\u003cT\u003e()`.",
                                           "updatedAt":  "2023-10-24T18:26:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9xo3",
                                           "createdAt":  "2023-10-24T18:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Great. I can create a separate PR proposal for the small API change (adding the enum `UnsafeAccessorKind.FieldOffset`) and would be happy to implement it if that\u0027s accepted. 😊",
                                           "updatedAt":  "2023-10-24T18:30:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p93fG",
                                           "createdAt":  "2023-10-24T18:45:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKz22Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-24T19:30:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@xoofx I don\u0027t see why this would be much of an issue. Would be appreciative of any help in this area. The place to start is at:\r\n\r\nhttps://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/coreclr/vm/prestub.cpp#L1431",
                                           "updatedAt":  "2023-10-24T18:45:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-Ws9",
                                           "createdAt":  "2023-10-24T20:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "It looks like the `GenerateAccessor` is generating plain IL (e.g `pCode-\u003eEmitLDFLDA(pCode-\u003eGetToken(cxt.TargetField));break;`).\r\n\r\nHow do I generate IL at this level that could avoid the null check? (otherwise I\u0027m back to the similar restrictions that we are hitting with existing unsafe workaround)",
                                           "updatedAt":  "2023-10-24T20:04:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-ZVx",
                                           "createdAt":  "2023-10-24T20:12:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK0LDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-10-24T20:24:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Generate the IL that loads the constant and returns it. The IL is generated at runtime where all offsets are known. You need to be careful with R2R support under crossgen2 - the offset is not a constant for types outside the current version bubble.",
                                           "updatedAt":  "2023-10-24T20:12:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-d81",
                                           "createdAt":  "2023-10-24T20:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "For example, take a look at [`FieldDesc::GetOffset()`](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/coreclr/vm/field.h#L168-L198). This should be enough to get a simple POC. There are many issues to consider though - EnC, crossgen2, blittability, etc.",
                                           "updatedAt":  "2023-10-24T20:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-d-v",
                                           "createdAt":  "2023-10-24T20:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK0MDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-10-24T20:26:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Generate the IL that loads the constant and returns it. The IL is generated at runtime where all offsets are known. You need to be careful with R2R support under crossgen2 - the offset is not a constant for types outside the current version bubble.\r\n\r\nOh, right, I found that I have actually access to `FieldDesc` through the context, so I can fetch directly the offset. At least getting a minimum prototype should be hopefully not too complicated. Will open a PR once I have something working at least to verify it is the right direction.",
                                           "updatedAt":  "2023-10-24T20:26:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-eG8",
                                           "createdAt":  "2023-10-24T20:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e For example, take a look at [`FieldDesc::GetOffset()`](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/coreclr/vm/field.h#L168-L198). This should be enough to get a simple POC. There are many issues to consider though - EnC, crossgen2, blittability, etc.\r\n\r\nhehe, yep, that\u0027s exactly I found! 😅 ",
                                           "updatedAt":  "2023-10-24T20:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-qGi",
                                           "createdAt":  "2023-10-24T21:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "My apologies for this very basic question:\r\n\r\nI have modified the `src\\tests\\baseservices\\compilerservices\\UnsafeAccessors\\UnsafeAccessorsTests.cs` and I\u0027m trying to run it as an individual test with the [doc](https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/coreclr/testing.md#running-individual-tests) but the expected folder:\r\n\r\n```\r\n$Env:CORE_ROOT = \u0027\u003crepo_root\u003e\\artifacts\\tests\\coreclr\\windows.\u003cArch\u003e.\u003cConfiguration\u003e\\Tests\\Core_Root\u0027\r\n```\r\n\r\ndoes not contain `corerun` (and it looks like it needs to run xunit anyway). \r\n\r\nSo I\u0027m not sure how to run the test easily. Any tip on how to run it?",
                                           "updatedAt":  "2023-10-24T21:02:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-uHA",
                                           "createdAt":  "2023-10-24T21:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "The Core Root needs to be created. You can do this quickly by running the following:\r\n\r\n`.\\src\\tests\\build.cmd %RUNTIME_ARCH% %RUNTIME_CONFIG% skipnative skipmanaged /p:LibrariesConfiguration=%LIBS_CONFIG%`",
                                           "updatedAt":  "2023-10-24T21:14:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-ujB",
                                           "createdAt":  "2023-10-24T21:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@xoofx It is in the referenced file, but it is a term that isn\u0027t obvious - https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/coreclr/testing.md#building-the-core_root",
                                           "updatedAt":  "2023-10-24T21:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-6Lj",
                                           "createdAt":  "2023-10-24T21:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Created a proof of concept PR #93946 with the `Running Verify_AccessFieldOffsetClass` test passing.\r\n\r\n(Edit: The struggle I had above running the tests is likely that originally, I compiled clr+libs in release while I took the default - debug when compiling the tests 🤦) ",
                                           "updatedAt":  "2023-10-24T21:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_bRG",
                                           "createdAt":  "2023-10-24T23:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I feel like adding a property called `Offset` on `RuntimeFieldHandle` would make more sense here, the issue is though that the language doesn\u0027t expose `fieldof` today.",
                                           "updatedAt":  "2023-10-24T23:46:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_fCP",
                                           "createdAt":  "2023-10-25T00:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK7eEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "weltkante",
                                                                               "createdAt":  "2023-10-25T10:30:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-10-25T17:51:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e \u003e It would probably have to be through ldflda and managed pointer difference. There\u0027s an issue discussing that if we were to allow `no.nullcheck ldflda`, it would be doable with nice codegen - [#40021 (comment)](https://github.com/dotnet/runtime/issues/40021#issuecomment-666596692).\r\n\u003e \r\n\u003e Hey, reviving the topic, I\u0027m worried that this meta issue with a faster reflection is going to take more time, while we are specifically looking for a solution for field offset. Following the issue #40021 and testing it again with .NET 7 on sharplab [here](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aaGeGB6PgwDmECABMGkMTCEwAdgxABKAIQMAdJobAArhgYBLObgzY5+uToA2VhrABmDGAm696TckgY7j2ezENzBgB5e3tcGAwAQVwAOWsrAAolVx5Oal5MhgBRBGx8AAcrGAAqBgKGAF4GSxsAblSs4gB2BkSjDCVEgDICuAA+ADEIHSgGOAZegYAtGCgIJQaM3gBfTMbG9xMoHTB9XPyimEb0rLdGYABPDADZ+aXGzIKoAwA3bBvta4CAfXI0Bg/UgAn50B7LM7uK6fYajJaZFY0FZAA), for the following C# code:\r\n\u003e \r\n\u003e ```cs\r\n\u003e using System;\r\n\u003e public class C {\r\n\u003e \r\n\u003e     // good codegen :)! ... but instant null ref ex\r\n\u003e     public static unsafe int OffsetAsNull()\r\n\u003e     {\r\n\u003e         Example* p = null;\r\n\u003e         return (int)(\u0026p-\u003eFour - \u0026p-\u003eZero);\r\n\u003e     }    \r\n\u003e     \r\n\u003e     public struct Example\r\n\u003e     {\r\n\u003e         public byte Zero;\r\n\u003e \r\n\u003e         private byte _1, _2, _3;\r\n\u003e \r\n\u003e         public byte Four;\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e We are getting the following codegen, which has a NRE:\r\n\u003e \r\n\u003e ```\r\n\u003e C.OffsetAsNull()\r\n\u003e     L0000: movsx rax, byte ptr [0] // NRE\r\n\u003e     L0009: mov eax, 4\r\n\u003e     L000e: ret\r\n\u003e ```\r\n\u003e \r\n\u003e Would it be possible, as a short term workaround, to check during JIT optimization for the presence of an offset calculation pattern and not generate any NRE? I\u0027m more than willing to try to make a PR if such optimization could be accepted 🙂\r\n\r\nWe added JIT support for some of these patterns in .NET 8 in #81998. See e.g. this example: https://godbolt.org/z/or76frsWs\r\n",
                                           "updatedAt":  "2023-10-25T00:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_mnR",
                                           "createdAt":  "2023-10-25T00:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Shouldn\u0027t `RuntimeHelpers.GetRawData` be made `public` alongside the addition of `UnsafeAccessorKind.FieldOffset`? Otherwise there is no safe way to get the base reference for an arbitrary `object`. You\u0027d have no way to actually _use_ the offset in that scenario...\r\n\r\nWithout `GetRawData`, you need to do something like `Unsafe.As\u003cStrongBox\u003cT\u003e\u003e(obj).Value`, which has the potential to confuse the JIT because `obj` is not a `StrongBox\u003cT\u003e`.\r\n",
                                           "updatedAt":  "2023-10-25T00:31:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_ol9",
                                           "createdAt":  "2023-10-25T00:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK1PgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2023-10-25T00:42:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2023-10-25T00:44:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e I feel like adding a property called `Offset` on `RuntimeFieldHandle` would make more sense here, the issue is though that the language doesn\u0027t expose `fieldof` today.\n\nActually, we could add UnsafeAccessor for Field and Method handles then instead to solve the lack of language features for fieldof and methodof and just expose the Offset as an intrinsic.",
                                           "updatedAt":  "2023-10-25T00:41:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_p7d",
                                           "createdAt":  "2023-10-25T00:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "We were talking the other day about how IL allows overloading fields, and hence how you couldn\u0027t have an unsafe accessor returning eg. a `ref readonly T` to a type `T` having a base conversion from `TField`, because then you wouldn\u0027t be able to disambiguate which field exactly you\u0027re looking for. If you had a field accessor just returning a `RuntimeFieldHandle`, wouldn\u0027t you hit the same problem if multiple fields of different types with the same name were present in IL? 🤔",
                                           "updatedAt":  "2023-10-25T00:47:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_sK4",
                                           "createdAt":  "2023-10-25T00:57:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e We were talking the other day about how IL allows overloading fields, and hence how you couldn\u0027t have an unsafe accessor returning eg. a `ref readonly T` to a type `T` having a base conversion from `TField`, because then you wouldn\u0027t be able to disambiguate which field exactly you\u0027re looking for. If you had a field accessor just returning a `RuntimeFieldHandle`, wouldn\u0027t you hit the same problem if multiple fields of different types with the same name were present in IL? 🤔\n\nIt could be solved by adding a fake parameter for return type just like there is one for declaring type.",
                                           "updatedAt":  "2023-10-25T00:57:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p_-no",
                                           "createdAt":  "2023-10-25T02:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Shouldn\u0027t RuntimeHelpers.GetRawData be made public alongside the addition of UnsafeAccessorKind.FieldOffset? Otherwise there is no safe way to get the base reference for an arbitrary object. You\u0027d have no way to actually use the offset in that scenario...\r\n\r\nYes, this would need to be thought through if the raw offsets are enabled for classes, and not just structs. Another problem with classes is that field offset is not always available. https://github.com/dotnet/runtime/issues/28001 has related discussion.",
                                           "updatedAt":  "2023-10-25T02:16:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qA7_v",
                                           "createdAt":  "2023-10-25T06:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e \u003e Shouldn\u0027t RuntimeHelpers.GetRawData be made public alongside the addition of UnsafeAccessorKind.FieldOffset? Otherwise there is no safe way to get the base reference for an arbitrary object. You\u0027d have no way to actually use the offset in that scenario...\r\n\u003e \r\n\u003e Yes, this would need to be thought through if the raw offsets are enabled for classes, and not just structs. Another problem with classes is that field offset is not always available. #28001 has related discussion.\r\n\r\nCouldn\u0027t we add instead a new intrinsic to `Unsafe` class that would make the usage of the offset quite more straightforward:\r\n\r\n```c#\r\npublic static ref T AddByteOffset\u003cT\u003e(object obj, nint offset);\r\n// ldarg.0, ldarg.1, add, ret\r\n``` ",
                                           "updatedAt":  "2023-10-25T06:55:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qD4H7",
                                           "createdAt":  "2023-10-25T14:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e ```csharp\r\n\u003e public static ref T AddByteOffset\u003cT\u003e(object obj, nint offset);\r\n\u003e // ldarg.0, ldarg.1, add, ret\r\n\u003e ```\r\n\r\nI would think it couldn\u0027t be implemented like that, since it\u0027s invalid IL, but if there was a way to get the reference to field 0 from and object, and we did that after `ldarg.0`, it should work.\r\n\r\nIf we got this API (which I personally would like to get), it would be great if we also got the corresponding inverse API (should both of these be `nuint`? I think so personally, but it doesn\u0027t really matter to me - just makes sense since negative doesn\u0027t make sense for either of these):\r\n```csharp\r\npublic static object? GetObject\u003cT\u003e(ref T reference, out nuint offset);\r\n```",
                                           "updatedAt":  "2023-10-25T14:30:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qEFQH",
                                           "createdAt":  "2023-10-25T14:50:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I would think it couldn\u0027t be implemented like that, since it\u0027s invalid IL,\r\n\r\nJust tested and calling the following code is working with .NET 7 JIT, but I haven\u0027t checked the specs in a while for such operation. One unknown I have with CoreCLR JIT/GC is what is seen after the add: is it an object ref, or is it a ref T. If it is the former, that could create GC corruption.\r\n\r\n```\r\n  .method public hidebysig static !!T\u0026 AddByteOffset\u003cT\u003e(object source, native int byteOffset) cil managed aggressiveinlining\r\n  {\r\n        .custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = ( 01 00 00 00 )\r\n        .maxstack 2\r\n        ldarg.0\r\n        ldarg.1\r\n        add\r\n        ret\r\n  } // end of method Unsafe::AddByteOffset\r\n```",
                                           "updatedAt":  "2023-10-25T14:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qEicc",
                                           "createdAt":  "2023-10-25T15:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK69dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-25T16:32:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"One unknown I have with CoreCLR JIT/GC is what is seen after the add: is it an object ref, or is it a ref T.\"\r\n\r\nAs far as I know, the type you declare in C#/IL doesn\u0027t matter. As far as the GC is concerned, that is simply \"some GC pointer\". In this case, it\u0027ll fall inside the data of an object, hence it\u0027s an interior pointer, so during mark the GC will consider the entire object as reachable, that\u0027s it. Shouldn\u0027t really cause any problems. In fact, reinterpreting the type of interior pointers (or GC refs in general) is quite common for various reasons.",
                                           "updatedAt":  "2023-10-25T15:48:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qE2Xj",
                                           "createdAt":  "2023-10-25T16:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Couldn\u0027t we add instead a new intrinsic to `Unsafe` class that would make the usage of the offset quite more straightforward\r\n\r\nAn additional benefit of providing `ref T Unsafe.AddByteOffset\u003cT\u003e(object obj, nint offset);` is that it makes it relatively similar when dealing with struct field offsetting, difference being that the struct field offsetting would require an additional ref cast.",
                                           "updatedAt":  "2023-10-25T16:36:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qFICJ",
                                           "createdAt":  "2023-10-25T17:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK8KIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-25T17:25:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-10-25T19:48:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Just tested and calling the following code is working with .NET 7 JIT, but I haven\u0027t checked the specs in a while for such operation. \r\n\r\nThis is invalid IL. If you run it on checked JIT, you will see all sorts of asserts. The first one is:\r\n\r\n`Assertion failed \u0027genActualType(op1-\u003eTypeGet()) != TYP_REF \u0026\u0026 genActualType(op2-\u003eTypeGet()) != TYP_REF : Possibly bad IL with CEE_add at offset 0002h (op1=ref op2=long stkDepth=0)\u0027 in \u0027Test:AddByteOffset[ubyte](System.Object,long):byref\u0027 during \u0027Importation\u0027 (IL size 4; hash 0xcdd16edf; Tier0)`\r\n\r\n It is likely that that the JIT can either crash or produce bad code when this gets method inlined into a callsite of a particular shape.",
                                           "updatedAt":  "2023-10-25T17:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qFLKC",
                                           "createdAt":  "2023-10-25T17:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e This is invalid IL. If you run it on checked JIT, you will see all sorts of asserts. The first one is:\r\n\r\nFair enough. We definitely don\u0027t want invalid IL 😅 \r\n\r\nSo, exposing `RuntimeHelpers.GetRawData` would be the way and it would require to shift the offset with the method table in the UnsafeAccessor code in my PR, or could we provide a `ref byte Unsafe.AsByteRef(object) { ldarg.0; ret; }`?\r\n\r\nI\u0027m ok with `RuntimeHelpers.GetRawData` if it is the preferred way.",
                                           "updatedAt":  "2023-10-25T17:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qGC1l",
                                           "createdAt":  "2023-10-25T20:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJeHMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-26T17:09:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Enderlook",
                                                                               "createdAt":  "2025-03-11T22:47:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "My opinion is that the following set of APIs makes the most sense:\r\n\r\n```csharp\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    public static class RuntimeHelpers\r\n    {\r\n        public static ref byte GetRawData(object? o);\r\n        public static object? GetObject(ref byte reference, out nuint offset);\r\n    }\r\n}\r\n```\r\n\r\nThis provides the forward and reverse API to convert between byrefs and objects.\r\n\r\nThe lack of `\u003cT\u003e` reduces the number of generic instantiations we will get (if that still matters on some platforms? I can\u0027t recall).\r\n\r\nNote `object?`: since we will need to check null anyway, I think it makes sense to check for null and give a null byref for `GetRawData`, instead of throwing, since it should be able to emit better code for that, and for `GetObject` it makes sense since `reference` could point to unmanaged/stack memory (in which case `offset` would equal the pointer).\r\n\r\nWhen the documentation is written for these pair of APIs, we will need to consider their behaviour with strings and arrays - currently they would probably return a ref to the start of the length field - if this is how we want it to work (which probably makes sense), then we should document the offset from the length field to the first entry in these cases so people can use it correctly for these OR we could document that it\u0027s undefined to use these APIs and then try to determine/select what specific index it\u0027s at (this would allow us to change them to be 64 bit length in the future if needed), which could make sense since there are other APIs for working with these special cases in the \"intended\" way when indexing is desired.",
                                           "updatedAt":  "2023-10-25T20:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qLK_3",
                                           "createdAt":  "2023-10-26T15:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Linking Roslyn issue https://github.com/dotnet/roslyn/issues/68000 where you can\u0027t get an offset of a `ref` field.\r\n",
                                           "updatedAt":  "2023-10-26T15:05:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qLp31",
                                           "createdAt":  "2023-10-26T16:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLEGJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-26T17:09:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-10-26T19:25:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We now have the PR at https://github.com/dotnet/runtime/pull/93946 which adds `UnsafeAccessorKind.FieldOffset` (API issue pending).\r\n\r\nBut we need a champion to create the API issue for the `RuntimeHelpers.GetRawData()` and `.GetObject()` proposal above so we can move the discussion there.",
                                           "updatedAt":  "2023-10-26T16:18:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qPsNu",
                                           "createdAt":  "2023-10-27T08:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLJJAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2023-10-27T09:02:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2023-10-27T13:21:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e But we need a champion to create the API issue for the `RuntimeHelpers.GetRawData()`\r\n\r\nI simply reopened #28001 since it already has a bunch of discussion and it\u0027s exactly that proposal. I cleared the milestone and marked untriaged.",
                                           "updatedAt":  "2023-10-27T08:18:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a7lpO",
                                           "createdAt":  "2025-01-17T22:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "It\u0027d be very nice if the `System.TypedReference` modernization can happen for 10.0, all the pieces should be in place. For the time being I\u0027m using my own version.\n\n```cs\nreadonly ref struct TypedReference\n{\n    readonly ref byte _value;\n    public Type Type { get; }\n\n    TypedReference(ref byte target, Type type)\n    {\n        _value = ref target;\n        Type = type;\n    }\n\n    public ref T UnsafeAsRef\u003cT\u003e() =\u003e ref Unsafe.As\u003cbyte, T\u003e(ref _value);\n    public ref T AsRef\u003cT\u003e()\n    {\n        if (typeof(T) != Type)\n            ThrowInvalid();\n\n        return ref Unsafe.As\u003cbyte, T\u003e(ref _value);\n    }\n    static void ThrowInvalid() =\u003e throw new InvalidCastException(\"Invalid type given.\");\n\n    public static TypedReference Create\u003cT\u003e(ref T value) =\u003e new(ref Unsafe.As\u003cT, byte\u003e(ref value), typeof(T));\n}\n```\n\nWithin controlled and easily verifiable areas I have also used an UnsafeReference variant. This is essentially just a `ref byte` ref struct with some validation baked in for debug (though that won\u0027t really help if the BCL would ship that to consumers).\n\nMaybe somebody finds this useful:\n```cs\n#if DEBUG\nreadonly ref struct UnsafeReference\n{\n    readonly ref byte _value;\n    readonly Type _type;\n\n    UnsafeReference(ref byte target, Type type)\n    {\n        _value = ref target;\n        _type = type;\n    }\n\n    public ref T UnsafeAsRef\u003cT\u003e() =\u003e ref Unsafe.As\u003cbyte, T\u003e(ref _value);\n    public ref T AsRef\u003cT\u003e()\n    {\n        Debug.Assert(typeof(T) == _type);\n        return ref Unsafe.As\u003cbyte, T\u003e(ref _value);\n    }\n\n    public static implicit operator UnsafeReference(TypedReference typedReference) =\u003e new(ref typedReference.UnsafeAsRef\u003cbyte\u003e(), typedReference.Type);\n    public static UnsafeReference Create\u003cT\u003e(ref T value) =\u003e new(ref Unsafe.As\u003cT, byte\u003e(ref value), typeof(T));\n}\n#else\nreadonly ref struct UnsafeReference\n{\n    readonly ref byte _value;\n\n    UnsafeReference(ref byte target)\n    {\n        _value = ref target;\n    }\n\n    public ref T UnsafeAsRef\u003cT\u003e() =\u003e ref Unsafe.As\u003cbyte, T\u003e(ref _value);\n    public ref T AsRef\u003cT\u003e() =\u003e ref UnsafeAsRef\u003cT\u003e();\n\n    public static implicit operator UnsafeReference(TypedReference typedReference) =\u003e new(ref typedReference.UnsafeAsRef\u003cbyte\u003e());\n    public static UnsafeReference Create\u003cT\u003e(ref T value) =\u003e new(ref Unsafe.As\u003cT, byte\u003e(ref value));\n}\n#endif\n```",
                                           "updatedAt":  "2025-01-17T23:03:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bTBqS",
                                           "createdAt":  "2025-01-21T18:27:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e It\u0027d be very nice if the System.TypedReference modernization can happen for 10.0, all the pieces should be in place.\n\nThe pieces are not all in place yet. `TypedReference` is effectively an opaque storage for a `ref` value of _any type_. That includes `ref struct` and our lifetime model does not support that yet. There is [a proposal][expand-ref] that will close this gap enough that we could correctly model `TypedReference` in the type system. It would require `unsafe` when unpacking an instance and getting a value out by `ref` but otherwise would be safe. \n\n\u003e It\u0027d be very nice if the System.TypedReference modernization can happen for 10.0, a\n\nThat seems unlikely at this point. The language work is _mostly_ understood but this is tied to runtime changes. At the moment I don\u0027t think the combined runtime + language work will fit into the .NET 10 schedule. Think 11 is more likely. \n\n\n[expand-ref]: https://github.com/dotnet/csharplang/blob/main/proposals/expand-ref.md",
                                           "updatedAt":  "2025-01-21T18:27:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bVJXe",
                                           "createdAt":  "2025-01-22T00:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "\u003eIt would require unsafe when unpacking an instance and getting a value out by ref but otherwise would be safe.\n\nThis would be a really unfortunate outcome. As a user of a type like this I would much prefer to have two operations to confer it is specifically the ref struct types that need user diligence to be used safely. Concretely I would prefer it to be one operation for unsafe extraction - with `T : allow ref struct` - and another safe one without, doing the safe fallible runtime cast that it resembles. Allowing it to be used 100% safely for most types avoids unnecessary unsafe proliferation in the ecosystem.\n\n\u003chr/\u003e\n\nI previously left a good reason for wanting this type to be usable in safe context in https://github.com/dotnet/roslyn/issues/65255#issuecomment-2605319984 \nIt\u0027s a fantastic mechanism for avoiding generic specialization bloat of internal code. Where there is a sizable non-generic spine of code acting on a generic value that - if not for wanting to keep structs unboxed - would just take a callback and object? state (or more commonly won\u0027t be modeled to allow for structs at all, opting to refer to some abstract base class instead).  \n \nThe bloat incurred in those cases is a fundamental problem for using structs in \u0027open world\u0027 api designs. Passing TypedReferences through the internals instead can make structs viable in \\*all* dimensions for high perf code, only requiring a cheap indirection to isolate the generic call from the non-generic code. These advantages of structs won\u0027t diminish with better PGO or more on stack allocation of classes and so on. Structs guarantee most of their advantages in overhead and predictability, for NativeAOT, crossing abstractions, in tier 0 and so on, which is a huge advantage in itself.\n\n\u003eThe pieces are not all in place yet. TypedReference is effectively an opaque storage for a ref value of any type. That includes ref struct and our lifetime model does not support that yet. There is [a proposal](https://github.com/dotnet/csharplang/blob/main/proposals/expand-ref.md) that will close this gap enough that we could correctly model TypedReference in the type system\n\n```cs\nvar span = Span\u003cbyte\u003e.Empty;\nvar typedReference = __makeref(span); // error CS1601\n```\n\nThe above doesn\u0027t work today, including in an unsafe context, so it\u0027s currently not usable for *any type* anyway. It would be fantastic to remove that limitation, but that same reasoning holds for Spans, of either form (though safely only ReadOnlySpan applies as I understand it). All could benefit, but there is already lots of value in supporting the current safe set of types (Span\u0027s baseline usefulness being much higher of course).\n\nThe modernized version of TypedReference should allow for the future addition of `T : allow ref struct` on the relevant apis, but that being a supported scenario - and an evident future need - I still can\u0027t see what *isn\u0027t* in place to do any modernization today. I fully understand that doing the design and changes in two phases could require more investment than the type warrants but that\u0027s not clear to me at this point, so please bear with me.",
                                           "updatedAt":  "2025-01-22T00:22:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bVMxw",
                                           "createdAt":  "2025-01-22T00:33:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e \u003e It would require unsafe when unpacking an instance and getting a value out by ref but otherwise would be safe.\n\n\u003e This would be a really unfortunate outcome ... Concretely I would prefer it to be one operation for unsafe extraction - with T : allow ref struct - and another safe one without, doing the safe fallible runtime cast that it resembles.\n\nSorry, let me clarify. Extracting a value by `ref T` from a `TypedReference` would be unsafe if `T` is _potentially_ a `ref struct`. Otherwise, it would be safe. The rational for `ref struct` case being unsafe is that _safely_ representing that is not possible without adding explicit lifetimes to the language where as today C# works primarily by inferring lifetimes. \n\n\u003e The above doesn\u0027t work today, including in an unsafe context, so it\u0027s currently not usable for any type anyway.\n\nThat is by design. We didn\u0027t want to allow `ref struct` to be usable with `__makeref` until we had a plan on how to handle the lifetimes. If we adopt the proposal I listed then we would remove this restriction. ",
                                           "updatedAt":  "2025-01-22T00:33:24Z"
                                       }
                                   ],
                         "totalCount":  69
                     },
        "title":  "Developers using reflection invoke should be able to use ref struct",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "User Story",
                       "Priority:2",
                       "Cost:XL",
                       "Team:Libraries"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50938",
        "createdAt":  "2021-04-08T17:43:07Z",
        "number":  50938,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-01T01:27:11Z",
        "body":  "https://github.com/dotnet/runtime/pull/51242 updated Corelib to clear reflection caches, but it does so using managed code to iterate through all types.  This has some deficiencies, as noted in a TODO in the code:\r\n```\r\n// TODO: This should ideally be in a QCall in the runtime.  As written here:\r\n// - This materializes all types in the app, creating RuntimeTypes for them.\r\n// - This force loads all assembly dependencies, which might not work well for packages that may depend on resolve events firing at the right moment.\r\n// - This does not cover instantiated generic types.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONPcBZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40w74b",
                                           "createdAt":  "2021-07-22T21:21:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "We don\u0027t have time to implement this in 6.0.0. Can we move this to 7.0.0?",
                                           "updatedAt":  "2021-07-22T21:21:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc409wFm",
                                           "createdAt":  "2021-07-28T20:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Moving to 7.0.0.",
                                           "updatedAt":  "2021-07-28T20:33:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Hot reload: Update RuntimeTypeMetadataUpdateHandler to use a QCall to clear reflection caches",
        "labels":  [
                       "enhancement",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59052",
        "createdAt":  "2021-09-13T18:44:39Z",
        "number":  59052,
        "author":  "teo-tsirpanis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-02T20:56:14Z",
        "body":  "### Background and motivation\r\n\r\nIn IL, we can declare fields with a specific underlying raw representation using the `.data` directive. Such fields are used by the compiler to initialize arrays using `RuntimeHelpers.InitializeArray`, and make allocation-free `ReadOnlySpan`s of byte-sized values. The fields\u0027 declared type is either a primitive or an internal struct with no members and a size of the data\u0027s total byte count, and their corresponding `FieldInfo` object has the `FieldAttributes.HasFieldRVA` flag set.\r\n\r\nHowever, there is no supported way to access these bytes from reflection. One way to do it is through some very unsafe code like the following:\r\n\r\n``` csharp\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\n\r\nprivate sealed class RawData {private byte Data;}\r\n\r\n// Adapted from an internal RuntimeHelpers method.\r\nprivate static ref byte GetRawData(object x) =\u003e ref Unsafe.As\u003cRawData\u003e(x).Data;\r\n\r\nprivate byte[] GetRvaFieldBytes(FieldInfo fi)\r\n{\r\n    // We assume that the field is static; ECMA-335 does not say anything.\r\n    object val = fi.GetValue(null);\r\n    ref byte addr = ref GetRawData(val);\r\n    // Is that truly the best way to get the type\u0027s size?\r\n    int size = Marshal.SizeOf(val);\r\n    // Runtimes without fast span will have to temporarily pin the object.\r\n    return MemoryMarshal.CreateReadOnlySpan(ref addr, size).ToArray();\r\n}\r\n```\r\n\r\nbut I am not confident at all to use this in real-world code. It worked on some experiments, but I am afraid that it might cause problems now or in the future. Besides, this does not work with fields on types loaded from a `MetadataLoadContext`.\r\n\r\n### ~~API~~ Proposal\r\n\r\nI propose to make `FieldInfo.GetRawConstantValue` return a byte array with the field\u0027s `.data` when called from a field with `FieldAttributes.HasFieldRVA`. That array will be freshly allocated each time the method is called, to avoid user code from mutating it and affecting future retrievals. This is not an API proposal per se, since no new APIs will be added.\r\n\r\n### Risks\r\n\r\nIt is not a breaking change since it does not restrict any existing use case. User code might fail because the `object` returned by `GetRawConstantValue` can now be of an another type, but it can be assumed that people first check whether the field `IsLiteral`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTY9LSQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42vxIk",
                                           "createdAt":  "2021-09-13T19:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The payload of the RVA fields can be writeable static variable. It is common in C++ CLI. What does it return for these cases?",
                                           "updatedAt":  "2021-09-13T19:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wCia",
                                           "createdAt":  "2021-09-13T20:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e The payload of the RVA fields can be writeable static variable. It is common in C++ CLI. What does it return for these cases?\r\n\r\nbtw, is it expected for the following test to work?:\r\n```csharp\r\n.assembly extern System.Private.CoreLib {}\r\n.assembly Test {}\r\n\r\n.field static public int32 a at D_00\r\n\r\n.method public static int32 Main()\r\n{\r\n  .entrypoint\r\n  ldc.i4 100\r\n  stsfld int32 a\r\n  ldsfld int32 a\r\n  ret\r\n}\r\n\r\n.data D_00 = int32(1)\r\n```\r\nfor me it throws AVE on the attempt to write into RVA",
                                           "updatedAt":  "2021-09-13T20:47:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wDcw",
                                           "createdAt":  "2021-09-13T20:52:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6JXog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-09-13T20:55:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2021-09-13T21:38:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e for me it throws AVE on the attempt to write into RVA\r\n\r\nThat is expected. RVA fields are R/O in IL-only assemblies.",
                                           "updatedAt":  "2021-09-13T20:52:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wDsp",
                                           "createdAt":  "2021-09-13T20:53:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e The payload of the RVA fields can be writeable static variable. It is common in C++ CLI. What does it return for these cases?\r\n\r\nI didn\u0027t know that but I can imagine it. Consistent with `GetRawConstantValue`\u0027s behavior, it would return the field\u0027s initial value. Those that want the actual changed value will have to do it in a different way, such as the unsafe snippet at the OP.",
                                           "updatedAt":  "2021-09-13T20:53:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wEjj",
                                           "createdAt":  "2021-09-13T20:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Consistent with GetRawConstantValue\u0027s behavior, it would return the field\u0027s initial value.\r\n\r\nThat is very non-trivial to do. The initial value is not present in the memory anymore if it was overwritten. The runtime would have to load the original image second time and read the initial value from it.",
                                           "updatedAt":  "2021-09-13T20:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wFfx",
                                           "createdAt":  "2021-09-13T21:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Okay, then the current value. `GetRawConstantValue` would be oblivious to any changes in memory. It would still differ with `GetValue` because it would always return an array of bytes instead of a boxed object.",
                                           "updatedAt":  "2021-09-13T21:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wILY",
                                           "createdAt":  "2021-09-13T21:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7wYmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-09-25T10:27:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It looks weird for `GetRawConstantValue` to return something that is not constant.",
                                           "updatedAt":  "2021-09-13T21:19:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wIgj",
                                           "createdAt":  "2021-09-13T21:21:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Hmm, indeed it looks. Another idea is to make `GetValue` return a byte array in `MetadataLoadContext` only. It might not be consistent, but there will always be a way to get the values of RVA fields regardless of reflection-only status.",
                                           "updatedAt":  "2021-09-13T21:22:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wNwJ",
                                           "createdAt":  "2021-09-13T21:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "What are you trying to build with this proposal?",
                                           "updatedAt":  "2021-09-13T21:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wZpL",
                                           "createdAt":  "2021-09-13T23:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "My project uses an IL weaver to store binary data on assemblies after compilation, to be read on execution time. Currently they are stored in manifest resources and read sequentially using `Assembly.GetManifestResourceStream`, but I am thinking of storing them in RVA fields in the future, to enable easier random access.\r\n\r\nI noticed that `GetManifestResourceStream` returns an `UnmanagedMemoryStream` on embedded resources and I can take its pointer, but it doesn\u0027t always work since a foreign UMS might also be backed by a `SafeBuffer` which I cannot access. With an RVA field, I can easily emit an `ldsflda` from the weaver to get the pointer (along with an `ldtoken` to store the field token somewhere near the pointer to prevent the assembly from getting unloaded).\r\n\r\nNow where does reflection fit in? It would be very convenient if I could somehow introspect an `Assembly` and get all these pieces of binary data (there can be many per assembly) even on assemblies loaded in a `MetadataLoadContext`. It can now be easily done with the manifest resources, but with RVA fields, there is either this proposal, or I will have to do it myself using `System.Reflection.Metadata`, losing the universality of the `System.Reflection.Assembly` type. It won\u0027t be completely unacceptable if I do it, some public API might be broken but it\u0027s going to happen in a major release, where I will have to rethink whether such introspection should even be available as a public API in the first place (it\u0027s also available via a CLI tool).\r\n\r\n---\r\n\r\nAll that is still in the stage of brain-storming; I still have no idea when and if I will pursue it, and resolving it is not urgent.",
                                           "updatedAt":  "2021-09-13T23:23:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BfaDk",
                                           "createdAt":  "2022-04-14T06:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "After some more thought, I might not need this myself, but it might still be useful as RVA fields are getting more traction with UTF-8 literals.",
                                           "updatedAt":  "2022-04-14T06:24:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Njzy3",
                                           "createdAt":  "2022-11-02T20:54:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-02T20:54:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nj0tJ",
                                           "createdAt":  "2022-11-02T20:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-02T20:56:12Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Proposal: Use `FieldInfo.GetRawConstantValue` to get the `.data` of fields with `HasFieldRVA`.",
        "labels":  [
                       "area-System.Reflection",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61122",
        "createdAt":  "2021-11-02T21:00:31Z",
        "number":  61122,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-06T13:46:06Z",
        "body":  "Related to https://github.com/dotnet/runtime/issues/53217#issuecomment-885962507\r\nFor obsoleting `TypeInfo/GetTypeInfo` we need an analyzer/code fixer that replaces GetTypeInfo() with calls to GetType(), and occurrences of TypeInfo with Type. A heavy reflection code base that migrated to Windows 8/was written for the Windows 8 era, would have had widely used both. The key would be making it easier for folks to replace them when the type is obsolete.\r\n```cs\r\nclass DerivedClass : TypeInfo // Do not flag base types\r\n{\r\n   //  ...\r\n}\r\nclass MyClass\r\n{\r\n    // I guess we don\u0027t want to warn/fix return type of a public/protected methods (maybe make it configurable)\r\n    // flag/fix return type only for private methods by default\r\n    // flag fix all local variables including the parameters\r\n    TypeInfo GetTypeInfo(TypeInfo ti) =\u003e null;\r\n    // flag/fix only private properties by default\r\n    TypeInfo TypeInfo =\u003e null;\r\n    // flag/fix only private fields by default\r\n    private TypeInfo typeInfo = null;\r\n\r\n    void ExampleBeforeFix()\r\n    {\r\n        TypeInfo ti = typeof(MyClass).GetTypeInfo();\r\n        TypeInfo anotherInfo = GetTypeInfo(null); // TypeInfo comes from other API\r\n\r\n        // possible references needs updated:\r\n        IEnumerable\u003cConstructorInfo\u003e constructors = ti.DeclaredConstructors;\r\n        IEnumerable\u003cEventInfo\u003e events = ti.DeclaredEvents;\r\n        IEnumerable\u003cFieldInfo\u003e fields = ti.DeclaredFields;\r\n        IEnumerable\u003cMemberInfo\u003e memebrs = ti.DeclaredMembers;\r\n        IEnumerable\u003cMethodInfo\u003e methods = ti.DeclaredMethods;\r\n        IEnumerable\u003cTypeInfo\u003e nTypes = ti.DeclaredNestedTypes;\r\n        IEnumerable\u003cPropertyInfo\u003e properties = ti.DeclaredProperties;\r\n        Type[] genTypeParams = ti.GenericTypeParameters;\r\n        IEnumerable\u003cType\u003e interfaces = ti.ImplementedInterfaces;\r\n        Type t = ti.AsType();\r\n        EventInfo ei = ti.GetDeclaredEvent(name);\r\n        FieldInfo fi = ti.GetDeclaredField(name);\r\n        MethodInfo mi = ti.GetDeclaredMethod(name);\r\n        IEnumerable\u003cMethodInfo\u003e mInfos = ti.GetDeclaredMethods(name);\r\n        TypeInfo tInfo = ti.GetDeclaredNestedType(name);\r\n        PropertyInfo pi = ti.GetDeclaredProperty(name);\r\n        if (ti.IsAssignableFrom(anotherInfo));\r\n        TypeInfo ati = ti.GetTypeInfo();\r\n    }\r\n\r\n    void ExampleAfterFix()\r\n    {\r\n        Type ti = typeof(MyClass);\r\n        Type anotherInfo = GetTypeInfo(null); // TypeInfo comes from custom method\r\n\r\n        // possible fixes for references\r\n        IEnumerable\u003cConstructorInfo\u003e constructors = ti.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        IEnumerable\u003cEventInfo\u003e events = ti.GetEvents(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        IEnumerable\u003cFieldInfo\u003e fields = ti.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        IEnumerable\u003cMemberInfo\u003e memebrs = ti.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        IEnumerable\u003cMethodInfo\u003e methods = ti.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        // Should we cast the result to IEnumerable or change the type of the variable into array of Type? (IEnumerable\u003cTypeInfo\u003e nTypes = ti.DeclaredNestedTypes;)\r\n        IEnumerable\u003cTypeInfo\u003e nTypes = (IEnumerable\u003cTypeInfo\u003e)ti.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        IEnumerable\u003cPropertyInfo\u003e properties = ti.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly); ;\r\n        Type[] genTypeParams = ti.GetGenericArguments(); // or use: IsGenericTypeDefinition ? GetGenericArguments() : Type.EmptyTypes;\r\n        IEnumerable\u003cType\u003e interfaces = ti.GetInterfaces(); // before: ti.ImplementedInterfaces;\r\n        Type t = ti; // before:  ti.AsType();\r\n        EventInfo ei = ti.GetEvent(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        FieldInfo fi = ti.GetField(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        MethodInfo mi = ti.GetMethod(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        // IEnumerable\u003cMethodInfo\u003e mInfos = ti.GetDeclaredMethods(name); No direct replacement, we might want to add correspodning method to the Type\r\n        // Below type of tInfo changed from TypeInfo to Type \r\n        Type tInfo = ti.GetNestedType(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        PropertyInfo pi = ti.GetProperty(name, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);\r\n        if (ti.IsAssignableFrom(anotherInfo)); // no change needed\r\n        Type ati = ti.GetType(); // or just Type ati = ti; in case analyzer update type of ti\r\n    }\r\n\r\n    // we might want to add this const to Type and use for the arguments\r\n    public const BindingFlags DeclaredOnlyLookup = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly;\r\n\r\n    private string name = \"name\";\r\n }\r\n```\r\nCategory: Maintainability or Design\r\nSeverity: Info\r\n\r\ncc @terrajobst @carlossanlop ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOpboCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45HGZz",
                                           "createdAt":  "2021-11-02T21:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRelated to https://github.com/dotnet/runtime/issues/53217#issuecomment-885962507\r\nFor obsoleting `TypeInfo/GetTypeInfo` we need an analyzer/code fixer that replaces GetTypeInfo() with calls to GetType(), and occurrences of TypeInfo with Type. A heavy reflection code base that migrated to Windows 8/was written for the Windows 8 era, would have had widely used both. The key would be making it easier for folks to replace them when the type is obsolete.\r\n\r\nCategory: Reliability\r\nSeverity: Info\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `code-analyzer`, `code-fixer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-02T21:00:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46PxH7",
                                           "createdAt":  "2021-11-23T22:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Suggested severity: Suggestion\r\nSuggested category: Design\r\nSuggested milestone: 7.0 (same as issue suggesting obsoleting `TypeInfo` and `GetTypeInfo()`)\r\n\r\n\u003cdetails\u003e\r\n    \u003csummary\u003eFlag\u003c/summary\u003e\r\n\r\n```cs\r\nMemoryStream ms = new MemoryStream();\r\n\r\nType type = ms.GetType();\r\nMemberInfo[] members1 = type.GetMembers();\r\n\r\n\r\n// Before\r\nTypeInfo typeInfo1 = type.GetTypeInfo();\r\nMemberInfo[] members2 = typeInfo1.GetMembers();\r\n\r\n\r\n// After\r\nType typeInfo1 = type;\r\nMemberInfo[] members2 = typeInfo1.GetMembers();\r\n```\r\n\u003c/details\u003e\r\n\r\nEdit: The main description contains all the cases to address.",
                                           "updatedAt":  "2021-11-30T18:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46lugJ",
                                           "createdAt":  "2021-11-30T19:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=9fAW50_edfM\u0026t=0h37m1s)\n\n* Generally looks good as proposed.\r\n* While a fixer may produce errors in a few edge cases, it seems generally valueable, so we should make one.\r\n* The analyzer should check the Type/TypeInfo hierarchy to not run when it\u0027s not appropriate (e.g. netstandard1.x).\r\n* It should not flag uses where any TypeInfo-specific members are used.\r\n\r\nCategory: Maintainability\r\nSeverity: Info",
                                           "updatedAt":  "2021-11-30T20:03:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Analyzer: Replace occurrences of TypeInfo with Type and GetTypeInfo() with GetType()",
        "labels":  [
                       "api-approved",
                       "area-System.Reflection",
                       "help wanted",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68923",
        "createdAt":  "2022-05-05T17:42:46Z",
        "number":  68923,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:14Z",
        "body":  "Per comment and reply from https://github.com/dotnet/runtime/pull/67917#issuecomment-1118871167 we should consider hiding the 2 extra outer (actual exception, not the inner) frames that we now have when an invoked method throws an exception which is subsequently wrapped with a `TargetInvocationException`.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSDFOTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CsKY2",
                                           "createdAt":  "2022-05-05T17:42:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPer comment and reply from https://github.com/dotnet/runtime/pull/67917#issuecomment-1118871167 we should consider hiding the 2 extra outer (actual exception, not the inner) frames that we now have when an invoked method throws an exception which is subsequently wrapped with a `TargetInvocationException`.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `discussion`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-05T17:42:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DDilc",
                                           "createdAt":  "2022-05-12T13:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "It is generally agreed that we should be hiding the extra stack frames that were added due to Emit-based invoke.  We either need reconcile why native code in `SystemDomain::IsReflectionInvocationMethod` isn\u0027t being called to skip stack frames in this case and\\or add `[StackTraceHidden]` to the managed methods. Pending tests, we may also need to create a Mono issue associated with it.",
                                           "updatedAt":  "2022-05-12T13:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DWHIu",
                                           "createdAt":  "2022-05-18T11:02:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "Hi @steveharter I\u0027ve noticed the same today during testing:\r\n\r\n\u003cimg width=\"1054\" alt=\"image\" src=\"https://user-images.githubusercontent.com/7894084/169024180-9585c2b5-ce37-4bb8-9dc0-0ce2557f0e2d.png\"\u003e\r\n\r\nIt wasn\u0027t here in past.\r\n",
                                           "updatedAt":  "2022-05-18T11:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IMU5N",
                                           "createdAt":  "2022-08-10T19:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to v8 to consider. Not considered high priority.\r\n\r\nI believe the [last](https://github.com/dotnet/runtime/blob/b59c6491dd9636d436ad10e087523a163fb93be0/src/libraries/System.Private.CoreLib/src/System/Diagnostics/StackTrace.cs#L217-L218) stack frame is always preserved with `[StackTraceHidden]`, so we may need a different way to determine how to hide these frames.",
                                           "updatedAt":  "2022-08-10T19:45:27Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Consider hiding stack frames when using Invoke",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70984",
        "createdAt":  "2022-06-20T10:46:56Z",
        "number":  70984,
        "author":  "AndreasHeisel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCoq3Zg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NagayamaToshiaki",
                                            "createdAt":  "2022-06-23T02:58:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgf",
                                            "createdAt":  "2022-07-27T02:11:11Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-07T05:30:40Z",
        "body":  "There are multiple APIs to access custom attributes that behave differently (.NET 6).\r\nExample:\r\n```\r\nusing System.Reflection;\r\n\r\n// This works: attributes contains one \u0027FooAttribute\u0027\r\nvar attributes = typeof(Dummy).GetCustomAttributes(typeof(IFoo), true);\r\n\r\n// This throws: \u0027Type passed in must be derived from System.Attribute or System.Attribute itself.\u0027\r\nvar attribute = typeof(Dummy).GetCustomAttribute(typeof(IFoo), true);\r\n\r\n// This does not compile: Error CS0311\tThe type \u0027IFoo\u0027 cannot be used as type parameter \u0027T\u0027 in the generic type or method \u0027CustomAttributeExtensions.GetCustomAttributes\u003cT\u003e(MemberInfo, bool)\u0027. There is no implicit reference conversion from \u0027IFoo\u0027 to \u0027System.Attribute\u0027.\r\n//attributes = typeof(Dummy).GetCustomAttributes\u003cIFoo\u003e(true);\r\n\r\n// This does not compile: Error CS0311\tThe type \u0027IFoo\u0027 cannot be used as type parameter \u0027T\u0027 in the generic type or method \u0027CustomAttributeExtensions.GetCustomAttribute\u003cT\u003e(MemberInfo, bool)\u0027. There is no implicit reference conversion from \u0027IFoo\u0027 to \u0027System.Attribute\u0027.\r\n// attribute = typeof(Dummy).GetCustomAttribute\u003cIFoo\u003e(true);\r\n\r\n\r\npublic interface IFoo\r\n{ }\r\n\r\n[AttributeUsage(AttributeTargets.All)]\r\npublic sealed class FooAttribute : Attribute, IFoo\r\n{ }\r\n\r\n[Foo]\r\npublic class Dummy { }\r\n```\r\n\r\nI think it is valid to query for an interface. This enables more flexibility in reflection driven applications.\r\n\r\nI propose to relax the restrictions on the throwing or not compiling APIs in a way to allow interfaces as attribute type. This shouldn\u0027t affect real world code that works today. I don\u0027t think there is much code in the wild that relies on GetCustomAttribute thowing.\r\n ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTcpQsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FKKd5",
                                           "createdAt":  "2022-06-20T10:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are multiple APIs to access custom attributes that behave differently (.NET 6).\r\nExample:\r\n```\r\nusing System.Reflection;\r\n\r\n// This works: attributes contains one \u0027FooAttribute\u0027\r\nvar attributes = typeof(Dummy).GetCustomAttributes(typeof(IFoo), true);\r\n\r\n// This throws: \u0027Type passed in must be derived from System.Attribute or System.Attribute itself.\u0027\r\nvar attribute = typeof(Dummy).GetCustomAttribute(typeof(IFoo), true);\r\n\r\n// This does not compile: Error CS0311\tThe type \u0027IFoo\u0027 cannot be used as type parameter \u0027T\u0027 in the generic type or method \u0027CustomAttributeExtensions.GetCustomAttributes\u003cT\u003e(MemberInfo, bool)\u0027. There is no implicit reference conversion from \u0027IFoo\u0027 to \u0027System.Attribute\u0027.\r\n//attributes = typeof(Dummy).GetCustomAttributes\u003cIFoo\u003e(true);\r\n\r\n// This does not compile: Error CS0311\tThe type \u0027IFoo\u0027 cannot be used as type parameter \u0027T\u0027 in the generic type or method \u0027CustomAttributeExtensions.GetCustomAttribute\u003cT\u003e(MemberInfo, bool)\u0027. There is no implicit reference conversion from \u0027IFoo\u0027 to \u0027System.Attribute\u0027.\r\n// attribute = typeof(Dummy).GetCustomAttribute\u003cIFoo\u003e(true);\r\n\r\n\r\npublic interface IFoo\r\n{ }\r\n\r\n[AttributeUsage(AttributeTargets.All)]\r\npublic sealed class FooAttribute : Attribute, IFoo\r\n{ }\r\n\r\n[Foo]\r\npublic class Dummy { }\r\n```\r\n\r\nI think it is valid to query for an interface. This enables more flexibility in reflection driven applications.\r\n\r\nI propose to relax the restrictions on the throwing or not compiling APIs in a way to allow interfaces as attribute type. This shouldn\u0027t affect real world code that works today. I don\u0027t think there is much code in the wild that relies on GetCustomAttribute thowing.\r\n \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAndreasHeisel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T10:47:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FxRoe",
                                           "createdAt":  "2022-06-29T22:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "@AndreasHeisel these are by design, and documented as such, please check:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.getcustomattributes?view=net-6.0#system-reflection-memberinfo-getcustomattributes(system-type-system-boolean) and \r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.reflection.customattributeextensions.getcustomattribute?view=net-6.0#system-reflection-customattributeextensions-getcustomattribute(system-reflection-memberinfo-system-type-system-boolean)\r\nEven if they looks similar they are different APIs from different type, It is documented that the second API you mentioned would throw `ArgumentException` if `attributeType` is not derived from `Attribute`.\r\n \r\nEven there should be no code that depend from throwing the API internally might depend/require `Attribute` instance only, anyway I don\u0027t believe we would ever change this APIs as requested. Why can\u0027t you use and abstract type derived from `Attribute` instead of an `Interface`",
                                           "updatedAt":  "2022-06-29T22:10:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FxRyb",
                                           "createdAt":  "2022-06-29T22:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-06-29T22:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F0B5E",
                                           "createdAt":  "2022-06-30T14:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreasHeisel",
                                           "body":  "I know that it is documented the way it is. That\u0027s why I filed a modification proposal and not a bug report 😉.\r\n\r\nIt is true that both members are technically from different types, but the second is an extension method. That makes it closely related to the first method and it apears as one \"API set\". \r\n\r\nCode that works today asks for Attribute or descendants. That code would get what it asked for as it does today. There is no change and therefore no compatibility issue.\r\n\r\nWe use lots of \u0027attributes\u0027 to model different aspects in our codebase.  This works at low level, is handled by different subsystems and therefore ensures separation of concerns. We also have more abstract concepts that are build upon these \u0027attributes\u0027. \r\n\r\nAs we only have single inheritance, these concepts can\u0027t be implemented as attributes that inherit from the low level ones.  Using the same set of attributes over and over leads to much noise in the codebase and is error prone.\r\n\r\nModelling the low level aspects as interfaces enables us to use attributes implementing sets of these interfaces for the abstract concepts while maintaining separation of concerns. \r\n\r\nWe can implement this using GetCustomAttributes and it works. Using GetCustomAttribute would\r\n* make our codebase cleaner (less FirstOrDefault and/or foreach)\r\n* is potentially more efficient because the BCL could implement this with less allocations in the future (no array etc)\r\n* is safer with respect to casting errors in the generic version",
                                           "updatedAt":  "2022-06-30T14:07:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NuRfH",
                                           "createdAt":  "2022-11-04T18:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-04T18:22:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NylCy",
                                           "createdAt":  "2022-11-07T05:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreasHeisel",
                                           "body":  "I would really appreciate some feedback from the team on the scenario I described in my last post.",
                                           "updatedAt":  "2022-11-07T05:30:35Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Make handling of custom attributes more consistent.",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73136",
        "createdAt":  "2022-08-01T02:05:39Z",
        "number":  73136,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzwUYw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DjArt",
                                            "createdAt":  "2023-04-15T10:03:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2023-04-25T04:48:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dav-sea",
                                            "createdAt":  "2023-11-03T12:50:07Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-26T10:39:15Z",
        "body":  "The generic DispatchProxy.Create can be done ahead of time, but it requires an AOT compiler feature.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi8Lxqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Hj-PV",
                                           "createdAt":  "2022-08-01T02:24:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe generic DispatchProxy.Create can be done ahead of time, but it requires an AOT compiler feature.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-01T02:24:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hj_Yj",
                                           "createdAt":  "2022-08-01T02:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCpaSfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2022-08-01T02:32:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2022-08-01T04:30:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think it make sense to have this custom build into Native AOT compiler like it was done in .NET Native. We should be looking at this as \"reverse Invoke\" reflection feature for all runtimes.",
                                           "updatedAt":  "2022-08-01T02:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NuYXz",
                                           "createdAt":  "2022-11-04T18:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I do not think it make sense to have this custom build into Native AOT compiler like it was done in .NET Native. We should be looking at this as \"reverse Invoke\" reflection feature for all runtimes.\r\n\r\nIs there an existing proposal for this?\r\n\r\n@MichalStrehovsky do you plan on working on this - it was originally marked 8.0 so I assume it was important at that time at least.\r\n\r\ncc @buyaa-n per our offline discussion",
                                           "updatedAt":  "2022-11-04T18:51:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nvbuq",
                                           "createdAt":  "2022-11-04T21:35:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Not planning to work on it. There is an implementation in .NET Native that one can take inspiration from. There might be design docs as well but it was long time ago and I didn\u0027t work on any aspect of it.",
                                           "updatedAt":  "2022-11-04T21:35:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N21gU",
                                           "createdAt":  "2022-11-07T21:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 8.0 for now but we need to discuss whether this is an AOT issue or a reflection\\DispatchProxy issue.",
                                           "updatedAt":  "2022-11-07T21:29:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iRG8m",
                                           "createdAt":  "2023-07-24T21:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future; doesn\u0027t seem to be high enough priority to make the cut.",
                                           "updatedAt":  "2023-07-24T21:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qyRPI",
                                           "createdAt":  "2023-11-02T21:28:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We should take another look at this for v9.",
                                           "updatedAt":  "2023-11-02T21:28:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5we0Od",
                                           "createdAt":  "2024-01-11T13:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DjArt",
                                           "body":  "Is there any workaround?",
                                           "updatedAt":  "2024-01-11T13:05:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wiiCD",
                                           "createdAt":  "2024-01-11T22:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7s9og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ayaka209",
                                                                               "createdAt":  "2024-11-20T08:43:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Is there any workaround?\r\n\r\nNo workaround, the implementation is full of Reflection.Emit and that\u0027s unsupportable in current form.",
                                           "updatedAt":  "2024-01-11T22:59:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwvGq",
                                           "createdAt":  "2024-09-11T22:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "Lack of support for DispatchProxy will block apps that use WCF from using the new UWP on .NET 9 capability as that uses native aot. Blog post announcing UWP on .NET 9: https://devblogs.microsoft.com/ifdef-windows/preview-uwp-support-for-dotnet-9-native-aot/",
                                           "updatedAt":  "2024-09-11T22:23:52Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Implement AOT safe DispatchProxy.Create",
        "labels":  [
                       "investigate",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75347",
        "createdAt":  "2022-09-09T15:43:12Z",
        "number":  75347,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:16Z",
        "body":  "[primarily a placeholder for now for planning]\r\n\r\nThis adds invoke capability to function pointers, layering on See also https://github.com/dotnet/runtime/issues/69273.\r\n\r\nThis will likely create a new `MethodSignature` class that will have an `Invoke()` method, analogous to [Delegate.DynamicInvoke(https://docs.microsoft.com/dotnet/api/system.delegate.dynamicinvoke)]() and [MethodBase.Invoke(https://docs.microsoft.com/dotnet/api/system.reflection.methodbase.invoke)]().\r\n\r\nThis enable dynamic invoke while supporting the `CallConv*` types for both existing function pointers and ones created dynamically.\r\n\r\nExisting function pointers are be obtained from\r\n- `typeof(SomeFunctionPointer)` \r\n- `Type.GetType()` if `Type` is a function pointer\r\n- `FieldInfo.GetMethodSignature()`\r\n  - The GetMethodSignature() methods are new and only work if the field\\property\\parameter is a function pointer.\r\n- `PropertyInfo.GetMethodSignature()`\r\n- `ParameterInfo.GetMethodSignature()`\r\n\r\nA `MethodSignature` can be created dynamically:\r\n```cs\r\nMethodSignature sig = new(\r\n  returnParameter: new MethodSignatureParameter(typeof(bool)),\r\n  parameters: new MethodSignatureParameter[] { new MethodSignatureParameter(typeof(int)) },\r\n  callingConventions = new Type[] {typeof(CallConv.Cdecl)});\r\n```\r\n\r\nThe `Invoke()` takes the function pointer as an `IntPtr` or `void*` along with the parameter values:\r\n_note that the sample below uses `object`-based parameters, but is expected to use strongly-typed\r\n`TypedReference` and collections once that is available to avoid unnecessary allocations and to support by-ref-like types_`:\r\n```cs\r\ndelegate*\u003cint, bool\u003e fn = \u0026MyFunctionPointer;\r\nobject retValue = sig.Invoke(fn, new object[] { 42 });\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSgmPsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KCY-x",
                                           "createdAt":  "2022-09-09T15:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[primarily a placeholder for now for planning]\r\n\r\nThis adds invoke capability to function pointers, layering on See also https://github.com/dotnet/runtime/issues/69273.\r\n\r\nThis will likely create a new `MethodSignature` class that will have an `Invoke()` method, analogous to [Delegate.DynamicInvoke(https://docs.microsoft.com/dotnet/api/system.delegate.dynamicinvoke)]() and [MethodBase.Invoke(https://docs.microsoft.com/dotnet/api/system.reflection.methodbase.invoke)]().\r\n\r\nThis enable dynamic invoke while supporting the `CallConv*` types for both existing function pointers and ones created dynamically.\r\n\r\nExisting function pointers are be obtained from\r\n- `typeof(SomeFunctionPointer)` \r\n- `Type.GetType()` if `Type` is a function pointer\r\n- `FieldInfo.GetMethodSignature()`\r\n  - The GetMethodSignature() methods are new and only work if the field\\property\\parameter is a function pointer.\r\n- `PropertyInfo.GetMethodSignature()`\r\n- `ParameterInfo.GetMethodSignature()`\r\n\r\nA `MethodSignature` can be created dynamically:\r\n```cs\r\nMethodSignature sig = new(\r\n  returnParameter: new MethodSignatureParameter(typeof(bool)),\r\n  parameters: new MethodSignatureParameter[] { new MethodSignatureParameter(typeof(int)) },\r\n  callingConventions = new Type[] {typeof(CallConv.Cdecl)});\r\n```\r\n\r\nThe `Invoke()` takes the function pointer as an `IntPtr` or `void*` along with the parameter values:\r\n_note that the sample below uses `object`-based parameters, but is expected to use strongly-typed\r\n`TypedReference` and collections once that is available to avoid unnecessary allocations and to support by-ref-like types_`:\r\n```cs\r\ndelegate*\u003cint, bool\u003e fn = \u0026MyFunctionPointer;\r\nobject retValue = sig.Invoke(fn, new object[] { 42 });\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-needs-work`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T15:43:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Reflection invoke support for FunctionPointer",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection",
                       "Cost:M"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75349",
        "createdAt":  "2022-09-09T15:56:40Z",
        "number":  75349,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:39:17Z",
        "body":  "[primarily a placeholder for now for planning]\r\n\r\nThis will likely need to be done in 8.0 without support for byref-like generic support since that is not a given for 8.0. This means that byref-like types in this collection will need to be passed as unsafe pointers.\r\n\r\nSee also:\r\n- https://github.com/dotnet/runtime/issues/45152\r\n- https://github.com/dotnet/runtime/issues/38488\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkN5Lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KCc1P",
                                           "createdAt":  "2022-09-09T15:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[primarily a placeholder for now for planning]\r\n\r\nThis will likely need to be done in 8.0 without support for byref-like generic support since that is not a given for 8.0. This means that byref-like types in this collection will need to be passed as unsafe pointers.\r\n\r\nSee also:\r\n- https://github.com/dotnet/runtime/issues/45152\r\n- https://github.com/dotnet/runtime/issues/38488\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-needs-work`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T15:56:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ3kv",
                                           "createdAt":  "2023-07-24T20:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This was done in the prototype as mentioned in https://github.com/dotnet/runtime/issues/10057#issuecomment-1648580422.",
                                           "updatedAt":  "2023-07-24T20:47:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: byref parameter collection for invoke",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75357",
        "createdAt":  "2022-09-09T18:16:43Z",
        "number":  75357,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:13:40Z",
        "body":  "Currently, the invoke fast-path generates IL using [either `call` or `callvirt`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Reflection/InvokerEmitUtil.cs#L77-L84). If this is changed to use `calli` and function pointers, it is possible to cache the generated dynamic method and use it for all such calls to the same signature. This reduces the memory footprint and makes calling subsequent but different methods faster since there would essentially be a hashtable look upon the signature instead of generating a new method.\r\n\r\nIn addition, it will be used to support invoke against a function pointer via https://github.com/dotnet/runtime/issues/75347.\r\n\r\nItems to consider:\r\n- Sharing of instance methods across different reference Types.\r\n- Virtual functions (see `ldvirtftn`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoNyKHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KDELY",
                                           "createdAt":  "2022-09-09T18:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, the invoke fast-path generates IL using [either `call` or `callvirt`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Reflection/InvokerEmitUtil.cs#L77-L84). If this is changed to use `calli` and function pointers, it is possible to cache the generated dynamic method and use it for all such calls to the same signature. This reduces the memory footprint and makes calling subsequent but different methods faster since there would essentially be a hashtable look upon the signature instead of generating a new method.\r\n\r\nIn addition, it will be used to support invoke against a function pointer via https://github.com/dotnet/runtime/issues/75347.\r\n\r\nItems to consider:\r\n- Sharing of instance methods across different reference Types.\r\n- Virtual functions (see `ldvirtftn`).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T18:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g3Iof",
                                           "createdAt":  "2025-03-04T20:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@steveharter are we still planning this, or is it superseded by https://github.com/dotnet/runtime/issues/112994?",
                                           "updatedAt":  "2025-03-04T20:17:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Change IL Emit invoke path to use function pointers and OpCodes.Calli",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "Cost:S"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77000",
        "createdAt":  "2022-10-13T12:00:52Z",
        "number":  77000,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-28T00:07:55Z",
        "body":  "### Description\r\n\r\nSystem.ArgumentException is thrown when trying to make a Nullable\u003c\u003e generic type from a System.Enum constrained generic type parameter.\r\n\r\nThe exception has the following message:\r\n\r\n_\u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type parameter \u0027T\u0027._\r\n\r\n### Reproduction Steps\r\n\r\nThis example code can be used to reproduce the problem.\r\n\r\n```csharp\r\nnamespace Example;\r\n\r\npublic class Example\u003cT\u003e where T : Enum\r\n{\r\n}\r\n\r\ninternal class Program\r\n{\r\n    static void Main()\r\n    {\r\n        Type type = typeof(Nullable\u003c\u003e).MakeGenericType(typeof(Example\u003c\u003e).GetGenericArguments()[0]);\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nSince the IsValueType property of the generic type parameter is True, I would expect that this operation would be allowed.\r\n\r\n### Actual behavior\r\n\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=GenericArguments[0], \u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type \u0027T\u0027.\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Example.Program.Main() in C:\\Example\\Program.cs:line 11\r\n\r\n  This exception was originally thrown at this call stack:\r\n    System.RuntimeTypeHandle.Instantiate(System.RuntimeType)\r\n    System.RuntimeType.MakeGenericType(System.Type[])\r\n\r\nInner Exception 1:\r\nTypeLoadException: GenericArguments[0], \u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type parameter \u0027T\u0027.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6 SDK 6.0.401\r\n- Windows 10 Enterprise (10.0.19044.2006)\r\n- x64\r\n- Microsoft Visual Studio Enterprise 2022 (64-bit) Version 17.3.4\r\n\r\n### Other information\r\n\r\nJust for info - I recently raised another issue related to a System.Enum constrainted generic type parameter (#76300).\r\n\r\nApologies, if again, I\u0027ve raised a duplicate issue here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTSSw3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MJcaJ",
                                           "createdAt":  "2022-10-13T12:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e ```cs\r\n\u003e Type type = typeof(Nullable\u003c\u003e).MakeGenericType(typeof(Example\u003c\u003e).GetGenericArguments()[0]);\r\n\u003e ```\r\n\r\n~~This code is creating `typeof(Nullable\u003cExample\u003c\u003e\u003e)` and your `Example\u003cT\u003e` is a class therefor cannot be used as a type argument for `Nullable\u003cT\u003e`. The actual behavior is correct and you appear to misunderstand how `MakeGenericType()` works.~~\r\nSorry, I didn\u0027t see how all the parantheses were paired up, so I was a bit too fast. I think the below paragraph still holds, though, and is likely why the exception is still correct.\r\n\r\n\u003e Since the IsValueType property of the generic type parameter is True,\r\n\r\nThis is another false assumption. Using `where T : Enum` *does not* imply `T` is constrained to structs (actual enum types). You\u0027d need it to be `where T : struct, Enum` in order for that to be the case (because otherwise there\u0027s nothing stopping the type system from having `System.Enum` itself be a type parameter).",
                                           "updatedAt":  "2022-10-13T12:55:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MJjj1",
                                           "createdAt":  "2022-10-13T13:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Wow - how is that for interaction! I was just typing a response to the first point, and it changed before my eyes :)\r\n\r\nHere is some code that breaks it down a bit better:\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\n\r\nnamespace Example;\r\n\r\npublic class Example\u003cT\u003e where T : Enum\r\n{\r\n}\r\n\r\ninternal class Program\r\n{\r\n    static void Main()\r\n    {\r\n        Type genericTypeParameter = typeof(Example\u003c\u003e).GetGenericArguments()[0];\r\n        Debug.Assert(genericTypeParameter.IsValueType);\r\n        Type type = typeof(Nullable\u003c\u003e).MakeGenericType(genericTypeParameter);\r\n    }\r\n}\r\n```\r\n\r\nNote that the assert does not fail, so the generic type parameter does indeed have an IsValueType of True.\r\n\r\nThat is a very fair point about the System.Enum constraint being used itself as the type parameter. I must confess I did notice that the struct and System.Enum constraints could be combined, but didn\u0027t think the relevance through enough. \r\n\r\nThe fact that IsValueType is True threw me. It does seem a bit confusing when System.Enum is a reference type.",
                                           "updatedAt":  "2022-10-13T13:01:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MJotj",
                                           "createdAt":  "2022-10-13T13:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e Note that the assert does not fail, so the generic type parameter does indeed have an IsValueType of True.\r\n\r\nThat is strange and might be an actual bug. Do note that `MakeGenericType()` [does work when `struct` is added to the constraint](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRLKsBLCAbAE2QBoYQE4A7AHwAEAmARgFgAoNgNygQAIYeAvHwCeABwgB7MAAoAwgB4AfAEoA3J248A5oL4A6AOIQYRyhATYAxgEEEWuAFsIlGMmnKA2gAYAuuta0jACc0lp6AJLIAGpQeHAQACpiEGpsbPxCMMlScvIAopSOKv46mYbGpuZWtvZOLm6evv6BIWGRMXGJyansrBki4jmy9Eo9pfpGJs5VNnaOzq7u3n5sLaER0bHxSeI9GrwuulmDMgBycHh4UMB4EKN6ALJQANYQlRaWOxChPWsueqcoE49gEAMw8Bg8BQJRQ8ADuAAtzBAeAkeCAeAVHDwAN48AC+aV6tHBkOG8hh8KRSFR6J4yBgFEsMGImMKDlxBKAA==) (which is basically what you want 99.9999999...% of the time).",
                                           "updatedAt":  "2022-10-13T13:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MJrR3",
                                           "createdAt":  "2022-10-13T13:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0mypA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2023-01-22T23:20:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e That is strange and might be an actual bug\r\n\r\nThis prints \"False\" and \"True\" (on both .NET Framework 4.8 and .NET 7), which certainly seems inconsistent. @dotnet/area-system-reflection?\r\n\r\n```C#\r\nusing System;\r\n\r\ninternal class Program\r\n{\r\n    static void Main() =\u003e TakesEnum\u003cEnum\u003e();\r\n\r\n    public static void TakesEnum\u003cT\u003e() where T : Enum\r\n    {\r\n        Console.WriteLine(typeof(T).IsValueType);\r\n        Console.WriteLine(typeof(Program).GetMethod(nameof(TakesEnum)).GetGenericArguments()[0].IsValueType);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-10-13T13:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MJ-6A",
                                           "createdAt":  "2022-10-13T14:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0mypg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2023-01-22T23:20:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "\u003e That is strange and might be an actual bug. Do note that `MakeGenericType()` [does work when `struct` is added to the constraint](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRLKsBLCAbAE2QBoYQE4A7AHwAEAmARgFgAoNgNygQAIYeAvHwCeABwgB7MAAoAwgB4AfAEoA3J248A5oL4A6AOIQYRyhATYAxgEEEWuAFsIlGMmnKA2gAYAuuta0jACc0lp6AJLIAGpQeHAQACpiEGpsbPxCMMlScvIAopSOKv46mYbGpuZWtvZOLm6evv6BIWGRMXGJyansrBki4jmy9Eo9pfpGJs5VNnaOzq7u3n5sLaER0bHxSeI9GrwuulmDMgBycHh4UMB4EKN6ALJQANYQlRaWOxChPWsueqcoE49gEAMw8Bg8BQJRQ8ADuAAtzBAeAkeCAeAVHDwAN48AC+aV6tHBkOG8hh8KRSFR6J4yBgFEsMGImMKDlxBKAA==) (which is basically what you want 99.9999999...% of the time).\r\n\r\nAbsolutely - thanks.\r\n\r\nI only came across this problem while running a bulk of unit tests trying various permutations, but thought it was worthy of mention in case it was a bug.\r\n",
                                           "updatedAt":  "2022-10-13T14:14:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NJLDf",
                                           "createdAt":  "2022-10-28T00:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nSystem.ArgumentException is thrown when trying to make a Nullable\u003c\u003e generic type from a System.Enum constrained generic type parameter.\r\n\r\nThe exception has the following message:\r\n\r\n_\u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type parameter \u0027T\u0027._\r\n\r\n### Reproduction Steps\r\n\r\nThis example code can be used to reproduce the problem.\r\n\r\n```csharp\r\nnamespace Example;\r\n\r\npublic class Example\u003cT\u003e where T : Enum\r\n{\r\n}\r\n\r\ninternal class Program\r\n{\r\n    static void Main()\r\n    {\r\n        Type type = typeof(Nullable\u003c\u003e).MakeGenericType(typeof(Example\u003c\u003e).GetGenericArguments()[0]);\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nSince the IsValueType property of the generic type parameter is True, I would expect that this operation would be allowed.\r\n\r\n### Actual behavior\r\n\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=GenericArguments[0], \u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type \u0027T\u0027.\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Example.Program.Main() in C:\\Example\\Program.cs:line 11\r\n\r\n  This exception was originally thrown at this call stack:\r\n    System.RuntimeTypeHandle.Instantiate(System.RuntimeType)\r\n    System.RuntimeType.MakeGenericType(System.Type[])\r\n\r\nInner Exception 1:\r\nTypeLoadException: GenericArguments[0], \u0027T\u0027, on \u0027System.Nullable`1[T]\u0027 violates the constraint of type parameter \u0027T\u0027.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6 SDK 6.0.401\r\n- Windows 10 Enterprise (10.0.19044.2006)\r\n- x64\r\n- Microsoft Visual Studio Enterprise 2022 (64-bit) Version 17.3.4\r\n\r\n### Other information\r\n\r\nJust for info - I recently raised another issue related to a System.Enum constrainted generic type parameter (#76300).\r\n\r\nApologies, if again, I\u0027ve raised a duplicate issue here.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ep66ush\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-28T00:06:51Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Exception thrown when making a Nullable\u003c\u003e generic type from a System.Enum constrained generic type parameter",
        "labels":  [
                       "bug",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78917",
        "createdAt":  "2022-11-28T15:34:03Z",
        "number":  78917,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:14:11Z",
        "body":  "`Activator.CreateInstance()` was optimized in v6 and made super fast when invoking the default constructor. As shown in the benchmarks below, currently calling a zero-parameter constructor through `Activator.CreateInstance(...)` is ~1.7x faster than `ConstructorInfo`. Note that before the [7.0 feature to use IL emit](https://github.com/dotnet/runtime/pull/67917), `Activator.CreateInstance(...)` used to be ~6x faster than `ConstructorInfo`.\r\n```\r\n|                                                                       Method |        Job |              Toolchain |       Mean |      Error |     StdDev |     Median |        Min |        Max | Ratio | RatioSD |  Gen 0 | Allocated | Alloc Ratio |\r\n|----------------------------------------------------------------------------- |----------- |----------------------- |-----------:|-----------:|-----------:|-----------:|-----------:|-----------:|------:|--------:|-------:|----------:|------------:|\r\n|                                       Ctor0_ActivatorCreateInstance_NoParams | Job-VAFQFP | \\newinvoke\\corerun.exe |   8.700 ns |  0.1857 ns |  0.1646 ns |   8.733 ns |   8.395 ns |   8.999 ns |  1.00 |    0.00 | 0.0054 |      56 B |        1.00 |\r\n|                                                               Ctor0_NoParams | Job-VAFQFP | \\newinvoke\\corerun.exe |  14.928 ns |  0.5837 ns |  0.6721 ns |  14.697 ns |  14.234 ns |  16.242 ns |  1.00 |    0.00 | 0.0053 |      56 B |        1.00 |\r\n```\r\n\r\nAlthough `Activator` is faster than `ConstructorInfo` that only applies for cases when there is a default constructor. When there are constructor parameters, calling `ConstructorInfo` is up to 2x faster.\r\n\r\nDue to the varying performance of these two APIs, reflection users that need to invoke constructors and want the maximum performance currently need to call `ConstructorInfo` when there are parameters and `Activator` when there are no parameters. This issue should make this choice go away by making `ConstructorInfo` the preferred API going forward for almost all cases by having `ConstructorInfo` call `Activator` for default constructors. This also avoids generating IL for these cases which can help with start-up and reduce global memory usage.\r\n\r\nUsing `ConstructorInfo` instead of `Activator` also has the advantage of forcing the caller select the appropriate constructor ahead of time, instead of auto-selecting each time the method is called by inspecting the parameters. If the caller does not know what constructor to call, then continuing to use `Activator` is fine.\r\n\r\nWe also need to look at normalizing the exception handling between these two APIs so they have the same Exception semantics for `OutOfMemoryException`.\r\n\r\nAlso see https://github.com/dotnet/runtime/issues/36194 for ideas on exposing \"Factory\" overloads that will not throw `TargetInvocationException\".",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkOpLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PO6DP",
                                           "createdAt":  "2022-11-28T15:34:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`Activator.CreateInstance()` was optimized in v6 and made super fast when invoking the default constructor. However, as shown in the benchmarks below, currently calling a zero parameter constructor through `Activator.CreateInstance(...)` is ~1.7x faster than `ConstructorInfo`. Note that before the [7.0 feature to use IL emit](https://github.com/dotnet/runtime/pull/67917), `Activator.CreateInstance(...)` used to be ~6x faster than `ConstructorInfo`.\r\n```\r\n|                                                                       Method |        Job |              Toolchain |       Mean |      Error |     StdDev |     Median |        Min |        Max | Ratio | RatioSD |  Gen 0 | Allocated | Alloc Ratio |\r\n|----------------------------------------------------------------------------- |----------- |----------------------- |-----------:|-----------:|-----------:|-----------:|-----------:|-----------:|------:|--------:|-------:|----------:|------------:|\r\n|                                       Ctor0_ActivatorCreateInstance_NoParams | Job-VAFQFP | \\newinvoke\\corerun.exe |   8.700 ns |  0.1857 ns |  0.1646 ns |   8.733 ns |   8.395 ns |   8.999 ns |  1.00 |    0.00 | 0.0054 |      56 B |        1.00 |\r\n|                                                               Ctor0_NoParams | Job-VAFQFP | \\newinvoke\\corerun.exe |  14.928 ns |  0.5837 ns |  0.6721 ns |  14.697 ns |  14.234 ns |  16.242 ns |  1.00 |    0.00 | 0.0053 |      56 B |        1.00 |\r\n```\r\n\r\nAlthough `Activator` is faster than `ConstructorInfo` that only applies for cases when there is a default constructor. When there are constructor parameters, calling `ConstructorInfo` is up to 2x faster.\r\n\r\nDue to the varying performance of these two APIs, reflection users that need to invoke constructors and want the maximum performance currently need to call `ConstructorInfo` when there are parameters and `Activator` when there are no parameters. This issue should make this choice go away by making `ConstructorInfo` the preferred API going forward for almost all cases by having `ConstructorInfo` call `Activator` for default constructors. This also avoids generating IL for these cases which can help with start-up and reduce global memory usage.\r\n\r\nUsing `ConstructorInfo` instead of `Activator` also has the advantage of forcing the caller select the appropriate constructor ahead of time, instead of auto-selecting each time the method is called by inspecting the parameters. If the caller does not know what constructor to call, then continuing to use `Activator` is fine.\r\n\r\nWe also need to look at normalizing the exception handling between these two APIs so they have the same Exception semantics for `OutOfMemoryException`.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-28T15:34:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ6ku",
                                           "createdAt":  "2023-07-24T20:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9.0.\r\n\r\nNote that the existing ConstructorInfo invoke API was made ~1.2x faster with this PR: https://github.com/dotnet/runtime/pull/88415 which puts it much closer to Activator.CreateInstance (minus the overhead of emit).",
                                           "updatedAt":  "2023-07-24T20:55:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Have `ConstructorInfo` use `Activator.CreateInstance()` instead of emit for default constructors",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "Cost:M"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79065",
        "createdAt":  "2022-12-01T02:09:35Z",
        "number":  79065,
        "author":  "IS4Code",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-05T14:21:56Z",
        "body":  "### Description\r\n\r\nCalling `ArgList.GetNextArg` fails if the argument passed through `__arglist` has a ByRef-like type.\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nSpan\u003cbyte\u003e s1 = stackalloc byte[1];\r\nSpan\u003cbyte\u003e s2 = stackalloc byte[2];\r\nSpan\u003cbyte\u003e s3 = stackalloc byte[3];\r\nMethod(__arglist(s1, s2, s3));\r\n\r\nstatic void Method(__arglist)\r\n{\r\n    var ai = new ArgIterator(__arglist);\r\n    while(ai.GetRemainingCount() \u003e 0)\r\n    {\r\n        var tr = ai.GetNextArg();\r\n        var val = __refvalue(tr, Span\u003cbyte\u003e);\r\n        Console.WriteLine(val.Length);\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe value should be extracted, since C# itself allows you to pass the struct and retrieve the value without complaining, and it is not possible for the returned `TypedReference` to escape the method anyway.\r\n\r\n### Actual behavior\r\n\r\nSystem.NotSupportedException: \u0027Type is not supported.\u0027 is thrown from `GetNextArg`.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT7ftVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PdMdE",
                                           "createdAt":  "2022-12-01T02:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-01T02:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pq6GE",
                                           "createdAt":  "2022-12-05T02:28:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwp1nQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-12-05T02:34:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This is \"by-design\" at present. The issue here is ByRef like types are not presently supported in this part of the stack nor in any Reflection-esque APIs. Additionally the `__arglist` keyword and semantics are narrowly defined to support only enough to satisfy the C++/CLI semantics as they match .NET Framework on Windows and therefore no new features are likely to be supported without broader need.\r\n\r\nAs far as why this isn\u0027t naturally supported is a `TypedReference` is presently unable to support a `ref` to a ByRef-like type in a safe manner, see https://github.com/dotnet/csharplang/blob/main/proposals/csharp-11.0/low-level-struct-improvements.md#ref-fields-to-ref-struct. However discussion on this topic and how a `TypedReference` could reference a ByRef-like type are being considered for .NET 8 Reflection scenarios. See https://github.com/dotnet/runtime/issues/45152 and https://github.com/dotnet/runtime/issues/75358.",
                                           "updatedAt":  "2022-12-05T02:28:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pq6Md",
                                           "createdAt":  "2022-12-05T02:29:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nCalling `ArgList.GetNextArg` fails if the argument passed through `__arglist` has a ByRef-like type.\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nSpan\u003cbyte\u003e s1 = stackalloc byte[1];\r\nSpan\u003cbyte\u003e s2 = stackalloc byte[2];\r\nSpan\u003cbyte\u003e s3 = stackalloc byte[3];\r\nMethod(__arglist(s1, s2, s3));\r\n\r\nstatic void Method(__arglist)\r\n{\r\n    var ai = new ArgIterator(__arglist);\r\n    while(ai.GetRemainingCount() \u003e 0)\r\n    {\r\n        var tr = ai.GetNextArg();\r\n        var val = __refvalue(tr, Span\u003cbyte\u003e);\r\n        Console.WriteLine(val.Length);\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe value should be extracted, since C# itself allows you to pass the struct and retrieve the value without complaining, and it is not possible for the returned `TypedReference` to escape the method anyway.\r\n\r\n### Actual behavior\r\n\r\nSystem.NotSupportedException: \u0027Type is not supported.\u0027 is thrown from `GetNextArg`.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIllidanS4\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-05T02:29:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pt-1V",
                                           "createdAt":  "2022-12-05T14:21:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCws0xA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-12-05T17:01:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future. When the other higher-priority byref-like issues are resolved, this will be considered.",
                                           "updatedAt":  "2022-12-05T14:21:56Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ByRef-like structs can be passed via __arglist but not retrieved",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79331",
        "createdAt":  "2022-12-07T06:24:24Z",
        "number":  79331,
        "author":  "wallymathieu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODETCSQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2023-03-18T18:58:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bretttt",
                                            "createdAt":  "2025-06-17T23:12:29Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Jflaurendeau",
                                            "createdAt":  "2025-06-19T14:59:37Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-26T10:40:36Z",
        "body":  "### Description\n\nWrite generic code to work around that you can\u0027t get a static reference to a static method. Since you can cache the reflected instance or use roslyn generator some these limitations have workarounds. However, what we have found is that trying to invoke the static abstract interface method by fetching the method using reflection and then invoking it causes BadImageFormatException to be thrown. \r\n\n\n### Reproduction Steps\n\nFrom https://github.com/dotnet/fsharp/issues/14391#issuecomment-1330477803\r\n```C#\r\nnamespace Foo\r\n{\r\n    class C\r\n    {\r\n        public interface IFoo\u003cT\u003e where T : IFoo\u003cT\u003e\r\n        {\r\n            static abstract int A();\r\n            abstract int B();\r\n        }\r\n\r\n        public struct Foo : IFoo\u003cFoo\u003e\r\n        {\r\n            public static int A() { return 2; }\r\n            public int B() { return 3; }\r\n        }\r\n\r\n        public static int Main(string[] _)\r\n        {\r\n            var foo = new Foo();\r\n            var x = typeof(Foo).GetInterface(\"IFoo`1\").GetMethod(\"B\").Invoke(foo, null);\r\n            System.Console.WriteLine(x);\r\n            var y = typeof(Foo).GetInterface(\"IFoo`1\").GetMethod(\"A\").Invoke(null, null);\r\n            System.Console.WriteLine(y);\r\n            /* Throws\r\n            System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n             ---\u003e System.BadImageFormatException: Bad IL format.\r\n               at Foo.C.IFoo`1.A()\r\n               at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n               --- End of inner exception stack trace ---\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n               at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n               at Foo.C.Main(String[] _)\r\n               at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n             */\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nThe expected behaviour would be to match the behaviour of regular instance methods on interfaces (you can invoke them through reflection).\n\n### Actual behavior\n\nInstead of being able to call the method we get a BadImageFormatException saying that it is Bad IL format:\r\n```\r\n            System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n             ---\u003e System.BadImageFormatException: Bad IL format.\r\n               at Foo.C.IFoo`1.A()\r\n               at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n               --- End of inner exception stack trace ---\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n               at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n               at Foo.C.Main(String[] _)\r\n               at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n               at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\n\n### Regression?\n\nThis is a new feature in .net.\n\n### Known Workarounds\n\nThe workaround is to not use the feature (i.e. use a dummy instance and instance interface methods).\n\n### Configuration\n\nOperating system (Windows Appveyor Visual Studio 2022 image, Mac OS X, GitHub Ubuntu latest (2022-11) )\r\n.NET Runtime kind (.NET 7.0.100)\n\n### Other information\n\nOriginally tracked as [issue on F#](https://github.com/dotnet/fsharp/issues/14391) but then found out that it is not F# specific.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOscCK8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P5Ygn",
                                           "createdAt":  "2022-12-07T06:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-07T06:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P5axA",
                                           "createdAt":  "2022-12-07T06:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Cc @trylek for static abstracts",
                                           "updatedAt":  "2022-12-07T06:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Riubi",
                                           "createdAt":  "2022-12-30T19:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I just hit this. Smaller repro:\r\n```c#\r\nusing System.Numerics;\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args) =\u003eTest(long.MaxValue);\r\n\r\n    static void Test\u003cT\u003e(T value) where T : INumber\u003cT\u003e\r\n    {\r\n        Console.WriteLine(value \u003e T.Zero); // put breakpoint here and evaluate \"value \u003e T.Zero\" in the immediate window\r\n    }\r\n}\r\n```\r\nIn the immediate window, I get\r\n```cmd\r\nvalue \u003e T.Zero\r\n\u0027value \u003e T.Zero\u0027 threw an exception of type \u0027System.BadImageFormatException\u0027\r\n    Data: {System.Collections.ListDictionaryInternal}\r\n    FileName: null\r\n    FusionLog: null\r\n    HResult: -2147024885\r\n    HelpLink: null\r\n    InnerException: null\r\n    Message: \"Bad IL format.\"\r\n    Source: \"System.Private.CoreLib\"\r\n    StackTrace: \"   at System.Numerics.INumberBase`1.get_Zero()\"\r\n    TargetSite: {TSelf get_Zero()}\r\n```\r\n\r\nThis is with 17.4.3. It occurs whether targeting 7.0 or 8.0.\r\n\r\nIt is an impediment when debugging code written to use the new generic math features (cc @tannergooding )",
                                           "updatedAt":  "2022-12-30T19:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RmEAq",
                                           "createdAt":  "2023-01-02T13:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think this is a bit more complicated than a simple bug. \r\n\r\nTake this as an example:\r\n```C#\r\npublic class C {\r\n    public static void Main() {\r\n        // A\r\n        typeof(Foo).GetInterface(\"IFoo`1\").GetMethod(\"DoIt\").Invoke(null, new object[] {});\r\n        \r\n        // B\r\n        Console.WriteLine(typeof(Foo).GetInterface(\"IFoo`1\") == typeof(IFoo\u003cstring\u003e));\r\n        typeof(IFoo\u003cstring\u003e).GetMethod(\"DoIt\").Invoke(null, new object[] {});\r\n        \r\n        // C\r\n        typeof(Foo).GetMethod(\"Test\").Invoke(new MyFoo(), new object [] {});\r\n    }\r\n    \r\n    public interface IFoo\u003cT\u003e { static abstract void DoIt(); }\r\n    \r\n    public abstract class Foo : IFoo\u003cstring\u003e {\r\n        public static void DoIt() {}\r\n        \r\n        public abstract void Test();\r\n    }\r\n    \r\n    public class MyFoo : Foo\r\n    {\r\n        public override void Test() { Console.WriteLine(\"test\"); }\r\n    }\r\n}\r\n```\r\n\r\nA is basically a repro from this issue. It throws.\r\n\r\nB shows that it needs to behave the same as A. Meaning the `GetInterface` call can only return `IFoo\u003cstring\u003e` type and nothing more (otherwise it would effectively break existing API beahviors). But calling the abstract static method on `IFoo\u003cstring\u003e` should obviously fail - since there\u0027s no implementation on the interface and there\u0027s no way to tell which implementation to use.\r\n\r\nC is how this works for instance abstract methods - it\u0027s possible to invoke them, but only because the implementation is resolved by looking at the actual type of the object passed as the instance to the `Invoke` method. In this case the `new MyFoo()`.\r\n\r\nBut there\u0027s no such thing for static methods - they must have the instance parameter `null`. And so there\u0027s no way to tell the `Invoke` API how to resolve the implementation. In normal code this is done via constrains. The call instruction is actually a constrained call where the constraint specify the type with the implementation. But reflection doesn\u0027t have an API to do this.\r\n\r\nI\u0027m no aware of an API which could do this today - I think we basically need a new API - or some new pattern which doesn\u0027t work currently.",
                                           "updatedAt":  "2023-01-02T13:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RmF1s",
                                           "createdAt":  "2023-01-02T13:17:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wallymathieu",
                                           "body":  "So having another exception in the static interface case that tells you to use another API would be more helpful. Bad image format exception does not feel very helpful.",
                                           "updatedAt":  "2023-01-02T13:17:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RmGRM",
                                           "createdAt":  "2023-01-02T13:20:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@wallymathieu absolutely agree that the exception should be different. But I think the bigger point is that there\u0027s probably no API to do this today. The only workaround I could think of is to manually implement the method implementation resolution - so find the matching implementation method in `Foo` for the `IFoo\u003cT\u003e.DoIt` - which is what the possibly new reflection API should do for you.",
                                           "updatedAt":  "2023-01-02T13:20:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rm_Bh",
                                           "createdAt":  "2023-01-02T20:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "Isn\u0027t `GetInterfaceMap()` sufficient? For example, the following code works:\r\n\r\n```c#\r\ntypeof(Foo).GetInterfaceMap(typeof(IFoo\u003cstring\u003e)).TargetMethods[0].Invoke(null, new object[0]);\r\n```\r\n\r\nThough finding the right method from among the `TargetMethods` is not particularly convenient, which is why new API could still be useful.",
                                           "updatedAt":  "2023-01-02T20:01:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rm_2-",
                                           "createdAt":  "2023-01-02T20:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyJ4lA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-01-05T14:08:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I agree that the method resolution isn\u0027t crazy complex. I still think it would be better to have a reflection API for this so that we can maintain that it matches the runtime behavior even going forward.",
                                           "updatedAt":  "2023-01-02T20:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RyuPW",
                                           "createdAt":  "2023-01-05T14:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "@svick `GetInterfaceMap` is also bugged for interfaces containing `static abstract` members: #73658",
                                           "updatedAt":  "2023-01-05T14:02:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0_9H",
                                           "createdAt":  "2023-07-19T02:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Any idea if this could impact .NET 6?",
                                           "updatedAt":  "2023-07-19T02:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iKBhB",
                                           "createdAt":  "2023-07-23T09:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wallymathieu",
                                           "body":  "Since the feature (static abstract methods) does not exist in .NET 6, it does not impact .NET 6 as far as I know. \r\n\r\nHowever if you have a library in .NET 6 used by a .NET 7 project then the library code could trigger the exception.",
                                           "updatedAt":  "2023-07-23T09:43:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqs8U",
                                           "createdAt":  "2023-08-09T20:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "Rebranded as .NET 9 design discussion; there\u0027s very little we can do about this right now but it\u0027s definitely worth finding a reasonable solution for.",
                                           "updatedAt":  "2023-08-09T20:57:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o4HjO",
                                           "createdAt":  "2023-10-12T12:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YourYoungerBrothersPug",
                                           "body":  "Hi, working on production software and am trying to do similar to the above Foo example. Just adding to this to say that it would be a useful feature for .NET :)\r\n\r\npublic interface IChild\r\n{\r\n\tpublic static abstract string TableName { get; }\r\n\t...\r\n}\r\n\r\npublic abstract class Child : System.EventArgs, IChild\r\n{\r\n\tpublic static string TableName { get; }\r\n\t...\r\n}\r\n\r\npublic class dbo_Ceases : Child\r\n{\r\n\tpublic static string TableName { get; } = \"Ceases\";\r\n\t...\r\n}",
                                           "updatedAt":  "2023-10-12T12:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H0SFU",
                                           "createdAt":  "2024-08-09T19:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "We\u0027re going to have to bump this again as it\u0027s too late in the .NET 9 cycle. \r\n\r\n@ericstj would this be better off with a System.Reflection label?",
                                           "updatedAt":  "2024-08-09T19:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H05yf",
                                           "createdAt":  "2024-08-09T21:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Seems so - @steverharter looks like we can\u0027t Invoke default interface methods.  That feels like a gap in reflection that\u0027s worth filling.  Too late for 9.0 of course.",
                                           "updatedAt":  "2024-08-09T21:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H056X",
                                           "createdAt":  "2024-08-09T21:44:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-09T21:44:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xwIrx",
                                           "createdAt":  "2025-06-18T00:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bretttt",
                                           "body":  "I ran into this issue today, created these as workaround.\n\n```\n\n\n    public static object? InvokeVirtualStaticMethod(this MethodInfo method, Type forType, params object[] arguments)\n    {\n        if (!method.IsStatic)\n        {\n            throw new ArgumentException(\"Must be static.\", nameof(method));\n        }\n        if (!method.IsVirtual)\n        {\n            throw new ArgumentException(\"Must be virtual.\", nameof(method));\n        }\n        DynamicMethod dynamicMethod = BuildDynamicMethodForVirtualStaticCall(method, forType);\n        return dynamicMethod.Invoke(null, arguments);\n    }\n\n    public static void EmitLdArg(this ILGenerator iLGenerator, int argumentIndex)\n    {\n        switch (argumentIndex)\n        {\n            case 0:\n                iLGenerator.Emit(OpCodes.Ldarg_0);\n                break;\n            case 1:\n                iLGenerator.Emit(OpCodes.Ldarg_1);\n                break;\n            case 2:\n                iLGenerator.Emit(OpCodes.Ldarg_2);\n                break;\n            case 3:\n                iLGenerator.Emit(OpCodes.Ldarg_3);\n                break;\n            case \u003e 3 and \u003c= 255:\n                iLGenerator.Emit(OpCodes.Ldarg_S, (byte)argumentIndex);\n                break;\n            default:\n                iLGenerator.Emit(OpCodes.Ldarg, argumentIndex);\n                break;\n        }\n    }\n\n    private static DynamicMethod BuildDynamicMethodForVirtualStaticCall(MethodInfo method, Type constrainedToType)\n    {\n        Type[] parameterTypes = [.. method.GetParameters().Select(p =\u003e p.ParameterType)];\n        DynamicMethod dynamicMethod = new(\"D\", method.ReturnType, parameterTypes);\n        ILGenerator ilGenerator = dynamicMethod.GetILGenerator();\n        for (int i = 0; i \u003c parameterTypes.Length; i++)\n        {\n            ilGenerator.EmitLdArg(i);\n        }\n        ilGenerator.Emit(OpCodes.Constrained, constrainedToType);\n        ilGenerator.Emit(OpCodes.Call, method);\n        ilGenerator.Emit(OpCodes.Ret);\n        return dynamicMethod;\n    }\n```\n\nI\u0027m no expert in the compiler, but I\u0027m not convinced invoking a static virtual method without knowing the target type (as the OP mentioned in their **expected behavior**) would be a valid thing to do. Consider this example:\n\n```\npublic interface IFoo\n{\n    abstract static string Bar();\n}\n\npublic class Buzz : IFoo\n{\n    static string IFoo.Bar()\n    {\n        return \"B2\";\n    }\n}\n```\n\nWhat should this code do?\n\n`typeof(IFoo).GetMethod(\"Bar\").Invoke(null);`\n\nIf the method is virtual you could return the base implementation, but things still get a little complicated, as shown in this example:\n\n```\n\npublic interface IFoo\n{\n    virtual static string Bar() =\u003e \"Foo1\";\n}\n\npublic interface IFoo2 : IFoo\n{\n    static string IFoo.Bar()\n    {\n        return \"Foo2\";\n    }\n}\n```\n\n`typeof(IFoo).GetMethod(\"Bar\").Invoke(null);` returns \"Foo1\", but since the IFoo2 method is explicitly overridden, you can\u0027t do\n`typeof(IFoo2).GetMethod(\"Bar\").Invoke(null);`",
                                           "updatedAt":  "2025-06-18T00:37:33Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "BadImageFormatException when invoking static abstract method through reflection",
        "labels":  [
                       "design-discussion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80205",
        "createdAt":  "2022-12-20T09:59:47Z",
        "number":  80205,
        "author":  "dbeylkhanov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-23T00:09:36Z",
        "body":  "## API Proposal\r\n```diff\r\nnamespace System.Reflection;\r\n\r\npublic class PropertyInfo\r\n{\r\n+       public bool IsInitOnly { get; } \r\n}\r\n```\r\n\r\nNote \"IsInitOnly\" is used since that is similar to [FieldInfo\u0027s](https://learn.microsoft.com/dotnet/api/system.reflection.fieldinfo.isinitonly). However, \"IsExternalInit\" is an alternative based on [#34978](https://github.com/dotnet/runtime/issues/34978#issuecomment-614845405) and \u003chttps://github.com/dotnet/runtime/issues/43088#issuecomment-704304906\u003e.\r\n\r\n## Original description\r\nI am trying to check that my property has `init`-only setter, e.g. \r\n`public int Foo {get; init;}`\r\n\r\nit would be nice to have the `IsInitOnly` property in PropertyDefinition similar to which in `FieldDefinition` class from Mono.Cecil  \r\n\r\nBelow I posted the IsInitOnly property from FieldDefinition\r\n```\r\npublic bool IsInitOnly\r\n    {\r\n      get =\u003e this.attributes.GetAttributes((ushort) 32);\r\n      set =\u003e this.attributes = this.attributes.SetAttributes((ushort) 32, value);\r\n    }\r\n```\r\n\r\nBy using the IsInitOnly prop I can validate in my arch tests that all properties in Domain models are init-only",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeCw77g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Rvy4J",
                                           "createdAt":  "2022-12-20T09:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2022-12-20T09:59:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rvy4O",
                                           "createdAt":  "2022-12-20T11:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "See \u003chttps://github.com/dotnet/runtime/issues/34978\u003e and especially \u003chttps://github.com/dotnet/runtime/issues/43088#issuecomment-704304906\u003e for sample code that detects `init` aka `IsExternalInit` by using the existing System.Reflection API.\r\n\r\nAlternatively, your arch tests could perhaps use [IMethodSymbol.IsInitOnly](https://learn.microsoft.com/dotnet/api/microsoft.codeanalysis.imethodsymbol.isinitonly?view=roslyn-dotnet-4.3.0#microsoft-codeanalysis-imethodsymbol-isinitonly) in the Roslyn API.",
                                           "updatedAt":  "2022-12-20T11:42:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rvy4R",
                                           "createdAt":  "2022-12-28T09:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeylkhanov",
                                           "body":  "\u003e https://github.com/dotnet/runtime/issues/43088#issuecomment-704304906\r\n\r\nyeah, I saw this comment before the opening this issue. I think that the suggested solution is a crutch. I don\u0027t want use that in my tests",
                                           "updatedAt":  "2022-12-28T09:47:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rvy4V",
                                           "createdAt":  "2023-01-04T20:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nagilson",
                                           "body":  "May you elaborate as to why it\u0027s a crutch (there are 3 suggested solutions) and why you want that property in particular? Probably we will move this elsewhere, maybe the Runtime, doesn\u0027t seem like it\u0027s part of the SDK. ",
                                           "updatedAt":  "2023-01-04T20:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rvy6A",
                                           "createdAt":  "2023-01-04T22:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am trying to check that my property has `init`-only setter, e.g. \r\n`public int Foo {get; init;}`\r\n\r\nit would be nice to have the `IsInitOnly` property in PropertyDefinition similar to which in `FieldDefinition` class from Mono.Cecil  \r\n\r\nBelow I posted the IsInitOnly property from FieldDefinition\r\n```\r\npublic bool IsInitOnly\r\n    {\r\n      get =\u003e this.attributes.GetAttributes((ushort) 32);\r\n      set =\u003e this.attributes = this.attributes.SetAttributes((ushort) 32, value);\r\n    }\r\n```\r\n\r\nBy using the IsInitOnly prop I can validate in my arch tests that all properties in Domain models are init-only\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edbeylkhanov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003enagilson\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-04T22:05:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Txynp",
                                           "createdAt":  "2023-01-26T19:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e it would be nice to have the IsInitOnly property in PropertyDefinition similar to which in FieldDefinition class from Mono.Cecil\r\n\r\nDo you mean `PropertyInfo` (not PropertyDefinition)? `FieldInfo` already has an `IsInitOnly`...\r\n\r\nAlso the auto-labeler moved this to the System.ComponentModel namespace; I assume it was meant for System.Reflection.",
                                           "updatedAt":  "2023-01-26T19:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TxyoF",
                                           "createdAt":  "2023-01-26T19:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am trying to check that my property has `init`-only setter, e.g. \r\n`public int Foo {get; init;}`\r\n\r\nit would be nice to have the `IsInitOnly` property in PropertyDefinition similar to which in `FieldDefinition` class from Mono.Cecil  \r\n\r\nBelow I posted the IsInitOnly property from FieldDefinition\r\n```\r\npublic bool IsInitOnly\r\n    {\r\n      get =\u003e this.attributes.GetAttributes((ushort) 32);\r\n      set =\u003e this.attributes = this.attributes.SetAttributes((ushort) 32, value);\r\n    }\r\n```\r\n\r\nBy using the IsInitOnly prop I can validate in my arch tests that all properties in Domain models are init-only\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edbeylkhanov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-26T19:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UK-g-",
                                           "createdAt":  "2023-02-01T14:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeylkhanov",
                                           "body":  "\u003e \u003e it would be nice to have the IsInitOnly property in PropertyDefinition similar to which in FieldDefinition class from Mono.Cecil\r\n\u003e \r\n\u003e Do you mean `PropertyInfo` (not PropertyDefinition)? `FieldInfo` already has an `IsInitOnly`...\r\n\u003e \r\n\u003e Also the auto-labeler moved this to the System.ComponentModel namespace; I assume it was meant for System.Reflection.\r\n\r\nI have a property, not field",
                                           "updatedAt":  "2023-02-01T14:36:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ULApq",
                                           "createdAt":  "2023-02-01T14:42:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeylkhanov",
                                           "body":  "\u003e May you elaborate as to why it\u0027s a crutch (there are 3 suggested solutions)\r\n\r\n@nagilson well, do you suggest me use enumerator for every property in my type by checking existing of `init` like below way\r\n\r\n`foreach (var m in typeof(Foo).GetMethod(\"set_Boo\").ReturnParameter.GetRequiredCustomModifiers())` \r\n\r\ncorrect? if yes, you really think that it\u0027s not crutch?)\r\n",
                                           "updatedAt":  "2023-02-01T14:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V9ocA",
                                           "createdAt":  "2023-02-23T18:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e\u003e\u003e it would be nice to have the IsInitOnly property in PropertyDefinition similar to which in FieldDefinition class from Mono.Cecil\r\n\r\n\u003e\u003e Do you mean PropertyInfo (not PropertyDefinition)? FieldInfo already has an IsInitOnly...\r\n\r\n\u003e\u003e Also the auto-labeler moved this to the System.ComponentModel namespace; I assume it was meant for System.Reflection.\r\n\r\n\u003e I have a property, not field\r\n\r\nMy point is that \"PropertyDefinition\" is not a type in .NET reflection. -- it\u0027s called \"PropertyInfo\". Just making sure we\u0027re talking about the same thing (or not).\r\n\r\nAssuming we\u0027re talking about \"PropertyInfo\" then the ask here is to add:\r\n```diff\r\nnamespace System.Reflection\r\n{\r\n    public class PropertyInfo\r\n    {\r\n+       public bool IsExternalInit { get; } // not \"IsInitOnly\" based on discussion in issue #34978\r\n}\r\n```",
                                           "updatedAt":  "2023-02-23T18:12:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V9sUg",
                                           "createdAt":  "2023-02-23T18:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003eMay you elaborate as to why it\u0027s a crutch (there are 3 suggested solutions)\r\n\r\n\u003e\u003e @nagilson well, do you suggest me use enumerator for every property in my type by checking existing of init like below way\r\n\u003e\u003e foreach (var m in typeof(Foo).GetMethod(\"set_Boo\").ReturnParameter.GetRequiredCustomModifiers())\r\n\u003e\u003e correct? if yes, you really think that it\u0027s not crutch?)\r\n\r\nThe workaround is to add your own extensions method; I do however think that reflection should be updated to expose this directly. Sample workaround:\r\n```cs\r\n  internal class Program\r\n  {\r\n      static void Main(string[] args)\r\n      {\r\n          PropertyInfo propertyInfo = typeof(Person_InitExample).GetProperty(\"YearOfBirth\")!;\r\n          Console.WriteLine($\"IsInit: {propertyInfo.IsExternalEmit()}\");\r\n      }\r\n  }\r\n\r\n  internal static class ReflectionExtensions\r\n  {\r\n      public static bool IsExternalEmit(this PropertyInfo propertyInfo)\r\n      {\r\n          MethodInfo? setter = propertyInfo.GetSetMethod();\r\n          if (setter is not null)\r\n          {\r\n              foreach (Type modreq in setter.ReturnParameter.GetRequiredCustomModifiers())\r\n              {\r\n                  if (modreq == typeof(System.Runtime.CompilerServices.IsExternalInit))\r\n                  {\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n\r\n          return false;\r\n      }\r\n  }\r\n\r\n  class Person_InitExample\r\n  {\r\n      private int _yearOfBirth;\r\n\r\n      public int YearOfBirth\r\n      {\r\n          get { return _yearOfBirth; }\r\n          init { _yearOfBirth = value; }\r\n      }\r\n  }\r\n```",
                                           "updatedAt":  "2023-02-23T18:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZIduF",
                                           "createdAt":  "2023-04-04T05:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeylkhanov",
                                           "body":  "@steveharter \r\n\r\n\u003e My point is that \"PropertyDefinition\" is not a type in .NET reflection. -- it\u0027s called \"PropertyInfo\". Just making sure we\u0027re talking about the same thing (or not).\r\n\r\noops, I meant `Mono.Cecil.TypeDefinition`",
                                           "updatedAt":  "2023-04-04T05:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZIgD0",
                                           "createdAt":  "2023-04-04T06:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dbeylkhanov",
                                           "body":  "all right, chatGPT answered my question about accessing to IsInitOnly. \r\nAnd yes, your advice with the checking by using PropertyInfo works, thanks!\r\n\r\n\u003cimg width=\"794\" alt=\"image\" src=\"https://user-images.githubusercontent.com/7656847/229702022-c919d1c6-bee5-44b4-bebe-e3fd4ac71c85.png\"\u003e\r\n",
                                           "updatedAt":  "2023-04-04T06:36:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZXQGe",
                                           "createdAt":  "2023-04-06T15:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future; the ask for the \"IsInitOnly\" is valid and useful.",
                                           "updatedAt":  "2023-04-06T15:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rRwvh",
                                           "createdAt":  "2023-11-07T20:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://youtu.be/5FVp8Mjuoog?t=5886)\r\n\r\n* How much overhead does this add?\r\n* How about other concepts we recently added, such as `required`?\r\n* We recently added nullability information but we put them on a secondary type\r\n* We should probably think about how we want to expose those concepts. It seems worthwhile to batch multiple C# features together, rather than doing this piecemeal.\r\n\r\n```C#\r\nnamespace System.Reflection;\r\n\r\npublic partial class PropertyInfo\r\n{\r\n    public bool IsInitOnly { get; }\r\n}\r\n```",
                                           "updatedAt":  "2023-11-08T19:39:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Drmo",
                                           "createdAt":  "2024-03-22T02:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "IMO This is the wrong approach. Whether a setter is `init`-only isn\u0027t a property of the property itself, but rather of the setter (and as far as the language semantics go, it\u0027s actually a different kind of accessor altogether). For example, you can have a property that is `init`-only, the same way you can have a property that is `set`-only, without any getter whatsoever. The API as proposed here would give the impression that it\u0027s checking whether there is an `init` accessor and no `get` accessor.\r\n\r\nThis should instead eiher be something like:\r\n```diff\r\n namespace System.Reflection;\r\n\r\n public abstract class PropertyInfo : MemberInfo\r\n {\r\n     public virtual MethodInfo? GetMethod { get; }\r\n     public virtual MethodInfo? SetMethod { get; }\r\n+    public virtual bool SetMethodIsInitOnly { get; } // or IsSetAccessorInitOnly, or IsSetterInitOnly, etc...\r\n }\r\n```\r\nor\r\n```diff\r\n namespace System.Reflection;\r\n\r\n public abstract class PropertyInfo : MemberInfo\r\n {\r\n     public abstract bool CanRead { get; }\r\n     public abstract bool CanWrite { get; }\r\n\r\n     // if true, CanWrite can also return true to maintain backwards compatibility, or they can be separate\r\n     // and CanWrite could now return false and only CanInit would return true\r\n+    public virtual bool CanInit { get; }\r\n }\r\n```\r\nor\r\n```diff\r\n namespace System.Reflection;\r\n\r\n public abstract class MethodInfo : MethodBase\r\n {\r\n+    public virtual bool IsGetter { get; } // or IsGet or IsGetMethod\r\n+    public virtual bool IsSetter { get; } // or IsSet or IsSetMethod\r\n+    public virtual bool IsAdder { get; } // or IsAdd or IsAddMethod\r\n+    public virtual bool IsRemover { get; } // or IsRemove or IsRemoveMethod\r\n\r\n     // same compatibility concern as above\r\n+    public virtual bool IsInitter { get; } // or IsInit or IsInitMethod\r\n }\r\n```\r\nor\r\n```diff\r\n namespace System.Reflection;\r\n\r\n+public enum AccessorKind\r\n+{\r\n+    Get,\r\n+    Set,\r\n+    Init,\r\n+    Add,\r\n+    Remove,\r\n+}\r\n\r\n public abstract class MethodInfo : MethodBase\r\n {\r\n+    public virtual AccessorKind? AccessorKind { get; }\r\n }\r\n```\r\n\r\nor maybe even this, although the same compatibility applies here as well (whether CanWrite would also return true and SetMethod would return the method like today to maintain backwards compatibility, or they can be separate and only CanInit would return true and InitMethod would return the method)\r\n\r\n```diff\r\n namespace System.Reflection;\r\n\r\n public abstract class PropertyInfo : MemberInfo\r\n {\r\n     public abstract bool CanRead { get; }\r\n     public abstract bool CanWrite { get; }\r\n+    public virtual bool CanInit { get; }\r\n     public virtual MethodInfo? GetMethod { get; }\r\n     public virtual MethodInfo? SetMethod { get; }\r\n+    public virtual MethodInfo? InitMethod { get; }\r\n }\r\n```",
                                           "updatedAt":  "2024-03-22T21:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54D4gI",
                                           "createdAt":  "2024-03-22T03:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e * How about other concepts we recently added, such as `required`?\r\n\u003e * We recently added nullability information but we put them on a secondary type\r\n\u003e * We should probably think about how we want to expose those concepts. It seems worthwhile to batch multiple C# features together, rather than doing this piecemeal.\r\n\r\nThere is no problem with making them piece-meal. Even C# added all these features piece by piece with every release. Whether a property or field is `required` actually has nothing to do with whether it is nullable or not, it\u0027s a completely orthogonal feature. Yes, the common pattern will probably be to make non-nullable properties required and nullable ones optional but:\r\n1. You can have a required property that is nullable. This simply means that you have to explicitly initialize it in an object initializer - even if you initialize it to null.\r\n2. You can of course have a property that is non-nullable and isn\u0027t required. This (hopefully) means that the constructor sets it to a non-null value.",
                                           "updatedAt":  "2024-03-22T03:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54D6cY",
                                           "createdAt":  "2024-03-22T03:41:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Notably, with `required`: Unlike `init`, `required` is actually a property of the whole property/field (you can\u0027t even put it on an accessor), so there would be no problem with simply adding:\r\n```diff\r\n public abstract class FieldInfo : MemberInfo\r\n {\r\n+    public virtual bool IsRequired { get; }\r\n }\r\n\r\n public abstract class PropertyInfo : MemberInfo\r\n {\r\n+    public virtual bool IsRequired { get; }\r\n }\r\n```\r\nThis seems much more straightforward (although it gets a bit complicated with constructors that set all required fields... but I think checking whether the property was declared as `required` or not should still be possible).",
                                           "updatedAt":  "2024-03-22T03:58:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54D9rx",
                                           "createdAt":  "2024-03-22T03:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "cc @jaredpar I think the C# folk should also have a say or add some input here since this is about C# features.",
                                           "updatedAt":  "2024-03-22T04:00:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54EABM",
                                           "createdAt":  "2024-03-22T04:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Regarding whether the property should support externally-defined polyfilled modreqs rather than just the builtin corelib ones - YES it should, because the compiler does as well. Many libraries declare their own `IsExternalInit` (there are nuget packages for that) and use `init` to their heart\u0027s content (e.g. [IsExternalInit](https://www.nuget.org/packages/IsExternalInit) and [PolySharp](https://www.nuget.org/packages/PolySharp) - heck, even Roslyn defines their own `IsExternalInit` to be able to use `init` on netstandard). Just check whether the fully qualified name matches `System.Runtime.CompilerServices.IsExternalInit`, like the compiler does.",
                                           "updatedAt":  "2024-03-22T21:41:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54IV_P",
                                           "createdAt":  "2024-03-22T16:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODblgkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2024-03-22T19:07:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Whether a setter is init-only isn\u0027t a property of the property itself, but rather of the setter\r\n\r\nThis is true but at the same time `PropertyInfo` already has a few properties that effectively dig into the underlying `get / set` method. For example `CanRead / CanWrite` is talking more about the underlying members not the property itself. A property like `CanInit` would seem to fit into the existing pattern.\r\n\r\n\u003e if (modreq == typeof(System.Runtime.CompilerServices.IsExternalInit))\r\n\r\nI would recommend against this pattern. Yes that is the canonical `IsExternalInit` but due to down targetting and projects like [PolySharp][polysharp] there are other definitions of `IsExternalInit` in play. I would instead check the fully qualified type name for equivalence to `\"System.Runtime.CompilerServices.IsExternalInit\"`. \r\n\r\n\r\n[polysharp]: https://github.com/Sergio0694/PolySharp\r\n\r\n",
                                           "updatedAt":  "2024-03-22T16:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Jcrx",
                                           "createdAt":  "2024-03-22T19:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e This is true but at the same time `PropertyInfo` already has a few properties that effectively dig into the underlying `get / set` method. For example `CanRead / CanWrite` is talking more about the underlying members not the property itself. A property like `CanInit` would seem to fit into the existing pattern.\r\n\r\nRight. I would be OK with a property like `CanInit`. My pushback was that `IsInitOnly` suggests that it means there is no getter - setter-only properties exist and they have no getter. Similarly, init-only properties also exist and they also have no getter. Unless `IsInitOnly` was a property of the setter itself. Or something like `CanInit` doesn\u0027t have this problem, nor does something like `IsSetterInitOnly`.",
                                           "updatedAt":  "2024-03-22T19:44:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Jeiy",
                                           "createdAt":  "2024-03-22T19:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e I would recommend against this pattern. Yes that is the canonical `IsExternalInit` but due to down targetting and projects like [PolySharp](https://github.com/Sergio0694/PolySharp) there are other definitions of `IsExternalInit` in play.\r\n\r\nExactly. That\u0027s a really, really bad pattern that would break half the world. The language feature isn\u0027t defined by whether the modreq comes from mscorlib. Just this fact is an argument in favor of the API existing (and doing it correctly), since many people who will implement it manually will likely do it the wrong way.",
                                           "updatedAt":  "2024-03-22T19:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54JmDM",
                                           "createdAt":  "2024-03-22T19:34:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Right. I would be OK with a property like `CanInit`. My pushback was that `IsInitOnly` suggests that it means there is no getter - setter-only properties exist and they have no getter. Similarly, init-only properties also exist and they also have no getter. Something like `CanInit` doesn\u0027t have this problem, nor does something like `IsSetterInitOnly`.\r\n\r\nThat said, a feature like this:\r\n```diff\r\n namespace System.Reflection;\r\n\r\n+public enum AccessorKind\r\n+{\r\n+    Get,\r\n+    Set,\r\n+    Init,\r\n+    Add,\r\n+    Remove,\r\n+}\r\n\r\n public abstract class MethodInfo : MethodBase\r\n {\r\n+    public virtual AccessorKind? AccessorKind { get; }\r\n+    public virtual MemberInfo? AccessorMember { get; }\r\n\r\n     // Or maybe:\r\n+    public virtual MemberInfo? Parent { get; } // or DeclaringMember\r\n     // where Parent could be a property of an property accessor, an event of an event accessor,\r\n     // a parent method of a local function, or regular parent type of a regular method.\r\n\r\n     // Or even better, a MethodKind like Roslyn has that would allow checking not only if it\u0027s an accessor,\r\n     // but also a local function, operator, lambda, etc. Roslyn has this as `IMethodSymbol.MethodKind`.\r\n }\r\n```\r\nwould be really useful anyway as it would allow checking whether a method is an accessor when all you have is `MethodInfo`. This is really cumbersome today as you have to rely on implementation details. The same is true when you want to check whether a method is a local function and get the parent method.",
                                           "updatedAt":  "2024-03-22T21:16:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54J59A",
                                           "createdAt":  "2024-03-22T20:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "This `enum AccessorKind` looks incomplete from the ECMA-335 MethodSemantics viewpoint.  Both properties and events can have _Other_ accessors and it would be good to distinguish those from methods that are not accessors.  Events can also have _Fire_ accessors.\n\nMoreover, ECMA-335 allows the same method to be an accessor of multiple properties and/or events, if you don\u0027t care about CLS compliance.  So MethodInfo.AccessorKind and MethodInfo.Parent would have to pick one, ugh.",
                                           "updatedAt":  "2024-03-22T20:30:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54KLOt",
                                           "createdAt":  "2024-03-22T21:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "@KalleOlaviNiemitalo That was just an example. I\u0027m not too familiar with the runtime itself - it could of course be changed to be compliant. Although if we want this to have semantics of the runtime and not C#, then an `init` accessor would always have to be considered to be `set` accessor - and whether it\u0027s actually `init` would be a property of that set accessor.",
                                           "updatedAt":  "2024-03-22T21:11:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54KL6d",
                                           "createdAt":  "2024-03-22T21:13:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "FWIW, in Roslyn, whether a property has an `init` accessor is also a property of the accessor (`IMethodSymbol.IsInitOnly`), not of the property (`IPropertySymbol`). I really think with a name like `IsInitOnly`, it should be a property on the accessor itself and not on the property. If it\u0027s on the property, then it needs a different name (such as `IsSetterInitOnly`, because a property with `{ get; init; }` is ***not*** init-only, it\u0027s init-and-get. Only the setter is \"init-only\".",
                                           "updatedAt":  "2024-03-22T21:33:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54LDvu",
                                           "createdAt":  "2024-03-22T23:49:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "As an alternative in case the BCL doesn\u0027t want to expose C# specific concepts in reflection... Maybe it should be made easy to get Roslyn\u0027s `IMethodSymbol` from a `MethodInfo`, `ITypeSymbol` from a `Type`, etc? E.g. via extension methods. Probably in a separate NuGet package like `Microsoft.CodeAnalysis.Reflection`. @jaredpar Would this be possible, to wrap Roslyn\u0027s symbol types around runtime types?\r\n\r\nThis would have the advantage that it could work for VB-specific concepts as well. (And IMO, `ISymbol` should even be extended to be able to represent F# specific concepts and gather them from reflection types as well).",
                                           "updatedAt":  "2024-03-23T00:09:36Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "IsInitOnly boolean property for PropertyDefinition in SDK",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81299",
        "createdAt":  "2023-01-27T22:37:07Z",
        "number":  81299,
        "author":  "jtheisen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-02T21:40:06Z",
        "body":  "### Background and motivation\r\n\r\nI\u0027ve written [Moldinium](https://github.com/jtheisen/moldinium), which works by creating concrete types from interfaces at runtime using `System.Reflection.Emit`.\r\n\r\nOne particularly ugly can of worms in the implementation arises from the fact that, given a set of interfaces, I can\u0027t say which implemented method of one of those interfaces may in fact implement another. This information is stored in the assembly as an \".override\" declaration:\r\n\r\n```\r\n.method private hidebysig specialname virtual final \r\n        instance string  IBaseInterface.get_Name() cil managed\r\n{\r\n  .override IBaseInterface::get_Name\r\n  // Code size       6 (0x6)\r\n  .maxstack  8\r\n  IL_0000:  ldstr      \"foo\"\r\n  IL_0005:  ret\r\n} // end of method IImplementingInterface::IBaseInterface.get_Name\r\n```\r\n\r\nThe reflection APIs don\u0027t expose this information.\r\n\r\nNow that interfaces can have both declarations and implementations it would be great if the reflection APIs are amended.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Reflection;\r\n\r\npublic class MethodInfo\r\n{\r\n    MethodInfo[]? ExplicitlyOverridenMethods { get; }\r\n\r\n    // ...\r\n}\r\n```\r\n\r\nThis should give the methods referenced in the disassembly. It shouldn\u0027t matter whether the declaring type is an interface, a class or a value type.\r\n\r\n### The remaining gap\r\n\r\nThere are three virtual-override-styles in .NET:\r\n\r\n|     | override keyword | explicit implementation | implicit implementation\r\n| ------------- | ------------- | ------------- | ------------- |\r\n| reflection API | `MethodInfo.GetBaseDefinition` | none | none |\r\n| visible in disassembly | no | `.override` declaration | no\r\n\r\nEven with my above proposal, this would leave a gap in the API regarding classes implicitly implementing interfaces.\r\n\r\n### An alternative\r\n\r\nThere already is `GetInterfaceMap`, but it only works on classes.\r\n\r\nA more complete solution could be to allow `GetInterfaceMap` to be called on interfaces. It would then have to allow gaps in the implementation:\r\n\r\n```c#\r\npublic interface IBase\r\n{\r\n\tpublic void Foo();\r\n\r\n\tpublic void Bar();\r\n}\r\n\r\npublic interface IDerived : IBase\r\n{\r\n\tvoid IBase.Foo() {}\r\n}\r\n\r\n    var mapping = typeof(IDerived).GetIncompleteInterfaceMapping();\r\n```\r\n\r\nSince `GetInterfaceMap` gives the `TargetMethods` as a non-nullable array, it would have to be a new function with a new corresponding return type. For example, `typeof(IDerived).GetIncompleteInterfaceMapping().TargetMethods` should be a two-valued array with the first method being the one in `IDerived` and the second being a null.\r\n\r\nAlternatively, to avoid adding a method name and type, one could also just give the method declaration in the `TargetMethods` when there is no implementation.\r\n\r\nAnother variant would be to add a parameterless overload:\r\n\r\n```c#\r\n    public static InterfaceMapping GetInterfaceMapping(Type self) =\u003e self.GetInterfaceMapping(self);\r\n```\r\n\r\nIn contrast to the previous use cases, there\u0027s little point in restricting the method to a single interface when it\u0027s called on an interface.\r\n\r\nIn any case, since this wasn\u0027t allowed for interfaces before, this is no breaking change.\r\n\r\nThis alternative would be more complete, but I guess it\u0027s more complex to implement.\r\n\r\n### Risks\r\n\r\nNo risk as no existing semantics change.\r\n\r\n### Difficulties with workarounds\r\n\r\nMoldinium currently tries to work around this by collecting method implementation candidates by name and signature. This is, however, very icky and error prone as the logic on when two signatures are equal (ie. when a method can actually implement another) isn\u0027t trivial. Normally at least `SignatureHelper` may help with that, but that\u0027s not available on Blazor WebAssembly.\r\n\r\nI\u0027ve also thought about creating a dummy type first and then use `Ldvirtftn` to ask all base methods what their implementation methods are. The problem with this is that in order to create this dummy type, I still need to know which methods on the interface the user of my library hands me still need implementing (lest I get an exception on type creation). Figuring this out is just as difficult as the original problem, which defeats the purpose.\r\n\r\nSo, a crude alternative solution for my problem could also be allowing for types to be created with missing implementations for methods. It could turn out to be the easiest thing on you side, but of course it\u0027s not elegant.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaslFjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5T33rV",
                                           "createdAt":  "2023-01-27T22:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI\u0027ve written [Moldinium](https://github.com/jtheisen/moldinium), which works by creating concrete types from interfaces at runtime using `System.Reflection.Emit`.\r\n\r\nOne particularly ugly can of worms in the implementation arises from the fact that, given a set of interfaces, I can\u0027t say which implemented method of one of those interfaces may in fact implement another. This information is stored in the assembly as an \".override\" declaration:\r\n\r\n```\r\n.method private hidebysig specialname virtual final \r\n        instance string  IBaseInterface.get_Name() cil managed\r\n{\r\n  .override IBaseInterface::get_Name\r\n  // Code size       6 (0x6)\r\n  .maxstack  8\r\n  IL_0000:  ldstr      \"foo\"\r\n  IL_0005:  ret\r\n} // end of method IImplementingInterface::IBaseInterface.get_Name\r\n```\r\n\r\nThe reflection APIs don\u0027t expose this information.\r\n\r\nNow that interfaces can have both declarations and implementations it would be great if the reflection APIs can deliver this information.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Reflection;\r\n\r\npublic class MethodInfo\r\n{\r\n    MethodInfo? ExplicitlyOverridenMethod { get; set; }\r\n\r\n    // ...\r\n}\r\n```\r\n\r\nThis should give the method referenced in the disassembly or null if none was referenced.\n\n### API Usage\n\n(obvious)\n\n### Alternative Designs\n\nIt\u0027s a bit strange that the \".override\" declaration is missing when a class implements an interface implicitly. The `GetBaseDefinition` method that currently ignores interface overrides therefore ignores all such declarations.\r\n\r\nIt may be even better to have one method or property that gives the overriden method in both cases:\r\n\r\n```csharp\r\nnamespace System.Reflection;\r\n\r\npublic class MethodInfo\r\n{\r\n    MethodInfo? GetOverriddenMethod() =\u003e ExplicitlyOverridenMethod ?? GetBaseDefinition();\r\n\r\n    // ...\r\n}\r\n```\r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtheisen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-27T22:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T34Xt",
                                           "createdAt":  "2023-01-27T22:40:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "If this were to be provided, it would likely have to return a collection as one method can explicitly override multiple other methods in the ECMA format.",
                                           "updatedAt":  "2023-01-27T22:40:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T4wr3",
                                           "createdAt":  "2023-01-28T12:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@jkoritzinsky Thinking about this a bit more I realized there\u0027d still be a gap in the reflection API even if `ExplicitlyOverridenMethod ` (or rather `ExplicitlyOverridenMethods`) were provided: classes implementing interfaces implicitly. (I don\u0027t need this for my own case, but if this were to be solved at this level here it might as well be complete.)\r\n\r\nTherefore, it may be better to have an API that handles all three cases of \"overrides\" (see updated ticket) the same way the runtime does. I don\u0027t know where this logic lives, but something must select the correct methods for the vtable in a rather complicated logic that, in particular, considers method signatures.",
                                           "updatedAt":  "2023-01-28T12:25:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T7ebR",
                                           "createdAt":  "2023-01-30T07:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@jtheisen If you haven\u0027t, I\u0027d suggest reading the II.22.27 section of the [ECMA-335 specification](https://www.ecma-international.org/publications-and-standards/standards/ecma-335/) on what kinds of MethodImpls are allowed (these match `.override` in IL). I don\u0027t believe the proposed API surface would be able to express these relationships. In particular, it\u0027s possible for a single method to be a method impl of multiple virtual methods, or a method from a base class to become a methodimpl in one of the derived classes.\r\n\r\nAn API shape that would work is an API on `System.Type` that simply returns a list of pairs of methodinfos (basically just presenting what is in the file format).",
                                           "updatedAt":  "2023-01-30T07:11:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T7htQ",
                                           "createdAt":  "2023-01-30T07:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e An API shape that would work is an API on `System.Type` that simply returns a list of pairs of methodinfos\r\n\r\nSo...... [`GetInterfaceMap`](https://learn.microsoft.com/en-us/dotnet/api/system.type.getinterfacemap)?",
                                           "updatedAt":  "2023-01-30T07:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T7igL",
                                           "createdAt":  "2023-01-30T07:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e \u003e An API shape that would work is an API on `System.Type` that simply returns a list of pairs of methodinfos\r\n\u003e \r\n\u003e So...... [`GetInterfaceMap`](https://learn.microsoft.com/en-us/dotnet/api/system.type.getinterfacemap)?\r\n\r\nIt would look like that, yes, but it would only include the `.override` relationships that may or may not be for interface methods.",
                                           "updatedAt":  "2023-01-30T07:28:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T--7Q",
                                           "createdAt":  "2023-01-30T17:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@MichalStrehovsky I updated the proposal to reflect your and @jkoritzinsky\u0027s pointing out that their can be multiple implemented methods.\r\n\r\nFor my own case, getting that would be enough, as I need it only for interfaces and interfaces override only explicitly, ie. they always have an `.override` declaration. So that would make me happy.\r\n\r\nSpeaking for .NET in general, it\u0027d still not bet a complete picture though, as the remaining \"default inheritance rules provided by the CLI\" (from the section you referenced) are not trivial to replicate either - this again involves comparing signatures as far as I understand it.",
                                           "updatedAt":  "2023-01-30T17:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T_JJ_",
                                           "createdAt":  "2023-01-30T17:51:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@MichalStrehovsky @Joe4evr I should also point out that my problem with `GetInterfaceMapping` is that it requires you to have a type to call it on, and that this type can\u0027t be an interface (which may also be incompletely implemented, obviously).\r\n\r\nI need this information to create a type, ergo I need it before I have one. I also can\u0027t create a dummy type first, because I need to know exactly which method implementations are missing to do so (lest I get an exception from the type builder). I also can\u0027t just implement them all because then I\u0027d overwrite the information I want to get.\r\n\r\nIf `GetInterfaceMapping` would work for interfaces, including incompletely implemented ones, that would work for me too.\r\n\r\nSo I added an alternative to the proposal, but I guess that\u0027s harder to implement.",
                                           "updatedAt":  "2023-01-30T17:51:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T_SiY",
                                           "createdAt":  "2023-01-30T18:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@MichalStrehovsky Also, just out of curiosity, when do multiple `.override`s ever happen? Public implicit overriding doesn\u0027t put in those declarations and that\u0027s the only case I can think of where in C# a method implements multiple methods.",
                                           "updatedAt":  "2023-01-30T18:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UB3g7",
                                           "createdAt":  "2023-01-31T05:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky Also, just out of curiosity, when do multiple `.override`s ever happen? Public implicit overriding doesn\u0027t put in those declarations and that\u0027s the only case I can think of where in C# a method implements multiple methods.\r\n\r\nI\u0027m not aware of a situation where C# would do this. But it can be done in IL and there might be boutique languages (or F#?) that do it. The file format and the reflection APIs are not tied to C#.",
                                           "updatedAt":  "2023-01-31T05:19:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UB4lc",
                                           "createdAt":  "2023-01-31T05:26:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The API to obtain the overrides cannot be on methodinfo. The MethodImpl overrides are in respect to a type not to a method. In IL, one can do this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/f1bdd5a6182f43f3928b389b03f7bc26f826c8bc/src/tests/Loader/classloader/generics/regressions/vsw395780/testExplicitOverride2.il#L46\r\n\r\nThe override does not have to be defined on the same type that defines the method. It just needs to be in the inheritance chan. We don\u0027t know if a method is an override of something unless we look at all the derived types. The API shape that can answer this from a MethodInfo is unimplementable. This has to be on Type.",
                                           "updatedAt":  "2023-01-31T05:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UF4Xc",
                                           "createdAt":  "2023-01-31T17:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@MichalStrehovsky \r\n\r\nI have no opinion on whether this would be desirable and I don\u0027t know the implementation, so I\u0027m thinking purely in terms of the API, but why can\u0027t it be on `MethodInfo` by using `ReflectedType`?\r\n\r\nFor example, consider [the following code](https://sharplab.io/#v2:C4LgTgrgdgPgAgJgIwFgBQ65IJwApgCeADgKYD2AZrgCICUAdAOInACyLAFmQCa4BErPgwBKJCgBsSAY2AluAFWIlaAbnSYEAAgBC6AN7oAkHADMmuABZNrXLU16AvuicY0iTdU0gd+50A==):\r\n\r\n```c#\r\n// prints \"D\"\r\nConsole.WriteLine(typeof(D).GetMethod(\"M\").ReflectedType);\r\n\r\nclass B\r\n{\r\n    public void M() {}\r\n}\r\n\r\nclass D : B\r\n{\r\n}\r\n```\r\n\r\nSo the `MethodInfo` knows about the derived type that it\u0027s been accessed from and if `D` contained any `.override`s, the `MethodInfo` should be able to access them.",
                                           "updatedAt":  "2023-01-31T17:59:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHZ5g",
                                           "createdAt":  "2023-01-31T23:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "I snooped around the sources a bit and realized that this also concerns the mono runtime as the CoreLib is the thing that deals with that.\r\n\r\nUpon realizing this, I tried how Mono behaves and it is indeed slightly different.\r\n\r\nMono doesn\u0027t fail on the `TypeBuilder.CreateType` call when the implementation is incomplete and instead fails on the `Activator.CreateInstance` call. This allows calling `Type.GetInterfaceMap`, but that then also fails with an ugly assertion error:\r\n\r\n```\r\nAssertion: should not be reached at /__w/1/s/src/mono/mono/metadata/class-accessors.c:86\r\n```\r\n\r\nIt\u0027s also clearer to me now why things like `SignatureHelper` don\u0027t work in Blazor. I previously assumed these things were implemented in .NET.\r\n\r\n@MichalStrehovsky @svick It seems to me that whether the `.override` appears on a type or on a method is just two ways of describing the same thing. The assembly file format just has a `MethodImpl` table with one type and two method columns. I\u0027m just very superficially familiar with this, so I could be wrong.",
                                           "updatedAt":  "2023-01-31T23:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHmXh",
                                           "createdAt":  "2023-02-01T00:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I have no opinion on whether this would be desirable and I don\u0027t know the implementation, so I\u0027m thinking purely in terms of the API, but why can\u0027t it be on MethodInfo by using ReflectedType?\r\n\r\nYes, it could be through ReflectedType. In that case (pretending there\u0027s a `.override` in `D`), `typeof(D).GetMethod(\"M\").ExplicitlyOverridenMethods` would return a non-empty array, and `typeof(B).GetMethod(\"M\").ExplicitlyOverridenMethods` (for the same method) would return an empty array.\r\n\r\n\u003e @MichalStrehovsky @svick It seems to me that whether the .override appears on a type or on a method is just two ways of describing the same thing. The assembly file format just has a MethodImpl table with one type and two method columns. I\u0027m just very superficially familiar with this, so I could be wrong.\r\n\r\nThe ILAsm syntax where the `.override` appears outside of the method body allows generating what II.22.27 of the ECMA-335 spec talks about:\r\n\r\n\u003e In the example above, Class specifies C, MethodDeclaration specifies I::M, MethodBody specifies the \r\nmethod which provides the implementation for I::M (either a method body within C, ***or a method body \r\nimplemented by a base class of C***).\r\n",
                                           "updatedAt":  "2023-02-01T00:44:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHuji",
                                           "createdAt":  "2023-02-01T01:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@MichalStrehovsky I see. But then I\u0027m not entirely sure I fully get the resulting semantics. Let\u0027s say you have the chain `D` \u003e `B` \u003e `I`, and `D` specifies that a method in `I` is to be implemented by a method on `B`.\r\n\r\nDo we then have three `MethodInfo`s in the reflection or just two? If `typeof(D).GetMethod(\"M\")` is a `MethodInfo` on `D` then its `ExplicitlyOverridden` methods would have to give pairs of `MethodInfo`s to reflect all of the information (as the given `MethodInfo` is neither the declaration nor the implementation).\r\n\r\n`typeof(D).GetMethod(\"M\")` can\u0027t be a `MethodInfo` of `B`, at least not the same as `typeof(B).GetMethod(\"M\")`, obviously, as that one doesn\u0027t have the `.override` declaration.\r\n\r\nMaybe it would be indeed better have a reflection property on the `Type`, giving pairs of `MethodInfo`s.",
                                           "updatedAt":  "2023-02-01T01:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XZGdT",
                                           "createdAt":  "2023-03-13T14:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@jtheisen this issue has expanded from the original to just expose \".override\". Perhaps rename the issue from\r\n\"[API Proposal]: Allow to retrieve the \".override\" declaration with the reflection APIs.\"\r\nto something like\r\n\"[API Proposal]: Support retrieving method override information as the runtime sees it\"\r\n\r\nI do see value in the ask, but this should be implementable outside of reflection. Even if reflection API(s) were added, it would likely be implemented (or try to be implemented) as a self-contained library method with no runtime hooks. That would also it to be available and consistent with all runtimes (including Mono).",
                                           "updatedAt":  "2023-03-13T14:00:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XZtjm",
                                           "createdAt":  "2023-03-13T15:23:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@steveharter If that was possible, I could do it myself, but I don\u0027t think it is. Do you have an idea how to do so without involving a change of the runtime?\r\n\r\nYour first ask is related: I think the .override information is the only thing I really need from the runtime to replicate the rest of the runtime\u0027s inheritance logic in a library. It also seems a lot more straight-forward to implement than the more challenging ask of including all inheritance information, including classes that implicitly implement interfaces.",
                                           "updatedAt":  "2023-03-13T15:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZXPDw",
                                           "createdAt":  "2023-04-06T15:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e and D specifies that a method in I is to be implemented by a method on B ... do we then have three MethodInfos in the reflection or just two?\r\n\r\nThis is why @MichalStrehovsky was saying the API belongs on `Type`, not `MethodInfo`. Consider:\r\n```diff\r\npublic class Type\r\n{\r\n+   MethodInfo[]? GetExplicitlyOverridenMethods(MethodInfo method); \r\n    // where method is on this Type or a base class\r\n}\r\n```\r\n\r\nNote that this is a top-down approach and doesn\u0027t include derived classes.\r\n\r\nThings can get ugly if a bottom-up approach is necessary: there can be multiple D\u0027s for B, and each of those could specify the overload information for B, plus the D\u0027s could live in other assemblies with its own MethodImpl tables unknown to B. I\u0027m assuming only a top-down approach is necessary, such as what the compiler emits in MethodImpl and what the runtime cares about.",
                                           "updatedAt":  "2023-04-06T15:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zavhu",
                                           "createdAt":  "2023-04-07T11:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtheisen",
                                           "body":  "@steveharter I did not meant to imply that an implementation in some `D` should show in any information retrieved from a base type `B` or one of its `MethodInfo`s if that\u0027s what you mean by \"bottom-up\". That would be really bizarre.\r\n\r\nBut yes, the API should probably live on the type.\r\n\r\nI don\u0027t like the signature `MethodInfo[]? GetExplicitlyOverridenMethods(MethodInfo method)` though, I\u0027d rather have something like `(MethodInfo, MethodInfo)[]? GetExplicitlyOverridenMethods()` as\r\n\r\n- the information is internally in a table anyway and\r\n- otherwise, at least in my use case, one would have to call the method for all candidate methods.",
                                           "updatedAt":  "2023-04-07T11:08:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qyUWO",
                                           "createdAt":  "2023-11-02T21:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Leaving as future; this is an uncommon scenario but someone can pick this up.\r\n\r\nThe API proposal would be something like:\r\n\r\n```diff\r\npublic class Type\r\n{\r\n+   (MethodInfo, MethodInfo)[]? GetExplicitlyOverridenMethods(); \r\n}\r\n```",
                                           "updatedAt":  "2023-11-02T21:40:06Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[API Proposal]: Allow to retrieve the \".override\" declaration with the reflection APIs",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83851",
        "createdAt":  "2023-03-23T21:22:30Z",
        "number":  83851,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T20:59:20Z",
        "body":  "Currently `Type.GetGenericParameterConstraints` throws NSE by design. However, see https://github.com/dotnet/runtime/pull/83850 where supporting this in MLC would allow access to cases where parameter constraints are implemented by custom modifiers.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWFR4xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YVHjG",
                                           "createdAt":  "2023-03-23T21:22:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently `Type.GetGenericParameterConstraints` throws NSE by design. However, see https://github.com/dotnet/runtime/pull/83850 where supporting this in MLC would allow access to cases where parameter constraints are implemented by custom modifiers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveharter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-23T21:22:40Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "MetadataLoadContext should support `Type.GetGenericParameterConstraints()`",
        "labels":  [
                       "enhancement",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86630",
        "createdAt":  "2023-05-23T09:13:29Z",
        "number":  86630,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:10:19Z",
        "body":  "Should we make a pass over our own libraries looking for places that might be affected by the function pointers breaking change? I just ran into one in #86629.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhgKMBw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5c6pGX",
                                           "createdAt":  "2023-05-23T09:13:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nShould we make a pass over our own libraries looking for places that might be affected by the function pointers breaking change? I just ran into one in #86629.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-23T09:13:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_I47",
                                           "createdAt":  "2023-05-23T20:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@steveharter can you have a look?",
                                           "updatedAt":  "2023-05-23T20:07:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dADS8",
                                           "createdAt":  "2023-05-24T00:32:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "An approach I would use is reviewing all places that call `IsPointer` or `HasElementType`.",
                                           "updatedAt":  "2023-05-24T00:32:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dnfyG",
                                           "createdAt":  "2023-05-31T17:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Sure I\u0027ll do a search.",
                                           "updatedAt":  "2023-05-31T17:33:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jxruX",
                                           "createdAt":  "2023-08-10T21:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Note this is somewhat involved: 225 matches in .cs files in 119 files including tests",
                                           "updatedAt":  "2023-08-10T21:54:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kApxA",
                                           "createdAt":  "2023-08-14T18:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Let\u0027s plan to do more of this investigation after RC1 snap.  If we happen to find anything we\u0027d likely want to fix it for 8.0 RC anyhow.",
                                           "updatedAt":  "2023-08-14T18:52:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GAowH",
                                           "createdAt":  "2024-07-24T15:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I previously performed some cursory checks but a thorough review will take more time.",
                                           "updatedAt":  "2024-07-24T15:31:40Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Make a pass over libraries wrt function pointers breaking change",
        "labels":  [
                       "investigate",
                       "area-System.Reflection",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87657",
        "createdAt":  "2023-06-15T21:59:19Z",
        "number":  87657,
        "author":  "reflectronic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAMxcw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xpl0itR",
                                            "createdAt":  "2023-06-15T22:14:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2023-06-15T22:34:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2023-06-16T01:33:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2023-06-17T20:03:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msedi",
                                            "createdAt":  "2023-08-04T10:58:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomerow",
                                            "createdAt":  "2023-09-20T07:30:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveAurionix",
                                            "createdAt":  "2024-02-01T15:42:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS4Code",
                                            "createdAt":  "2024-02-21T12:53:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwellsx",
                                            "createdAt":  "2024-02-22T19:54:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrApache",
                                            "createdAt":  "2025-03-18T04:10:25Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2023-08-07T18:56:46Z",
        "body":  "When using MetadataLoadContext, `Module.{ResolveType,ResolveMember,ResolveMethod,ResolveField,ResolveSignature,ResolveString}` all throw NotSupportedException. \r\n\r\nThis is inconvenient for advanced reflection scenarios. For example, if you are scanning IL code (perhaps retrieved using `MethodBody.GetILAsByteArray`), these methods are the only way to resolve `MemberRef`s and `TypeRef`s used in IL.\r\n\r\nI do not think there is a technical reason that prevents these methods from working. If everything looks OK with this idea then I am happy to implement these.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYdBRQw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5e_wjv",
                                           "createdAt":  "2023-06-15T21:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen using MetadataLoadContext, `Module.{ResolveType,ResolveMember,ResolveMethod,ResolveField,ResolveSignature,ResolveString}` all throw NotSupportedException. \r\n\r\nThis is inconvenient for advanced reflection scenarios. For example, if you are scanning IL code (perhaps retrieved using `MethodBody.GetILAsByteArray`), these methods are the only way to resolve `MemberRef`s and `TypeRef`s used in IL.\r\n\r\nI do not think there is a technical reason that prevents these methods from working. If everything looks OK with this idea then I am happy to implement these.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ereflectronic\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-15T21:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hrz0T",
                                           "createdAt":  "2023-07-17T21:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003eI do not think there is a technical reason that prevents these methods from working.\r\n\r\nThoughts @buyaa-n @jkotas @AaronRobinsonMSFT?\r\n\r\nMLC does do internal resolution of some of those here: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Reflection.MetadataLoadContext/src/System/Reflection/TypeLoading/General/Ecma/EcmaResolver.cs",
                                           "updatedAt":  "2023-07-17T21:00:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hr2aS",
                                           "createdAt":  "2023-07-17T21:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \u003e I do not think there is a technical reason that prevents these methods from working.\r\n\u003e \r\n\u003e Thoughts @buyaa-n @jkotas @AaronRobinsonMSFT?\r\n\r\nI don\u0027t see anything wrong with this. There are going to be tricky parts, for example if EnC is involved. However, for assemblies defined with RefEmit or for statically loaded assemblies this seems like a reasonable feature.",
                                           "updatedAt":  "2023-07-17T21:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hsADY",
                                           "createdAt":  "2023-07-17T21:41:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBL7nQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-07-17T22:33:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Xpl0itR",
                                                                               "createdAt":  "2023-07-19T16:28:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It should be very straightforward to implement these methods.  @reflectronic Are you interested in submitting a PR?",
                                           "updatedAt":  "2023-07-17T21:41:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hsEVc",
                                           "createdAt":  "2023-07-17T21:57:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "EnC/S.R.E/etc. don\u0027t matter for MLC, right? It just loads assembly files from disk using S.R.M, there\u0027s no runtime magic involved. The APIs already exist and work for `RuntimeModule`, just not on `EcmaModule`.\r\n\r\nAnd I can see why Ati chose not to implement them; the logic is complicated and the layering of MLC doesn\u0027t lend itself to these APIs. `FieldDef`/`MethodDef` are admittedly easy, but `MemberRef` is harder because the signature matching needs to be implemented over the reflection object model (taking into account modifiers and so on). Internally, there is a deliberate separation between `EcmaXyz` classes, which get to access the metadata reader directly, and `RoXyz` classes, which never expose or access raw metadata at all. This abstraction makes it hard to get the right information to the right place.\r\n\r\nI already have some code written for this, but I\u0027m not really happy with how it looks, so I\u0027ll see if I can refactor it and put up a PR. I don\u0027t know if I am overthinking it or if there\u0027s something we can change to make it easier.",
                                           "updatedAt":  "2023-07-17T21:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hsNTG",
                                           "createdAt":  "2023-07-17T22:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e It just loads assembly files from disk using S.R.M, there\u0027s no runtime magic involved.\r\n\r\nFiles on disk can have EnC delta tables and since MLC also accepts a `byte[]` this could be an in-memory version. However, those are likely unnecessary to support. Without those tables/parts, as Jan stated, this should be straight forward.",
                                           "updatedAt":  "2023-07-17T22:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5htyN2",
                                           "createdAt":  "2023-07-18T04:21:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPUETw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-04-23T03:10:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The existing MetadataLoadContext code deals with the token resolution internally. The fix for this issue should just wire-up the existing internal token resolution to the public APIs. I would not worry too much about following all the existing abstractions. It is ok for this fix to cut corners around the abstractions.\r\n\r\nThe fix for this issue should not be improving the internal token resolution to handle EnC data formats, etc. Improvements like this should be tracked by new issue and fixed by separate PRs.",
                                           "updatedAt":  "2023-07-18T04:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0Cg9",
                                           "createdAt":  "2023-07-18T21:40:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBFtIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-07-18T22:07:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "Right, I agree that for TypeRef it is very easy because MLC has the code to resolve them. To my knowledge, it does not have the code to generally resolve MemberRefs, because that never comes up in reflection. This is the harder part. \r\n\r\nThere is this bit in custom attribute parsing:\r\nhttps://github.com/dotnet/runtime/blob/bced5841eab7009ef9f4ef8590ffbe4845c1d68f/src/libraries/System.Reflection.MetadataLoadContext/src/System/Reflection/TypeLoading/CustomAttributes/Ecma/EcmaCustomAttributeData.cs#L69-L81\r\n\r\nBut this approach is not suitable for general signature matching. For example, it does not work for methods overloaded by return type (it\u0027s not relevant here since constructors always return `void`), and it doesn\u0027t handle custom modifiers (I think this is an existing bug?). Please prove me wrong if you know of suitable code elsewhere in MLC!\r\n\r\nI agree that handling EnC tables is a separate feature. MLC ignores them entirely right now, it would be weird to handle them just for this.",
                                           "updatedAt":  "2023-07-18T21:40:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0FFD",
                                           "createdAt":  "2023-07-18T21:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You are right - MemberRefs would need work.",
                                           "updatedAt":  "2023-07-18T21:52:45Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Support resolving metadata tokens in MetadataLoadContext",
        "labels":  [
                       "area-System.Reflection",
                       "help wanted",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89928",
        "createdAt":  "2023-08-03T13:41:03Z",
        "number":  89928,
        "author":  "eiriktsarpalis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:44Z",
        "body":  "Consider the following benchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\n\r\nBenchmarkRunner.Run\u003cMyBench\u003e(args: args);\r\n\r\npublic class MyBench\r\n{\r\n    private readonly Type _type = typeof(ValueType);\r\n    private readonly Type _requiredMemberAttribute = typeof(RequiredMemberAttribute);\r\n\r\n    [Benchmark(Baseline = true)]\r\n    public RequiredMemberAttribute? GetCustomAttributeTypeArgument()\r\n    {\r\n        return (RequiredMemberAttribute?)_type.GetCustomAttributes(_requiredMemberAttribute, inherit: false).FirstOrDefault();\r\n    }\r\n\r\n    [Benchmark]\r\n    public RequiredMemberAttribute? GetCustomAttributeNoTypeArgument()\r\n    {\r\n        foreach (object attribute in _type.GetCustomAttributes(inherit: false))\r\n        {\r\n            if (attribute.GetType() == _requiredMemberAttribute)\r\n            {\r\n                return (RequiredMemberAttribute)attribute;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    [Benchmark]\r\n    public CustomAttributeData? GetCustomAttributesData()\r\n    {\r\n        foreach (CustomAttributeData attrData in _type.GetCustomAttributesData())\r\n        {\r\n            if (attrData.AttributeType == _requiredMemberAttribute)\r\n            {\r\n                return attrData;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n|                           Method |       Mean |    Error |   StdDev | Ratio | RatioSD |\r\n|--------------------------------- |-----------:|---------:|---------:|------:|--------:|\r\n|   GetCustomAttributeTypeArgument |   388.8 ns |  2.48 ns |  2.32 ns |  1.00 |    0.00 |\r\n| GetCustomAttributeNoTypeArgument | 1,932.7 ns | 10.42 ns |  9.24 ns |  4.97 |    0.04 |\r\n|          GetCustomAttributesData | 3,759.0 ns | 26.10 ns | 21.80 ns |  9.67 |    0.09 |\r\n\r\nDiscovered while investigating https://github.com/dotnet/runtime/issues/89794",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY8opLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jLroH",
                                           "createdAt":  "2023-08-03T13:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider the following benchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\n\r\nBenchmarkRunner.Run\u003cMyBench\u003e(args: args);\r\n\r\npublic class MyBench\r\n{\r\n    private readonly Type _type = typeof(ValueType);\r\n    private readonly Type _requiredMemberAttribute = typeof(RequiredMemberAttribute);\r\n\r\n    [Benchmark(Baseline = true)]\r\n    public RequiredMemberAttribute? GetCustomAttributeTypeArgument()\r\n    {\r\n        return (RequiredMemberAttribute?)_type.GetCustomAttributes(_requiredMemberAttribute, inherit: false).FirstOrDefault();\r\n    }\r\n\r\n    [Benchmark]\r\n    public RequiredMemberAttribute? GetCustomAttributeNoTypeArgument()\r\n    {\r\n        foreach (object attribute in _type.GetCustomAttributes(inherit: false))\r\n        {\r\n            if (attribute.GetType() == _requiredMemberAttribute)\r\n            {\r\n                return (RequiredMemberAttribute)attribute;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    [Benchmark]\r\n    public CustomAttributeData? GetCustomAttributesData()\r\n    {\r\n        foreach (CustomAttributeData attrData in _type.GetCustomAttributesData())\r\n        {\r\n            if (attrData.AttributeType == _requiredMemberAttribute)\r\n            {\r\n                return attrData;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n|                           Method |       Mean |    Error |   StdDev | Ratio | RatioSD |\r\n|--------------------------------- |-----------:|---------:|---------:|------:|--------:|\r\n|   GetCustomAttributeTypeArgument |   388.8 ns |  2.48 ns |  2.32 ns |  1.00 |    0.00 |\r\n| GetCustomAttributeNoTypeArgument | 1,932.7 ns | 10.42 ns |  9.24 ns |  4.97 |    0.04 |\r\n|          GetCustomAttributesData | 3,759.0 ns | 26.10 ns | 21.80 ns |  9.67 |    0.09 |\r\n\r\nDiscovered while investigating https://github.com/dotnet/runtime/issues/89794\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeiriktsarpalis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-03T13:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jyiku",
                                           "createdAt":  "2023-08-11T04:17:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027m not surprised.  There\u0027s more work to do and more data to return when not filtering to specific type.  Moving out to 9.0.0 as this doesn\u0027t appear to be a regression.",
                                           "updatedAt":  "2023-08-11T04:17:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`Type.GetCustomAttributes()` can be slow when not passing an `attributeType` parameter.",
        "labels":  [
                       "investigate",
                       "area-System.Reflection",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90405",
        "createdAt":  "2023-08-11T16:16:18Z",
        "number":  90405,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:14:30Z",
        "body":  "For an empty Main method, and enabling DOTNET_JitDisasmSummary, we see all of these:\r\n```\r\n   8: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   9: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  10: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  11: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  12: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  13: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  14: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  15: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=26, code size=37]\r\n  16: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  17: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  18: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n  19: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n```\r\nEventSource is looking for `[Event]` on a type using `GetCustomAttributes`, which uses MethodInfo.Invoke to populate the attribute, and since there\u0027s more than one attribute, the setters all get invoked twice, triggering the MethodInfo.Invoke to use reflection emit and dynamically generate a method to handle each setter.\r\n\r\nOn my machine, this is costing ~10% of time-to-Main. When I disable the dynamic method approach, startup improves by ~5ms.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhiwE6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j1xD-",
                                           "createdAt":  "2023-08-11T16:16:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor an empty Main method, and enabling DOTNET_JitDisasmSummary, we see all of these:\r\n```\r\n   8: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   9: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  10: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  11: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  12: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  13: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  14: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  15: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=26, code size=37]\r\n  16: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  17: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  18: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n  19: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n```\r\nEventSource is looking for `[Event]` on a type using `GetCustomAttributes`, which uses MethodInfo.Invoke to populate the attribute, and since there\u0027s more than one attribute, the setters all get invoked twice, triggering the MethodInfo.Invoke to use reflection emit and dynamically generate a method to handle each setter.\r\n\r\nOn my machine, this is costing ~10% of time-to-Main. When I disable the dynamic method approach, startup improves by ~5ms.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-11T16:16:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j1xxh",
                                           "createdAt":  "2023-08-11T16:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor an empty Main method, and enabling DOTNET_JitDisasmSummary, we see all of these:\r\n```\r\n   8: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   9: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  10: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  11: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n  12: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  13: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  14: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  15: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=26, code size=37]\r\n  16: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  17: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  18: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n  19: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n```\r\nEventSource is looking for `[Event]` on a type using `GetCustomAttributes`, which uses MethodInfo.Invoke to populate the attribute, and since there\u0027s more than one attribute, the setters all get invoked twice, triggering the MethodInfo.Invoke to use reflection emit and dynamically generate a method to handle each setter.\r\n\r\nOn my machine, this is costing ~10% of time-to-Main. When I disable the dynamic method approach, startup improves by ~5ms.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-11T16:18:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2C3A",
                                           "createdAt":  "2023-08-11T17:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "One approach to addressing some of this is to implement https://github.com/dotnet/runtime/issues/75357 which would share previously generated IL if the signature is the same and the method is not virtual.\r\n\r\nOtherwise, there are other options to consider such as detecting the startup phase in the runtime, and having reflection respect that so it doesn\u0027t generate the invoke stubs.",
                                           "updatedAt":  "2023-08-11T17:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAmu8",
                                           "createdAt":  "2023-08-14T18:43:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@stephentoub does the logging here happen because we\u0027re enabling `DOTNET_JitDisasmSummary` or is it happening all the time?   In other words - can we try and avoid the logging codepath during startup?",
                                           "updatedAt":  "2023-08-14T18:43:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kAttW",
                                           "createdAt":  "2023-08-14T19:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e does the logging here happen because we\u0027re enabling DOTNET_JitDisasmSummary\r\n\r\nIt\u0027s not related to DOTNET_JitDisasmSummary; the JIT handles that directly, not managed code. EventSource is unrelated to that.\r\n\r\n\u003e or is it happening all the time?\r\n\r\nInvariably on Windows there\u0027s something somewhere on the box that\u0027s enabled an ETW session, which then causes every .NET app to trip over this, with NativeRuntimeEventSource being created on the startup path.",
                                           "updatedAt":  "2023-08-14T19:05:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kBC6X",
                                           "createdAt":  "2023-08-14T20:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9.0 however I\u0027ll investigate a solution now and we can always backport. The regression occurred in v7 (not v8).\r\n\r\n\u003e Invariably on Windows there\u0027s something somewhere on the box that\u0027s enabled an ETW session, which then causes every .NET app to trip over this, with NativeRuntimeEventSource being created on the startup path.\r\n\r\nAnother approach is to determine if the ETW logging during startup is necessary.",
                                           "updatedAt":  "2023-08-14T20:20:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDjsk",
                                           "createdAt":  "2023-09-08T20:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e On my machine, this is costing ~10% of time-to-Main\r\n\r\n@stephentoub how was this measured? I tried launching corerun against simple console app and didn\u0027t see any improvments when only using interpreted invoke. Typical perf result like this:\r\n| Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Allocated |\r\n|------- |---------:|----------:|----------:|---------:|---------:|---------:|----------:|\r\n|  AFTER | 5.290 ms | 0.1116 ms | 0.1240 ms | 5.271 ms | 5.100 ms | 5.571 ms |     565 B |\r\n| BEFORE | 5.306 ms | 0.1625 ms | 0.1806 ms | 5.309 ms | 5.031 ms | 5.628 ms |     565 B |",
                                           "updatedAt":  "2023-09-08T20:51:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDld1",
                                           "createdAt":  "2023-09-08T20:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "With Jit results showing fewer items:\r\nBEFORE\r\n```\r\n   1: JIT compiled System.Guid:FormatGuidVector128Utf8(System.Guid,ubyte) [Tier0, IL size=322, code size=584]\r\n   2: JIT compiled System.HexConverter:AsciiToHexVector128(System.Runtime.Intrinsics.Vector128`1[ubyte],System.Runtime.Intrinsics.Vector128`1[ubyte]) [Tier0, IL size=78, code size=359]\r\n   3: JIT compiled System.Runtime.Intrinsics.Vector128:ShuffleUnsafe(System.Runtime.Intrinsics.Vector128`1[ubyte],System.Runtime.Intrinsics.Vector128`1[ubyte]) [Tier0, IL size=41, code size=50]\r\n   4: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   5: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n   6: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   7: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=27]\r\n   8: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n   9: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Object,ulong) [FullOpts, IL size=25, code size=28]\r\n  10: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Level(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  11: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Message(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=26, code size=37]\r\n  12: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Task(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  13: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Opcode(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=40]\r\n  14: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Version(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n  15: JIT compiled (dynamicClass):InvokeStub_EventAttribute.set_Keywords(System.Object,System.Span`1[System.Object]) [FullOpts, IL size=36, code size=41]\r\n  16: JIT compiled StartupApp.Program:Main(System.String[]) [Tier0, IL size=3, code size=15]\r\n```\r\nAFTER\r\n```\r\n   1: JIT compiled System.Guid:FormatGuidVector128Utf8(System.Guid,ubyte) [Tier0, IL size=322, code size=584]\r\n   2: JIT compiled System.HexConverter:AsciiToHexVector128(System.Runtime.Intrinsics.Vector128`1[ubyte],System.Runtime.Intrinsics.Vector128`1[ubyte]) [Tier0, IL size=78, code size=359]\r\n   3: JIT compiled System.Runtime.Intrinsics.Vector128:ShuffleUnsafe(System.Runtime.Intrinsics.Vector128`1[ubyte],System.Runtime.Intrinsics.Vector128`1[ubyte]) [Tier0, IL size=41, code size=50]\r\n   4: JIT compiled StartupApp.Program:Main(System.String[]) [Tier0, IL size=3, code size=15]\r\n```",
                                           "updatedAt":  "2023-09-08T20:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDmFl",
                                           "createdAt":  "2023-09-08T21:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Linking related issue https://github.com/dotnet/runtime/issues/85791",
                                           "updatedAt":  "2023-09-08T21:02:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDqxA",
                                           "createdAt":  "2023-09-08T21:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Typical perf result like this:\r\n\r\nWhat are you measuring that\u0027s only taking 5ms? That\u0027s not coreclr startup.\r\n\r\n\u003e @stephentoub how was this measured?\r\n\r\nIIRC, I built once with main and once with the codegen code path commented out, and then used Measure-Command to time many empty console app invocations.",
                                           "updatedAt":  "2023-09-08T21:22:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GLATo",
                                           "createdAt":  "2024-07-25T17:25:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Possible design that is extensible:\r\n- Generate stubs for every reflection-invoked method done during startup by the runtime as well as other common consumers such as a \"hello world\" console app and ASP.Net. This may be extensible by other via new attribute that is detected by a source generator.\r\n- During startup, call these stubs during invoke likely using GetFunctionPointer() to avoid the invoke path. The code to call all of the stubs would be called from a method with essentially a hash lookup, \"switch\" and\\or \"if\".",
                                           "updatedAt":  "2024-07-25T17:25:25Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "EventSource use of EventAttribute triggers dynamic methods in attribute usage",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90697",
        "createdAt":  "2023-08-16T22:01:29Z",
        "number":  90697,
        "author":  "Neme12",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAY4wA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-08-24T18:24:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2024-01-15T12:17:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2024-04-03T06:58:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2024-07-02T10:44:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2025-03-22T14:04:54Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-26T10:45:16Z",
        "body":  "As an alternative to `RuntimeHelpers.GetUninitializedObject()`, expose a new method to make this easier and more discoverable.\r\n\r\n## API\r\n\r\n```diff\r\nnamespace System;\r\n\r\npublic static partial class Activator\r\n{\r\n    // Same as `type.IsValueType ? RuntimeHelpers.GetUninitializedObject(type) : null`:\r\n+   public static object? CreateDefaultValue(Type type); \r\n\r\n    // For consistency with above support generics; same as C#\u0027s default(T):\r\n+   public static T? CreateDefaultValue\u003cT\u003e(); \r\n}\r\n```\r\n\r\n## Examples\r\n```cs\r\n\r\nint i1 = (int)Activator.CreateDefaultValue(typeof(int)); // returns 0\r\nint i2 = Activator.CreateDefaultValue\u003cint\u003e(); // returns 0\r\n\r\nobject? o1 = Activator.CreateDefaultValue(typeof(object)); // returns null\r\nobject? o2 = Activator.CreateDefaultValue\u003cobject\u003e(); // returns null\r\n```\r\n\r\n## Original issue\r\n### Background and motivation\r\n\r\nWhen I have a `System.Type` and want to get its default value, the usual answer has always been to use code like this:\r\n```c#\r\npublic static object? GetDefault(Type type)\r\n{\r\n   if (type.IsValueType)\r\n   {\r\n      return Activator.CreateInstance(type);\r\n   }\r\n   return null;\r\n}\r\n```\r\ne.g. see https://stackoverflow.com/questions/325426/programmatic-equivalent-of-defaulttype\r\n\r\nHowever, C# now allows explicit parameterless constructors on structs, so `new T()` can now be different from `default(T)` for structs, and therefore the code above  is incorrect because it would invoke the constructor as opposed to getting the default, uninitialized value. It\u0027s also not clear what a proper way to do this would look like and it doesn\u0027t seem to be trivial at all. That\u0027s why I\u0027m proposing an API for this.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public abstract partial class Type\r\n    {\r\n        public virtual object? GetDefaultValue();\r\n        // or as a property to match the existing ParameterInfo.DefaultValue\r\n        public virtual object? DefaultValue { get; }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```c#\r\n// `deconstructMethod` has out parameters:\r\n// public void Deconstruct(out bool hasValue, out T value);\r\nvar deconstructMethod = type.GetMethod(...);\r\nvar parameters = new object?[] { default(bool), underlyingType.DefaultValue };\r\ndeconstructMethod.Invoke(value, parameters);\r\n// use parameters\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdhPMcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kNzy9",
                                           "createdAt":  "2023-08-16T22:19:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEGhXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-08-16T22:20:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hypeartist",
                                                                               "createdAt":  "2023-08-17T06:34:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2023-08-18T03:06:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sakno",
                                                                               "createdAt":  "2023-08-18T09:48:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giladfrid009",
                                                                               "createdAt":  "2023-08-19T04:02:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Neme12",
                                           "body":  "I *think* to do this correctly you now have to use `RuntimeHelpers.GetUninitializedObject`:\r\n```c#\r\npublic static object? GetDefault(Type type)\r\n{\r\n   if (type.IsValueType)\r\n   {\r\n      return RuntimeHelpers.GetUninitializedObject(type);\r\n   }\r\n   return null;\r\n}\r\n```",
                                           "updatedAt":  "2023-08-16T22:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kNz9p",
                                           "createdAt":  "2023-08-16T22:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nWhen I have a `System.Type` and want to get its default value, the usual answer has always been to use code like this:\r\n```c#\r\npublic static object? GetDefault(Type type)\r\n{\r\n   if (type.IsValueType)\r\n   {\r\n      return Activator.CreateInstance(type);\r\n   }\r\n   return null;\r\n}\r\n```\r\ne.g. see https://stackoverflow.com/questions/325426/programmatic-equivalent-of-defaulttype\r\n\r\nHowever, C# now allows explicit parameterless constructors on structs, so `new T()` can now be different from `default(T)` for structs, and therefore the code above  is incorrect because it would invoke the constructor as opposed to getting the default, uninitialized value. It\u0027s also not clear what a proper way to do this would look like and it doesn\u0027t seem to be trivial at all. That\u0027s why I\u0027m proposing an API for this.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public abstract partial class Type\r\n    {\r\n        public virtual object? DefaultValue { get; }\r\n        // or\r\n        public virtual object? GetDefaultValue();\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n.\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNeme12\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-16T22:20:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZNVh",
                                           "createdAt":  "2023-08-18T19:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I think to do this correctly you now have to use RuntimeHelpers.GetUninitializedObject:\r\n\r\nYes `GetUninitializedObject()` is the correct API to create a value type with default values and without running any constructor which would be the same as `default(T)`.",
                                           "updatedAt":  "2023-08-18T19:07:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZN2-",
                                           "createdAt":  "2023-08-18T19:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEFW_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2023-08-18T19:11:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Adding to v9 for consideration - making it easier to obtain the default value of a value type given only a late-bound `Type` instance; it would have the same semantics as calling the compile-time `default(T)`.",
                                           "updatedAt":  "2023-08-18T19:10:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZOxf",
                                           "createdAt":  "2023-08-18T19:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "@steveharter \r\n![image](https://github.com/dotnet/runtime/assets/11444821/49705620-882a-4d9e-9ad9-d923ca4df158)\r\nI think the API should work for reference types as well for consistency, not just for value types (by returning null)",
                                           "updatedAt":  "2023-08-18T19:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZRgg",
                                           "createdAt":  "2023-08-18T19:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "- I think a static method on `System.Activator` would be more appropriate place for this API.\r\n- The API should be called `CreateDefaultValue` (assuming that it is not expected to cache the instance).",
                                           "updatedAt":  "2023-08-18T19:54:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZSgj",
                                           "createdAt":  "2023-08-18T19:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "On the other hand, there\u0027s an existing `ParameterInfo.DefaultValue` property and this seems to be similar to that. In both cases the value is a compile-time constant. Also, it might be a little odd to use `Activator` when we\u0027re not actually invoking the constructor, only providing the zeroed-memory value.",
                                           "updatedAt":  "2023-08-18T19:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZZF0",
                                           "createdAt":  "2023-08-18T19:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e * I think a static method on `System.Activator` would be more appropriate place for this API.\r\n\r\nWhy not RuntimeHelpers?\r\n\r\n\r\n\r\n\u003e * The API should be called `CreateDefaultValue` (assuming that it is not expected to cache the instance).\r\n\r\nHow would the API be supposed to cache instances here? With reference types it\u0027ll always be just null and with structs it\u0027ll just be zero bytes that\u0027ll be returned by value so caching doesn\u0027t make sense in this context?",
                                           "updatedAt":  "2023-08-18T19:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZarC",
                                           "createdAt":  "2023-08-18T20:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Why not RuntimeHelpers?\r\n\r\nRuntimeHelpers are low-level, often unsafe, methods. This method is completely safe.\r\n\r\n\u003e With reference types it\u0027ll always be just null and with structs it\u0027ll just be zero bytes that\u0027ll be returned by value so caching doesn\u0027t make sense in this context?\r\n\r\nThe proposed API does not return the struct by value. It returns `object` and allocates a boxed instance of struct on GC heap. This boxed instance can be cached, but it is not obvious that caching is a good tradeoff for this API.",
                                           "updatedAt":  "2023-10-26T17:25:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l3Ia3",
                                           "createdAt":  "2023-09-06T19:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "If this was on `Type`, it would be trivial to cache the value on the instance. On `Activator`, I don\u0027t see how it could be cached :(",
                                           "updatedAt":  "2023-09-06T19:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l3Ily",
                                           "createdAt":  "2023-09-06T19:17:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "I think it would definitely make sense to cache this.",
                                           "updatedAt":  "2023-09-06T19:17:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l3KGR",
                                           "createdAt":  "2023-09-06T19:21:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Another reason I would prefer this on `Type` rather than `Activator` is that today, everything you can do with `Activator`, you can also do explicitly by calling a specific constructor. I never use `Activator` personally and always explicitly find the constructor I\u0027m interested in invoking and then invoke it. But with this API, there wouldn\u0027t be an alternative way of doing this and I would now have to use `Activator` whereas today, I can completely avoid it.",
                                           "updatedAt":  "2023-09-06T19:22:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qMAY0",
                                           "createdAt":  "2023-10-26T17:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Caching at some level is necessarily if this is expected to be called frequently for the same type, as `GetUninitializedObject()` doesn\u0027t do any.\r\n\r\nAdding a new field for caching purposes to System.Type will increase the memory size a bit for all type instances for this somewhat niche use.\r\n\r\n@Neme12 what is your scenario? Typically for late-bound uses of reflection for serializers etc they would cache other various type-related info, which could also cache the results from `GetUninitializedObject()`.\r\n\r\nAlso were you planning to implement this?",
                                           "updatedAt":  "2023-10-26T17:21:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52BHdI",
                                           "createdAt":  "2024-03-06T03:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OwnageIsMagic",
                                           "body":  "@Neme12 you do not need to specify values for `out` parameters. [sharplab.io](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAIBYAEARApgYwHsoBnYSfYTACkIioCNDCAbTACwEMSA1TliLhiY6VAJZQqAN36CAlJgDeHbnwG5MAXkzlBAbkwz1WzAE4DAXwCwAKBlhMcE3iKldlPbfuZOYB9qhcAHcRBgArAmAAbQAmAF1PGzgAOgBZXGB2QhSASSgpQgBrXGooCBYWYV8wOUTUAEZkhtNqaswxEkwo3SEzONrMAHpBnUhcIA==)\r\n```cs\r\nvoid Deconstruct (out bool hasValue, out int value) { hasValue = true; value = 9; }\r\nvar d = Deconstruct;\r\nvar arr = new object[2];\r\nd.Method.Invoke(null, arr);\r\nSystem.Console.WriteLine(arr is [true, 9]); // true\r\n```\r\n@jkotas I don\u0027t think it\u0027s not ok to cache values, since it may be mutable struct and you can `Unsafe.Unbox` it.\r\n`ActivatorCache` used by `Activator.CreateInstance` already have `CreateUninitializedObject`, so it should be easy to just expose it as `Activator.CreateDefaultValue`.\r\nDone some benchmarks https://gist.github.com/OwnageIsMagic/821d31dbd575f1d207ac15a385a533f4\r\nCurrently `RuntimeHelpers.GetUninitializedObject` is around 4x slower than `Activator.CreateInstance`.\r\n```\r\nBenchmarkDotNet v0.13.12, Windows 10 (10.0.19045.3448/22H2/2022Update)\r\nIntel Core i5-8500 CPU 3.00GHz (Coffee Lake), 1 CPU, 6 logical and 6 physical cores\r\n.NET SDK 8.0.100\r\n  [Host]     : .NET 8.0.0 (8.0.23.53103), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 8.0.0 (8.0.23.53103), X64 RyuJIT AVX2\r\n\r\n\r\n| Method                  | ObjType      | Mean      | Error     | StdDev    | Ratio | RatioSD |\r\n|------------------------ |------------- |----------:|----------:|----------:|------:|--------:|\r\n| Direct                  | MyStruct     |  4.542 ns | 0.0425 ns | 0.0377 ns |  1.00 |    0.00 |\r\n| DirectNew               | MyStruct     |  4.729 ns | 0.0459 ns | 0.0407 ns |  1.04 |    0.01 |\r\n| ActivatorCreateInstance | MyStruct     | 10.728 ns | 0.0456 ns | 0.0426 ns |  2.36 |    0.02 |\r\n| GetDefaultValueCommon   | MyStruct     | 12.823 ns | 0.0860 ns | 0.0718 ns |  2.82 |    0.03 |\r\n| CreateDelegateCached    | MyStruct     | 16.085 ns | 0.0609 ns | 0.0509 ns |  3.54 |    0.03 |\r\n| GetUninitializedObject  | MyStruct     | 41.614 ns | 0.1316 ns | 0.1231 ns |  9.16 |    0.09 |\r\n|                         |              |           |           |           |       |         |\r\n| Direct                  | System.Int32 |  4.409 ns | 0.0523 ns | 0.0489 ns |  1.00 |    0.00 |\r\n| DirectNew               | System.Int32 |  4.734 ns | 0.0319 ns | 0.0283 ns |  1.07 |    0.01 |\r\n| ActivatorCreateInstance | System.Int32 |  8.918 ns | 0.0328 ns | 0.0291 ns |  2.02 |    0.02 |\r\n| GetDefaultValueCommon   | System.Int32 |  5.694 ns | 0.0729 ns | 0.0682 ns |  1.29 |    0.02 |\r\n| CreateDelegateCached    | System.Int32 | 14.994 ns | 0.0465 ns | 0.0388 ns |  3.40 |    0.04 |\r\n| GetUninitializedObject  | System.Int32 | 35.708 ns | 0.1412 ns | 0.1321 ns |  8.10 |    0.09 |\r\n```",
                                           "updatedAt":  "2024-03-06T03:18:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52BOEU",
                                           "createdAt":  "2024-03-06T03:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I don\u0027t think it\u0027s not ok to cache values, since it may be mutable struct and you can Unsafe.Unbox it.\r\n\r\nBoxes structs are assumed to be immutable by the runtime. Mutating boxed struct is undefined behavior.\r\n\r\n\u003e Currently RuntimeHelpers.GetUninitializedObject is around 4x slower than Activator.CreateInstance\r\n\r\nNo longer the case in .NET 9. Fixed by #98016",
                                           "updatedAt":  "2024-03-06T03:41:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52EHya",
                                           "createdAt":  "2024-03-06T12:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OwnageIsMagic",
                                           "body":  "https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.unbox?view=net-8.0#remarks\r\n\u003e must not mutate the returned reference unless they are certain that T is a mutable struct type.\r\n\r\nRemark hints that it\u0027s acceptable in some cases.",
                                           "updatedAt":  "2024-03-06T12:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Eyf7",
                                           "createdAt":  "2024-03-06T14:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e \u003e I don\u0027t think it\u0027s not ok to cache values, since it may be mutable struct and you can Unsafe.Unbox it.\r\n\u003e \r\n\u003e Boxes structs are assumed to be immutable by the runtime. Mutating boxed struct is undefined behavior.\r\n\r\n`Unbox` returns a \"controlled-mutability managed pointer\" which can be legally mutated with instance methods. You don\u0027t need to use Unbox however, casting a boxed struct to an interface it implements and calling a method there can also mutate the box without any unsafe code.",
                                           "updatedAt":  "2024-03-06T14:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52E8xw",
                                           "createdAt":  "2024-03-06T14:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Ah ok. You are right - this only applies to readonly structs.",
                                           "updatedAt":  "2024-03-06T14:35:15Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "[API Proposal]: Make it easy to get the default value of a type given a `System.Type`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92047",
        "createdAt":  "2023-09-14T07:31:47Z",
        "number":  92047,
        "author":  "Yarith",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-26T10:32:35Z",
        "body":  "### Description\n\nToday my coworker encountered an issue with Asp.Net Core 7.0 were an abstract controller base class contained an endpoint which return type were just `Task`. The controller that implemented it was returning `Task\u003cIActionResult\u003e`, but the endpoint was not being found. When i slapped the `HttpPostAttribute` on the overriden method it suddenly worked.\r\n\r\nIn the reproduction steps i have prepared a simple example code which shows, that `GetCustomAttributes(inherit: true)` is not giving the attribute. I assume this is the reason, why Asp.Net Core does not find it. I expect this is not an bug in Asp.Net Core, but more in the compiler or `GetCustomAttributes` implementation. \r\n\r\nI have not found any hint in all dotnet repositories, that for covariant return types all attributes of the method of the base class must be omitted. So i think the actual behavior is not by design. If this is by design, should libraries and user code manually find the overriden methods and pick the attributes from there?\n\n### Reproduction Steps\n\nHere is an example code which demonstrates it. I have prepared an example [sharplab.io](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmABgFgAoUgRmqLIAIjaA6AGQEs8BHAbgbNWAVkFUGtAJwAKAEQARCDADOTAIIBhCHgxQIAGwMwobAAoQVGACoALLmtsBDAG4wmACQwYADhatMTt5QXMA4GDAA/Exy1ExMANRMGACePjAQAGYyWjp6hsZQAJRsAOIwGACyFbYQACby/jb2KnJFAIRlFZo4VhAAturBoeGqMno4MCUA8pnWaTAAPF6+TUN6IxEAfDIl6ngpu0XirLKKymoAQtq6+kYm5pbNDkzObp7efk+Bw2ER0bEqPEkql0lkZNc8ndCiVylUavVGk87A42p04T0+oNfqMVONcFM2LN5ullp81jjtrs2PtDkVjtRqE5gFYoE4wBgWCQmJcnCoYDd8vcoExqABvOLxJgAbRWXysAF1JfEiABmQIsvTszlEJBMJoovHHKXUAC+jJo3NytwKJiYIB5fIFUNtUHFypY6ogbigITq7l1iwgwAAVjAOZEtvrkS1dh6JUCpUmiAB2FhINgAMX0/QASqocAYMEHQ+GMJGZHhCwYGYn4uaqA2GNzITbhfbHfzBdCTO6656mN6TH6A3qDbGivGPcm07qszn8ypC8Xg2GIzsq0Za0mG03LR9Vk91iE/u4HcfNu4+2bpyaqEA===) for it.\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nConsole.WriteLine(\"Does AController.PostThis have HttpPost attribute? \"\r\n  + typeof(AController).GetMethod(\"PostThis\")!.GetCustomAttributes(true).OfType\u003cHttpPostAttribute\u003e().Any());\r\nConsole.WriteLine(\"Does BController.PostThis have HttpPost attribute? \"\r\n  + typeof(BController).GetMethod(\"PostThis\")!.GetCustomAttributes(true).OfType\u003cHttpPostAttribute\u003e().Any());\r\n\r\nabstract class BaseController \r\n{\r\n    [HttpPost]\r\n    public abstract Task PostThis();   \r\n}\r\n\r\nclass AController : BaseController\r\n{\r\n    public override Task\u003cobject?\u003e PostThis()\r\n    {\r\n        return Task.FromResult\u003cobject?\u003e(null);\r\n    }\r\n}\r\n\r\nclass BController : BaseController\r\n{\r\n    public override Task PostThis()\r\n    {\r\n        return Task.FromResult\u003cobject?\u003e(null);\r\n    }\r\n}\r\n\r\nclass HttpPostAttribute : Attribute \r\n{\r\n\r\n}\r\n```\n\n### Expected behavior\n\nI expected following output\r\n```\r\nDoes AController.PostThis have HttpPost attribute? True\r\nDoes BController.PostThis have HttpPost attribute? True\r\n```\n\n### Actual behavior\n\nBut it was following output\r\n```\r\nDoes AController.PostThis have HttpPost attribute? False\r\nDoes BController.PostThis have HttpPost attribute? True\r\n```\n\n### Regression?\n\nI think this is like this since the first release of the covariant return type feature.\n\n### Known Workarounds\n\n1. Not using the covariant return type feature when using attributes.\r\n2. Copy all attributes over to every implementation.\n\n### Configuration\n\n.NET 7.0 x86 and x64 on Windows 10 but as you can see is also on sharplab.io reproducible.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ24bYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mdSgm",
                                           "createdAt":  "2023-09-14T07:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nToday my coworker encountered an issue with Asp.Net Core 7.0 were an abstract controller base class contained an endpoint which return type were just `Task`. The controller that implemented it was returning `Task\u003cIActionResult\u003e`, but the endpoint was not being found. When i slapped the `HttpPostAttribute` on the overriden method it suddenly worked.\r\n\r\nIn the reproduction steps i have prepared a simple example code which shows, that `GetCustomAttributes(inherit: true)` is not giving the attribute. I assume this is the reason, why Asp.Net Core does not find it. I expect this is not an bug in Asp.Net Core, but more in the compiler or `GetCustomAttributes` implementation. \r\n\r\nI have not found any hint in all dotnet repositories, that for covariant return types all attributes of the method of the base class must be omitted. So i think the actual behavior is not by design. If this is by design, should libraries and user code manually find the overriden methods and pick the attributes from there?\n\n### Reproduction Steps\n\nHere is an example code which demonstrates it. I have prepared an example [sharplab.io](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmABgFgAoUgRmqLIAIjaA6AGQEs8BHAbgbNWAVkFUGtAJwAKAEQARCDADOTAIIBhCHgxQIAGwMwobAAoQVGACoALLmtsBDAG4wmACQwYADhatMTt5QXMA4GDAA/Exy1ExMANRMGACePjAQAGYyWjp6hsZQAJRsAOIwGACyFbYQACby/jb2KnJFAIRlFZo4VhAAturBoeGqMno4MCUA8pnWaTAAPF6+TUN6IxEAfDIl6ngpu0XirLKKymoAQtq6+kYm5pbNDkzObp7efk+Bw2ER0bEqPEkql0lkZNc8ndCiVylUavVGk87A42p04T0+oNfqMVONcFM2LN5ullp81jjtrs2PtDkVjtRqE5gFYoE4wBgWCQmJcnCoYDd8vcoExqABvOLxJgAbRWXysAF1JfEiABmQIsvTszlEJBMJoovHHKXUAC+jJo3NytwKJiYIB5fIFUNtUHFypY6ogbigITq7l1iwgwAAVjAOZEtvrkS1dh6JUCpUmiAB2FhINgAMX0/QASqocAYMEHQ+GMJGZHhCwYGYn4uaqA2GNzITbhfbHfzBdCTO6656mN6TH6A3qDbGivGPcm07qszn8ypC8Xg2GIzsq0Za0mG03LR9Vk91iE/u4HcfNu4+2bpyaqEA===) for it.\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nConsole.WriteLine(\"Does AController.PostThis have HttpPost attribute? \"\r\n  + typeof(AController).GetMethod(\"PostThis\")!.GetCustomAttributes(true).OfType\u003cHttpPostAttribute\u003e().Any());\r\nConsole.WriteLine(\"Does BController.PostThis have HttpPost attribute? \"\r\n  + typeof(BController).GetMethod(\"PostThis\")!.GetCustomAttributes(true).OfType\u003cHttpPostAttribute\u003e().Any());\r\n\r\nabstract class BaseController \r\n{\r\n    [HttpPost]\r\n    public abstract Task PostThis();   \r\n}\r\n\r\nclass AController : BaseController\r\n{\r\n    public override Task\u003cobject?\u003e PostThis()\r\n    {\r\n        return Task.FromResult\u003cobject?\u003e(null);\r\n    }\r\n}\r\n\r\nclass BController : BaseController\r\n{\r\n    public override Task PostThis()\r\n    {\r\n        return Task.FromResult\u003cobject?\u003e(null);\r\n    }\r\n}\r\n\r\nclass HttpPostAttribute : Attribute \r\n{\r\n\r\n}\r\n```\n\n### Expected behavior\n\nI expected following output\r\n```\r\nDoes AController.PostThis have HttpPost attribute? True\r\nDoes BController.PostThis have HttpPost attribute? True\r\n```\n\n### Actual behavior\n\nBut it was following output\r\n```\r\nDoes AController.PostThis have HttpPost attribute? False\r\nDoes BController.PostThis have HttpPost attribute? True\r\n```\n\n### Regression?\n\nI think this is like this since the first release of the covariant return type feature.\n\n### Known Workarounds\n\n1. Not using the covariant return type feature when using attributes.\r\n2. Copy all attributes over to every implementation.\n\n### Configuration\n\n.NET 7.0 x86 and x64 on Windows 10 but as you can see is also on sharplab.io reproducible.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYarith\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-14T07:59:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nbXCC",
                                           "createdAt":  "2023-09-26T10:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "the bug is probably inside `System.Reflection.RuntimeMethodInfo.GetParentDefinition()`. Later I\u0027m gonna inspect it a little further.",
                                           "updatedAt":  "2023-09-26T10:02:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nbbag",
                                           "createdAt":  "2023-09-26T10:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH-UHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karakasa",
                                                                               "createdAt":  "2023-09-26T10:31:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2023-09-27T16:59:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e the bug is probably inside `System.Reflection.RuntimeMethodInfo.GetParentDefinition()`. Later I\u0027m gonna inspect it a little further.\r\n\r\nI recommend looking at this using ILDASM: the way things are set up is not completely obvious, but the covariant override is really a different method, so GetParentDefinition is not entirely wrong:\r\n\r\n```csharp\r\nclass Base\r\n{\r\n    public virtual object GetObject() =\u003e null;\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public override string GetObject() =\u003e null;\r\n}\r\n```\r\n\r\nGets compiled into (zooming in on Derived):\r\n\r\n```\r\n.class private auto ansi beforefieldinit Derived\r\n       extends Base\r\n{\r\n  .method public hidebysig newslot virtual \r\n          instance string  GetObject() cil managed\r\n  {\r\n    .custom instance void [System.Runtime]System.Runtime.CompilerServices.PreserveBaseOverridesAttribute::.ctor() = ( 01 00 00 00 ) \r\n    .override Base::GetObject\r\n    // Code size       2 (0x2)\r\n    .maxstack  8\r\n    IL_0000:  ldnull\r\n    IL_0001:  ret\r\n  } // end of method Derived::GetObject\r\n\r\n  .method public hidebysig specialname rtspecialname \r\n          instance void  .ctor() cil managed\r\n  {\r\n    // Code size       8 (0x8)\r\n    .maxstack  8\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  call       instance void Base::.ctor()\r\n    IL_0006:  nop\r\n    IL_0007:  ret\r\n  } // end of method Derived::.ctor\r\n\r\n} // end of class Derived\r\n```\r\n\r\nThe important bit is the `newslot` keyword, `.override` directive and `PreserveBaseOverridesAttribute` attribute. Newslot means this is introducing a new virtual method slot (i.e. it is not a simple override of the method from `Base`). The `.override` means we want to link this new virtual slot with the virtual slot introduced by the base. And `PreserveBaseOverridesAttribute` forbids the runtime from allowing another derived class from overriding `Base::GetObject` again (absent this attribute, someone could still derive from `Derived` and override `Base::GetObject`, without overriding the covariant return method introduced in `Derived`).\r\n\r\nSee https://github.com/dotnet/runtime/blob/main/docs/design/features/covariant-return-methods.md for details.\r\n\r\nHow reflection is supposed to surface this in the presence/absence of `PreserveBaseOverridesAttribute` is the interesting design question.",
                                           "updatedAt":  "2023-09-26T10:14:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nbhti",
                                           "createdAt":  "2023-09-26T10:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "yes. Slot ID is used to determine parent method.\r\n\r\nhttps://github.com/dotnet/runtime/blob/f276c514fe5fe4d9120420286ab7c6299f874992/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.CoreCLR.cs#L116-L121",
                                           "updatedAt":  "2023-09-26T10:32:35Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Methods were covariant return types applies does not inherit attributes",
        "labels":  [
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92856",
        "createdAt":  "2023-10-01T01:53:44Z",
        "number":  92856,
        "author":  "CreateAndInject",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:45:19Z",
        "body":  "```C#\r\nstatic void Main()\r\n{\r\n    var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly;\r\n    var module = typeof(object).Module;\r\n    Stopwatch sw = Stopwatch.StartNew();\r\n    foreach (var type in module.GetTypes())\r\n    {\r\n        foreach (var field in type.GetFields(bindingFlags))\r\n            module.ResolveField(field.MetadataToken);\r\n    }\r\n    Console.WriteLine(sw.Elapsed.TotalSeconds.ToString(\"f1\"));\r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\n\r\n-|ResolveField|ResolveMethod\r\n| ------ | ------ | ------ |\r\nDebug|82.4s|0.1s\r\nStart Without Debugging|0.1s|0.1s\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhixeSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5n06Cz",
                                           "createdAt":  "2023-10-01T01:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```C#\r\nstatic void Main()\r\n{\r\n    var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly;\r\n    var module = typeof(object).Module;\r\n    Stopwatch sw = Stopwatch.StartNew();\r\n    foreach (var type in module.GetTypes())\r\n    {\r\n        foreach (var field in type.GetFields(bindingFlags))\r\n            module.ResolveField(field.MetadataToken);\r\n    }\r\n    Console.WriteLine(sw.Elapsed.TotalSeconds.ToString(\"f1\"));\r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\n\r\n-|ResolveField|ResolveMethod\r\n| ------ | ------ | ------ |\r\nDebug|82.4s|0.1s\r\nStart Without Debugging|0.1s|0.1s\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCreateAndInject\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-01T01:53:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n0_nm",
                                           "createdAt":  "2023-10-01T03:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks for the report. Something that slow can often be \"profiled\" by hitting break in the debugger a few times to see what is the typical call stack. Can you do that perhaps and see where it suggests the delay is?",
                                           "updatedAt":  "2023-10-01T03:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n1AfN",
                                           "createdAt":  "2023-10-01T04:03:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CreateAndInject",
                                           "body":  "To reproduce this performance issue, use .NET 3.5 or **_uncheck_** `Enable Just My Code` if \u003e.NE5 3.5 (eg. .NET4.8/5/6/7)\r\n\r\n-|ResolveField|ResolveMethod\r\n| ------ | ------ | ------ |\r\nDebug(EnableJustMyCode .NET3.5)|12.4s|0.1s\r\nDebug(DisableJustMyCode .NET3.5)|12.4s|0.1s\r\nDebug(EnableJustMyCode .NET4.8/5/6/7)|0.1s|0.1s\r\nDebug(DisableJustMyCode .NET4.8/5/6/7)|82.4s|0.1s\r\nStart Without Debugging(All.NET)|0.1s|0.1s\r\n",
                                           "updatedAt":  "2023-10-01T05:07:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n18bJ",
                                           "createdAt":  "2023-10-01T20:36:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```C#\r\nstatic void Main()\r\n{\r\n    var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly;\r\n    var module = typeof(object).Module;\r\n    Stopwatch sw = Stopwatch.StartNew();\r\n    foreach (var type in module.GetTypes())\r\n    {\r\n        foreach (var field in type.GetFields(bindingFlags))\r\n            module.ResolveField(field.MetadataToken);\r\n    }\r\n    Console.WriteLine(sw.Elapsed.TotalSeconds.ToString(\"f1\"));\r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\n\r\n-|ResolveField|ResolveMethod\r\n| ------ | ------ | ------ |\r\nDebug|82.4s|0.1s\r\nStart Without Debugging|0.1s|0.1s\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCreateAndInject\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-01T20:36:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n18cS",
                                           "createdAt":  "2023-10-01T20:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Moving to the diagnostics team first given data above. Perhaps they can give us guidance",
                                           "updatedAt":  "2023-10-01T20:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oCIQ2",
                                           "createdAt":  "2023-10-03T17:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "The performance issue looks like a duplicate to https://github.com/dotnet/runtime/issues/47617.  The function `coreclr!MemberLoader::GetFieldDescFromFieldDef` throws a `MissingFieldException` which is caught in `System_Private_CoreLib!System.Reflection.RuntimeModule.ResolveField`\r\n\r\n```text\r\n03 0000008e`9f57dd60 00007ff9`db586b08     coreclr!MemberLoader::ThrowMissingFieldException+0x37 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\memberload.cpp @ 65] \r\n04 0000008e`9f57e250 00007ff9`db6092bc     coreclr!MemberLoader::GetFieldDescFromFieldDef+0x17d6a4 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\memberload.cpp @ 690] \r\n05 0000008e`9f57e2d0 00007ff9`db684ccd     coreclr!MemberLoader::GetFieldDescFromMemberDefOrRef+0x80 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\memberload.cpp @ 976] \r\n06 0000008e`9f57e350 00007ff9`da98a70e     coreclr!ModuleHandle_ResolveField+0xad [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\runtimehandles.cpp @ 2911] \r\n07 0000008e`9f57e410 00007ff9`da98a5aa     System_Private_CoreLib+0x23a70e\r\n08 0000008e`9f57e500 00007ff9`dab0219f     System_Private_CoreLib!System.ModuleHandle.ResolveFieldHandle+0x17a [/_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs @ 1437] \r\n09 0000008e`9f57e600 00007ff9`7b9b3fcc     System_Private_CoreLib!System.Reflection.RuntimeModule.ResolveField+0xdf [/_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeModule.cs @ 209] \r\n0a 0000008e`9f57e680 00007ff9`db54d043     ConsoleApp5_GH92856!ConsoleApp5_GH92856.Program.Main+0x18c\r\n0b 0000008e`9f57e780 00007ff9`db43516b     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 100] \r\n0c (Inline Function) --------`--------     coreclr!CallDescrWorkerWithHandler+0x5b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 67] \r\n0d 0000008e`9f57e7c0 00007ff9`db3e35d8     coreclr!MethodDescCallSite::CallTargetWorker+0x343 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 570] \r\n0e (Inline Function) --------`--------     coreclr!MethodDescCallSite::Call+0xb [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.h @ 458] \r\n0f 0000008e`9f57e900 00007ff9`db46b13e     coreclr!RunMainInternal+0x11c [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1304] \r\n10 0000008e`9f57ea20 00007ff9`db46b4a0     coreclr!RunMain+0xd2 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1375] \r\n11 0000008e`9f57ead0 00007ff9`db46ab2e     coreclr!Assembly::ExecuteMainMethod+0x1e8 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\assembly.cpp @ 1504] \r\n12 0000008e`9f57eda0 00007ff9`db529e66     coreclr!CorHost2::ExecuteAssembly+0x15e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\corhost.cpp @ 340] \r\n13 0000008e`9f57eee0 00007ffb`033530f2     coreclr!coreclr_execute_assembly+0xe6 [D:\\a\\_work\\1\\s\\src\\coreclr\\dlls\\mscoree\\exports.cpp @ 504] \r\n14 (Inline Function) --------`--------     hostpolicy!coreclr_t::execute_assembly+0x2a [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\coreclr.cpp @ 109] \r\n15 0000008e`9f57ef70 00007ffb`033533cc     hostpolicy!run_app_for_context+0x512 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 256] \r\n16 0000008e`9f57f100 00007ffb`03353ea9     hostpolicy!run_app+0x3c [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 285] \r\n17 0000008e`9f57f140 00007ffa`94c4b71c     hostpolicy!corehost_main+0x199 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\hostpolicy\\hostpolicy.cpp @ 426] \r\n18 0000008e`9f57f240 00007ffa`94c4e2d6     hostfxr!execute_app+0x2ac [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 145] \r\n19 0000008e`9f57f340 00007ffa`94c50486     hostfxr!`anonymous namespace\u0027::read_config_and_execute+0xa6 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 532] \r\n1a 0000008e`9f57f430 00007ffa`94c4e8b4     hostfxr!fx_muxer_t::handle_exec_host_command+0x166 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 1007] \r\n1b 0000008e`9f57f4e0 00007ffa`94c487c0     hostfxr!fx_muxer_t::execute+0x494 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\fx_muxer.cpp @ 578] \r\n1c 0000008e`9f57f620 00007ff6`155c35a9     hostfxr!hostfxr_main_startupinfo+0xa0 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\fxr\\hostfxr.cpp @ 62] \r\n1d 0000008e`9f57f720 00007ff6`155c3a36     consoleapp5_gh92856_exe!exe_start+0x859 [D:\\a\\_work\\1\\s\\src\\native\\corehost\\corehost.cpp @ 240] \r\n```\r\n\r\nAnd is handled here:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/12520929/f1afb416-4d89-432d-b545-67d03fc81263)\r\n\r\nEnabling Just My Code in Visual Studio will cause the runtime to avoid notifying the debugger of the exception and therefore should avoid the performance issue.\r\n\r\nPossible solutions to consider:\r\n1. Address the issue in https://github.com/dotnet/runtime/issues/47617.\r\n2. Change the reflection code implementation to avoid throwing a MissingFieldException and catching it.  As it seems this is a positive case scenario and throwing/catching exceptions adds performance overhead.\r\n\r\nSince we are already tracking the debugger exception performance issue on https://github.com/dotnet/runtime/issues/47617, I will re-purpose this issue to track investigating the throw/catch logic for this scenario in our reflection implementation.",
                                           "updatedAt":  "2023-10-03T17:07:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oCIcy",
                                           "createdAt":  "2023-10-03T17:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```C#\r\nstatic void Main()\r\n{\r\n    var bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly;\r\n    var module = typeof(object).Module;\r\n    Stopwatch sw = Stopwatch.StartNew();\r\n    foreach (var type in module.GetTypes())\r\n    {\r\n        foreach (var field in type.GetFields(bindingFlags))\r\n            module.ResolveField(field.MetadataToken);\r\n    }\r\n    Console.WriteLine(sw.Elapsed.TotalSeconds.ToString(\"f1\"));\r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\n\r\n-|ResolveField|ResolveMethod\r\n| ------ | ------ | ------ |\r\nDebug|82.4s|0.1s\r\nStart Without Debugging|0.1s|0.1s\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCreateAndInject\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-System.Reflection`, `tenet-performance`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-03T17:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GLF5I",
                                           "createdAt":  "2024-07-25T17:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Per above, \"I will re-purpose this issue to track investigating the throw/catch logic for this scenario in our reflection implementation.\"",
                                           "updatedAt":  "2024-07-25T17:38:24Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ResolveField throws and catches exceptions which adds performance overhead",
        "labels":  [
                       "investigate",
                       "area-System.Reflection",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93383",
        "createdAt":  "2023-10-12T12:26:24Z",
        "number":  93383,
        "author":  "msedi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4G9Bg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teo-tsirpanis",
                                            "createdAt":  "2023-10-12T12:28:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AleksandrSerezhkin",
                                            "createdAt":  "2024-05-23T13:40:32Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:43:04Z",
        "body":  "### Background and motivation\r\n\r\nWe are doing a lot of reflection during startup and runtime to discover our plugins and associated tool classes using the `MetadataLoadContext`. Most of the reflection searches for attributes which only delivers `CustomAttributeData`, because instead of the real `Attribute`. Because we are in **ReflectionOnly** mode, I understand that there can be a `CustomAttributeData` only, but there is a time where I need to create the real `Attribute` in the `AssemblyLoadContext`.\r\n\r\nWhile I can discover the `Attribute` type, there is not possibility to create the `Attribute` instance from `CustomAttributeData`.\r\n\r\nComing already from a larger suggestion (https://github.com/dotnet/runtime/issues/56914), @teo-tsirpanis suggested an API to create an `Attribute` instance from `CustomAttributeData`:\r\n\r\n```cs\r\nnamespace System {\r\n    public class Attribute {\r\n        public static Attribute Create (Type attributeType, CustomAttributeData data);\r\n        public static T Create\u003cT\u003e (CustomAttributeData data) where T : Attribute;\r\n    }\r\n}\r\n```\r\n\r\nwhich would solve all problems, but the whole  (https://github.com/dotnet/runtime/issues/56914) was declined because of to many side effects. This request now, only requests to add the factory as suggested by @teo-tsirpanis.\r\n\r\nThe runtime already resolves the CustomAttributeData from the metadata in the assembly so there must be already a way to to it. I only couldn\u0027t find the right place where it is done.\r\n\r\nAll the examples I have seen so far, even my own implementation fail on one or the other place. So I think the runtime team knows much better how to create the attribute from the customattributedata.\r\n\r\n### API Proposal\r\n\r\n```cs\r\nnamespace System {\r\n    public class Attribute {\r\n        public static Attribute Create (Type attributeType, CustomAttributeData data);\r\n        public static T Create\u003cT\u003e (CustomAttributeData data) where T : Attribute;\r\n    }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\npublic class MyCustomAttribute : Attribute\r\n{\r\n  public string Name {get; set;}\r\n\r\n  public MyCustomAttribute (string name) {Name=name;}\r\n}\r\n\r\n[MyCustomAttribute(\"MyTest\")]\r\npublic class Test{ }\r\n\r\nCustomAttributeData attributeData = typeof(Test).GetCustomAttributeData()[0];\r\nMyCustomAttribute customAttribute = Attribute.Create\u003cMyCustomAttribute\u003e(attributeData);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThe runtime is already able to create attributes from CustomAttributeData since they are stored in the metadata, so I think there is no risk in general.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrh7SrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5o4bCM",
                                           "createdAt":  "2023-10-12T13:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nWe are doing a lot of reflection during startup and runtime to discover our plugins and associated tool classes using the `MetadataLoadContext`. Most of the reflection searches for attributes which only delivers `CustomAttributeData`, because instead of the real `Attribute`. Because we are in **ReflectionOnly** mode, I understand that there can be a `CustomAttributeData` only, but there is a time where I need to create the real `Attribute` in the `AssemblyLoadContext`.\r\n\r\nWhile I can discover the `Attribute` type, there is not possibility to create the `Attribute` instance from `CustomAttributeData`.\r\n\r\nComing already from a larger suggestion (https://github.com/dotnet/runtime/issues/56914), @teo-tsirpanis suggested an API to create an `Attribute` instance from `CustomAttributeData`:\r\n\r\n```cs\r\nnamespace System {\r\n    public class Attribute {\r\n        public static Attribute Create (Type attributeType, CustomAttributeData data);\r\n        public static T Create\u003cT\u003e (CustomAttributeData data) where T : Attribute;\r\n    }\r\n}\r\n```\r\n\r\nwhich would solve all problems, but the whole  (https://github.com/dotnet/runtime/issues/56914) was declined because of to many side effects. This request now, only requests to add the factory as suggested by @teo-tsirpanis.\r\n\r\nThe runtime already resolves the CustomAttributeData from the metadata in the assembly so there must be already a way to to it. I only couldn\u0027t find the right place where it is done.\r\n\r\nAll the examples I have seen so far, even my own implementation fail on one or the other place. So I think the runtime team knows much better how to create the attribute from the customattributedata.\r\n\r\n### API Proposal\r\n\r\n```cs\r\nnamespace System {\r\n    public class Attribute {\r\n        public static Attribute Create (Type attributeType, CustomAttributeData data);\r\n        public static T Create\u003cT\u003e (CustomAttributeData data) where T : Attribute;\r\n    }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\npublic class MyCustomAttribute : Attribute\r\n{\r\n  public string Name {get; set;}\r\n\r\n  public MyCustomAttribute (string name) {Name=name;}\r\n}\r\n\r\n[MyCustomAttribute(\"MyTest\")]\r\npublic class Test{ }\r\n\r\nCustomAttributeData attributeData = typeof(Test).GetCustomAttributeData()[0];\r\nMyCustomAttribute customAttribute = Attribute.Create\u003cMyCustomAttribute\u003e(attributeData);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThe runtime is already able to create attributes from CustomAttributeData since they are stored in the metadata, so I think there is no risk in general.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsedi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-12T13:32:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pman1",
                                           "createdAt":  "2023-10-19T20:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to v9 for additional consideration.\r\n\r\nI believe the proposal could be shortened to:\r\n```CS\r\n    public class Attribute {\r\n        public static Attribute Create (Type attributeType, CustomAttributeData data);\r\n    }\r\n```\r\nsince `CustomAttributeData` exposes the attribute type and the generic version of this isn\u0027t that useful anymore since the type is known.\r\n\r\nThe method would need to verify that `attributeType` is a run-time type (not from MLC for example) and should be invokable in the currently executing runtime.",
                                           "updatedAt":  "2023-10-19T20:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pmdjA",
                                           "createdAt":  "2023-10-19T20:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e the generic version of this isn\u0027t that useful anymore since the type is known\r\n\r\nIt\u0027s for convenience, just like how `MethodInfo.CreateDelegate` has a generic variant.",
                                           "updatedAt":  "2023-10-19T20:52:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pmfkg",
                                           "createdAt":  "2023-10-19T20:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I take back my comment about the shorter API proposal. The type known by CustomAttributeData will be the non-runtime version for MLC anyway so we\u0027d need the appropriate runtime type for use with MLC anyway.",
                                           "updatedAt":  "2023-10-19T20:59:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5poB4o",
                                           "createdAt":  "2023-10-20T05:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msedi",
                                           "body":  "@steveharter: Great. Thanks for the info. Regarding the type consideration, I just like to bring up some ideas regarding the AssemblyLoadContext. Would it make sense to exapdn the methods to have the AssemblxLoadContext as an additional parameter.\r\n\r\nI currently have this problem that I have a few ALCs in my app and found that it\u0027s hard to use the Activator. So your initial idea of omitting the type and take the type from the ALC could automatically find the type either in the default ALC or in some given ALC.",
                                           "updatedAt":  "2023-10-20T05:23:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p0RoM",
                                           "createdAt":  "2023-10-23T14:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@msedi the Attribute type that is to be created cannot be the same type instance from MLC - it must be a runtime type - e.g. type.GetType() should be the internal \"RuntimeType\" type, not the \"RoType\" as in MLC. Types returned from MLC are not creatable.\r\n\r\nSo the new API would have to be used something like this:\r\n```cs\r\nType typeFromMLC = ...\r\nType typeFromRuntime = Type.GetType(typeFromMLC.AssemblyQualifiedName);\r\n// Use the new API:\r\nAttribute attr = Attribute.Create(typeFromRuntime , ...)\r\n```\r\n\r\n ",
                                           "updatedAt":  "2023-10-23T14:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uHtKt",
                                           "createdAt":  "2025-05-30T05:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msedi",
                                           "body":  "@steveharter: Yes, that\u0027s how I currently do it. But myself ;-)",
                                           "updatedAt":  "2025-05-30T05:15:32Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: Provide a way to create Attribute from CustomAttributeData",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94096",
        "createdAt":  "2023-10-27T17:35:00Z",
        "number":  94096,
        "author":  "zszabo79",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:43:07Z",
        "body":  "### Description\r\n\r\nThis bug has already been added as #31485, but unfortunatelly closed! You promised repairing would be a milestone for .NET 5, but the bug still exists.\r\n\r\nDispatchProxy can\u0027t generate adequate proxy for classes that have functions with generic type parameters or return values (in case of they have generic constraints). For me it is urgent. Is there any workaround, or when will this bug be fixed?\r\n\r\nThe exception I get when I make dispatch proxy in **.NET 6** is also\r\n**System.TypeLoadException: \u0027GenericArguments[0], \u0027TEntity\u0027, on DataAccess.Interface.Repository.IEntityRepository`1[TEntity]\u0027 violates the constraint of type parameter \u0027TEntity\u0027.\u0027** \r\n\r\nPlease see  #31485 for details.\r\n\r\n### Reproduction Steps\r\n\r\n1. Make a class with some functions that have generic parameters or return values ** with generic constraints **.\r\n\r\n2. Wrap it to a proxy using the DispatchProxy class.\r\n\r\n3. Call one function of theese. \r\n\r\n### Expected behavior\r\n\r\nDispatchProxy can handle functions with generic parameter and return types have generic constraints (like the old RealProxy).\r\n\r\n### Actual behavior\r\n\r\nDispatchProxy can\u0027t handle functions with generic parameter and return types have generic constraints.\r\n\r\n### Regression? \r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nUnfortunally I don\u0027t know any workaround. Maybe you can help me.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaqx8uw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qSqAk",
                                           "createdAt":  "2023-10-27T17:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThis bug has already been added as #31485, but unfortunatelly closed! You promised repairing would be a milestone for .NET 5, but the bug still exists.\r\n\r\nDispatchProxy can\u0027t generate adequate proxy for classes that have functions with generic type parameters or return values. For me it is urgent. Is there any workaround, or when will this bug be fixed?\r\n\r\nThe exception I get when I make dispatch proxy in **.NET 6** is also\r\n**System.TypeLoadException: \u0027GenericArguments[0], \u0027TEntity\u0027, on DataAccess.Interface.Repository.IEntityRepository`1[TEntity]\u0027 violates the constraint of type parameter \u0027TEntity\u0027.\u0027** \r\n\r\nPlease see  #31485 for details.\n\n### Reproduction Steps\n\n1. Make a class with some functions that have generic parameters or return values.\r\n\r\n2. Wrap it to a proxy using the DispatchProxy class.\r\n\r\n3. Call the one function of theese. \n\n### Expected behavior\n\nDispatchProxy can handle functions with generic parameter and return types (like the old RealProxy).\n\n### Actual behavior\n\nDispatchProxy can\u0027t handle functions with generic parameter and return types (like the old RealProxy).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUnfortunally I don\u0027t know any workaround. Maybe you can help me.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ezszabo79\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-27T17:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qqzV_",
                                           "createdAt":  "2023-11-01T20:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e You promised repairing would be a milestone for .NET 5, but the bug still exists.\r\n\r\nThis was not promised. It was moved to v5 for further consideration and like many other issues moved to future based on schedule and\\or cost:benefit. See https://github.com/dotnet/runtime/issues/31485#issuecomment-601392297\r\n\r\nHowever, we can re-evaluate the cost:benefit for the current release and determine the effort to lift these constraints into proxies.",
                                           "updatedAt":  "2023-11-01T20:11:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qrHy7",
                                           "createdAt":  "2023-11-01T21:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zszabo79",
                                           "body":  "Thank you for your attention to me, would be good to solve it in the next releases, because we had to remove generic constraints to use proxies. Generally we have to choose between incomplete code and proxies. The .NET standard basic language elements could be supported by .NET framework built in proxies  ",
                                           "updatedAt":  "2023-11-01T21:11:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "DispatchProxy invoke method returning GenericType with constraint TypeLoadException",
        "labels":  [
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94514",
        "createdAt":  "2023-11-08T12:53:57Z",
        "number":  94514,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCz4tug==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lambdageek",
                                            "createdAt":  "2023-11-09T15:24:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-26T18:02:54Z",
        "body":  "Trimming shuffles the tokens so the number returned from here are different after trimming. Differences in behavior need to be flagged.\r\n\r\nMemberInfo.MetadataToken\r\nParameterInfo.MetadataToken\r\n\r\nModule.MetadataToken might be fine.\r\n\r\nWe already flag APIs that resolve things from tokens but this was missed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhk2f_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rZdYu",
                                           "createdAt":  "2023-11-08T12:54:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTrimming shuffles the tokens so the number returned from here are different after trimming. Differences in behavior need to be flagged.\r\n\r\nMemberInfo.MetadataToken\r\nParameterInfo.MetadataToken\r\n\r\nModule.MetadataToken might be fine.\r\n\r\nWe already flag APIs that resolve things from tokens but this was missed.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T12:54:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GTZ_8",
                                           "createdAt":  "2024-07-26T18:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Moving to Future since we have reached the v9 \"feature complete\" milestone",
                                           "updatedAt":  "2024-07-26T18:02:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "APIs that return tokens should be marked RequiresUnreferencedCode",
        "labels":  [
                       "area-System.Reflection",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94536",
        "createdAt":  "2023-11-08T19:49:31Z",
        "number":  94536,
        "author":  "terrajobst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCz_J9Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "popcatalin81",
                                            "createdAt":  "2023-11-08T20:00:44Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-11-08T20:01:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2023-11-08T20:01:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "vzarytovskii",
                                            "createdAt":  "2023-11-08T20:02:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "angelobelchior",
                                            "createdAt":  "2023-11-08T20:03:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Marvin-Brouwer",
                                            "createdAt":  "2023-11-08T20:06:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Szer",
                                            "createdAt":  "2023-11-08T20:08:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "vanbukin",
                                            "createdAt":  "2023-11-08T20:09:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2023-11-08T20:10:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "karb0f0s",
                                            "createdAt":  "2023-11-08T20:31:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "rubenwe",
                                            "createdAt":  "2023-11-08T20:34:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "justindbaur",
                                            "createdAt":  "2023-11-08T20:38:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Suchiman",
                                            "createdAt":  "2023-11-08T20:52:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "vcsjones",
                                            "createdAt":  "2023-11-08T20:54:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2023-11-08T22:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-11-09T01:09:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "vatsan-madhavan",
                                            "createdAt":  "2023-11-09T03:27:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "NightlyRevenger",
                                            "createdAt":  "2023-11-09T03:29:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "svrooij",
                                            "createdAt":  "2023-11-09T06:22:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Hellevar",
                                            "createdAt":  "2023-11-09T10:36:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-11-09T14:41:49Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-11-09T20:35:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-11-09T20:35:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "inosik",
                                            "createdAt":  "2023-11-10T10:58:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "hez2010",
                                            "createdAt":  "2023-11-10T11:12:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2023-11-10T12:27:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kievzenit",
                                            "createdAt":  "2023-11-12T17:36:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2023-11-12T23:12:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2023-11-12T23:29:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "gfoidl",
                                            "createdAt":  "2023-11-14T17:35:07Z"
                                        }
                                    ],
                          "totalCount":  30
                      },
        "updatedAt":  "2024-12-09T04:46:03Z",
        "body":  "### Background and motivation\r\n\r\nWhen an existing private API is made public reflection code usually breaks because it uses `BindingFlags.NonPublic` rather than `BindingFlags.Public | BindingFlags.NonPublic`, hence excluding any public members. When calling private members it\u0027s generally desirable to look for both public and non-public members.\r\n\r\nTo make this more obvious I suggest we add an explicit flag that combines the two and also add an analyzer that warns people when they only use `NonPublic` but not `Public`. Given that we already have `IgnoreXxxx` flag, `IgnoreAccessModifiers` feels natural because it also encapsulates the intent: users want to call the API, even when it\u0027s non-public.\r\n\r\nIt is true that there are several ways private reflection can fail. Sometimes, there are cases where a library has a useful non-public API that people use; it\u0027s desirable in those cases in having existing reflection users not break when those APIs are just made public, without any other changes to its name or signature.\r\n\r\nThis is different from other changes to the signature as those change how the API is being invoked (e.g. when a static method is changed into an instance method, when its renamed, or when the signature is changed). In those cases the reflection author will need to change their code because the invocation pattern has changed.\r\n\r\nChanging an API (public or not) can be a breaking change when an API is invoked via reflection, and this proposal doesn\u0027t try to address that. However, access modifiers are a subset of the API shape that reflection code could be invariant too, if authored in a certain way. The intent here is to promote this way to reduce the cases where private reflection can be broken over time, which is especially sad in this case because making the member public expresses the intent to make it part of the promised contract. It feels counter intuitive that doing so breaks existing reflection code.\r\n \r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Reflection;\r\n\r\n[Flags]\r\npublic enum BindingFlags\r\n{\r\n    // Existing:\r\n    // Public = 16,\r\n    // NonPublic = 32,\r\n    // IgnoreCase = 1,\r\n    // IgnoreReturn = 16777216,\r\n    IgnoreAccessModifiers = Public | NonPublic\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```C#\r\nBindingFlags flags = BindingFlags.Static | BindingFlags.IgnoreAccessModifiers;\r\nPropertyInfo info = type.GetProperty(\"SomeProperty\", flags);\r\nobject value = info.GetValue(null);\r\n```\r\n\r\nThis code will continue to work when `SomeProperty` is made public:\r\n\r\n```C#\r\npublic static class SomeClass\r\n{\r\n    internal static string SomeProperty { get; }\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\nWe could decide to no add the enum member and instead just recommend combining the existing flags.\r\n\r\n### Risks\r\n\r\nNone",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlp0pog==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rcLSN",
                                           "createdAt":  "2023-11-08T19:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nA common failure for people doing private reflection is when an existing private API is made public their reflection code breaks because it uses `BindingFlags.NonPublic` but not `BindingFlags.Public`. When calling private members it\u0027s generally desirable to look for both public and non-public APIs.\r\n\r\nTo make this more obvious I suggest we add an explicit flag that combines the two and also add an analyzer that warns people when they only use `NonPublic` but not `Public`.\n\n### API Proposal\n\n```C#\r\nnamespace System.Reflection\r\n{\r\n    [Flags]\r\n    public enum BindingFlags\r\n    {\r\n        // Existing:\r\n        // Public = 16,\r\n        // NonPublic = 32,\r\n        PublicOrNonPublic =  Public | NonPublic\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```C#\r\nBindingFlags flags = BindingFlags.Static | BindingFlags.PublicOrNonPublic;\r\nPropertyInfo info = type.GetProperty(\"SomeProperty\", flags);\r\nobject value = info.GetValue(null);\r\n````\n\n### Alternative Designs\n\nWe could decide to no add the enum member and instead just recommend comining the existing flags.\n\n### Risks\n\nNone\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eterrajobst\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `code-analyzer`, `code-fixer`, `api-ready-for-review`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T19:49:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcRqB",
                                           "createdAt":  "2023-11-08T20:08:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMaT-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vanbukin",
                                                                               "createdAt":  "2023-11-08T20:09:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2023-11-08T20:10:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzarytovskii",
                                                                               "createdAt":  "2023-11-08T20:13:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-08T20:17:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-11-08T20:24:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karb0f0s",
                                                                               "createdAt":  "2023-11-08T20:32:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rubenwe",
                                                                               "createdAt":  "2023-11-08T20:35:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2023-11-08T21:57:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2023-11-08T22:39:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChrisMcKee",
                                                                               "createdAt":  "2023-11-08T23:49:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "summer600",
                                                                               "createdAt":  "2023-11-09T03:20:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViIvanov",
                                                                               "createdAt":  "2023-11-09T06:46:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2023-11-09T09:43:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-11-09T20:35:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:23:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "mgravell",
                                           "body":  "I do a lot of reflection; I don\u0027t think I\u0027ve ever hit a problem with this, and if you do: it is pretty self evident. Since `|` is literally \"or\", I\u0027m not sure that a XOrY element is needed, honestly. I also have multiple places where I explicitly test for non-public only; warning me about that feels weird. A relevant analyzer *might* be:\r\n\r\n- not including any accessibility modifier\r\n- not including any instance/static modifier\r\n\r\nIt won\u0027t hurt me if you add an XOrY element - I just don\u0027t see a hard need for it.",
                                           "updatedAt":  "2023-11-08T20:08:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcSs7",
                                           "createdAt":  "2023-11-08T20:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMaXSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzarytovskii",
                                                                               "createdAt":  "2023-11-08T20:13:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charlesroddie",
                                                                               "createdAt":  "2023-11-12T23:12:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Szer",
                                           "body":  "Who is the target audience of that change?\r\nIt seems that the idea behind this is to make unsafe API more accessible to those who don\u0027t know how .NET works.",
                                           "updatedAt":  "2023-11-08T20:11:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcTS8",
                                           "createdAt":  "2023-11-08T20:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe7yxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanYates",
                                                                               "createdAt":  "2023-11-09T07:05:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-20T20:54:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@mgravell \r\n\r\n\u003e I do a lot of reflection; I don\u0027t think I\u0027ve ever hit a problem with this, and if you do: it is pretty self evident.\r\n\r\nIt\u0027s less about getting it wrong for a given API, it\u0027s about getting it right for the current state, shipping code, and then being broken when the target of the reflection calls makes the private API public.\r\n\r\nThe proposal here is to allow reflection authors to write code that uses private reflection and have that code resilient to the target being made public later.\r\n\r\n@Szer \r\n\r\n\u003e It seems that the idea behind this is to make unsafe API more accessible to those who don\u0027t know how .NET works.\r\n\r\nWhy do you think this makes it more accessible?",
                                           "updatedAt":  "2023-11-08T20:13:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcULB",
                                           "createdAt":  "2023-11-08T20:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe7yyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevingosse",
                                                                               "createdAt":  "2023-11-08T20:17:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-11-08T20:21:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2023-11-08T20:32:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanYates",
                                                                               "createdAt":  "2023-11-09T07:05:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dreamescaper",
                                                                               "createdAt":  "2023-11-09T08:08:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SteveDunn",
                                                                               "createdAt":  "2023-11-09T09:12:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frassle",
                                                                               "createdAt":  "2023-11-09T09:41:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:24:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-20T20:54:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "theo-albers",
                                           "body":  "There is already IgnoreCase and IgnoreReturn, so why not IgnoreAccessModifier?",
                                           "updatedAt":  "2023-11-08T20:16:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcWaG",
                                           "createdAt":  "2023-11-08T20:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe7y5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2023-11-08T20:28:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Szer",
                                                                               "createdAt":  "2023-11-08T20:31:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vanbukin",
                                                                               "createdAt":  "2023-11-08T20:35:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-08T21:06:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:24:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzarytovskii",
                                                                               "createdAt":  "2023-11-13T21:32:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-20T20:55:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "aloraman",
                                           "body":  "I think adding `BindingFlags.PublicOrNonPublic` opens a whole new can of worms: if you add one explicit flag - what would stop you from adding more explicit flags? `BindingFlags.PublicStatic`, `BindingFlags.PublicNonStatic`, `BindingFlags.PublicOrNonPublicStatic` and so on...",
                                           "updatedAt":  "2023-11-08T20:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcY8-",
                                           "createdAt":  "2023-11-08T20:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "Yeah, growth of combinations would get way out of hand. I\u0027m against this change unless it\u0027s adding an option that is used 90% of the time by the community.\r\n\r\nNew Feature: Enum Extensions ",
                                           "updatedAt":  "2023-11-08T20:27:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcn_t",
                                           "createdAt":  "2023-11-08T20:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODO5RbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-11-08T21:12:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pawchen",
                                                                               "createdAt":  "2023-11-09T09:14:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-13T00:59:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhutch",
                                                                               "createdAt":  "2023-12-08T01:16:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I\u0027d really rather this just be https://github.com/dotnet/csharplang/issues/2926 to make it shorter\r\n\r\nIf we believe users missing this is wrong the majority of the time, then an analyzer fills the need of ensuring they specify both.\r\n\r\n",
                                           "updatedAt":  "2023-11-08T20:59:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rcq9X",
                                           "createdAt":  "2023-11-08T21:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODML5Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "svrooij",
                                                                               "createdAt":  "2023-11-09T06:24:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "peteraritchie",
                                           "body":  "\u003e I think adding `BindingFlags.PublicOrNonPublic` opens a whole new can of worms: if you add one explicit flag - what would stop you from adding more explicit flags? `BindingFlags.PublicStatic`, `BindingFlags.PublicNonStatic`, `BindingFlags.PublicOrNonPublicStatic` and so on...\r\n\r\ni.e. are you attempting to make the API better or account for people who already missed that they could have done `BindingFlags.Public | BindingFlags.NonPublic`? ",
                                           "updatedAt":  "2023-11-08T21:08:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rd6Ut",
                                           "createdAt":  "2023-11-09T01:05:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e A common failure for people doing private reflection is when an existing private API is made public their reflection code breaks\r\n\r\nAny examples (links to issues) where this happened?\r\n\r\nPrivate reflection has number of failure modes. I do not remember seeing this failure mode. The most common failure mode of private reflection that I have seen are ambiguous matches introduced by changing private implementation details. We have been occasionally forced to change the internal implementation details for compensate for it (for example https://github.com/dotnet/runtime/issues/28613).",
                                           "updatedAt":  "2023-11-09T01:05:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5reAT9",
                                           "createdAt":  "2023-11-09T01:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMMiEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanYates",
                                                                               "createdAt":  "2023-11-09T08:43:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@aloraman \r\n\r\n\u003e I think adding `BindingFlags.PublicOrNonPublic` opens a whole new can of worms: if you add one explicit flag - what would stop you from adding more explicit flags? `BindingFlags.PublicStatic`, `BindingFlags.PublicNonStatic`, `BindingFlags.PublicOrNonPublicStatic` and so on...\r\n\r\nThe problem this proposal is trying to solve is reducing the negative impact of making a useful private member public. Changing a method from static to non-static (or vice versa) wouldn\u0027t work anyways due to signature differences.\r\n\r\nThe only reason to add well-named member for the combination is to create the incentive to use it over the simpler version and to have a target that the analyzer can point to. However, the proposal would equally work if we don\u0027t introduce a new API and just have the analyzer recommend combining `Public` and `NonPublic`, which is why I listed that under alternatives.\r\n\r\nThat said, this proposal from @theo-albers also looks good to me and wouldn\u0027t introduce combinations:\r\n\r\n\u003e There is already `IgnoreCase` and `IgnoreReturn`, so why not `IgnoreAccessModifier`?\r\n\r\nI like that quite a bit because it conveys what calling a private API usually means. The caller means to by-pass access checks, not that they only want to call a non-public API and intend the bind to fail when a public member exists.\r\n\r\n@jkotas \r\n\r\n\u003e Any examples (links to issues) where this happened?\r\n\r\nI know of reports in .NET Framework where us making a useful but private API public for a third-party has broken the very people who asked for it. @GrabYourPitchforks recently brought this up in another API review, maybe he has more specifics.\r\n",
                                           "updatedAt":  "2023-11-10T19:18:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5reywk",
                                           "createdAt":  "2023-11-09T06:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theo-albers",
                                           "body":  "I haven\u0027t run into the described case myself either. What I do see is that refactoring and code suggestions may force you to change the implementation from instance to static method. In that case the other party would still not be helped with the flag enum expansion.  When a signature changes from instance to static, or is even moved to an extension method, you have to change your invoke call on the reflected info. Adding a new enum for the minor use case doesn\u0027t seem worth it to me. \r\n",
                                           "updatedAt":  "2023-11-09T06:26:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rez90",
                                           "createdAt":  "2023-11-09T06:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svrooij",
                                           "body":  "\n\u003e i.e. are you attempting to make the API better or account for people who already missed that they could have done ? \n\nThis is a very good reason not to do this.\n\nIt\u0027s called Binding **Flags** telling everybody it\u0027s a Flag, which means you can use the `|` to do **or**.\n\nMy honest opinion, if you\u0027re using reflection you have to make sure to account for the fact that there might be something going public. Using the syntax with the | requires a change in their code and using your solution also requires a change in their code.\n\nIt does not solve anything, and people who use reflection already have a decent way of solving this issue.\n\nAnd one last thought, let\u0027s say we have PublicOrNonPublic and someone wants to also use one of the other options, will they be using the | with your new options or will they be doing it with all the individual options?",
                                           "updatedAt":  "2023-11-09T06:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rh7EN",
                                           "createdAt":  "2023-11-09T15:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMPR6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "svrooij",
                                                                               "createdAt":  "2023-11-09T16:06:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aloraman",
                                           "body":  "@terrajobst \r\n\u003e The problem this proposal is trying to solve is reducing the negative impact of making a useful private member public\r\n\r\nStill, this is a situation of user\u0027s code being broken because it has a dependency on private implementation details. Generally speaking, such an issue is resolved with the following, from most likely to the least:\r\n- It\u0027s private implementation detail. Closed.\r\n- It\u0027s private implementation detail though, but we\u0027ll think about it. Milestone: future\r\n...\r\n- Let\u0027s do something about it.\r\n\r\nIn other words, is the proposed feature worth the opportunity cost?\r\n\u003eThe only reason to add well-named member for the combination is to create the incentive to use it over the simpler version and to have a target that the analyzer can point to. However, the proposal would equally work if we don\u0027t introduce a new API and just have the analyzer recommend combining Public and NonStatic, which is why I listed that under alternatives\r\n\r\nSo, the problem is that user can type just `BindingFlags.NonPublic`, and the code will be broken if requested member will become public in the future, so you\u0027d like to suggest to the user to use `BindingFlags.NonPublic | BindingFlags.Public`. Adding `BindingFlags.PublicOrNonPublic` is not enough - because it doesn\u0027t stop the user from typing `BindingFlags.NonPublic`, so you\u0027ll need an analyzer to make such a suggestion as well. However, the analyzer can also suggest `BindingFlags.NonPublic | BindingFlags.Public` - so there is no need to introduce `BindingFlags.PublicOrNonPublic`.\r\n\r\nBasically, it\u0027s an esthetical choice. In my opinion, both @theo-albers proposal or language feature referenced by @tannergooding are much more esthetically pleasing than `BindingFlags.PublicOrNonPublic`.",
                                           "updatedAt":  "2023-11-09T15:31:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rk2xS",
                                           "createdAt":  "2023-11-09T23:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Could we add `BindingFlags.Family` that help with filtering protected members specifically?",
                                           "updatedAt":  "2023-11-09T23:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rlIal",
                                           "createdAt":  "2023-11-10T00:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "I have updated to proposal to better express the intent.\r\n\r\n@buyaa-n \r\n\r\n\u003e Could we add `BindingFlags.Family` that help with filtering protected members specifically?\r\n\r\nAFAIK `protected`/`protected internal`/`private protected` are all treated as non-public because reflection invocation is always performed outside the class hierarchy, which means they are all equally inaccessible.\r\n\r\nI\u0027d rather no add more ways to filter based on access modifiers because it seems odd to me to filter based on them anyway. It makes sense to opt-into binding to members that would normally be inaccessible, but I\u0027d think name and shape are the primary decision points.",
                                           "updatedAt":  "2023-11-10T00:41:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rltUt",
                                           "createdAt":  "2023-11-10T03:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIF29A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theo-albers",
                                                                               "createdAt":  "2023-11-10T06:22:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-10T17:52:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-11-10T21:57:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:22:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2023-11-14T02:46:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2025-02-28T22:16:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I understand the goal here, but I\u0027m still not particuarly excited about adding another flag for this.  This is already possible today just with Public | NonPublic, I now need to learn the relationship between IgnoreAccessModifiers and Public / NonPublic to figure out which I want to use if I don\u0027t immediately realize they\u0027re the same thing, and I\u0027m not convinced this will actually move the needle for folks hitting the problem alluded to; I suspect folks that were previously only specifying NonPublic will continue to specify NonPublic.  Doesn\u0027t seem worthwhile to me.",
                                           "updatedAt":  "2023-11-10T03:57:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rp8XR",
                                           "createdAt":  "2023-11-10T17:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@stephentoub the design includes an analyzer; are you saying we should still do the analyzer (and push people towards combining `NonPublic` with `Public`) or are you saying the entire proposal isn\u0027t worth it?",
                                           "updatedAt":  "2023-11-10T17:42:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rp83v",
                                           "createdAt":  "2023-11-10T17:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMaWpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-10T17:52:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2023-11-10T19:16:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svrooij",
                                                                               "createdAt":  "2023-11-10T21:07:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-11-10T21:57:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:23:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-11-12T23:04:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "If we think NonPublic without Public is almost never correct, then an analyzer/fixer to correct it to also include \"| Public\" sounds reasonable.",
                                           "updatedAt":  "2023-11-10T17:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ruJok",
                                           "createdAt":  "2023-11-12T22:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMdmyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2023-11-12T22:21:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2023-11-12T22:45:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2023-11-12T23:28:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2023-11-13T00:39:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-13T14:05:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Would such an analyzer also track the current `[DynamicallyAccessedMembers]` scope? Because if not it would be a bit awkward if you were eg. inside a method that\u0027s annotated with `[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.NonPublicMethods)]`, and see the analyzer suggest changing that to instead also use `| Public`. To make it happy you\u0027d have to add that, and now to also make the trimmer analyzer happy you\u0027d have to also add `PublicMethods` there. And now you\u0027re just causing potentially a boatload more code and metadata to be  preserved where you might not actually need that. Or would this work in some other way that I\u0027m missing? I mean the thing I\u0027m not sure I get here is that the \"you should always also have `| Public`\" guidance seems to be fundamentally at odds with \"you should always preserve the least possible amount of reflection metadata\". Or if the analyzer would instead respect the annotation and not emit a warning on correctly annotated uses of `Private`, does this mean that assuming your codebase is already correctly annotated for trimminng, then this analyzer would just... Basically never trigger at all, ever? 🤔",
                                           "updatedAt":  "2023-11-12T22:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r7bGY",
                                           "createdAt":  "2023-11-14T17:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMmtTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2023-11-14T19:21:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e @GrabYourPitchforks recently brought this up in another API review, maybe he has more specifics.\r\n\r\nBasically what was already mentioned earlier. We\u0027ve had a few cases where within .NET Framework we changed visibility of members: making public an internal method on an internal type (so the member still isn\u0027t part of the reference API), or making public an internal members on a public type (so the member becomes part of the reference API).\r\n\r\nGeneralize this to cover private reflection not just into .NET Framework, but into libraries and dependencies overall. The goal isn\u0027t to make this scenario _supported_ - you\u0027re using private reflection, after all! But ideally we\u0027d tell devs \"if you absolutely do need to use reflection for this, here\u0027s a way to do it in a somewhat less fragile manner.\"",
                                           "updatedAt":  "2023-11-14T17:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r8p1M",
                                           "createdAt":  "2023-11-14T19:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMmxJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-11-14T19:35:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=2NsF2PBS02w\u0026t=1h10m13s)\n\nWe\u0027re not sure that there\u0027s benefit in adding the enum member that isn\u0027t already (and better) covered by the proposed analyzer.  So, until/unless there\u0027s something to tip the scales in favor of adding it we feel like the new API should not be added but the analyzer is good.\r\n\r\nAnalyzer approved\r\nCategory: Maintainability\r\nSeverity: Warning",
                                           "updatedAt":  "2023-11-14T19:51:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r8vLw",
                                           "createdAt":  "2023-11-14T19:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMm3tw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-11-14T19:51:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"but the analyzer is good\"\r\n\r\n@bartonjs I\u0027m sorry, can you elaborate more on the \"analyzer is good\"? The proposed analyzer **would push people towards less trimmable code** and make them have to preserve additional metadata (all public members) that they might not need at all.\r\n\r\nJust my two cents, but I don\u0027t think we should ever be adding new analyzers that push people towards less trimmable code 😅",
                                           "updatedAt":  "2023-11-14T19:44:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r874u",
                                           "createdAt":  "2023-11-14T19:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "https://developercommunity.visualstudio.com/t/TextTransformationGenerationEnvironment/10369514 (see also https://developercommunity.visualstudio.com/t/Create-or-recreate-a-Model-does-not-work/10318478) presents a pretty good recent example of where the pattern of using only `BindingFlags.NonPublic` has bitten people when the target method was later made public.",
                                           "updatedAt":  "2023-11-14T20:01:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r90QN",
                                           "createdAt":  "2023-11-14T21:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODM1xag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2023-11-15T11:04:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2023-11-16T21:59:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Spoke with Sergio offline, and he gave good feedback that we didn\u0027t properly convey the scope of the analyzer, which led to his concerns about interfering with the trimming system. We certainly don\u0027t want this analyzer to lead people down a path that makes their apps non-trimmable.\r\n\r\nMy interpretation of this work item is that only this pattern is in scope:\r\n\r\n```cs\r\nvar type = Type.GetType(\"SomeWellKnownType, SomeAssembly\"); // or typeof(SomeWellKnownType)\r\nif (type is not null) {\r\n    var member = type.GetMember(\"LiteralMemberName\", BindingFlags.NonPublic /* | other flags excluding Public */);\r\n    // or GetField / GetProperty / GetMethod / etc.\r\n}\r\n```\r\n\r\nThat is, the analyzer triggers only when you are looking for a known member (by name) on a known type (either because the type token or the type name is hardcoded). That\u0027s the scenario where we have observed breaks when the target member changes visibility unexpectedly. Another way of looking at it: \"You clearly have a distinct target member you\u0027re trying to look up, so make your code more reliable by removing visibility checks as an implicit variable you care about.\"\r\n\r\nThe analyzer _should not_ recommend including `BindingFlags.Public` for general reflection scenarios, including scenarios where the target type or target member is unknown / non-literal, or for scenarios where the caller is trying to reflect over all members of a type.",
                                           "updatedAt":  "2023-11-14T21:43:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sNJZ5",
                                           "createdAt":  "2023-11-16T22:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe7zCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peteraritchie",
                                                                               "createdAt":  "2023-11-20T18:18:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-01-07T02:03:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-20T20:56:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "\u003e The analyzer _should not_ recommend including `BindingFlags.Public` for general reflection scenarios, including scenarios where the target type or target member is unknown / non-literal, or for scenarios where the caller is trying to reflect over all members of a type.\r\n\r\nThat\u0027s fair.\r\n\r\nMy general feeling is that folks using private reflection aren\u0027t doing themselves any favors for trimmability to begin with. In general, I don\u0027t think pushing people towards keeping their private reflection code working when members become public is a significant burden towards this goal.\r\n\r\nSaid differently, we\u0027re not pushing people towards reflection (private or public). We encourage people to use static typing and hence replace reflection / reflection emit solutions with source generators as much as possible.\r\n\r\nHowever, when people are using private reflection we do want their code to be less fragile with respect to visibility changes.",
                                           "updatedAt":  "2023-11-16T22:03:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WnSmi",
                                           "createdAt":  "2024-12-09T04:46:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RenderMichael",
                                           "body":  "If this analyzer is only intended to fire for a hard-coded member or field name, would this scenario be better served by adding a fixer to transform the code to use `[UnsafeAccessor]`? At least when using `typeof()` (which seems to me the common case).\n\nUsafeAccessor is an advanced type with pitfalls and specific implementation requirements (eg. no generics in the attributed method). But as long as we’re doing private reflection anyway, the fixer could ensure it’s properly implemented, and the problem is solved.\n\nAdditionally, if a member disappears then the exception with this attribute is much clearer, compared with a return (and since most people suppress null warnings for something they “know” exists, eventually a null reference).",
                                           "updatedAt":  "2024-12-09T04:46:02Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "[API Proposal]: Add `BindingFlags.IgnoreAccessModifiers`",
        "labels":  [
                       "api-approved",
                       "area-System.Reflection",
                       "help wanted",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96371",
        "createdAt":  "2023-12-30T18:04:45Z",
        "number":  96371,
        "author":  "wasabii",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2BHtg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS4Code",
                                            "createdAt":  "2024-02-21T12:48:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-21T15:59:05Z",
        "body":  "I don\u0027t really expect this request to be accepted, because it\u0027s a bit out odd. But I wanted to document the issue for posterity.\r\n\r\nI am working on finally rewriting IKVM.Reflection around S.R.M. And, trying to consume as much existing shared code as possible. IKVM.Reflection\u0027s API surface mostly mirrors System.Reflection, and was one of the first libraries to do assembly generation from purely managed code without using System.Reflection.\r\n\r\nAs a consequence, we have a ton of compiler code that works against the System.Reflection API. Except, we substitute it out for IKVM.Reflection in our static compiler using #ifdef. The dynamic compiler continues to use System.Reflection directly.\r\n\r\nOne option is to just rewrite IKVM.Reflection\u0027s loading and emitting API surface against S.R.M and S.R.M.E.\r\n\r\nThe other is to investigate whether other existing System.Reflection-looking APIs are at a point where we can just use them instead, and deprecate IKVM.Reflection completely. No AssemblyBuilder.Save puts the Emit side on hold for now.\r\n\r\nBut, System.Reflection.MetadataLoadContext may be a viable operation for the assembly-reading side. Except for one feature that IKVM uses: an IsMissing and ContainsMissing property on Type, Method, Field, etc.\r\n\r\nThe point of the IsMissing property on a Member is to allow a compiler to generate code that deals with partially complete assemblies. For instance, a TypeSpec in Assembly A, being built against Assembly B, where Assembly B is missing one of the target TypeRefs, can return Type with IsMissing as true. So our compiler can know this information, and use it to generate metadata against an incomplete type model. We use this to preserve Java runtime semantics in statically compiled IL.\r\n\r\nFor instance, in the example above, Assembly A might have a method that inits an object of TypeB in Assembly B, where Assembly B was generated without that type (perhaps an older version of Assembly B). Java semantics would have this method call fail at runtime, but only when it hits the portion of code where TypeB is actually required. As such, we generate the IL body for the method in Assembly A to throw the appropriate exception at that point. We emit IL to throw MethodNotFoundException. Which preserves Java semantics.\r\n\r\nWith IKVM.Reflection, we get a IKVM.Reflection.Type instead for this TypeSpec. The TypeSpec is fully resolved. But, might contain ElementTypes or generic instances, that are themselves unable to be resolved. The compiler can know this by checking ContainsMissing, and make a decision to emit a method body that throws.\r\n\r\nWith S.R.MLC, of course, any attempt to get or access the System.Type that is ultimately derived from that TypeSpec, throws TypeLoadException, leaving us unable to examine the contents of the TypeSpec and make a decision.\r\n\r\nSo, it looks like S.R.MLC is not going to be a solution for us. Which leaves us with two options: rewriting IKVM.Reflection against S.R.M and S.R.M.E, largely leaving the type model in tact; or fork S.R.MLC and introduce the notion of a Missing type. I haven\u0027t yet figured out which option I\u0027m going to take. I\u0027d lean towards forking, if the effort to introduce IsMissing and periodically synchronize S.R.MLC is a net benefit over maintaining our own type model.\r\n\r\nAnyways, just thought I\u0027d throw this up here. It\u0027s at least, as I see it, a valid use case for people attempting to build more complex IL generation routines. The type-model (S.R.MLC, System.Type, etc) is important for compilers. And, as of now, there isn\u0027t a managed-only type-model that I can find that deals with this specific circumstance: except, I\u0027d imagine, the one in Roslyn and ours. :)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdJ85MQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vnTy2",
                                           "createdAt":  "2023-12-30T18:04:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI don\u0027t really expect this request to be accepted, because it\u0027s a bit out odd. But I wanted to document the issue for posterity.\r\n\r\nI am working on finally rewriting IKVM.Reflection around S.R.M. And, trying to consume as much existing shared code as possible. IKVM.Reflection\u0027s API surface mostly mirrors System.Reflection, and was one of the first libraries to do assembly generation from purely managed code without using System.Reflection.\r\n\r\nAs a consequence, we have a ton of compiler code that works against the System.Reflection API. Except, we substitute it out for IKVM.Reflection in our static compiler using #ifdef. The dynamic compiler continues to use System.Reflection directly.\r\n\r\nOne option is to just rewrite IKVM.Reflection\u0027s loading and emitting API surface against S.R.M and S.R.M.E.\r\n\r\nThe other is to investigate whether other existing System.Reflection-looking APIs are at a point where we can just use them instead, and deprecate IKVM.Reflection completely. No AssemblyBuilder.Save puts the Emit side on hold for now.\r\n\r\nBut, System.Reflection.MetadataLoadContext may be a viable operation for the assembly-reading side. Except for one feature that IKVM uses: an IsMissing and ContainsMissing property on Type, Method, Field, etc.\r\n\r\nThe point of the IsMissing property on a Member is to allow a compiler to generate code that deals with partially complete assemblies. For instance, a TypeSpec in Assembly A, being built against Assembly B, where Assembly B is missing one of the target TypeRefs, can return Type with IsMissing as true. So our compiler can know this information, and use it to generate metadata against an incomplete type model. We use this to preserve Java runtime semantics in statically compiled IL.\r\n\r\nFor instance, in the example above, Assembly A might have a method that inits an object of TypeB in Assembly B, where Assembly B was generated without that type (perhaps an older version of Assembly B). Java semantics would have this method call fail at runtime, but only when it hits the portion of code where TypeB is actually required. As such, we generate the IL body for the method in Assembly A to throw the appropriate exception at that point. We emit IL to throw MethodNotFoundException. Which preserves Java semantics.\r\n\r\nWith IKVM.Reflection, we get a IKVM.Reflection.Type instead for this TypeSpec. The TypeSpec is fully resolved. But, might contain ElementTypes or generic instances, that are themselves unable to be resolved. The compiler can know this by checking ContainsMissing, and make a decision to emit a method body that throws.\r\n\r\nWith S.R.MLC, of course, any attempt to get or access the System.Type that is ultimately derived from that TypeSpec, throws TypeLoadException, leaving us unable to examine the contents of the TypeSpec and make a decision.\r\n\r\nSo, it looks like S.R.MLC is not going to be a solution for us. Which leaves us with two options: rewriting IKVM.Reflection against S.R.M and S.R.M.E, largely leaving the type model in tact; or fork S.R.MLC and introduce the notion of a Missing type. I haven\u0027t yet figured out which option I\u0027m going to take. I\u0027d lean towards forking, if the effort to introduce IsMissing and periodically synchronize S.R.MLC is a net benefit over maintaining our own type model.\r\n\r\nAnyways, just thought I\u0027d throw this up here. It\u0027s at least, as I see it, a valid use case for people attempting to build more complex IL generation routines.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewasabii\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-30T18:04:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wJNoQ",
                                           "createdAt":  "2024-01-08T16:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e The other is to investigate whether other existing System.Reflection-looking APIs are at a point where we can just use them instead, and deprecate IKVM.Reflection completely. No AssemblyBuilder.Save puts the Emit side on hold for now.\r\n\r\nNote than `AssemblyBuilder.Save` support is in progress. This started in 8.0 and continues into [9.0](https://github.com/dotnet/runtime/issues/92975).\r\n\r\nExtending AB.Save and S.R.MLC that addresses the missing member scenarios makes sense to me if it addresses your scenarios and enables a single solution for compiler writers and others. However, that will require community research and contributions since we don\u0027t have the bandwidth at this time.",
                                           "updatedAt":  "2024-01-08T16:52:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wQR6Q",
                                           "createdAt":  "2024-01-09T15:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-01-09T15:55:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xBx7Z",
                                           "createdAt":  "2024-01-17T17:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@wasabii any thoughts on working together to add features to S.R.MLC and leveraging the AB.Save() work being added in 9.0 (it is functional now, but still a few features being worked on)?\r\n",
                                           "updatedAt":  "2024-01-17T17:41:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xCxlp",
                                           "createdAt":  "2024-01-17T19:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wasabii",
                                           "body":  "I\u0027d be happy to. Problem is, I\u0027m not sure whether this is even something S.R.MLC even wants to support.",
                                           "updatedAt":  "2024-01-17T19:45:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50nzkx",
                                           "createdAt":  "2024-02-21T12:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IS4Code",
                                           "body":  "I\u0027d definitely appreciate improvements in this area, similarly in relation to #86923.",
                                           "updatedAt":  "2024-02-21T12:54:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Feature Request: Support \"Missing\" types on System.Reflection.MetadataLoadContext",
        "labels":  [
                       "area-System.Reflection",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96389",
        "createdAt":  "2024-01-02T01:05:35Z",
        "number":  96389,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T18:34:06Z",
        "body":  "A [test](https://github.com/dotnet/runtime/blob/0ba232e70e824474baa10e29350bd5c5552a3f85/src/libraries/System.Reflection.Emit/tests/PersistableAssemblyBuilder/AssemblySaveILGeneratorTests.cs#L1779) added for `ILGeneratorImpl.Emit(OpCode opcode, SignatureHelper signature)` failed with \r\n```log\r\nSystem.NotImplementedException : The method or operation is not implemented.\r\n      Stack Trace:\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/Emit/SignatureHelper.cs(277,0): at System.Reflection.Emit.SignatureHelper.AddSentinel()\r\n        /_/src/libraries/System.Reflection.Emit/tests/PersistableAssemblyBuilder/AssemblySaveILGeneratorTests.cs(1847,0): at System.Reflection.Emit.Tests.AssemblySaveILGeneratorTests.Emit_CallBySignature()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\nThe same would happen for VarArg methods. Looks there is several other public APIs not implemented, it would be great to add implementations for all\r\n\r\nWe might be able to move the runtime implementation into share libraries instead of trying to add implementation for mono implementation.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdozEXQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xL9fD",
                                           "createdAt":  "2024-01-18T17:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Mono runtime also doesn\u0027t support standalone signature: \r\n```log\r\n System.NotImplementedException : The method or operation is not implemented.\r\n\r\n  Stack Trace: \r\nSignatureHelper.GetSignature() line 381\r\nModuleBuilderImpl.GetSignatureMetadataToken(SignatureHelper signature) line 1040\r\nAssemblySaveModuleBuilderTests.GetABCMetadataToken_Validations() line 283\r\n```",
                                           "updatedAt":  "2024-01-18T17:59:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTKBm",
                                           "createdAt":  "2024-01-19T17:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nA [test](https://github.com/dotnet/runtime/blob/0ba232e70e824474baa10e29350bd5c5552a3f85/src/libraries/System.Reflection.Emit/tests/PersistableAssemblyBuilder/AssemblySaveILGeneratorTests.cs#L1779) added for `ILGeneratorImpl.Emit(OpCode opcode, SignatureHelper signature)` failed with \r\n```log\r\nSystem.NotImplementedException : The method or operation is not implemented.\r\n      Stack Trace:\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/Emit/SignatureHelper.cs(277,0): at System.Reflection.Emit.SignatureHelper.AddSentinel()\r\n        /_/src/libraries/System.Reflection.Emit/tests/PersistableAssemblyBuilder/AssemblySaveILGeneratorTests.cs(1847,0): at System.Reflection.Emit.Tests.AssemblySaveILGeneratorTests.Emit_CallBySignature()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\nThe same would happen for VarArg methods. Looks there is several other public APIs not implemented, it would be great to add implementations for all\r\n\r\nWe might be able to move the runtime implementation into share libraries instead of trying to add implementation for mono implementation.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`, `runtime-mono`, `area-System.Reflection-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-19T17:55:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52jMRd",
                                           "createdAt":  "2024-03-11T16:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "cc @BrzVlad ",
                                           "updatedAt":  "2024-03-11T16:49:16Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add implementations for SignatureHelper.AddSentinel() and/or other methods in mono runtime",
        "labels":  [
                       "area-System.Reflection",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97172",
        "createdAt":  "2024-01-18T19:22:31Z",
        "number":  97172,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-29T18:07:55Z",
        "body":  "A [Field RVA alignment test](https://github.com/dotnet/runtime/pull/96805#discussion_r1450775745) is failing on mono legs[ in this PR](https://github.com/dotnet/runtime/pull/96805)\r\n\r\nThat verifies the code section:\r\n\r\nhttps://github.com/dotnet/runtime/blob/f36b7cded294d07962060856843c5fa8ec1beb7d/src/libraries/System.Reflection.Emit/src/System/Reflection/Emit/ModuleBuilderImpl.cs#L452-L454\r\n\r\nNot sure if it is bug or expected, I don\u0027t see mono specific code in `MetadataBuilder` nor in `BlobBuilder.Align(int)` https://github.com/dotnet/runtime/blob/72c4c57a3c8c1b267447f253fdc14f9d14d91a2b/src/libraries/System.Reflection.Metadata/src/System/Reflection/Metadata/BlobBuilder.cs#L808-L812",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcUyeVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xMrN4",
                                           "createdAt":  "2024-01-18T20:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "It\u0027s probably an issue on the reading side - maybe somewhere in https://github.com/dotnet/runtime/blob/main/src/mono/mono/metadata/class.c#L5580-L5649",
                                           "updatedAt":  "2024-01-18T20:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTJ5X",
                                           "createdAt":  "2024-01-19T17:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nA [Field RVA alignment test](https://github.com/dotnet/runtime/pull/96805#discussion_r1450775745) is failing on mono legs[ in this PR](https://github.com/dotnet/runtime/pull/96805)\r\n\r\nThat verifies the code section:\r\n\r\nhttps://github.com/dotnet/runtime/blob/f36b7cded294d07962060856843c5fa8ec1beb7d/src/libraries/System.Reflection.Emit/src/System/Reflection/Emit/ModuleBuilderImpl.cs#L452-L454\r\n\r\nNot sure if it is bug or expected, I don\u0027t see mono specific code in `MetadataBuilder` nor in `BlobBuilder.Align(int)` https://github.com/dotnet/runtime/blob/72c4c57a3c8c1b267447f253fdc14f9d14d91a2b/src/libraries/System.Reflection.Metadata/src/System/Reflection/Metadata/BlobBuilder.cs#L808-L812\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `runtime-mono`, `area-System.Reflection-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-19T17:54:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "BlobBuilder.Align(int) seems not working on mono",
        "labels":  [
                       "area-System.Reflection",
                       "runtime-mono",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98013",
        "createdAt":  "2024-02-06T01:49:39Z",
        "number":  98013,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T18:33:58Z",
        "body":  "AssemblySaveModuleBuilderTests.GetArrayMethodTest fails on `release mono_interpreter linux x64 Debug` CI leg.\r\n\r\nNot sure why it is only failing on this CI leg, the failure log doesn\u0027t have much info, though looks mono specific:\r\n\r\nFrom [log](https://[helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-97350-merge-598460e957bf4f2f86/System.Reflection.Emit.Tests/1/console.fea100ba.log?helixlogtype=result](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-97350-merge-598460e957bf4f2f86/System.Reflection.Emit.Tests/1/console.fea100ba.log?helixlogtype=result)):\r\n```log\r\nSystem.Reflection.Emit.Tests.AssemblySaveModuleBuilderTests.GetArrayMethodTest [FAIL]\r\n      System.ArrayTypeMismatchException : Attempted to access an element as a type incompatible with the array.\r\n      Stack Trace:\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(178,0): at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n  Finished:    System.Reflection.Emit.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Reflection.Emit.Tests  Total: 1474, Errors: 0, Failed: 1, Skipped: 0, Time: 5.481s\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdozDZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5y9Kpw",
                                           "createdAt":  "2024-02-06T01:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAssemblySaveModuleBuilderTests.GetArrayMethodTest fails on `release mono_interpreter linux x64 Debug` CI leg.\r\n\r\nNot sure why it is only failing on this CI leg, the failure log doesn\u0027t have much info, though looks mono specific:\r\n\r\nFrom [log](https://[helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-97350-merge-598460e957bf4f2f86/System.Reflection.Emit.Tests/1/console.fea100ba.log?helixlogtype=result](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-97350-merge-598460e957bf4f2f86/System.Reflection.Emit.Tests/1/console.fea100ba.log?helixlogtype=result)):\r\n```log\r\nSystem.Reflection.Emit.Tests.AssemblySaveModuleBuilderTests.GetArrayMethodTest [FAIL]\r\n      System.ArrayTypeMismatchException : Attempted to access an element as a type incompatible with the array.\r\n      Stack Trace:\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(178,0): at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n  Finished:    System.Reflection.Emit.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Reflection.Emit.Tests  Total: 1474, Errors: 0, Failed: 1, Skipped: 0, Time: 5.481s\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-06T01:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52jMNn",
                                           "createdAt":  "2024-03-11T16:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "cc @BrzVlad ",
                                           "updatedAt":  "2024-03-11T16:49:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "AssemblySaveModuleBuilderTests.GetArrayMethodTest fails on \u0027release mono_interpreter linux x64 Debug\u0027 CI leg",
        "labels":  [
                       "area-System.Reflection",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98533",
        "createdAt":  "2024-02-16T00:28:25Z",
        "number":  98533,
        "author":  "adityapatwardhan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T22:37:57Z",
        "body":  "### Description\n\nWhen trying to get the `IsInterface` member `System.Runtimetype` we get back an empty array of `MemberInfo`.\r\nExpected to have 1 item in the array\r\n\r\n\n\n### Reproduction Steps\n\nProject file:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nProgram.cs: \r\n\r\n```csharp\r\nusing System.IO;\r\n\r\nvar t = typeof(Path).Assembly.GetType(\"System.IO.Path\");\r\nConsole.WriteLine($\"Value == {t?.IsInterface}\");\r\n\r\nConsole.WriteLine($\"{t?.GetType()}\");\r\nvar member =  t?.GetType().GetMember(\"IsInterface\");\r\n\r\nif (member is not null)\r\n{\r\n    Console.WriteLine($\"{member.GetType()}\");\r\n    Console.WriteLine($\"{member.Length}\");\r\n}\r\n```\n\n### Expected behavior\n\nValue == False\r\nSystem.RuntimeType\r\nSystem.Reflection.MemberInfo[]\r\n1\n\n### Actual behavior\n\nValue == False\r\nSystem.RuntimeType\r\nSystem.Reflection.MemberInfo[]\r\n0\n\n### Regression?\n\nThis is a regression from .NET 8 \n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.NET 9 Preview 1\r\nFailures happen on Windows, Linux and Mac\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvh7f0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50FVa4",
                                           "createdAt":  "2024-02-16T00:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen trying to get the `IsInterface` member `System.Runtimetype` we get back an empty array of `MemberInfo`.\r\nExpected to have 1 item in the array\r\n\r\n\n\n### Reproduction Steps\n\nProject file:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nProgram.cs: \r\n\r\n```csharp\r\nusing System.IO;\r\n\r\nvar t = typeof(Path).Assembly.GetType(\"System.IO.Path\");\r\nConsole.WriteLine($\"Value == {t?.IsInterface}\");\r\n\r\nConsole.WriteLine($\"{t?.GetType()}\");\r\nvar member =  t?.GetType().GetMember(\"IsInterface\");\r\n\r\nif (member is not null)\r\n{\r\n    Console.WriteLine($\"{member.GetType()}\");\r\n    Console.WriteLine($\"{member.Length}\");\r\n}\r\n```\n\n### Expected behavior\n\nValue == False\r\nSystem.RuntimeType\r\nSystem.Reflection.MemberInfo[]\r\n1\n\n### Actual behavior\n\nValue == False\r\nSystem.RuntimeType\r\nSystem.Reflection.MemberInfo[]\r\n0\n\n### Regression?\n\nThis is a regression from .NET 8 \n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.NET 9 Preview 1\r\nFailures happen on Windows, Linux and Mac\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eadityapatwardhan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-16T00:28:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50JAJn",
                                           "createdAt":  "2024-02-16T14:46:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "This is because [`IsInstance` is declared on `System.Type`, not `System.RuntimeType`](https://learn.microsoft.com/en-us/dotnet/api/system.type.isinterface?view=net-8.0) and by default `GetMember()/GetMembers()` does not take inherited members into account (`BindingFlags.DeclaredOnly`). If you pass a custom `BindingFlags` you can make it add inherited members to the search.",
                                           "updatedAt":  "2024-02-16T14:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50KnAB",
                                           "createdAt":  "2024-02-16T17:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityapatwardhan",
                                           "body":  "The behavior has changed since .NET 8 though. PowerShell uses reflection extensively, so if the change is intentional, we need to know.",
                                           "updatedAt":  "2024-02-16T17:20:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50NTe9",
                                           "createdAt":  "2024-02-17T04:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODX5AjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2024-02-22T22:53:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This was broken in #92512 that introduced an internal property named `IsInterface` on `RuntimeType`. What PowerShell is doing is private reflection on implementation details of the BCL. What is happening is this:\r\n\r\n```csharp\r\nConsole.WriteLine(typeof(C1).GetMember(\"P\").Length); // Prints 1\r\nConsole.WriteLine(typeof(C2).GetMember(\"P\").Length); // Prints 0\r\n\r\nclass C1\r\n{\r\n    public bool P { get; set; }\r\n}\r\n\r\nclass C2 : C1\r\n{\r\n    internal new bool P { get; set; }\r\n}\r\n```\r\n\r\nWe don\u0027t issue breaking change notices when we change private implementation details of the BCL.\r\n\r\nThe PowerShell code needs to be updated to use `typeof(Type).GetMember(\"IsInterface\")` to reflect on public surface area, not on members of the undocumented `RuntimeType`.",
                                           "updatedAt":  "2024-02-17T04:39:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50SZ3D",
                                           "createdAt":  "2024-02-18T06:48:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeN2xA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-08-13T20:22:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e What PowerShell is doing is private reflection on implementation details of the BCL.\r\n\r\nIt is an interesting question whether this constitutes a private reflection. Do we consider queries for public (inherited) methods on internal type to be a private reflection? It is very common for code out there to do that.\r\n\r\n`BindingFlags.Public` are the default, so one would expect that the API is only going to consult public members. Unfortunately, it is not the case. The internal member hides the inherited public member.",
                                           "updatedAt":  "2024-02-18T06:48:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50uAjk",
                                           "createdAt":  "2024-02-21T22:50:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e by default GetMember()/GetMembers() does not take inherited members into account (BindingFlags.DeclaredOnly).\r\n\r\nThe default for this case does not include `DeclaredOnly`.  The [default](https://github.com/dotnet/runtime/blob/7457fe8a90efaecb41f70c293b992bb51909904f/src/libraries/System.Private.CoreLib/src/System/Type.cs#L723) is `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public`.\r\n\r\n\u003e The PowerShell code needs to be updated to use typeof(Type).GetMember(\"IsInterface\") to reflect on public surface area, not on members of the undocumented RuntimeType.\r\n\r\nYes using `typeof(Type)` is the most \"correct\" way IMO to query for members for any case when you know the type + member you want to reflect on; calling `GetType()` only adds unnecessary questions.\r\n\r\n\u003e It is an interesting question whether this constitutes a private reflection. Do we consider queries for public (inherited) methods on internal type to be a private reflection? It is very common for code out there to do that.\r\n\r\nSince calling `obj.GetType()` on a non-sealed but public class may return a non-public type, some thought is needed when using reflection + `obj.GetType()` as to why. As I mentioned earlier, if you know the type + member you want to reflect on, just use `typeof(Foo)` otherwise you may get an unexpected class and the non-intuitive behavior with the `new\\newslot` modifier.\r\n\r\n\u003e `BindingFlags.Public` are the default, so one would expect that the API is only going to consult public members. Unfortunately, it is not the case. The internal member hides the inherited public member.\r\n\r\nThat is unfortunate and seems like a reflection issue that can no longer be addressed. We could change the modifier on RuntimeType to be `public` instead of `internal` which would address this, although I\u0027m inclined to just close this issue as by design.",
                                           "updatedAt":  "2024-02-21T22:50:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50wPzS",
                                           "createdAt":  "2024-02-22T06:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e That is unfortunate and seems like a reflection issue that can no longer be addressed. \r\n\r\nWhy not? `new` is rarely used feature. I think it would be acceptable to fix the reflection behavior for it if we decided that it is the right thing to do.\r\n\r\nThis issue is not present in native AOT implementation of reflection. I have not checked `Mono` and `MetadataLoadContext`. We should add a test case for this and either introduce the issue in all reflection implementations or fix the issue in all reflection implementations.",
                                           "updatedAt":  "2024-02-22T06:41:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51arBs",
                                           "createdAt":  "2024-02-28T21:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Why not? new is rarely used feature. I think it would be acceptable to fix the reflection behavior for it if we decided that it is the right thing to do.\r\n\r\nIt would be a breaking change that\u0027s all. If we\u0027re OK with that, I can move this issue to v9 with that task.",
                                           "updatedAt":  "2024-02-28T21:13:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51arRq",
                                           "createdAt":  "2024-02-28T21:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Added `needs-breaking-change-doc-created` label because this issue has the `breaking-change` label. \n\n1. [ ] Create and link to this issue a matching issue in the dotnet/docs repo using the [breaking change documentation template](https://aka.ms/dotnet/docs/new-breaking-change-issue), then remove this `needs-breaking-change-doc-created` label.\n\nTagging @dotnet/compat for awareness of the breaking change.",
                                           "updatedAt":  "2024-02-28T21:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GpM7i",
                                           "createdAt":  "2024-07-30T18:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This is not blocking; moving to v10",
                                           "updatedAt":  "2024-07-30T18:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Ht_R",
                                           "createdAt":  "2025-08-14T19:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "A fix was attempted in https://github.com/dotnet/runtime/pull/118709. It proved to be broader than previously understood. Tests exist that validate this hidding behavior and no runtime appears to be conditional on these test, so all seem to pass in some manner. The tests can be found at the following locations:\n\nhttps://github.com/dotnet/runtime/blob/a2ba99899d196987a819fa714a9cb9efc6c64990/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Reflection/TypeTests.Get.CornerCases.cs#L135\n\nhttps://github.com/dotnet/runtime/blob/a2ba99899d196987a819fa714a9cb9efc6c64990/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Reflection/TypeTests.Get.CornerCases.cs#L169\n\nhttps://github.com/dotnet/runtime/blob/a2ba99899d196987a819fa714a9cb9efc6c64990/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Reflection/TypeTests.Get.CornerCases.cs#L200\n\nhttps://github.com/dotnet/runtime/blob/a2ba99899d196987a819fa714a9cb9efc6c64990/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Reflection/TypeTests.Get.CornerCases.cs#L229\n\nhttps://github.com/dotnet/runtime/blob/a2ba99899d196987a819fa714a9cb9efc6c64990/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/Reflection/TypeTests.Get.CornerCases.cs#L271\n\nThe hiding of public members based on implementation details seems like a bug. This should be fixed, but requires non-trivial amount of understand what should occur. See https://github.com/dotnet/runtime/issues/98533#issuecomment-1958804690.",
                                           "updatedAt":  "2025-08-14T22:37:57Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Issues with reflection where the return type of GetMember is an empty array of MemberInfo",
        "labels":  [
                       "area-System.Reflection",
                       "breaking-change",
                       "needs-breaking-change-doc-created"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98756",
        "createdAt":  "2024-02-21T13:41:15Z",
        "number":  98756,
        "author":  "IS4Code",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:47:01Z",
        "body":  "### Background and motivation\r\n\r\nUnlike `AssemblyLoadContext`, the similarly named `MetadataLoadContext` does not have the `GetLoadContext` method that allows retrieving the original load context from its corresponding `Assembly` instance. This is inconvenient in situations such as when calling `assembly.GetReferencedAssemblies()` and attempting to resolve the `AssemblyName` instances.\r\n\r\nThe relevant property is already there, just internal and thus inaccessible.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nusing System.Reflection.TypeLoading;\r\n\r\nnamespace System.Reflection;\r\n\r\npublic class MetadataLoadContext\r\n{\r\n    public static MetadataLoadContext? GetLoadContext(Assembly assembly)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(assembly);\r\n \r\n        return (assembly as RoAssembly)?.Loader;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar context = new MetadataLoadContext(...);\r\nvar asm = context.LoadFromAssemblyName(...);\r\nAssert.AreEqual(MetadataLoadContext.GetLoadContext(asm), context);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAnother option, with arguably greater impact but also requirements, would be to make the `Assembly` class expose its loader through a public property, probably as an interface which both `AssemblyLoadContext` and `MetadataLoadContext` would implement. This would work with any potential new load context type, but requires modifying `Assembly` and thus would not work easily with older platforms, unlike just modifying `MetadataLoadContext` which is released as a package. It could however remain a possibility even with this API added.\r\n\r\n### Risks\r\n\r\nBy accessing the `MetadataLoadContext` of an `Assembly`, code may load any arbitrary assemblies into the context, but the related `AssemblyLoadContext` already provides this functionality where it may be more dangerous than here, and the `Loader` property is accessible by reflection anyway.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOee-VnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50oI0D",
                                           "createdAt":  "2024-02-21T13:41:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nUnlike `AssemblyLoadContext`, the similarly named `MetadataLoadContext` does not have the `GetLoadContext` method that allows retrieving the original load context from its corresponding `Assembly` instance. This is inconvenient in situations such as when calling `assembly.GetReferencedAssemblies()` and attempting to resolve the `AssemblyName` instances.\r\n\r\nThe relevant property is already there, just internal and thus inaccessible.\n\n### API Proposal\n\n```csharp\r\nusing System.Reflection.TypeLoading;\r\n\r\nnamespace System.Reflection;\r\n\r\nclass MetadataLoadContext\r\n{\r\n    public static MetadataLoadContext? GetLoadContext(Assembly assembly)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(assembly);\r\n \r\n        return (assembly as RoAssembly)?.Inner;\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar context = new MetadataLoadContext(...);\r\nvar asm = context.LoadFromAssemblyName(...);\r\nAssert.AreEqual(MetadataLoadContext.GetLoadContext(asm), context);\r\n```\r\n\n\n### Alternative Designs\n\nAnother option, with arguably greater impact but also requirements, would be to make the `Assembly` class expose its loader through a public property, probably as an interface which both `AssemblyLoadContext` and `MetadataLoadContext` would implement. This would work with any potential new load context type, but requires modifying `Assembly` and thus would not work easily with older platforms, unlike just modifying `MetadataLoadContext` which is released as a package. It could however remain a possibility even with this API added.\n\n### Risks\n\nBy accessing the `MetadataLoadContext` of an `Assembly`, code may load any arbitrary assemblies into the context, but the related `AssemblyLoadContext` already provides this functionality where it may be more dangerous than here, and the `Loader` property is accessible by reflection anyway.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIS4Code\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-21T13:41:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50oYIT",
                                           "createdAt":  "2024-02-21T14:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nUnlike `AssemblyLoadContext`, the similarly named `MetadataLoadContext` does not have the `GetLoadContext` method that allows retrieving the original load context from its corresponding `Assembly` instance. This is inconvenient in situations such as when calling `assembly.GetReferencedAssemblies()` and attempting to resolve the `AssemblyName` instances.\r\n\r\nThe relevant property is already there, just internal and thus inaccessible.\n\n### API Proposal\n\n```csharp\r\nusing System.Reflection.TypeLoading;\r\n\r\nnamespace System.Reflection;\r\n\r\nclass MetadataLoadContext\r\n{\r\n    public static MetadataLoadContext? GetLoadContext(Assembly assembly)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(assembly);\r\n \r\n        return (assembly as RoAssembly)?.Inner;\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar context = new MetadataLoadContext(...);\r\nvar asm = context.LoadFromAssemblyName(...);\r\nAssert.AreEqual(MetadataLoadContext.GetLoadContext(asm), context);\r\n```\r\n\n\n### Alternative Designs\n\nAnother option, with arguably greater impact but also requirements, would be to make the `Assembly` class expose its loader through a public property, probably as an interface which both `AssemblyLoadContext` and `MetadataLoadContext` would implement. This would work with any potential new load context type, but requires modifying `Assembly` and thus would not work easily with older platforms, unlike just modifying `MetadataLoadContext` which is released as a package. It could however remain a possibility even with this API added.\n\n### Risks\n\nBy accessing the `MetadataLoadContext` of an `Assembly`, code may load any arbitrary assemblies into the context, but the related `AssemblyLoadContext` already provides this functionality where it may be more dangerous than here, and the `Loader` property is accessible by reflection anyway.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIS4Code\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`, `area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-21T14:12:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50pn7s",
                                           "createdAt":  "2024-02-21T15:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@steveharter This proposal looks good to me. Mark is as api-ready-to-review?",
                                           "updatedAt":  "2024-02-21T15:57:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5575Wd",
                                           "createdAt":  "2024-04-09T17:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdlcyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-04-09T18:02:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=OSx-Hxpijac\u0026t=0h15m8s)\n\n\r\n* We questioned whether it should be `TryGetLoadContext`, but decided it was OK as-is.\r\n\r\n```c#\r\nnamespace System.Reflection;\r\n\r\npublic partial class MetadataLoadContext\r\n{\r\n    public static MetadataLoadContext? GetLoadContext(Assembly assembly);\r\n}\r\n```",
                                           "updatedAt":  "2024-04-09T19:37:04Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: MetadataLoadContext.GetLoadContext(Assembly)",
        "labels":  [
                       "api-approved",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99147",
        "createdAt":  "2024-03-01T07:06:24Z",
        "number":  99147,
        "author":  "koenigst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:47:02Z",
        "body":  "### Description\n\nIf multiple threads call `System.Reflection.MethodBase.GetParameters()` at the same time, the resulting `ParameterInfo`s are not always `Equals` even though they represent the same parameter.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Xunit;\r\n\r\npublic sealed class ReflectionThreadSafety\r\n{\r\n    [Fact]\r\n    public void SequentialBehavior()\r\n    {\r\n        var method = typeof(ReflectionThreadSafety).GetMethod(\"SequentialMethod\", BindingFlags.Static | BindingFlags.NonPublic)!;\r\n        var parameters = new[]\r\n        {\r\n            method.GetParameters()[0],\r\n            method.GetParameters()[0],\r\n        };\r\n        Assert.All(parameters, p =\u003e Assert.Equal(parameters[0], p));\r\n    }\r\n\r\n    [Fact]\r\n    public void ConcurrentBehavior()\r\n    {\r\n        var method = typeof(ReflectionThreadSafety).GetMethod(\"ConcurrentMethod\", BindingFlags.Static | BindingFlags.NonPublic)!;\r\n        var parameters = Enumerable.Range(0, 2 * Environment.ProcessorCount)\r\n            .AsParallel()\r\n            .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\r\n            .Select(_ =\u003e method.GetParameters()[0])\r\n            .ToList();\r\n        Assert.All(parameters, p =\u003e Assert.Equal(parameters[0], p));\r\n    }\r\n\r\n    private static void SequentialMethod(int p, DateTimeOffset o, TimeSpan t, AppDomain a) { }\r\n    private static void ConcurrentMethod(int p, DateTimeOffset o, TimeSpan t, AppDomain a) { }\r\n}\r\n```\n\n### Expected behavior\n\nSequential and concurrent access should behave the same.\n\n### Actual behavior\n\nThe concurrent test sometimes fails (repeat test run a few times as the concurrency issue can not be reproduced reliably). The likely cause is that multiple threads fill the [`RuntimeMethodInfo.m_parameters`](https://github.com/dotnet/runtime/blob/release/9.0-preview2/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.CoreCLR.cs#L23) cache resulting in multiple instances of `ParameterInfo` for the same method parameter. Most information on the instances are identical but because `ParameterInfo.Equals` is based on reference equality the test fails.\n\n### Regression?\n\nThe code is essentially the same as in .NET Framework 4.8.1 and the relevant .NET Core code has not changed in the last five years.\n\n### Known Workarounds\n\nCall `MethodBase.GetParameters` from a single thread before accessing it in parallel. Once the cache is initialised all further concurrent calls will return the correct parameter instances.\n\n### Configuration\n\n* TargetFramework: net8.0\r\n* .NET SDK: 8.0.101\r\n* Architecture: x64\r\n* OS: Windows 11 Enterprise 22H2 (OS build 22621.3155)\n\n### Other information\n\nCalling reflection code concurrently seems to be a rather unusual case because most of the reflection code uses the same not completely thread-safe caching mechanism and I have not run into this issue in the last ten years of .NET use. I am also aware that making the caching thread-safe has some overhead that is not desired for dealing with a rare occurence. The [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.methodbase#thread-safety) declares the class as thread-safe. Would it make sense to change the documentation instead of the implementation?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdlEpPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51k93q",
                                           "createdAt":  "2024-03-01T07:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf multiple threads call `System.Reflection.MethodBase.GetParameters()` at the same time, the resulting `ParameterInfo`s are not always `Equals` even though they represent the same parameter.\n\n### Reproduction Steps\n\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Xunit;\r\n\r\npublic sealed class ReflectionThreadSafety\r\n{\r\n    [Fact]\r\n    public void SequentialBehavior()\r\n    {\r\n        var method = typeof(ReflectionThreadSafety).GetMethod(\"SequentialMethod\", BindingFlags.Static | BindingFlags.NonPublic)!;\r\n        var parameters = new[]\r\n        {\r\n            method.GetParameters()[0],\r\n            method.GetParameters()[0],\r\n        };\r\n        Assert.All(parameters, p =\u003e Assert.Equal(parameters[0], p));\r\n    }\r\n\r\n    [Fact]\r\n    public void ConcurrentBehavior()\r\n    {\r\n        var method = typeof(ReflectionThreadSafety).GetMethod(\"ConcurrentMethod\", BindingFlags.Static | BindingFlags.NonPublic)!;\r\n        var parameters = Enumerable.Range(0, 2 * Environment.ProcessorCount)\r\n            .AsParallel()\r\n            .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\r\n            .Select(_ =\u003e method.GetParameters()[0])\r\n            .ToList();\r\n        Assert.All(parameters, p =\u003e Assert.Equal(parameters[0], p));\r\n    }\r\n\r\n    private static void SequentialMethod(int p, DateTimeOffset o, TimeSpan t, AppDomain a) { }\r\n    private static void ConcurrentMethod(int p, DateTimeOffset o, TimeSpan t, AppDomain a) { }\r\n}\r\n```\n\n### Expected behavior\n\nSequential and concurrent access should behave the same.\n\n### Actual behavior\n\nThe concurrent test sometimes fails (repeat test run a few times as the concurrency issue can not be reproduced reliably). The likely cause is that multiple threads fill the [`RuntimeMethodInfo.m_parameters`](https://github.com/dotnet/runtime/blob/release/9.0-preview2/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.CoreCLR.cs#L23) cache resulting in multiple instances of `ParameterInfo` for the same method parameter. Most information on the instances are identical but because `ParameterInfo.Equals` is based on reference equality the test fails.\n\n### Regression?\n\nThe code is essentially the same as in .NET Framework 4.8.1 and the relevant .NET Core code has not changed in the last five years.\n\n### Known Workarounds\n\nCall `MethodBase.GetParameters` from a single thread before accessing it in parallel. Once the cache is initialised all further concurrent calls will return the correct parameter instances.\n\n### Configuration\n\n* TargetFramework: net8.0\r\n* .NET SDK: 8.0.101\r\n* Architecture: x64\r\n* OS: Windows 11 Enterprise 22H2 (OS build 22621.3155)\n\n### Other information\n\nCalling reflection code concurrently seems to be a rather unusual case because most of the reflection code uses the same not completely thread-safe caching mechanism and I have not run into this issue in the last ten years of .NET use. I am also aware that making the caching thread-safe has some overhead that is not desired for dealing with a rare occurence. The [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.methodbase#thread-safety) declares the class as thread-safe. Would it make sense to change the documentation instead of the implementation?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekoenigst\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-01T07:06:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52SYbh",
                                           "createdAt":  "2024-03-07T21:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I assume `Equal()` is equivalent to `ReferenceEquals()` in this case.",
                                           "updatedAt":  "2024-03-07T21:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52USk-",
                                           "createdAt":  "2024-03-08T04:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "koenigst",
                                           "body":  "As far as I can see yes. `ParameterInfo` and `RuntimeParameterInfo` inherit their equality implementation from `object`. I think this is frequently the case with `System.Reflection` classes.",
                                           "updatedAt":  "2024-03-08T04:43:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "MethodBase.GetParameters() is not thread-safe",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99817",
        "createdAt":  "2024-03-15T15:07:57Z",
        "number":  99817,
        "author":  "poizan42",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC65u8g==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-09-10T12:27:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-01T18:09:43Z",
        "body":  "The requirement of depending on the assembly an attribute is defined in at runtime is a pretty common annoyance I\u0027m encountering. A common scenario is with model/dto libraries where I want to support both NJ and STJ. If I want to say some fields should be ignored by the serializers then I need to add `System.Text.Json.Serialization.JsonIgnoreAttribute` and `Newtonsoft.Json.JsonIgnoreAttribute`. This means the model library suddenly needs a reference to both Newtonsoft.Json and System.Text.Json even though I\u0027m only using them for metadata that\u0027s only relevant if a consumer uses one of those libraries.\r\n\r\nI think we could use something akin to ELF\u0027s weak symbols.\r\n\r\n# Tentative proposal\r\n\r\nAs Butler Lampson put it \"All problems in computer science can be solved by another level of indirection\" - so that is what I\u0027m going to propose here. Add a `WeakCustomAttributeReferenceAttribute` that embeds the actual attribute.\r\n\r\n```CSharp\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Reflection;\r\nusing System.Runtime.Loader;\r\n\r\nnamespace System.Runtime.CompilerServices;\r\n\r\n[AttributeUsage(AttributeTargets.All, AllowMultiple = true)]\r\npublic class WeakCustomAttributeReferenceAttribute : Attribute\r\n{\r\n    public string AttributeType { get; }\r\n    public byte[] CustomAttributeDataBlob { get; }\r\n    /// \u003csummary\u003e\r\n    /// Initializes a new instance of the \u003csee cref=\"WeakCustomAttributeReferenceAttribute\"/\u003e class with the specified target attribute type and custom attribute blob.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"attributeType\"\u003eThe canonical type name of the embedded attribute.\r\n    /// This is either the Assembly Qualified Name, or the Fully Qualified Name if the type is present in the system library.\u003c/param\u003e\r\n    /// \u003cparam name=\"customAttributeDataBlob\"\u003eA CustomAttrib blob as specified in ECMA-335 Section II.23.3\u003c/param\u003e\r\n    public WeakCustomAttributeReferenceAttribute(string attributeType, byte[] customAttributeDataBlob);\r\n\r\n    public bool TryGetCustomAttributeData([NotNullWhen(true)] out CustomAttributeData? customAttributeData)\r\n        =\u003e TryGetCustomAttributeData(AssemblyLoadContext.Default, out customAttributeData);\r\n    public bool TryGetCustomAttributeData(AssemblyLoadContext assemblyLoadContext, [NotNullWhen(true)] out CustomAttributeData? customAttributeData);\r\n    public bool TryGetCustomAttribute([NotNullWhen(true)] out Attribute? attribute);\r\n    public bool TryGetCustomAttribute\u003cT\u003e([NotNullWhen(true)] out T? attribute)\r\n        where T : Attribute;\r\n}\r\n```\r\n\r\nThis would obviously need compiler support so you don\u0027t have to create the CustomAttrib blob by hand - also the actual AttributeUsage of the target attribute should be enforced by the compiler. I don\u0027t know if it should have methods for inspecting the custom attribute when you don\u0027t have the types available. I guess you could use `BlobReader` or Mono.Cecil for that.\r\n\r\nFor this to be of much use the behavior of all the GetCustomAttribute(s) methods in System.Reflection should be updated.\r\n\r\n* .GetCustomAttribute(s) and .GetCustomAttributesData will try to get the attribute in `WeakCustomAttributeReferenceAttribute` attributes. If the type successfully resolves they will act just like if the target attribute had been there directly. On the other hand if the type fails to resolve they will just completely ignore the WeakCustomAttributeReferenceAttribute.\r\n* Overloads should be added to .GetCustomAttribute(s) and .GetCustomAttributesData that will override this behavior so you can get the `WeakCustomAttributeReferenceAttribute` instances and inspect them manually.\r\n* Requesting `WeakCustomAttributeReferenceAttribute` directly with `.GetCustomAttribute()` or `GetCustomAttributes()` overloads taking an attribute type will return the `WeakCustomAttributeReferenceAttribute` as-is.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeLzpgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53PB-D",
                                           "createdAt":  "2024-03-15T20:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is possible to do this today by recognizing the attribute by name instead by identity. Number of attributes and libraries work like that today.\r\n\r\nOne example from many, nullability related attributes. You can see how https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Reflection/NullabilityInfoContext.cs recognizes them by name.",
                                           "updatedAt":  "2024-03-15T20:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53RsvJ",
                                           "createdAt":  "2024-03-16T02:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "poizan42",
                                           "body":  "@jkotas Unfortunately this doesn\u0027t help you if the library you are using doesn\u0027t use this pattern . Also it\u0027s just way more convenient to be able to just get your attribute with `GetCustomAttribute\u003cT\u003e()` rather than manually matching type names from `CustomAttributeData` and fetching arguments out of it.\r\n\r\nAlso, I just realized that my suggested implementation is missing the constructor signature. Unfortunately we can\u0027t just embed a MethodRefSig blob since it contains references to other metadata tables. I don\u0027t know if there is any common method signature serialization formats besides just using a string with ILASM syntax? I guess we could just use a `Type[]` array for arguments and just decide to not support attributes with constructors with weird signatures.",
                                           "updatedAt":  "2024-03-16T02:07:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53THZ1",
                                           "createdAt":  "2024-03-16T03:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcAjkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2024-03-27T04:03:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Sure, I have been trying to point out that what you are proposing is almost achievable today. It is better to tweak what exists to address the missing parts instead of trying to invent a new parallel scheme for encoding custom attributes from scratch.\r\n\r\nDeleting the dependency after the compilation (ie leaving the dependency reference orphaned) is another existing way to achieve the sort of thing that you are proposing. Orphaned dependencies are not unusual in the libraries out there. Even our own .NET runtime libraries ship with orphaned dependencies in .NET Framework compat shims.\r\n\r\nThe only small nuance is FileLoadException when resolving the attribute from orphaned dependency that is not present at runtime. This can be solved by introducing an attribute or an API that ignore the attributes from orphaned dependencies. No need to invent a clone of custom attribute encoding, teaching all compilers and tools how to encode and decode them, etc.",
                                           "updatedAt":  "2024-03-16T03:51:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XB92",
                                           "createdAt":  "2024-03-17T16:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "poizan42",
                                           "body":  "A bit of brainstorming here.\n\n\"definer\" is where the attribute class resides. \"consumer\" is code inspecting metadata for the presence of the attribute. \"appliee\" is anywhere the attribute is applied to.\n\n1. No changes should be necessary to consumers\n2. No changes should be necessary to definers\n3. The feature should work transparently with older runtime. I.e. it should be possible to annotate attribute usages in a .net standard 2.0 library\n\nThe behavior of existing overloads of GetCustomAttribute[s[Data]] cannot be changed for existing attribute as that would be a breaking change. Adding overloads to change the behavior would not satisfy point 1.\n\nSo it\u0027s the application of the attribute that needs to be annotated somehow. Changes to the metadata format are ruled out by point 3 - even backwards compatible changes are probably a no-go since existing tooling wouldn\u0027t know the significance of the metadata. Embedding the attribute inside another attribute seems to be ruled out.\n\nCustom attribute applications cannot have modifiers in the ECMA-335 format as far as I can tell. Applying an attribute to an attribute application is explicitly ruled out in section II.22.10.\n\nAre custom attributes considered ordered? If they are then we could add an attribute that modifies the following attribute, e.g. something like\n\n```CSharp\npublic class Foo()\n{\n    [AttributeIsWeak, System.Text.Json.Serialization.JsonIgnore]\n    public int Ignored { get; set; }\n}\n```\n\nBut I can\u0027t find anywhere saying that the metadata order of custom attributes has any significance.\n\nMaybe it would make more sense for all applications of an attribute in an assembly to be considered \"weak\". So something like\n\n```CSharp\n[assembly: AttributeIsWeaklyReferenced(typeof(System.Text.Json.Serialization.JsonIgnore))]\n```",
                                           "updatedAt":  "2025-03-17T13:51:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XFVw",
                                           "createdAt":  "2024-03-17T17:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e The only small nuance is FileLoadException when resolving the attribute from orphaned dependency that is not present at runtime.\r\n\r\nIt can even be thrown by Exception.ToString() when StackTrace.ToString attempts to recognize `async` functions (\u003chttps://github.com/dotnet/coreclr/pull/14655\u003e).\r\n\r\n## Demo\r\n\r\n### Ghost/Ghost.csproj\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetstandard2.0\u003c/TargetFramework\u003e\r\n    \u003cLangVersion\u003e7.0\u003c/LangVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n### Ghost/MissingAttribute.cs\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace Ghost\r\n{\r\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]\r\n    public sealed class MissingAttribute : Attribute\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n### Executable/Executable.csproj\r\n\r\n```XML\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFrameworks\u003enet8.0;net48\u003c/TargetFrameworks\u003e\r\n    \u003cLangVersion\u003e7.0\u003c/LangVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cProjectReference Include=\"../Ghost/Ghost.csproj\" Private=\"false\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n### Executable/Program.cs\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace Executable\r\n{\r\n    [Ghost.Missing]\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            throw new ApplicationException(\"Let\u0027s see the stack trace.\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Stack trace lost on net8.0\r\n\r\n```\r\n$ dotnet run --project=Executable --framework=net8.0\r\nUnhandled exception.\r\n   Cannot print exception string because Exception.ToString() failed.\r\n```\r\n\r\n### Stack trace shown on net48\r\n\r\n```\r\n$ dotnet run --project=Executable --framework=net48\r\n\r\nUnhandled Exception: System.ApplicationException: Let\u0027s see the stack trace.\r\n   at Executable.Program.Main() in C:\\[REDACTED]\\Executable\\Program.cs:line 11\r\n```\r\n",
                                           "updatedAt":  "2024-03-17T17:03:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XJNj",
                                           "createdAt":  "2024-03-17T17:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, some tools and APIs work poorly in the presence of orphaned decencies.",
                                           "updatedAt":  "2024-03-17T17:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vOmC",
                                           "createdAt":  "2024-03-28T16:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODen0_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxkatz6",
                                                                               "createdAt":  "2024-04-18T08:27:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I do like the idea of being able to ignore exceptions (`TypeLoadException`, `FileNotFoundException`) for the attribute types that can\u0027t be resolved so that dangling type references can be supported.\r\n\r\nHowever, I\u0027m not sure it meets the bar for a new feature. The simple JSON scenario mentioned makes sense, but as soon as you need a custom converter or use other serializer extension points within the DTO library then the benefit is lost.\r\n\r\nWithout adding new features to the core libraries or runtime, the \"appliee\" which owns the DTOs could use a feature switch that would differentiate between STJ and Newtonsoft. During trimming then, only one set of functionality would apply and the unreferenced attributes should go away.\r\n\r\nHowever, the \"consumer\" would need to know about the feature switch. If the consumer is already publishing to reduce trim size, that doesn\u0027t seem to be a blocking requirement. Perhaps we should make it easier for a library to expose which trimmer flags it uses (such as through an assembly attribute) so the consumer can see these in Visual Studio for example?\r\n\r\nBut if we did want to go down the \"ignore exceptions\" path with only the \"appliee\" knowing about it, the assembly-level approach may work:\r\n```cs\r\n[assembly: IgnoreTypeLoadExceptions(nameof(System.Text.Json.Serialization.JsonIgnoreAttribute))]\r\n[assembly: IgnoreTypeLoadExceptions(nameof(Newtonsoft.Json.JsonIgnoreAttribute))]\r\n\r\nclass DTO\r\n{\r\n    [System.Text.Json.Serialization.JsonIgnore]\r\n    [Newtonsoft.Json.JsonIgnore]\r\n    public int MyProperty { get; set; }\r\n}\r\n```\r\nalong with runtime support to ignore the exception(s). The attribute would probably be declared like:\r\n```cs\r\nnamespace System.Runtime.InteropServices; // or System if the compiler doesn\u0027t need to see it\r\n[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]\r\npublic class IgnoreTypeLoadExceptionsAttribute : Attribute\r\n{\r\n    public string TypeName { get; }\r\n    public IgnoreTypeLoadExceptionsAttribute(string typeName)\r\n    {\r\n         // If type is not an attribute, throw here\r\n        TypeName = typeName;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-03-28T16:42:24Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Can we add a way to add attributes without requiring a dependency on their assembly?",
        "labels":  [
                       "design-discussion",
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100188",
        "createdAt":  "2024-03-23T14:01:04Z",
        "number":  100188,
        "author":  "YooRarely",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:47:04Z",
        "body":  "### Description\n\nWhen using `DispatchProxy` for an interface which have an init property, it will throw `TypeLoadException`.\n\n### Reproduction Steps\n\n- base\r\n```\r\n class ClassTestI : DispatchProxy\r\n    {\r\n        protected override object? Invoke(MethodInfo? targetMethod, object?[]? args)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n[Test]\r\npublic void Test(){\r\n     DispatchProxy.Create\u003cTestI, ClassTestI\u003e();\r\n}\r\n```\r\n- success  \r\n```\r\ninterface TestI\r\n    {\r\n        public int MyProperty { get; set; }\r\n    }\r\n```\r\n- error\r\n```\r\ninterface TestI\r\n    {\r\n        public int MyProperty { get; init }\r\n    }\r\n```\n\n### Expected behavior\n\nIt Should success to create an object which implement the `TestI` interface\n\n### Actual behavior\n\n```\r\nSystem.TypeLoadException : Signature of the body and declaration in a method implementation do not match.  Type: \u0027generatedProxy_1\u0027.  Assembly: \u0027ProxyBuilder, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027.\r\n   at System.Reflection.Emit.RuntimeTypeBuilder.CreateTypeNoLock()\r\n   at System.Reflection.Emit.RuntimeTypeBuilder.CreateTypeInfoImpl()\r\n   at System.Reflection.Emit.TypeBuilder.CreateType()\r\n   at System.Reflection.DispatchProxyGenerator.ProxyBuilder.CreateType()\r\n   at System.Reflection.DispatchProxyGenerator.ProxyAssembly.GenerateProxyType(Type baseType, Type interfaceType, String interfaceParameter, String proxyParameter)\r\n   at System.Reflection.DispatchProxyGenerator.ProxyAssembly.GetProxyType(Type baseType, Type interfaceType, String interfaceParameter, String proxyParameter)\r\n   at System.Reflection.DispatchProxyGenerator.CreateProxyInstance(Type baseType, Type interfaceType, String interfaceParameter, String proxyParameter)\r\n   at System.Reflection.DispatchProxy.Create[T,TProxy]()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nChange the Property from `{get; init;}` to `{get; set;}`  in the interface\n\n### Configuration\n\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\nWindows11\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeDFm2g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54MWba",
                                           "createdAt":  "2024-03-23T14:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-23T14:01:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "A Bug when  DispatchProxy.Create",
        "labels":  [
                       "bug",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100592",
        "createdAt":  "2024-04-03T14:27:46Z",
        "number":  100592,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:44Z",
        "body":  "The trimmer doesn\u0027t trim Enum fields. As mentioned in the comment [here](https://github.com/dotnet/runtime/pull/100347#discussion_r1547837771), it would make sense to have a separate API that doesn\u0027t require [DynamicallyAccessedMembers](https://github.com/dotnet/runtime/blob/5c3bfeb8477b34a15ef851faa54cae1968ab4237/src/libraries/System.Private.CoreLib/src/System/Type.cs#L236) annotation to get Enum fields. That would prevent suppressing the warning as done [here](https://github.com/dotnet/runtime/blob/5c3bfeb8477b34a15ef851faa54cae1968ab4237/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L5538-L5544) when getting Enum fields.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhbyEGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55SXcL",
                                           "createdAt":  "2024-04-03T14:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Can\u0027t NativeAOT not generate reflection info for such fields?",
                                           "updatedAt":  "2024-04-03T14:58:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55S2Br",
                                           "createdAt":  "2024-04-03T15:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e get field values of an Enum\r\n\r\nNote that we have added trim and AOT friendly ways to get values of an Enum: Enum.GetValuesAsUnderlyingType - https://github.com/dotnet/runtime/issues/72498.\r\n\r\nThe specific case in EnumConverter wants the field values presented as FieldInfos. Fetching enum values as FieldInfos is quite inefficient, but it is required here because of pre-existing public surface.\r\n\r\nA new API can look like this:\r\n```csharp\r\npublic class Enum\r\n{\r\n    [UnconditionalSuppressMessage(\"Trimming\", \"IL2075:\", Justification = \"Trimmer does not trim Enums\")]\r\n    public static FieldInfo[] GetValuesAsFieldInfos(Type enumType)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(enumType);\r\n\r\n        if (!enumType.IsEnum)\r\n            throw new ArgumentException(SR.Arg_MustBeEnum, \"enumType\")\r\n\r\n       return enumType.GetFields(BindingFlags.Public | BindingFlags.Static);\r\n    }\r\n```\r\n\r\nThe question is whether fetching enum values as FieldInfos is common enough to warrant a new public API. I think we would want to see at least one or two additional cases from real-world code where this API can be used.",
                                           "updatedAt":  "2024-04-04T00:04:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55S767",
                                           "createdAt":  "2024-04-03T16:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e The question is whether fetching enum values as FieldInfos is common enough to warrant a new public API.\r\n\r\nHere\u0027s another use case:\r\n\r\nhttps://github.com/dotnet/runtime/issues/97737\r\n\r\nThere we need to get the `EnumMemberAttribute` on the Field of an Enum.",
                                           "updatedAt":  "2024-04-03T16:02:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FvFAb",
                                           "createdAt":  "2024-07-22T19:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e The specific case in EnumConverter wants the field values presented as FieldInfos. Fetching enum values as FieldInfos is quite inefficient, but it is required here because of pre-existing public surface.\r\n\r\nThe case in [EnumConverter](https://github.com/dotnet/runtime/blob/4d2d3d3ef5870483af9e821b3f315d1dcd8b1e7d/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/EnumConverter.cs#L271) doesn\u0027t directly expose the `FieldInfo`s but does check for `[Browseable]` attribute on the FieldInfo, so a new API is necessary here.\r\n\r\nHowever, the case in [EventSource](https://github.com/dotnet/runtime/blob/5c3bfeb8477b34a15ef851faa54cae1968ab4237/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L5538-L5544) could use `Enum.GetValuesAsUnderlyingType()` instead of FieldInfos as the FieldInfos used there are used temporarily + privately and do not check for the `[Browseable]` attribute.\r\n\r\nMoving to V10; priority appears low here (removing a couple cases of UnconditionalSuppressMessage).",
                                           "updatedAt":  "2024-07-22T19:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FvIQa",
                                           "createdAt":  "2024-07-22T20:05:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Here\u0027s one more hit on the same scenario:\r\n\r\nhttps://github.com/microsoft/OpenAPI.NET/pull/1717/files#diff-c59c9153ccf5e00142826d1c5e4d3d92470aac0bc740a302a23557432141277cR29\r\n\r\nGetting the `DisplayAttribute` of an enum field.",
                                           "updatedAt":  "2024-07-22T20:05:54Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Consider adding a new reflection API to get field values of an Enum",
        "labels":  [
                       "api-needs-work",
                       "area-System.Reflection",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100696",
        "createdAt":  "2024-04-05T17:28:21Z",
        "number":  100696,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:47:06Z",
        "body":  "Currently, the first invocation of a method via reflection goes via a native code path using the `RuntimeMethodHandle::InvokeMethod` and the following invocations use dynamically generated managed code. The usage of the native code path is there to improve startup time.\r\nHowever, we can mitigate the startup time impact by precompiling reflection invocation stubs to a few dozen most common signatures. Then we can get rid of the native code path completely.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhoFgEw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55nJUN",
                                           "createdAt":  "2024-04-05T17:28:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-05T17:28:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GgWAT",
                                           "createdAt":  "2024-07-29T18:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "@janvorli is this still planned for 9.0?",
                                           "updatedAt":  "2024-07-29T18:26:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Move reflection invocation in coreclr to fully managed way",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100748",
        "createdAt":  "2024-04-07T16:48:04Z",
        "number":  100748,
        "author":  "boxofyellow",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-11T11:24:33Z",
        "body":  "### Description\n\nIf you have an interface declared as\n```C#\npublic interface I1\n{\n    public void GenericFoo\u003cT\u003e();\n}\n```\nAnd a delegate declared as\n```C#\npublic delegate void InterfaceDelegate(I1 i1);\n```\n\nAttempting to create an instance of that delegate with this will throw a `NotSupportedException`\n```C#\nvar genericMethod = typeof(I1).GetMethod(nameof(I1.GenericFoo))!;\nvar method = genericMethod.MakeGenericMethod(typeof(int));\n//\n// This is where the NotSupportedException is throne\n//\nmethod.CreateDelegate\u003cInterfaceDelegate\u003e(); \n```\n\nHowever if you instead use a non-generic method (of corse `MakeGenericMethod` won\u0027t be needed) but it will be able to create an instance of the deligte.  Additionally if you define a new a class with a generic method that has the same signature, and a delegate for that class\u0027s method you will be able to use similar code create an instance of that delegate.\n\n### Reproduction Steps\n\nI tried this in dotnet 6.0.420 and 8.0.203\n\n```C#\npublic interface I1\n{\n    public void GenericFoo\u003cT\u003e();\n}\n\npublic delegate void InterfaceDelegate(I1 i1);\n\npublic class Program\n{\n    public static void Main()\n    {\n        var genericMethod = typeof(I1).GetMethod(nameof(I1.GenericFoo))!;\n        var method = genericMethod.MakeGenericMethod(typeof(int));\n        //\n        // This is where the NotSupportedException is throne\n        //\n        method.CreateDelegate\u003cInterfaceDelegate\u003e(); \n    }\n}\n```\n\n### Expected behavior\n\nThe above program can be run without an exception.\n\n### Actual behavior\n\n```\n~/Repos/MinRepro \u003e dotnet run\nUnhandled exception. System.NotSupportedException: Specified method is not supported.\n   at System.Delegate.BindToMethodInfo(Object target, IRuntimeMethodInfo method, RuntimeType methodType, DelegateBindingFlags flags)\n   at System.Delegate.CreateDelegateInternal(RuntimeType rtType, RuntimeMethodInfo rtMethod, Object firstArgument, DelegateBindingFlags flags)\n   at System.Reflection.RuntimeMethodInfo.CreateDelegateInternal(Type delegateType, Object firstArgument, DelegateBindingFlags bindingFlags)\n   at System.Reflection.MethodInfo.CreateDelegate[T]()\n   at Program.Main()\n~/Repos/MinRepro \u003e\n```\n\n### Regression?\n\nI have only tried 6.0 and 8.0 and the behavior seems to be the same in both.\n\n### Known Workarounds\n\nOne workaround I have found is to use a `DynamicMethod` to create a method to invoke the generic method.  It seems to work for very simple cases.  However implementing that for arbitrary method signatures might tricky.\n\n### Configuration\n\n- Which version of .NET is the code running on? **8.0**\n- What OS and version, and what distro if applicable? **Mac OS X 14.4**\n- What is the architecture (x64, x86, ARM, ARM64)? **x64**\n- Do you know whether it is specific to that configuration? **Not that I\u0027m aware of**\n- If you\u0027re using Blazor, which web browser(s) do you see this issue in? **N/A**\n\n```\n~/Repos/MinRepro \u003e dotnet --info\n.NET SDK:\n Version:           8.0.203\n Commit:            5e1ceea679\n Workload version:  8.0.200-manifests.4e94be9c\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  14.4\n OS Platform: Darwin\n RID:         osx-x64\n Base Path:   /usr/local/share/dotnet/sdk/8.0.203/\n\n.NET workloads installed:\nThere are no installed workloads to display.\n\nHost:\n  Version:      8.0.3\n  Architecture: x64\n  Commit:       9f4b1f5d66\n\n.NET SDKs installed:\n  6.0.420 [/usr/local/share/dotnet/sdk]\n  8.0.203 [/usr/local/share/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 6.0.28 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.28 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n\nOther architectures found:\n  None\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\n### Other information\n\n🤷 ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOegSqUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55rzsP",
                                           "createdAt":  "2024-04-07T16:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-07T16:48:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55r05U",
                                           "createdAt":  "2024-04-07T17:05:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "boxofyellow",
                                           "body":  "I created this that shows some of the more odd behavior I have been seeing\n- This problem only effects generic methods\n- This problem only effects methods declared on interfaces\n\nhttps://github.com/boxofyellow/DelegateForGenericMethodExample",
                                           "updatedAt":  "2024-04-07T17:05:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55r2ec",
                                           "createdAt":  "2024-04-07T17:29:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "The exception is probably coming from here:\r\nhttps://github.com/dotnet/runtime/blob/9b57a265c7efd3732b035bade005561a04767128/src/coreclr/vm/comdelegate.cpp#L870-L874",
                                           "updatedAt":  "2024-04-07T17:29:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5500sN",
                                           "createdAt":  "2024-04-08T23:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "boxofyellow",
                                           "body":  "I think you are right @MichalPetryka, I checked in my the demo app and it looks like this problems effects all virtual generic methods.",
                                           "updatedAt":  "2024-04-08T23:55:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5501N4",
                                           "createdAt":  "2024-04-08T23:56:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "@jkotas are GVM delegates supposed to not be implemented in CoreCLR?",
                                           "updatedAt":  "2024-04-08T23:56:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55-49f",
                                           "createdAt":  "2024-04-10T04:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Worth to note that this doesn\u0027t repro on NativeAOT. ",
                                           "updatedAt":  "2024-04-10T04:43:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56BKpT",
                                           "createdAt":  "2024-04-10T10:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e @jkotas are GVM delegates supposed to not be implemented in CoreCLR?\r\n\r\nMy guess is that it was not done because it is non-trivial to implement.\r\n\r\nIf we were to implement it, we should discuss the implementation approach first.",
                                           "updatedAt":  "2024-04-10T10:11:23Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Attempts to create delegates from generic methods declared on interfaces throws `NotSupportedException`",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101071",
        "createdAt":  "2024-04-15T18:19:03Z",
        "number":  101071,
        "author":  "RobSiklos",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T18:57:46Z",
        "body":  "### Description\r\n\r\nIf you have a class with:\r\n  a) a property which returns a value tuple; and\r\n  b) an indexer with a non-nullable reference type parameter\r\n\r\nthen when looking at the `NullabilityInfoContext` for the indexer parameter, it appears as `Unknown` instead of `NotNull`.\r\n\r\n### Reproduction Steps\r\n\r\nCreate a console app with the following code:\r\n\r\n```csharp\r\ninternal class Program\r\n{\r\n    public class Foo\r\n    {\r\n        public string this[string name] =\u003e throw new NotImplementedException();\r\n\r\n        // *** If you comment out this property, the problem goes away ***\r\n        public (int A, int B) ValueTupleProp { get; }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        // Get the PropertyInfo for the indexer.\r\n        PropertyInfo propInfo = typeof(Foo).GetProperty(\"Item\")!;\r\n\r\n        // Get the ParameterInfo for the indexer parameter (non-nullable string).\r\n        ParameterInfo paramInfo = propInfo.GetIndexParameters()[0];\r\n\r\n        var nullabilityInfo = new NullabilityInfoContext().Create(paramInfo);\r\n\r\n        Console.WriteLine($\"{nullabilityInfo.ReadState}, {nullabilityInfo.WriteState}\");\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `NullabilityInfoContext` properties report `NotNull`.\r\n\r\n### Actual behavior\r\n\r\nThe `NullabilityInfoContext` properties report `Unknown`. However, if you comment out the `ValueTupleProp` property, then it magically works as expected.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nTried running in .NET 6.0 and .NET 8.0 on Windows 11.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfwb1-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56o4Qg",
                                           "createdAt":  "2024-04-15T18:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-15T18:19:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_BvX4",
                                           "createdAt":  "2024-05-25T09:34:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "The reason is because `NullabilityInfoContext.Create` retrieves `NullableContextAttribute` from `ParameterInfo.Member`, which is the indexer property for indexed parameters rather than the getter method, where `NullableContext` is annotated in IL.\r\n\r\nAs for the `ValueTuple` padding, when there\u0027s only one property in a type, the nullability context is annotated on the type itself, therefore the member\u0027s annotation isn\u0027t involved.",
                                           "updatedAt":  "2024-05-25T09:37:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NullabilityInfoContext returns incorrect results for an indexer parameter if the class has a property with a value type return type.",
        "labels":  [
                       "bug",
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101320",
        "createdAt":  "2024-04-19T23:44:27Z",
        "number":  101320,
        "author":  "masonwheeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-24T18:29:08Z",
        "body":  "### Description\r\n\r\nSub-issue of #101298.\r\n\r\nThere is an error in this code, but the error message that gets raised in response is not only unhelpful, it\u0027s *wrong.*\r\n\r\n### Minimal reproduction steps\r\n\r\n```csharp\r\nvar sorter = typeof(ISortable).GetMethod(\"Sort\")!;\r\nsorter.Invoke(null, null);\r\n\r\npublic interface ISortable\r\n{\r\n    static abstract void Sort();\r\n}\r\n```\r\n\r\n### Original reproduction steps\r\n```\r\nusing System.Collections;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace Repro\r\n{\r\n\tpublic interface ISortable\u003cT\u003e\r\n\t{\r\n\t\tstatic abstract IEnumerable\u003cT\u003e Sort(IEnumerable\u003cT\u003e items);\r\n\t}\r\n\r\n\tinternal class Program\r\n\t{\r\n\t\tstatic void Main()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tTypeBuilder typeBuilder = BuildType();\r\n\r\n\t\t\t\tvar realType = typeBuilder.CreateType();\r\n\t\t\t\tvar arr = Array.CreateInstance(realType, 10);\r\n\t\t\t\tvar caster = typeof(Enumerable).GetMethod(\"Cast\")!.MakeGenericMethod(realType);\r\n\t\t\t\tvar typedArr = caster.Invoke(null, [arr]);\r\n\r\n\t\t\t\tvar sorter = typeof(ISortable\u003c\u003e).MakeGenericType(realType).GetMethod(\"Sort\")!;\r\n\t\t\t\t//var sorter = realType.GetMethod(\"Sort\")!;\r\n\t\t\t\tvar sorted = sorter.Invoke(null, [typedArr])!;\r\n\t\t\t\tvar result = ((IEnumerable)sorted).Cast\u003cobject\u003e().ToArray();\r\n\t\t\t} catch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.ToString());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static TypeBuilder BuildType()\r\n\t\t{\r\n\t\t\tAssemblyBuilder assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(new(\"MyAssembly\"), AssemblyBuilderAccess.RunAndCollect);\r\n\t\t\tModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(\"MyAssembly\");\r\n\t\t\tvar typeBuilder = moduleBuilder.DefineType(\"MyType\", TypeAttributes.Public, typeof(ValueType));\r\n\t\t\tvar intfType = typeof(ISortable\u003c\u003e).MakeGenericType(typeBuilder);\r\n\t\t\ttypeBuilder.AddInterfaceImplementation(intfType);\r\n\t\t\tvar field = typeBuilder.DefineField(\"field\", typeof(int), FieldAttributes.Public);\r\n\t\t\tvar extractor = typeBuilder.DefineMethod(\"GetField\", MethodAttributes.Private | MethodAttributes.Static, typeof(int), [typeBuilder]);\r\n\t\t\tvar il = extractor.GetILGenerator();\r\n\t\t\til.Emit(OpCodes.Ldarg_0);\r\n\t\t\til.Emit(OpCodes.Ldfld, field);\r\n\t\t\til.Emit(OpCodes.Ret);\r\n\r\n\t\t\tvar enumType = typeof(IEnumerable\u003c\u003e).MakeGenericType(typeBuilder);\r\n\t\t\tvar impl = typeBuilder.DefineMethod(\"Sort\", MethodAttributes.Public | MethodAttributes.Static, enumType, [enumType]);\r\n\t\t\til = impl.GetILGenerator();\r\n\t\t\til.Emit(OpCodes.Ldarg_0);\r\n\t\t\til.Emit(OpCodes.Ldnull);\t\r\n\t\t\til.Emit(OpCodes.Ldftn, extractor);\r\n\t\t\til.Emit(OpCodes.Newobj, TypeBuilder.GetConstructor(typeof(Func\u003c,\u003e).MakeGenericType(typeBuilder, typeof(int)), typeof(Func\u003c,\u003e).GetConstructor([typeof(object), typeof(nint)])!));\r\n\t\t\t\r\n\r\n\t\t\tvar orderFunc = typeof(Enumerable).GetMethods().Single(m =\u003e m.Name == \"OrderBy\" \u0026\u0026 m.GetParameters().Length == 2);\r\n\t\t\til.Emit(OpCodes.Call, orderFunc.MakeGenericMethod(typeBuilder, typeof(int))); // call Enumerable.OrderBy(enumerable, extractor)\r\n\t\t\til.Emit(OpCodes.Castclass, enumType);\r\n\t\t\til.Emit(OpCodes.Ret);\r\n\t\t\ttypeBuilder.DefineMethodOverride(impl, TypeBuilder.GetMethod(intfType, typeof(ISortable\u003c\u003e).GetMethod(\"Sort\")!));\r\n\t\t\treturn typeBuilder;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThis will error out on the call to `sorter.Invoke`.  A useful error message giving some clue as to the nature of the problem that would meaningfully aid in debugging it is expected.\r\n\r\n### Actual behavior\r\n\r\nThe error message provided is:\r\n```\r\n System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.BadImageFormatException: An attempt was made to load a program with an incorrect format. (0x8007000B)\r\n   at Repro.ISortable`1.Sort(IEnumerable`1 items)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n   --- End of inner exception stack trace ---\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at Repro.Program.Main() in C:\\Users\\mason\\source\\repos\\Repro2\\Repro2\\Program.cs:line 27\r\n```\r\n\r\nThis message is incorrect.  This is not \"a program with an incorrect format\" at all; the problem is that the code is attempting to invoke a method on an interface, rather than on the type that implements the interface.  It\u0027s an incorrect invocation of perfectly valid and correct code, as can be seen if the commented-out line is used instead of the incorrect one.\r\n\r\nThis is particularly problematic because it is misleading; it suggests to the developer that the place to look for the problem is in the refemit code, when the actual error is in the invocation.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET Core 8, Windows 10, x64.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe7bFDQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57Of_Y",
                                           "createdAt":  "2024-04-19T23:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection-emit\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-19T23:44:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57OgMc",
                                           "createdAt":  "2024-04-19T23:46:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "@danmoseley @jkotas Here\u0027s the first one for you guys to chew on.  I dropped this one first because it\u0027s especially bad, for the reasons detailed in \"Actual behavior\".",
                                           "updatedAt":  "2024-04-19T23:46:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57O5HK",
                                           "createdAt":  "2024-04-20T01:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-20T01:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57tsUN",
                                           "createdAt":  "2024-04-24T18:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "This error message is not helpful I agree, though not sure if it is possible to improve it, I hit some of such errors previously and comes from a native code that is not clear how the exceptions with the messages are thrown and it was better to use IL verification tool instead.\r\n\r\nAnyway leaving the issue open and marking the issue up for grabs if anyone want to give it try to improve the message",
                                           "updatedAt":  "2024-04-24T18:28:41Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Incorrect error message when trying to dynamically invoke a static abstract interface method",
        "labels":  [
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103258",
        "createdAt":  "2024-06-10T23:49:08Z",
        "number":  103258,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4wfpA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-06-20T04:05:57Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-06-20T04:05:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:50:33Z",
        "body":  "In ASP.NET Core, we have some code that determines if a Type is \"awaitable\". See\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/206b0aeca39d5eb12e55ce4e35ef4c8b9bc63c86/src/Shared/ObjectMethodExecutor/AwaitableInfo.cs#L46-L109\r\n\r\n(Note that this code has invalid UnconditionalSuppressMessage attributes. These suppressions will be removed in a forth-coming PR.)\r\n\r\nThere are places in ASP.NET Core that need to do special operations for \"awaitable\" Types. For example, wrapping the custom awaitable in an [ObjectMethodExecutorAwaitable](https://github.com/dotnet/aspnetcore/blob/206b0aeca39d5eb12e55ce4e35ef4c8b9bc63c86/src/Shared/ObjectMethodExecutor/ObjectMethodExecutorAwaitable.cs#L11-L16).\r\n\r\nHowever, in doing this, the code needs to do reflection on the Type in such a way that will break in trimmed apps. There doesn\u0027t appear to be a way to support custom awaitable Types at runtime. Instead, the only viable solution appears to be to use a source generator.\r\n\r\ncc @MichalStrehovsky @agocke @davidfowl @BrennanConroy ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOisUEiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AvHEp",
                                           "createdAt":  "2024-06-11T05:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The \"obvious\" fix for this would be to build a feature that looks at `GetMethod(\"SomeConstant\")` calls and keeps methods named `SomeConstant` on all the types. The obvious problem with that is both leaving too much size on the table and also:\r\n\r\n```csharp\r\n// This is fully trim safe, in a NuGet package A\r\nclass Foo\r\n{\r\n    [RequiresUnreferencedCode]\r\n    void SomeConstant()\r\n    {\r\n        Type.GetType(Console.ReadLine());\r\n    }\r\n}\r\n\r\n// This would be fully trim safe on its own, in NuGet package B\r\nclass Bar\r\n{\r\n    static void Do() =\u003e someUnknownType.GetMethod(\"SomeConstant\").Invoke();\r\n}\r\n\r\n// App now gets trimming warnings by using trim safe NuGet A and B because someType in B could be Foo.\r\n// Whose fault is it and how to fix? Both NuGet A and B are trim safe, but the app is not.\r\nnew Foo();\r\nBar.Do();\r\n```\r\n\r\nI can\u0027t think of a way to fix this using trimming/reflection facilities alone. Looks like we need an interface.",
                                           "updatedAt":  "2024-06-11T05:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FWFBT",
                                           "createdAt":  "2024-07-18T17:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqeuNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2024-07-18T19:48:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I moved this API suggestion out to 10.0 under the assumption that this is not blocking 9.0 scenarios.  Let me know if that\u0027s incorrect @eerhardt.",
                                           "updatedAt":  "2024-07-18T17:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FXMzi",
                                           "createdAt":  "2024-07-18T19:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e I moved this API suggestion out to 10.0 under the assumption that this is not blocking 9.0 scenarios. Let me know if that\u0027s incorrect @eerhardt.\r\n\r\nNo, this isn\u0027t blocking 9.0 scenarios. SignalR \"worked around\" this by adding a feature switch to only support `Task` related types, and not custom awaitables. This feature switch is used by default in trimmed and native AOT applications. See https://github.com/dotnet/aspnetcore/blob/7e99eea5f03a90686267f8cb5b6143d9b44e5ac4/src/SignalR/server/Core/src/Internal/DefaultHubDispatcher.cs#L35-L39 and https://github.com/dotnet/sdk/pull/41832.",
                                           "updatedAt":  "2024-07-18T19:52:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KxQSI",
                                           "createdAt":  "2024-09-04T07:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "2 years ago I created a proposal about adding an IAwaiter / IAwaitable interface.\r\nMight using an generic interface help instead of checking via Reflection for GetAwaiter?\r\n\r\nhttps://github.com/dotnet/runtime/issues/69183",
                                           "updatedAt":  "2024-09-04T07:54:44Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "How to tell if a Type is \"awaitable\" in native AOT / trimmed apps",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103716",
        "createdAt":  "2024-06-19T17:37:05Z",
        "number":  103716,
        "author":  "CastelloBrancoTecnologia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:46Z",
        "body":  "### Description\n\nPlease incorparate https://github.com/byme8/Apparatus.AOT.Reflection to AOT profile and enable dataannotation Attributes validation and Asp.Net Controlers in AOT scenarios\n\n### Reproduction Steps\n\nhttps://github.com/byme8/Apparatus.AOT.Reflection\n\n### Expected behavior\n\nCan use mvvm in aot profile and can use asp.net controlers in asp.net core aot \n\n### Actual behavior\n\nMvvm dont work in aot neither asp.net core controlers\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgq93FA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6B5To8",
                                           "createdAt":  "2024-06-19T18:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-19T18:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cr3cU",
                                           "createdAt":  "2024-06-26T20:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn0fqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CastelloBrancoTecnologia",
                                                                               "createdAt":  "2024-06-30T23:46:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Assigning myself to look at later",
                                           "updatedAt":  "2024-06-26T20:07:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add Aot annotations/reflection to AOT profile and enable dataannotation Attributes validation and Asp.Net Controlers in AOT scenarioslers in AOT scenarios",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104270",
        "createdAt":  "2024-07-02T00:22:42Z",
        "number":  104270,
        "author":  "LEI-Hongfaan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:50:35Z",
        "body":  "### Description\n\nThe reflection API is expected to box constant literal fields of type (U)IntPtr as their correct types. However, when using reflection to retrieve the value of these constants, they are being boxed as (U)Int32 instead of (U)IntPtr.\n\n### Reproduction Steps\n\n```CSharp\r\npublic enum E {\r\n\r\n    V = 42,\r\n}\r\n\r\ninternal class Program {\r\n\r\n    public const UIntPtr A = 3;\r\n\r\n    public const IntPtr B1 = -5;\r\n\r\n    public const E C = E.V;\r\n\r\n    public const long D = 1;\r\n\r\n    static void Main(string[] args) {\r\n        DumpConstLiteralByReflection(\"UIntPtr\", nameof(A));\r\n        DumpConstLiteralByReflection(\"IntPtr\", nameof(B1));\r\n        DumpConstLiteralByReflection(\"enum E\", nameof(C));\r\n        DumpConstLiteralByReflection(\"long\", nameof(D));\r\n\r\n        static void DumpConstLiteralByReflection(string label, string fieldName) {\r\n            Console.WriteLine($@\"{label}:\");\r\n            Console.WriteLine($@\"  Field type: {typeof(Program).GetField(fieldName)!.FieldType}\");\r\n            var o = typeof(Program).GetField(fieldName)!.GetValue(null)!;\r\n            Console.WriteLine($@\"  Value type: {o.GetType()}\");\r\n            Console.WriteLine($@\"  Value: {o:D}\");\r\n            Console.WriteLine();\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nUIntPtr:\r\n  Field type: System.UIntPtr\r\n  Value type: System.UIntPtr\r\n  Value: 3\r\n\r\nIntPtr:\r\n  Field type: System.IntPtr\r\n  Value type: System.IntPtr\r\n  Value: -5\r\n\r\nenum E:\r\n  Field type: E\r\n  Value type: E\r\n  Value: 42\r\n\r\nlong:\r\n  Field type: System.Int64\r\n  Value type: System.Int64\r\n  Value: 1\r\n```\n\n### Actual behavior\n\n```\r\nUIntPtr:\r\n  Field type: System.UIntPtr\r\n  Value type: System.UInt32\r\n  Value: 3\r\n\r\nIntPtr:\r\n  Field type: System.IntPtr\r\n  Value type: System.Int32\r\n  Value: -5\r\n\r\nenum E:\r\n  Field type: E\r\n  Value type: E\r\n  Value: 42\r\n\r\nlong:\r\n  Field type: System.Int64\r\n  Value type: System.Int64\r\n  Value: 1\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThis issue may present a theoretical security risk, although the practical threat is likely negligible.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhn8zCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DOIWO",
                                           "createdAt":  "2024-07-02T00:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-02T00:23:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DOQxI",
                                           "createdAt":  "2024-07-02T00:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Const `n[u]int` are limited to 32 bits in size, so a boxed constant `n[u]int` *must* be 32-bit, even on a 64-bit platform. The way to do such a thing is to actually box a `[u]int`.",
                                           "updatedAt":  "2024-07-02T00:39:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DOVAq",
                                           "createdAt":  "2024-07-02T00:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LEI-Hongfaan",
                                           "body":  "\u003e Const `n[u]int` are limited to 32 bits in size, so a boxed constant `n[u]int` _must_ be 32-bit, even on a 64-bit platform. The way to do such a thing is to actually box a `[u]int`.\r\n\u003e \r\n\u003e I also fail to see how this could be a security risk as it only affects constants.\r\n\r\nThe runtime is capable of loading an assembly containing a field defined as `.field public static literal native uint B2 = int32(0Xffffffff)`.  Moreover, the current behavior is counterintuitive and not what would be generally expected.",
                                           "updatedAt":  "2024-07-02T00:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DOYIC",
                                           "createdAt":  "2024-07-02T01:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LEI-Hongfaan",
                                           "body":  "I believe that the field initialization clause should merely serve as an expression of a literal value, rather than determining the field\u0027s type. To illustrate this with a thought experiment: even if the field initialization clause provided a string representing a C++ constant expression, and a tool calculated the field\u0027s value based on this C++ source code, I wouldn\u0027t find it strange.",
                                           "updatedAt":  "2024-07-02T01:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DPOX5",
                                           "createdAt":  "2024-07-02T03:30:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoB19A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-02T09:58:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Note: according to ECMA-335 §II.16.2 Field init metadata:\r\n\r\n\u003e Note that while both the type and the field initializer are stored in metadata there is no requirement that they match. (Any importing compiler is responsible for coercing the stored value to the target field type).\r\n\r\nThe original purpose was to allow conversion from underlying numeric types to enum types. However, it doesn\u0027t specify the desired behavior of other casts. It\u0027s not clear what\u0027s the expected behavior here.",
                                           "updatedAt":  "2024-07-02T03:30:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DPRNl",
                                           "createdAt":  "2024-07-02T03:38:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e The runtime is capable of loading an assembly containing a field defined as `.field public static literal native uint B2 = int32(0Xffffffff)`.\r\n\r\nAlso note that currently there\u0027s no compiler emitting this, and probably not understanding it.\r\nFor example, trying to use the constant in reference assembly.",
                                           "updatedAt":  "2024-07-02T03:38:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dj5fY",
                                           "createdAt":  "2024-07-03T20:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoTLjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-07-03T23:20:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified repo; for the first field, the IL is:\r\n```\r\n.field public static literal native uint A = uint32(0x00000003)\r\n```\r\n\r\nso for constants yes it does change to a int\\uint.\r\n\r\nAlso, for .NET Framework, this code fails compile with [CS0283 The type \u0027IntPtr\u0027 cannot be declared const](https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs0283?f1url=%3FappId%3Droslyn%26k%3Dk(CS0283)) where that link does not call out the native pointer types.\r\n\r\nThis is not a reflection issue; changing area to runtime, although this is likely an ECMA issue and where we supported this to compile, unlike .NET Framework.\r\n\r\ncc @jkotas @AaronRobinsonMSFT",
                                           "updatedAt":  "2024-07-03T20:38:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dj5wJ",
                                           "createdAt":  "2024-07-03T20:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-03T20:39:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dk63c",
                                           "createdAt":  "2024-07-03T23:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@steveharter Thanks for the investigation. I\u0027ve also confirmed your findings using a variety of tools. The Constants table (`0x0B`) does encode this as `uint32` so what we are returning is technically correct based on the data we have. We also have the actual field type (that is `native uint`) and can special case this behavior.\r\n\r\nI personally don\u0027t like inconsistencies in this domain, makes for too much confusion. The fact that .NET Framework doesn\u0027t support this scenario lowers the concern about making it do what the OP expects.\r\n\r\nThe code to update is below. We could make a check to see if the field is `native int` / `native uint` and then determine if the `CorElementType` disagrees. Many options here. @jkotas or @MichalStrehovsky Any opinions?\r\n\r\nhttps://github.com/dotnet/runtime/blob/8432f0d2fc8782d63ff2e234b44fc3585fd4921b/src/coreclr/System.Private.CoreLib/src/System/Reflection/MdConstant.cs#L108-L126",
                                           "updatedAt":  "2024-07-03T23:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DlHeh",
                                           "createdAt":  "2024-07-03T23:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "I don\u0027t think we should change anything in the runtime here.\r\n\r\nI took a slightly deeper look, and if you change the repro code to use `nint` and `nuint` for the const field types, and compile with a recent C# language version, you can compile and run the test case on the .NET Framework. So we have a legacy support burden that may be in place already. My advice is to write something into the reflection documentation about this weird case.",
                                           "updatedAt":  "2024-07-03T23:48:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DlSUp",
                                           "createdAt":  "2024-07-04T00:05:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODo3arw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-07-08T20:39:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Handling of constant and default values in reflection have seen number of fixes over the years in .NET Core. Some of the earlier fixes include:\r\n\r\n- https://github.com/dotnet/coreclr/commit/dbcfd2f9d18a595757194202de518b62ae9eb9f7\r\n- https://github.com/dotnet/coreclr/commit/6f0bb947138c6f75a1721fef7f6c54d4b01282dc\r\n- https://github.com/dotnet/runtime/commit/05b8bab6f00a292db68a4142c8b2d318ee247334\r\n\r\nWe have systemic problem where Roslyn encodes the constants and default values as it sees a fit, but reflection is not aware of all possible encodings produced by Roslyn and it may produce unexpected results for some of them.\r\n\r\nWe took number of fixes in this area and the corner case behavior deviated from .NET Framework, so I do not see a problem with fixing more corner cases. However, until somebody sits down and ensures that the reflection behavior is sensible for everything that\u0027s possible to write in C#, we are unlikely to be in 100% happy place.\r\n\r\nNote that there is a fresh from the press proposal to allow encoding even more types as constants in C#: https://github.com/dotnet/csharplang/pull/8257 . If this proposal is accepted, we will have a work to do here anyway.\r\n\r\n\u003e This is not a reflection issue\r\n\r\nNit: I see this as Roslyn and reflection interaction issue. Nothing in the runtime outside of reflection cares about encoding of C# constants.",
                                           "updatedAt":  "2024-07-04T00:05:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DlVHe",
                                           "createdAt":  "2024-07-04T00:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-04T00:09:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dmgis",
                                           "createdAt":  "2024-07-04T02:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Do note the **signed-ness mismatch** in original post: the literal field is declared as **native uint**, but the initializer is declared as **int32**.\r\n\r\nRecent roslyn and C# versions allow n(u)int constant being initialized with int32 of the same size:\r\n\r\n```\r\nconst nint a = -1;\r\n// compiles into\r\n.field private static literal native int a = int32(-1)\r\n```\r\n\r\nIn this case, both `Field.GetValue(null)` and `Field.GetRawConstantValue` return int32. I think the former should return nint instead. This also matches the behavior for enums.",
                                           "updatedAt":  "2024-07-04T02:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dmnso",
                                           "createdAt":  "2024-07-04T02:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "However, initializing nuint with **negative** int32 is a different case. `(nuint)-1` isn\u0027t really a constant value. For example, `unchecked((nuint)(-1)) % 7` is 1 on 64bit, but 3 on 32bit.\r\n\r\nI\u0027m also not sure whether roslyn can understand `.field private static literal native uint a = int32(-1)`, and how it handles constant propagation.",
                                           "updatedAt":  "2024-07-04T02:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EM1_d",
                                           "createdAt":  "2024-07-09T15:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Do note the signed-ness mismatch in original post: the literal field is declared as native uint, but the initializer is declared as int32.\r\n\r\n@huoyaoyuan I don\u0027t see this locally (compiler version: \u00274.11.0-2.24304.1`) - can you verify please?\r\n\r\n```\r\nC#\r\npublic const nuint A = 3; // or public const UIntPtr A = 3\r\n\r\nIL\r\n.field public static literal native uint A = uint32(0x00000003)\r\n```\r\n",
                                           "updatedAt":  "2024-07-09T15:01:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ENB2R",
                                           "createdAt":  "2024-07-09T15:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e @huoyaoyuan I don\u0027t see this locally (compiler version: \u00274.11.0-2.24304.1`) - can you verify please?\r\n\r\nThe original post is about the case that never emitted by current compiler, but allowed in runtime.\r\n\r\nPersonally I don\u0027t think the runtime should allow this case.\r\n\r\n------\r\n\r\nHowever, getting the value of `const nuint` gets an `uint` which is the underlying constant type. This differs from the behavior of enum.",
                                           "updatedAt":  "2024-07-09T15:23:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EZ3Vr",
                                           "createdAt":  "2024-07-10T20:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e The original post is about the case that never emitted by current compiler, but allowed in runtime.\r\n\r\nThe original post is about what is emitted by the compiler, unless I\u0027m missing something. For example, this:\r\n`const nint a = (nint)1;`\r\nis the same as\r\n`const nint a = 1;`\r\nwhen looking at the generated IL - both use Int32 for the value. The compiler never emits `nint` for the right-hand side \\ value.",
                                           "updatedAt":  "2024-07-10T20:23:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GfzMJ",
                                           "createdAt":  "2024-07-29T17:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Let me clarify this, with information from offline discussion.\r\n\r\nCurrently when the runtime encounters non-enum type in `literal`, it always returns the data type from IL in `FieldInfo.GetValue`, instead of signature type.\r\n\r\n---\r\n\r\n`.field public static literal native int A = int32(0x00000003)`\r\n\r\nThis is achievable in C# with `const nint a = (nint)3;`. The value of `FieldInfo.GetValue` differs from enum, for which it returns a boxed enum. `FieldInfo.GetRawConstantValue` should return the underlying literal value.\r\nThis should be incomplete behavior of reflection.\r\n\r\n---\r\n\r\n`.field public static literal native uint A = int32(-1)`\r\n\r\nThis is **not achievable in C#**. Currently runtime allows loading this, and getting the value of `A` will return `nuint.MaxValue`. This is indeed questionable, and I haven\u0027t tried how roslyn handles this in reference assembly. I think this should be rejected by runtime with `InvalidProgramException`.",
                                           "updatedAt":  "2024-07-30T03:38:04Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Reflection API Incorrectly Boxes (U)IntPtr Constants as (U)Int32",
        "labels":  [
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107205",
        "createdAt":  "2024-08-30T19:06:06Z",
        "number":  107205,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6rabQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-08-31T20:45:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-09-03T20:05:34Z",
        "body":  "### Background and motivation\r\n\r\nIn .NET, `IsFullyTrusted` has no meaning and always returns `true`.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.Reflection;\r\n\r\npublic abstract class Assembly\r\n{\r\n+   [Obsolete(\"Assembly.IsFullyTrusted has been deprecated and is not supported.\", DiagnosticId= /*SYSLIB...*/)]\r\n    public bool IsFullyTrusted { get; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar assembly = Assembly.Load(...);\r\nConsole.WriteLine(assembly.IsFullyTrusted); // always true\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOioJ0rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KaZTV",
                                           "createdAt":  "2024-08-30T19:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-30T19:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KgnSv",
                                           "createdAt":  "2024-09-02T04:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasGoulet73",
                                           "body":  "Would it make sense to also obsolete the properties `IsSecurityTransparent`, `IsSecuritySafeCritical` and `IsSecurityCritical` on the types `MethodBase`, `FieldInfo` and `Type` ? I believe they also have no meaning in .Net and always return constants.",
                                           "updatedAt":  "2024-09-02T04:46:26Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Obsolete `Assembly` property `IsFullyTrusted`",
        "labels":  [
                       "design-discussion",
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108619",
        "createdAt":  "2024-10-07T19:59:50Z",
        "number":  108619,
        "author":  "SingleAccretion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-04T22:28:50Z",
        "body":  "Reproduction: [godbolt](https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:\u00271\u0027,fontScale:14,fontUsePx:\u00270\u0027,j:1,lang:csharp,selection:(endColumn:1,endLineNumber:13,positionColumn:1,positionLineNumber:13,selectionStartColumn:1,selectionStartLineNumber:13,startColumn:1,startLineNumber:13),source:\u0027%23nullable+disable%0A%0Ausing+System%3B%0Ausing+System.Diagnostics%3B%0A%0Aclass+Program%0A%7B%0A++++static+void+Main()%0A++++%7B%0A++++++++OpenInstanceDelStruct%3Cint%3E+s%3B%0A++++++++var+delMethod+%3D+typeof(OpenInstanceDelStruct%3Cint%3E).GetMethod(%22InstanceMethod%22)%3B%0A++++++++var+openDel+%3D+delMethod.CreateDelegate%3COpenInstanceDel%3E()%3B%0A++++++++var+openDmi+%3D+DiagnosticMethodInfo.Create(openDel)%3B%0A++++++++Console.WriteLine($%22%7BopenDmi.DeclaringTypeName%7D::%7BopenDmi.Name%7D%22)%3B%0A++++%7D%0A%0A++++delegate+void+OpenInstanceDel(ref+OpenInstanceDelStruct%3Cint%3E+del)%3B%0A%0A++++struct+OpenInstanceDelStruct%3CT%3E%0A++++%7B%0A++++++++public+void+InstanceMethod()+%7B+%7D%0A++++%7D%0A%7D%0A\u0027),l:\u00275\u0027,n:\u00271\u0027,o:\u0027C%23+source+%231\u0027,t:\u00270\u0027)),k:33.86931715084305,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027),(g:!((h:compiler,i:(compiler:dotnettrunkcsharpcoreclr,filters:(b:\u00270\u0027,binary:\u00271\u0027,binaryObject:\u00271\u0027,commentOnly:\u00270\u0027,debugCalls:\u00271\u0027,demangle:\u00270\u0027,directives:\u00270\u0027,execute:\u00270\u0027,intel:\u00270\u0027,libraryCode:\u00270\u0027,trim:\u00271\u0027,verboseDemangling:\u00270\u0027),flagsViewOpen:\u00271\u0027,fontScale:14,fontUsePx:\u00270\u0027,j:3,lang:csharp,libs:!(),options:\u0027\u0027,overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:\u00275\u0027,n:\u00270\u0027,o:\u0027+.NET+CoreCLR+(main)+(Editor+%231)\u0027,t:\u00270\u0027)),k:32.79734951582363,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027),(g:!((h:output,i:(compilerName:\u0027x86-64+clang+(trunk)\u0027,editorid:1,fontScale:14,fontUsePx:\u00270\u0027,j:3,wrap:\u00271\u0027),l:\u00275\u0027,n:\u00270\u0027,o:\u0027Output+of+.NET+CoreCLR+(main)+(Compiler+%233)\u0027,t:\u00270\u0027)),k:33.33333333333333,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027)),l:\u00272\u0027,n:\u00270\u0027,o:\u0027\u0027,t:\u00270\u0027)),version:4).\r\n\r\nExpected behavior: things work.\r\nActual behavior:\r\n```\r\nUnhandled exception. System.ArgumentException: Type handle \u0027Program+OpenInstanceDelStruct`1[System.Int32]\u0026\u0027 and method handle with declaring type \u0027Program+OpenInstanceDelStruct`1[System.Int32]\u0027 are incompatible. Get RuntimeMethodHandle and declaring RuntimeTypeHandle off the same MethodBase.\r\n   at System.RuntimeType.GetMethodBase(RuntimeType reflectedType, RuntimeMethodHandleInternal methodHandle)\r\n   at System.Delegate.GetMethodImpl()\r\n   at System.Diagnostics.DiagnosticMethodInfo.Create(Delegate delegate)\r\n   at Program.Main() in /app/example.cs:line 11\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlh_8DA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6O-V0y",
                                           "createdAt":  "2024-10-08T03:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@MichalStrehovsky  would you mind take a look?",
                                           "updatedAt":  "2024-10-08T03:30:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6O--ji",
                                           "createdAt":  "2024-10-08T05:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This API doesn\u0027t do anything but call Delegate.Method property on CoreCLR. If it\u0027s throwing, it would be a reflection bug.",
                                           "updatedAt":  "2024-10-08T05:29:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQIfT",
                                           "createdAt":  "2024-10-09T20:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Here\u0027s a minimal repro:\n```\n...\n        MethodInfo delMethod = typeof(OpenInstanceDelStruct\u003cint\u003e).GetMethod(\"InstanceMethod\");\n        OpenInstanceDel openDel = delMethod.CreateDelegate\u003cOpenInstanceDel\u003e();\n        MethodInfo mi = openDel.Method;\n....\n\n    delegate void OpenInstanceDel(ref OpenInstanceDelStruct\u003cint\u003e del);\n\n    struct OpenInstanceDelStruct\u003cT\u003e\n    {\n        public void InstanceMethod() { }\n    }\n}\n```\nwhich also repros in v8 and v7.",
                                           "updatedAt":  "2024-10-09T20:28:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQJ4O",
                                           "createdAt":  "2024-10-09T20:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I moved this to Future; [SingleAccretion](https://github.com/SingleAccretion) is there priority for addressing this?",
                                           "updatedAt":  "2024-10-09T20:31:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PQK0W",
                                           "createdAt":  "2024-10-09T20:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e is there priority for addressing this?\n\nNothing in particular. I have just noticed this bug while working on stack trace support downstream.",
                                           "updatedAt":  "2024-10-09T20:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P6gxB",
                                           "createdAt":  "2024-10-15T16:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Note that changing:\n```cs\nMethodInfo mi = openDel.Method;\n```\nto\n```cs\nMethodInfo mi = openDel.GetType().GetMethod(\"Invoke\")\n```\nworks.",
                                           "updatedAt":  "2024-10-15T16:24:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P_jul",
                                           "createdAt":  "2024-10-16T06:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Note that changing:\n\u003e \n\u003e MethodInfo mi = openDel.Method;\n\u003e to\n\u003e \n\u003e MethodInfo mi = openDel.GetType().GetMethod(\"Invoke\")\n\u003e works.\n\nThat returns a different `MethodInfo` - not the method the delegate points to. Not many scenarios can use it as a workaround since name, owning type and even parameter types are going to be all different. The only thing that\u0027s reliably same is parameter count.",
                                           "updatedAt":  "2024-10-16T06:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WH_wM",
                                           "createdAt":  "2024-12-04T22:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atykhyy",
                                           "body":  "This problem occurs only in open delegates to methods on generic structs, but not on non-generic structs or generic reference types [#110357]. The problematic delegate can be invoked given suitable arguments despite its `Method` property throwing an exception.",
                                           "updatedAt":  "2024-12-04T22:20:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "`Delegate.Method` doesn\u0027t work with open instance delegates over methods on a generic type in CoreCLR",
        "labels":  [
                       "bug",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108919",
        "createdAt":  "2024-10-16T07:41:47Z",
        "number":  108919,
        "author":  "sschultze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:48Z",
        "body":  "### Description\n\nIn an application under the configuration described below, one log shows that a `TypeInitializationException` was thrown when the type initializer for `CDSCollectionETWBCLProvider` ran (because of a `NullReferenceException` in `InvokeStub_EventSourceAttribute.set_Guid`). It was thrown when the ASP.NET Core app is shutting down (`ApplicationLifetime.StopApplication`). As it occurs in the type initializer of `CDSCollectionETWBCLProvider`, I\u0027m filing it here in the .NET runtime repository.\n\n### Reproduction Steps\n\nI am unfortunately not able to reproduce the error. But maybe looking at the stack trace in combination with the source code leads to some realization.\n\n### Expected behavior\n\nThe type initializer for `CDSCollectionETWBCLProvider` should not throw an exception.\n\n### Actual behavior\n\nThe type initializer for `CDSCollectionETWBCLProvider` threw an exception.\n\n```\nMicrosoft.Extensions.Hosting.Internal.ApplicationLifetime An error occurred stopping the application\nSystem.AggregateException: One or more errors occurred. (The type initializer for \u0027System.Collections.Concurrent.CDSCollectionETWBCLProvider\u0027 threw an exception.)\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\n   at Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication()\nSystem.TypeInitializationException: The type initializer for \u0027System.Collections.Concurrent.CDSCollectionETWBCLProvider\u0027 threw an exception.\n   at System.Collections.Concurrent.ConcurrentDictionary`2.AcquireAllLocks(Int32\u0026 locksAcquired)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Count()\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.CloseConnections()\n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n--- End of stack trace from previous location ---\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\nSystem.Reflection.CustomAttributeFormatException: \u0027Guid\u0027 property specified was not found.\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u0026 attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder`1 derivedAttributes)\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType)\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeType type, RuntimeType caType, Boolean inherit)\n   at System.Attribute.GetCustomAttributes(MemberInfo element, Type attributeType, Boolean inherit)\n   at System.Attribute.GetCustomAttribute(MemberInfo element, Type attributeType, Boolean inherit)\n   at System.Diagnostics.Tracing.EventSource.GetCustomAttributeHelper(MemberInfo member, Type attributeType, EventManifestOptions flags)\n   at System.Diagnostics.Tracing.EventSource.GetName(Type eventSourceType, EventManifestOptions flags)\n   at System.Diagnostics.Tracing.EventSource..ctor(EventSourceSettings settings, String[] traits)\n   at System.Collections.Concurrent.CDSCollectionETWBCLProvider..cctor()\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u0026 attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder`1 derivedAttributes)\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at InvokeStub_EventSourceAttribute.set_Guid(Object, Object, IntPtr*)\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET 8.0.8\n- Docker parent image `mcr.microsoft.com/dotnet/aspnet:8.0.8`\n- The `linux/amd64` version of the image ran under Docker Desktop on macOS 15.0.1 (Apple M2 Pro), Rosetta enabled\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk6sFrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QDmge",
                                           "createdAt":  "2024-10-16T13:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-16T13:35:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q2ZtG",
                                           "createdAt":  "2024-10-22T20:19:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "The CDSCollectionETWBCLProvider does have a Guid property contrary to the exception `System.Reflection.CustomAttributeFormatException: \u0027Guid\u0027 property specified was not found.`\nhttps://github.com/dotnet/runtime/blob/10ee2b11e94acf23fe17fe36d2dbc2db588f06ec/src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/CDSCollectionETWBCLProvider.cs#L21-L24\nmaybe this has something to do with reflection?",
                                           "updatedAt":  "2024-10-22T20:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q2bMW",
                                           "createdAt":  "2024-10-22T20:22:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tarekgh, @tommcdon, @pjanotti\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-22T20:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q2bMr",
                                           "createdAt":  "2024-10-22T20:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-22T20:22:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R4sfY",
                                           "createdAt":  "2024-10-30T15:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@ericstj Have you seen something like this before?",
                                           "updatedAt":  "2024-10-30T15:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R7vPD",
                                           "createdAt":  "2024-10-30T20:52:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I think the _real_ exception of interest is this:\n```\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u0026 attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder`1 derivedAttributes)\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at InvokeStub_EventSourceAttribute.set_Guid(Object, Object, IntPtr*)\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n```\n\n@steveharter does this look like it\u0027s the reflection invoke stub throwing?  ",
                                           "updatedAt":  "2024-10-30T20:52:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S9x49",
                                           "createdAt":  "2024-11-08T20:09:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003eI think the real exception of interest is this:\n\n\u003eSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u0026 attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder`1 derivedAttributes)\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at InvokeStub_EventSourceAttribute.set_Guid(Object, Object, IntPtr*)\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\n@steveharter does this look like it\u0027s the reflection invoke stub throwing?\n\nYes the exception is coming from the generated `EventSourceAttribute.Guid` stub or a call from that into the runtime. \n\nHowever, I\u0027m going to move this to Mono based on:\n\u003e The linux/amd64 version of the image ran under Docker Desktop on macOS 15.0.1 (Apple M2 Pro), Rosetta enabled\n\nOne possibly related issue: https://github.com/dotnet/runtime/issues/90374\n\n\n\n\n",
                                           "updatedAt":  "2024-11-08T20:10:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TetEu",
                                           "createdAt":  "2024-11-13T17:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T17:35:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TeyX_",
                                           "createdAt":  "2024-11-13T17:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@sschultze how often have you encountered this issue?\n\nDoes it have any bad side effects or cause other issues?\n\nThanks\n",
                                           "updatedAt":  "2024-11-13T17:44:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tez7n",
                                           "createdAt":  "2024-11-13T17:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Not a mono issue; repro is on linux/amd64",
                                           "updatedAt":  "2024-11-13T17:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TqwWu",
                                           "createdAt":  "2024-11-14T21:37:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sschultze",
                                           "body":  "@steveharter I have encountered this issue only once. As it happened when stopping the application, it didn\u0027t have any bad side effects. (Or so it seems.)",
                                           "updatedAt":  "2024-11-14T21:37:03Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Type initializer for CDSCollectionETWBCLProvider threw exception - NullReferenceException in InvokeStub_EventSourceAttribute.set_Guid",
        "labels":  [
                       "bug",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110412",
        "createdAt":  "2024-12-04T19:33:32Z",
        "number":  110412,
        "author":  "SENya1990",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:53:06Z",
        "body":  "### Description\n\nHi .Net team,\n\nI have recently encountered a strange behavior of the derived attributes which looks like a bug to me. \nOn an attempt to retrieve a derived attribute that overrides just a property getter of the base attribute the system throws the `System.Reflection.CustomAttributeFormatException` exception (see details in the Actual Behavior section):\n\nI didn\u0027t manage to find a similar bug, and the same time there is no compiler error about it. At the same time this looks like a bug to me. I provided more reasons in the expected behavior.\n\nIf there already exists such bug, or this is not a bug but a designed behavior, then I ask sorry for the disturbance in advance. \nIf this is not a proper place to report this issue, please direct me to a proper one. \n\n### Reproduction Steps\n\nHere is the minimal code snippet:\n```cs\nusing System;\n\nnamespace Test\n{\n\tpublic class BaseAttribute : Attribute\n\t{\n\t\tpublic virtual int P\n                {\n\t             get;\n\t             set;\n                }\n\t}\n\n\tpublic class DerivedAttribute : BaseAttribute\n\t{\n\t\tpublic override int P\n\t\t{\n\t\t\tget =\u003e 1;\n\t\t}\n\t}\n\n\t[Derived(P = 2)]\n\tpublic class Foo\n\t{ }\n\n\tpublic class Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar attr = typeof(Foo).GetCustomAttributes(inherit: true);   // this line throws the exception\n\n\t\t\tConsole.WriteLine(attr.Length);\n\t\t\tConsole.ReadLine();\n\t\t}\n\t}\n}\n```\n\nNotice, that if I add an empty setter to the overridden property, then the code works as expected without an error:\n```cs\npublic class DerivedAttribute : BaseAttribute\n{\n\tpublic override int P\n\t{\n\t\tget =\u003e 1;\n                set { }\n\t}\n}\n```\n\n\n### Expected behavior\n\nThe code works without throwing an error. \n\nAt first I thought that this is a problem of the C# compiler, that it doesn\u0027t display an error for this case. But for C# compiler it is perfectly fine to have only one property accessor overridden. This is discussed in this SO question: https://stackoverflow.com/questions/64595478/why-is-there-no-compiler-error-when-setting-an-overridden-property-that-is-read\n\nMoreover, the following code works fine:\n```cs\nusing System;\n\nnamespace Test\n{\n\tpublic class BaseAttribute : Attribute\n\t{\n\t\tpublic virtual int P\n\t\t{\n\t\t\tget;\n\t\t\tset;\n\t\t}\n\t}\n\tpublic class DerivedAttribute : BaseAttribute\n\t{\n\t\tpublic override int P\n\t\t{\n\t\t\tget =\u003e 1;\n\t\t}\n\t}\n\n\t[Derived(P = 2)]\n\tpublic class Foo\n\t{ }\n\n\tpublic class Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\tvar attr = new DerivedAttribute();\n\t\t\tattr.P = 1;\n\n\t\t\tConsole.WriteLine(attr.P);\n\t\t\tConsole.ReadLine();\n\t\t}\n\t}\n}\n```\nSo, my guess is that something is wrong with attributes.\n\n\n### Actual behavior\n\nThe line `var attr = typeof(Foo).GetCustomAttributes(inherit: true); ` throws the following exception:\n```\nSystem.Reflection.CustomAttributeFormatException\n  HResult=0x80131605\n  Message=\u0027P\u0027 property specified was not found.\n  Source=System.Private.CoreLib\n  StackTrace:\n   at System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder`1\u0026 attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder`1 derivedAttributes) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs:line 1272\n\n  This exception was originally thrown at this call stack:\n    System.Reflection.CustomAttribute.AddCustomAttributes(ref System.RuntimeType.ListBuilder\u003cobject\u003e, System.Reflection.RuntimeModule, int, System.RuntimeType, bool, System.RuntimeType.ListBuilder\u003cobject\u003e) in RuntimeCustomAttributeData.cs\n\nInner Exception 1:\nNullReferenceException: Object reference not set to an instance of an object.\n```\n\n### Regression?\n\nOn my machine this issue reproduces both for .Net Framework 4.8.1 and .Net 8.\n\n### Known Workarounds\n\nJust add an empty property setter to the overridden property.\n\n### Configuration\n\nConfiguration:\n.Net Framework 4.8.1 or .Net 8.\n\nOS: Windows 10 Pro 64 bit, x64-based processor, Version 22H2, OS build 19045.5131\nArchitecture: AnyCpu\n\nI don\u0027t know for sure, if this is specific to this configuration, but it doesn\u0027t look like this due to NRE thrown in the .Net code which can be debugged.\nThis isn\u0027t related to Blazor, just a simple console app.\n\n\n### Other information\n\nSimple debug shows that the real error is an NRE thrown in the `System.Reflection.CustomAttribute` type in the `AddCustomAttributes` method in the following line:\nhttps://github.com/dotnet/runtime/blob/11031c4171b5a46eedcae777fe805e7d29a94411/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs#L1583\n\nThe NRE is caused because `setMethod` is not checked for null before the access to its `IsPublic` property. \nMy guess is that the previous line ` RuntimeMethodInfo setMethod = property.GetSetMethod(true)!;` obtains the property setter method only from the current type. \n\nI believe, that a fix that just checks the setMethod for null and skips the property wouldn\u0027t make a good fix. In my example, the property has a public setter in a base type. Nothing prevents the property value from being set when the attribute is applied. In my opinion, the proper fix should support my scenario by making a lookup for the setter in the type hierarchy of the type containing the property. \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlkafkQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6WG6bl",
                                           "createdAt":  "2024-12-04T19:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-04T19:34:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WRptN",
                                           "createdAt":  "2024-12-05T19:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified; the LOC does not check to see if the setter is null:\nhttps://github.com/dotnet/runtime/blob/9970e70bb49f4e089a17dcea92882c21834ff4b1/src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs#L1583",
                                           "updatedAt":  "2024-12-05T19:16:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WRp-R",
                                           "createdAt":  "2024-12-05T19:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Not a regression.",
                                           "updatedAt":  "2024-12-05T19:17:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Reflection.CustomAttributeFormatException thrown on a retrieval of derived attribute with overridden property getter",
        "labels":  [
                       "bug",
                       "area-System.Reflection",
                       "help wanted",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112114",
        "createdAt":  "2025-02-04T03:30:54Z",
        "number":  112114,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-valA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2025-02-04T03:43:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2025-02-04T06:19:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:53:12Z",
        "body":  "This falls into the same category as dangers of private reflection that are not particularly well documented either.\r\n\r\n_Originally posted by @jkotas in https://github.com/dotnet/runtime/pull/111584#discussion_r1936044553_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnOyDAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6c7Gsp",
                                           "createdAt":  "2025-02-04T03:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-04T03:31:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c7IMD",
                                           "createdAt":  "2025-02-04T03:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have said many times that private reflection against internals of core libraries is not supported. We should document this in official docs in an easy to discover location.\n\nOnce created, this documentation should be linked from the documentation of the private reflection entrypoints such as `BindingFlags.NonPublic` and `UnsafeAccessorAttribute`.",
                                           "updatedAt":  "2025-02-04T03:38:28Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Document dangers and support policy for private reflection",
        "labels":  [
                       "documentation",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112994",
        "createdAt":  "2025-02-27T18:55:40Z",
        "number":  112994,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCKCyg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2025-02-27T19:04:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SystematicChaos012",
                                            "createdAt":  "2025-02-28T08:21:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2025-03-01T12:37:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2025-03-26T16:16:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "istipeti",
                                            "createdAt":  "2025-05-08T08:34:54Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-01T18:11:30Z",
        "body":  "This covers work items to address various reflection invoke benefits:\n- Faster startup and warmup of applications by avoiding IL Emit for common signatures.\n- Removal of C++ code from the runtime that handles the \"interpreted invoke\".\n\nSee the PR https://github.com/dotnet/runtime/pull/109901 for a partial reference implementation.\n\n- [x] Modify or remove existing tests that are too dependent on the current implementation\u0027s idiosyncrasies. See https://github.com/dotnet/runtime/pull/113000\n- [x] Collect statistics from applications to determine when reflection is used during startup so we know what signatures to address ahead-of-time. Currently, only a simple \"hello world\" console application has been used. Done - see \"Signatures to pre-generate\" below.\n- [x] Support the ExplicitThis calling convention for use with instance-based function pointers. See https://github.com/dotnet/runtime/pull/113666\n- [x] Add internal runtime support for calling a function pointer on an instance. Currently, function pointers in C# can only be called on static methods. This is key to share signatures across compatible method signatures. See https://github.com/dotnet/runtime/pull/114495\n- [ ] Add the main feature leveraging the above.\n- [ ] For CoreClr, remove the C++ \"interpreted invoke\" code from the runtime along with the `ForceEmitInvoke` and `ForceInterpretedInvoke` feature switches.\n- [ ] Possibly add support for calli on Mono; if so, we need to move code to the shared location.\n- [ ] Evaluate whether we want to cache previously generated IL for signatures not handled during startup, and\\or whether we need to provide per-assembly code generation to handle cases where the signatures can\u0027t exist in CoreLib, such as a signature that contains a value type declared in an assembly not reachable from CoreLib.\n- [ ] Consider removing the Emit functionality or portions of it for DependencyInjection and System.Text.Json.\n\n\u003cdetails\u003e\n  \u003csummary\u003eSignatures to pre-generate:\u003c/summary\u003e\n  Applications used: a console app and WPF app (just `EventAttribute` properties), and Telerik AspNetCoreApp (200+ dynamic methods; mostly constructors)\n\n```\nvoid ()\nvoid (object, object)\nvoid (object, object, object, object)\nvoid (object, object, object, object, object)\nvoid (object, object, object, object, object, object)\nvoid (object, object, object, object, object, object, object)\nvoid (Guid)\nvoid (byte)\nvoid (string)\nvoid (bool)\nvoid (ushort)\nvoid (long)\nvoid (IEnumerable\u003cobject\u003e, IEnumerable\u003cobject\u003e)\n```\n\nFrom the list above, we will add getters and setters for all primitive types. All reference types will be treated as `object` and enums will be treated as their underlying type. Full list:\n\n```\n// One-arg methods which includes setters:\nvoid (object)\nvoid (bool)\nvoid (byte)\nvoid (char)\nvoid (decimal)\nvoid (double)\nvoid (float)\nvoid (Guid)\nvoid (int)\nvoid (long)\nvoid (sbyte)\nvoid (short)\nvoid (string)\nvoid (uint)\nvoid (ulong)\nvoid (ushort)\n\n// Zero-arg methods which includes getters:\nvoid ()\nobject ()\nbool ()\nbyte ()\nchar ()\ndecimal ()\ndouble ()\nfloat ()\nGuid ()\nint ()\nlong ()\nsbyte ()\nshort ()\nuint ()\nulong ()\nushort ()\n\n// Remaining signatures found in test applications:\nvoid (object, object)\nvoid (object, object, object)\nvoid (object, object, object, object)\nvoid (object, object, object, object, object)\nvoid (object, object, object, object, object, object)\nvoid (object, object, object, object, object, object, object)\nvoid (IEnumerable\u003cobject\u003e)\nvoid (IEnumerable\u003cobject\u003e, IEnumerable\u003cobject\u003e)\n```\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoExHmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gRGUq",
                                           "createdAt":  "2025-02-27T18:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-27T18:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gTEeb",
                                           "createdAt":  "2025-02-27T23:41:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e * Add internal runtime support for calling a function pointer on an instance. Currently, function pointers in C# can only be called on static methods. This is key to share signatures across compatible method signatures.\n\nSounds like great motivation to push C# to add the support! https://github.com/dotnet/csharplang/discussions/7331",
                                           "updatedAt":  "2025-02-27T23:41:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Tracking issue for reflection invoke perf improvements",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "tracking"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113353",
        "createdAt":  "2025-03-11T01:04:52Z",
        "number":  113353,
        "author":  "reflectronic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:53:14Z",
        "body":  "When `MetadataLoadContext` is resolving an assembly and its `MetadataAssemblyResolver` returns null, it throws an exception with this message:\nhttps://github.com/dotnet/runtime/blob/a49ed697037bad503e32daa23f4339ebfb8962ea/src/libraries/System.Reflection.MetadataLoadContext/src/Resources/Strings.resx#L181\nThe message suggests that \u0027pre-loading\u0027 the assembly with `LoadFromAssemblyPath` will populate the MetadataLoadContext\u0027s assembly binding cache.\n\nThe API documentation for the `LoadFrom` methods also suggests this is the case:\n\u003e [MetadataLoadContext.LoadFromAssemblyPath](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.metadataloadcontext.loadfromassemblypath?view=net-9.0-pp)\n\u003e Loads an assembly from a specific path on the disk and binds its assembly name to it in the MetadataLoadContext.\n\nBut these methods do not do this:\nhttps://github.com/dotnet/runtime/blob/a49ed697037bad503e32daa23f4339ebfb8962ea/src/libraries/System.Reflection.MetadataLoadContext/src/System/Reflection/MetadataLoadContext.Loading.cs#L47-L49\n\nIt looks like this behavior was changed, but the documentation and exception message was not updated: https://github.com/dotnet/runtime/commit/2ef74f6be9ac1a70902facdc4047c49682e75005#diff-7a38392b94b0c17ee62172e5b642b77f0b3a1bb8d79a6488d24f1729345c46fbL49\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOor4zYw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hqMeZ",
                                           "createdAt":  "2025-03-11T01:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-11T01:05:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ivjNj",
                                           "createdAt":  "2025-03-17T17:44:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@reflectronic would you like to propose an update to the documentation?",
                                           "updatedAt":  "2025-03-17T17:44:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "MetadataLoadContext assembly binding behavior is documented incorrectly",
        "labels":  [
                       "documentation",
                       "area-System.Reflection",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114280",
        "createdAt":  "2025-04-04T18:49:08Z",
        "number":  114280,
        "author":  "jairbubbles",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA60bQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Onduril",
                                            "createdAt":  "2025-04-07T08:13:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:56:37Z",
        "body":  "### Description\n\nWhen migrating some code from `net472` to `net8.0` I noticed a huge performance regression with some code dealing with caching `MemberInfo` attributes in a `ConcurrentDictionary`.\n\nI investigated the issue and narrowed it down to a simple sample:\n\n```csharp\nHashSet\u003cPropertyInfo\u003e propertyInfos = new();\nforeach (PropertyInfo property in GetManyProperties())\n{\n     propertyInfos.Add(property);\n}\n```\n\nIn my benchmark I\u0027m testing with the Graph API assembly. It has a lot of types (120k properties in total!), which is perfect to make the issue more visible, in this condition I get:\n\n```csharp\n| Method                      | Job                  | Runtime              | Mean       | Error      | StdDev     | Ratio | RatioSD |\n|---------------------------- |--------------------- |--------------------- |-----------:|-----------:|-----------:|------:|--------:|\n| AddToHashSet_WithBaseHash   | .NET 8.0             | .NET 8.0             | 637.151 ms | 12.3232 ms | 15.5849 ms |  1.00 |    0.03 |\n| AddToHashSet_WithBaseHash   | .NET Framework 4.7.2 | .NET Framework 4.7.2 |   7.236 ms |  0.1813 ms |  0.5287 ms |  1.01 |    0.10 |\n```\n\nWhen profiling I noticed that we were spending a lot of time in `Equals` as many elements were put in the same bucket. Those elements were all the properties which are shared by inheritance. They shared the same hash code but `Equals` would always return false.\n\nI believe the issue was introduced by #78249 where `ReflectedType` was added as a criteria for equality but not the hash code computation.\n\n### Workaround\n\nAs a workaround I\u0027m using a custom `EqualityComparer` which also uses the actual type (not only the declaring type)\n\n```csharp\npublic int GetHashCode(PropertyInfo obj)\n{\n  // Take in account the ReflectedType as it\u0027s also used in RuntimePropertyInfo.Equals\n  return HashCode.Combine(obj.MetadataToken, obj.DeclaringType!.GetHashCode(), obj.ReflectedType!.GetHashCode());\n}\n```\n\nIn those conditions .NET 8 becomes faster:\n\n| Method                      | Job                  | Runtime              | Mean       | Error      | StdDev     | Ratio | RatioSD |\n|---------------------------- |--------------------- |--------------------- |-----------:|-----------:|-----------:|------:|--------:|\n| AddToHashSet_WithCustomHash | .NET 8.0             | .NET 8.0             |   9.529 ms |  0.1877 ms |  0.3876 ms |  0.01 |    0.00 |\n| AddToHashSet_WithCustomHash | .NET Framework 4.7.2 | .NET Framework 4.7.2 |  12.815 ms |  0.2563 ms |  0.4281 ms |  1.78 |    0.14 |\n\n### Sample\n\nHere is the full benchmark project:  [Benchmark.zip](https://github.com/user-attachments/files/19608996/Benchmark.zip)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpzHsNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lri0-",
                                           "createdAt":  "2025-04-04T20:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-04T20:16:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nEmjG",
                                           "createdAt":  "2025-04-14T21:06:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified regression.\n\nNote the repro has ~120K properties in the same hashset since it combines all properties from all types. This is not a common scenario.\n\nIf we fix this, we should also add benchmarks.",
                                           "updatedAt":  "2025-04-14T21:06:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nJ0UU",
                                           "createdAt":  "2025-04-15T09:09:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jairbubbles",
                                           "body":  "Yes indeed, the scenario was a bit exagerated but I found the issue in a real world application. Clearly we can challenge the code but I feel like we should at least be on par with .NET Framework performances.\n\n\u003e If we fix this, we should also add benchmarks.\n\nI can take a look but I will need some guidance for those.\n\n",
                                           "updatedAt":  "2025-04-15T09:09:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nMew0",
                                           "createdAt":  "2025-04-15T13:30:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Benchmark docs are at https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md.\n\nIt\u0027s nice to get the benchmarks in before the code changes so our CI system has a chance to record the initial status.\n\nAlso we should apply the GetHashCode change to all info types: PropertyInfo, FieldInfo, MethodInfo, EventInfo.",
                                           "updatedAt":  "2025-04-15T13:30:11Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "RuntimePropertyInfo performance regression when used in a hash table",
        "labels":  [
                       "area-System.Reflection",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116243",
        "createdAt":  "2025-06-03T04:14:47Z",
        "number":  116243,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:17:06Z",
        "body":  "In working on https://github.com/dotnet/runtime/pull/116080 I noticed that nativeaot Corelib has a copy of the same code that\u0027s in MetadataLoadContext\n\nhttps://github.com/dotnet/runtime/blob/fcd197c9a4ea9def2049fdb302eede3e044fba5f/src/coreclr/nativeaot/System.Private.CoreLib/src/System.Private.CoreLib.csproj#L380-L393\n\nhttps://github.com/dotnet/runtime/blob/fcd197c9a4ea9def2049fdb302eede3e044fba5f/src/libraries/System.Reflection.MetadataLoadContext/src/System.Reflection.MetadataLoadContext.csproj#L28-L41\n\nWe should diff this to see if it\u0027s diverged and reconcile if it has, then deduplicate and place in common.\n\ncc @jkotas @MichalStrehovsky ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrwN-mg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6u11gt",
                                           "createdAt":  "2025-06-03T04:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T04:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u114Q",
                                           "createdAt":  "2025-06-03T04:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T04:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u12AI",
                                           "createdAt":  "2025-06-03T04:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T04:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u12M2",
                                           "createdAt":  "2025-06-03T04:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This is System.Reflection. MetadataLoadContext forked the native AOT reflection stack, it should not be the responsibility of the AOT team to reconcile.",
                                           "updatedAt":  "2025-06-03T04:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6u2mxE",
                                           "createdAt":  "2025-06-03T05:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Also, there are two more logical copies of this code: in regular CoreCLR reflection implementation and Mono reflection implementation. Ideally, all these 4 copies would be 80+% shared code.",
                                           "updatedAt":  "2025-06-03T06:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vADK8",
                                           "createdAt":  "2025-06-03T15:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Fair enough.  Originally I assigned to nativeaot because it introduced the duplication when it was introduced 3 years after MLC. I see now that this came from Ati\u0027s work in https://github.com/dotnet/corert/commits/master/src/System.Private.Reflection.Core/src/System/Reflection/Runtime/BindingFlagSupport.  I guess this nativeaot code had already diverged when it was brought over so it wasn\u0027t deduplicated at that time.\n\nHonestly I don\u0027t care who does it, I was just trying to guess at who would care the most about it.  This seemed like low-hanging fruit since the code is already very similar.\n\n@jkotas - there\u0027s a pretty significant layering difference between CoreCLR reflection right now - that\u0027s built at a different layer of metadata API.  What\u0027s your thinking about which direction that should move / how to handle the different metadata sources? \n\nHere\u0027s the current diff of these two copies -- https://gist.github.com/ericstj/702ff654d2d902df37431357f4d0a219/revisions",
                                           "updatedAt":  "2025-06-03T15:37:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vA36a",
                                           "createdAt":  "2025-06-03T16:34:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, the raw metadata provider would need to be different for each copy. The rich reflection object model implemented on top of raw metadata can be shared. For example, there is nothing metadata provider specific in your #116080 PR.\n\nThe type name parsing de-duplication is a good recent example of how to deal with this sort of layering problem. We had multiple copies of type name parsing APIs. We have de-deduplicated it to have golden one that gets compiled into multiple assemblies: https://github.com/dotnet/runtime/blob/6ab0311319cc7c975ac7ed1b84df809e881dfb13/src/libraries/System.Reflection.Metadata/src/System/Reflection/Metadata/TypeName.cs#L17-L21 . The different copies are hooked into different layers, e.g. this is the integration with CoreCLR CoreLib https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/System/Reflection/TypeNameResolver.CoreCLR.cs .Also, there are a few ifdefs in the shared code to deal with the quirks required by different copies but they are very minor. ",
                                           "updatedAt":  "2025-06-03T16:34:42Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "BindingFlagSupport source is duplicated between CoreLib and System.Reflection.MetadataLoadContext",
        "labels":  [
                       "enhancement",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116620",
        "createdAt":  "2025-06-13T04:35:52Z",
        "number":  116620,
        "author":  "nike4613",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T17:32:59Z",
        "body":  "Specifically:\n\nECMA-335 § II.23.3\n\u003e - If the parameter kind is System.Type, (also, the middle line in above diagram) its is stored as a SerString (as defined in the previous paragraph), representing its name. The canonical name is its full type name, followed optionally by assembly where it is defined, its version, culture and public-key-token. If the name is omitted, the CLI looks first in the current assembly, and then in **the system library (mscorlib)**; in these two special cases, it is permitted to omit the name, version, culture and public-key-token.\n\n(emphasis mine)\n\nThe spec calls out `mscorlib` here, which was reasonable for .NET Framework. However, in .NET Core and .NET Standard, the corelib is no longer in `mscorlib`, but rather (in the API contract) `System.Runtime` or `netstandard` primarily. CoreCLR does not use *any* of these, however, and instead uses `System.Private.CoreLib` as the fallback, despite that being a (supposedly) private implementation detail. This is most notably a problem for `System.Uri`: it is in the reference corelib (`System.Uri`) on .NET Core and .NET Standard, but its implementation is in `System.Private.Uri`, not `System.Private.CoreLib`, so a CA blob that contains `System.Uri` will fail to resolve!\n\nMore detail on where this was found:\n\nhttps://github.com/Washi1337/AsmResolver/pull/648\n\n\u003e @Windows10CE:\n\u003e\n\u003e For some additional references for behavior being changed by this PR, all checked 2025-06-12:\n\u003e \n\u003e ECMA-335 6th Edition, Section II.23.3, bottom of page 268, describes how to do resolution when no assembly spec is given for Type arguments: https://ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf\n\u003e \n\u003e The current behavior of CoreCLR, which attempts current assembly, then `typeof(object).Assembly` (System.Private.CoreLib), then the TypeResolve event of the current AssemblyLoadContext: https://github.com/dotnet/runtime/blob/b49ebac33e06556804af96afebbb8f706d51a2e2/src/coreclr/System.Private.CoreLib/src/System/Reflection/TypeNameResolver.CoreCLR.cs#L344\n\u003e \n\u003e The current behavior of Roslyn (the C#/VB compiler), which always writes FQNs when there is an assembly being referenced: https://github.com/dotnet/roslyn/blob/2f32bf87e211fe5319c94f442c4ad56254bc75e0/src/Compilers/Core/Portable/PEWriter/TypeNameSerializer.cs#L194\n\u003e \n\u003e Cecil reading always uses `module.TypeSystem.CoreLibrary` when it cannot find a type definition (the current behavior of AsmResolver): https://github.com/jbevain/cecil/blob/3136847ea620fb9b4a3ff96bc4f573148e8bd2e4/Mono.Cecil/TypeParser.cs#L356\n\u003e \n\u003e Cecil writing follows the ECMA section to the letter and only omits it when the assembly being referenced is exactly current module or mscorlib (this behavior is absolutely incorrect and almost certainly has real issues, I just cannot be bothered to synthesize examples of it, this fails when referencing mscorlib for any type that is not today in System.Private.CoreLib and then loading that attribute with CoreCLR): https://github.com/jbevain/cecil/blob/3136847ea620fb9b4a3ff96bc4f573148e8bd2e4/Mono.Cecil/TypeParser.cs#L521\n\u003e \n\u003e dnLib reading does the same behavior as current AsmResolver and Cecil, attempting current module, then the referenced corlib: https://github.com/0xd4d/dnlib/blob/c78d296c522aae0520df2afd825d48266321cf36/src/DotNet/CustomAttributeReader.cs#L24\n\u003e \n\u003e dnLib writing has an option flag for whether to enable the same optimization that AsmResolver currently employs: https://github.com/0xd4d/dnlib/blob/c78d296c522aae0520df2afd825d48266321cf36/src/DotNet/Writer/Metadata.cs#L182-L196\n\nEven Cecil is technically wrong here, with respect to what CoreCLR does! The only actually correct thing to do is what Roslyn does, but that poses a problem when trying to *load* potentially poorly authored assemblies, because there\u0027s not a good answer for what to do.\n\n# Proposed solution(s)\n\n\u003e 1. Formally deprecate (e.g. in an ECMA augment) omitting the assembly for corelib types\n\u003e 2. Make CoreCLR (and Mono, if necessary) resolve such types through the `mscorlib` forwarder assembly (and maybe other forwarder assemblies depending on the source assembly\u0027s defined targetframework?)\n\u003e - .NET Framework assemblies authored according to spec will load properly, though there is a risk that some incorrectly-authored .NET Standard or .NET Core assemblies will fail to resolve properly without checking the defined TargetFramework\n\nAlternatively:\n\n\u003e Augment ECMA to specify resolving-through `System.Runtime` instead of `mscorlib`, and adjust CoreCLR and Mono appropriately\n\u003e - This sucks, because not specifying the assembly sucks in the first place.\n\nA slightly more out-there idea is to rev the CA blob format and deprecate the string form entirely, replacing it with an encoded TypeDef/TypeRef/TypeSpec token and using all of the goodness of the .NET metadata format here, too.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsVXL0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6w-YCB",
                                           "createdAt":  "2025-06-13T05:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Related: #24479, #19689.\n\nGiven the resolution of those, I think we\u0027d want to formally deprecate omitting the assembly for corelib types in custom attribute blobs. It is true that compilers don\u0027t actually know what assembly a type could end up in, with the small exception of things like System.Object. The \"core assembly\" reference assembly provided at compile time will not match the real implementation assembly and it could be mscorlib.dll, netstandard.dll, or System.Runtime.dll, depending on how one compiles things. I don\u0027t think we\u0027d want to probe them all. The other option would be to use mscorlib but that was rejected.\n\nWe keep track of our ECMA augments at https://github.com/dotnet/runtime/blob/c915ce98b200296f26e58c40e2d777d635a194c7/docs/design/specs/Ecma-335-Augments.md. Would you be willing to contribute?",
                                           "updatedAt":  "2025-06-13T05:52:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w-YIX",
                                           "createdAt":  "2025-06-13T05:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-13T05:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w-lZ2",
                                           "createdAt":  "2025-06-13T06:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nike4613",
                                           "body":  "\u003e We keep track of our ECMA augments at https://github.com/dotnet/runtime/blob/c915ce98b200296f26e58c40e2d777d635a194c7/docs/design/specs/Ecma-335-Augments.md. Would you be willing to contribute?\n\nI\u0027d be happy to, whatever is decided. \n\nIn the discussion on the C# discord @GrabYourPitchforks suggested it might be reasonable to write an errata for. Is there a good place for that?",
                                           "updatedAt":  "2025-06-13T06:18:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w-nxH",
                                           "createdAt":  "2025-06-13T06:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The augments doc is effectively that errata. It contains all the modifications, corrections, or additional annotations that should be taken with ECMA-335 to account for modern .NET.\n\nThere are likely a plethora of edge cases that aren\u0027t currently covered.",
                                           "updatedAt":  "2025-06-13T06:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w-riV",
                                           "createdAt":  "2025-06-13T06:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e This is most notably a problem for System.Uri: it is in the reference corelib (System.Uri) on .NET Core and .NET Standard, but its implementation is in System.Private.Uri, not System.Private.CoreLib, so a CA blob that contains System.Uri will fail to resolve!\n\nNotably `System.Uri` is originally documented as living in `System.dll` and not `mscorlib.dll` (as per ECMA TR-84), it being resolvable isn\u0027t guaranteed on .NET Framework or other runtimes either.\n\nAs discussed on Discord, what is actually guaranteed to live in the \"system library\" is much looser than what .NET Framework may have historically done for its own layering purposes and so this feature in general can be very non-deterministic across various implementations or even over time for versions of a single implementation.\n\nI don\u0027t think we can ever remove the support, but I do think it would be beneficial to explicitly recommend against people using it and/or deprecating it due to the types of problems it can cause.\n\n",
                                           "updatedAt":  "2025-06-13T06:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w_k1p",
                                           "createdAt":  "2025-06-13T08:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The default fallback is frequently used for core intrinsic types like System.Int32 or System.String. I do not see a problem with that.\n\nI agree that it is not a good idea to depend on the default fallback for arbitrary types when the type name is produced and resolved in two different type universes.",
                                           "updatedAt":  "2025-06-13T08:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xIiPq",
                                           "createdAt":  "2025-06-13T21:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "Out of curiosity: is there a reason the custom attribute blob uses serialized type names instead of metadata tokens?",
                                           "updatedAt":  "2025-06-13T21:51:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xL_jR",
                                           "createdAt":  "2025-06-14T12:14:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Out of curiosity: is there a reason the custom attribute blob uses serialized type names instead of metadata tokens?\n\nI don\u0027t think anyone remembers. Each custom attribute blob starts with a version number (that is always v1) so maybe not using tokens was a way to keep the format and contents of the custom attribute blob completely separate from rest of the file format. I can only guess. We haven\u0027t really needed this extensibility. The blob version number and textual type names are just a waste of space.",
                                           "updatedAt":  "2025-06-14T12:14:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xVcvS",
                                           "createdAt":  "2025-06-16T05:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "In \u003chttps://github.com/dotnet/csharpstandard/issues/1299#issuecomment-2744132326\u003e, I suggested using a new blob version number to add support for array covariance in attribute arguments.  I don\u0027t have high hopes of that getting implemented, though.",
                                           "updatedAt":  "2025-06-16T05:51:27Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Custom Attribute blob syntax for System.Type is unclear",
        "labels":  [
                       "documentation",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117068",
        "createdAt":  "2025-06-26T21:08:09Z",
        "number":  117068,
        "author":  "erichiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-21T11:07:12Z",
        "body":  "### Description\n\nGeneric Types that are inherited by non generic types do not have the inheritance information taken into account when determining nullability using `NullabilityInfoContext`.\n\n### Reproduction Steps\n\n```cs\nclass Container\u003cT\u003e {\n  public T  PropertyT         { get; set; }\n  public T? PropertyNullableT { get; set; }\n}\n\nclass ListPropertyContainer : Container\u003cList\u003cstring\u003e\u003e ;\n```\n\n```cs\n// Property with type T\nvar propertyT = typeof(ListPropertyContainer).GetProperty( \"PropertyT\" )!;\nthis._output.WriteLine( getNullabilityString( propertyT ) );\n// Property with type T?\nvar propertyNullableT = typeof(ListPropertyContainer).GetProperty( \"PropertyNullableT\" )!;\nthis._output.WriteLine( getNullabilityString( propertyNullableT ) );\n\nstatic string getNullabilityString( PropertyInfo propertyInfo ) {\n    var nc = new NullabilityInfoContext();\n    var ni = nc.Create( propertyInfo );\n    return $\"\"\"\n            {propertyInfo.Name}:\n                Type: {ni.Type.Name}\n                Read: {ni.ReadState}  Write: {ni.WriteState}\n                GenericTypeArguments: (Count: {ni.GenericTypeArguments.Length})\n                    0:  Type: {ni.GenericTypeArguments[ 0 ].Type.Name} \n                        Read: {ni.GenericTypeArguments[ 0 ].ReadState}  Write: {ni.WriteState}\n                        GenericTypeArguments: (Count: {ni.GenericTypeArguments[ 0 ].GenericTypeArguments.Length})\n            \"\"\";\n}\n\n```\n\n\n### Expected behavior\n\n```\nPropertyT:\n    Type: List`1\n    Read: NotNull  Write: NotNull\n    GenericTypeArguments: (Count: 1)\n        0:  Type: String \n            Read: NotNull  Write: NotNull\n            GenericTypeArguments: (Count: 0)\nPropertyNullableT:\n    Type: List`1\n    Read: Nullable  Write: Nullable\n    GenericTypeArguments: (Count: 1)\n        0:  Type: String \n            Read: NotNull  Write: NotNull\n            GenericTypeArguments: (Count: 0)\n```\n\n### Actual behavior\n\n```\nPropertyT:\n    Type: List`1\n    Read: NotNull  Write: NotNull\n    GenericTypeArguments: (Count: 1)\n        0:  Type: String \n            Read: NotNull  Write: NotNull\n            GenericTypeArguments: (Count: 0)\nPropertyNullableT:\n    Type: List`1\n    Read: Nullable  Write: Nullable\n    GenericTypeArguments: (Count: 1)\n        0:  Type: String \n            Read: Nullable  Write: Nullable   \u003c\u003c-- THIS SHOULD BE NotNull\n            GenericTypeArguments: (Count: 0)\n```\n\n\nThe IDE / Roslyn correctly understands that the element is not nullable:\n\n```cs\nvar listContainer = new ListPropertyContainer {\n    PropertyT         = [ null ], // error as expected: Cannot convert null literal to non-nullable reference type\n    PropertyNullableT = [ null ], // error as expected: Cannot convert null literal to non-nullable reference type\n};\n\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\ndotnet --info \n.NET SDK:\n Version:           9.0.107\n Commit:            3b2a975be6\n Workload version:  9.0.100-manifests.aae8e2eb\n MSBuild version:   17.12.35+3b2a975be\n\nRuntime Environment:\n OS Name:     ubuntu\n OS Version:  24.04\n OS Platform: Linux\n RID:         ubuntu.24.04-x64\n Base Path:   /usr/lib/dotnet/sdk/9.0.107/\n```\n\n### Other information\n\nIf I edit `NullabilityInfoContext` and remove the `if (nullability.ReadState == NullabilityState.NotNull)` condition on https://github.com/dotnet/runtime/blob/3875b54e7b10b10606b105340199946d0b877754/src/libraries/System.Private.CoreLib/src/System/Reflection/NullabilityInfoContext.cs#L466-L469 so that it is simply:\n```cs\nTryUpdateGenericParameterNullability(nullability, metaType, reflectedType);\n```\nThen the result for a property of type `T?` is the same as for `T`:\n```\nPropertyNullableT:\n    Type: List`1\n    Read: NotNull  Write: NotNull            \u003c\u003c-- now this is incorrect, it should be Nullable\n    GenericTypeArguments: (Count: 1)\n        0:  Type: String \n            Read: NotNull  Write: NotNull\n            GenericTypeArguments: (Count: 0)\n```\n\nThis _may_ be related to https://github.com/dotnet/runtime/issues/63555",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuIzBiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zazd1",
                                           "createdAt":  "2025-06-26T21:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-26T21:23:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Ay5v",
                                           "createdAt":  "2025-07-14T17:47:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@erichiller was this a regression or has it always been broken?",
                                           "updatedAt":  "2025-07-14T17:47:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64jMGI",
                                           "createdAt":  "2025-07-21T11:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erichiller",
                                           "body":  "\u003e [@erichiller](https://github.com/erichiller) was this a regression or has it always been broken?\n\nI do not know if it is always been broken. I suspect yes, but I\u0027ve only been using `NullabilityInfo`/Context for a few months, and only in .NET 9.",
                                           "updatedAt":  "2025-07-21T11:07:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Type that inherits from generic type properties do not have the correct nullability.",
        "labels":  [
                       "bug",
                       "area-System.Reflection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117972",
        "createdAt":  "2025-07-22T11:52:44Z",
        "number":  117972,
        "author":  "ShevRuslan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:28:19Z",
        "body":  "\u003c!--\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\n\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\n\n--\u003e\n\n### Describe the bug\n**Assembly.GetType return always excetion in .NET 9.0, when i set throwOnError false**\nIn .NET 6.0 AssemblyGetType return null always, after i check on null\n\nAbsolutely identical code in .NET 6 and .NET 9 return different result.\n`var typeObjForMethod = assembly.GetType(typeName, false);`\n\nIn docs writes what args throwOnError dont hive exception, when false and return null\nhttps://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.gettype?view=net-9.0#system-reflection-assembly-gettype(system-string-system-boolean)\n\n### To Reproduce\n\u003c!--\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.\n\nWe may close this issue if:\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\n- if we will not be able to repro the behavior you\u0027re reporting\n--\u003e\n\n### Exceptions (if any)\nSystem.IO.FileLoadException: \u0027The given assembly name was invalid.\u0027\n\n### Further technical details\n\n\u003cimg width=\"959\" height=\"231\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c792ea12-dc30-472b-b59a-733e854a18a8\" /\u003e\nVS 17.14.9",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Assembly.GetType return always excetion, args \"throwOnError\" don`t work. .NET 9.0",
        "labels":  [
                       "area-System.Reflection",
                       "regression-from-last-release"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118319",
        "createdAt":  "2025-08-04T03:03:31Z",
        "number":  118319,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-23T20:46:51Z",
        "body":  "### Repro\n\nCompile and run with runtime async enabled:\n```csharp\nusing System.Threading.Tasks;\n\npublic class Test\n{\n   static void Main() {\n        typeof(Test).GetMethod(\"M\").GetMethodBody();\n   }\n\n   public async Task M() {\n       await Task.Delay(1);\n   }\n}\n```\n\n### Result\n\nAssert failure(PID 38644 [0x000096f4], Thread: 39468 [0x9a2c]): Precondition failure:\nFAILED: MayHaveILHeader()",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv8WYnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67schl",
                                           "createdAt":  "2025-08-04T03:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @VSadov ",
                                           "updatedAt":  "2025-08-04T03:04:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67scrg",
                                           "createdAt":  "2025-08-04T03:04:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-04T03:04:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67tR62",
                                           "createdAt":  "2025-08-04T05:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "This is a scenario where reflection sees a Task-returning variant. Its signature matches the signature in the metadata, which is desirable, but its body is a thunk. (the IL body does not even return a `Task`, it actually returns `void`. In a way the IL is a \"blueprint\" for a method that could return `Task`)\n\nFor the internal purposes the IL body belongs to the async variant, which is invisible to reflection. And the body for the Task-returning variant is an implementation detail provided by the runtime. Introspecting implementation details is, at best, useless to the user.\n\nIt is an interesting puzzle what public API `GetMethodBody` should return for this case. \nPerhaps for public introspection purposes we should specialcase async variants and return the result that matches the body that was in the IL. \n",
                                           "updatedAt":  "2025-08-04T05:54:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67tYbr",
                                           "createdAt":  "2025-08-04T06:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, I think we should return the actual IL method body here. Users can consult `MethodImplementationFlags` to figure out that the method body is runtime async. This API should be symmetric with Reflection.Emit where we allow emitting runtime async body accompanied with `MethodImplAttributes.Async`.",
                                           "updatedAt":  "2025-08-04T06:03:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_xZif",
                                           "createdAt":  "2025-08-23T20:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Something possibly related - when something crashes, the stack trace includes both variants at points when we enter/exit runtime async call chain. It is technically correct because one variant calls another at the edges, but to the user it looks like duplicated frames.\n\nPerhaps we should hide the async variants when printing or introspecting the stack.\n",
                                           "updatedAt":  "2025-08-23T20:46:51Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[RuntimeAsync] MethodInfo.GetMethodBody fails with AF:MayHaveILHeader()",
        "labels":  [
                       "area-System.Reflection",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118678",
        "createdAt":  "2025-08-13T13:16:57Z",
        "number":  118678,
        "author":  "Youssef1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODM_mxg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TiltonJH",
                                            "createdAt":  "2025-08-28T06:38:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-14T18:07:57Z",
        "body":  "### Background and motivation\n\nToday, getting assembly simple name is done via `assembly.GetName().Name`. This does more work than necessary, like `GetCodeBase`, `GetPublicKey`, `GetVersion`, and allocating `AssemblyName` instance. In a hot code path, this can be problematic.\n\n\n### API Proposal\n\n```diff\nnamespace System.Reflection;\n\npublic abstract partial class Assembly\n{\n+   public virtual string GetSimpleName() =\u003e GetName().Name;\n}\n\ninternal sealed partial class RuntimeAssembly : Assembly\n{\n-       internal string GetSimpleName()\n+       public override string GetSimpleName()\n        {\n            RuntimeAssembly runtimeAssembly = this;\n            string? name = null;\n            GetSimpleName(new QCallAssembly(ref runtimeAssembly), new StringHandleOnStack(ref name));\n            return name!;\n        }\n}\n\ninternal class DelegatingAssembly : Assembly\n{\n+       public override string GetSimpleName() =\u003e UnderlyingAssembly.GetSimpleName();\n}\n\ninternal sealed partial class RuntimeAssemblyBuilder : AssemblyBuilder\n{\n+       public override string GetSimpleName() =\u003e InternalAssembly.GetSimpleName();\n}\n\npublic sealed class PersistedAssemblyBuilder : AssemblyBuilder\n{\n+       public override string GetSimpleName() =\u003e _assemblyName.Name;\n}\n```\n\n### API Usage\n\nExample:\n\n```csharp\n_ = typeof(MyType).Assembly.GetSimpleName();\n\n// Instead of:\n_ = typeof(MyType).Assembly.GetName().Name;\n```\n\n\n### Alternative Designs\n\nDo nothing, and callers who have perf issues can introduce caching themselves.\n\nThe perf issue is more likely to be \"querying the same assembly/assemblies over and over again\" and not \"querying too many different assemblies\".\n\nThis was motivated by the perf investigations found in https://github.com/microsoft/vstest/pull/15259 though.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOverY8A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69xmYI",
                                           "createdAt":  "2025-08-13T13:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-13T13:18:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69ytLG",
                                           "createdAt":  "2025-08-13T14:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Youssef1313 Can you elaborate on what the simple name is being used for? Is this a logging mechanism or is the simple name being used for some other purpose?",
                                           "updatedAt":  "2025-08-13T14:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69znPi",
                                           "createdAt":  "2025-08-13T15:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "@AaronRobinsonMSFT For our case, it\u0027s mostly used for display purposes in VS Test Explorer.",
                                           "updatedAt":  "2025-08-13T15:35:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc690qfX",
                                           "createdAt":  "2025-08-13T16:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "You can read only the assembly\u0027s name with the help of `System.Reflection.Metadata` and `AssemblyExtensions.TryGetRawMetadata`. It might result in some extra metadata parsing, but it will be the most efficient thing memory-wise.\n\nIf we want to add a new method on `Assembly`, we can add one that returns `AssemblyNameInfo`, which is immutable and can be cached by the objects.",
                                           "updatedAt":  "2025-08-13T16:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc690xuN",
                                           "createdAt":  "2025-08-13T17:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e You can read only the assembly\u0027s name with the help of System.Reflection.Metadata and AssemblyExtensions.TryGetRawMetadata. It might result in some extra metadata parsing, but it will be the most efficient thing memory-wise.\n\nI expect that this would be significantly less efficient compared to `assembly.GetName().Name`. \n\n\u003e If we want to add a new method on Assembly, we can add one that returns AssemblyNameInfo,\n\nThis would not fully address the inefficiency. AssemblyNameInfo costs about as much to allocate as AssemblyName. Also, `AssemblyNameInfo` lives in System.Reflection.Metadata. Moving `AssemblyNameInfo` to System.Runtime/Corelib is possible for newer runtimes, but somewhat complicated.",
                                           "updatedAt":  "2025-08-13T17:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc696tjw",
                                           "createdAt":  "2025-08-14T00:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasGoulet73",
                                           "body":  "It could be used in WPF to replace this helper:\nhttps://github.com/dotnet/wpf/blob/b4e470e583593fd593818ced9b2f6409a2b56c50/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/ReflectionUtils.cs#L48-L80\n\nThe helper is used in a bunch of places in WPF:\nhttps://github.com/search?q=repo%3Adotnet%2Fwpf%20GetAssemblyPartialName\u0026type=code",
                                           "updatedAt":  "2025-08-14T00:39:53Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Expose `Assembly.GetSimpleName()`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118903",
        "createdAt":  "2025-08-19T20:28:39Z",
        "number":  118903,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-02T19:45:08Z",
        "body":  "### Background and motivation\n\nHot Reload needs to mark metadata entities with an attribute or flag that instructs Reflection to not return them when enumerating types or type members.\n\nSee https://github.com/dotnet/runtime/issues/75154\n\n\n\n### API Proposal\n\n```csharp\nnamespace System.Runtime.CompilerServices;\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false, Inherited = false)]\npublic sealed class MetadataUpdateDeletedAttribute : Attribute;\n```\n\n\n### API Usage\n\nReflection would filter out all types and members marked with this attribute if any Hot Reload change has been applied to the containing module/type.\n\n### Alternative Designs\n\nIf we need to optimize more we could mark the deleted member with `RTSpecialName` flag and only look up the custom attribute for members with this flag.\n\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwYLSyg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-3JZq",
                                           "createdAt":  "2025-08-19T20:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-19T20:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-6X-y",
                                           "createdAt":  "2025-08-19T23:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aromaa",
                                           "body":  "Would this be abused to simulate `DisablePrivateReflectionAttribute`? Could that be a problem?",
                                           "updatedAt":  "2025-08-19T23:35:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-9y0g",
                                           "createdAt":  "2025-08-20T01:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEftctA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2025-08-26T18:51:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Reflection would filter out all types and members marked with this attribute.\n\nDoing an extra custom attribute lookup every time reflection returns something sounds very non-pay-for-play. As proposed, this is guaranteed to introduce performance regressions.",
                                           "updatedAt":  "2025-08-20T01:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_JLFj",
                                           "createdAt":  "2025-08-20T15:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e Doing an extra custom attribute lookup every time reflection returns something sounds very non-pay-for-play. As proposed, this is guaranteed to introduce performance regressions.\n\nWould filtering only if the RuntimeType cache was cleared be sort of pay-for-play?\n",
                                           "updatedAt":  "2025-08-20T15:21:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_JdRG",
                                           "createdAt":  "2025-08-20T15:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Would filtering only if the RuntimeType cache was cleared be sort of pay-for-play?\n\nEnabling the filtering only for modules with EnC delta applies would address the pay-for-play nature.\n\nThe other problem is implementation difficulty. There is no single central place where to apply this filtering. Reflection is fetching its data through number of different paths and number of these paths are intertwined with runtime type system where we do not want to apply this filtering. Implementing this for hot-reload would allow us to simplify the implementation by saying that it is best effort that handles the common cases only. Hot reload is not a fully reliable feature by construction, so handling common cases only would follow the theme.",
                                           "updatedAt":  "2025-08-20T15:40:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_Ju19",
                                           "createdAt":  "2025-08-20T16:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "What about the alternative - using flags that are directly in the metadata tables? There would be no custom attribute lookup in that case. ",
                                           "updatedAt":  "2025-08-20T16:02:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_KREJ",
                                           "createdAt":  "2025-08-20T16:35:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgh6Jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2025-09-02T15:58:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think the main pivot is whether this is a proper fully reliable runtime feature or imperfect hot reload only feature.\n\nProper runtime feature is very expensive to implement. We can look at the using flags for that.\n\nImperfect hot reload only feature is cheaper to implement. Attribute makes sense for that.\n\nI do not see value in this feature outside of the limited hot reload scenario. DisablePrivateReflectionAttribute that we introduced long time turned out to be useless and it is no longer supported. So imperfect hot reload only feature would make more sense to me.",
                                           "updatedAt":  "2025-08-20T16:35:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_K345",
                                           "createdAt":  "2025-08-20T17:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e Imperfect hot reload only feature is cheaper to implement. Attribute makes sense for that.\n\nThis would be sufficient imo.",
                                           "updatedAt":  "2025-08-20T17:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_K4vu",
                                           "createdAt":  "2025-08-20T17:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e I think the main pivot is whether this is a proper fully reliable runtime feature or imperfect hot reload only feature.\n\u003e \n\u003e Proper runtime feature is very expensive to implement. We can look at the using flags for that.\n\u003e \n\u003e Imperfect hot reload only feature is cheaper to implement. Attribute makes sense for that.\n\u003e \n\u003e I do not see value in this feature outside of the limited hot reload scenario. DisablePrivateReflectionAttribute that we introduced long time turned out to be useless and it is no longer supported. So imperfect hot reload only feature would make more sense to me.\n\nI see it the same way. Cheapest / most effective place that I can see to pull this off is filter before https://github.com/dotnet/runtime/blob/749340b8e1d84e6f33f6057656e82199be921b76/src/coreclr/System.Private.CoreLib/src/System/RuntimeType.CoreCLR.cs#L385 only if the RuntimeType cache has ever been cleared. No idea the implications - assumption is that hot reload is one of the few (may be the only) consumer that clears the reflection cache.",
                                           "updatedAt":  "2025-08-20T17:04:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_L2CW",
                                           "createdAt":  "2025-08-20T18:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e assumption is that hot reload is one of the few (may be the only) consumer that clears the reflection cache.\n\nThe reflection cache is behind weak references. The GC clears it too if your app stops using reflection.\n\nThis would need to be behind an explicit flag that gets set in https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/System/Reflection/Metadata/RuntimeTypeMetadataUpdateHandler.cs",
                                           "updatedAt":  "2025-08-20T18:18:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_L4QG",
                                           "createdAt":  "2025-08-20T18:21:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Number of basic paths like `Type.GetType` or `Assembly.GetTypes` does not go through reflection cache. They would need the filtering applied as well.",
                                           "updatedAt":  "2025-08-20T18:21:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_L7fa",
                                           "createdAt":  "2025-08-20T18:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "We can defer support for deleting types for later. The most important scenarios at this point involve member deletions.",
                                           "updatedAt":  "2025-08-20T18:26:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_dJQT",
                                           "createdAt":  "2025-08-21T21:13:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@jkotas Would `HotReloadDeletedAttribute` or `MetadataUpdateDeletedAttribute` be a better name for the attribute, so that it\u0027s specific to Hot Reload?",
                                           "updatedAt":  "2025-08-21T21:14:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_dR1z",
                                           "createdAt":  "2025-08-21T21:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfMBoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2025-08-21T22:30:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The .NET runtime public surface calls this MetadataUpdater, so `MetadataUpdateDeletedAttribute` sounds reasonable to me. ",
                                           "updatedAt":  "2025-08-21T21:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BfIo2",
                                           "createdAt":  "2025-09-02T17:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=4DeB1qSvdfA\u0026t=0h0m0s)\n\n\n* Looks good as proposed.\n* Since we don\u0027t think a general \"hide this from reflection\" attribute is a good idea, we are hoping that the compilers all reject this when specified by source code.\n\n```c#\nnamespace System.Runtime.CompilerServices;\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false, Inherited = false)]\npublic sealed class MetadataUpdateDeletedAttribute : Attribute\n{\n}\n```",
                                           "updatedAt":  "2025-09-02T18:15:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BfgiV",
                                           "createdAt":  "2025-09-02T17:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "\u003e the compilers all reject this when specified by source code.\n\nWe can certainly report an error if this attribute is manually applied to a member, if that\u0027s what you mean.",
                                           "updatedAt":  "2025-09-02T17:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BfwAl",
                                           "createdAt":  "2025-09-02T18:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Yes, thanks, @tmat; that\u0027s precisely what we meant. We need to make sure customers cannot missuse this attribute as a \"feature\" to hide members from Reflection. That will be a ship-blocking integration need.",
                                           "updatedAt":  "2025-09-02T18:09:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BgtLK",
                                           "createdAt":  "2025-09-02T19:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Tracking via https://github.com/dotnet/roslyn/issues/80106",
                                           "updatedAt":  "2025-09-02T19:45:08Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "[API Proposal]: Add attribute that instructs Reflection to hide target member",
        "labels":  [
                       "api-approved",
                       "area-System.Reflection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119490",
        "createdAt":  "2025-09-09T10:28:29Z",
        "number":  119490,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T06:15:44Z",
        "body":  "This crashes with internal CLR error.\n\n```csharp\nusing System;\nusing System.Reflection;\n\nConsole.WriteLine(typeof(Program).GetCustomAttribute\u003cDerivedAttribute\u003e().Prop);\n\n[Derived(Prop = 123)]\npartial class Program;\n\nclass BaseAttribute : Attribute\n{\n    public virtual object Prop { get; set; }\n}\n\nclass DerivedAttribute : BaseAttribute\n{\n    public override Enum Prop { get =\u003e (Enum)base.Prop; }\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwx0M9g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7C6MM6",
                                           "createdAt":  "2025-09-09T10:29:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-09T10:29:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C6PsS",
                                           "createdAt":  "2025-09-09T10:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/110412",
                                           "updatedAt":  "2025-09-09T10:32:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DCm8i",
                                           "createdAt":  "2025-09-09T20:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gaurav26061999",
                                           "body":  "I took a look at the code you shared, and the crash you’re seeing is caused by an invalid property override in your attribute classes. Specifically, in your DerivedAttribute class, you’re overriding the Prop property which is defined as type object in the base class, but in the derived class, you’ve changed its type to Enum.\n\nIn C#, when you override a property, the type must exactly match the base property’s type. Changing the return type from object to Enum breaks this rule, which leads to a violation of the CLR’s type safety. This mismatch causes the runtime to crash with an internal error when it tries to handle the attribute via reflection.\n\nTo fix this, you should keep the property type consistent override Prop as object in the derived class as well, and if you need to work with it as an Enum, add a separate property or method to perform the casting safely.",
                                           "updatedAt":  "2025-09-09T20:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DDFPr",
                                           "createdAt":  "2025-09-09T21:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e In C#, when you override a property, the type must exactly match the base property’s type.\n\nThat\u0027s not correct since C# 9.0. See https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/covariant-returns",
                                           "updatedAt":  "2025-09-09T21:39:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DEzc5",
                                           "createdAt":  "2025-09-10T00:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Windows10CE",
                                           "body":  "This seems like at least partially a Roslyn issue to me. Iif you do `[Derived(Prop= \"some value\")]` here, it produces a blob that has a NamedArg that looks like `PROPERTY ELEMENT_TYPE_ENUM SerString(\"System.Enum, System.Runtime, ...\") SerString(\"Prop\") SerString(\"some value\")`, which seems nonsensical. It is acting like it is assigning to the overriden property (which has the wrong type for the value being assigned), when its actually using the setter from the virtual definition in the base class and no setter even exists on the property it looks like it is trying to write to from the blob.",
                                           "updatedAt":  "2025-09-10T00:49:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DHQz2",
                                           "createdAt":  "2025-09-10T06:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e This seems like at least partially a Roslyn issue to me.\n\nYeah, the problem is that Roslyn has some idea of what setter this should call, the reflection stack has some other idea, and there is some mismatch.\n\nThis is somewhat related to #117584 that is out for review now (and I ran into this as part of a \"I wonder what this will do\" experiment). There is a mismatch between what Roslyn expects and what reflection implements. I think if we want to make changes in the area, it would be better to define what should be supported first. A possible outcome could be that some of the things that compile as valid C# now shouldn\u0027t actually compile.\n\nCc @AaronRobinsonMSFT ",
                                           "updatedAt":  "2025-09-10T06:15:44Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Overriden property in a custom attribute crashes runtime",
        "labels":  [
                       "area-System.Reflection",
                       "untriaged"
                   ]
    }
]
