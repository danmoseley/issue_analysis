[
    {
        "url":  "https://github.com/dotnet/runtime/issues/34196",
        "createdAt":  "2020-03-27T15:07:30Z",
        "number":  34196,
        "author":  "SamMonoRT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-21T16:06:18Z",
        "body":  "This issue represents 5 different CoreCLR tests running on Mono runtime and failing with an Invalid_IL error. Note, the test errors maybe different in each case, this is a broader bucket to represent all of them. If after investigations, we feel there is a need for individual issues, we can create those later.\r\n\r\nExample error :  [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidProgramException: Invalid IL code in Z:Main (): IL_01ab: add\r\n\r\nThe tests failing with the Invalid IL error are : \r\n1.\tInterop/StructMarshalling/ReversePInvoke/MarshalSeqStruct/ReversePInvoke/ReversePInvokeTest/ReversePInvokeTest.sh\r\n2.\tJIT/Methodical/Boxing/morph/sin3double/sin3double.sh\r\n3.\tJIT/Methodical/refany/_il_rellcs/_il_rellcs.sh\r\n4.\tJIT/Regression/JitBlue/GitHub_18295/GitHub_18295/GitHub_18295.sh\r\n5.\tJIT/Regression/JitBlue/GitHub_23411/GitHub_23411/GitHub_23411.sh\r\n\r\nRepro : Command to run individual tests (replace test name and path in following command): From the dotnet\\runtime repo src\\mono\\netcore run this command - make run-tests-coreclr CoreClrTest=\"bash ../../artifacts/tests/coreclr/OSX.x64.Debug/JIT/Methodical/refany/_il_rellcs/_il_rellcs.sh\"",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYTZFcw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTA1MTkyNQ==",
                                           "createdAt":  "2020-03-27T15:08:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@lewurm @fanyang-mono @imhameed fyi",
                                           "updatedAt":  "2020-03-27T15:08:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzg4MTYzNQ==",
                                           "createdAt":  "2020-04-15T07:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "2: coreclr seems to allow implicit conversions between managed pointers and int64s, but ECMA-335 forbids this. I have a patch for this, but:\r\n3: coreclr seems to allow implicit conversions between object references and int32s in implicit argument coercion, for binary comparison operations, and for binary numeric operations, but ECMA-335 forbids this. The offending lines are here: https://github.com/dotnet/runtime/blob/master/src/coreclr/tests/src/JIT/Methodical/refany/lcs.il#L207-L218. These lines don\u0027t have any effect on the rest of the test, I think. This would be straightforward to add support for, although I\u0027m not aware of any non-handwritten test code that depends on this.\r\n4: coreclr seems to allow implicit conversions between int64s and int32s, but ECMA-335 forbids this. The offending test code is here: https://github.com/dotnet/coreclr/pull/18561/files#diff-891164424b727fa99f7c887bc5400feaR50-R53. It would be straightforward to add support for this to mono, but this looks like a minor mistake in the test--the int32 and int64 arguments are loaded onto the CIL stack in reverse order.\r\n5: there\u0027s a bug in `mono_basic_block_split` which results in the incomplete marking of dead instructions, leading to an inconsistent CIL stack when converting an IL instruction that should have been marked as dead. I\u0027m still figuring out a fix.",
                                           "updatedAt":  "2020-04-15T07:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ihJO",
                                           "createdAt":  "2021-07-16T13:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 7.0.0",
                                           "updatedAt":  "2021-07-16T13:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-7XdI",
                                           "createdAt":  "2022-03-01T18:50:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@lambdageek  -- This is low priority - but wanted to get an opinion on if any of the 2-5 are worth fixing for 7.0 timeframe ?",
                                           "updatedAt":  "2022-03-01T18:50:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-7Y8N",
                                           "createdAt":  "2022-03-01T18:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQ6GUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2022-03-01T19:15:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@SamMonoRT I think all except 5 are relatively low-priority.  We should try to fix JIT/Regression/JitBlue/GitHub_23411/GitHub_23411 for 7.0, though.",
                                           "updatedAt":  "2022-03-01T18:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_nTc",
                                           "createdAt":  "2022-04-06T15:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "cc @ivanpovazan ",
                                           "updatedAt":  "2022-04-06T15:40:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_wZn",
                                           "createdAt":  "2022-04-06T16:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCWh7eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-04-06T16:25:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Some of the files bitrotted or moved a bit, so I\u0027m just going to add some notes:\r\n * tests moved from `src/coreclr/tests/src` to `src/tests`\r\n * `_il_rellcs` got renamed to [`lcs_il_r.ilproj`](https://github.com/dotnet/runtime/blob/main/src/tests/JIT/Methodical/refany/lcs_il_r.ilproj) and the relevant lines for (3) from [imran\u0027s comment](https://github.com/dotnet/runtime/issues/34196#issuecomment-613881635) are now here: https://github.com/dotnet/runtime/blob/424a09cb81c678fb1ba1c27211b80aba2de070ad/src/tests/JIT/Methodical/refany/lcs.il#L206-L217\r\n * For (4) it looks like the test has been fixed: the order of the arguments now matches the signature - the i8 is loaded first, then the i4: https://github.com/dotnet/runtime/blob/424a09cb81c678fb1ba1c27211b80aba2de070ad/src/tests/JIT/Regression/JitBlue/GitHub_18295/GitHub_18295.il#L53-L56\r\n * If Imran was right and (5) exposed a bug in `mono_basic_block_split`, that\u0027s potentially challenging to fix.  IT looks like the code has a `DEBUG_BB` define, which looks like it will print debugging info about the basic block splitting, which may be helpful: https://github.com/dotnet/runtime/blob/424a09cb81c678fb1ba1c27211b80aba2de070ad/src/mono/mono/metadata/mono-basic-block.c#L35",
                                           "updatedAt":  "2022-04-06T16:30:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BYa1K",
                                           "createdAt":  "2022-04-12T16:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Some more comments on `GitHub_23411.il`:\r\n\r\nI went through [GitHub_23411.il](https://github.com/dotnet/runtime/blob/975398086ed525a8b133c495346b2c1de0e6b6ff/src/tests/JIT/Regression/JitBlue/GitHub_23411/GitHub_23411.il) and split the basic blocks by hand (I\u0027m not sure if I\u0027m doing the exact algorithm that we implement).  The critical instructions are this code: \r\nhttps://github.com/dotnet/runtime/blob/975398086ed525a8b133c495346b2c1de0e6b6ff/src/tests/JIT/Regression/JitBlue/GitHub_23411/GitHub_23411.il#L166-L180\r\n\r\n\r\n`IL_0177` is the end of a previous live basic block.  `IL_0179` is the start of some dead code.   Initially, `IL_0182` just falls through to `IL_0183`, so the entire range from `IL_0179-IL_0184` looks like a single dead basic block.  But since `IL_0177` (live) jumps to `IL_0186`, the basic block from `IL_0186-IL_0190` is live, and the last instruction `IL_0190` jumps into the middle of `IL_0179-IL_0184`.  So that block has to split into two pieces: `IL_0179-IL_0182` (dead) and `IL_0183-IL_0184` (live).\r\n\r\nThe important thing is that we don\u0027t emit the dead block from `IL_0179-IL_0184`, because it will mess up the stack for `IL_0183` on that incoming fallthru edge from `IL_0182` to `IL_0183`. So when we see `IL_0190` and it tells us to split `IL_0179`-`IL_0184` into two blocks, we have to make sure that the first half of it is dead.",
                                           "updatedAt":  "2022-04-12T16:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BmsXk",
                                           "createdAt":  "2022-04-16T13:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYhhMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2022-04-16T15:51:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2022-04-18T21:26:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@lambdageek regarding the (5) regression\r\n\r\nAfter investigating `GitHub_23411.il`, I found that the problem is actually not related to marking the dead basic blocks incorrectly nor to what `mono_basic_block_split` is doing (which is basically just liveness analysis).\r\n\r\nThe actual problem comes from the fact that the stack sizes of basic blocks are not calculated correctly. At least not in the case of unstructured code with back edges.\r\nHere is a much simpler example which reproduces the issue (even though it does not do anything useful):\r\n\r\n```\r\n    // BB0\r\n    IL_0000: br IL_0008\r\n\r\n    // BB1\r\n    IL_0005: pop\r\n    IL_0006: ldc.i4.1\r\n    IL_0007: ret\r\n\r\n    // BB2\r\n    IL_0008: ldc.i4.2\r\n    IL_0009: br.s IL_0005\r\n```\r\nProblematic instruction is the `pop` at `IL_0005` which results with `Invalid IL code` error, as if the stack is empty at that point. However, if we take a look at basic block `BB2` which jumps back to `BB1` we can see that is not true.\r\n\r\nThe problem is reproducible in both interpreter and JIT modes, and thus needs to be fixed in two different functions:\r\nhttps://github.com/dotnet/runtime/blob/2d4f2d0c8f60d5f49e39f3ddbe1824648ee2b306/src/mono/mono/mini/interp/transform.c#L4187-L4189\r\nand\r\nhttps://github.com/dotnet/runtime/blob/2d4f2d0c8f60d5f49e39f3ddbe1824648ee2b306/src/mono/mono/mini/method-to-ir.c#L6188-L6191\r\n\r\nI have started working on the interpreter fix, keeping in mind that the performance is not affected (or is affected as little as possible). An additional detail regarding the interpreter is that it determines stack sizes only in \"forward\" (low-to-high address) direction - in a single pass, which results in unknown or wrong stack state for the `pop` instruction.",
                                           "updatedAt":  "2022-04-16T13:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bm0bo",
                                           "createdAt":  "2022-04-16T15:53:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e An additional detail regarding the interpreter is that it determines stack sizes only in \"forward\" (low-to-high address) direction - in a single pass, which results in unknown or wrong stack state for the pop instruction.\r\n\r\nFYI @BrzVlad ",
                                           "updatedAt":  "2022-04-16T15:53:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bm0oX",
                                           "createdAt":  "2022-04-16T15:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYWrHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-04-16T16:03:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e The actual problem comes from the fact that the stack sizes of basic blocks are not calculated correctly. At least not in the case of unstructured code with back edges. Here is a much simpler example which reproduces the issue (even though it does not do anything useful):\r\n\u003e \r\n\u003e ```\r\n\u003e     // BB0\r\n\u003e     IL_0000: br IL_0008\r\n\u003e \r\n\u003e     // BB1\r\n\u003e     IL_0005: pop\r\n\u003e     IL_0006: ldc.i4.1\r\n\u003e     IL_0007: ret\r\n\u003e \r\n\u003e     // BB2\r\n\u003e     IL_0008: ldc.i4.2\r\n\u003e     IL_0009: br.s IL_0005\r\n\u003e ```\r\n\u003e \r\n\u003e Problematic instruction is the `pop` at `IL_0005` which results with `Invalid IL code` error, as if the stack is empty at that point. However, if we take a look at basic block `BB2` which jumps back to `BB1` we can see that is not true.\r\n\r\nGood find!  Thanks for investigating this, @ivanpovazan ",
                                           "updatedAt":  "2022-04-16T15:56:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CofkS",
                                           "createdAt":  "2022-05-04T20:45:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbTcsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-05-04T22:08:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@ivanpovazan forgot to ask: does (5) only fail with interpreter? Or will there need to be a PR for the JIT, too, in addition to https://github.com/dotnet/runtime/pull/68855?",
                                           "updatedAt":  "2022-05-04T20:45:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Coq0N",
                                           "createdAt":  "2022-05-04T21:33:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@lambdageek I also forgot to mention (sorry for that) that there is a problem with JIT as well.\r\n\r\nMy initial plan was to create two separate issues, one for the interpreter and another one for the JIT, but I guess two separate PRs would also work. What do you think?",
                                           "updatedAt":  "2022-05-04T22:09:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Co_UP",
                                           "createdAt":  "2022-05-05T00:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbV4Sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-05-05T07:06:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e @lambdageek I also forgot to mention (sorry for that) that there is a problem with JIT as well.\r\n\u003e \r\n\u003e My initial plan was to create two separate issues, one for the interpreter and another one for the JIT, but I guess two separate PRs would also work. What do you think?\r\n\r\n@ivanpovazan  Two issues - one for the interpreter and one for the JIT; and two PRs to fix them. :smile: \r\nAlso add links to the issues to the description of this issue.",
                                           "updatedAt":  "2022-05-05T00:11:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HnJN0",
                                           "createdAt":  "2022-08-01T16:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Moving to 8.0.0",
                                           "updatedAt":  "2022-08-01T16:36:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hNkVz",
                                           "createdAt":  "2023-07-11T14:33:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-11T14:33:54Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "CoreCLR tests on Mono runtime : Tests failing with Invalid_IL errors",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34286",
        "createdAt":  "2020-03-30T18:46:12Z",
        "number":  34286,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-16T11:25:27Z",
        "body":  "RyuJIT\u0027s heuristics (at least some of them) for inlining can be re-used in Mono since our inliner is quite conservative and only takes IL size into account (20 bytes for Jit, 30 bytes for LLVM-backend). \r\nRyuJIT also estimates native code size and is able to inline methods above the threshold. It uses so called observations and increases/decreases benefit multiplier based on them (Also, performance and size impact), e.g.:\r\n\r\n- Inline candidate has SIMD type args, locals or return value.  Multiplier increased to %g\r\n- Inline candidate looks like a wrapper method.  Multiplier increased to %g\r\n- Inline candidate has an arg that feeds a constant test.  Multiplier increased to %g\r\n- Inline candidate is mostly loads and stores.  Multiplier increased to %g\r\n- Inline candidate has arg that feeds range check.  Multiplier increased to %g\r\n- Inline candidate has const arg that feeds a conditional.  Multiplier increased to %g\r\n- Prejit root candidate has arg that feeds a conditional.  Multiplier increased to %g\r\n- Inline candidate callsite is rare.  Multiplier limited to %g\r\n- Inline candidate callsite is boring.  Multiplier increased to %g\r\n- Inline candidate callsite is warm.  Multiplier increased to %g\r\n- Inline candidate callsite is in a loop.  Multiplier increased to %g\r\n- Inline candidate callsite is hot.  Multiplier increased to %g\r\n- multiplier in instance constructors increased to %g\r\n- multiplier in methods of promotable struct increased to %g\r\n\r\nwe can start from some simple heuristics e.g. `Inline candidate has an arg that feeds a constant test` to inline methods above our IL size limit, e.g.:\r\n```csharp\r\npublic bool IsValid(IntPtr handle)\r\n{\r\n    return handle != IntPtr.Zero; // will IntPtr.op_Inequality be inlined here?\r\n}\r\n```\r\nIL for `System.IntPtr:op_Inequality(long,long):bool :`\r\n```asm\r\nIL_0000  ldarga.s     0x0\r\nIL_0002  ldfld        0x4000402\r\nIL_0007  ldarga.s     0x1\r\nIL_0009  ldfld        0x4000402\r\nIL_000e  ceq\r\nIL_0010  ldc.i4.0\r\nIL_0011  ceq\r\nIL_0013  ret\r\n```\r\nRyuJIT\u0027s log:\r\n```\r\nmultiplier in methods of promotable struct increased to 3.\r\nInline candidate has an arg that feeds a constant test.  Multiplier increased to 4.\r\nInline candidate is mostly loads and stores.  Multiplier increased to 7.\r\nInline candidate has const arg that feeds a conditional.  Multiplier increased to 10. \u003c-- !!!\r\nInline candidate callsite is boring.  Multiplier increased to 11.3.\r\ncalleeNativeSizeEstimate=112\r\ncallsiteNativeSizeEstimate=115\r\nbenefit multiplier=11.3\r\nthreshold=1299\r\nNative estimate for function size is within threshold for inlining 11.2 \u003c= 129.9 (multiplier = 11.3)\r\n(success!)\r\n```\r\nWhile Mono-JIT (without LLVM) simply refuses to inline it based on `IntPtr.op_Inequality`\u0027s IL size ([here](https://github.com/dotnet/runtime/blob/b186c975c02a5ce0b45d86fb99063db127979894/src/mono/mono/mini/method-to-ir.c#L3889-L3890)). So even a simple \"candidate has const arg that feeds a conditional\" multiplier could help to jump over the limit and get a faster and smaller codegen for this case.\r\n\r\n/cc @BrzVlad @vargaz @lewurm @marek-safar \r\n\r\nI recently tried to implement my own RyuJIT heuristic just to learn how it works: https://github.com/dotnet/runtime/issues/33338#issuecomment-596149604",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYlpHPg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjE4MDMxMg==",
                                           "createdAt":  "2020-03-30T18:57:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "I\u0027m not sure how long this would take to do, but as quick workaround we could also mark methods from IntPtr class as AggressiveInlining",
                                           "updatedAt":  "2020-03-30T18:57:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjE4NjMwMA==",
                                           "createdAt":  "2020-03-30T19:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfNCBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2020-03-30T19:18:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewurm",
                                                                               "createdAt":  "2020-03-31T06:26:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-08-01T15:28:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2022-06-07T13:08:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BoyBaykiller",
                                                                               "createdAt":  "2025-08-22T02:21:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "FWIW I have ambitions about rewriting all the RyuJit inlining heuristics at some point. Some of what\u0027s there is worth keeping, but there are lots of areas that need improving.\r\n\r\nPros: \r\n* observations -\u003e heuristics -\u003e decision is the right overall approach.\r\n\r\nCons: \r\n* RyuJit code size model is based on some outdated, x86 based \"state machine\" and is not very accurate. This perhaps should take machine details (ABI, etc) into account, but it might be better for inlining decisions not to depend (or to only weakly depend) on target machine/abi.\r\n* inline observations are driven by an IL walk with very crude stack model, and so are not very accurate\r\n* heuristic weights are totally ad-hoc; I\u0027d hoped to derive these via machine learning, but ran into various complications (see [notes](https://github.com/AndyAyersMS/PerformanceExplorer/blob/master/notes/notes-aug-2016.md))\r\n   * good news was that (for RyuJit) at least code size estimate seemed like something that could be modeled fairly well\r\n   * performance impact was not well modeled\r\n\r\nChallenges:\r\n* Ultimately profitability needs to incorporate profile feedback in some form, whether it be online, offline, or synthetic\r\n* User code base now expects certain behavior from inlining; any change in this area that is not strictly \"inline more\" will result in regressions; hard to land such a change if regression tolerance is low.\r\n* Inlining more will also result in regressions, though perhaps more subtle and harder to spot, but almost certainly, jit will be slower",
                                           "updatedAt":  "2020-03-30T19:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTQyNDI2Mw==",
                                           "createdAt":  "2020-04-05T14:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "It seems to be a recurring theme that some optimizations are too expensive because the necessary analysis is not available yet or is too expensive altogether. For example, the [design document](https://github.com/AndyAyersMS/PerformanceExplorer/blob/master/notes/notes-aug-2016.md) says:\r\n\r\n\u003e Currently the jit walks it is IR in linear fashion deciding whether to inline each time it sees a candidate. If the decision is yes then the inlined code is spliced in place of the call and (because of the order of the walk) immediately scanned for inlining candidates. Thus the inlining is performed \"depth first\" and is done without much knowledge of the number or location of other candidates in the code stream. Inlining is done very early on before any significant analysis has been done to the IR -- there is a flow graph but no loop nesting, dataflow, or profile estimates are generally available.\r\n\r\nCould precomputation help with this? There could be a build step that analyzes a set of assemblies and writes a summary useful for optimizations to disk. The summary could contain a call graph, for example. It could also contain profile data.\r\n\r\nThe analysis tool could also concretely evaluate every possible inlining decision by performing the inlining and then simplifying. This would expose inlining opportunities that result in code size reduction but that are not obvious to any simple heuristic.\r\n\r\nData useful for optimizations other than inlining could be included as well. A data flow summary comes to mind (e.g. \"this variable can never be null; this other variable always is greater than zero\").\r\n\r\nThis technique would not be AOT. The data would not be machine-specific or versioning-brittle.\r\n",
                                           "updatedAt":  "2020-04-05T14:23:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMDAxMTExMQ==",
                                           "createdAt":  "2020-04-06T20:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBAV6mA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-04-07T07:40:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "\u003e Could precomputation help with this? Data useful for optimizations other than inlining could be included as well...\r\n\r\nYes, it is one of the things we plan to look into -- using precompilation analysis to leave information for jitting, either as \"facts\" or \"hints\".\r\n\r\n\u003e The analysis tool could also concretely evaluate every possible inlining decision\r\n\r\nCombinatorics makes this infeasible. If there are N top level call sites, there are 2^N possible ways to inline, all of which may produce different codegen.\r\n",
                                           "updatedAt":  "2020-04-06T20:10:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iWkc-",
                                           "createdAt":  "2023-07-25T15:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@jandupej - something for 9.0",
                                           "updatedAt":  "2023-07-25T15:42:15Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[mono] Improve inliner, re-use RyuJIT heuristics",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45575",
        "createdAt":  "2020-12-04T00:51:12Z",
        "number":  45575,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-08T04:43:53Z",
        "body":  "We sometimes get this assertion when running the System.Xml.Xsl.XslCompiledTransformApi.Tests and other testsuites on physical Android devices on Helix:\r\n\r\n```\r\n12-03 09:50:00.593 17685 17708 D DOTNET  : ((null) error) * Assertion at /__w/1/s/src/mono/mono/metadata/jit-info.c:736, condition `IS_JIT_INFO_TOMBSTONE (chunk-\u003edata [pos])\u0027 not met\r\n```\r\n\r\nLogcat: \r\n[adb-logcat-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.log](https://github.com/dotnet/runtime/files/5639906/adb-logcat-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.log)\r\n\r\nADB bugreport .zip: \r\n[adb-bugreport-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.zip](https://github.com/dotnet/runtime/files/5639911/adb-bugreport-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.zip)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORSmVyw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODQ3ODM1NQ==",
                                           "createdAt":  "2020-12-04T00:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: \nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe sometimes get this assertion when running the System.Xml.Xsl.XslCompiledTransformApi.Tests testsuite on physical Android devices on Helix:\r\n\r\n```\r\n12-03 09:50:00.593 17685 17708 D DOTNET  : ((null) error) * Assertion at /__w/1/s/src/mono/mono/metadata/jit-info.c:736, condition `IS_JIT_INFO_TOMBSTONE (chunk-\u003edata [pos])\u0027 not met\r\n```\r\n\r\nLogcat: \r\n[adb-logcat-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.log](https://github.com/dotnet/runtime/files/5639906/adb-logcat-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.log)\r\n\r\nADB bugreport .zip: \r\n[adb-bugreport-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.zip](https://github.com/dotnet/runtime/files/5639911/adb-bugreport-net.dot.System.Xml.Xsl.XslCompiledTransformApi.Tests.zip)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eakoeplinger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Codegen-JIT-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-04T00:51:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODQ3ODk5OA==",
                                           "createdAt":  "2020-12-04T00:53:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@vargaz any idea?",
                                           "updatedAt":  "2020-12-04T00:53:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FKZXL",
                                           "createdAt":  "2022-06-20T11:55:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Another hit in Rolling build [1832161](https://runfo.azurewebsites.net/view/build/?number=1832161) (6/18 AM).\r\n\r\nHits in [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.xml.xsl.xslcompiledtransformapi.tests+work+item%22) (as of 6/20):\r\n- Rolling build [1832161](https://runfo.azurewebsites.net/view/build/?number=1832161) (6/18 AM) - net7.0-Android-Release-arm64-Mono_Release-Windows.10.Amd64.Android.Open\r\n- PR [1830665](https://runfo.azurewebsites.net/view/build/?number=1830665) (6/17) - net7.0-Android-Release-arm-Mono_Release-Windows.10.Amd64.Android.Open\r\n- Rolling build [1820087](https://runfo.azurewebsites.net/view/build/?number=1820087) (6/12) - net7.0-MacCatalyst-Release-arm64-Mono_Release-OSX.1100.Arm64.Open\r\n- Note: 2 older runs failed from different reason, they didn\u0027t crash.",
                                           "updatedAt":  "2022-06-20T11:55:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Mono][Sporadic]Assertion during System.Xml.Xsl.XslCompiledTransformApi.Tests on Android devices",
        "labels":  [
                       "os-android",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60649",
        "createdAt":  "2021-10-19T19:00:24Z",
        "number":  60649,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T18:48:33Z",
        "body":  "The DllImportGenerator test DllImportGenerator.IntegrationTests.BooleanTests.ValidateBoolIsMarshalledAsExpected fails on Mono ARM64 due to inconsistencies with sign extension.\r\n\r\nThis assert fails: https://github.com/dotnet/runtime/blob/93623234bf4d15325e80cefcab8769483a8dbda6/src/libraries/System.Runtime.InteropServices/tests/DllImportGenerator.Tests/BooleanTests.cs#L99 because the zero/sign extension is inconsistent with how the UnmanagedCallersOnly return at https://github.com/dotnet/runtime/blob/b201a16e1a642f9532c8ea4e42d23af8f4484a36/src/libraries/System.Runtime.InteropServices/tests/TestAssets/NativeExports/Booleans.cs#L19 is extended.\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [DllImportGenerator.IntegrationTests.BooleanTests.ValidateBoolIsMarshalledAsExpected](https://runfo.azurewebsites.net/tracking/issue/197)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVh1TA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44f9Dz",
                                           "createdAt":  "2021-10-20T17:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "This is failing rolling builds -- if this was a recently introduced regression, can we revert and resubmit?",
                                           "updatedAt":  "2021-10-20T17:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44f9iY",
                                           "createdAt":  "2021-10-20T17:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB_I22w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2021-10-20T17:55:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2021-10-20T18:01:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "This is a long standing bug that was discovered by merging in the DllImportGenerator.\r\n\r\nWe can add an `[ActiveIssue]` attribute to the failing test and point it to this issue.",
                                           "updatedAt":  "2021-10-20T17:53:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44f-Cm",
                                           "createdAt":  "2021-10-20T17:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Either disabling the issue or reverting the DllImport merge would be good. Whichever one we choose should be based on whether this issue would be considered blocking",
                                           "updatedAt":  "2021-10-20T17:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44f-OI",
                                           "createdAt":  "2021-10-20T17:57:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I think that given the scope of the merge, disabling the test is the correct approach.",
                                           "updatedAt":  "2021-10-20T17:57:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44f-l2",
                                           "createdAt":  "2021-10-20T17:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "At this point, I think disabling the test is fine. @fanyang-mono to follow up.  We should also figure out if the test lanes were enabled as part of PR runs, why this wasn\u0027t caught prior to merging. (Totally understand if this is a rolling build only test run).\r\n",
                                           "updatedAt":  "2021-10-20T17:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hWHVM",
                                           "createdAt":  "2023-07-12T20:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-12T20:40:47Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Mono ARM64 JIT inconsistent with sign-extension",
        "labels":  [
                       "arch-arm64",
                       "disabled-test",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65702",
        "createdAt":  "2022-02-22T11:03:09Z",
        "number":  65702,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-18T09:29:03Z",
        "body":  "### Description\n\nMono runtime currently fails to execute the following CoreCLR runtime tests:\r\n\r\nJIT/jit64/mcc/interop/mcc_i37/\r\nJIT/jit64/mcc/interop/mcc_i57/\r\nJIT/jit64/mcc/interop/mcc_i67/\r\nJIT/jit64/mcc/interop/mcc_i77/\r\nJIT/jit64/mcc/interop/mcc_i87/\r\n\r\nThe tests fails since Mono Windows since value type x64 ABI pass pointer to stack allocated struct (3, 5, 6, 7 or bigger than 8 bytes) in register or in stack slot when calling another method. In the tests above, a tail call is performed using a jmp IL instruction to a p/invoke method. As part of lowering the tail call we copy converted arguments into the calling functions argument area and then restore RSP, https://github.com/dotnet/runtime/blob/8471eecd98e5493e3fbc8bcc34662310ef8762eb/src/mono/mono/mini/mini-amd64.c#L5487. Since Windows x64 ABI pass addresses to stack area for value types (of size different than 1,2,4,8), the copied arguments will now point into the collapsed frame, leading to unknown behavior. This might not be as big of an issue on other ABI\u0027s that always pass full value type value directly on stack, since the complete value will be copied by current code and there will be no references to stack memory in arguments passed to function.\r\n\r\nThese tests have been marked as not supported on none Windows platforms have not been previously run on Mono. Issue detected when enabling CoreCLR runtime tests running on Mono Windows, https://github.com/dotnet/runtime/pull/64281. As part of that PR, the tests have been disabled on Mono and marked with this issue for future tracking.\n\n### Reproduction Steps\n\nBuild and run individual runtime test on Windows Mono as described here, https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/mono/testing.md\n\n### Expected behavior\n\nFollowing tests should pass:\r\n\r\nJIT/jit64/mcc/interop/mcc_i37/\r\nJIT/jit64/mcc/interop/mcc_i57/\r\nJIT/jit64/mcc/interop/mcc_i67/\r\nJIT/jit64/mcc/interop/mcc_i77/\r\nJIT/jit64/mcc/interop/mcc_i87/\n\n### Actual behavior\n\nFollowing tests fails and have been disabled due to this issue:\r\n\r\nJIT/jit64/mcc/interop/mcc_i37/\r\nJIT/jit64/mcc/interop/mcc_i57/\r\nJIT/jit64/mcc/interop/mcc_i67/\r\nJIT/jit64/mcc/interop/mcc_i77/\r\nJIT/jit64/mcc/interop/mcc_i87/\n\n### Regression?\n\nNo, this has never worked on Mono.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono]: Tailcall p/invoke using struct value type together with jmp IL instruction fails on Mono Windows x64.",
        "labels":  [
                       "os-windows",
                       "area-Codegen-JIT-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65704",
        "createdAt":  "2022-02-22T11:22:56Z",
        "number":  65704,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-18T09:28:32Z",
        "body":  "### Description\r\n\r\nMono runtime currently fails to execute the following CoreCLR runtime tests:\r\n\r\n/JIT/Methodical/eh/finallyexec/loopinfinally_do/\r\nJIT/Methodical/eh/finallyexec/loopinfinally_ro/\r\n\r\nThe tests uses the following construction:\r\n\r\n```\r\nfinally\r\n{\r\n      inside_finally:\r\n      Console.WriteLine(\"In finally, i = {0}\", i);\r\n      i++;\r\n      if (i % 2 == 0) goto inside_finally;\r\n}\r\n```\r\n\r\nWhen we lower this block we will add a save of RSP into RBP as well as sub size of param_area on platforms using it:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4b8bb2d48dd362a8e5f48987f366ed01321cac14/src/mono/mono/mini/mini-amd64.c#L5793\r\n\r\nand when we leave the finally block we will restore RSP\r\n\r\nhttps://github.com/dotnet/runtime/blob/4b8bb2d48dd362a8e5f48987f366ed01321cac14/src/mono/mono/mini/mini-amd64.c#L5808\r\n\r\nThe problem is when we jump, since we will jump back to start of BB, so we will continue to decrement RSP with param_area for each iteration, and that will crash when we exit the finally block (since it won\u0027t adjust for all decrements of RSP).\r\n\r\nThis is an issue on all platforms using an ABI that have a param_area that is larger than 0, currently true on Windows x64 using 32 byte param_area.\r\n\r\nIssue detected when enabling CoreCLR runtime tests running on Mono Windows, https://github.com/dotnet/runtime/pull/64281. As part of that PR, the tests have been disabled on Mono and marked with this issue for future tracking.\r\n\r\n### Reproduction Steps\r\n\r\nBuild and run individual runtime test on Windows Mono as described here, https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/mono/testing.md\r\n\r\n### Expected behavior\r\n\r\nFollowing tests should pass:\r\n\r\n/JIT/Methodical/eh/finallyexec/loopinfinally_do/\r\nJIT/Methodical/eh/finallyexec/loopinfinally_ro/\r\n\r\n### Actual behavior\r\n\r\nFollowing tests fails and have been disabled due to this issue:\r\n\r\n/JIT/Methodical/eh/finallyexec/loopinfinally_do/\r\nJIT/Methodical/eh/finallyexec/loopinfinally_ro/\r\n\r\n### Regression?\r\n\r\nNo, this has never worked on Mono.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcBn6sg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GmkT9",
                                           "createdAt":  "2022-07-14T14:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@lateralusX I tagged this one for 7, but maybe it\u0027s ok to push back to 8?  the issue seems well-understood and I guess a fix might be to emit the handler preamble into a separate BB before the body of the finally clause so that branches back to the start of the finally do not re-execute it. not sure how easy that would be to do in method-to-ir.",
                                           "updatedAt":  "2022-07-14T14:26:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GmnkF",
                                           "createdAt":  "2022-07-14T14:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "I think we can push it to 8, its a special case when using goto inside a finally clause and the solution is emitting two different basic blocks, one when entering the finally clause and the other that will be the goto target, but if I recalled correctly the change had some implications on the current logic so was not trivial to do, at least not when I decided to file the issue instead of fixing it right away.",
                                           "updatedAt":  "2022-07-14T14:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IMU3u",
                                           "createdAt":  "2022-08-10T19:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 8.0.0 and assigning to @lateralusX for tracking",
                                           "updatedAt":  "2022-08-10T19:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v8WkZ",
                                           "createdAt":  "2024-01-05T04:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xinlong-Wu",
                                           "body":  "Hi, I got same problem on RISCV64 Arch. Do we have any progress on this issue?\r\n\r\n---\r\ncc: https://github.com/dotnet/runtime/issues/96117",
                                           "updatedAt":  "2024-01-05T04:05:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wGfqy",
                                           "createdAt":  "2024-01-08T10:37:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "Since we didn\u0027t hit this issue on official supported platforms (not depending on a param area like Win x64 ABI does) and since its a corner case, a fix has not been prioritized or planned (issue marked as future at the moment).",
                                           "updatedAt":  "2024-01-08T10:38:45Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[Mono]: JIT/Methodical/eh/finallyexec/loopinfinally_do and JIT/Methodical/eh/finallyexec/loopinfinally_ro fails on Mono Windows.",
        "labels":  [
                       "os-windows",
                       "area-Codegen-JIT-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66220",
        "createdAt":  "2022-03-04T21:55:43Z",
        "number":  66220,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-22T23:51:58Z",
        "body":  "The suite will crash when running https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NumberHandlingTests.cs#L376\r\n\r\nOn debug, an assert is triggered at https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/mono/mono/metadata/object-internals.h#L2008\r\n\r\nHere are the first handful of frames that may help:\r\n\r\n```\r\n frame #0: 0x0000000100b8397c System.Text.Json.Tests`mono_object_unbox_internal(obj=0x0000000000000001) at object-internals.h:2008:2\r\n    frame #1: 0x0000000100b83898 System.Text.Json.Tests`mono_nullable_init(buf=\"\\U00000001\", value=0x0000000000000001, klass=0x000000012c9a3048) at object.c:3461:46\r\n    frame #2: 0x0000000100cf8f0c System.Text.Json.Tests`mono_arch_start_dyn_call(info=0x00000002836ffba0, args=0x000000016fe21ef0, ret=\"P \\xe2o\\U00000001\", buf=\"\") at mini-arm64.c:1914:6\r\n    frame #3: 0x0000000100cb0910 System.Text.Json.Tests`mono_jit_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x000000016fe21fb0, error=0x000000016fe22148) at mini-runtime.c:3465:3\r\n    frame #4: 0x0000000100b818e4 System.Text.Json.Tests`do_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x0000000000000000, error=0x000000016fe22148) at object.c:2397:11\r\n    frame #5: 0x0000000100b7cda0 System.Text.Json.Tests`mono_runtime_invoke_checked(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, error=0x000000016fe22148) at object.c:2565:9\r\n    frame #6: 0x0000000100cbaa08 System.Text.Json.Tests`mono_gsharedvt_constrained_call(mp=0x000000016fe22330, cmethod=0x0000000281292820, klass=0x0000000130ae0dc8, deref_args=\"\\U00000002\", args=0x000000016fe221c8) at jit-icalls.c:1473:6\r\n    frame #7: 0x0000000104fd5d18 System.Text.Json.Tests`wrapper_managed_to_native_object___icall_wrapper_mono_gsharedvt_constrained_call_intptr_intptr_intptr_intptr_intptr + 152\r\n    frame #8: 0x000000010695d218 System.Text.Json.Tests`System_Text_Json_Serialization_Converters_ICollectionOfTConverter_2_TCollection_GSHAREDVT_TElement_GSHAREDVT_Add_TElement_GSHAREDVT_modreqSystem_Runtime_InteropServices_InAttribute__System_Text_Json_ReadStack_(this=0x0000000119004238, value=6172058768, state=6172059824) at \u003cunknown\u003e:1\r\n    frame #9: 0x00000001050e8a1c System.Text.Json.Tests`gsharedvt_out_trampoline + 220\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPyeauQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_J5m_",
                                           "createdAt":  "2022-03-04T21:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe suite will crash when running https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NumberHandlingTests.cs#L376\r\n\r\nOn debug, an assert is triggered at https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/mono/mono/metadata/object-internals.h#L2008\r\n\r\nHere are the first handful of frames that may help:\r\n\r\n```\r\n frame #0: 0x0000000100b8397c System.Text.Json.Tests`mono_object_unbox_internal(obj=0x0000000000000001) at object-internals.h:2008:2\r\n    frame #1: 0x0000000100b83898 System.Text.Json.Tests`mono_nullable_init(buf=\"\\U00000001\", value=0x0000000000000001, klass=0x000000012c9a3048) at object.c:3461:46\r\n    frame #2: 0x0000000100cf8f0c System.Text.Json.Tests`mono_arch_start_dyn_call(info=0x00000002836ffba0, args=0x000000016fe21ef0, ret=\"P \\xe2o\\U00000001\", buf=\"\") at mini-arm64.c:1914:6\r\n    frame #3: 0x0000000100cb0910 System.Text.Json.Tests`mono_jit_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x000000016fe21fb0, error=0x000000016fe22148) at mini-runtime.c:3465:3\r\n    frame #4: 0x0000000100b818e4 System.Text.Json.Tests`do_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x0000000000000000, error=0x000000016fe22148) at object.c:2397:11\r\n    frame #5: 0x0000000100b7cda0 System.Text.Json.Tests`mono_runtime_invoke_checked(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, error=0x000000016fe22148) at object.c:2565:9\r\n    frame #6: 0x0000000100cbaa08 System.Text.Json.Tests`mono_gsharedvt_constrained_call(mp=0x000000016fe22330, cmethod=0x0000000281292820, klass=0x0000000130ae0dc8, deref_args=\"\\U00000002\", args=0x000000016fe221c8) at jit-icalls.c:1473:6\r\n    frame #7: 0x0000000104fd5d18 System.Text.Json.Tests`wrapper_managed_to_native_object___icall_wrapper_mono_gsharedvt_constrained_call_intptr_intptr_intptr_intptr_intptr + 152\r\n    frame #8: 0x000000010695d218 System.Text.Json.Tests`System_Text_Json_Serialization_Converters_ICollectionOfTConverter_2_TCollection_GSHAREDVT_TElement_GSHAREDVT_Add_TElement_GSHAREDVT_modreqSystem_Runtime_InteropServices_InAttribute__System_Text_Json_ReadStack_(this=0x0000000119004238, value=6172058768, state=6172059824) at \u003cunknown\u003e:1\r\n    frame #9: 0x00000001050e8a1c System.Text.Json.Tests`gsharedvt_out_trampoline + 220\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-04T21:55:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_J5oO",
                                           "createdAt":  "2022-03-04T21:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe suite will crash when running https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NumberHandlingTests.cs#L376\r\n\r\nOn debug, an assert is triggered at https://github.com/dotnet/runtime/blob/5d2da719731b4711bdda13f69c2ffdabf6ad74c0/src/mono/mono/metadata/object-internals.h#L2008\r\n\r\nHere are the first handful of frames that may help:\r\n\r\n```\r\n frame #0: 0x0000000100b8397c System.Text.Json.Tests`mono_object_unbox_internal(obj=0x0000000000000001) at object-internals.h:2008:2\r\n    frame #1: 0x0000000100b83898 System.Text.Json.Tests`mono_nullable_init(buf=\"\\U00000001\", value=0x0000000000000001, klass=0x000000012c9a3048) at object.c:3461:46\r\n    frame #2: 0x0000000100cf8f0c System.Text.Json.Tests`mono_arch_start_dyn_call(info=0x00000002836ffba0, args=0x000000016fe21ef0, ret=\"P \\xe2o\\U00000001\", buf=\"\") at mini-arm64.c:1914:6\r\n    frame #3: 0x0000000100cb0910 System.Text.Json.Tests`mono_jit_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x000000016fe21fb0, error=0x000000016fe22148) at mini-runtime.c:3465:3\r\n    frame #4: 0x0000000100b818e4 System.Text.Json.Tests`do_runtime_invoke(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, exc=0x0000000000000000, error=0x000000016fe22148) at object.c:2397:11\r\n    frame #5: 0x0000000100b7cda0 System.Text.Json.Tests`mono_runtime_invoke_checked(method=0x000000028129eb20, obj=0x0000000119004878, params=0x000000016fe221c8, error=0x000000016fe22148) at object.c:2565:9\r\n    frame #6: 0x0000000100cbaa08 System.Text.Json.Tests`mono_gsharedvt_constrained_call(mp=0x000000016fe22330, cmethod=0x0000000281292820, klass=0x0000000130ae0dc8, deref_args=\"\\U00000002\", args=0x000000016fe221c8) at jit-icalls.c:1473:6\r\n    frame #7: 0x0000000104fd5d18 System.Text.Json.Tests`wrapper_managed_to_native_object___icall_wrapper_mono_gsharedvt_constrained_call_intptr_intptr_intptr_intptr_intptr + 152\r\n    frame #8: 0x000000010695d218 System.Text.Json.Tests`System_Text_Json_Serialization_Converters_ICollectionOfTConverter_2_TCollection_GSHAREDVT_TElement_GSHAREDVT_Add_TElement_GSHAREDVT_modreqSystem_Runtime_InteropServices_InAttribute__System_Text_Json_ReadStack_(this=0x0000000119004238, value=6172058768, state=6172059824) at \u003cunknown\u003e:1\r\n    frame #9: 0x00000001050e8a1c System.Text.Json.Tests`gsharedvt_out_trampoline + 220\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-04T21:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_J5q5",
                                           "createdAt":  "2022-03-04T21:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @vargaz @lambdageek ",
                                           "updatedAt":  "2022-03-04T21:56:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[iOS] [System.Text.Json] Number_AsCollectionElement_RoundTrip test failure on device",
        "labels":  [
                       "area-Codegen-JIT-mono",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70279",
        "createdAt":  "2022-06-06T13:02:29Z",
        "number":  70279,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T14:30:44Z",
        "body":  "Mono fails on the regression test added in #70269.\r\n```scala\r\n    JIT/Regression/JitBlue/Runtime_70259/Runtime_70259/Runtime_70259.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.BadImageFormatException: Method has no body\r\n      File name: \u0027Runtime_70259\u0027\r\n         at Runtime_70259.Main()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.BadImageFormatException: Method has no body\r\n      File name: \u0027Runtime_70259\u0027\r\n         at Runtime_70259.Main()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORGRGjA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EZEaM",
                                           "createdAt":  "2022-06-06T13:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-06T13:02:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Mono: `BadImageFormatException: Method has no body` on tailcall to open delegate bound to interface method",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71656",
        "createdAt":  "2022-07-05T18:02:06Z",
        "number":  71656,
        "author":  "davidwrighton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-30T14:05:37Z",
        "body":  "### Description\r\n\r\nTest fails on aot, minijit and monointerpreter test legs\r\n\r\n### Reproduction Steps\r\n\r\nRun the test from src/tests/JIT/Directed/Arrays/nintindexoutofrange.csproj on a 64bit mono platform, notice that it fails.\r\n\r\n### Expected behavior\r\n\r\nIt passes\r\n\r\n### Actual behavior\r\n\r\nVarious errors like:\r\n```\r\nReturn code:      1\r\nRaw output file:      /datadisks/disk1/work/A8A308BD/w/A74C08E0/uploads/Reports/JIT.Directed/Arrays/nintindexoutofrange/nintindexoutofrange.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/datadisks/disk1/work/A8A308BD/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false nintindexoutofrange.dll \u0027\u0027\r\nFailed to throw IndexOutOfRange when storing null\r\nFailed to throw IndexOutOfRange when storing object\r\nFailed to throw IndexOutOfRange when accessing element\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\n```\r\nor \r\n```\r\n=================================================================\r\nExternal Debugger Dump:\r\n[New LWP 857]\r\n[New LWP 858]\r\n[New LWP 859]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/aarch64-linux-gnu/libthread_db.so.1\".\r\nwarning: the debug information found in \"/root/helix/work/correlation/libcoreclr.so.dbg\" does not match \"/root/helix/work/correlation/libcoreclr.so\" (CRC mismatch).\r\n\r\n0x0000007fa816ed5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0x7fc3bb3c80, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n30../sysdeps/unix/sysv/linux/waitpid.c: No such file or directory.\r\nId   Target Id         Frame\r\n\r\n1    Thread 0x7fa81bf020 (LWP 851) \"corerun\" 0x0000007fa816ed5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0x7fc3bb3c80, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n2    Thread 0x7fa57ff1d0 (LWP 857) \"SGen worker\" 0x0000007fa816a2a4 in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fa7d4f1b8) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n3    Thread 0x7fa2bda1d0 (LWP 858) \"corerun\" 0x0000007fa7e59e28 in __GI___poll (fds=0x7f94003af0, nfds=548251910422, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n4    Thread 0x7fa29d91d0 (LWP 859) \"Finalizer\" 0x0000007fa816ca40 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa7d401e8) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\nThread 4 (Thread 0x7fa29d91d0 (LWP 859)):\r\n\r\n0  0x0000007fa816ca40 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa7d401e8) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n1  do_futex_wait (sem=sem@entry=0x7fa7d401e8, abstime=0x0) at sem_waitcommon.c:111\r\n2  0x0000007fa816cb60 in __new_sem_wait_slow (sem=0x7fa7d401e8, abstime=0x0) at sem_waitcommon.c:181\r\n3  0x0000007fa6930e30 in ?? () from /root/helix/work/correlation/libcoreclr.so\r\n4  0x0000007f9c000b20 in ?? ()\r\nBacktrace stopped: previous frame inner to this frame (corrupt stack?)\r\n\r\nThread 3 (Thread 0x7fa2bda1d0 (LWP 858)):\r\n\r\n0  0x0000007fa7e59e28 in __GI___poll (fds=0x7f94003af0, nfds=548251910422, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n1  0x0000007fa6b56504 in ?? () from /root/helix/work/correlation/libcoreclr.so\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n\r\nThread 2 (Thread 0x7fa57ff1d0 (LWP 857)):\r\n\r\n0  0x0000007fa816a2a4 in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fa7d4f1b8) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fa7d4f160, cond=0x7fa7d4f190) at pthread_cond_wait.c:502\r\n2  __pthread_cond_wait (cond=0x7fa7d4f190, mutex=0x7fa7d4f160) at pthread_cond_wait.c:655\r\n3  0x0000007fa69abdc0 in ?? () from /root/helix/work/correlation/libcoreclr.so\r\n4  0x0000007fa7e62ffc in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\nThread 1 (Thread 0x7fa81bf020 (LWP 851)):\r\n\r\n0  0x0000007fa816ed5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0x7fc3bb3c80, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n1  0x0000007fa6aa0d54 in ?? () from /root/helix/work/correlation/libcoreclr.so\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n/root/helix/work/workitem/e/JIT/Directed/Arrays/nintindexoutofrange/nintindexoutofrange.sh: line 373:   851 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/JIT.Directed/Arrays/nintindexoutofrange/nintindexoutofrange.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false nintindexoutofrange.dll \u0027\u0027\r\n\r\n=================================================================\r\nNative Crash Reporting\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nDon\u0027t use a native int as an array index.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYuB6wQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GDlG4",
                                           "createdAt":  "2022-07-05T18:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-05T18:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDlZe",
                                           "createdAt":  "2022-07-05T18:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "@lambdageek for visibility. Please route this to the right group.",
                                           "updatedAt":  "2022-07-05T18:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i4HrB",
                                           "createdAt":  "2023-07-31T17:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-31T17:48:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Mono fails new test src/tests/JIT/Directed/Arrays/nintindexoutofrange.csproj",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76597",
        "createdAt":  "2022-10-04T08:46:51Z",
        "number":  76597,
        "author":  "jandupej",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-09T15:31:06Z",
        "body":  "When JITting the following function\r\n```cs\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nstatic float Add(float x, float y)\r\n{\r\n    return x + y;\r\n}\r\n```\r\nthis code is generated on arm64 Mac:\r\n```asm\r\nloWorld_Program_Add__single_single_:\r\n0000000000000000        stp     x29, x30, [sp, #-0x20]! ; backing up x29,x30 which we should not need\r\n0000000000000004        mov     x29, sp                 ; backing up sp only for the redundant stores\r\n0000000000000008        str     s0, [x29, #0x10]        ; redundant store 1\r\n000000000000000c        str     s1, [x29, #0x18]        ; redundant store 2\r\n0000000000000010        ldr     s0, [x29, #0x10]        ; redundant load 1\r\n0000000000000014        ldr     s1, [x29, #0x18]        ; redundant load 2\r\n0000000000000018        fadd    s0, s0, s1\r\n000000000000001c        mov     sp, x29\r\n0000000000000020        ldp     x29, x30, [sp], #0x20\r\n0000000000000024        ret\r\n```\r\nThe function arguments are passed in regs `s0` and `s1`. They are stored to memory and then loaded again, degrading performance. The expected codegen would look more like this:\r\n```asm\r\nloWorld_Program_Add__single_single_:\r\n0000000000000000        fadd    s0, s0, s1\r\n0000000000000004        ret\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT5oeyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Pmh7L",
                                           "createdAt":  "2022-12-02T16:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Assigning to @jandupej for tracking",
                                           "updatedAt":  "2022-12-02T16:24:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono][jit] Codegen emits unnecessary stores and loads with FP function args",
        "labels":  [
                       "area-Codegen-JIT-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77513",
        "createdAt":  "2022-10-26T20:15:54Z",
        "number":  77513,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T14:59:32Z",
        "body":  "The following program:\r\n```csharp\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nC.TestMethod(false);\r\nConsole.WriteLine(\"Done\");\r\n\r\nstatic class C\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)] // doesn\u0027t matter, but JIC\r\n    public static int TestMethod(bool cond)\r\n    {\r\n        if (cond)\r\n        {\r\n            // never invoked in this program\r\n            return ClassB.X;\r\n        }\r\n        // always taken\r\n        return 0;\r\n    }\r\n}\r\n\r\npublic class ClassB\r\n{\r\n    public static readonly int X = GetX();\r\n\r\n    static int GetX()\r\n    {\r\n        Console.WriteLine(\"GetX call!\"); // not expected to be invoked in this program\r\n        return 42;\r\n    }\r\n}\r\n```\r\nOutput on Mono:\r\n```\r\nGetX call!\r\nDone\r\n```\r\nOutput on CoreCLR:\r\n```\r\nDone\r\n```\r\nIt\u0027s not wrong according to ECMA-335:\r\n```\r\n: BeforeFieldInit behavior is intended for initialization code with no interesting sideeffects, \r\nwhere exact timing does not matter. Also, under BeforeFieldInit semantics, type\r\ninitializers are allowed to be executed at or before first access to any static field of that type,\r\nat the discretion of the CLI.\r\n```\r\nHowever, it\u0027d be nice to align this behavior with CoreCLR to avoid potential issues like the one I\u0027ve hit in https://github.com/dotnet/runtime/pull/77398#issuecomment-1292041726. And, obviously, in this case Mono executed completely redundant code (did more work). I think I\u0027ve hit the same issue in the past where static initialization in Mono triggered DllImport leading to DllNotFoundException while CoreCLR didn\u0027t, can\u0027t find the issue.\r\n\r\nRelated issue: https://github.com/dotnet/runtime/issues/4346 (see https://github.com/dotnet/runtime/issues/4346#issuecomment-118460744)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhbde7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NC5G2",
                                           "createdAt":  "2022-10-26T20:15:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-26T20:15:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5czbBv",
                                           "createdAt":  "2023-05-22T10:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8JVYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeVladIonescu",
                                                                               "createdAt":  "2023-05-22T10:47:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@LeVladIonescu - please investigate this.",
                                           "updatedAt":  "2023-05-22T10:40:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j-QMN",
                                           "createdAt":  "2023-08-14T12:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@lambdageek - PR is up, but still encountering some CI failures. Moving this to 9.0.0",
                                           "updatedAt":  "2023-08-14T12:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j-ie1",
                                           "createdAt":  "2023-08-14T13:40:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDl4pQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2023-08-14T14:05:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeVladIonescu",
                                                                               "createdAt":  "2023-08-14T16:27:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@SamMonoRT please add postponed issues to the burndown project and set a priority - otherwise these issues just get left behind and we don\u0027t act on them for 11 months and then postpone them again.",
                                           "updatedAt":  "2023-08-14T13:40:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ft17v",
                                           "createdAt":  "2024-07-22T16:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "We should revive #86787 early in .NET 10.  static cctor order changes are hard to diagnose and this late in the net9 release it feels risky",
                                           "updatedAt":  "2024-07-22T16:42:55Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Mono\u0027s behavior around .beforefieldinit",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79557",
        "createdAt":  "2022-12-12T20:28:12Z",
        "number":  79557,
        "author":  "UnityAlex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-22T23:50:55Z",
        "body":  "### Description\n\nFiling bug as per request of @vargaz.\r\n\r\nI was unable to recreate a similar project outside Unity that reproduces the kind of heavy threaded jitting that reproduces this. We see this primarily on domain reload or on program startup. The code looks unchanged between mono/mono and dotnet/runtime so it is likely that the bug exists upstream as well. Only impacts Rosetta, native arm64 runtime is fine.\n\n### Reproduction Steps\n\nNo reproduction available outside Unity unfortunately. I can most likely provide a Unity project upon request.\n\n### Expected behavior\n\nNo crash.\n\n### Actual behavior\n\nCrash with the following callstack:\r\n\r\n```\r\nObtained 23 stack frames.\r\n#0  0x00000181e58e2e in mono_atomic_xchg_ptr\r\n#1  0x00000181e58901 in mono_arch_patch_callsite\r\n#2  0x00000181d2b59e in common_call_trampoline\r\n#3  0x00000181d2a46e in mono_magic_trampoline\r\n#4  0x0000017c3c9393 in (Unknown)\r\n#5  0x000001af3b1943 in  System.Threading.ExecutionContext:SetExecutionContext (System.Threading.ExecutionContext,bool) {0x7fc0d637b868} + 0x623 (0x1af3b1320 0x1af3b19df) [0x181542960 - Unity Child Domain]\r\n#6  0x0000018cce617b in  System.Threading.ExecutionContext:RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) {0x7fc0d637b510} + 0x5ab (0x18cce5bd0 0x18cce6309) [0x181542960 - Unity Child Domain]\r\n#7  0x0000018cce5b83 in  System.Threading.ExecutionContext:Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool) {0x7fc0d637b4b8} + 0x93 (0x18cce5af0 0x18cce5bc1) [0x181542960 - Unity Child Domain]\r\n#8  0x000001af3b0e07 in  System.Threading.Tasks.AwaitTaskContinuation:System.Threading.IThreadPoolWorkItem.ExecuteWorkItem () {0x7fc0c66da128} + 0x97 (0x1af3b0d70 0x1af3b0ea8) [0x181542960 - Unity Child Domain]\r\n#9  0x0000018cca5dbb in  System.Threading._ThreadPoolWaitCallback:PerformWaitCallback () {0x7fc0d49ba6b0} + 0xab (0x18cca5d10 0x18cca5e4f) [0x181542960 - Unity Child Domain]\r\n#10 0x00000181c0de7d in mono_jit_runtime_invoke\r\n#11 0x00000181f6cc32 in do_runtime_invoke\r\n#12 0x00000181f671b8 in mono_runtime_try_invoke\r\n#13 0x00000181fa2666 in try_invoke_perform_wait_callback\r\n#14 0x00000181fa1f04 in worker_callback\r\n#15 0x00000181e8f512 in worker_thread\r\n#16 0x00000181f9d5ff in start_wrapper_internal\r\n#17 0x00000181f9d219 in start_wrapper\r\n#18 0x00000182069b37 in GC_inner_start_routine\r\n#19 0x000001820667e8 in GC_call_with_stack_base\r\n#20 0x00000182069abc in GC_start_routine\r\n#21 0x007ff8138b3259 in _pthread_start\r\n#22 0x007ff8138aec7b in thread_start\r\n```\n\n### Regression?\n\nThis is not a regression.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nMacOS Ventura 13.0.1\r\nmono 6.12.0.122\r\nSystem Architecture: arm64\r\nApplication architecture: x64\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUE2LyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QTYvJ",
                                           "createdAt":  "2022-12-12T20:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-12T20:28:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Crash in mono_arch_patch_callsite on Rosetta under heavy jitting",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79583",
        "createdAt":  "2022-12-13T01:55:56Z",
        "number":  79583,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T09:23:29Z",
        "body":  "NullableTests.ClassWithDictionariesWithNullableValues appears to be crashing reliably on tvOS runs.\r\n\r\nAzDo build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=109880\u0026view=logs\u0026j=acac6bf3-3edd-5022-4e45-3362a02520b1\u0026t=1de8bf71-8fe5-5d5c-4360-8c2eb159d012\r\n\r\nhttps://github.com/dotnet/runtime/blob/50fa756a2f1020bd21b8e72e5750d307e38d72e0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NullableTests.cs#L177-L198\r\n\r\n```\r\nat \u003cunknown\u003e \u003c0xffffffff\u003e\r\nat System.Object:__icall_wrapper_mono_gsharedvt_constrained_call \u003c0x00007\u003e\r\nat System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3:Add \u003c0x001cb\u003e\r\nat System.Object:gsharedvt_in \u003c0x000db\u003e\r\nat System.Object:gsharedvt_out \u003c0x000db\u003e\r\nat System.Text.Json.Serialization.JsonDictionaryConverter`3:OnTryRead \u003c0x0054f\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1:ReadJsonAndSetMember \u003c0x0011b\u003e\r\nat System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1:OnTryRead \u003c0x003ff\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:ReadCore \u003c0x002a7\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonTypeInfo`1:Deserialize \u003c0x00047\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00123\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00117\u003e\r\nat System.Text.Json.JsonSerializer:Deserialize \u003c0x0007b\u003e\r\nat System.Text.Json.Serialization.Tests.NullableTests:ClassWithDictionariesWithNullableValues \u003c0x00047\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaB7v8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QU00H",
                                           "createdAt":  "2022-12-13T01:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNullableTests.ClassWithDictionariesWithNullableValues appears to be crashing reliably on tvOS runs.\r\n\r\nAzDo build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=109880\u0026view=logs\u0026j=acac6bf3-3edd-5022-4e45-3362a02520b1\u0026t=1de8bf71-8fe5-5d5c-4360-8c2eb159d012\r\n\r\nhttps://github.com/dotnet/runtime/blob/50fa756a2f1020bd21b8e72e5750d307e38d72e0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NullableTests.cs#L177-L198\r\n\r\n```\r\nat \u003cunknown\u003e \u003c0xffffffff\u003e\r\nat System.Object:__icall_wrapper_mono_gsharedvt_constrained_call \u003c0x00007\u003e\r\nat System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3:Add \u003c0x001cb\u003e\r\nat System.Object:gsharedvt_in \u003c0x000db\u003e\r\nat System.Object:gsharedvt_out \u003c0x000db\u003e\r\nat System.Text.Json.Serialization.JsonDictionaryConverter`3:OnTryRead \u003c0x0054f\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1:ReadJsonAndSetMember \u003c0x0011b\u003e\r\nat System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1:OnTryRead \u003c0x003ff\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:ReadCore \u003c0x002a7\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonTypeInfo`1:Deserialize \u003c0x00047\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00123\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00117\u003e\r\nat System.Text.Json.JsonSerializer:Deserialize \u003c0x0007b\u003e\r\nat System.Text.Json.Serialization.Tests.NullableTests:ClassWithDictionariesWithNullableValues \u003c0x00047\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-13T01:56:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QU02D",
                                           "createdAt":  "2022-12-13T01:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNullableTests.ClassWithDictionariesWithNullableValues appears to be crashing reliably on tvOS runs.\r\n\r\nAzDo build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=109880\u0026view=logs\u0026j=acac6bf3-3edd-5022-4e45-3362a02520b1\u0026t=1de8bf71-8fe5-5d5c-4360-8c2eb159d012\r\n\r\nhttps://github.com/dotnet/runtime/blob/50fa756a2f1020bd21b8e72e5750d307e38d72e0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NullableTests.cs#L177-L198\r\n\r\n```\r\nat \u003cunknown\u003e \u003c0xffffffff\u003e\r\nat System.Object:__icall_wrapper_mono_gsharedvt_constrained_call \u003c0x00007\u003e\r\nat System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3:Add \u003c0x001cb\u003e\r\nat System.Object:gsharedvt_in \u003c0x000db\u003e\r\nat System.Object:gsharedvt_out \u003c0x000db\u003e\r\nat System.Text.Json.Serialization.JsonDictionaryConverter`3:OnTryRead \u003c0x0054f\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1:ReadJsonAndSetMember \u003c0x0011b\u003e\r\nat System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1:OnTryRead \u003c0x003ff\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:ReadCore \u003c0x002a7\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonTypeInfo`1:Deserialize \u003c0x00047\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00123\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00117\u003e\r\nat System.Text.Json.JsonSerializer:Deserialize \u003c0x0007b\u003e\r\nat System.Text.Json.Serialization.Tests.NullableTests:ClassWithDictionariesWithNullableValues \u003c0x00047\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`, `os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-13T01:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QU03O",
                                           "createdAt":  "2022-12-13T01:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNullableTests.ClassWithDictionariesWithNullableValues appears to be crashing reliably on tvOS runs.\r\n\r\nAzDo build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=109880\u0026view=logs\u0026j=acac6bf3-3edd-5022-4e45-3362a02520b1\u0026t=1de8bf71-8fe5-5d5c-4360-8c2eb159d012\r\n\r\nhttps://github.com/dotnet/runtime/blob/50fa756a2f1020bd21b8e72e5750d307e38d72e0/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/NullableTests.cs#L177-L198\r\n\r\n```\r\nat \u003cunknown\u003e \u003c0xffffffff\u003e\r\nat System.Object:__icall_wrapper_mono_gsharedvt_constrained_call \u003c0x00007\u003e\r\nat System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3:Add \u003c0x001cb\u003e\r\nat System.Object:gsharedvt_in \u003c0x000db\u003e\r\nat System.Object:gsharedvt_out \u003c0x000db\u003e\r\nat System.Text.Json.Serialization.JsonDictionaryConverter`3:OnTryRead \u003c0x0054f\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1:ReadJsonAndSetMember \u003c0x0011b\u003e\r\nat System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1:OnTryRead \u003c0x003ff\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:TryRead \u003c0x001df\u003e\r\nat System.Text.Json.Serialization.JsonConverter`1:ReadCore \u003c0x002a7\u003e\r\nat System.Text.Json.Serialization.Metadata.JsonTypeInfo`1:Deserialize \u003c0x00047\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00123\u003e\r\nat System.Text.Json.JsonSerializer:ReadFromSpan \u003c0x00117\u003e\r\nat System.Text.Json.JsonSerializer:Deserialize \u003c0x0007b\u003e\r\nat System.Text.Json.Serialization.Tests.NullableTests:ClassWithDictionariesWithNullableValues \u003c0x00047\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`, `os-ios`, `os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-13T01:56:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QU05X",
                                           "createdAt":  "2022-12-13T01:56:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @vargaz ",
                                           "updatedAt":  "2022-12-13T01:56:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QVhLv",
                                           "createdAt":  "2022-12-13T06:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "When did this started to fail ?\r\n",
                                           "updatedAt":  "2022-12-13T06:41:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QWK-_",
                                           "createdAt":  "2022-12-13T09:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e When did this started to fail ?\r\n\r\n\u003cstrike\u003e\r\nI see only one failure on `main` since #79445 was merged (previously it was failing regularly). There seem to be failures on 7.0 branch if I am reading it correctly which would make sense if #79445 was not backported yet.\r\n\u003c/strike\u003e\r\n\r\n(not sure I trust the data from Azure)",
                                           "updatedAt":  "2022-12-13T09:40:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QZGGR",
                                           "createdAt":  "2022-12-13T15:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e When did this started to fail ?\r\n\r\nLooking at the daily rolling builds for main, it appears to have started happening on Nov 18th. A random number of devices have trouble reporting their test results on CI, so it must have got lost in that noise.",
                                           "updatedAt":  "2022-12-13T15:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oHu_x",
                                           "createdAt":  "2023-10-04T13:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "do we still hit these errors, and need this open for 8.0?",
                                           "updatedAt":  "2023-10-04T13:15:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[tvOS] Crash in System.Text.Json NullableTests.ClassWithDictionariesWithNullableValues",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono",
                       "os-ios",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81420",
        "createdAt":  "2023-01-31T13:12:15Z",
        "number":  81420,
        "author":  "jandupej",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:14:32Z",
        "body":  "Add validation code to `codegen-test.c` for arm64/neon opcodes, as suggested by @vargaz in [PR 81026](https://github.com/dotnet/runtime/pull/81026).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXvV10Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5e9XXR",
                                           "createdAt":  "2023-06-15T14:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jandupej",
                                           "body":  "Most arm64 opcode macros are included. Some are not and still need to be added.",
                                           "updatedAt":  "2023-06-15T14:10:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono][jit] Add test for arm64/neon opcodes",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82859",
        "createdAt":  "2023-03-01T21:43:07Z",
        "number":  82859,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuqoBg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LeVladIonescu",
                                            "createdAt":  "2023-03-01T21:51:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "namelesstudio",
                                            "createdAt":  "2023-03-01T23:11:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jandupej",
                                            "createdAt":  "2023-03-02T11:06:15Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-01-10T09:38:35Z",
        "body":  "Build log:\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=188983\u0026view=logs\u0026jobId=a897e8fc-075e-5bb0-6001-021a961cada8\u0026j=a897e8fc-075e-5bb0-6001-021a961cada8\u0026t=d93a15cb-e4dc-53db-2b5c-0c3bb83ee790\r\n\r\nFailed tests are:\r\n- [ ] Interop/SuppressGCTransition/SuppressGCTransitionTest/SuppressGCTransitionTest.sh\r\n- [ ] Interop/NativeLibrary/API/NativeLibraryTests/NativeLibraryTests.sh\r\n- [ ] Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.sh\r\n- [ ] Interop/NativeLibrary/Callback/CallbackTests/CallbackTests.sh\r\n- [ ] Interop/UnmanagedCallConv/UnmanagedCallConvTest/UnmanagedCallConvTest.sh\r\n- [ ] Interop/ICustomMarshaler/ConflictingNames/SameNameDifferentAssembly/SameNameDifferentAssembly.sh\r\n- [x] Interop/UnmanagedCallersOnlyBasic/UnmanagedCallersOnlyBasicTest/UnmanagedCallersOnlyBasicTest.sh\r\n- [ ] Interop/PInvoke/Primitives/Pointer/NonBlittablePointer/NonBlittablePointer.sh\r\n- [ ] Interop/PInvoke/SetLastError/SetLastErrorTest/SetLastErrorTest.sh\r\n- [ ] Interop/PInvoke/Primitives/Int/PInvokeIntTest/PInvokeIntTest.sh\r\n- [ ] Interop/PInvoke/Miscellaneous/HandleRef/HandleRefTest/HandleRefTest.sh\r\n- [ ] Interop/PInvoke/Miscellaneous/MultipleAssembliesWithSamePInvoke/MAWSPITest/MAWSPITest.sh\r\n- [ ] Interop/PInvoke/Vector2_3_4/Vector2_3_4/Vector2_3_4.sh\r\n- [ ] Interop/PInvoke/Primitives/RuntimeHandles/RuntimeHandlesTest/RuntimeHandlesTest.sh\r\n- [ ] Interop/MonoAPI/MonoMono/InstallEHCallback/InstallEHCallback.sh\r\n- [ ] Interop/MonoAPI/MonoMono/Thunks/Thunks.sh\r\n- [ ] Interop/MonoAPI/MonoMono/PInvokeDetach/PInvokeDetach.sh\r\n- [ ] Interop/StructMarshalling/ReversePInvoke/MarshalSeqStruct/DelegatePInvoke/DelegatePInvokeTest/DelegatePInvokeTest.sh\r\n- [ ] JIT/Directed/pinvoke/tail/tail.sh\r\n- [ ] JIT/Directed/aliasing_retbuf/aliasing_retbuf/aliasing_retbuf.sh\r\n- [x] JIT/Directed/callconv/PlatformDefaultMemberFunction/PlatformDefaultMemberFunctionTest/PlatformDefaultMemberFunctionTest.sh\r\n- [x] JIT/Directed/callconv/StdCallMemberFunction/StdCallMemberFunctionTest/StdCallMemberFunctionTest.sh\r\n- [ ] JIT/Directed/callconv/ThisCall/ThisCallTest/ThisCallTest.sh\r\n- [x] JIT/Directed/callconv/CdeclMemberFunction/CdeclMemberFunctionTest/CdeclMemberFunctionTest.sh\r\n- [ ] JIT/Regression/JitBlue/Runtime_76194/Runtime_76194/Runtime_76194.sh\r\n- [ ] Exceptions/ForeignThread/ForeignThreadExceptions/ForeignThreadExceptions.sh",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono][arm64] Runtime tests failures for Mini JIT on Arm64",
        "labels":  [
                       "arch-arm64",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83252",
        "createdAt":  "2023-03-10T10:18:13Z",
        "number":  83252,
        "author":  "jandupej",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu18rA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fanyang-mono",
                                            "createdAt":  "2023-03-13T13:49:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-10-25T18:44:15Z",
        "body":  "Introduce better organization into SIMD operations in `mini-ops.h`. Vector instructions that are not subject to other special handling by the JIT (e.g. optimization) should be hidden under umbrella operations (like `OP_XBINOP`) and identified by their `ins-\u003einst_c0`. The chief benefit here is the more predictable structure of the said operations in Mono. This will allow easier addition into table-driven code generation (https://github.com/dotnet/runtime/pull/83094). Operations that should be cleaned up:\r\n- `OP_NEGATION`, `OP_ONES_COMPLEMENT` etc.\r\n- ARM advanced SIMD instructions `OP_ARM64_...`\r\n- x86 SSE",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono][jit] Consolidate Mono IR operations that deal with SIMD",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83823",
        "createdAt":  "2023-03-23T15:34:08Z",
        "number":  83823,
        "author":  "srxqds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-05T04:19:29Z",
        "body":  "### Description\n\nwe embed mono, use jit mix with interp, use `mono_jit_set_aot_mode(MONO_AOT_MODE_INTERP_ONLY);`\r\n\r\nwe get MonoDelegate invoke method thunk and invoke it, it hit asset at line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/07f5fca53d671d9999f8db9fc6add526551fecb1/src/mono/mono/metadata/marshal-lightweight.c#L2015\n\n### Reproduction Steps\n\n// pass delegate from c# to c.\r\nMonoDelegate*  InDelegate;\r\nMonoClass* DelegateClass = mono_object_get_class(InDelegate);\r\n\r\nMonoMethod* InvokeMethod = mono_get_delegate_invoke(DelegateClass);\r\n\r\nvoid * ThunkMethod = mono_method_get_unmanaged_thunk(InvokeMethod );\r\ntypedef bool(STDCALL *ThunkWithMonoObjectDeclaration) (MonoObject*, float, MonoObject**);\r\nbool result = (ThunkWithMonoObjectDeclaration)ThunkMethod(InDelegate, 1, nullptr);   // hit crash\r\n\r\nit works well in aot_interp or jit mode.\r\n\n\n### Expected behavior\n\nwork correctly\n\n### Actual behavior\n\ncrash\n\n### Regression?\n\nno\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\ndotnet7.0.3 mono\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObavYnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YTOnE",
                                           "createdAt":  "2023-03-23T15:48:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "this line should set `csig-\u003ehasthis` if this is delegate invoke method.\r\nhttps://github.com/dotnet/runtime/blob/316d286ec61edf667d4d972753a904b5daf1ec48/src/mono/mono/metadata/marshal.c#L6192\r\n\r\nand the stacktrace:\r\n```\r\ncoreclr.dll!emit_delegate_invoke_internal_ilgen(_MonoMethodBuilder * mb, _MonoMethodSignature * sig, _MonoMethodSignature * invoke_sig, int static_method_with_first_arg_bound, int callvirt, int closed_over_null, _MonoMethod * method, _MonoMethod * target_method, _MonoClass * target_class, _MonoGenericContext * ctx, _MonoGenericContainer * container) Line 1981\r\n\tat F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\marshal-lightweight.c(1981)\r\ncoreclr.dll!mono_marshal_get_delegate_invoke_internal(_MonoMethod * method, int callvirt, int static_method_with_first_arg_bound, _MonoMethod * target_method) Line 2175\r\n\tat F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\marshal.c(2175)\r\ncoreclr.dll!mono_marshal_get_delegate_invoke(_MonoMethod * method, _MonoDelegate * del) Line 2254\r\n\tat F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\marshal.c(2254)\r\ncoreclr.dll!interp_entry(InterpEntryData * data) Line 2184\r\n\tat F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\mini\\interp\\interp.c(2184)\r\ncoreclr.dll!interp_entry_static_ret_3(void * res, void * arg1, void * arg2, void * arg3, InterpMethod * rmethod) Line 2895\r\n\tat F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\mini\\interp\\interp.c(2895)\r\n\r\n```",
                                           "updatedAt":  "2023-03-24T01:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YTYiX",
                                           "createdAt":  "2023-03-23T16:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "@lambdageek @vargaz @BrzVlad can you take the time to check this?",
                                           "updatedAt":  "2023-03-23T16:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YV6OU",
                                           "createdAt":  "2023-03-24T01:48:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @brzvlad, @kotlarmilos\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nwe embed mono, use jit mix with interp, use `mono_jit_set_aot_mode(MONO_AOT_MODE_INTERP_ONLY);`\r\n\r\nwe get MonoDelegate invoke method thunk and invoke it, it hit asset at line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/07f5fca53d671d9999f8db9fc6add526551fecb1/src/mono/mono/metadata/marshal-lightweight.c#L2015\n\n### Reproduction Steps\n\n// pass delegate from c# to c.\r\nMonoDelegate*  InDelegate;\r\nMonoClass* DelegateClass = mono_object_get_class(InDelegate);\r\n\r\nMonoMethod* InvokeMethod = mono_get_delegate_invoke(DelegateClass);\r\n\r\nvoid * ThunkMethod = mono_method_get_unmanaged_thunk(InvokeMethod );\r\ntypedef bool(STDCALL *ThunkWithMonoObjectDeclaration) (MonoObject*, float, MonoObject**);\r\nbool result = (ThunkWithMonoObjectDeclaration)ThunkMethod(InDelegate, 1, nullptr);   // hit crash\r\n\r\nit works well in aot_interp or jit mode.\r\n\n\n### Expected behavior\n\nwork correctly\n\n### Actual behavior\n\ncrash\n\n### Regression?\n\nno\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\ndotnet7.0.3 mono\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esrxqds\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Codegen-Interpreter-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-24T01:48:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YeT-h",
                                           "createdAt":  "2023-03-27T01:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "any idea about it?",
                                           "updatedAt":  "2023-03-27T01:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YhLMp",
                                           "createdAt":  "2023-03-27T13:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "It would be better to use normal apis like passing delegates directly to native code, Marshal.GetFunctionPointerForDelegate, [UnmanagedCallersOnly] etc.\r\n",
                                           "updatedAt":  "2023-03-27T13:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yrh7f",
                                           "createdAt":  "2023-03-29T01:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "got it, but hope you can take the time to fix this problem, make monovm more and more robust.",
                                           "updatedAt":  "2023-03-29T01:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tlZ7w",
                                           "createdAt":  "2023-12-04T12:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "```c#\r\ninternal class DelegateInvokeTests\r\n{\r\n\t[MethodImpl(MethodImplOptions.InternalCall)]\r\n\tprivate static extern void InvokeDelegate(IntPtr d6);\r\n\r\n\t[Test(\"DelegateInvoke\")]\r\n\tprivate static void Entry()\r\n\t{\r\n\t\tDelegateInvokeTests instance = new DelegateInvokeTests();\r\n\t\tvar a = new Func\u003cint\u003e(instance.DelegateIntVoid);\r\n\t\tInvokeDelegate(Marshal.GetFunctionPointerForDelegate(a));\r\n\t}\r\n\t\r\n\tprivate int DelegateIntVoid() { return 0; }\r\n}\r\n```\r\n\r\n```c\r\n// add internal call\r\n\r\nmono_add_internal_call(\"DelegateInvokeTests::InvokeDelegate\",  \u0026InvokeDelegate);\r\n\r\nvoid InvokeDelegate(void* InDelegate)\r\n{\r\nint (*Delegate)() = (int(*)())InDelegate;\r\nint Result = Delegate();  // when execute this line will cause crash: 0xC0000005\r\n}\r\n\r\n```\r\n\r\nI have try the above code in jit mode on win-x64 .net8.0.0 version, it will hit crash.\r\n\r\n@vargaz  can you help me?",
                                           "updatedAt":  "2023-12-04T12:19:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tq9if",
                                           "createdAt":  "2023-12-05T04:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "I found the delegate function pointer signature is:\r\n\u003e  int (*Delegate)(MonoObject*) = (int(*)(MonoObject*))InDelegate;\r\n\r\nbut we don\u0027t keep referenece the target in native side, so this solution is useless.\r\n\r\n\r\nand the `Marshal.GetFunctionPointerForDelegate` not support multicastdelegate.",
                                           "updatedAt":  "2023-12-05T04:19:27Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[mono] invoke delegate method thunk hit asset.",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84398",
        "createdAt":  "2023-04-06T04:40:44Z",
        "number":  84398,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T15:52:18Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=229032\r\nBuild error leg or test failing: JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd\r\nPull request: https://github.com/dotnet/runtime/pull/83892\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\nFill the error message using [known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at StackallocTests.Test4096(Guid\u0026amp; g)\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n@EgorBo looks to be caused by https://github.com/dotnet/runtime/commit/e13f0dc1e0327b5d0cd0602b55ee257ef554f0a1\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[230346](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230346)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230346\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4361348\u0026resultId=112083)|dotnet/runtime#84082|\r\n|[230261](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230261)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230261\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4358256\u0026resultId=112118)|dotnet/runtime#79169|\r\n|[230167](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230167)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230167\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4356496\u0026resultId=112148)|dotnet/runtime#84417|\r\n|[230162](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230162)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230162\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4356420\u0026resultId=112084)|dotnet/runtime#84082|\r\n|[229855](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229855)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229855\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4355612\u0026resultId=112129)|dotnet/runtime#84304|\r\n|[230120](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230120)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230120\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4355340\u0026resultId=112142)|dotnet/runtime#84074|\r\n|[230101](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230101)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230101\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4354776\u0026resultId=112122)|dotnet/runtime#83624|\r\n|[230080](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230080)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230080\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4354122\u0026resultId=112093)|dotnet/runtime#84027|\r\n|[230076](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230076)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230076\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4353910\u0026resultId=112016)|dotnet/runtime#83716|\r\n|[230036](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230036)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=230036\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4353524\u0026resultId=112049)|dotnet/runtime#84422|\r\n|[229977](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229977)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229977\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4352176\u0026resultId=112080)|dotnet/runtime#84420|\r\n|[229965](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229965)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229965\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4351618\u0026resultId=112022)|dotnet/runtime#83715|\r\n|[229956](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229956)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229956\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4351094\u0026resultId=100358)|dotnet/runtime#84418|\r\n|[229914](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229914)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229914\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4349506\u0026resultId=112039)|dotnet/runtime#84249|\r\n|[229890](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229890)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229890\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4348648\u0026resultId=112128)|dotnet/runtime#84404|\r\n|[229867](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229867)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229867\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4348294\u0026resultId=112125)|dotnet/runtime#84414|\r\n|[229842](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229842)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229842\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4347770\u0026resultId=112059)|dotnet/runtime#79169|\r\n|[229781](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229781)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229781\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4346302\u0026resultId=112107)|dotnet/runtime#84410|\r\n|[229546](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229546)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229546\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4345712\u0026resultId=112052)|dotnet/runtime#84059|\r\n|[229769](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229769)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229769\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4345464\u0026resultId=112043)|dotnet/runtime#84249|\r\n|[229756](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229756)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229756\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4345350\u0026resultId=112109)|dotnet/runtime#83624|\r\n|[229687](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229687)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229687\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4343510\u0026resultId=112004)||\r\n|[228603](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228603)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228603\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4342586\u0026resultId=112111)|dotnet/runtime#84249|\r\n|[229622](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229622)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229622\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4342294\u0026resultId=112084)|dotnet/runtime#84027|\r\n|[229580](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229580)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229580\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4341616\u0026resultId=112083)|dotnet/runtime#84396|\r\n|[229560](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229560)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229560\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4341198\u0026resultId=112051)|dotnet/runtime#83852|\r\n|[229486](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229486)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229486\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4338282\u0026resultId=112130)|dotnet/runtime#84385|\r\n|[229356](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229356)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229356\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4333862\u0026resultId=112091)|dotnet/runtime#84379|\r\n|[229322](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229322)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229322\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4333176\u0026resultId=112129)|dotnet/runtime#84079|\r\n|[229056](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229056)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229056\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4332476\u0026resultId=112040)|dotnet/runtime#83853|\r\n|[229218](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229218)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229218\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4330932\u0026resultId=112025)|dotnet/runtime#74623|\r\n|[229211](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229211)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229211\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4330882\u0026resultId=112045)|dotnet/runtime#84383|\r\n|[229187](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229187)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229187\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4330792\u0026resultId=112087)|dotnet/runtime#84191|\r\n|[228868](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228868)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228868\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4330208\u0026resultId=112092)|dotnet/runtime#84235|\r\n|[229146](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229146)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229146\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4329958\u0026resultId=112065)|dotnet/runtime#84379|\r\n|[229115](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229115)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229115\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4329552\u0026resultId=112016)|dotnet/runtime#84289|\r\n|[229032](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229032)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229032\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4327718\u0026resultId=112007)|dotnet/runtime#83892|\r\n|[229031](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229031)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229031\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4327634\u0026resultId=112090)||\r\n|[229011](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229011)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=229011\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4326920\u0026resultId=112143)|dotnet/runtime#84354|\r\n|[228885](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228885)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228885\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4324428\u0026resultId=112128)|dotnet/runtime#84363|\r\n|[228878](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228878)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228878\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4324378\u0026resultId=112140)|dotnet/runtime#84366|\r\n|[228720](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228720)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228720\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4320610\u0026resultId=112012)|dotnet/runtime#84345|\r\n|[228730](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228730)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228730\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4320404\u0026resultId=112108)|dotnet/runtime#79169|\r\n|[228727](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228727)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228727\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4320332\u0026resultId=112048)|dotnet/runtime#84354|\r\n|[228424](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228424)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228424\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4317380\u0026resultId=112012)|dotnet/runtime#83388|\r\n|[228260](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228260)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228260\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4314704\u0026resultId=112043)|dotnet/runtime#84343|\r\n|[228443](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228443)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228443\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4313304\u0026resultId=112074)|dotnet/runtime#84345|\r\n|[228437](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228437)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228437\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4313298\u0026resultId=112045)|dotnet/runtime#79169|\r\n|[228351](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228351)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228351\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4310028\u0026resultId=112119)|dotnet/runtime#79169|\r\n|[228320](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228320)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228320\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4308816\u0026resultId=112137)|dotnet/runtime#84011|\r\n|[228313](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228313)|dotnet/runtime|[JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=228313\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4308634\u0026resultId=112011)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|16|51|51|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWVWOeA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZUQ1X",
                                           "createdAt":  "2023-04-06T04:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch, @kunalspathak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=229032\r\nBuild error leg or test failing: JIT\\\\opt\\\\Vectorization\\\\StackallocBlkTests\\\\StackallocBlkTests.cmd\r\nPull request: https://github.com/dotnet/runtime/pull/83892\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\nFill the error message using [known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at StackallocTests.Test4096(Guid\u0026amp; g)\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n@EgorBo looks to be caused by https://github.com/dotnet/runtime/commit/e13f0dc1e0327b5d0cd0602b55ee257ef554f0a1\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `blocking-clean-ci`, `untriaged`, `Known Build Error`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-06T04:41:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZVY54",
                                           "createdAt":  "2023-04-06T09:44:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5YIfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-04-06T14:31:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Seems like Mono-win-x64 specific (preexisted), disabling via https://github.com/dotnet/runtime/pull/84408\r\n",
                                           "updatedAt":  "2023-04-06T09:44:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "StackallocTests.Test4096 failing EnsureZeroed check",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87037",
        "createdAt":  "2023-06-02T00:51:01Z",
        "number":  87037,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T14:30:32Z",
        "body":  "https://github.com/dotnet/runtime/pull/86486 expanded the validation done for the various `Isa.IsSupported` flags exposed by the JIT.\r\n\r\nMono failed this test with the following:\r\n```\r\nSystem.Runtime.Intrinsics.X86.Sse.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse2.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Aes.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Pclmulqdq.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse3.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Ssse3.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse41.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse42.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Avx.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Fma.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx2.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Bmi1.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Bmi2.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Avx512F.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.Vector128.IsHardwareAccelerated returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.Vector256.IsHardwareAccelerated returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.Vector512.IsHardwareAccelerated returned false but the hardware and runtime returned true\r\nSystem.Numerics.Vector.Count returned 16 but the hardware returned 32\r\n```\r\n\r\nIn particular, it exposes that while several ISAs are supported by Mono, the recursive call is not being properly handled for:\r\n* `Sse.IsSupported`\r\n* `Sse2.IsSupported`\r\n* `Aes.IsSupported`\r\n* `Pclmulqdq.IsSupported`\r\n* `Sse3.IsSupported`\r\n* `Ssse3.IsSupported`\r\n* `Sse41.IsSupported`\r\n* `Sse42.IsSupported`\r\n* `Bmi1.IsSupported`\r\n* `Bmi2.IsSupported`\r\n* `Vector128.IsHardwareAccelerated`\r\n\r\nIt also highlights the following ISAs which aren\u0027t yet supported by Mono. This is not a bug in Mono, just represents work that is yet to be completed and for which the test would need a corresponding check to account for the behavior difference. We do not, however, have a trivial way to check at runtime if we are on `RyuJIT` or `Mono`:\r\n* `Avx.IsSupported`\r\n* `Fma.IsSupported`\r\n* `Avx2.IsSupported`\r\n* `Avx512F.IsSupported`\r\n* `Avx512F+VL.IsSupported`\r\n* `Avx512BW.IsSupported`\r\n* `Avx512BW+VL.IsSupported`\r\n* `Avx512CD.IsSupported`\r\n* `Avx512CD+VL.IsSupported`\r\n* `Avx512DQ.IsSupported`\r\n* `Avx512DQ+VL.IsSupported`\r\n* `Avx512F.IsSupported`\r\n* `Avx512F+VL.IsSupported`\r\n* `Avx512BW.IsSupported`\r\n* `Avx512BW+VL.IsSupported`\r\n* `Avx512CD.IsSupported`\r\n* `Avx512CD+VL.IsSupported`\r\n* `Avx512DQ.IsSupported`\r\n* `Avx512DQ+VL.IsSupported`\r\n* `Vector256.IsHardwareAccelerated`\r\n* `Vector512.IsHardwareAccelerated`\r\n* `Vector\u003cbyte\u003e.Count == 32` when `Avx2` is supported",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh0N5vw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dwZr8",
                                           "createdAt":  "2023-06-02T00:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime-intrinsics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/86486 expanded the validation done for the various `Isa.IsSupported` flags exposed by the JIT.\r\n\r\nMono failed this test with the following:\r\n```\r\nSystem.Runtime.Intrinsics.X86.Sse.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse2.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Aes.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Pclmulqdq.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse3.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Ssse3.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse41.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Sse42.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Avx.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Fma.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx2.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Bmi1.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Bmi2.IsSupported returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.X86.Avx512F.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512F+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512BW+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512CD+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.X86.Avx512DQ+VL.IsSupported returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.Vector128.IsHardwareAccelerated returned a different result when called via reflection\r\nSystem.Runtime.Intrinsics.Vector256.IsHardwareAccelerated returned false but the hardware and runtime returned true\r\nSystem.Runtime.Intrinsics.Vector512.IsHardwareAccelerated returned false but the hardware and runtime returned true\r\nSystem.Numerics.Vector.Count returned 16 but the hardware returned 32\r\n```\r\n\r\nIn particular, it exposes that while several ISAs are supported by Mono, the recursive call is not being properly handled for:\r\n* `Sse.IsSupported`\r\n* `Sse2.IsSupported`\r\n* `Aes.IsSupported`\r\n* `Pclmulqdq.IsSupported`\r\n* `Sse3.IsSupported`\r\n* `Ssse3.IsSupported`\r\n* `Sse41.IsSupported`\r\n* `Sse42.IsSupported`\r\n* `Bmi1.IsSupported`\r\n* `Bmi2.IsSupported`\r\n* `Vector128.IsHardwareAccelerated`\r\n\r\nIt also highlights the following ISAs which aren\u0027t yet supported by Mono. This is not a bug in Mono, just represents work that is yet to be completed and for which the test would need a corresponding check to account for the behavior difference. We do not, however, have a trivial way to check at runtime if we are on `RyuJIT` or `Mono`:\r\n* `Avx.IsSupported`\r\n* `Fma.IsSupported`\r\n* `Avx2.IsSupported`\r\n* `Avx512F.IsSupported`\r\n* `Avx512F+VL.IsSupported`\r\n* `Avx512BW.IsSupported`\r\n* `Avx512BW+VL.IsSupported`\r\n* `Avx512CD.IsSupported`\r\n* `Avx512CD+VL.IsSupported`\r\n* `Avx512DQ.IsSupported`\r\n* `Avx512DQ+VL.IsSupported`\r\n* `Avx512F.IsSupported`\r\n* `Avx512F+VL.IsSupported`\r\n* `Avx512BW.IsSupported`\r\n* `Avx512BW+VL.IsSupported`\r\n* `Avx512CD.IsSupported`\r\n* `Avx512CD+VL.IsSupported`\r\n* `Avx512DQ.IsSupported`\r\n* `Avx512DQ+VL.IsSupported`\r\n* `Vector256.IsHardwareAccelerated`\r\n* `Vector512.IsHardwareAccelerated`\r\n* `Vector\u003cbyte\u003e.Count == 32` when `Avx2` is supported\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-02T00:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d3Wv0",
                                           "createdAt":  "2023-06-03T08:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "@jandupej can you add a milestone? If you do so the bot will remove the untriaged label automatically.",
                                           "updatedAt":  "2023-06-03T08:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jwYBF",
                                           "createdAt":  "2023-08-10T17:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 9.0",
                                           "updatedAt":  "2023-08-10T17:30:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HQ3m_",
                                           "createdAt":  "2024-08-05T15:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I do think this is important to fix, so I\u0027m going to play the milestone game one more time and move this to 10.",
                                           "updatedAt":  "2024-08-05T15:28:04Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Mono has different behavior for reflection invocation of IsSupported flags",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91211",
        "createdAt":  "2023-08-28T13:41:35Z",
        "number":  91211,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyQB6w==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "jandupej",
                                            "createdAt":  "2023-08-29T14:09:30Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-16T10:30:03Z",
        "body":  "When initializing Vector128 with constant `float`/`double` value (e.g., `Vector128.Create(2.0f)`) the values are loaded into 32/64-bit register (`fmov`) and then duplicated into 128-bit register (`dup.4s/2d`). For immediate floating-point constants on Arm64 this can be optimized into a single `fmov` [FMOV (vector, immediate)](https://developer.arm.com/documentation/ddi0596/2021-12/SIMD-FP-Instructions/FMOV--vector--immediate---Floating-point-move-immediate--vector--?lang=en) which copies the immediate constant into every element of the 128-bit register. \r\n\r\nWith AOT LLVM the behavior is already optimized and it uses `fmov.4s/2d` to directly fill the 128-bit register.\r\n\r\nSteps to take:\r\n1. Move the Arm64 immediate floating-point constant check functionality to a separate function so that it can be used both for `float`/`double` types as well as for vector types. https://github.com/dotnet/runtime/blob/ff2de363f393f2270d5752eeb3db345fcf770c5c/src/mono/mono/mini/mini-arm64.c#L4876-L4906\r\n2. Use ^ check inside vector constructor code path to emit single `fmov` for immediate constants.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono][jit] Optimize Vector128.Create on Arm64",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92070",
        "createdAt":  "2023-09-14T16:31:42Z",
        "number":  92070,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:00:30Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=405797\r\nBuild error leg or test failing: ComInterfaceGenerator.Unit.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/91961\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"at System.Linq.Enumerable:Where\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n[From log](https://helix.dot.net/api/2019-06-17/jobs/52a0ae94-6e55-4c13-9ced-e5b329dfd27b/workitems/ComInterfaceGenerator.Unit.Tests/console):\r\n```log\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x7ff653e878a1 - Unknown\r\n\t0x7ff653e2e38e - Unknown\r\n\t0x7ff653d95e61 - Unknown\r\n\t0x7ff6541ea520 - Unknown\r\n\t0x42996597 - Unknown\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n[New LWP 5622]\r\n[New LWP 5623]\r\n[New LWP 5624]\r\n[New LWP 5625]\r\n[New LWP 5628]\r\n[New LWP 5629]\r\n[New LWP 5630]\r\n[New LWP 5632]\r\n[New LWP 5633]\r\n[New LWP 5634]\r\n[New LWP 5635]\r\n[New LWP 5636]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n__futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5565fe3f7ce4) at ./nptl/futex-internal.c:57\r\n57\t./nptl/futex-internal.c: No such file or directory.\r\n  Id   Target Id                                          Frame \r\n* 1    Thread 0x7ff6541a5740 (LWP 5621) \"dotnet\"          __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5565fe3f7ce4) at ./nptl/futex-internal.c:57\r\n  2    Thread 0x7ff6533ff640 (LWP 5622) \"SGen worker\"     __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff654088dc8 \u003cwork_cond+40\u003e) at ./nptl/futex-internal.c:57\r\n  3    Thread 0x7ff6515f6640 (LWP 5623) \".NET EventPipe\"  0x00007ff6542c0d7f in __GI___poll (fds=fds@entry=0x7ff64c002970, nfds=nfds@entry=1, timeout=timeout@entry=-1) at ../sysdeps/unix/sysv/linux/poll.c:29\r\n  4    Thread 0x7ff6513f5640 (LWP 5624) \"Finalizer\"       __futex_abstimed_wait_common64 (private=\u003coptimized out\u003e, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff654079fb0 \u003cfinalizer_sem\u003e) at ./nptl/futex-internal.c:57\r\n  5    Thread 0x7ff648be1640 (LWP 5625) \".NET SigHandler\" __GI___libc_read (nbytes=1, buf=0x7ff648be0e47, fd=7) at ../sysdeps/unix/sysv/linux/read.c:26\r\n  6    Thread 0x7ff6486c2640 (LWP 5628) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff63c02a794) at ./nptl/futex-internal.c:57\r\n  7    Thread 0x7ff6488c3640 (LWP 5629) \".NET TP Worker\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7ff6488c2578, op=137, expected=0, futex_word=0x7ff6380b51a0) at ./nptl/futex-internal.c:57\r\n  8    Thread 0x7ff648491640 (LWP 5630) \".NET TP Gate\"    __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7ff648490668, op=137, expected=0, futex_word=0x7ff630030984) at ./nptl/futex-internal.c:57\r\n  9    Thread 0x7ff64824f640 (LWP 5632) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff628010144) at ./nptl/futex-internal.c:57\r\n  10   Thread 0x7ff62ffff640 (LWP 5633) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff624002960) at ./nptl/futex-internal.c:57\r\n  11   Thread 0x7ff62fa9e640 (LWP 5634) \".NET TP Worker\"  0x00007ff65429249f in __GI___wait4 (pid=pid@entry=5797, stat_loc=stat_loc@entry=0x7ff62fa9b7c0, options=options@entry=0, usage=usage@entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30\r\n  12   Thread 0x7ff62f60b640 (LWP 5635) \".NET Timer\"      __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff620013bc4) at ./nptl/futex-internal.c:57\r\n  13   Thread 0x7ff61bd7b640 (LWP 5636) \".NET TP Worker\"  __futex_abstimed_wait_common64 (private=1397252800, cancel=true, abstime=0x7ff61bd7a778, op=137, expected=0, futex_word=0x7ff61bd7a7f8) at ./nptl/futex-internal.c:57\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=405797\r\n**Error message validated:** `at System.Linq.Enumerable:Where`\r\n**Result validation: :white_check_mark:** Known issue matched with the provided build.\r\n**Validation performed at:** 9/14/2023 8:29:29 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdRcVew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mgcji",
                                           "createdAt":  "2023-09-14T16:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=405797\r\nBuild error leg or test failing: ComInterfaceGenerator.Unit.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/91961\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"futex-internal.c: No such file or directory\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n[From log](https://[helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-91961-merge-52a0ae946e554c139c/ComInterfaceGenerator.Unit.Tests/1/console.4578dce8.log?helixlogtype=result](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-91961-merge-52a0ae946e554c139c/ComInterfaceGenerator.Unit.Tests/1/console.4578dce8.log?helixlogtype=result)):\r\n```log\r\n=================================================================\r\n\tNative Crash Reporting\r\n=================================================================\r\nGot a SIGSEGV while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries \r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n\tNative stacktrace:\r\n=================================================================\r\n\t0x7ff653e878a1 - Unknown\r\n\t0x7ff653e2e38e - Unknown\r\n\t0x7ff653d95e61 - Unknown\r\n\t0x7ff6541ea520 - Unknown\r\n\t0x42996597 - Unknown\r\n\r\n=================================================================\r\n\tExternal Debugger Dump:\r\n=================================================================\r\n[New LWP 5622]\r\n[New LWP 5623]\r\n[New LWP 5624]\r\n[New LWP 5625]\r\n[New LWP 5628]\r\n[New LWP 5629]\r\n[New LWP 5630]\r\n[New LWP 5632]\r\n[New LWP 5633]\r\n[New LWP 5634]\r\n[New LWP 5635]\r\n[New LWP 5636]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n__futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5565fe3f7ce4) at ./nptl/futex-internal.c:57\r\n57\t./nptl/futex-internal.c: No such file or directory.\r\n  Id   Target Id                                          Frame \r\n* 1    Thread 0x7ff6541a5740 (LWP 5621) \"dotnet\"          __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x5565fe3f7ce4) at ./nptl/futex-internal.c:57\r\n  2    Thread 0x7ff6533ff640 (LWP 5622) \"SGen worker\"     __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff654088dc8 \u003cwork_cond+40\u003e) at ./nptl/futex-internal.c:57\r\n  3    Thread 0x7ff6515f6640 (LWP 5623) \".NET EventPipe\"  0x00007ff6542c0d7f in __GI___poll (fds=fds@entry=0x7ff64c002970, nfds=nfds@entry=1, timeout=timeout@entry=-1) at ../sysdeps/unix/sysv/linux/poll.c:29\r\n  4    Thread 0x7ff6513f5640 (LWP 5624) \"Finalizer\"       __futex_abstimed_wait_common64 (private=\u003coptimized out\u003e, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff654079fb0 \u003cfinalizer_sem\u003e) at ./nptl/futex-internal.c:57\r\n  5    Thread 0x7ff648be1640 (LWP 5625) \".NET SigHandler\" __GI___libc_read (nbytes=1, buf=0x7ff648be0e47, fd=7) at ../sysdeps/unix/sysv/linux/read.c:26\r\n  6    Thread 0x7ff6486c2640 (LWP 5628) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff63c02a794) at ./nptl/futex-internal.c:57\r\n  7    Thread 0x7ff6488c3640 (LWP 5629) \".NET TP Worker\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7ff6488c2578, op=137, expected=0, futex_word=0x7ff6380b51a0) at ./nptl/futex-internal.c:57\r\n  8    Thread 0x7ff648491640 (LWP 5630) \".NET TP Gate\"    __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x7ff648490668, op=137, expected=0, futex_word=0x7ff630030984) at ./nptl/futex-internal.c:57\r\n  9    Thread 0x7ff64824f640 (LWP 5632) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff628010144) at ./nptl/futex-internal.c:57\r\n  10   Thread 0x7ff62ffff640 (LWP 5633) \".NET Long Runni\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff624002960) at ./nptl/futex-internal.c:57\r\n  11   Thread 0x7ff62fa9e640 (LWP 5634) \".NET TP Worker\"  0x00007ff65429249f in __GI___wait4 (pid=pid@entry=5797, stat_loc=stat_loc@entry=0x7ff62fa9b7c0, options=options@entry=0, usage=usage@entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30\r\n  12   Thread 0x7ff62f60b640 (LWP 5635) \".NET Timer\"      __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0x7ff620013bc4) at ./nptl/futex-internal.c:57\r\n  13   Thread 0x7ff61bd7b640 (LWP 5636) \".NET TP Worker\"  __futex_abstimed_wait_common64 (private=1397252800, cancel=true, abstime=0x7ff61bd7a778, op=137, expected=0, futex_word=0x7ff61bd7a7f8) at ./nptl/futex-internal.c:57\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=405797\r\n**Error message validated:** `futex-internal.c: No such file or directory`\r\n**Result validation: :white_check_mark:** Known issue matched with the provided build.\r\n**Validation performed at:** 9/14/2023 4:33:44 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.InteropServices`, `blocking-clean-ci`, `untriaged`, `Known Build Error`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-14T16:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgnoS",
                                           "createdAt":  "2023-09-14T17:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@lambdageek Any thoughts here?",
                                           "updatedAt":  "2023-09-14T17:02:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgy2X",
                                           "createdAt":  "2023-09-14T17:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Just to clarify, the `.Unit.Tests` tests only run managed code that generates code, no native code is executed in the tests.",
                                           "updatedAt":  "2023-09-14T17:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mhqJe",
                                           "createdAt":  "2023-09-14T20:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Please dont\u0027 create `\"futex-internal.c: No such file or directory\" `issues.  That\u0027s `gdb` complaining that it can\u0027t see the source code for something inside a linux libc.  it will catch literally every single unrelated Mono runtime abort.\r\n\r\nthe actual error is some kind of JIT failure in\r\n\r\n```\r\n\t  at System.Linq.Enumerable:Where \u003c0x000f7\u003e\r\n\t  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1:VerifyDiagnosticResults \u003c0x008c7\u003e\r\n\t  at \u003cVerifyDiagnosticsAsync\u003ed__69:MoveNext \u003c0x0059b\u003e\r\n\t  at AsyncStateMachineBox`1:ExecutionContextCallback \u003c0x0003b\u003e\r\n\t  at System.Threading.ExecutionContext:RunFromThreadPoolDispatchLoop \u003c0x00086\u003e\r\n\t  at AsyncStateMachineBox`1:MoveNext \u003c0x0010f\u003e\r\n\t  at AsyncStateMachineBox`1:ExecuteFromThreadPool \u003c0x00033\u003e\r\n\t  at System.Threading.ThreadPoolWorkQueue:Dispatch \u003c0x003ae\u003e\r\n\t  at WorkerThread:WorkerThreadStart \u003c0x001a3\u003e\r\n\t  at System.Threading.Thread:StartCallback \u003c0x000f0\u003e\r\n\t  at System.Object:runtime_invoke_void__this__ \u003c0x00091\u003e\r\n```\r\n\r\n/cc @SamMonoRT ",
                                           "updatedAt":  "2023-09-14T20:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nx2up",
                                           "createdAt":  "2023-09-29T16:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@buyaa-n - are we confident, the failure isn\u0027t introduced by the changes in your PR?",
                                           "updatedAt":  "2023-09-29T16:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nyKqH",
                                           "createdAt":  "2023-09-29T16:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "The PR only updates `ConfigurationBinder` source generator and the update has nothing to do with `ComInterfaceGenerator` or any other generator",
                                           "updatedAt":  "2023-09-29T16:50:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nyT4C",
                                           "createdAt":  "2023-09-29T17:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "We should try a before/after PR with a local run of the failing test. I don\u0027t recall seeing this failure before.",
                                           "updatedAt":  "2023-09-29T17:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51FxV7",
                                           "createdAt":  "2024-02-26T15:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci has it has not failed in 30 days.\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0\r\n",
                                           "updatedAt":  "2024-02-26T15:39:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ComInterfaceGenerator.Unit.Tests crashes on net9.0-linux-Debug-x64-Mono_release-Ubuntu.2204.Amd64.Open",
        "labels":  [
                       "area-Codegen-JIT-mono",
                       "runtime-mono",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96051",
        "createdAt":  "2023-12-15T11:01:11Z",
        "number":  96051,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-21T16:41:12Z",
        "body":  "Failures in `JIT/SIMD/Vector3Interop_r/ro` on osx-arm64 with miniJIT and interpreter.\r\n\r\nLog: \r\n```\r\nnativeCall_PInvoke_CheckVector3Size: sizeof(Vector3) == 12\r\nnativeCall_PInvoke_Vector3Arg:\r\n    iVal 123\r\n    sumOfEles(1.000000, 2.000000, 3.000000) = 6.000000\r\n    str  abcdefg\r\n    sumOfEles(10.000000, 11.000000, 12.000000) = 33.000000\r\nPInvoke Vector3Arg_Unix test failed\r\nXunit.Sdk.EqualException: Assert.Equal() Failure: Values differ\r\nExpected: 100\r\nActual:   101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/Microsoft.DotNet.XUnitAssert/src/EqualityAsserts.cs:line 139\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/Microsoft.DotNet.XUnitAssert/src/EqualityAsserts.cs:line 83\r\n   at __GeneratedMainWrapper.Main()\r\nnativeCall_PInvoke_Vector3Arg_Unix:\r\n    v3f32_xmm0: 1.000000 2.000000 3.000000\r\n    f32_xmm2 - f32_xmm7: 100.000000 101.000000 102.000000 103.000000 104.000000 105.000000\r\n    f32_mem0: 106.000000\r\n    v3f32_mem1: 10.000000 20.000000 30.000000\r\n    f32_mem2-3: 0.000000 107.000000\r\n    sum = 894.000000\r\nExpected: 100\r\nActual: 101\r\n```\r\n\r\nThe same tests are passing on `runtime` osx-x64 miniJIT/interpreter and linux-arm64 miniJIT CI pipelines.\r\n\r\nCould be related to Mono missing support for passing Vectors in SIMD registers (https://github.com/dotnet/runtime/issues/60068) and/or missing intrinsics support for `System.Numerics.Vector3` (https://github.com/dotnet/runtime/issues/81501).\r\n\r\n\r\nNo longer failing on osx-arm64 miniJIT after https://github.com/dotnet/runtime/pull/96079.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgh9EEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CHlRX",
                                           "createdAt":  "2024-06-21T16:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@lambdageek should https://github.com/dotnet/runtime/pull/96079 have fixed this?",
                                           "updatedAt":  "2024-06-21T16:01:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CH0QS",
                                           "createdAt":  "2024-06-21T16:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e @lambdageek should #96079 have fixed this?\r\n\r\nThat PR only fixed the JIT.  Interpreter still needs work, I think",
                                           "updatedAt":  "2024-06-21T16:41:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[mono] Failing runtime JIT/SIMD/Vector3Interop_r/ro tests on osx-arm64.",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono",
                       "area-Interop-mono",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97295",
        "createdAt":  "2024-01-22T11:25:45Z",
        "number":  97295,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T15:17:46Z",
        "body":  "After https://github.com/dotnet/runtime/pull/97192 was merged we started seeing timeouts in System.Numerics.Tensors.Tests on Mono across all platforms, but seemingly only when using the JIT. Interpreter runs pass fine.\r\n\r\nThere are a large number of long-running tests like this, but disabling them one-by-one wasn\u0027t helpful since then just another test was hanging so I had to disable the whole test project\r\n\r\n```\r\n[Long Running Test] \u0027System.Numerics.Tensors.Tests.NFloatGenericTensorPrimitives.IndexOfMinMagnitude_ReturnsNegative1OnEmpty\u0027, Elapsed: 00:03:17\r\n[Long Running Test] \u0027System.Numerics.Tensors.Tests.HalfGenericTensorPrimitives.IndexOfMax_ReturnsNegative1OnEmpty\u0027, Elapsed: 00:02:03\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdnnXSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xef0X",
                                           "createdAt":  "2024-01-22T11:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nealef",
                                           "body":  "@uweigand fya",
                                           "updatedAt":  "2024-01-22T11:36:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xeia5",
                                           "createdAt":  "2024-01-22T11:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "@giritrivedi @saitama951 can you see if you can recreate this on s390x",
                                           "updatedAt":  "2024-01-22T11:43:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xe0bC",
                                           "createdAt":  "2024-01-22T12:28:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "giritrivedi",
                                           "body":  "Sure @uweigand ",
                                           "updatedAt":  "2024-01-22T12:28:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x06j4",
                                           "createdAt":  "2024-01-25T09:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I believe this test on NodeJS/WASM is interpreter. \r\nIt\u0027s very very slow in linear way.\r\nKilled after 1h 15min\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-97391-merge-15b76c3b4fa443e88c/WasmTestOnNodeJS-System.Numerics.Tensors.Net8.Tests/1/console.9e46209c.log?helixlogtype=result)\r\n[Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=539843\u0026view=logs\u0026jobId=92abeb82-4b48-52bb-630e-73b3c35173bb)\r\n```\r\n[03:57:19] info: [STRT] System.Numerics.Tensors.Tests.NFloatGenericTensorPrimitives.SpanScalarDestination_InPlace(tensorPrimitivesMethod: SpanScalarDestinationDelegate`3 { Method = Void Min[NFloat](System.ReadOnlySpan`1[System.Runtime.InteropServices.NFloat], System.Runtime.InteropServices.NFloat, System.Span`1[System.Runtime.InteropServices.NFloat]), Target = null }, expectedMethod: Func`3 { Method = System.Runtime.InteropServices.NFloat Min(System.Runtime.InteropServices.NFloat, System.Runtime.InteropServices.NFloat), Target = null })\r\n[03:57:19] info: Process 2804 didn\u0027t exit within 01:15:00 and will be killed\r\n\r\n[03:57:19] info: Killing process tree of 2804...\r\n```\r\n",
                                           "updatedAt":  "2024-01-25T09:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51H7Aq",
                                           "createdAt":  "2024-02-26T19:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @brzvlad, @kotlarmilos\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAfter https://github.com/dotnet/runtime/pull/97192 was merged we started seeing timeouts in System.Numerics.Tensors.Tests on Mono across all platforms, but seemingly only when using the JIT. Interpreter runs pass fine.\r\n\r\nThere are a large number of long-running tests like this, but disabling them one-by-one wasn\u0027t helpful since then just another test was hanging so I had to disable the whole test project\r\n\r\n```\r\n[Long Running Test] \u0027System.Numerics.Tensors.Tests.NFloatGenericTensorPrimitives.IndexOfMinMagnitude_ReturnsNegative1OnEmpty\u0027, Elapsed: 00:03:17\r\n[Long Running Test] \u0027System.Numerics.Tensors.Tests.HalfGenericTensorPrimitives.IndexOfMax_ReturnsNegative1OnEmpty\u0027, Elapsed: 00:02:03\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eakoeplinger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`disabled-test`, `area-Codegen-JIT-mono`, `area-Codegen-Interpreter-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-26T19:12:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52WK_8",
                                           "createdAt":  "2024-03-08T11:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saitama951",
                                           "body":  "I had a look into the issue.\r\n\r\nHere is a extracted test case\r\n```\r\npublic abstract class func\r\n{\r\n        static void test()\r\n        {\r\n                var watch = System.Diagnostics.Stopwatch.StartNew();\r\n                Console.WriteLine(TensorPrimitives.IndexOfMinMagnitude(ReadOnlySpan\u003cint\u003e.Empty));\r\n                watch.Stop();\r\n                Console.WriteLine(\"Time Elapsed:\"+watch.ElapsedMilliseconds);\r\n\r\n        }\r\n        public static void Main(string []args)\r\n        {\r\n                 func.test();\r\n        }\r\n}\r\n\r\n```\r\nnow when running this extracted test case in debug and release, I see the release mode takes 20x times than that of the debug mode.\r\n\r\nnow looking at the perf hotspots I see a hotspot in `move_basic_block_to_end` which traverses to the end of the list and that traverses through ~100k basic blocks and these basic blocks are being generated by `inline_method`\r\n\r\ndebugging further I can see :\r\n\r\n`IndexOfMinMaxCore` generates around `~118454 basic blocks` and in which `System.Numerics.Tensors.TensorPrimitives:IndexOfFinalAggregate` in total  generates around `~70k basic blocks`\r\nfor the three different variants of the vectors (~21k basic blocks for the 128 variant, ~23k basic blocks for 256 variant, ~28k basic blocks for 512 variant ). \r\n\r\nNow in `System.Numerics.Tensors.TensorPrimitives:IndexOfFinalAggregate(System.Runtime.Intrinsics.Vector128\u003cint\u003e,System.Runtime.Intrinsics.Vector128\u003cint\u003e)`  I see a big bump in basic blocks in `TIndexOfOperator.Invoke` around `~2152 basic blocks` which is invoked 10 times  in `System.Numerics.Tensors.TensorPrimitives:IndexOfFinalAggregate` which is roughly around `~21k basic blocks`\r\n\r\nNow in `TIndexOfOperator.Invoke` I have commented the number of basic blocks being generated for the each call\r\n```\r\n            [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n            public static void Invoke(ref Vector128\u003cT\u003e result, Vector128\u003cT\u003e current, ref Vector128\u003cT\u003e resultIndex, Vector128\u003cT\u003e currentIndex)\r\n            {\r\n                Vector128\u003cT\u003e resultMag = Vector128.Abs(result), currentMag = Vector128.Abs(current); // 144 basic blocks\r\n                Vector128\u003cT\u003e useResult = Vector128.LessThan(resultMag, currentMag); // 137 basic blocks\r\n                Vector128\u003cT\u003e equalMask = Vector128.Equals(resultMag, currentMag); // 137 basic blocks\r\n\r\n                if (equalMask != Vector128\u003cT\u003e.Zero) //77 basic blocks\r\n                {\r\n                    Vector128\u003cT\u003e lessThanIndexMask = IndexLessThan(resultIndex, currentIndex); //556 basic blocks\r\n                    if (typeof(T) == typeof(float) || typeof(T) == typeof(double))\r\n                    {\r\n                        // bool useResult = equal \u0026\u0026 ((IsNegative(result) == IsNegative(current)) ? (resultIndex \u003c currentIndex) : IsNegative(result));\r\n                        Vector128\u003cT\u003e resultNegative = IsNegative(result); // 417 basic blocks\r\n                        Vector128\u003cT\u003e sameSign = Vector128.Equals(resultNegative.AsInt32(), IsNegative(current).AsInt32()).As\u003cint, T\u003e(); //417 + 137 basic blocks\r\n                        useResult |= equalMask \u0026 ElementWiseSelect(sameSign, lessThanIndexMask, resultNegative); //36 blocks\r\n                    }\r\n                    else\r\n                    {\r\n                        useResult |= equalMask \u0026 lessThanIndexMask;\r\n                    }\r\n                }\r\n\r\n                result = ElementWiseSelect(useResult, result, current); //36 blocks\r\n                resultIndex = ElementWiseSelect(useResult, resultIndex, currentIndex); //36 blocks\r\n            }\r\n```\r\n\r\nThe library call `System.Numerics.Tensors.TensorPrimitives:IsNegative` and  `System.Numerics.Tensors.TensorPrimitives:IndexLessThan` invokes `Vector128.LessThan` (~137 basic blocks) for 3 and 4 times respectively.\r\n\r\nThe `Vector128.LessThan` calls `2 * Vector64.LessThan` and then in the end `Scalar.LessThan` and `Scalar.get_AllBitsSet`gets called which generates around `~120 basic blocks ((36+24)*2)`\r\n\r\nhttps://github.com/dotnet/runtime/blob/e7e3dee0a50e1780c889d63797089acc12e564da/src/libraries/System.Private.CoreLib/src/System/Runtime/Intrinsics/Vector64.cs#L1438-#L1449\r\n\r\nsince all of these are dead code for s390x, Is there a way that this can be eliminated way before the other optimization passes?\r\n\r\nAnother concern is that \r\nwhile inlining we can see intermediate basic blocks being generated and then being merged, although I don\u0027t see \r\n`cfg-\u003enum_bblocks` being updated on-the-go (looks like this is being used as a counter to assign to `cfg-\u003eblock_num` but also used for loop calculations in other optimizations like `mono_optimize_branches`) . I believe we should keep an extra variable to do the job as the counter. \r\n\r\ncc: @uweigand @akoeplinger \r\n",
                                           "updatedAt":  "2024-03-08T11:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52XKaH",
                                           "createdAt":  "2024-03-08T14:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@vargaz would you mind helping with this issue?",
                                           "updatedAt":  "2024-03-08T14:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52ad0w",
                                           "createdAt":  "2024-03-09T00:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "I can\u0027t reproduce this. This might have been fixed recently by this and related PRs:\r\nhttps://github.com/dotnet/runtime/pull/97096",
                                           "updatedAt":  "2024-03-09T00:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52afNN",
                                           "createdAt":  "2024-03-09T00:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZ9glA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2024-03-09T10:55:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vargaz",
                                           "body":  "I can reproduce, it only seems to happen on platforms without SIMD.\r\n",
                                           "updatedAt":  "2024-03-09T00:57:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52bcns",
                                           "createdAt":  "2024-03-09T16:31:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "The PR will improve the situation somewhat (2s -\u003e 0.7s).\r\n",
                                           "updatedAt":  "2024-03-09T16:31:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52eddI",
                                           "createdAt":  "2024-03-11T06:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saitama951",
                                           "body":  "@vargaz Thanks for the fix, this reduced the regression from 2k ms -\u003e 1k ms  . however, I see some vector methods still being inlined i.e\r\n```\r\nINLINE START 0x2aa31a22938 System.Numerics.Tensors.TensorPrimitives:IndexOfMinMaxCore\u003cint, System.Numerics.Tensors.TensorPrimitives/IndexOfMinMagnitudeOperator`1\u003cint\u003e\u003e (System.ReadOnlySpan`1\u003cint\u003e) -\u003e System.Runtime.Intrinsics.Vector512:Create (int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16)\r\ncreated temp 418 (R983) of type System.Runtime.Intrinsics.Vector512\u003cSystem.Int16\u003e\r\nmethod to IR System.Runtime.Intrinsics.Vector512:Create (int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16,int16)\r\n```\r\n\r\nhowever I was thinking to disable inlining for vector methods completely for platforms which don\u0027t support it\r\n\r\n```\r\n@@ -4783,6 +4785,19 @@ inline_method (MonoCompile *cfg, MonoMethod *cmethod, MonoMethodSignature *fsig,\r\n \r\n        if (!fsig)\r\n                fsig = mono_method_signature_internal (cmethod);\r\n+      if (!(cfg-\u003eopt \u0026 MONO_OPT_SIMD))\r\n+       {\r\n+               if (!strcmp (m_class_get_name_space (cmethod-\u003eklass), \"System.Runtime.Intrinsics\"))\r\n+               {\r\n+                       if (!strncmp(m_class_get_name (cmethod-\u003eklass), \"Vector\", 6)) {\r\n+                               const char *vector_type = m_class_get_name (cmethod-\u003eklass) + 6;\r\n+                       if (!strcmp(vector_type, \"256`1\") || !strcmp(vector_type, \"512`1\") || !strcmp(vector_type, \"256\") || !strcmp(vector_type, \"512\"))\r\n+                               return 0;\r\n+                       if (!(cfg-\u003eopt \u0026 MONO_OPT_SIMD) \u0026\u0026 (!strcmp (vector_type, \"128`1\") || !strcmp (vector_type, \"128\") || !strcmp (vector_type, \"64`1\") || !strcmp (vector_type, \"64\")))\r\n+                               return 0;\r\n+                       }\r\n+               }\r\n+       }\r\n \r\n        if (cfg-\u003everbose_level \u003e 2)\r\n                printf (\"INLINE START %p %s -\u003e %s\\n\", cmethod,  mono_method_full_name (cfg-\u003emethod, TRUE), mono_method_full_name (cmethod, TRUE));\r\n```\r\nbefore this patch\r\n```\r\ndotnet bin/Release/net9.0/tensor.dll\r\n-1\r\nTime Elapsed:1028\r\n```\r\nafter this patch \r\n```\r\ndotnet bin/Release/net9.0/tensor.dll\r\n-1\r\nTime Elapsed:151\r\n```\r\n\r\n ",
                                           "updatedAt":  "2024-03-11T06:10:26Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "System.Numerics.Tensors.Tests cause long-running/hanging tests on Mono JIT (not interpreter)",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono",
                       "area-Codegen-Interpreter-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98628",
        "createdAt":  "2024-02-18T12:30:13Z",
        "number":  98628,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-22T12:31:16Z",
        "body":  "The [test](https://raw.githubusercontent.com/dotnet/runtime/0d4f4f4b95b6e5e79b92c5a3dc04cb3821c639ef/src/tests/JIT/opt/Structs/MemsetMemcpyNullref.cs) I am adding in https://github.com/dotnet/runtime/pull/98623 fails on mono (at least on `mono windows x64 Release @ Windows.10.Amd64.Open` - [logs](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98623-merge-2ed34bfafe16432589/JIT.opt/1/console.7004ed36.log?helixlogtype=result). probably will fail on other pipelines as well).\r\n\r\n```cs\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing Xunit;\r\n\r\npublic unsafe class MemsetMemcpyNullref\r\n{\r\n    [Fact]\r\n    public static void MemsetMemcpyThrowNullRefonNull()\r\n    {\r\n        Assert.Throws\u003cNullReferenceException\u003e(() =\u003e MemoryInit(null));\r\n        Assert.Throws\u003cNullReferenceException\u003e(() =\u003e MemoryCopy(null, null));\r\n        Assert.Throws\u003cNullReferenceException\u003e(() =\u003e\r\n            {\r\n                // Check when only src is null\r\n                HugeStruct hs = default;\r\n                MemoryCopy(\u0026hs, null);\r\n            });\r\n        Assert.Throws\u003cNullReferenceException\u003e(() =\u003e\r\n            {\r\n                // Check when only dst is null\r\n                HugeStruct hs = default;\r\n                MemoryCopy(null, \u0026hs);\r\n            });\r\n\r\n        // Check various lengths\r\n        uint[] lengths = [1, 10, 100, 1000, 10000, 100000, 1000000];\r\n        foreach (uint length in lengths)\r\n        {\r\n            Assert.Throws\u003cNullReferenceException\u003e(() =\u003e MemoryInitByref(ref Unsafe.NullRef\u003cbyte\u003e(), length));\r\n            Assert.Throws\u003cNullReferenceException\u003e(() =\u003e MemoryCopyByref(ref Unsafe.NullRef\u003cbyte\u003e(), ref Unsafe.NullRef\u003cbyte\u003e(), length));\r\n        }\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void MemoryCopy(HugeStruct* dst, HugeStruct* src) =\u003e \r\n        *dst = *src;\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void MemoryCopyByref(ref byte dst, ref byte src, uint len) =\u003e \r\n        Unsafe.CopyBlockUnaligned(ref dst, ref src, len);\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void MemoryInit(HugeStruct* dst) =\u003e \r\n        *dst = default;\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void MemoryInitByref(ref byte dst, uint len) =\u003e \r\n        Unsafe.InitBlockUnaligned(ref dst, 42, len);\r\n\r\n    private struct HugeStruct\r\n    {\r\n        public fixed byte Data[20_000];\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqCfROw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50fQ4j",
                                           "createdAt":  "2024-02-20T14:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @steveisok ",
                                           "updatedAt":  "2024-02-20T14:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50lBMK",
                                           "createdAt":  "2024-02-21T04:18:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "This happens because it eventually calls Buffer:Memmove, which doesn\u0027t throw for null/null because of these lines:\r\n```\r\n            if (((nuint)(nint)Unsafe.ByteOffset(ref src, ref dest) \u003c len) || ((nuint)(nint)Unsafe.ByteOffset(ref dest, ref src) \u003c len))\r\n            {\r\n                goto BuffersOverlap;\r\n            }\r\n```\r\n```\r\n        BuffersOverlap:\r\n            // If the buffers overlap perfectly, there\u0027s no point to copying the data.\r\n            if (Unsafe.AreSame(ref dest, ref src))\r\n            {\r\n                return;\r\n            }\r\n```",
                                           "updatedAt":  "2024-02-21T04:18:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CHVIN",
                                           "createdAt":  "2024-06-21T15:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Actually, given it\u0027s windows x64 mono, we probably won\u0027t fix this.",
                                           "updatedAt":  "2024-06-21T15:22:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CHXrS",
                                           "createdAt":  "2024-06-21T15:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This is a disabled test issue, and it\u0027s marked for all platforms.   So we should update issues.targets before closing; also we should validate what happens on non-Windows platforms\r\n\r\nhttps://github.com/dotnet/runtime/blob/18bc1158575cc4c653a660d4a52c0217ea20c647/src/tests/issues.targets#L1911-L1913",
                                           "updatedAt":  "2024-06-21T15:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oJ9E7",
                                           "createdAt":  "2025-04-22T12:31:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "The test is crashing on apple mobile as well (see https://dev.azure.com/dnceng-public/public/_build/results?buildId=1022038)\n```\n04:33:45] dbug: 2025-04-22 04:33:45.856615-0400 JIT.opt[31537:721847] 04:33:45.856 Running test: JIT/opt/Structs/MemsetMemcpyNullref/MemsetMemcpyNullref.dll\n[04:33:45] dbug: \n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Native Crash Reporting\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Got a SIGSEGV while executing native code. This usually indicates\n[04:33:45] dbug: a fatal error in the mono runtime or one of the native libraries\n[04:33:45] dbug: used by your application.\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: \n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Native stacktrace:\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: 0x10292aaf4 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_dump_native_crash_info\n[04:33:45] dbug: 0x1028d6e60 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_handle_native_crash\n[04:33:45] dbug: 0x102843b70 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_sigsegv_signal_handler_debug\n[04:33:45] dbug: 0x102d677e0 - /usr/lib/system/libsystem_platform.dylib : _sigtramp\n[04:33:45] dbug: 0x102938c9c - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_interp_exec_method\n[04:33:45] dbug: 0x10292c040 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : interp_runtime_invoke\n[04:33:45] dbug: 0x102846df4 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_jit_runtime_invoke\n[04:33:45] dbug: 0x1027dbee4 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_runtime_invoke_checked\n[04:33:45] dbug: 0x1027e30f0 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_runtime_exec_main_checked\n[04:33:45] dbug: 0x102899fe8 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_jit_exec\n[04:33:45] dbug: 0x1029ddc64 - /Users/helix-runner/Library/Developer/CoreSimulator/Devices/F0181BD0-1FFB-4066-9C00-23083DF5431F/data/Containers/Bundle/Application/C36CB03A-21F7-4B75-8055-3A1866897685/JIT.opt.app/JIT.opt : mono_ios_runtime_init\n[04:33:45] dbug: 0x18016a4f4 - /Library/Developer/CoreSimulator/Volumes/iOS_21A342/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/usr/lib/system/libdispatch.dylib : _dispatch_call_block_and_release\n[04:33:45] dbug: 0x18016bd3c - /Library/Developer/CoreSimulator/Volumes/iOS_21A342/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/usr/lib/system/libdispatch.dylib : _dispatch_client_callout\n[04:33:45] dbug: 0x18016f288 - /Library/Developer/CoreSimulator/Volumes/iOS_21A342/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/usr/lib/system/libdispatch.dylib : _dispatch_queue_override_invoke\n[04:33:45] dbug: 0x18017e30c - /Library/Developer/CoreSimulator/Volumes/iOS_21A342/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/usr/lib/system/libdispatch.dylib : _dispatch_root_queue_drain\n[04:33:45] dbug: 0x18017ed58 - /Library/Developer/CoreSimulator/Volumes/iOS_21A342/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 17.0.simruntime/Contents/Resources/RuntimeRoot/usr/lib/system/libdispatch.dylib : _dispatch_worker_thread2\n[04:33:45] dbug: 0x102d877d8 - /usr/lib/system/libsystem_pthread.dylib : _pthread_wqthread\n[04:33:45] dbug: 0x102d865d4 - /usr/lib/system/libsystem_pthread.dylib : start_wqthread\n[04:33:45] dbug: \n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: External Debugger Dump:\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: \n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Basic Fault Address Reporting\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Memory around native instruction pointer (0x102d670e0):0x102d670d0  61 04 01 a8 61 04 02 a8 61 04 03 a8 c0 03 5f d6  a...a...a....._.\n[04:33:45] dbug: 0x102d670e0  01 04 00 a9 01 04 01 a9 01 04 02 a9 01 04 03 a9  ................\n[04:33:45] dbug: 0x102d670f0  03 00 01 91 63 e4 7a 92 42 00 00 8b 64 00 01 91  ....c.z.B...d...\n[04:33:45] dbug: 0x102d67100  42 00 04 eb 09 01 00 54 61 04 00 a9 61 04 01 a9  B......Ta...a...\n[04:33:45] dbug: \n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: Managed Stacktrace:\n[04:33:45] dbug: =================================================================\n[04:33:45] dbug: =================================================================\n```",
                                           "updatedAt":  "2025-04-22T12:31:15Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "MemsetMemcpyNullref test fails on mono",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100368",
        "createdAt":  "2024-03-27T20:58:45Z",
        "number":  100368,
        "author":  "khushal1996",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3B5-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fanyang-mono",
                                            "createdAt":  "2024-04-05T13:41:12Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-08T18:51:18Z",
        "body":  "This issue is created to track the discussion in the comment --\u003e https://github.com/dotnet/runtime/pull/97529#discussion_r1540169029\r\nPR https://github.com/dotnet/runtime/pull/97529 changes the behavior of floating point to integer conversions on ```x86/x64```. It allows the conversions to follow saturating behavior which .NET wants to standardize on.\r\n\r\nLink to the failing build --\u003e https://github.com/dotnet/runtime/pull/97529/checks?check_run_id=23012453843\r\n\r\n@fanyang-mono for tracking this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeOjVsA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc546NWw",
                                           "createdAt":  "2024-03-31T01:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdJyDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fanyang-mono",
                                                                               "createdAt":  "2024-04-05T13:41:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Just noting that this applies to all `floating point -\u003e integer` conversions, they should all saturate under the new behavior we\u0027re standardizing against.",
                                           "updatedAt":  "2024-03-31T01:48:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Fix behavior of (uint)val in Mono to saturating behavior",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102752",
        "createdAt":  "2024-05-28T11:40:37Z",
        "number":  102752,
        "author":  "Cheesebaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T11:24:40Z",
        "body":  "### Description\n\nI asked the Android team on Discord for help and @grendello suggested I ask here.\r\n\r\nWe have an net8.0-android App which over the past 28 days has crashed 1.18k times, with a stack trace looking like this:\r\n\r\n```\r\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\npid: 0, tid: 15428 \u003e\u003e\u003e dk.TrackMan.Range \u003c\u003c\u003c\r\n\r\nbacktrace:\r\n  #00  pc 0x000000000005b730  /apex/com.android.runtime/lib64/bionic/libc.so (abort+168)\r\n  #01  pc 0x000000000001f360  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmono-android.release.so (xamarin::android::Helpers::abort_application()+8) (BuildId: 7feeaaea39e016c6c3bff7e94f0388b70b31f6ba)\r\n  #02  pc 0x0000000000035660  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmono-android.release.so (xamarin::android::internal::MonodroidRuntime::mono_log_handler(char const*, char const*, char const*, int, void*)+144) (BuildId: 7feeaaea39e016c6c3bff7e94f0388b70b31f6ba)\r\n  #03  pc 0x00000000001d71e4  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (BuildId: 0f098099f9864f5dd2f171de2c2842c264a97a1d)\r\n  #04  pc 0x00000000001d726c  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (BuildId: 0f098099f9864f5dd2f171de2c2842c264a97a1d)\r\n  #05  pc 0x0000000000151814  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (BuildId: 0f098099f9864f5dd2f171de2c2842c264a97a1d)\r\n  #06  pc 0x0000000000151eb4  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (BuildId: 0f098099f9864f5dd2f171de2c2842c264a97a1d)\r\n  #07  pc 0x0000000000152e8c  /data/app/~~oWkaprkaM-X9XxV2Lq1pYQ==/dk.TrackMan.Range-O-vSFm8F64wPfrurmwaykg==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (BuildId: 0f098099f9864f5dd2f171de2c2842c264a97a1d)\r\n  #08  pc 0x0000000000005500 \r\n```\r\n\r\nIt seems to be happening mostly on arm64 devices, but they are also the most prevalent in our install base:\r\n\r\n\u003cimg width=\"718\" alt=\"crashes distributed by Android version and by Device\" src=\"https://github.com/dotnet/runtime/assets/249719/935f7046-1ed0-4b70-bc45-56bfe9073d10\"\u003e\r\n\r\n@grendello asked me for the libmonosgen-2.0.so file to figure out where the crash happens and he ended up here:\r\n\r\n```\r\n0x151814\r\n/__w/1/s/src/mono/mono/mini/mini-trampolines.c:217\r\n\r\n0x151eb4\r\n/__w/1/s/src/mono/mono/mini/mini-trampolines.c:478\r\n\r\n0x152e8c\r\n/__w/1/s/src/mono/mono/mini/mini-trampolines.c:850\r\n```\r\n\r\nThe libmonosgen-2.0.so and libmonodroid.so files\r\n[Archive.zip](https://github.com/dotnet/runtime/files/15468931/Archive.zip)\r\n\r\nThe app is built with the following properties:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0-android\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cApplicationId\u003edk.TrackMan.Range\u003c/ApplicationId\u003e\r\n    \u003cApplicationVersion\u003e1337\u003c/ApplicationVersion\u003e\r\n    \u003cApplicationDisplayVersion\u003e2.10.0\u003c/ApplicationDisplayVersion\u003e\r\n    \u003cRootNamespace\u003eTrackMan.DrivingRangeApp.Droid\u003c/RootNamespace\u003e\r\n\r\n    \u003cConfigurations\u003eDebug;Release;Labs;UITest\u003c/Configurations\u003e\r\n\r\n    \u003cAndroidHttpClientHandlerType\u003eXamarin.Android.Net.AndroidMessageHandler\u003c/AndroidHttpClientHandlerType\u003e\r\n    \u003cAndroidPackageFormat\u003eapk\u003c/AndroidPackageFormat\u003e\r\n    \u003cSupportedOSPlatformVersion\u003e28\u003c/SupportedOSPlatformVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cPropertyGroup Condition=\" \u0027$(Configuration)\u0027 == \u0027Release\u0027 \"\u003e\r\n    \u003cAndroidPackageFormat\u003eaab\u003c/AndroidPackageFormat\u003e\r\n    \u003cJavaMaximumHeapSize\u003e1G\u003c/JavaMaximumHeapSize\u003e\r\n    \u003cAndroidEnableMultiDex\u003etrue\u003c/AndroidEnableMultiDex\u003e\r\n    \u003cEmbedAssembliesIntoApk\u003etrue\u003c/EmbedAssembliesIntoApk\u003e\r\n    \u003cAndroidUseAssemblyStore\u003etrue\u003c/AndroidUseAssemblyStore\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cPropertyGroup Condition=\" \u0027$(TF_BUILD)\u0027 == \u0027true\u0027 \"\u003e\r\n    \u003cDesignTimeBuild\u003efalse\u003c/DesignTimeBuild\u003e\r\n    \u003cContinuousIntegrationBuild\u003etrue\u003c/ContinuousIntegrationBuild\u003e\r\n    \u003cDeterministic\u003efalse\u003c/Deterministic\u003e\r\n  \u003c/PropertyGroup\u003e\r\n```\r\n\r\nUsing `dotnet publish project.csproj /p:PublishTrimmed=true`\n\n### Reproduction Steps\n\nI have no idea how to reproduce it and haven\u0027t seen it myself. Only the 1.18k crashes in Google Play Console.\n\n### Expected behavior\n\nPreferably the App would not crash.\n\n### Actual behavior\n\nLots of Crashes.\n\n### Regression?\n\nI see it for older versions of the App to, so I don\u0027t believe so.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n@(#)Version 8.0.524.21615 @Commit: 087e15321bb712ef6fe8b0ba6f8bd12facf92629\r\n\r\nAndroid 14, 13, 12, 10\r\n\r\nArm64\r\n\r\nnet8.0-android\r\n\r\nIn the pipeline this was built on Windows using .NET 8.0.300\r\n\r\nWorkloads:\r\n\r\nmicrosoft.net.sdk.android version 34.0.95\r\nMicrosoft.Android.Sdk.Windows version 33.0.95\r\nMicrosoft.Android.Runtime.34.android-arm64 version 34.0.95\r\nMicrosoft.NETCore.App.Runtime.Mono.android-arm64 version 8.0.5\r\nMicrosoft.NETCore.App.Runtime.AOT.win-x64.Cross.android-arm64 version 8.0.5\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhCrJ6Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_RXLH",
                                           "createdAt":  "2024-05-28T13:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-28T13:44:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EJrhZ",
                                           "createdAt":  "2024-07-09T09:19:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@Cheesebaron thanks for the bugreport. I don\u0027t think we currently have enough actionable information to identify and fix the issue. Please share more details when you have any.",
                                           "updatedAt":  "2024-07-09T09:19:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EKXw_",
                                           "createdAt":  "2024-07-09T10:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cheesebaron",
                                           "body":  "@simonrozsival such as?",
                                           "updatedAt":  "2024-07-09T10:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EKsCX",
                                           "createdAt":  "2024-07-09T11:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@Cheesebaron any additional logs that would show what immediately preceded the crash or ideally a minimal repro project.",
                                           "updatedAt":  "2024-07-09T11:23:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EKsnp",
                                           "createdAt":  "2024-07-09T11:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODo9rUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simonrozsival",
                                                                               "createdAt":  "2024-07-09T11:39:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Cheesebaron",
                                           "body":  "I wish I had either of these. I haven\u0027t been able to reproduce this myself. I\u0027ll see if I can add some more instrumentation for a future release of the App to see if there is more information to be gotten.",
                                           "updatedAt":  "2024-07-09T11:24:39Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Android App crashes with abort_application()",
        "labels":  [
                       "os-android",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103539",
        "createdAt":  "2024-06-16T13:23:57Z",
        "number":  103539,
        "author":  "DogFortune",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T16:16:06Z",
        "body":  "Hi\r\n\r\nI am building an application that calculates the hash value of a file using xxhash.\r\nhttps://github.com/DogFortune/F2Checker/blob/63f6402ab041db50363a2e37bb2ccd180d04f9e4/F2Checker/Models/AppContext.cs#L29\r\n\r\nI know that xxhash is very fast. However, we are currently encountering a problem where the speed is not as fast as we would like.\r\nhanging the hash algorithm to SHA256 improves speed.\r\n\r\nThese are the results measured in the release build. Measurements were taken on 14 GiB mp4 files.\r\n\r\nxxhash128: 350MB/s\r\nSHA256: 1.63GB/s\r\n\r\nPlease tell me why performance is not improving.\r\n\r\nI am Japanese and not good at English, so I am sorry if I am wrong.\r\n\r\n### Configuration\r\n- .NET 8\r\n- .NET MAUI\r\n- macOS Sonoma 14.5\r\n- Apple M1 Pro",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhSB4gQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BcSam",
                                           "createdAt":  "2024-06-16T14:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODl3CNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DogFortune",
                                                                               "createdAt":  "2024-06-17T00:41:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Please share a standalone benchmark using benchmarkdotnet. My guess is you\u0027re measuring the native code behind SHA256 against unoptimized C# due to not having tiered up yet to optimized code. Measuring a single run with DateTime is not going to give you a representative answer for sustained throughput. ",
                                           "updatedAt":  "2024-06-16T14:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bcf4m",
                                           "createdAt":  "2024-06-16T15:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "Using `XxHash128` on an Apple M1 Ultra, I get better throughput.\r\n\r\n```C#\r\nusing System.IO;\r\nusing System.IO.Hashing;\r\nusing System.Security.Cryptography;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\nBenchmarkRunner.Run\u003cBench\u003e();\r\n\r\n[MemoryDiagnoser]\r\npublic class Bench {\r\n    [Benchmark]\r\n    public byte[] BenchSHA256()\r\n    {\r\n        using var fs = File.OpenRead(\"/Users/vcsjones/Projects/scratch/input.bin\");\r\n        return SHA256.HashData(fs);\r\n    }\r\n\r\n    [Benchmark]\r\n    public byte[] BenchXxHash128()\r\n    {\r\n        using var fs = File.OpenRead(\"/Users/vcsjones/Projects/scratch/input.bin\");\r\n        XxHash128 hash = new();\r\n        hash.Append(fs);\r\n        return hash.GetHashAndReset();\r\n    }\r\n}\r\n```\r\n\r\n| Method         | Mean    | Error    | StdDev   | Allocated |\r\n|--------------- |--------:|---------:|---------:|----------:|\r\n| BenchSHA256    | 8.118 s | 0.0091 s | 0.0081 s |   5.46 KB |\r\n| BenchXxHash128 | 3.032 s | 0.0139 s | 0.0123 s |   5.77 KB |\r\n\r\nWhere `input.bin` is a 14 GB random binary file.\r\n\r\nI will also note that in your example, you are reading from the file in chunks and then appending it to either `SHA256` or `XxHash128`. If all you need is one of them, then both SHA256 and XxHash128 have the ability to read directly from a stream, as demonstrated above. In the case of `SHA256`, using the static `SHA256.HashData` will be significantly more efficient. There are also Async versions that accept a cancellation token to use if you need them.",
                                           "updatedAt":  "2024-06-16T15:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BdPMW",
                                           "createdAt":  "2024-06-16T23:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I ran this bench on Azure arm64 vs x64 and arm64 seems to be 3x slower (x64 has avx2 though), see https://github.com/dotnet/runtime/pull/99871#issuecomment-2171919221\r\n\r\nafter inspecting asm, it seems that arm64 impl suffers a lot from `Vector128\u003culong\u003e * Vector128\u003culong\u003e` operation which is not accelerated",
                                           "updatedAt":  "2024-06-16T23:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BdQGU",
                                           "createdAt":  "2024-06-16T23:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODl26qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "DogFortune",
                                                                               "createdAt":  "2024-06-16T23:59:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Ah, same on x64 when Avx512 is not presented. Basically, XxHash128 hits this issue (in `ScrambleAccumulator*`):\r\n\r\n```cs\r\nVector128\u003culong\u003e Mul(Vector128\u003culong\u003e a, Vector128\u003culong\u003e b) =\u003e a * b;\r\n```\r\nAvx512:\r\n```asm\r\n; Method Bench:Mul\r\n       vmovups  xmm0, xmmword ptr [r8]\r\n       vpmullq  xmm0, xmm0, xmmword ptr [r9]\r\n       vmovups  xmmword ptr [rdx], xmm0\r\n       mov      rax, rdx\r\n       ret      \r\n; Total bytes of code: 19\r\n```\r\nAvx2 only:\r\n```asm\r\n; Method Bench:Mul\r\n       push     rsi\r\n       push     rbx\r\n       sub      rsp, 104\r\n       mov      rbx, rdx\r\n       mov      rdx, qword ptr [r8]\r\n       mov      qword ptr [rsp+0x58], rdx\r\n       mov      rdx, qword ptr [r9]\r\n       mov      qword ptr [rsp+0x50], rdx\r\n       mov      rdx, qword ptr [rsp+0x58]\r\n       imul     rdx, qword ptr [rsp+0x50]\r\n       mov      qword ptr [rsp+0x60], rdx\r\n       mov      rsi, qword ptr [rsp+0x60]\r\n       mov      rdx, qword ptr [r8+0x08]\r\n       mov      qword ptr [rsp+0x40], rdx\r\n       mov      rdx, qword ptr [r9+0x08]\r\n       mov      qword ptr [rsp+0x38], rdx\r\n       mov      rcx, qword ptr [rsp+0x40]\r\n       mov      rdx, qword ptr [rsp+0x38]\r\n       call     [System.Runtime.Intrinsics.Scalar`1[ulong]:Multiply(ulong,ulong):ulong]\r\n       mov      qword ptr [rsp+0x48], rax\r\n       mov      rax, qword ptr [rsp+0x48]\r\n       mov      qword ptr [rsp+0x20], rsi\r\n       mov      qword ptr [rsp+0x28], rax\r\n       vmovaps  xmm0, xmmword ptr [rsp+0x20]\r\n       vmovups  xmmword ptr [rbx], xmm0\r\n       mov      rax, rbx\r\n       add      rsp, 104\r\n       pop      rbx\r\n       pop      rsi\r\n       ret      \r\n; Total bytes of code: 120\r\n```\r\nArm64:\r\n```asm\r\n; Method Bench:Mul\r\nG_M34924_IG01:  ;; offset=0x0000\r\n            stp     fp, lr, [sp, #-0x60]!\r\n            str     d8, [sp, #0x58]\r\n            mov     fp, sp\r\n            mov     v16.16b, v0.16b\r\n            str     d16, [fp, #0x48]\t// [V08 tmp5]\r\n            mov     v16.16b, v1.16b\r\n            str     d16, [fp, #0x40]\t// [V09 tmp6]\r\n            ldp     x0, x1, [fp, #0x40]\t// [V09 tmp6], [V08 tmp5]\r\n            mul     x1, x0, x1\r\n            str     x1, [fp, #0x50]\t// [V06 tmp3]\r\n            ldr     d8, [fp, #0x50]\t// [V06 tmp3]\r\n            ext     v16.16b, v0.16b, v0.16b, #8\r\n            str     d16, [fp, #0x30]\t// [V25 tmp22]\r\n            ext     v16.16b, v1.16b, v1.16b, #8\r\n            str     d16, [fp, #0x28]\t// [V26 tmp23]\r\n            ldp     x1, x0, [fp, #0x28]\t// [V26 tmp23], [V25 tmp22]\r\n            movz    x2, #0xD740      // code for System.Runtime.Intrinsics.Scalar`1[ulong]:Multiply(ulong,ulong):ulong\r\n            movk    x2, #0xB2A5 LSL #16\r\n            movk    x2, #0x7FFA LSL #32\r\n            ldr     x2, [x2]\r\n            blr     x2 // calling Scalar`1[ulong]:Multiply(ulong,ulong):ulong helper\r\n            str     x0, [fp, #0x38]\t// [V23 tmp20]\r\n            ldr     d0, [fp, #0x38]\t// [V23 tmp20]\r\n            ldr     q16, [fp, #0x10]\t// [V38 tmp35]\r\n            ins     v16.d[0], v8.d[0]\r\n            ins     v16.d[1], v0.d[0]\r\n            mov     v0.16b, v16.16b\r\n            ldr     d8, [sp, #0x58]\r\n            ldp     fp, lr, [sp], #0x60\r\n            ret     lr\r\n; Total bytes of code: 120\r\n```\r\n\r\nTL;DR: XxHash128 hits some terrible penalty on Arm64 and x64 without Avx512",
                                           "updatedAt":  "2024-06-16T23:58:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bdbli",
                                           "createdAt":  "2024-06-17T00:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DogFortune",
                                           "body":  "The only hash function required is xxhash. I added this tentatively to see what happens if the hash function is changed to SHA256.\r\nI plan to implement a progress bar in the future, so I load it in chunks.\r\nI intend to measure benchmarks in my environment as well. I will share the results when they are available.\r\n\r\n\u003e Where `input.bin` is a 14 GB random binary file.\r\n\u003e \r\n\u003e I will also note that in your example, you are reading from the file in chunks and then appending it to either `SHA256` or `XxHash128`. If all you need is one of them, then both SHA256 and XxHash128 have the ability to read directly from a stream, as demonstrated above. In the case of `SHA256`, using the static `SHA256.HashData` will be significantly more efficient. There are also Async versions that accept a cancellation token to use if you need them.",
                                           "updatedAt":  "2024-06-17T00:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bdj9I",
                                           "createdAt":  "2024-06-17T01:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DogFortune",
                                           "body":  "``` csharp\r\n    [Benchmark]\r\n    public byte[] BenchSHA256()\r\n    {\r\n        using var fs = File.OpenRead(\"test.mp4\");\r\n        return SHA256.HashData(fs);\r\n    }\r\n    \r\n    [Benchmark]\r\n    public string BenchXxHash128()\r\n    {\r\n        using var fs = File.OpenRead(\"test.mp4\");\r\n        XxHash128 xxhash = new();\r\n        xxhash.Append(fs);\r\n        var hash = Convert.ToHexString(xxhash.GetHashAndReset()).ToLower();\r\n        Console.WriteLine(hash);\r\n        return hash;\r\n    }\r\n\r\n\t[Benchmark]\r\n    public async Task\u003cstring\u003e GetHashAsync()\r\n    {\r\n        var filename = \"test.mp4\";\r\n        int _bufferSize = 1024 * 1024 * 10;\r\n        var Buffer = new byte[_bufferSize];\r\n        var Status = string.Empty;\r\n        using (var entryStream = File.OpenRead(filename))\r\n        {\r\n            var xxhash = new XxHash128();\r\n            long totalBytesRead = 0;\r\n            var bytesRead = await entryStream.ReadAsync(Buffer, 0, Buffer.Length)\r\n                .ConfigureAwait(false);\r\n            var startTime = DateTime.Now;\r\n            var speed = new ByteSize();\r\n            while (bytesRead \u003e 0)\r\n            {\r\n                xxhash.Append(Buffer.AsSpan(0, bytesRead));\r\n                totalBytesRead += bytesRead;\r\n                speed = ByteSize.FromBytes(totalBytesRead / (DateTime.Now - startTime).TotalSeconds);\r\n                Status = $\"{speed.LargestWholeNumberValue:#.##}{speed.LargestWholeNumberSymbol}/s\";\r\n                Console.WriteLine(Status);\r\n                bytesRead = await entryStream.ReadAsync(Buffer, 0, Buffer.Length)\r\n                    .ConfigureAwait(false);\r\n            }\r\n            Array.Clear(Buffer, 0, Buffer.Length);\r\n            return Convert.ToHexString(xxhash.GetHashAndReset()).ToLower();\r\n        }\r\n    }\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet v0.13.12, macOS Sonoma 14.5 (23F79) [Darwin 23.5.0]\r\nApple M1 Pro, 1 CPU, 8 logical and 8 physical cores\r\n.NET SDK 8.0.204\r\n  [Host]     : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD\r\n  DefaultJob : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD\r\n\r\n\r\n| Method         | Mean    | Error    | StdDev   | Allocated   |\r\n|--------------- |--------:|---------:|---------:|------------:|\r\n| BenchSHA256    | 9.978 s | 0.1320 s | 0.1235 s |     5.46 KB |\r\n| BenchXxHash128 | 4.203 s | 0.0452 s | 0.0401 s |     5.94 KB |\r\n| GetHashAsync | 2.623 s | 0.0396 s | 0.0309 s |  10.27 MB |\r\n\r\nThe speed indicated by `GetHashAsync` was 5.5GB/s. Benchmark measured results were very high performance, so we can conclude that there is no problem with the code.\r\nIs the fact that it is a GUI application using net8.0-maccatalyst the cause of the performance degradation?",
                                           "updatedAt":  "2024-08-22T11:12:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Be0rU",
                                           "createdAt":  "2024-06-17T05:50:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODl6LRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DL444",
                                                                               "createdAt":  "2024-06-17T10:28:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "@DogFortune Your benchmark code contains too many mixture of unrelated stuffs.\r\n\r\nHowever, it seems that the default buffer size for `Append(Stream)` is too small:\r\n\r\n```csharp\r\n    [Benchmark]\r\n    [Arguments(4096)]\r\n    [Arguments(4096 * 1024)]\r\n    public UInt128 GetHash(int bufferSize)\r\n    {\r\n        using var fs = File.OpenRead(@\"D:\\data.zip\"); // 162 MB\r\n        XxHash128 hash = new XxHash128();\r\n        byte[] buffer = ArrayPool\u003cbyte\u003e.Shared.Rent(bufferSize);\r\n        int bytesRead;\r\n        while ((bytesRead = fs.Read(buffer)) != 0)\r\n        {\r\n            hash.Append(buffer.AsSpan(0, bytesRead));\r\n        }\r\n        ArrayPool\u003cbyte\u003e.Shared.Return(buffer);\r\n\r\n        return hash.GetCurrentHashAsUInt128();\r\n    }\r\n```\r\n\r\n|  Method | bufferSize |      Mean |    Error |   StdDev |\r\n|-------- |----------- |----------:|---------:|---------:|\r\n| GetHash |       4096 | 131.24 ms | 2.343 ms | 2.077 ms |\r\n| GetHash |    4194304 |  45.92 ms | 0.911 ms | 2.130 ms |\r\n\r\n4KB is the default buffer size used for `Append(Stream)`. Increasing it to 4MB significantly improves the performance.\r\nYour code is using a large buffer size (10MB) and it\u0027s probably the reason of performance difference.",
                                           "updatedAt":  "2024-06-17T05:50:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Be4kP",
                                           "createdAt":  "2024-06-17T06:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DogFortune",
                                           "body":  "@huoyaoyuan  I set the buffer to 4MB but no improvement.\r\n\r\nWhen I run the benchmark in my environment, I get the desired performance, but when I run the same code in MAUI, the performance is extremely poor.\r\nThe hash calculation process was separated as a .NET Standard 2.0 project and referenced from the console application, which resulted in high performance.",
                                           "updatedAt":  "2024-06-17T06:03:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Be-4S",
                                           "createdAt":  "2024-06-17T06:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e I set the buffer to 4MB but no improvement.\r\n\r\nTo be consistent and comparable with `Append(Stream)`, you should set the buffer size to 4KB.\r\n`Append(Stream)` doesn\u0027t allow setting buffer size currently, but it would perform better than your code under the same buffer size.",
                                           "updatedAt":  "2024-06-17T06:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Be_pk",
                                           "createdAt":  "2024-06-17T06:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e but when I run the same code in MAUI, the performance is extremely poor.\r\n\r\nAre you targeting iOS or macOS? iOS will hit optimization of Mono runtime, which is yet another topic.",
                                           "updatedAt":  "2024-06-17T06:26:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BfAXi",
                                           "createdAt":  "2024-06-17T06:29:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DogFortune",
                                           "body":  "@huoyaoyuan The target is macOS and Windows, IOS is not included.\r\nRight now, I would like to build a satisfactory app on macOS and then start on Windows.",
                                           "updatedAt":  "2024-06-17T06:30:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bfq1I",
                                           "createdAt":  "2024-06-17T07:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Ah, same on x64 when Avx512 is not presented. Basically, XxHash128 hits this issue (in `ScrambleAccumulator*`):\r\n\r\n@EgorBo, could it be just https://godbolt.org/z/eqsrf341M?",
                                           "updatedAt":  "2024-06-17T07:59:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BhVq-",
                                           "createdAt":  "2024-06-17T10:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e Ah, same on x64 when Avx512 is not presented. Basically, XxHash128 hits this issue (in `ScrambleAccumulator*`):\r\n\u003e \r\n\u003e @EgorBo, could it be just https://godbolt.org/z/eqsrf341M?\r\n\r\nit looks like the x64 impl is not correct? we need `_mm_mullo_epi64` which is only available on avx512 (`-mavx512vl  -mavx512dq`)\r\n\r\nNOTE: we need to accelerate multiplication for both ulong and signed long",
                                           "updatedAt":  "2024-06-17T10:36:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bht2L",
                                           "createdAt":  "2024-06-17T11:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e it looks like the x64 impl is not correct? we need `_mm_mullo_epi64` which is only available on avx512 (`-mavx512vl -mavx512dq`)\r\n\r\nAh, here is the special casing for avx512dq, avx2 and sse2: https://godbolt.org/z/aWr6rhbxh",
                                           "updatedAt":  "2024-06-17T11:08:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BifEr",
                                           "createdAt":  "2024-06-17T12:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e MAUI\n\n[MAUI uses the Mono runtime in macOS.](https://learn.microsoft.com/en-us/dotnet/maui/what-is-maui?view=net-maui-8.0)\n\n\u003e For Android, iOS, and macOS, the environment is implemented by Mono\n\nSo it seems the that target runtime in question here is Mono, not CoreCLR.",
                                           "updatedAt":  "2024-06-17T12:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BjxlV",
                                           "createdAt":  "2024-06-17T14:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e it looks like the x64 impl is not correct? we need `_mm_mullo_epi64` which is only available on avx512 (`-mavx512vl -mavx512dq`)\r\n\u003e \r\n\u003e Ah, here is the special casing for avx512dq, avx2 and sse2: https://godbolt.org/z/aWr6rhbxh\r\n\r\ntried these, still don\u0027t match what avx512 instruction produces when I run them through tests",
                                           "updatedAt":  "2024-06-17T14:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FH6lM",
                                           "createdAt":  "2024-07-17T14:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-17T14:18:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FH6zc",
                                           "createdAt":  "2024-07-17T14:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "It seems to be a Mono codegen issue, so I am moving it to [area-Codegen-JIT-mono](https://github.com/dotnet/runtime/labels/area-Codegen-JIT-mono) area.",
                                           "updatedAt":  "2024-07-17T14:19:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FH-nx",
                                           "createdAt":  "2024-07-17T14:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I took @stephentoub benchmark from https://github.com/dotnet/runtime/pull/103669 and run it for .NET 9 CLR vs Mono:\r\n\r\n```cmd\r\ndotnet run -c Release --filter * --runtimes net9.0 mono9.0\r\n```\r\n\r\n```ini\r\nBenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3880/23H2/2023Update/SunValley3)\r\nAMD Ryzen Threadripper PRO 3945WX 12-Cores, 1 CPU, 24 logical and 12 physical cores\r\n.NET SDK 9.0.100-preview.6.24277.6\r\n  [Host]     : .NET 8.0.7 (8.0.724.31311), X64 RyuJIT AVX2\r\n  Job-CFIFYM : .NET 9.0.0 (9.0.24.27202), X64 RyuJIT AVX2\r\n  Job-MISQRF : .NET 9.0.0 (9.0.24.27202) using MonoVM, X64 X86Base\r\n```\r\n\r\n| Method | Runtime            | Kind         | Mean        | Ratio | Allocated | Alloc Ratio |\r\n|------- |------------------- |------------- |------------:|------:|----------:|------------:|\r\n| Hash   | .NET 9.0           | FileStream   |   111.71 us |  1.00 |     600 B |        1.00 |\r\n| Hash   | Mono with .NET 9.0 | FileStream   | 3,160.01 us | 28.29 |     602 B |        1.00 |\r\n|        |                    |              |             |       |           |             |\r\n| Hash   | .NET 9.0           | MemoryStream |    63.70 us |  1.00 |     600 B |        1.00 |\r\n| Hash   | Mono with .NET 9.0 | MemoryStream | 3,195.97 us | 50.17 |     602 B |        1.00 |",
                                           "updatedAt":  "2024-07-17T14:26:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FIHiB",
                                           "createdAt":  "2024-07-17T14:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqKzvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2024-07-17T16:58:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "BDN numbers using the same benchmark as https://github.com/dotnet/runtime/issues/103539#issuecomment-2233461233 on osx-arm64 with .NET 9 Preview 6:\r\n\r\n| Method | Runtime            | Kind         | Mean        | Ratio | Gen0   | Allocated | Alloc Ratio |\r\n|------- |------------------- |------------- |------------:|------:|-------:|----------:|------------:|\r\n| Hash   | .NET 9.0           | FileStream   |    85.75 us |  1.00 |      - |     600 B |        1.00 |\r\n| Hash   | Mono with .NET 9.0 | FileStream   | 1,559.28 us | 18.17 |      - |     857 B |        1.43 |\r\n|        |                    |              |             |       |        |           |             |\r\n| Hash   | .NET 9.0           | MemoryStream |    45.72 us |  1.00 | 0.0610 |     600 B |        1.00 |\r\n| Hash   | Mono with .NET 9.0 | MemoryStream | 1,512.97 us | 33.10 |      - |     601 B |        1.00 |\r\n\r\n\r\nStill not great.  Whatever it is that we\u0027re not doing, we\u0027re not doing it on both x64 and arm64",
                                           "updatedAt":  "2024-07-17T14:42:33Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "When calculating with xxhash128, it is slower.",
        "labels":  [
                       "tenet-performance",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105566",
        "createdAt":  "2024-07-26T14:46:41Z",
        "number":  105566,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T16:14:01Z",
        "body":  "Since LLVM 16, Mono no longer uses LLVM for the JIT codegen. We should address the clean-up of the old LLVM JIT code that is no longer in use:\r\nhttps://github.com/dotnet/runtime/blob/fc6ce2cf090d61189ef1122468d1688de70e2c64/src/mono/mono/mini/mini-llvm.c#L15116",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhkjxPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GSPE9",
                                           "createdAt":  "2024-07-26T14:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-26T14:47:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] Remove depracated LLVM JIT from the Mono codebase",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106393",
        "createdAt":  "2024-08-14T13:09:32Z",
        "number":  106393,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-30T15:27:12Z",
        "body":  "The test being added in #106314 fails on mono osx-x64.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiGrI2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IasjZ",
                                           "createdAt":  "2024-08-14T13:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-14T13:09:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "JIT/Regression/JitBlue/Runtime_101046 fails on mono osx-x64",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108515",
        "createdAt":  "2024-10-03T12:08:07Z",
        "number":  108515,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:02:25Z",
        "body":  "The `System.Formats.Nrbf.Tests` are getting ocassinally killed on CI. Affecting mostly MonoJIT `linux_x64_release_mono_minijit_librariestests` job and occasionally MonoInterpreter`linux_x64_release_mono_interpreter_librariestests`.\r\n\r\n\r\n7 failures in the last 30 days as per\r\n![image](https://github.com/user-attachments/assets/4059699e-c92f-4ec6-b7a3-b66a582cea2e)\r\n\r\n\r\nLog:\r\n```\r\nStarting:    System.Formats.Nrbf.Tests (parallel test collections = on [2 threads], stop on fail = off)\r\n./RunTests.sh: line 176:    21 Killed                  \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Formats.Nrbf.Tests.runtimeconfig.json --depsfile System.Formats.Nrbf.Tests.deps.json xunit.console.dll System.Formats.Nrbf.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\ncat: /proc/sys/kernel/coredump_filter: No such file or directory\r\ndmesg: read kernel buffer failed: Operation not permitted\r\n+ export _commandExitCode=137\r\n+ python /root/helix/work/correlation/reporter/run.py https://dev.azure.com/dnceng-public/ public 21132138 eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjdSd2F5dmlYRHFoZnN6MTZSNmxPbXNXWWxTQSJ9.eyJuYW1laWQiOiJjNzczZjJjMi01MTIwLTQyMDctYWZlMi1hZmFmMzVhOGJjMGEiLCJzY3AiOiJhcHBfdG9rZW4iLCJhdWkiOiJiMWU0ZDg3Ni0yZjIwLTQ1NjctODgyMi05OWQ0YTNhZGYxNGEiLCJzaWQiOiI4ODdhMTkyYy0yNTQ3LTQ4YTUtYTEwMS0yOTc4ZmJiNzI0ZWIiLCJCdWlsZElkIjoiY2JiMTgyNjEtYzQ4Zi00YWJiLTg2NTEtOGNkY2I1NDc0NjQ5OzgxNTI0OSIsIkRlZklkIjoiMTI5Iiwiam9icmVmIjoiNDgyZjk0ZWQtYjFjZi00Mjk4LWJmMmMtMDY3NGIyNTRjNzgxOjFkMTA2YTY1LTI2OWItNTI4Mi1lZjMxLWUzMzc4YTVhMTNmMiIsInBwaWQiOiJ2c3RmczovLy9CdWlsZC9CdWlsZC84MTUyNDkiLCJvcmNoaWQiOiI0ODJmOTRlZC1iMWNmLTQyOTgtYmYyYy0wNjc0YjI1NGM3ODEuYnVpbGQuYnVpbGRfbGludXhfeDY0X3JlbGVhc2VfbW9ub19pbnRlcnByZXRlcl9saWJyYXJpZXN0ZXN0cy5fX2RlZmF1bHQiLCJyZXBvSWRzIjoiIiwiaXNzIjoiYXBwLnZzdG9rZW4udmlzdWFsc3R1ZGlvLmNvbSIsImF1ZCI6ImFwcC52c3Rva2VuLnZpc3VhbHN0dWRpby5jb218dnNvOjZmY2M5MmU1LTczYTctNGY4OC04ZDEzLWQ5MDQ1YjQ1ZmIyNyIsIm5iZiI6MTcyNzAzNDk0MSwiZXhwIjoxNzI3MDY0OTQxfQ.om2rr6irEACnRYKhRuUB2ECACuJKmQKGl3wctZ4IVZo8LtGCigyhva_yyKjvZRX5n3xl6SQgNlv01Cl2uKRaVGws1zizT9WsUwKKkLm390V5dSHg3eb1VyDHMM2LTO9mM5Ve4dfn4XhgeUid4xkpH-V6vXrIMu6E3hW-B30oH7xH1kdj8Ftw1sYuL5rsNJRAXjnd3hZgODSSXgK3_dij7BqeH-AZZBqv3ErGWdUYuVd0BRv4M8P51EJPjp8u4CC1jP_rjKRMw8nZm4VvCEL7CyR4X4SbVNqp5KP2F8Kpjnpus_0rMPNyLnyE2KOI1totQRV_WmguZZq7w9V8KMb5FQ\r\n/root/helix/work/workitem/e\r\n----- end Sun 22 Sep 2024 08:43:19 PM UTC ----- exit code 137 ----------------------------------------------------------\r\nexit code 137 means SIGKILL Killed either due to out of memory/resources (see /var/log/messages) or by explicit kill.\r\n```\r\n\r\n\u003c!-- Error message template  --\u003e\r\n### Known Issue Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"System.Formats.Nrbf.Tests\", \"exit code 137 means SIGKILL Killed either due to out of memory/resources (see /var/log/messages) or by explicit kill\"],\r\n  \"BuildRetry\": true,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153257](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153257)|dotnet/runtime|[System.Formats.Nrbf.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153257\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31857118\u0026resultId=218885)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|1|1|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=825800\r\n**Result validation:** :warning: Validation could not be done without an Azure DevOps build URL on the issue. Please add it to the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 10/3/2024 4:08:45 PM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmiG4vA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Oh6rW",
                                           "createdAt":  "2024-10-03T12:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T12:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ojejg",
                                           "createdAt":  "2024-10-03T15:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "There are some interesting \"attack tests\" that do things with cyclic graphs and potentially large memory usage that might be behaving pathologically on Mono.  (for example due to conservative stack scanning)\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Formats.Nrbf/tests/AttackTests.cs\r\n",
                                           "updatedAt":  "2024-10-03T15:06:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YyxjU",
                                           "createdAt":  "2024-12-27T08:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "No longer failing. Unclear what fix it as the test was a bit flaky. ",
                                           "updatedAt":  "2024-12-27T08:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aIbi8",
                                           "createdAt":  "2025-01-12T20:14:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Failed again, reopening https://dev.azure.com/dnceng-public/public/_build/results?buildId=914493\u0026view=results",
                                           "updatedAt":  "2025-01-12T20:14:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[mono] MiniJIT System.Formats.Nrbf.Tests getting killed",
        "labels":  [
                       "arch-x64",
                       "area-Codegen-JIT-mono",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108857",
        "createdAt":  "2024-10-14T18:33:57Z",
        "number":  108857,
        "author":  "xtqqczze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T16:13:32Z",
        "body":  "\u003e ```cs\n\u003e static int Test() =\u003e \"Hello\".Length; // replace with just `5`\n\u003e ```\n\u003e \n\u003e Before:\n\u003e \n\u003e ```assembly\n\u003e movabs rax,0x7fd6c1758160\n\u003e mov    eax,DWORD PTR [rax]\n\u003e ret \n\u003e ```\n\u003e \n\u003e Now:\n\u003e \n\u003e ```assembly\n\u003e mov    eax,0x5\n\u003e ret\n\u003e ```\n\n _Originally posted by @EgorBo in [mono#5310](https://github.com/mono/mono/pull/16898#issue-494728473)_\n\nRelated:\n* https://github.com/dotnet/runtime/issues/5310\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj8PSEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Pw9IQ",
                                           "createdAt":  "2024-10-14T18:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-14T18:36:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] Optimize \"constant_string\".Length",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111932",
        "createdAt":  "2025-01-28T20:56:05Z",
        "number":  111932,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-osjw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArminShoeibi",
                                            "createdAt":  "2025-01-31T09:07:26Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T16:16:46Z",
        "body":  "A small change in https://github.com/dotnet/runtime/pull/110955 caused terrible regressions (\u003e150 benchmarks) on Mono. I am going to workaround it in the codebase, but I guess it\u0027d be nice to also optimize it in the mono runtime\n\n```cs\n    static ReadOnlySpan\u003cbyte\u003e TwoDigitsCharsAsBytes =\u003e MemoryMarshal.AsBytes\u003cchar\u003e(\n                                    \"00010203040506070809\" +\n                                    \"10111213141516171819\" +\n                                    \"20212223242526272829\" +\n                                    \"30313233343536373839\" +\n                                    \"40414243444546474849\" +\n                                    \"50515253545556575859\" +\n                                    \"60616263646566676869\" +\n                                    \"70717273747576777879\" +\n                                    \"80818283848586878889\" +\n                                    \"90919293949596979899\");\n\n\n    static byte TestMethod(int i)\n    {\n        return TwoDigitsCharsAsBytes[i];\n    }\n```\nCodegen on CoreCLR:\n```asm\n; Method Benchmarks:TestMethod(int):ubyte (FullOpts)\n       sub      rsp, 40\n       mov      rax, 0x2C88020576C\n       cmp      ecx, 400\n       jae      SHORT G_M2810_IG04\n       mov      ecx, ecx\n       movzx    rax, byte  ptr [rax+rcx]\n       add      rsp, 40\n       ret      \nG_M2810_IG04:\n       call     CORINFO_HELP_RNGCHKFAIL\n       int3     \n; Total bytes of code: 39\n```\n\nCodegen on Mono (JIT, x64):\n```asm\n*** ASM for Benchmarks:TestMethod (int) ***\n/tmp/.OJH5YA:     file format elf64-x86-64\nDisassembly of section .text:\n0000000000000000 \u003cchmarks_TestMethod__int_\u003e:\nchmarks_TestMethod__int_():\n   0:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   7:\t4c 89 34 24          \tmov    %r14,(%rsp)\n   b:\t48 89 7c 24 78       \tmov    %rdi,0x78(%rsp)\n  10:\t48 b8 78 4e 5f 0c 2f \tmovabs $0x7c2f0c5f4e78,%rax\n  17:\t7c 00 00 \n  1a:\tf7 00 01 00 00 00    \ttestl  $0x1,(%rax)\n  20:\t74 06                \tje     28 \u003cchmarks_TestMethod__int_+0x28\u003e\n  22:\t90                   \tnop\n  23:\te8 6c a8 f3 ff       \tcall   fffffffffff3a894 \u003cchmarks_TestMethod__int_+0xfffffffffff3a894\u003e\n\u003cBB\u003e:2\n  28:\t33 c0                \txor    %eax,%eax\n  2a:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n  2f:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n  34:\t49 be 30 01 a7 0c 2f \tmovabs $0x7c2f0ca70130,%r14\n  3b:\t7c 00 00 \n  3e:\t33 c0                \txor    %eax,%eax\n  40:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n  45:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  4a:\t4d 85 f6             \ttest   %r14,%r14\n  4d:\t75 25                \tjne    74 \u003cchmarks_TestMethod__int_+0x74\u003e\n\u003cBB\u003e:15\n  4f:\t33 c0                \txor    %eax,%eax\n  51:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n  56:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  5b:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n  60:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n  65:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  6a:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n  6f:\te9 3d 00 00 00       \tjmp    b1 \u003cchmarks_TestMethod__int_+0xb1\u003e\n\u003cBB\u003e:14\n  74:\t45 38 36             \tcmp    %r14b,(%r14)\n  77:\t4d 85 f6             \ttest   %r14,%r14\n  7a:\t0f 84 e8 00 00 00    \tje     168 \u003cchmarks_TestMethod__int_+0x168\u003e\n  80:\t49 8d 4e 14          \tlea    0x14(%r14),%rcx\n  84:\t49 63 46 10          \tmovslq 0x10(%r14),%rax\n  88:\t33 d2                \txor    %edx,%edx\n  8a:\t48 89 54 24 38       \tmov    %rdx,0x38(%rsp)\n  8f:\t48 89 54 24 40       \tmov    %rdx,0x40(%rsp)\n  94:\t48 89 4c 24 38       \tmov    %rcx,0x38(%rsp)\n  99:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n  9d:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n  a2:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n  a7:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n  ac:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n\u003cBB\u003e:11\n  b1:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n  b6:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  bb:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n  c0:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n  c5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  ca:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n  cf:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  d4:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  d9:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n  de:\t48 63 44 24 30       \tmovslq 0x30(%rsp),%rax\n  e3:\tba 02 00 00 00       \tmov    $0x2,%edx\n  e8:\t0f af c2             \timul   %edx,%eax\n  eb:\t0f 80 67 00 00 00    \tjo     158 \u003cchmarks_TestMethod__int_+0x158\u003e\n  f1:\t33 d2                \txor    %edx,%edx\n  f3:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  f8:\t48 89 54 24 10       \tmov    %rdx,0x10(%rsp)\n  fd:\t48 89 4c 24 08       \tmov    %rcx,0x8(%rsp)\n 102:\t89 44 24 10          \tmov    %eax,0x10(%rsp)\n 106:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 10b:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n 110:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 115:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n 11a:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n 11f:\t48 63 4c 24 78       \tmovslq 0x78(%rsp),%rcx\n 124:\t48 63 c9             \tmovslq %ecx,%rcx\n 127:\t48 63 54 24 70       \tmovslq 0x70(%rsp),%rdx\n 12c:\t48 3b d1             \tcmp    %rcx,%rdx\n 12f:\t0f 86 12 00 00 00    \tjbe    147 \u003cchmarks_TestMethod__int_+0x147\u003e\n 135:\t48 03 c1             \tadd    %rcx,%rax\n 138:\t0f b6 00             \tmovzbl (%rax),%eax\n\u003cBB\u003e:1\n 13b:\t4c 8b 34 24          \tmov    (%rsp),%r14\n 13f:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n 146:\tc3                   \tret\n 147:\tbe 29 00 00 00       \tmov    $0x29,%esi\n 14c:\tbf 0b 01 00 00       \tmov    $0x10b,%edi\n 151:\t66 90                \txchg   %ax,%ax\n 153:\te8 38 2b 5c 01       \tcall   15c2c90 \u003cchmarks_TestMethod__int_+0x15c2c90\u003e\n 158:\tbe 7d 00 00 00       \tmov    $0x7d,%esi\n 15d:\tbf 51 01 00 00       \tmov    $0x151,%edi\n 162:\t90                   \tnop\n 163:\te8 28 2b 5c 01       \tcall   15c2c90 \u003cchmarks_TestMethod__int_+0x15c2c90\u003e\n 168:\tbe fe 00 00 00       \tmov    $0xfe,%esi\n 16d:\tbf 3e 01 00 00       \tmov    $0x13e,%edi\n 172:\t90                   \tnop\n 173:\te8 18 2b 5c 01       \tcall   15c2c90 \u003cchmarks_TestMethod__int_+0x15c2c90\u003e\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvLD7uw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cKqnn",
                                           "createdAt":  "2025-01-28T20:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T20:57:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKqqs",
                                           "createdAt":  "2025-01-28T20:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEW2MQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-28T20:57:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -mono -commit main --envvars MONO_VERBOSE_METHOD:TestMethod\n```cs\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing BenchmarkDotNet.Attributes;\n\npublic class Benchmarks\n{\n    private static ReadOnlySpan\u003cbyte\u003e TwoDigitsCharsAsBytes =\u003e\n        MemoryMarshal.AsBytes\u003cchar\u003e(\"00010203040506070809\" +\n                                    \"10111213141516171819\" +\n                                    \"20212223242526272829\" +\n                                    \"30313233343536373839\" +\n                                    \"40414243444546474849\" +\n                                    \"50515253545556575859\" +\n                                    \"60616263646566676869\" +\n                                    \"70717273747576777879\" +\n                                    \"80818283848586878889\" +\n                                    \"90919293949596979899\");\n\n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    static byte TestMethod(int i)\n    {\n        return TwoDigitsCharsAsBytes[i];\n    }\n\n    [Benchmark]\n    public byte Bench()\n    {\n        return TestMethod(1);\n    }\n}\n```",
                                           "updatedAt":  "2025-01-28T20:57:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKqzp",
                                           "createdAt":  "2025-01-28T20:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEW2WA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBot",
                                                                               "createdAt":  "2025-01-28T20:58:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@EgorBot -amd -commit main --envvars DOTNET_JitDisasm:TestMethod\n```cs\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing BenchmarkDotNet.Attributes;\n\npublic class Benchmarks\n{\n    private static ReadOnlySpan\u003cbyte\u003e TwoDigitsCharsAsBytes =\u003e\n        MemoryMarshal.AsBytes\u003cchar\u003e(\"00010203040506070809\" +\n                                    \"10111213141516171819\" +\n                                    \"20212223242526272829\" +\n                                    \"30313233343536373839\" +\n                                    \"40414243444546474849\" +\n                                    \"50515253545556575859\" +\n                                    \"60616263646566676869\" +\n                                    \"70717273747576777879\" +\n                                    \"80818283848586878889\" +\n                                    \"90919293949596979899\");\n\n    [MethodImpl(MethodImplOptions.NoInlining)]  \n    static byte TestMethod(int i)\n    {\n        return TwoDigitsCharsAsBytes[i];\n    }\n\n    [Benchmark]\n    public byte Bench()\n    {\n        return TestMethod(1);\n    }\n}\n```",
                                           "updatedAt":  "2025-01-28T20:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKxWX",
                                           "createdAt":  "2025-01-28T21:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "15ns (Mono) vs 0.5ns (CoreCLR)",
                                           "updatedAt":  "2025-01-28T21:14:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66c10r",
                                           "createdAt":  "2025-07-28T16:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "\u003e A small change in [#110955](https://github.com/dotnet/runtime/pull/110955) caused terrible regressions (\u003e150 benchmarks) on Mono. I am going to workaround it in the codebase, but I guess it\u0027d be nice to also optimize it in the mono runtime\n\u003e \n\nDid you work around the mono issue yet?  It appears the regression is still there.  https://github.com/dotnet/performance/blob/main/reports/net9to10/README.md",
                                           "updatedAt":  "2025-07-28T16:51:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66c8WW",
                                           "createdAt":  "2025-07-28T16:56:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcOnIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2025-07-28T20:37:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e A small change in [#110955](https://github.com/dotnet/runtime/pull/110955) caused terrible regressions (\u003e150 benchmarks) on Mono. I am going to workaround it in the codebase, but I guess it\u0027d be nice to also optimize it in the mono runtime\n\u003e \n\u003e Did you work around the mono issue yet? It appears the regression is still there. https://github.com/dotnet/performance/blob/main/reports/net9to10/README.md\n\nSorry it fell off my radar, I\u0027ll take a look at mono regressions (this and the other one) this week",
                                           "updatedAt":  "2025-07-28T16:56:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66wY0w",
                                           "createdAt":  "2025-07-29T16:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "Looks like the only MemoryMarshal intrinsic in mono was what it was using before\n```c\n\t} else if (cmethod-\u003eklass == mono_class_try_get_memory_marshal_class ()) {\n\t\tif (!strcmp (cmethod-\u003ename, \"GetArrayDataReference\")) {\n\t\t\t// Logic below works for both SZARRAY and MDARRAY\n\t\t\tint dreg = alloc_preg (cfg);\n\t\t\tMONO_EMIT_NEW_CHECK_THIS(cfg, args[0]-\u003edreg);\n\t\t\t//MONO_EMIT_NULL_CHECK (cfg, args [0]-\u003edreg, FALSE);\n\t\t\tEMIT_NEW_BIALU_IMM (cfg, ins, OP_PADD_IMM, dreg, args [0]-\u003edreg, MONO_STRUCT_OFFSET (MonoArray, vector));\n\t\t\treturn ins;\n\t\t}\n\t}\n```",
                                           "updatedAt":  "2025-07-29T16:30:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68sPu7",
                                           "createdAt":  "2025-08-07T21:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Ended up reverting the change via https://github.com/dotnet/runtime/pull/118499",
                                           "updatedAt":  "2025-08-07T21:11:35Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Terrible codegen for AsSpan(stringLiteral) on Mono",
        "labels":  [
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114094",
        "createdAt":  "2025-04-01T07:10:23Z",
        "number":  114094,
        "author":  "MartinZikmund",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-11T12:48:08Z",
        "body":  "### Description\n\nI encountered a very odd behavior where `Vector3` sum is invalid on Android under very specific circumstances.\n\nConsider the following method, which logs the value of `total` variable and then returns the exact same sum in `return` statement.\n\n```csharp\nprivate Vector3 GetTotalOffset()\n{\n    if (IsTranslationEnabled \u0026\u0026 Properties.TryGetVector3(\"Translation\", out var translation) == CompositionGetValueStatus.Success)\n    {\n        var total = Offset + translation;\n        UIDebugLog.Log($\"Total: {total}\");\n\n        return (Offset + translation);\n    }\n\n    return Offset;\n}\n```\n\nThis method is used as follows:\n\n```csharp\nvar totalOffset = GetTotalOffset();\nif (IsRefresh)\n{\n    UIDebugLog.Log($\"Total2: {totalOffset}\");\n}\n```\n\nTechnically the `Total1` and `Total2` values should have the exact same value. Surprisingly, this is the case only in **debug mode with debugger attached**:\n\n![Image](https://github.com/user-attachments/assets/3ca89e3e-7068-4cda-aded-420fbc4d5413)\n\nHowever, in **Release mode or in Debug mode without debugger** attached we are getting invalid results from the `return` statement:\n\n![Image](https://github.com/user-attachments/assets/3919672f-940b-4dbb-91ca-6cfd33c4933d)\n\n### Reproduction Steps\n\n1. Clone https://github.com/unoplatform/uno/commit/af0a060231ae142d080e7d9a11a6ba55dcff0050\n2. Rename `src\\crosstargeting_override.props.sample` to `src\\crosstargeting_override.props`\n3. Inside this file, uncomment `UnoTargetFrameworkOverride` and change it to `\u003cUnoTargetFrameworkOverride\u003enet9.0-android\u003c/UnoTargetFrameworkOverride\u003e`\n4. Open `src\\Uno.UI-Skia-only.slnf`\n5. Run `SamplesApp.Skia.netcoremobile` with debugger attached\n6. Search for `RefreshContainerNavigation` sample and open it\n7. **Note the refresh container behaves as expected - the indicator only shows up when the list is pulled down**\n8. **Note the logged `Total1` and `Total2` values in the bottom are equal**\n9. Stop debugging and open the app again without debugger\n10. Navigate to the `RefreshContainerNavigation` sample\n11. **Note the refresh indicator is misaligned**\n12. **Note the logged `Total1` and `Total2` values in the bottom are not equal**\n\n### Expected behavior\n\nSum of `Vector3` values should be reliable.\n\n### Actual behavior\n\nSum of `Vector3` values differs when done within a local variable vs. within a return statement on Android.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nPerform the sum manually, per vector element.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpQ1KMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lA2YI",
                                           "createdAt":  "2025-04-01T07:38:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-01T07:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lDUox",
                                           "createdAt":  "2025-04-01T11:54:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-01T11:54:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unexpected `Vector3` sum on Android",
        "labels":  [
                       "os-android",
                       "area-Codegen-JIT-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116275",
        "createdAt":  "2025-06-03T17:12:29Z",
        "number":  116275,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDPffg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "srxqds",
                                            "createdAt":  "2025-06-04T02:21:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-20T21:46:45Z",
        "body":  "### Description\n\nThe following issue, https://github.com/dotnet/android/issues/9365, investigated an ANR that appears to happen since an async state machine was compiled into code that never reached a safepoint. On hybrid/coop suspend modes, not reaching a safepoint as part of executing managed code will lead to hanging GC STW and ANR reports.\n\nExample code hitting the issue:\n\n```\nvoid IAsyncStateMachine.MoveNext()\n{\n  int num1 = this.\u003c\u003e1__state;\n  try\n  {\n    switch (num1)\n    {\n      case 0:\n        //\n      default:\n        //\n        goto label_20;\n    }\nlabel_10:\n    awaiter2.GetResult();\n    if (!this.\u003c\u003e8__1.token.IsCancellationRequested)\n    {\n      if (this.\u003c\u003e4__this._game.GameState == GameState.Running)\n      {\n        //\n      }\n      else\n        goto label_20;\n    }\n    else\n      goto label_22;\nlabel_20:\n    if (!this.\u003c\u003e8__1.token.IsCancellationRequested)\n    {\n      awaiter2 = new AsyncTaskAwaiter(this.\u003c\u003e4__this._idleMonitor.WaitForIdleAsync());\n      if (!awaiter2.IsCompleted)\n      {\n        //\n        return;\n      }\n      goto label_10;\n    }\n  }\n  catch (Exception ex)\n  {\n    this.\u003c\u003e1__state = -2;\n    this.\u003c\u003et__builder.SetException(ex);\n    return;\n  }\nlabel_22:\n  //\n}\n```\n\nThe workaround was to introduce a call to a managed none leaf function or a p/invoke that would hit a safepoint in the path ending up looping between label_10 and label_20.\n\n### Reproduction Steps\n\nFull repro provided here, https://github.com/dotnet/android/issues/9365#issuecomment-2893984568.\n\n### Expected behavior\n\nGenerated code to inject safepoints on loops.\n\n### Actual behavior\n\nNo safepoints emitted leading to hanging GC STW and ANR.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nInject call to none leaf managed method not getting inlined or p/invoke.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrwVuvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vBW69",
                                           "createdAt":  "2025-06-03T17:13:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T17:13:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Mono]: Compiling AsyncStateMachine won\u0027t emit safepoints on specific loop pattern.",
        "labels":  [
                       "area-Codegen-JIT-mono",
                       "runtime-mono"
                   ]
    }
]
