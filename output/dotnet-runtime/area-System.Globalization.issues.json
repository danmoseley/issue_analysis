[
    {
        "url":  "https://github.com/dotnet/runtime/issues/19423",
        "createdAt":  "2016-11-19T14:49:16Z",
        "number":  19423,
        "author":  "svick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsEjUg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fifty-six",
                                            "createdAt":  "2022-01-28T07:22:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduarddejong",
                                            "createdAt":  "2023-01-01T16:02:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-31T22:00:51Z",
        "body":  "To get text elements from a `string`, you can currently use `System.Globalization.StringInfo.GetTextElementEnumerator`:\r\n\r\n```c#\r\npublic class StringInfo\r\n{\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str);\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str, int index);\r\n}\r\n\r\npublic class TextElementEnumerator : IEnumerator\r\n{\r\n    public bool MoveNext();\r\n    public object Current { get; }\r\n\r\n    public string GetTextElement();\r\n\r\n    public int ElementIndex { get; }\r\n\r\n    public void Reset();\r\n}\r\n```\r\n\r\nNotice that `TextElementEnumerator` is a (non-generic) enumerator, not enumerable, so it can\u0027t be used in a `foreach` or in LINQ or pretty much any other collection-related operation. To use it, you write code like:\r\n\r\n```c#\r\nvar textElementEnumerator = StringInfo.GetTextElementEnumerator(s);\r\n\r\nwhile (textElementEnumerator.MoveNext())\r\n{\r\n    string textElement = textElementEnumerator.GetTextElement();\r\n    // process textElement here\r\n}\r\n```\r\n\r\nThis makes the API unfamiliar and inconvenient to use. I propose that a new API based on `IEnumerable\u003cT\u003e` should be added.\r\n\r\n## Proposed API\r\n\r\n```c#\r\nclass StringInfo\r\n{\r\n    public static IEnumerable\u003cstring\u003e GetTextElements(string str);\r\n    public static IEnumerable\u003cstring\u003e GetTextElements(string str, int index);\r\n}\r\n```\r\n\r\nThe new methods work like the old methods, except that they return generic enumerable instead of enumerator.\r\n\r\n## Usage\r\n\r\nThe new API could be used just like any other `IEnumerable\u003cT\u003e`, e.g.:\r\n\r\n```c#\r\nforeach (var textElement in StringInfo.GetTextElementEnumerator(s))\r\n{\r\n    // process textElement here\r\n}\r\n```\r\n\r\n## Open questions\r\n\r\n* Returning `IEnumerable\u003cstring\u003e` means information about `ElementIndex` is lost. Is that information useful enough to use something like `IEnumerable\u003c(string textElement, int index)\u003e` instead? (Possibly using a custom `struct` instead of a tuple.)\r\n* Each text element `string` is a substring of the input `string`. Would it be worth waiting for spans and use `IEnumerable\u003cReadOnlyMemory\u003cchar\u003e\u003e` instead?\r\n* Returning `IEnumerable\u003cstring\u003e` requires allocating that `IEnumerable\u003cstring\u003e`. Would it be worth to return struct enumerable with struct enumerator instead, which would avoid the allocation when used in `foreach`?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZW-xwQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTk4NjAyNQ==",
                                           "createdAt":  "2016-11-21T16:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think having TextElementEnumerator impelment the IEnumerable interface should be enough to have it work with the foreach(...)",
                                           "updatedAt":  "2016-11-21T16:20:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjQxMjkyNg==",
                                           "createdAt":  "2016-11-23T01:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@tarekgh That\u0027s an interesting option. I don\u0027t like that it would mean that the method name `GetTextElementEnumerator` and the type name `TextElementEnumerator` would become inaccurate, but it\u0027s nice that it does not increase API surface by much.",
                                           "updatedAt":  "2016-11-23T01:12:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTI0ODI0OA==",
                                           "createdAt":  "2018-11-23T14:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "With all of the new Rune support being added, including enumerators, is this still needed?\r\ncc: @GrabYourPitchforks ",
                                           "updatedAt":  "2018-11-23T14:00:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTI1MzUyMw==",
                                           "createdAt":  "2018-11-23T14:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@stephentoub Rune represents Unicode scalars, which are not the same thing as text elements. For example the string `\"a\\u0301\"` (where the second character is U+0301 COMBINING ACUTE ACCENT) is a single text element (and `GetTextElementEnumerator` does return it that way), but it\u0027s two Unicode scalars.\r\n\r\nSo, unless the Rune API also has some explicit support for enumerating text elements that I missed, I don\u0027t think it changes anything here.",
                                           "updatedAt":  "2018-11-23T14:25:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTI3NTA1MA==",
                                           "createdAt":  "2018-11-23T15:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e So, unless the Rune API also has some explicit support for enumerating text elements that I missed\r\n\r\nI thought I heard Levi talking about doing that, which is why I asked, but maybe I misunderstood.",
                                           "updatedAt":  "2018-11-23T15:59:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTM2MzU1Ng==",
                                           "createdAt":  "2018-11-24T12:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "I found this comment by @GrabYourPitchforks from June: https://github.com/dotnet/corefxlab/issues/2350#issuecomment-397425721. Assuming it\u0027s still current and that I understand it correctly, I think it means that `Utf8String`/`UnicodeScalar`/`Rune` won\u0027t have API for enumerating text elements.",
                                           "updatedAt":  "2018-11-24T12:12:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTM5NzQ4NA==",
                                           "createdAt":  "2018-11-24T21:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  " I think @svick is right and we should keep this proposal for now. ",
                                           "updatedAt":  "2018-11-24T21:40:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTQwMDU3Ng==",
                                           "createdAt":  "2018-11-24T22:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Ok.",
                                           "updatedAt":  "2018-11-24T22:42:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTc1OTc4Ng==",
                                           "createdAt":  "2018-11-26T19:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAxXuiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2018-11-26T19:34:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2018-11-27T11:14:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clairernovotny",
                                                                               "createdAt":  "2019-09-25T20:55:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "If we do this, it should probably be married with an overall logic update to `TextElementEnumerator`. The type\u0027s current logic is based on a fairly old version of the Unicode Standard, and it would be great to modernize it.",
                                           "updatedAt":  "2018-11-26T19:10:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjAyOTU0Nw==",
                                           "createdAt":  "2018-11-27T11:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e If we do this, it should probably be married with an overall logic update to TextElementEnumerator. The type\u0027s current logic is based on a fairly old version of the Unicode Standard, and it would be great to modernize it.\r\n\r\nHow breaking would it be if we updated to the latest standard regardless for 3.0?",
                                           "updatedAt":  "2018-11-27T11:43:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE0MTY4Mw==",
                                           "createdAt":  "2018-11-27T17:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e How breaking would it be if we updated to the latest standard regardless for 3.0?\r\n\r\nWe don\u0027t consider updating the Unicode data as a breaking changes. it is like any other globalization data which can change at any time.",
                                           "updatedAt":  "2018-11-27T17:16:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE0MjUzNA==",
                                           "createdAt":  "2018-11-27T17:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "by the way, StringInfo is already using CharUnicodeInfo which should be using the Unicode data we have updated to the latest release of Unicode standard.",
                                           "updatedAt":  "2018-11-27T17:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDg4OTc1MA==",
                                           "createdAt":  "2019-09-25T07:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAxXuuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ufcpp",
                                                                               "createdAt":  "2019-09-25T13:28:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clairernovotny",
                                                                               "createdAt":  "2019-09-25T20:55:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Quick update: I found a way to smuggle the TR-29 grapheme break data (see https://www.unicode.org/reports/tr29/) in the existing `CharUnicodeInfo` class without significantly expanding the size of the RVA static data. Will experiment with this a bit more and submit a PR over the next few days.",
                                           "updatedAt":  "2019-09-25T07:21:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTc4MTg2MA==",
                                           "createdAt":  "2019-09-27T04:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@ahsonkhan You had ideas for APIs which essentially took an input and returned an `IEnumerable\u003cRange\u003e`. Do you think something like that might be applicable more generally to `string` APIs?\r\n\r\nAPIs like this don\u0027t really need to be allocation-free like the `ROS\u003cchar\u003e` APIs require - when considering `string` usability is of higher concern than is performance. One could imagine returning `IEnumerable\u003cstring\u003e`, but there is significant value in knowing _where_ this substring occurred in the original source string, so `Range` springs to mind.\r\n\r\nBut your thoughts on this would be appreciated since you have recent experience with this type of API surface. :) ",
                                           "updatedAt":  "2019-09-27T04:36:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDUzNzE2NQ==",
                                           "createdAt":  "2020-06-16T05:20:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFbteg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jjagg",
                                                                               "createdAt":  "2020-08-02T21:14:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2021-12-09T13:14:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fifty-six",
                                                                               "createdAt":  "2022-01-28T07:20:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eduarddejong",
                                                                               "createdAt":  "2023-01-01T16:02:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2023-08-31T21:24:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Serentty",
                                           "body":  "I feel like something like this should be a method directly on ``System.String``, similar to the new ``EnumerateRunes()`` method. This is not something that most languages have yet done, but I think Swift set a good example by making extended grapheme cluster iteration so easily accessible (Swift actually made it the default way to iterate over a string, which is obviously not feasible for C#). I think that just like ``EnumerateRunes()``, having it be directly on the type would allow for much higher visibility and awareness, and make it easier to reach for this when it is appropriate, instead of falling back on iterating code points or (even worse) UTF-16 code units when what you really mean is user-perceived characters.",
                                           "updatedAt":  "2020-06-16T05:20:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lbuy6",
                                           "createdAt":  "2023-08-31T20:54:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Similar issue: #91003",
                                           "updatedAt":  "2023-08-31T20:54:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lb3A6",
                                           "createdAt":  "2023-08-31T21:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e You had ideas for APIs which essentially took an input and returned an `IEnumerable\u003cRange\u003e`. Do you think something like that might be applicable more generally to `string` APIs?\r\n\r\nI really don\u0027t think `Range` should ever be returned. `Range` can have indexes that are from end, and the consumer of such an API would therefore need to always bind the span to the specific length in order to use it correctly. This is not what `Range` was intended for, it should really only be used as an input, never an output. A tuple with an index and a length would be better in that scenario.",
                                           "updatedAt":  "2023-08-31T21:20:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lb3ee",
                                           "createdAt":  "2023-08-31T21:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e I feel like something like this should be a method directly on `System.String`, similar to the new `EnumerateRunes()` method. This is not something that most languages have yet done, but I think Swift set a good example by making extended grapheme cluster iteration so easily accessible (Swift actually made it the default way to iterate over a string, which is obviously not feasible for C#). I think that just like `EnumerateRunes()`, having it be directly on the type would allow for much higher visibility and awareness, and make it easier to reach for this when it is appropriate, instead of falling back on iterating code points or (even worse) UTF-16 code units when what you really mean is user-perceived characters.\r\n\r\n@Serentty This is exactly what I argue for in #91003 😄 You might want to look at that issue and voice your opinion as well.",
                                           "updatedAt":  "2023-08-31T21:22:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lb5Z4",
                                           "createdAt":  "2023-08-31T21:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Since the question of graphemes came up, I\u0027ll mention that we\u0027ve been punting on the idea of having graphemes as a first-class citizen in the framework. (By \"grapheme\", I mean interpreting the 2-scalar sequence [ U+1F474 Older Man Emoji, U+1F3FF Fitzpatrick Type 6 Skin Modifier ] as the single grapheme \"Older man with Fitzpatrick type 6 skin\".) The reason we had been punting on this is that it tends to be more of a UI / text editor concern - not a general framework concern\r\n\r\n@GrabYourPitchforks I strongly disagree with that. Most of the time you\u0027re working with strings, you want to work with whole characters, e.g. you always want to treat an \"a\" with an acute accent as one letter (or \"character\") and you never want to split a string on that. This how the majority of developers already think `char` works today (even though they\u0027re wrong), and they wouldn\u0027t expect a single readable character to be broken up into multiple `char`s.",
                                           "updatedAt":  "2023-08-31T21:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lb6bT",
                                           "createdAt":  "2023-08-31T21:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "For example, even in a simple scenario like converting between pascal case/snake case etc (so nothing to do with UI), you want to work with whole graphemes of the initial letters and transform those, not with code units or scalars, because an \"a\" with an acute accent is still a single letter.",
                                           "updatedAt":  "2023-08-31T21:35:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lb7HB",
                                           "createdAt":  "2023-08-31T21:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMkz6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filippobottega",
                                                                               "createdAt":  "2023-11-14T14:42:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Or when you want to limit the length of a string and show a validation error to the user when they exceeded the max length, you also want to work with graphemes, because a user would be very surprised if they type in \"áá\" and the error message says \"You have exceeded the maximum length of 3 characters / Your text contains 4 characters.\". A user has no idea what code units or scalars are and thinks of individual readable characters, i.e. graphemes.\r\n\r\nIt doesn\u0027t get much simpler than this when it comes to string functionality, and even in this case you want to work with graphemes.\r\n\r\nEDIT: While this is technically UI, it definitely feels like something that should be a first-class citizen in the framework.",
                                           "updatedAt":  "2023-08-31T22:00:51Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Proposal: Better API for StringInfo.GetTextElementEnumerator",
        "labels":  [
                       "api-needs-work",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28913",
        "createdAt":  "2019-03-08T15:36:51Z",
        "number":  28913,
        "author":  "mikernet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBZAWDA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2019-03-27T09:13:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2020-12-05T12:31:53Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-18T20:57:07Z",
        "body":  "Currently this is very difficult, error prone and the approach is terrible in terms of performance.\r\n\r\nRelated StackOverflow question:\r\n\r\nhttps://stackoverflow.com/questions/1048643/format-a-double-value-like-currency-but-without-the-currency-sign-c/3976048\r\n\r\nJon Skeet\u0027s approach can be made to work but requires cloning the `NumberFormatInfo` object and trimming the final string, causing lots of overhead and unneccessary allocations. Since I\u0027m doing this in an `IFormattable.ToString()` implementation using the provided `formatProvider` argument to get the currency format information, this would need to happen every single time `ToString()` is called.\r\n\r\nI propose a new [standard numeric format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings), perhaps `M` (for money) would work, which uses the currency formatting information to format the number but leaves off the currency symbol.\r\n\r\nI would be happy to do the PRs on it if it would be accepted. I\u0027ve run into this many times over the years and usually I just settle for formatting the currency using the number format instead of the currency format as I\u0027ve found most people do in this situation, which is less than ideal considering that in some cultures the formats are significantly different.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmCBJ1w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTE0MjM2Mg==",
                                           "createdAt":  "2019-03-09T03:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "What exactly the output would be. If the ask to have the exact output of \"C\" format without the current symbol, then there is some cases which will not make any sense with the negative currency formats. for example, if the current format is ```# $-``` what you expect to get at that time? something like ```123.45 -```? this is obviously wrong because having the currency sign in such format make a difference.\r\n\r\nIf the ask just getting the number without any other character (e.g. ( ) or spaces), then this can be easily achieved in performed way without any extra allocation or cloning. Here is some code example just for the idea demonstration.\r\n\r\n```C#\r\n        public static string FormatMoney(Decimal d)\r\n        {\r\n            Span\u003cchar\u003e format = stackalloc char[8];\r\n            format[0] = \u0027N\u0027;\r\n            CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalDigits.TryFormat(format.Slice(1), out int written);\r\n            format = format.Slice(0, written + 1);\r\n\r\n            Span\u003cchar\u003e buffer = stackalloc char[40];\r\n            d.TryFormat(buffer, out written, format);\r\n            buffer = buffer.Slice(0, written);\r\n\r\n            return buffer.ToString();\r\n        }\r\n```\r\n\r\nNote that \"C\" formatting will always format the positive numbers as the code above does. if we think to support the negative in sensible way, we can still do that by adding a couple of lines to the code above.",
                                           "updatedAt":  "2019-03-09T03:46:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTE0MzEyMQ==",
                                           "createdAt":  "2019-03-09T04:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "`123.45-` would be the output for cases where the format is `n $-`.\r\n\r\nUnfortunately your code does not produce the same output. Regions can have different digit and group delimiters for currencies than they do for normal numbers. That’s part of what I was alluding to in the OP. Some regions flip the role of commas and periods in currencies. It\u0027s possible that digit groupings change as well in standard regions, and definitely possible if the user customized their region settings. It\u0027s a completely independent format with its own settings.\r\n\r\nI just know from personal experience that this comes up all the time as a common requirement, but I realize that\u0027s anecdotal. I recently went through the pain of writing the methods needed to do this efficiently in a variety of scenarios so it\u0027s not really for my benefit anymore as much as it is for others just trying to get currency formatted numbers without the symbol. \r\n\r\nGiven the number of views on the question I think it\u0027s probably quite common and it\u0027s not just my circle of devs that regularly run into this. That number would probably be a lot higher if devs realized the number format is often completely different than the currency format but I think that fact is often overlooked.",
                                           "updatedAt":  "2019-03-09T04:21:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTIxNjk1Mg==",
                                           "createdAt":  "2019-03-09T20:01:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e 123.45- would be the output for cases where the format is n $-.\r\n\r\nWasn\u0027t this wrong? we have other patterns like ```#$-``` which means the space has a meaning here. \r\n\r\nJust to clarify, I am not pushing back on the proposal. I was just trying to provide a work around for now. and still we can come up with work around that work with no cloning or extra allocations. let me know if you want me provide this work around for now. Also, we need to look if there is any standard format specifiers for such case (formatted currencies without the currency sign).  ",
                                           "updatedAt":  "2019-03-09T20:01:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTIzMTExOQ==",
                                           "createdAt":  "2019-03-09T23:19:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "@tarekgh It\u0027s hard to say from just the negative currency format. Giving it some more thought, I\u0027m thinking that in this special case we could look to the negative number format to see if they use format `n-` or `n -` and make a determination based on that. If they don\u0027t use either of those negative number formats then we can just pick one of them to default to.\r\n\r\nI don\u0027t think any standard regions use `n $-` as the currency format and don\u0027t use `n-` or `n -` as the negative number format so falling back to a default would be very rare and only happen if the user customized their settings to something rather odd. I don\u0027t see that as a big deal.",
                                           "updatedAt":  "2019-03-09T23:30:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTIzMjQ2MQ==",
                                           "createdAt":  "2019-03-09T23:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@mikernet  we can decide whatever we want, my whole point was, we may run into cases the caller expect something and we return something different according to our decision. In other word, we\u0027ll not be perfect anyway with the negative patterns.",
                                           "updatedAt":  "2019-03-09T23:43:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTM2ODM2OQ==",
                                           "createdAt":  "2019-03-11T00:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "I think the solution presented adequately addresses this common problem. It does it “perfectly” 99.99% of the time, and 0.01% of the time (if that...I bet it’s much lower) when someone changed their regional settings to something very uncommon it still produces sufficiently good output that at worst has an extra space.\r\n\r\nIt appears to me to be the best possible solution to the issue and the way most people do it now is much worse. Do you have a better idea? \r\n\r\nReally though, how often do you think someone will have customized their currency format settings to use `n $-` but have their number format be something other than `n-` or `n -`? 1 in 10,000? 100,000? A million? I don’t think the bar for a feature needs to be 100% perfection, it just has to address a common problem and do so well enough to be widely useful.",
                                           "updatedAt":  "2019-03-11T00:09:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTM3MDQ1Mg==",
                                           "createdAt":  "2019-03-11T00:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The question I have in my mid is, what are the scenarios people really need this feature? honestly I am not seeing this is main stream scenario. I understand we can get a couple of people using this but doesn\u0027t mean this is needed by majority of people especially there is a work around.\r\n\r\nAgain, I am not pushing back more than trying to understand how this feature is really going to be used by many people. and what are the real world scenarios used for. do you have more real info around that?\r\n\r\n",
                                           "updatedAt":  "2019-03-11T00:33:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTY2MDE1Ng==",
                                           "createdAt":  "2019-03-11T18:18:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZB9lQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YZahringer",
                                                                               "createdAt":  "2020-12-06T11:09:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikernet",
                                           "body":  "Any time an application needs to support multiple currencies, which is quite common. Local currency display formats are useless in this scenario - we need to show them like `USD -1234.99` or `AUD (54.99)` or `EUR 1234.99 -`, depending on the user\u0027s desired currency display.\r\n\r\nThere are other times customers don\u0027t want the currency symbol to show up everywhere for space reasons, and only show on the total line for example.",
                                           "updatedAt":  "2019-03-11T18:18:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjA3MDEyNg==",
                                           "createdAt":  "2019-03-12T16:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "OK, we\u0027ll try to look at this one in the next release as we\u0027ll need to review it with the design committee. thanks for reporting the issue.",
                                           "updatedAt":  "2019-03-12T16:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YIEnX",
                                           "createdAt":  "2024-12-18T20:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "I would still like to see this addressed.",
                                           "updatedAt":  "2024-12-18T20:56:53Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Formatting currency values without currency symbol",
        "labels":  [
                       "enhancement",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31273",
        "createdAt":  "2019-10-23T18:52:18Z",
        "number":  31273,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCDhnsg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asmichi",
                                            "createdAt":  "2021-11-22T11:30:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-10-26T04:32:30Z",
        "body":  "`DateTime.Parse` for \"ja\" culture (ONLY) is 10x times slower on Linux compared to Windows\r\n\r\n| Slower                                                                          | diff/base | Windows Median (ns) | Linux Median (ns) |\r\n| ------------------------------------------------------------------------------- | ---------:| -------------------:| -----------------:|\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: ja)    |      8.87 |              454.24 |           4029.00 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: da) |      1.08 |              236.39 |            254.59 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: )   |      1.05 |              245.69 |            258.02 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: ja) |      1.05 |              245.61 |            257.00 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.ToString(culturestring: fr) |      1.05 |              245.56 |            256.82 |\r\n\r\n| Faster                                                                       | Win/Lin | Windows Median (ns) | Linux Median (ns) |\r\n| ---------------------------------------------------------------------------- | -------:| -------------------:| -----------------:|\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: da) |    1.24 |              531.21 |            428.73 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: fr) |    1.05 |              450.44 |            428.87 |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.ToStringHebrewIsrael     |    1.04 |              509.37 |            488.81 |\r\n\r\nThe contributor who wants to work on this issue should:\r\n\r\n1. Run [this](https://github.com/dotnet/performance/blob/7d96fd3dea66b83a0b02222e44e02e762a990c32/src/benchmarks/micro/corefx/System.Globalization/Perf.DateTimeCultureInfo.cs#L36) simple benchmark from dotnet/performance repository and confirm the problem\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 ./performance/scripts/benchmarks_ci.py -f netcoreapp5.0 --filter System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse\r\n```\r\n\r\n2. Build CoreCLR locally: https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-corefx.md#Build\r\n3. Create a small repro app: https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-corefx.md#repro\r\n4. Use PerfCollect to identify issue https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-corefx.md#PerfCollect\r\n5. Solve the issue",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTPqE-w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzYyODAyNg==",
                                           "createdAt":  "2019-11-13T22:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik does the results change if we change the initialization \r\n\r\n```C#\r\nyield return new CultureInfo(\"ja\");\r\n```\r\n\r\nto \r\n\r\n```C#\r\nyield return CultureInfo.GetCultureInfo(\"ja\");\r\n```\r\n\r\nSorry I didn\u0027t try it myself yet. I am asking because the parsing code should be exact the same between Windows and Linux, the only difference is the calendar data we pick from the OS which should be cached if you are not recreating the culture.",
                                           "updatedAt":  "2019-11-13T22:11:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTM3Njc5Mg==",
                                           "createdAt":  "2019-11-19T07:46:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e does the results change if we change the initialization\r\n\r\nI\u0027ve just tried and it does not change. I\u0027ve also tested `ja-JP` and it does not help as well",
                                           "updatedAt":  "2019-11-19T07:46:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYzNTA3NA==",
                                           "createdAt":  "2019-11-19T18:09:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik thanks for your quick try.",
                                           "updatedAt":  "2019-11-19T18:09:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjgxOTE0NQ==",
                                           "createdAt":  "2020-01-10T00:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I looked at that and I am seeing the problem is the parse initialization time is counted as part of the measurements. The initialization should occur once for the culture. The test should really measure the parsing perf excluding the one time parse initialization. when I change the test code to: \r\n\r\n```C#\r\n        private static CultureInfo s_jaCulture = CultureInfo.GetCultureInfo(\"ja\");\r\n        private static CultureInfo s_jaJPCulture = CultureInfo.GetCultureInfo(\"ja-JP\");\r\n\r\n        private CultureInfo JA { get { DateTime.Parse(\"10/10/2010 12:00:00 AM\", s_jaCulture); return s_jaCulture; }} // call parsing one time to force initialization \r\n        private CultureInfo JAJP { get { DateTime.Parse(\"10/10/2010 12:00:00 AM\", s_jaJPCulture); return s_jaJPCulture; }} // call parsing one time to force initialization \r\n\r\n        public IEnumerable\u003cobject\u003e Cultures()\r\n        {\r\n            // yield return new CultureInfo(\"ja\");\r\n            yield return JA;\r\n            yield return JAJP;\r\n            yield return new CultureInfo(\"fr\");\r\n            yield return new CultureInfo(\"da\");\r\n            yield return new CultureInfo(\"\");\r\n        }\r\n```\r\nI am getting the results: \r\n\r\n| Method | culturestring |     Mean |    Error |   StdDev |   Median |      Min |      Max | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------- |-------------- |---------:|---------:|---------:|---------:|---------:|---------:|------:|------:|------:|----------:|\r\n|  Parse |               | 637.8 ns | 38.69 ns | 43.00 ns | 644.6 ns | 570.8 ns | 717.3 ns |     - |     - |     - |         - |\r\n|  Parse |            da | 654.0 ns | 33.33 ns | 38.38 ns | 652.4 ns | 578.8 ns | 720.9 ns |     - |     - |     - |         - |\r\n|  Parse |            fr | 640.6 ns | 30.69 ns | 35.34 ns | 646.5 ns | 562.4 ns | 685.8 ns |     - |     - |     - |         - |\r\n|  Parse |            ja | 639.9 ns | 34.20 ns | 39.38 ns | 640.7 ns | 570.5 ns | 727.8 ns |     - |     - |     - |         - |\r\n|  Parse |         ja-JP | 631.3 ns | 46.60 ns | 51.80 ns | 623.0 ns | 546.3 ns | 742.7 ns |     - |     - |     - |         - |\r\n\r\nIt is expected the Japanese culture parsing initialization be slower than other cultures because Japanese cultures have multiple eras which required to initialize more stuff.\r\n\r\n@adamsitnik let me know if you want me to update the test as I did here. \r\n",
                                           "updatedAt":  "2020-01-10T00:36:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzY1NTkyOA==",
                                           "createdAt":  "2020-01-13T13:12:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve investigated this issue and it turned out to be more complex ;)\r\n\r\nBenchmarkDotNet JITs the code by just running the benchmark once. When it takes a lot of time, it skips further warmups and just runs the benchmark once per iteration. It does so to avoid situations where we have a benchmark that takes a lot of time to run and we run it many times just for a warmup (for example for 30s per run and six warmups = 3 minutes spend for a warmup).\r\n\r\nThe problem are benchmarks where the initialization time is high, but every next run is short. https://github.com/dotnet/BenchmarkDotNet/issues/837\r\n\r\nIn this case, the first call to following code:\r\n\r\n```cs\r\nvar culture = new CultureInfo(\"ja\");\r\nvar result = DateTime.Parse(\"10/10/2010 12:00:00 AM\", culture);\r\n```\r\n\r\ntakes **200 ms** to execute and this is not the cost of JITting the code (I\u0027ve run it with CoreRT for comparison). With the performance repo settings (`IterationTime = 250ms`) it\u0027s considered to be long. That\u0027s why BDN runs the benchmark once per iteration. 4 us is reported due to `Stopwatch` resolution (this operation is to short to be just executed once before we stop the stopwatch).\r\n\r\nThe initialization time can be easily measured using the `time` command on Linux:\r\n\r\n```cs\r\n﻿using System;\r\nusing System.Globalization;\r\n\r\nnamespace culture\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var culture = new CultureInfo(\"ja\");\r\n            var result = DateTime.Parse(\"10/10/2010 12:00:00 AM\", culture);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```cmd\r\ntime dotnet run -c Release --no-build --no-restore\r\n```\r\n\r\n```log\r\nreal\t0m0,612s\r\nuser\t0m0,953s\r\nsys\t0m0,097s\r\n```\r\n\r\nWhile for a Hello World it\u0027s just:\r\n\r\n```log\r\nreal\t0m0,382s\r\nuser\t0m0,642s\r\nsys\t0m0,070s\r\n```\r\n\r\nI am going to rename this issue and investigate the initialization time. 200ms is way too long.",
                                           "updatedAt":  "2020-01-13T13:12:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzY2MjgwNA==",
                                           "createdAt":  "2020-01-13T13:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "`ucol_openRules` takes 150ms... I \u003c3 ICU\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/72259460-d2121b00-3610-11ea-8534-854b258a9ed6.png)\r\n",
                                           "updatedAt":  "2020-01-13T13:27:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzcwMzYxOA==",
                                           "createdAt":  "2020-01-13T14:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "FWIW I was wondering why we create a new collator based on custom text comparison rules while parsing the DateTime and debugged it to the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/72265715-4652bb80-361d-11ea-8a6f-e4892ccdbf6c.png)\r\n",
                                           "updatedAt":  "2020-01-13T14:58:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzcyMTEwMA==",
                                           "createdAt":  "2020-01-13T15:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve studied the [ICU UCollator APIs](https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/ucol_8h.html) and I cant\u0027 see any alternatives to `ucol_openRules` for creating an `UCollator` based on a list of custom rules.\r\n\r\nCurrently the only idea I have is to try to call this method with normalization disabled (`UCOL_OFF` instead of `UCOL_DEFAULT`)",
                                           "updatedAt":  "2020-01-13T15:32:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3Mzc2MjU4MQ==",
                                           "createdAt":  "2020-01-13T16:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "@adamsitnik would it help to have the ability to specify the number of warmup iterations as a manual override?",
                                           "updatedAt":  "2020-01-13T16:55:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3Mzc4NjMxMQ==",
                                           "createdAt":  "2020-01-13T17:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik I am not sure it is worth it to try optimizing the initialization time of the parsing. The reason is the main scenarios always using a single culture (e.g. CurrentCulture or InvariantCulture) which have the initialization done once and we never got any complaint about that. Also, any code using CultureInfo.GetCultureInfo will always use cached culture with the cached parsing data. I suggest closing this one until we get a real complaint. ",
                                           "updatedAt":  "2020-01-13T17:50:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA2OTMwNw==",
                                           "createdAt":  "2020-08-17T19:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @adamsitnik. I don\u0027t think this should be tagged for 5.0 though if you agree this is not a major issue we should target now. moving to 6.0 would be reasonable I guess. ",
                                           "updatedAt":  "2020-08-17T19:29:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA2OTY3MA==",
                                           "createdAt":  "2020-08-17T19:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I agree, moving to 6.0",
                                           "updatedAt":  "2020-08-17T19:30:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA2OTgzNg==",
                                           "createdAt":  "2020-08-17T19:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-17T19:31:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46Jzx2",
                                           "createdAt":  "2021-11-22T15:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "asmichi",
                                           "body":  "Could the issue title be updated so that this issue be more discoverable? For example, \"when using ICU\" instead of \"on Linux\". This issue affects also Windows and macOS now that .NET uses ICU on Windows by default and supports macOS.\r\n\r\nRegarding the issue itself... This issue has visible impact on desktop apps. For desktop apps, startup time is an important factor, especially for short-lived ones. Since .NET Core 3.1 is reaching its EOL, I expect more Windows desktop apps will encounter this issue. (On the other hand, server apps should be less affected because I believe they tend to use \"en\" or the invariant culture after all.)\r\n\r\nMy actual apps, which are short-lived build tools utilizing [Microsoft.Build.Construction APIs](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-api?view=vs-2022), encountered this issue after migrating from .NET Core 3.1 to .NET 6. Its execution time increased from ~1s to ~1.3s on average. As build tools they were executed thousands of times during a build, so the increase added up to hundreds of seconds. (Fortunately [Globalization Invariant Mode](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md) was acceptable.)\r\n\r\n`dotnet msbuild` (including `dotnet build` and `dotnet run`) also is affected by this issue as I have mentioned in #61887. The following PowerShell script run on English and Japanese Windows yields the result below.\r\n\r\n```\r\ndotnet new console\r\ndotnet run\r\n1..10 | % { Measure-Command { dotnet run } } | Measure-Object -Property TotalMilliseconds -Average\r\n```\r\n\r\n| Windows Language | Average Time |\r\n| - | - |\r\n| English | 1315.6ms |\r\n| Japanese | 1619.0ms |\r\n\r\nConfiguration:\r\n- Host\r\n    - Windows 10 Pro 21H2 x64 Japanese (10.0.19043.1348)\r\n    - AMD Ryzen 7 2700X\r\n- Hyper-V Guest\r\n    - Windows 10 Pro 21H2 x64 Japanese (10.0.19044.1288)\r\n    - Windows 10 Pro 21H2 x64 English (10.0.19044.1288)\r\n    - .NET SDK 6.0.100 x64",
                                           "updatedAt":  "2021-11-22T15:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46Ke2Q",
                                           "createdAt":  "2021-11-22T18:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Could the issue title be updated so that this issue be more discoverable? \r\n\r\nYes, I have updated the title. Thanks for the suggestion.",
                                           "updatedAt":  "2021-11-22T18:59:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M-oT7",
                                           "createdAt":  "2022-10-26T04:32:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "If look PowerShell startup scenario (гsers often complain that it starts up slowly) it would be great to have fast ICU initialization.",
                                           "updatedAt":  "2022-10-26T04:32:30Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Initializing the \"ja\" culture takes 200ms when using ICU",
        "labels":  [
                       "area-System.Globalization",
                       "os-linux",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32411",
        "createdAt":  "2020-02-16T21:52:50Z",
        "number":  32411,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-06T17:11:10Z",
        "body":  "The current `IdnMapping` API accepts/returns strings and throws on invalid input. I propose a set of Span-based APIs to avoid allocations.\r\n\r\n```c#\r\nnamespace System.Globalization\r\n{\r\n    public sealed class IdnMapping\r\n    {\r\n        // Existing API\r\n        public string GetAscii(string unicode);\r\n        public string GetAscii(string unicode, int index);\r\n        public string GetAscii(string unicode, int index, int count);\r\n\r\n        public string GetUnicode(string ascii);\r\n        public string GetUnicode(string ascii, int index);\r\n        public string GetUnicode(string ascii, int index, int count);\r\n\r\n        // Proposed API\r\n        public string GetAscii(ReadOnlySpan\u003cchar\u003e unicode);\r\n        public bool TryGetAscii(ReadOnlySpan\u003cchar\u003e unicode, Span\u003cchar\u003e destination, out int charsWritten);\r\n\r\n        public string GetUnicode(ReadOnlySpan\u003cchar\u003e ascii);\r\n        public bool TryGetUnicode(ReadOnlySpan\u003cchar\u003e ascii, Span\u003cchar\u003e destination, out int charsWritten);\r\n    }\r\n}\r\n```\r\n\r\nBoth `Get` and `TryGet*` methods would throw on invalid input.\r\n`TryGet*` would return false on insufficient space in the destination span.\r\n\r\nThis new API would simplify call sites and remove allocations throughout code dealing with internationalized domain names, like Uri and Markdig.\r\n\r\ncc: @tarekgh ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnWLVyw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Njc2NzYwNw==",
                                           "createdAt":  "2020-02-16T23:24:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA7tmmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2020-02-16T23:31:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2020-02-16T23:38:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "In general, the proposal looks reasonable. \r\n\r\nWhy we need the APIs:\r\n\r\n```C#\r\n    public string GetAscii(ReadOnlySpan\u003cchar\u003e unicode);\r\n    public string GetUnicode(ReadOnlySpan\u003cchar\u003e ascii);\r\n```\r\n\r\nI don\u0027t think these are useful if we are going to allocate a string anyway. And the other proposed APIs can be used at that time. What do you think about that?\r\n",
                                           "updatedAt":  "2020-02-16T23:25:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4Njc2ODg4OA==",
                                           "createdAt":  "2020-02-16T23:38:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Those aren\u0027t needed in my use-cases, as `Try*` would always be used.\r\n\r\nI\u0027ll remove them as they could easily be exposed later if a use-case presents itself.",
                                           "updatedAt":  "2020-02-16T23:38:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzI2MTUyOA==",
                                           "createdAt":  "2020-06-12T13:08:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I don\u0027t understand these APIs:\r\n```\r\npublic bool TryGetAscii(ReadOnlySpan\u003cchar\u003e unicode, out string ascii);\r\npublic bool TryGetUnicode(ReadOnlySpan\u003cchar\u003e ascii, out string unicode);\r\n```\r\nWhat does the `Try` mean here?  If it\u0027s to avoid throwing in the case where the data is somehow invalid, that\u0027s a different meaning than the other `Try` overloads would have, which would be based solely on whether the destination is large enough.  The Boolean returned from a `Try` is supposed to convey only one thing, and in such span-based Try methods, it\u0027s always used to connote whether the destination was large enough to store the transformed data.  I don\u0027t think we want two overloads of the same method having a different meaning for the `Try`.",
                                           "updatedAt":  "2020-06-12T13:08:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzI2OTk3OQ==",
                                           "createdAt":  "2020-06-12T13:26:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The idea was for both the `out string` and `Span destination` to return false on invalid input. The span one would also return false on insufficient space.\r\n\r\nI agree the Span overload would be confusing to use since you couldn\u0027t differentiate between invalid input/insufficient space, without ensuring you supply a worst-case sized buffer.\r\n\r\nDo we have a pattern of `Try*` methods ever throwing? If so, we could have all overloads throw on invalid input, where the `Try` only returns false on insufficient space.\r\n```c#\r\n// Existing\r\npublic string GetAscii(string unicode);\r\n\r\n// New\r\npublic string GetAscii(ReadOnlySpan\u003cchar\u003e unicode);\r\nbool TryGetAscii(ReadOnlySpan\u003cchar\u003e unicode, Span\u003cchar\u003e destination, out int charsWritten);\r\n```\r\n\r\nAlternatively, we would need an `OperationStatus`-style return?\r\n",
                                           "updatedAt":  "2020-06-12T13:32:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzI3MDkwMg==",
                                           "createdAt":  "2020-06-12T13:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHOunw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2020-06-12T13:32:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Do we have a pattern of Try* methods ever throwing?\r\n\r\nYes, Try methods can still throw.\r\n\r\n\u003e Alternatively, we would need an OperationStatus-style return?\r\n\r\nWhy not just:\r\n```C#\r\nstring GetAscii(ReadOnlySpan\u003cchar\u003e unicode);\r\nbool TryGetAscii(ReadOnlySpan\u003cchar\u003e unicode, Span\u003cchar\u003e destination, out int charsWritten);\r\n```\r\n?\r\n\r\nIf the exception for invalid input really is unexceptional, though, with the exception happening so frequently as to be a performance problem in real situations, then yeah, OperationStatus is what you\u0027d want.\r\n\r\nCan you share examples where the exception is a meaningful problem?",
                                           "updatedAt":  "2020-06-12T13:30:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzI4MDM0Ng==",
                                           "createdAt":  "2020-06-12T13:49:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e `string GetAscii(ReadOnlySpan\u003cchar\u003e unicode);`\r\n\r\nYes, that is the shape we\u0027d want (lazy copy-pasting, I\u0027ve edited the comment).\r\n\r\nA few examples of exceptional inputs from reading IdnMapping code:\r\n- Length: Empty / over 255 chars total / over 63 chars per label\r\n- Certain sequences\r\n  * Two dots in a row\r\n  * (`-` before `.`): `foo-.bar`\r\n  * Invalid right-to-left\r\n- etc.\r\n- There are a few more cases in [test code](https://github.com/dotnet/runtime/blob/acd8e5d4c32b42e0d0ec457e0347f1d9d1eefada/src/libraries/System.Globalization.Extensions/tests/IdnMapping/IdnMappingGetAsciiTests.cs).\r\n\r\nI wouldn\u0027t expect the performance overhead of exceptions to be a problem for well-behaving apps.\r\n\r\nEdit: \r\n\u003e **where the exception is a meaningful problem?**\r\n\r\nNo.",
                                           "updatedAt":  "2020-06-12T13:51:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTc2NjA1Mg==",
                                           "createdAt":  "2020-07-29T16:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBL1Fww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2020-07-29T16:26:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-07-29T16:27:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving this to 6.0.0 as it is not yet approved and we\u0027re driving 5.0.0 issues down.  Move it back if you think this is still needed in 5.0.0.",
                                           "updatedAt":  "2020-07-29T16:25:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3ODQxNTcyMQ==",
                                           "createdAt":  "2021-07-12T16:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByKS9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2021-07-12T16:31:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This is too late for 6.0.0 at this point.",
                                           "updatedAt":  "2021-07-12T16:21:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jixmX",
                                           "createdAt":  "2023-08-08T17:58:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=58aXHiinJOs\u0026t=0h45m53s)\n\n* Looks good as proposed\r\n\r\n```C#\r\nnamespace System.Globalization;\r\n\r\npublic sealed class IdnMapping\r\n{\r\n    // Existing API\r\n    // public string GetAscii(string unicode);\r\n    // public string GetAscii(string unicode, int index);\r\n    // public string GetAscii(string unicode, int index, int count);\r\n    //\r\n    // public string GetUnicode(string ascii);\r\n    // public string GetUnicode(string ascii, int index);\r\n    // public string GetUnicode(string ascii, int index, int count);\r\n\r\n    // Proposed API\r\n    public string GetAscii(ReadOnlySpan\u003cchar\u003e unicode);\r\n    public bool TryGetAscii(ReadOnlySpan\u003cchar\u003e unicode, Span\u003cchar\u003e destination, out int charsWritten);\r\n\r\n    public string GetUnicode(ReadOnlySpan\u003cchar\u003e ascii);\r\n    public bool TryGetUnicode(ReadOnlySpan\u003cchar\u003e ascii, Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```",
                                           "updatedAt":  "2023-08-08T18:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dSN3N",
                                           "createdAt":  "2025-02-06T04:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@MihaZupan, there are fast paths available for the current methods, where the original string is returned if no encoding is required. What is the intent for the overloads here that take a span and return a string? Won\u0027t those now force allocation in cases where the existing APIs didn\u0027t?",
                                           "updatedAt":  "2025-02-06T04:30:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dYtXL",
                                           "createdAt":  "2025-02-06T17:10:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Yes, they would possibly allocate more if the caller changed from `GetAscii(s, i, length)` to using spans and happened to have `0` and `s.Length` offsets.\nThe idea is similar as with e.g. `Uri.{Un}EscapeDataString(span)`, so you can use the simple helper with inputs other than string.\n\nLooking through the usages in the BCL and Markdig, we don\u0027t have a need for it. Inputs are either already just `string`, or we\u0027d also want to avoid the result allocation. I\u0027d be fine with just leaving those out.",
                                           "updatedAt":  "2025-02-06T17:11:10Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Proposal: Add IdnMapping Span-based APIs",
        "labels":  [
                       "api-approved",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37349",
        "createdAt":  "2020-06-03T13:15:41Z",
        "number":  37349,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-04T15:46:34Z",
        "body":  "```C#\r\nusing System;\r\nusing System.Globalization;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        //Environment.SetEnvironmentVariable(\"DOTNET_SYSTEM_GLOBALIZATION_USENLS\", \"1\");\r\n        //Environment.SetEnvironmentVariable(\"DOTNET_SYSTEM_GLOBALIZATION_INVARIANT\", \"1\");\r\n        Console.WriteLine(new IdnMapping().GetAscii(\"\\xD83D\\xDE00\"));\r\n    }\r\n}\r\n```\r\nThis works fine with both NLS and ICU.  But when GlobalizationMode.Invariant is enabled (uncomment the relevant line above), it throws an exception:\r\n```\r\nUnhandled exception. System.ArgumentException: Left to right characters may not be mixed with right to left characters in IDN labels. (Parameter \u0027unicode\u0027)\r\n   at System.Globalization.IdnMapping.PunycodeEncode(String unicode)\r\n   at System.Globalization.IdnMapping.GetAsciiInvariant(String unicode, Int32 index, Int32 count)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode, Int32 index, Int32 count)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode, Int32 index)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW35qKw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODE4OTYwMA==",
                                           "createdAt":  "2020-06-03T13:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-03T13:15:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODMzMjY5Nw==",
                                           "createdAt":  "2020-06-03T17:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stephentoub We don\u0027t promise any correct IDN behavior when enabling GlobalizationMode.Invariant. even it is not right anyone should depend on IDN behavior when GlobalizationMode.Invariant is enabled. We just got basic functionality working there and no promise to have any consistent result with disabling GlobalizationMode.Invariant. I suggest closing this one.",
                                           "updatedAt":  "2020-06-03T17:11:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODMzOTg1OQ==",
                                           "createdAt":  "2020-06-03T17:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e even if it is not right no one should depend on IDN behavior when GlobalizationMode.Invariant is enabled\r\n\r\nWe use this in higher-level APIs like HttpClient. This means that with invariant mode enabled, you\u0027ll get exceptions just by trying to access sites that cause IdnMapping to throw.\r\n\r\nFYI, @richlander as you consider configurations for docker images and the tradeoffs involved.",
                                           "updatedAt":  "2020-06-03T17:24:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM0MjY4MA==",
                                           "createdAt":  "2020-06-03T17:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I would argue it is good to get the exception at that time better than getting wrong behavior. I would worry about security more at that time. ",
                                           "updatedAt":  "2020-06-03T17:29:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM0NDA1NQ==",
                                           "createdAt":  "2020-06-03T17:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "My point is saying \"We don\u0027t promise any correct IDN behavior when enabling GlobalizationMode.Invariant\" means we also don\u0027t promise any correct behavior for anything higher in the stack, whether it be SslStream or HttpClient or anything else that uses it.  I don\u0027t know how to reason about that.  Can we be more specific about what will and won\u0027t work?",
                                           "updatedAt":  "2020-06-03T17:32:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM0ODA4OQ==",
                                           "createdAt":  "2020-06-03T17:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stephentoub I understand your point. I was just commenting on what would be the choice between throwing and not throwing on the level of the IDN layer. \r\n\r\nFor the higher stack with the Invariant mode, we can have the choice to change the Invariant mode behavior when the system already has NLS/ICU. This will be the case always on Windows and MacOS and only be broken on Linux images not having ICU installed. the concern with that is we are not fully solving the problem and we are losing the consistency promise when enabling Invariant. Note, I am talking about the IDN only and not the whole globalization.",
                                           "updatedAt":  "2020-06-03T17:39:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODQwMzg1MQ==",
                                           "createdAt":  "2020-06-03T19:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I understand your point.\r\n\r\n👍",
                                           "updatedAt":  "2020-06-03T19:11:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzAwNTI5NQ==",
                                           "createdAt":  "2020-08-12T17:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am moving this to 6.0 release as this is not a new behavior for invariant mode. we can revisit later to enhance Invariant mode if needed.",
                                           "updatedAt":  "2020-08-12T17:20:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5beZYX",
                                           "createdAt":  "2023-05-04T12:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Update:\r\nThe sample in description works already (returns `xn--e28h` in Invariant). \r\nThe exception is thrown e.g. for `àא ` that should be coded as `xn--0ca24w` according to unicode13.\r\n\r\nBeyond throwing, there are cases where we return incorrect result and these are e.g. from Unicode13 tests:\r\n```\r\n0à.א; 0à.א; [B1]; xn--0-sfa.xn--4db; ; ;  # 0à.א  (returns: xn--0a-6tb.xn--4db)\r\n0À.א; 0à.א; [B1]; xn--0-sfa.xn--4db; ; ;  # 0à.א  (returns: xn--0a-6tb.xn--4db)\r\n0À.א; 0à.א; [B1]; xn--0-sfa.xn--4db; ; ;  # 0à.א  (returns: xn--0-yda.xn--4db)\r\n```\r\nall of the above, instead of returning אà.א, throw when `toUnicode` is done on `source`,;\r\n",
                                           "updatedAt":  "2023-05-04T12:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bfmKL",
                                           "createdAt":  "2023-05-04T15:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7Jkcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilonatommy",
                                                                               "createdAt":  "2023-05-05T05:49:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@ilonatommy we cannot have a perfect IDN behavior in Invariant mode without having some way to support the normalization. Look at my comment https://github.com/dotnet/runtime/issues/37349#issuecomment-638348089.",
                                           "updatedAt":  "2023-05-04T15:45:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bfmor",
                                           "createdAt":  "2023-05-04T15:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```C#\r\nusing System;\r\nusing System.Globalization;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        //Environment.SetEnvironmentVariable(\"DOTNET_SYSTEM_GLOBALIZATION_USENLS\", \"1\");\r\n        //Environment.SetEnvironmentVariable(\"DOTNET_SYSTEM_GLOBALIZATION_INVARIANT\", \"1\");\r\n        Console.WriteLine(new IdnMapping().GetAscii(\"\\xD83D\\xDE00\"));\r\n    }\r\n}\r\n```\r\nThis works fine with both NLS and ICU.  But when GlobalizationMode.Invariant is enabled (uncomment the relevant line above), it throws an exception:\r\n```\r\nUnhandled exception. System.ArgumentException: Left to right characters may not be mixed with right to left characters in IDN labels. (Parameter \u0027unicode\u0027)\r\n   at System.Globalization.IdnMapping.PunycodeEncode(String unicode)\r\n   at System.Globalization.IdnMapping.GetAsciiInvariant(String unicode, Int32 index, Int32 count)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode, Int32 index, Int32 count)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode, Int32 index)\r\n   at System.Globalization.IdnMapping.GetAscii(String unicode)\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`design-discussion`, `area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-04T15:46:33Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "IdnMapping.GetAscii throws for some inputs in GlobalizationMode.Invariant",
        "labels":  [
                       "design-discussion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37350",
        "createdAt":  "2020-06-03T13:22:26Z",
        "number":  37350,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-12T23:49:58Z",
        "body":  "Is there a good reason to use the NLS/ICU implementations for IdnMapping rather than the managed implementation?  The managed implementation used for GlobalizationMode.Invariant appears to be much faster (and it appears there\u0027s more optimization opportunity, in particular around allocation, e.g. there\u0027s a StringBuilder that\u0027s always allocated and used).  Or if we need to use the native implementations for some reason, could we add the managed fast-path for avoiding the native implementation if no conversion is needed?\r\n\r\nInvariant Off - ICU\r\n|         Method |     Mean |   Error |  StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------------- |---------:|--------:|--------:|-------:|------:|------:|----------:|\r\n| GetAscii_Lower | 240.1 ns | 0.86 ns | 0.72 ns |      - |     - |     - |         - |\r\n| GetAscii_Upper | 241.8 ns | 1.30 ns | 1.01 ns |      - |     - |     - |         - |\r\n| GetAscii_Emoji | 563.5 ns | 1.29 ns | 1.08 ns | 0.0076 |     - |     - |      48 B |\r\n\r\nInvariant Off - NLS\r\n|         Method |     Mean |   Error |  StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------------- |---------:|--------:|--------:|-------:|------:|------:|----------:|\r\n| GetAscii_Lower | 314.0 ns | 1.05 ns | 0.93 ns |      - |     - |     - |         - |\r\n| GetAscii_Upper | 318.6 ns | 1.04 ns | 0.97 ns |      - |     - |     - |         - |\r\n| GetAscii_Emoji | 619.4 ns | 0.94 ns | 0.78 ns | 0.0076 |     - |     - |      48 B |\r\n\r\nInvariant On\r\n|         Method |      Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------------- |----------:|---------:|---------:|-------:|------:|------:|----------:|\r\n| GetAscii_Lower |  20.64 ns | 0.036 ns | 0.028 ns |      - |     - |     - |         - |\r\n| GetAscii_Upper |  20.03 ns | 0.031 ns | 0.028 ns |      - |     - |     - |         - |\r\n| GetAscii_Emoji | 231.95 ns | 1.632 ns | 1.274 ns | 0.0408 |     - |     - |     256 B |\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Globalization;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    static void Main(string[] args) =\u003e BenchmarkSwitcher.FromAssemblies(new[] { typeof(Program).Assembly }).Run(args);\r\n\r\n    private readonly IdnMapping _idn = new IdnMapping();\r\n\r\n    [Benchmark] public string GetAscii_Lower() =\u003e _idn.GetAscii(\"lowercase\");\r\n    [Benchmark] public string GetAscii_Upper() =\u003e _idn.GetAscii(\"UPPERCASE\");\r\n    [Benchmark] public string GetAscii_Emoji() =\u003e _idn.GetAscii(\"\\xD83D\\xDE00\\xD83D\\xDE00\\xD83D\\xDE00\\xD83D\\xDE00\");\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKAgDxg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODE5MzM4MA==",
                                           "createdAt":  "2020-06-03T13:22:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-03T13:22:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODMzNTgzMQ==",
                                           "createdAt":  "2020-06-03T17:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Based on: https://github.com/dotnet/runtime/issues/37349#issuecomment-638332697-- I believe is for correctness, I would expect in Invariant mode we don\u0027t consider a lot of cases and we can\u0027t handle all the supported scenarios.",
                                           "updatedAt":  "2020-06-03T17:16:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODMzNjEwMg==",
                                           "createdAt":  "2020-06-03T17:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stephentoub  to handle IDN correctly we have to have the normalization data (which is big and not trivial). Depending on ICU/NLS give us this functionality for free and even we don\u0027t have to worry about updating the data nor the IDN behavior moving forward. When enabling Invariant mode we don\u0027t promise the behavior will be correct or even updated to support more recent IDN features. This is not different than any other Globalization feature we lose when enabling Invariant mode. I am going to close this one as \"by design\".  please let me know if you think otherwise. ",
                                           "updatedAt":  "2020-06-03T17:17:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODMzNjc2Nw==",
                                           "createdAt":  "2020-06-03T17:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "What about this part of my issue?\r\n\"Or if we need to use the native implementations for some reason, could we add the managed fast-path for avoiding the native implementation if no conversion is needed?\"",
                                           "updatedAt":  "2020-06-03T17:18:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM0MTc5NA==",
                                           "createdAt":  "2020-06-03T17:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e \"Or if we need to use the native implementations for some reason, could we add the managed fast-path for avoiding the native implementation if no conversion is needed?\"\r\n\r\nI think you mean in cases of Ascii strings. this could be possible but we need to revisit the managed implementation to know it still conform to the specs as this managed implementation is very old. ",
                                           "updatedAt":  "2020-06-03T17:27:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM0MzQxOA==",
                                           "createdAt":  "2020-06-03T17:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I think you mean in cases of Ascii strings\r\n\r\nYes, which I\u0027d expect to be a very common case.  Let me know if you disagree.  Just based on the numbers above, it seems like worst case we\u0027d be adding 10% overhead when the string isn\u0027t ASCII, in exchange for saving 90% when it is.  Assuming those numbers are in the right ballpark and ASCII is as common as I\u0027d expect, that feels like a good tradeoff.",
                                           "updatedAt":  "2020-06-03T17:30:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODM3MzkyMA==",
                                           "createdAt":  "2020-06-03T18:17:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGRlSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-06-03T19:26:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stephentoub I agree we should give it a try. I see the benefit for this optimization. Are you talking about GetAscii only or about GetUnicode. too? does the HTTP using both GetAscii and GetUnicode? I am asking because GetUnicode will need extra work to convert to Unicode first and then check the resulted string which may add some perf cost on non-Ascii cases but it is possible to do it too. ",
                                           "updatedAt":  "2020-06-03T18:17:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODQ0OTM3Ng==",
                                           "createdAt":  "2020-06-03T20:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks.  GetAscii is the more impactful API.",
                                           "updatedAt":  "2020-06-03T20:39:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTYxMzg5NA==",
                                           "createdAt":  "2020-08-10T22:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "moved it to 6.0 but we can bring back to 5.0 if we get chance to look at it.",
                                           "updatedAt":  "2020-08-10T22:07:00Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "IdnMapping.GetAscii is much faster in GlobalizationMode.Invariant",
        "labels":  [
                       "enhancement",
                       "area-System.Globalization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40942",
        "createdAt":  "2020-08-17T16:29:54Z",
        "number":  40942,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6o-kg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "danmoseley",
                                            "createdAt":  "2020-08-17T16:48:29Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "DrewScoggins",
                                            "createdAt":  "2020-08-17T18:29:44Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "am11",
                                            "createdAt":  "2020-08-17T19:01:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Symbai",
                                            "createdAt":  "2020-08-17T21:15:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "abelbraaksma",
                                            "createdAt":  "2020-08-17T21:18:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AdamCaviness",
                                            "createdAt":  "2021-03-19T18:38:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "BrandesEric",
                                            "createdAt":  "2021-09-27T13:53:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2021-12-08T14:38:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "davidnemeti",
                                            "createdAt":  "2024-08-30T09:20:34Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-02-15T21:23:00Z",
        "body":  "Before 5.0, we were using ICU only on Unix systems. In 5.0 we have decided to use it on Windows by default as well.\r\n\r\nThis is something that we have done in order to have the same behavior of string-related globalization APIs on every OS.\r\n\r\nHowever, this particular change has affected the performance characteristics of many frequently used methods. Some of them have regressed, some have improved.\r\n\r\nRecently we have reported a lot of 5.0 regressions related to that. Since we have done this on purpose and we are most probably not going to revert the switch, I am opening this issue to track the list of all known regressions. When the list becomes complete, we are most probably going to update the 5.0 release docs and close the issue and label it as `wont fix`. \r\n\r\nPlease feel free to edit the list. \r\n\r\nKnown changes:\r\n\r\n* [System.Memory.ReadOnlySpan.IndexOfString](https://github.com/dotnet/runtime/issues/37815) 5 regressions, 5 improvements\r\n* [System.Globalization.Tests.StringHash](https://github.com/dotnet/runtime/issues/37806) 2 regressions, 4 improvements\r\n* [System.Globalization.Tests.StringEquality](https://github.com/dotnet/runtime/issues/39038): 8 regressions, 14 improvements\r\n* [System.Globalization.Tests.StringSearch](https://github.com/dotnet/runtime/issues/37819): 30 regressions, 32 improvements\r\n* [System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse](https://github.com/dotnet/runtime/issues/31273): 1 regression, 5 improvements\r\n\r\n\r\n\r\ncc @danmosemsft @tarekgh @billwert @DrewScoggins @GrabYourPitchforks @jkotas @safern ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKyzHtg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk4MTc2MQ==",
                                           "createdAt":  "2020-08-17T16:29:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-17T16:29:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk4NzYxMA==",
                                           "createdAt":  "2020-08-17T16:41:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "[System.Memory.ReadOnlySpan.IndexOfString](https://github.com/dotnet/runtime/issues/37815) 5 regressions, 5 improvements\r\n\r\n|        Method |                                input |   value |             comparisonType |  3.1 Mean |     5.0 ICU |   5.0 NLS |\r\n|-------------- |------------------------------------- |-------- |--------------------------- |----------:|------------:|----------:|\r\n| IndexOfString |                           AAAAA5AAAA |       5 |           InvariantCulture |  79.07 ns |    35.41 ns |  72.05 ns |\r\n| IndexOfString | AAAAAAAAAAAA(...)AAAAAAAAAAAA [1000] |       X |                    Ordinal |  39.72 ns |    38.89 ns |  38.25 ns |\r\n| IndexOfString |  AAAAAAAAAAAA(...)AAAAAAAAAAAA [100] |       x | InvariantCultureIgnoreCase | 300.45 ns |   214.39 ns | 294.59 ns |\r\n| IndexOfString |  AAAAAAAAAAAA(...)AAAAAAAAAAAA [100] |       x |          OrdinalIgnoreCase | 245.94 ns |   802.33 ns | 240.42 ns |\r\n| IndexOfString |                                ABCDE |       c | InvariantCultureIgnoreCase |  71.81 ns |    30.26 ns |  63.83 ns |\r\n| IndexOfString |  Hello Worldb(...)allylong!xyz [186] |       w |          OrdinalIgnoreCase |  45.80 ns |   102.63 ns |  40.30 ns |\r\n| IndexOfString |  Hello Worldb(...)allylong!xyz [187] |       ~ |                    Ordinal |  28.52 ns |    22.28 ns |  21.03 ns |\r\n| IndexOfString | Hello Worldbb(...)bbbbbbbbbbba! [47] |       y |                    Ordinal |  24.15 ns |    14.09 ns |  13.57 ns |\r\n| IndexOfString |                          More Test\u0027s |   Tests |          OrdinalIgnoreCase |  56.38 ns |   108.93 ns |  50.48 ns |\r\n| IndexOfString |                               StrIng |  string |          OrdinalIgnoreCase |  38.79 ns |    55.01 ns |  33.86 ns |\r\n| IndexOfString |                         foobardzsdzs |   rddzs |           InvariantCulture | 101.46 ns |    44.93 ns |  94.90 ns |\r\n| IndexOfString |                              string1 | string2 |           InvariantCulture |  91.45 ns |    37.14 ns |  80.95 ns |\r\n| IndexOfString |                                    ? |       ? |           InvariantCulture | 108.70 ns | 4,069.11 ns | 105.36 ns |\r\n| IndexOfString |  ????????????(...)???????????? [100] |       ? |                    Ordinal |  25.08 ns |    16.88 ns |  15.48 ns |\r\n| IndexOfString | ????????????(...)???????????? [1000] |       x |                    Ordinal |  39.70 ns |    39.19 ns |  37.99 ns |\r\n\r\nComment: `InvariantCulture` and `InvariantCultureIgnoreCase` have improved, while `OrdinalIgnoreCase` has regressed. We could implement `OrdinalIgnoreCase` path in managed code if it ever becomes a problem",
                                           "updatedAt":  "2020-08-17T16:41:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk5MTE1Nw==",
                                           "createdAt":  "2020-08-17T16:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thank you @adamsitnik good idea I\u0027m glad you created this.",
                                           "updatedAt":  "2020-08-17T16:48:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk5MTk0OQ==",
                                           "createdAt":  "2020-08-17T16:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have this PR opened for addressing all ordinal operations https://github.com/dotnet/runtime/pull/40910",
                                           "updatedAt":  "2020-08-17T16:50:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk5MjkwMA==",
                                           "createdAt":  "2020-08-17T16:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik are you going to close all other bugs complaining about ICU perf against this one? ",
                                           "updatedAt":  "2020-08-17T16:52:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk5MzY2Mg==",
                                           "createdAt":  "2020-08-17T16:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e are you going to close all other bugs complaining about ICU perf against this one?\r\n\r\nThat\u0027s my plan. I will try to do my best to do it for as many as I can.",
                                           "updatedAt":  "2020-08-17T16:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDk5NTE3Mw==",
                                           "createdAt":  "2020-08-17T16:56:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNnWsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-08-17T16:57:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-08-17T17:11:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2020-08-17T21:16:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abelbraaksma",
                                                                               "createdAt":  "2020-08-17T21:16:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Also, I want to be clear about the expectation here. I don\u0027t think we can fix all perf here as we are limited by calling ICU. we can look at how we can improve it but I am not expecting to get the perf to the point where we used to call NLS. So, it will be good to decide which items in this list is a blocker. The only one was the Ordinal cases which I am addressing in the attached PR. I am not aware of any other blocking scenario. We\u0027ll look more of course on other scenarios anyway but I am not sure how much we can do before 5.0 release.",
                                           "updatedAt":  "2020-08-17T16:56:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTAyMzUyMQ==",
                                           "createdAt":  "2020-08-17T17:52:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "[System.Globalization.Tests.StringHash](https://github.com/dotnet/runtime/issues/37806) 2 regressions, 4 improvements\r\n\r\n|      Method |  Count |                    Options |        3.1 Mean |   5.0 ICU Mean |    5.0 NLS Mean |\r\n|------------ |------- |--------------------------- |----------------:|---------------:|----------------:|\r\n| GetHashCode |    128 |             (, IgnoreCase) |     1,806.07 ns |     1,806.0 ns |     1,806.10 ns |\r\n| GetHashCode |    128 |                   (, None) |     1,823.38 ns |     2,284.0 ns |     1,818.16 ns |\r\n| GetHashCode |    128 |        (en-US, IgnoreCase) |     1,831.84 ns |     1,816.0 ns |     1,790.90 ns |\r\n| GetHashCode |    128 |              (en-US, None) |     1,820.91 ns |     2,296.8 ns |     1,815.97 ns |\r\n| GetHashCode |    128 |           (en-US, Ordinal) |        99.33 ns |       100.0 ns |        99.61 ns |\r\n| GetHashCode |    128 | (en-US, OrdinalIgnoreCase) |       123.93 ns |       122.6 ns |       121.49 ns |\r\n| GetHashCode | 131072 |             (, IgnoreCase) | 2,207,798.50 ns | 1,773,953.8 ns | 2,193,202.55 ns |\r\n| GetHashCode | 131072 |                   (, None) | 2,209,727.34 ns | 1,893,550.0 ns | 2,187,722.71 ns |\r\n| GetHashCode | 131072 |        (en-US, IgnoreCase) | 2,196,075.39 ns | 1,781,730.1 ns | 2,190,508.15 ns |\r\n| GetHashCode | 131072 |              (en-US, None) | 2,214,228.87 ns | 1,899,934.3 ns | 2,185,224.74 ns |\r\n| GetHashCode | 131072 |           (en-US, Ordinal) |    96,294.65 ns |    96,513.7 ns |    96,551.91 ns |\r\n| GetHashCode | 131072 | (en-US, OrdinalIgnoreCase) |   113,393.49 ns |   112,940.4 ns |   116,436.80 ns |\r\n\r\nComment: there are two regressions for `Count=128` but four improvements for `Count=131072`",
                                           "updatedAt":  "2020-08-17T17:52:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTAzNjk4NQ==",
                                           "createdAt":  "2020-08-17T18:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "[System.Globalization.Tests.StringEquality](https://github.com/dotnet/runtime/issues/39038): 8 regressions, 14 improvements\r\n\r\n|                     Method | Count |                    Options |     3.1  Mean |  5.0 ICU Mean | 5.0 NLS Mean |\r\n|--------------------------- |------ |--------------------------- |--------------:|--------------:|-------------:|\r\n|               Compare_Same |  1024 |             (, IgnoreCase) |    996.299 ns |    575.414 ns |    997.39 ns |\r\n|         Compare_Same_Upper |  1024 |             (, IgnoreCase) |  3,373.889 ns |  6,798.371 ns |  3,356.57 ns |\r\n| Compare_DifferentFirstChar |  1024 |             (, IgnoreCase) |     43.730 ns |     37.378 ns |     42.73 ns |\r\n|               Compare_Same |  1024 |                   (, None) |  1,003.408 ns |    572.528 ns |  1,003.25 ns |\r\n|         Compare_Same_Upper |  1024 |                   (, None) |  4,123.875 ns |  6,747.893 ns |  4,033.30 ns |\r\n| Compare_DifferentFirstChar |  1024 |                   (, None) |     41.883 ns |     34.904 ns |     43.04 ns |\r\n|               Compare_Same |  1024 |        (en-US, IgnoreCase) |    992.625 ns |    564.239 ns |  1,012.86 ns |\r\n|         Compare_Same_Upper |  1024 |        (en-US, IgnoreCase) |  3,334.161 ns |  6,789.031 ns |  3,336.49 ns |\r\n| Compare_DifferentFirstChar |  1024 |        (en-US, IgnoreCase) |     41.821 ns |     36.251 ns |     41.92 ns |\r\n|               Compare_Same |  1024 |    (en-US, IgnoreNonSpace) |  1,667.106 ns |    564.521 ns |  1,671.78 ns |\r\n|         Compare_Same_Upper |  1024 |    (en-US, IgnoreNonSpace) |  9,547.973 ns |  2,103.148 ns |  9,599.69 ns |\r\n| Compare_DifferentFirstChar |  1024 |    (en-US, IgnoreNonSpace) |     66.929 ns |     35.786 ns |     59.21 ns |\r\n|               Compare_Same |  1024 |     (en-US, IgnoreSymbols) |  1,676.295 ns |    569.468 ns |  1,679.39 ns |\r\n|         Compare_Same_Upper |  1024 |     (en-US, IgnoreSymbols) |  9,100.891 ns | 11,605.391 ns |  9,075.81 ns |\r\n| Compare_DifferentFirstChar |  1024 |     (en-US, IgnoreSymbols) |  8,219.648 ns | 21,916.551 ns |  8,311.14 ns |\r\n|               Compare_Same |  1024 |              (en-US, None) |    988.500 ns |    572.970 ns |  1,005.15 ns |\r\n|         Compare_Same_Upper |  1024 |              (en-US, None) |  4,040.998 ns |  6,740.818 ns |  4,007.38 ns |\r\n| Compare_DifferentFirstChar |  1024 |              (en-US, None) |     41.931 ns |     35.349 ns |     42.87 ns |\r\n|               Compare_Same |  1024 |           (en-US, Ordinal) |     82.818 ns |     67.527 ns |     68.47 ns |\r\n|         Compare_Same_Upper |  1024 |           (en-US, Ordinal) |     13.907 ns |     14.796 ns |     14.82 ns |\r\n| Compare_DifferentFirstChar |  1024 |           (en-US, Ordinal) |      5.432 ns |      9.946 ns |     10.27 ns |\r\n|               Compare_Same |  1024 | (en-US, OrdinalIgnoreCase) |    815.592 ns |    822.866 ns |    834.45 ns |\r\n|         Compare_Same_Upper |  1024 | (en-US, OrdinalIgnoreCase) |  1,225.463 ns |  1,218.922 ns |  1,253.77 ns |\r\n| Compare_DifferentFirstChar |  1024 | (en-US, OrdinalIgnoreCase) |     10.517 ns |     11.977 ns |     11.30 ns |\r\n|               Compare_Same |  1024 |              (pl-PL, None) | 21,378.839 ns |    572.036 ns | 21,617.36 ns |\r\n|         Compare_Same_Upper |  1024 |              (pl-PL, None) | 22,136.295 ns | 17,518.080 ns | 22,375.84 ns |\r\n| Compare_DifferentFirstChar |  1024 |              (pl-PL, None) |     61.794 ns |     37.698 ns |     62.93 ns |\r\n\r\nComment: ICU seems to be faster when inputs are the same or the first character is different but slows down when we are comparing lowercase and uppercase versions of the same words",
                                           "updatedAt":  "2020-08-17T18:21:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA1NjIwNg==",
                                           "createdAt":  "2020-08-17T19:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "[System.Globalization.Tests.StringSearch](https://github.com/dotnet/runtime/issues/37819): 30 regressions, 32 improvements\r\n\r\n|                      Method |                           Options |      3.1 Mean |  5.0 ICU Mean |  5.0 NLS Mean |\r\n|---------------------------- |---------------------------------- |--------------:|--------------:|--------------:|\r\n|          IsPrefix_FirstHalf |             (, IgnoreCase, False) |    279.556 ns |    204.122 ns |    270.881 ns |\r\n| IsPrefix_DifferentFirstChar |             (, IgnoreCase, False) |     58.887 ns |     18.055 ns |     53.431 ns |\r\n|         IsSuffix_SecondHalf |             (, IgnoreCase, False) |    264.358 ns |    191.353 ns |    262.566 ns |\r\n|  IsSuffix_DifferentLastChar |             (, IgnoreCase, False) |     61.441 ns |     18.846 ns |     56.044 ns |\r\n|       IndexOf_Word_NotFound |             (, IgnoreCase, False) |    802.657 ns |    628.962 ns |    798.926 ns |\r\n|   LastIndexOf_Word_NotFound |             (, IgnoreCase, False) |    975.995 ns |    620.031 ns |    965.195 ns |\r\n|          IsPrefix_FirstHalf |              (, IgnoreCase, True) |  1,012.810 ns |  3,677.834 ns |  1,019.808 ns |\r\n| IsPrefix_DifferentFirstChar |              (, IgnoreCase, True) |     72.985 ns |    853.547 ns |     72.039 ns |\r\n|         IsSuffix_SecondHalf |              (, IgnoreCase, True) |  2,552.799 ns |  7,467.664 ns |  2,575.991 ns |\r\n|  IsSuffix_DifferentLastChar |              (, IgnoreCase, True) |  5,376.895 ns |  1,288.707 ns |  5,329.497 ns |\r\n|       IndexOf_Word_NotFound |              (, IgnoreCase, True) |  3,931.968 ns | 11,275.663 ns |  3,831.631 ns |\r\n|   LastIndexOf_Word_NotFound |              (, IgnoreCase, True) |  3,142.703 ns | 17,463.707 ns |  3,042.517 ns |\r\n|          IsPrefix_FirstHalf |                   (, None, False) |    211.472 ns |    173.105 ns |    201.325 ns |\r\n| IsPrefix_DifferentFirstChar |                   (, None, False) |     56.298 ns |     17.402 ns |     53.396 ns |\r\n|         IsSuffix_SecondHalf |                   (, None, False) |    182.540 ns |    174.536 ns |    179.486 ns |\r\n|  IsSuffix_DifferentLastChar |                   (, None, False) |     58.275 ns |     18.166 ns |     55.200 ns |\r\n|       IndexOf_Word_NotFound |                   (, None, False) |    699.751 ns |    500.508 ns |    678.148 ns |\r\n|   LastIndexOf_Word_NotFound |                   (, None, False) |    850.232 ns |    502.581 ns |    845.351 ns |\r\n|          IsPrefix_FirstHalf |                    (, None, True) |  1,052.320 ns |  3,636.952 ns |  1,021.712 ns |\r\n| IsPrefix_DifferentFirstChar |                    (, None, True) |     73.568 ns |    848.922 ns |     72.912 ns |\r\n|         IsSuffix_SecondHalf |                    (, None, True) |  2,595.612 ns |  7,554.091 ns |  2,540.565 ns |\r\n|  IsSuffix_DifferentLastChar |                    (, None, True) |  5,306.733 ns |  1,317.628 ns |  5,348.958 ns |\r\n|       IndexOf_Word_NotFound |                    (, None, True) |  3,935.667 ns | 11,177.835 ns |  3,803.958 ns |\r\n|   LastIndexOf_Word_NotFound |                    (, None, True) |  3,083.463 ns | 16,993.198 ns |  3,029.761 ns |\r\n|          IsPrefix_FirstHalf |        (en-US, IgnoreCase, False) |    270.134 ns |    205.387 ns |    273.552 ns |\r\n| IsPrefix_DifferentFirstChar |        (en-US, IgnoreCase, False) |     57.763 ns |     18.110 ns |     54.154 ns |\r\n|         IsSuffix_SecondHalf |        (en-US, IgnoreCase, False) |    258.893 ns |    190.355 ns |    260.361 ns |\r\n|  IsSuffix_DifferentLastChar |        (en-US, IgnoreCase, False) |     58.943 ns |     19.272 ns |     56.319 ns |\r\n|       IndexOf_Word_NotFound |        (en-US, IgnoreCase, False) |    807.236 ns |    622.869 ns |    798.647 ns |\r\n|   LastIndexOf_Word_NotFound |        (en-US, IgnoreCase, False) |    975.083 ns |    623.089 ns |    955.210 ns |\r\n|          IsPrefix_FirstHalf |         (en-US, IgnoreCase, True) |  1,018.976 ns |  3,666.344 ns |  1,026.411 ns |\r\n| IsPrefix_DifferentFirstChar |         (en-US, IgnoreCase, True) |     76.465 ns |    887.811 ns |     72.117 ns |\r\n|         IsSuffix_SecondHalf |         (en-US, IgnoreCase, True) |  2,563.798 ns |  7,529.526 ns |  2,565.718 ns |\r\n|  IsSuffix_DifferentLastChar |         (en-US, IgnoreCase, True) |  5,305.949 ns |  1,304.493 ns |  5,346.831 ns |\r\n|       IndexOf_Word_NotFound |         (en-US, IgnoreCase, True) |  3,892.140 ns | 11,776.383 ns |  3,926.784 ns |\r\n|   LastIndexOf_Word_NotFound |         (en-US, IgnoreCase, True) |  3,090.867 ns | 17,430.155 ns |  3,072.910 ns |\r\n|          IsPrefix_FirstHalf |    (en-US, IgnoreNonSpace, False) |  1,020.808 ns |    178.017 ns |  1,017.612 ns |\r\n| IsPrefix_DifferentFirstChar |    (en-US, IgnoreNonSpace, False) |     67.336 ns |     18.067 ns |     65.861 ns |\r\n|         IsSuffix_SecondHalf |    (en-US, IgnoreNonSpace, False) |  2,552.693 ns |    178.425 ns |  2,544.768 ns |\r\n|  IsSuffix_DifferentLastChar |    (en-US, IgnoreNonSpace, False) |  4,921.510 ns |     18.199 ns |  4,858.353 ns |\r\n|       IndexOf_Word_NotFound |    (en-US, IgnoreNonSpace, False) |  3,906.457 ns |    506.498 ns |  3,792.084 ns |\r\n|   LastIndexOf_Word_NotFound |    (en-US, IgnoreNonSpace, False) |  3,076.625 ns |    507.002 ns |  3,048.544 ns |\r\n|          IsPrefix_FirstHalf |     (en-US, IgnoreSymbols, False) |  1,022.075 ns | 16,888.924 ns |  1,020.346 ns |\r\n| IsPrefix_DifferentFirstChar |     (en-US, IgnoreSymbols, False) |     70.421 ns | 29,267.090 ns |     66.428 ns |\r\n|         IsSuffix_SecondHalf |     (en-US, IgnoreSymbols, False) |  3,437.616 ns | 19,397.341 ns |  3,411.783 ns |\r\n|  IsSuffix_DifferentLastChar |     (en-US, IgnoreSymbols, False) |  5,308.903 ns | 34,515.843 ns |  5,333.271 ns |\r\n|       IndexOf_Word_NotFound |     (en-US, IgnoreSymbols, False) |  3,310.485 ns | 11,414.777 ns |  3,285.185 ns |\r\n|   LastIndexOf_Word_NotFound |     (en-US, IgnoreSymbols, False) |  3,468.180 ns | 16,640.286 ns |  3,393.434 ns |\r\n|          IsPrefix_FirstHalf |              (en-US, None, False) |    205.249 ns |    176.915 ns |    200.000 ns |\r\n| IsPrefix_DifferentFirstChar |              (en-US, None, False) |     59.057 ns |     17.779 ns |     53.980 ns |\r\n|         IsSuffix_SecondHalf |              (en-US, None, False) |    184.039 ns |    177.072 ns |    181.258 ns |\r\n|  IsSuffix_DifferentLastChar |              (en-US, None, False) |     59.873 ns |     18.232 ns |     55.897 ns |\r\n|       IndexOf_Word_NotFound |              (en-US, None, False) |    688.002 ns |    504.985 ns |    681.283 ns |\r\n|   LastIndexOf_Word_NotFound |              (en-US, None, False) |    841.277 ns |    506.640 ns |    859.611 ns |\r\n|          IsPrefix_FirstHalf |               (en-US, None, True) |  1,026.332 ns |  3,676.392 ns |  1,129.406 ns |\r\n| IsPrefix_DifferentFirstChar |               (en-US, None, True) |     72.958 ns |    860.499 ns |     73.269 ns |\r\n|         IsSuffix_SecondHalf |               (en-US, None, True) |  2,555.954 ns |  7,625.414 ns |  2,556.183 ns |\r\n|  IsSuffix_DifferentLastChar |               (en-US, None, True) |  5,320.978 ns |  1,349.628 ns |  5,373.210 ns |\r\n|       IndexOf_Word_NotFound |               (en-US, None, True) |  3,783.346 ns | 11,472.314 ns |  3,884.931 ns |\r\n|   LastIndexOf_Word_NotFound |               (en-US, None, True) |  3,080.818 ns | 17,512.610 ns |  3,077.301 ns |\r\n|          IsPrefix_FirstHalf |           (en-US, Ordinal, False) |     12.480 ns |     14.469 ns |     12.584 ns |\r\n| IsPrefix_DifferentFirstChar |           (en-US, Ordinal, False) |      6.229 ns |      8.496 ns |      8.925 ns |\r\n|         IsSuffix_SecondHalf |           (en-US, Ordinal, False) |     14.058 ns |     12.034 ns |     14.248 ns |\r\n|  IsSuffix_DifferentLastChar |           (en-US, Ordinal, False) |     19.645 ns |     17.446 ns |     16.225 ns |\r\n|       IndexOf_Word_NotFound |           (en-US, Ordinal, False) |     39.451 ns |     37.728 ns |     39.207 ns |\r\n|   LastIndexOf_Word_NotFound |           (en-US, Ordinal, False) |    137.367 ns |     97.667 ns |     98.362 ns |\r\n|          IsPrefix_FirstHalf | (en-US, OrdinalIgnoreCase, False) |     73.307 ns |     82.618 ns |     83.575 ns |\r\n| IsPrefix_DifferentFirstChar | (en-US, OrdinalIgnoreCase, False) |      9.844 ns |      9.585 ns |      9.731 ns |\r\n|         IsSuffix_SecondHalf | (en-US, OrdinalIgnoreCase, False) |    109.128 ns |     83.181 ns |     80.728 ns |\r\n|  IsSuffix_DifferentLastChar | (en-US, OrdinalIgnoreCase, False) |    203.785 ns |    149.656 ns |    141.373 ns |\r\n|       IndexOf_Word_NotFound | (en-US, OrdinalIgnoreCase, False) |    701.811 ns |  3,125.640 ns |    705.609 ns |\r\n|   LastIndexOf_Word_NotFound | (en-US, OrdinalIgnoreCase, False) |    617.823 ns |  3,161.417 ns |    621.380 ns |\r\n|          IsPrefix_FirstHalf |              (pl-PL, None, False) |  2,594.625 ns |  5,704.863 ns |  2,558.898 ns |\r\n| IsPrefix_DifferentFirstChar |              (pl-PL, None, False) |    101.082 ns |    857.463 ns |     98.650 ns |\r\n|         IsSuffix_SecondHalf |              (pl-PL, None, False) |  8,633.560 ns |  8,435.046 ns |  8,586.963 ns |\r\n|  IsSuffix_DifferentLastChar |              (pl-PL, None, False) | 19,423.848 ns |  1,216.271 ns | 17,376.208 ns |\r\n|       IndexOf_Word_NotFound |              (pl-PL, None, False) |  9,534.684 ns | 14,329.673 ns |  9,455.980 ns |\r\n|   LastIndexOf_Word_NotFound |              (pl-PL, None, False) |  8,689.332 ns | 18,014.702 ns |  8,657.101 ns |",
                                           "updatedAt":  "2020-08-17T19:01:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA2ODM2Mw==",
                                           "createdAt":  "2020-08-17T19:27:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "[System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse](https://github.com/dotnet/runtime/issues/31273): 1 big regression for `ja` culture, 5 improvements\r\n\r\n|               Method | culturestring | 3.1 Mean |    5.0 ICU |   5.0 NLS| \r\n|--------------------- |-------------- |---------:|-----------:|---------:|\r\n| ToStringHebrewIsrael |             ? | 540.1 ns |   463.3 ns | 518.3 ns | \r\n|             ToString |               | 254.0 ns |   248.9 ns | 245.7 ns | \r\n|                Parse |               | 466.9 ns |   423.7 ns | 424.7 ns | \r\n|             ToString |            da | 247.5 ns |   234.0 ns | 241.1 ns | \r\n|                Parse |            da | 551.2 ns |   449.3 ns | 515.6 ns | \r\n|             ToString |            fr | 251.5 ns |   246.4 ns | 244.3 ns | \r\n|                Parse |            fr | 466.5 ns |   424.7 ns | 440.2 ns | \r\n|             ToString |            ja | 258.1 ns |   243.5 ns | 245.4 ns | \r\n|                Parse |            ja | 482.1 ns | 5,078.9 ns | 456.9 ns | \r\n\r\nComment: this is a known ICU issue: https://github.com/dotnet/runtime/issues/31273",
                                           "updatedAt":  "2020-08-17T19:27:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NTA2OTM1Ng==",
                                           "createdAt":  "2020-08-17T19:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNmtWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-08-17T19:31:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e are you going to close all other bugs complaining about ICU perf against this one?\r\n\r\n@tarekgh I\u0027ve gone through all `System.Memory` and `System.Globalization` issues with `performance` tag and updated the list. It should be complete now.",
                                           "updatedAt":  "2020-08-17T19:29:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU0MTIyMg==",
                                           "createdAt":  "2020-08-19T16:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@symbai I see you\u0027ve thumbs-down. Could you share your concerns?",
                                           "updatedAt":  "2020-08-19T16:51:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU2NTE3NQ==",
                                           "createdAt":  "2020-08-19T17:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "@danmosemsft Its not about adamsitnik work of collecting the regressions which I find very helpful. Its about the fact that switching to ICU has introduced MAJOR regressions (+4,500ns, ~ 4x slower) while the \"improvements\" are usually around ~2ns which I bet is only some noise and running them a couple of times will show there are no improvements at all.\r\n\r\nI\u0027m not into ICU and I dont know why this change was made at all but seeing all the performance improvements in .NET Core the last versions and now such a big regression on hot code path that is literally being used anywhere, makes me really wonder what in god\u0027s name can be that much useful about ICU that it worth THIS regression. I\u0027ve thumbs-down because I disagree on this ICU change and I disagree on statements which say that \"we might not fix some of these regressions\". Especially without telling people that switching to .NET 5 will make their code much more slower without a benefit (there might be a benefit in ICU, but I bet it won\u0027t affect most people... unlike this performance regression).",
                                           "updatedAt":  "2020-08-19T17:38:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU3MTA5OQ==",
                                           "createdAt":  "2020-08-19T17:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Symbai you have the option to switch back to use NLS if you want to. \r\n\r\nICU is the future direction in general for the .NET and Windows too. ICU will give the opportunity to have a consistency between OS\u0027s and OS versions. The benefit of using ICU is really worth it. ICU will give opportunity to the apps to customize the globalization behavior too.",
                                           "updatedAt":  "2020-08-19T17:51:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU3NDE3MQ==",
                                           "createdAt":  "2020-08-19T17:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBkK4pQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AdamCaviness",
                                                                               "createdAt":  "2021-03-19T18:44:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Also note that this is already what is used on Linux and Mac, and increasingly used within Windows OS itself. So we are aligning with the industry here. If and where it is slow - we all benefit from making it faster. The .NET team have contributed bug reports and performance improvements to libicu in the past, and I expect we will do so again.",
                                           "updatedAt":  "2020-08-19T17:57:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzQ2MjM2Mg==",
                                           "createdAt":  "2020-08-20T08:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQOPCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Firefly74940",
                                                                               "createdAt":  "2020-08-20T13:02:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-09-13T09:44:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "As a side note, ICU is open source and we can contribute to make hot paths faster",
                                           "updatedAt":  "2020-08-20T08:40:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3OTg2MzE2NA==",
                                           "createdAt":  "2020-08-25T07:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "I am happy to see cross-platform consistency based on ICU but it would be sad to find slowing down on hot paths, specially in PowerShell whose Engine is very sensitive to string operation performance. I hope MSFT team continues to invest in the area in next milestone.\r\nAs side notice, we could have an extension package with managed implementation for applications which are performance critical and has not memory limitations (can utilize more large and fast tables). Of course, if other ways are not more effective.\r\n",
                                           "updatedAt":  "2020-08-25T07:46:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDEzOTAxNQ==",
                                           "createdAt":  "2020-08-25T16:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@iSazonov we already fixed all ordinal[IgnoreCase] operations perf across all functionality). as pointed before, you still have the option to switch back using NLS if needed and you continue work on Windows as used to. \r\n\r\n\u003e As side notice, we could have an extension package with managed implementation for applications which are performance critical and has not memory limitations (can utilize more large and fast tables). Of course, if other ways are not more effective.\r\n\r\nI assume you are talking about PowerShell? of course we\u0027ll not do that in .NET as we avoid carrying any globalization data and implementing all functionalities like collations wouldn\u0027t be trivial. \r\n\r\nby the way, Powershell already running on Linux for awhile with ICU, why you are concerned now?",
                                           "updatedAt":  "2020-08-25T16:40:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDE5NTc1MQ==",
                                           "createdAt":  "2020-08-25T18:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWzBvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-08-26T07:12:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-08-27T04:27:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "fMichaleczek",
                                                                               "createdAt":  "2020-11-14T19:05:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fMichaleczek",
                                                                               "createdAt":  "2020-11-14T19:05:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e we already fixed all ordinal[IgnoreCase] operations perf across all functionality)\r\n\r\nI see. Many thanks! \r\n\r\n\u003e you still have the option to switch back using NLS\r\n\r\nI think it makes no sense because because more and more users work in a heterogeneous environment and with ICU there is less chance of getting different results.\r\n\r\n\u003e by the way, Powershell already running on Linux for awhile with ICU, why you are concerned now?\r\n\r\nQuestions like why the performance/behavior is different on Windows and on Unix is very inconvenient. Questions like this sometimes appear in PowerShell repo (not related to the topic). With moving to ICU the likelihood of such questions decreases and this is great. \r\nPowerShell is highly dependent on OrdinalIgnoreCase and any improvements here have a positive impact on it. This is my only concern.\r\n\r\nThanks again for your great work!\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-08-25T18:26:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDE5ODA4Mg==",
                                           "createdAt":  "2020-08-25T18:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e PowerShell is highly dependent on OrdinalIgnoreCase and any improvements here have a positive impact on it. This is my only concern.\r\n\r\nThanks for the info, it is very helpful. could you please try the latest .NET builds which include the Ordinal perf improvements and let\u0027s know if you see the differences now? let me know if you need help with that. ",
                                           "updatedAt":  "2020-08-25T18:31:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTA2ODY3MQ==",
                                           "createdAt":  "2020-08-26T19:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBOnNiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-08-26T19:24:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-08-26T20:49:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-08-27T06:59:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Just wanted to update this thread with the auto-filed results showing big wins (70%) in the System.Memory.ReadOnlySpan benchmarks that regressed.\r\n\r\nhttps://github.com/DrewScoggins/performance-2/issues/1392",
                                           "updatedAt":  "2020-08-26T19:08:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTExNTIxNw==",
                                           "createdAt":  "2020-08-26T20:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Also seeing wins for System.Globalization.Tests.StringSearch in some of the IndexOf OrdinalIgnoreCase benchmarks. We are seeing that across x64, x86 Windows and x64 Ubuntu.\r\n\r\nhttps://github.com/DrewScoggins/performance-2/issues/1375",
                                           "updatedAt":  "2020-08-26T20:47:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTMyMTk0Mg==",
                                           "createdAt":  "2020-08-27T03:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBOmYWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-08-27T03:29:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e Thanks for the info, it is very helpful. could you please try the latest .NET builds which include the Ordinal perf improvements and let\u0027s know if you see the differences now? let me know if you need help with that.\r\n\r\nA day before PowerShell MSFT team tried to move to .Net 5.0 Preview8 but without success. I guess I can do some measurements only after we move to RC1. \r\n\r\n/cc @SteveL-MSFT @daxian-dbw for information.",
                                           "updatedAt":  "2020-08-27T03:28:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTE4MDMxNw==",
                                           "createdAt":  "2020-09-01T23:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Just curious @tarekgh, why do we still see significant differences between Windows (with your improvement) and Ubuntu? eg\r\nhttps://github.com/DrewScoggins/performance-2/issues/1283 --- about 240-260 ns\r\nhttps://github.com/DrewScoggins/performance-2/issues/1334 -- back down from 160ns to 120ns\r\n",
                                           "updatedAt":  "2020-09-01T23:08:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTIzMzQ5MQ==",
                                           "createdAt":  "2020-09-02T01:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@danmosemsft looking https://github.com/DrewScoggins/performance-2/issues/1283 I am seeing the ordinal ignore casing cases is improved. other none ordinal cases  I am not expecting to improve with my change. am I reading the data correctly?",
                                           "updatedAt":  "2020-09-02T01:50:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTI4NzI5NQ==",
                                           "createdAt":  "2020-09-02T04:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBPRWjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-09-02T23:40:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tarekgh your change is good. I was just curious why Linux and Windows perf were still significantly different but I realized I compared the wrong rows.",
                                           "updatedAt":  "2020-09-02T04:28:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjExMTc3MA==",
                                           "createdAt":  "2020-09-02T23:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@danmosemsft I was not really sure if I am looking at or interpreting the perf data correctly. that is why I was asking. Thanks for clarifying.  ",
                                           "updatedAt":  "2020-09-02T23:41:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTY0Njg3OA==",
                                           "createdAt":  "2020-09-13T09:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQVCUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "drieseng",
                                                                               "createdAt":  "2020-09-14T16:38:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Would it be in the cards to contribute to ICU so that this operation is not by-design slow? I imagine that many projects relying on ICU would like a fast `IndexOf` that does require caching a searcher object.",
                                           "updatedAt":  "2020-09-13T09:45:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTgwNjEwNg==",
                                           "createdAt":  "2020-09-14T04:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@tarekgh I made simple test for PowerShell string comparisons (in Russian locale).  I see a huge regression after 5.0-Preview.7 but it is still significant better than 3.1.6.\r\n\r\nI hope .Net and PowerShell teams will discuss this and make more reliable tests.\r\n/cc @SteveL-MSFT @daxian-dbw \r\n\r\n| PowerShell version | Duration, sec | .Net version\r\n|-|-|-|\r\n| PowerShell-7.0.3 | 13.8 | 3.1.6\r\n| PowerShell-7.1.0-Preview.5 | 5.5 | 5.0-Preview.6\r\n| PowerShell-7.1.0-Preview.6 | 5.5 | 5.0-Preview.7\r\n| PowerShell-7.1.0-Preview.7 | 8.7 | 5.0-Preview.8\r\n\r\nPowerShell test script:\r\n```powershell\r\n$value = (Get-Date).ToString() # Russian locale\r\n$array1 = @()\r\n\r\nfor ($i=0; $i -lt 5000; $i++) {\r\n    $array1 += $value\r\n}\r\n\r\n$value = (Get-Date).ToString()\r\n$array2 = @()\r\n\r\nfor ($i=0; $i -lt 5000; $i++) {\r\n    $array2 += $value\r\n}\r\n\r\nMeasure-Command { Compare-Object -ReferenceObject $array1 -DifferenceObject $array2 }\r\n```",
                                           "updatedAt":  "2020-09-14T04:40:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE3MjMzNw==",
                                           "createdAt":  "2020-09-14T16:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@iSazonov are you running on Linux or Windows? On Windows it is expected you see some regression with the Linguistic scenarios because switching to use ICU there. As mentioned before you still have the option to switch back to use NLS if needed. We have addressed all ordinal scenarios though. Also, there were a lot of work going on during these previews but at least we still significantly faster than 3.1 which is a good news.",
                                           "updatedAt":  "2020-09-14T16:34:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE3OTY4MA==",
                                           "createdAt":  "2020-09-14T16:48:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@tarekgh It was Windows only test. ",
                                           "updatedAt":  "2020-09-14T16:48:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE4Mzk1NA==",
                                           "createdAt":  "2020-09-14T16:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am surprised now this is faster than 3.1 then. are you sure of your results? could you send me a couple of string cases you used in the comparison using the Russian culture? ",
                                           "updatedAt":  "2020-09-14T16:56:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjIzODY0NQ==",
                                           "createdAt":  "2020-09-14T18:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e I am surprised now this is faster than 3.1 then. are you sure of your results?\r\n\r\nI measured _PowerShell_ not .Net - I mean perhaps there were other optimizations in PowerShell and .Net that could affect the result.\r\nWe could use PerfView to investigate in depth.\r\n\r\nSample string from my tests:\r\n```\r\n14 сентября 2020 г. 23:25:22\r\n```\r\nThe second test line only differs in seconds.\r\n",
                                           "updatedAt":  "2020-09-14T18:38:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjI1MDQ5Mw==",
                                           "createdAt":  "2020-09-14T19:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRPcWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-09-23T08:35:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@GSPP I don\u0027t think we have extensively studied what contributions we can make here. Regardless, ICU and NLS have different operational philosophies when it comes to this, and ICU\u0027s consumers are absolutely used to caching the search object. The canonical scenario for linguistic searching in ICU is for a UI-based application. You open a browser window or word document, enter your search term, then see all matches highlighted in the document and use Next / Previous to iterate through them.\r\n\r\nIn our case, we case about non-linguistic (ordinal) searching. If this were to be contributed back to ICU it would be in the form of a brand new API. Furthermore, the type of ordinal comparison we\u0027re using here (conversion to uppercase) is different than Unicode\u0027s own recommendations (conversion to case-fold). All of this is to say that I\u0027m not hopeful of a specialty API like the one .NET is using making its way through.",
                                           "updatedAt":  "2020-09-14T19:01:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjI2MDcyNw==",
                                           "createdAt":  "2020-09-14T19:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRiQ5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2020-09-14T19:29:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2020-09-25T11:48:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@GrabYourPitchforks @GSPP just to let you know, I am looking at the linguistic IndexOf scenario and experimenting some changes that may help in the perf (around internally caching some ICU objects too). no promise yet as I am still in the middle of looking at that. \r\n\r\nAlso, we are following up with Windows team as they are trying to do some perf enhancement on ICU too. It is another win situation. \r\n\r\nLast, as ICU is open source project, we have contributed some changes before which means it is possible we\u0027ll contribute more if it is really required to enhance .NET scenarios. but in general this something we may look at for 6.0 version and beyond. ",
                                           "updatedAt":  "2020-09-14T19:20:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjI4MDk1Mw==",
                                           "createdAt":  "2020-09-14T19:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQbXXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-09-15T12:05:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@iSazonov I tried your scenario (using .NET without PS) and I am seeing the similar results as you have reported it. This is very interesting. I am going to look more on the details to understand what is going on.",
                                           "updatedAt":  "2020-09-14T19:59:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjMzMDM4Ng==",
                                           "createdAt":  "2020-09-14T21:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have collected the ETW benchmark data and now I am seeing the logical results. I am seeing 3.1 is faster (as expected). dotnet benchmark somehow is reporting wrong numbers or there is something causing noises there. here is the ETW data:\r\n\r\n## 3.1 ##\r\n\r\n```\r\nName                                                         \tInc %\t      Inc\tExc %\t Exc\r\n system.private.corelib.il!CompareInfo.CompareString         \t 95.7\t   42,349\t  2.0\t 893\r\n+ kernel32!CompareStringExStub                               \t 92.6\t   40,960\t  0.5\t 202\r\n|+ kernelbase!SortCompareString                              \t 92.1\t   40,754\t  2.2\t 962\r\n|+ ntoskrnl!?                                                \t  0.0\t        4\t  0.0\t   3\r\n+ coreclr!?                                                  \t  0.6\t      253\t  0.6\t 253\r\n+ system.private.corelib.il!CompareInfo.GetNativeCompareFlags\t  0.5\t      219\t  0.5\t 219\r\n+ ?!?                                                        \t  0.0\t       14\t  0.0\t  14\r\n+ ntoskrnl!?                                                 \t  0.0\t       10\t  0.0\t   8\r\n```\r\n\r\n## 5.0 ##\r\n\r\n```\r\nName                                                     \tInc %\t      Inc\tExc %\t   Exc\r\n System.Private.CoreLib.il!CompareInfo.Compare           \t 91.0\t   66,116\t  2.6\t 1,888\r\n+ System.Private.CoreLib.il!CompareInfo.Compare          \t 88.3\t   64,159\t  3.3\t 2,405\r\n|+ System.Private.CoreLib.il!CompareInfo.IcuCompareString\t 84.8\t   61,633\t  5.4\t 3,941\r\n||+ coreclr!GlobalizationNative_CompareString            \t 74.7\t   54,287\t  5.0\t 3,666\r\n|||+ icu!ucol_strcoll                                    \t 66.5\t   48,311\t  4.9\t 3,530\r\n|||+ ntdll!?                                             \t  1.6\t    1,188\t  1.6\t 1,182\r\n|||+ coreclr!GetCollatorFromSortHandle                   \t  1.5\t    1,105\t  1.5\t 1,081\r\n|||+ ntoskrnl!?                                          \t  0.0\t       16\t  0.0\t     8\r\n|||+ nvlddmkm!?                                          \t  0.0\t        1\t  0.0\t     1\r\n||+ coreclr!JIT_InitPInvokeFrame                         \t  4.6\t    3,370\t  4.6\t 3,353\r\n||+ ntoskrnl!?                                           \t  0.0\t       24\t  0.0\t     9\r\n||+ coreclr!JIT_PInvokeBegin                             \t  0.0\t        7\t  0.0\t     7\r\n||+ coreclr!JIT_PInvokeEnd                               \t  0.0\t        4\t  0.0\t     4\r\n```\r\n\r\nAnd here is the results (which I believe is wrongly reported from dotnet benchmark) from exact same test. \r\n\r\n## DefaultJob : .NET Core 5.0.0 (CoreCLR 5.0.20.45114, CoreFX 5.0.20.45114), X64 RyuJIT ##\r\n\r\n\r\n|        Method |     Mean |   Error |   StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |---------:|--------:|---------:|------:|------:|------:|----------:|\r\n| StringCompare | 141.8 ns | 3.52 ns | 10.39 ns |     - |     - |     - |         - |\r\n\r\n\r\n\r\n## DefaultJob : .NET Core 3.1.7 (CoreCLR 4.700.20.36602, CoreFX 4.700.20.37001), X64 RyuJIT ##\r\n\r\n|        Method |     Mean |    Error |   StdDev | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------- |---------:|---------:|---------:|------:|------:|------:|----------:|\r\n| StringCompare | 705.3 ns | 14.09 ns | 35.86 ns |     - |     - |     - |         - |\r\n\r\nand here is the method code I used:\r\n\r\n```C#\r\n        private static CultureInfo s_culture = CultureInfo.GetCultureInfo(\"ru-RU\");;\r\n        private static string s_string1 = \"14 сентября 2020 г. 23:25:22\";\r\n        private static string s_string2 = \"14 сентября 2020 г. 23:25:24\";\r\n\r\n        [Benchmark] public int StringCompare() =\u003e String.Compare(s_string1, s_string2, s_culture, CompareOptions.None);\r\n```\r\n\r\n@adamsitnik @DrewScoggins do you have any guess why the perf numbers I am getting from dotnet benchmark tool reported that way which not matching what ETW data reported from the exact same test?",
                                           "updatedAt":  "2020-09-14T21:45:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODU2OTc0MA==",
                                           "createdAt":  "2020-10-14T18:05:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTxN2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2020-10-16T18:21:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@DrewScoggins I have merged today the other optimization work which targeting string search operations (IndexOf/LastIndexOf/IsPrefix/IsSuffix/StartsWith/EndsWith). could you please watch the perf results after running my changes and update this issue? Thanks a lot.",
                                           "updatedAt":  "2020-10-14T18:05:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODYzODUxMQ==",
                                           "createdAt":  "2020-10-14T20:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Yes, I will keep an eye out for these to see if we are seeing any improvement.",
                                           "updatedAt":  "2020-10-14T20:20:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTM1MzAzMg==",
                                           "createdAt":  "2020-10-15T14:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUwSvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-10-15T14:16:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-10-15T14:28:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-10-15T17:40:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2020-10-26T23:27:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tarekgh I\u0027ve run the benchmark that you have provided and got similar results that confirm that 5.0 using ICU is faster in this particular case.\r\n\r\n```ini\r\nBenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1082 (1909/November2018Update/19H2)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=5.0.100-rc.1.20452.10\r\n  [Host]     : .NET Core 3.1.7 (CoreCLR 4.700.20.36602, CoreFX 4.700.20.37001), X64 RyuJIT\r\n  Job-KYODGR : .NET Core 3.1.7 (CoreCLR 4.700.20.36602, CoreFX 4.700.20.37001), X64 RyuJIT\r\n  Job-PPECTW : .NET Core 5.0.0 (CoreCLR 5.0.20.45114, CoreFX 5.0.20.45114), X64 RyuJIT\r\n```\r\n\r\n|        Method |        Job |       Runtime |     Toolchain |      Mean |    Error |   StdDev |    Median | Ratio |\r\n|-------------- |----------- |-------------- |-------------- |----------:|---------:|---------:|----------:|------:|\r\n| StringCompare | Job-KYODGR | .NET Core 3.1 | netcoreapp3.1 | 377.30 ns | 4.741 ns | 4.435 ns | 376.14 ns |  1.00 |\r\n| StringCompare | Job-PPECTW | .NET Core 5.0 | netcoreapp5.0 |  68.72 ns | 1.342 ns | 3.055 ns |  67.42 ns |  0.19 |\r\n\r\nTo compare apples to apples I\u0027ve set the invocation count (the number of benchmark invocations per iteration) to the same number and filtered the ETW trace file to the last benchmark iteration ([description of the mentioned filtering](https://adamsitnik.com/ETW-Profiler/#using-perfview-to-work-with-trace-files)):\r\n\r\n```cmd\r\n--invocationCount 2097152 --profiler ETW\r\n```\r\n\r\nFor 3.1 a single iteration (2097152 invocations) takes 791ms:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/96140432-36476f80-0f00-11eb-8933-25c1d422b986.png)\r\n\r\nFor 5.0 a single iteration (2097152 invocations) takes 147ms:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/96140865-b241b780-0f00-11eb-974d-30aebc15cb78.png)\r\n\r\n\r\n \r\n\r\n",
                                           "updatedAt":  "2020-10-15T14:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTM1ODAzMQ==",
                                           "createdAt":  "2020-10-15T14:19:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik the scenario you mentioned is the string compare which is different than string search. I was expecting my recent changes affect the string search and not the string compare. maybe I am missing something here.",
                                           "updatedAt":  "2020-10-15T14:19:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTM2NTcyOQ==",
                                           "createdAt":  "2020-10-15T14:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e the scenario you mentioned\r\n\r\n@tarekgh I have used the scenario that you have provided (but it was a long time ago - on the 14th of September)\r\n\r\n\u003e maybe I am missing something here.\r\n\r\nmost probably in this particular scenario ICU is simply faster",
                                           "updatedAt":  "2020-10-15T14:31:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTQ3NzIwMQ==",
                                           "createdAt":  "2020-10-15T17:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I have used the scenario that you have provided (but it was a long time ago - on the 14th of September)\r\n\r\nWhat I mentioned in Sept 14th was using 3.1 on Windows which is using NLS and not ICU. I am expecting 3.1 still be faster. ",
                                           "updatedAt":  "2020-10-15T17:29:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTQ3ODQwMg==",
                                           "createdAt":  "2020-10-15T17:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e  I am expecting 3.1 still be faster.\r\n\r\nSo I\u0027ve verified that 5.0 is faster for this particular case.",
                                           "updatedAt":  "2020-10-15T17:31:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDM1OTk1Mw==",
                                           "createdAt":  "2020-10-16T18:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBW1m6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-10-16T18:28:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-10-16T18:28:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-10-16T18:45:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-10-16T21:48:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-10-16T21:48:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-10-16T21:48:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-10-19T18:21:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2020-10-26T23:27:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-11-16T01:54:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "After the most recent check in (https://github.com/dotnet/runtime/pull/43065) that Tarek made, we are seeing some good improvements in the lab.\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.18362\r\nChanges | [diff](https://github.com/dotnet/runtime/compare/271f008f0fe8168dacac45cd3ce1952e6e32bfbb...722b8a660e7e0c59419196be102784244883ff08)\r\n\r\n\r\n### Regressions in System.Globalization.Tests.StringSearch\r\n\r\nBenchmark | Baseline | Test | Test/Base | Modality | Baseline Outlier | Baseline ETL | Comapre ETL\r\n-- | -- | -- | -- | -- | -- | -- | --\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(en-US%2c%20None%2c%20True)).html\u003e) | 13.06 μs | 9.15 μs | 0.70 |  | True\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(%2c%20None%2c%20True)).html\u003e) | 18.87 μs | 15.01 μs | 0.80 |  | True\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(pl-PL%2c%20None%2c%20False)).html\u003e) | 20.55 μs | 16.44 μs | 0.80 |  | True\r\n[IsSuffix_SecondHalf](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 22.05 μs | 17.57 μs | 0.80 |  | False\r\n[IsPrefix_FirstHalf](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 19.68 μs | 15.59 μs | 0.79 |  | False\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 12.96 μs | 9.05 μs | 0.70 |  | True\r\n[IsPrefix_DifferentFirstChar](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 34.04 μs | 29.81 μs | 0.88 |  | True\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(pl-PL%2c%20None%2c%20False)).html\u003e) | 16.56 μs | 12.95 μs | 0.78 |  | True\r\n[IsSuffix_DifferentLastChar](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 39.49 μs | 34.97 μs | 0.89 |  | True\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(%2c%20IgnoreCase%2c%20True)).html\u003e) | 13.19 μs | 9.30 μs | 0.70 |  | True\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(en-US%2c%20IgnoreCase%2c%20True)).html\u003e) | 19.46 μs | 15.26 μs | 0.78 |  | True\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(%2c%20None%2c%20True)).html\u003e) | 12.83 μs | 9.16 μs | 0.71 |  | False\r\n[IndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options%3a%20(en-US%2c%20IgnoreCase%2c%20True)).html\u003e) | 13.19 μs | 9.27 μs | 0.70 |  | True\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(en-US%2c%20None%2c%20True)).html\u003e) | 19.20 μs | 14.99 μs | 0.78 |  | False\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(%2c%20IgnoreCase%2c%20True)).html\u003e) | 19.41 μs | 15.28 μs | 0.79 |  | False\r\n[LastIndexOf_Word_NotFound](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/master_x64_Windows 10.0.18362/System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options%3a%20(en-US%2c%20IgnoreSymbols%2c%20False)).html\u003e) | 18.57 μs | 14.01 μs | 0.75 |  | True\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_6.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_7.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_8.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_9.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_10.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_11.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_12.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_13.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_14.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_15.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch_16.png\u003e)\r\n[Historical Data in Reporting System](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/10_16_2020/refs/heads/master_x64_Windows%2010.0.18362/System.Globalization.Tests.StringSearch.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f netcoreapp5.0 --filter \u0027System.Globalization.Tests.StringSearch*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Histogram\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, None, True))\r\n\r\n```log\r\n[ 8961.400 ;  9663.790) | @@@@@@@@@@@@@@\r\n[ 9663.790 ; 10366.179) | \r\n[10366.179 ; 11068.568) | \r\n[11068.568 ; 11770.957) | \r\n[11770.957 ; 12473.347) | \r\n[12473.347 ; 12726.514) | \r\n[12726.514 ; 13428.903) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[13428.903 ; 14213.285) | @@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, None, True))\r\n\r\n```log\r\n[14612.596 ; 15349.017) | @@@@@@@@@@@@@@\r\n[15349.017 ; 16056.794) | \r\n[16056.794 ; 16764.571) | \r\n[16764.571 ; 17472.348) | \r\n[17472.348 ; 18217.629) | \r\n[18217.629 ; 18831.044) | @\r\n[18831.044 ; 19538.820) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[19538.820 ; 20122.311) | @@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (pl-PL, None, False))\r\n\r\n```log\r\n[16251.652 ; 16961.645) | @@@@@@@@@@@@@@\r\n[16961.645 ; 17671.638) | \r\n[17671.638 ; 18381.630) | \r\n[18381.630 ; 19091.623) | \r\n[19091.623 ; 19801.616) | \r\n[19801.616 ; 20174.942) | \r\n[20174.942 ; 20884.934) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[20884.934 ; 21604.903) | @@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[17072.752 ; 17964.482) | @@@@@@@@@@@@@@\r\n[17964.482 ; 18779.784) | \r\n[18779.784 ; 19595.085) | \r\n[19595.085 ; 20410.387) | \r\n[20410.387 ; 21514.014) | \r\n[21514.014 ; 22329.316) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[22329.316 ; 23330.116) | @@@@@@@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[15229.897 ; 15975.829) | @@@@@@@@@@@@@@\r\n[15975.829 ; 16721.761) | \r\n[16721.761 ; 17467.693) | \r\n[17467.693 ; 18213.625) | \r\n[18213.625 ; 18959.557) | \r\n[18959.557 ; 19302.824) | \r\n[19302.824 ; 20048.756) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[20048.756 ; 20855.951) | @@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[ 8797.707 ;  9499.196) | @@@@@@@@@@@@@@\r\n[ 9499.196 ; 10200.684) | \r\n[10200.684 ; 10902.172) | \r\n[10902.172 ; 11603.661) | \r\n[11603.661 ; 12305.149) | \r\n[12305.149 ; 12684.041) | \r\n[12684.041 ; 13385.530) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[13385.530 ; 14220.333) | @@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[29477.421 ; 30235.312) | @@@@@@@@@@@@@@\r\n[30235.312 ; 30993.203) | \r\n[30993.203 ; 31751.095) | \r\n[31751.095 ; 32508.986) | \r\n[32508.986 ; 33769.724) | \r\n[33769.724 ; 35223.347) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (pl-PL, None, False))\r\n\r\n```log\r\n[12609.085 ; 13265.894) | @@@@@@@@@@@@@\r\n[13265.894 ; 13768.769) | @\r\n[13768.769 ; 14425.579) | \r\n[14425.579 ; 15082.389) | \r\n[15082.389 ; 15739.199) | \r\n[15739.199 ; 16287.555) | \r\n[16287.555 ; 16944.365) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[16944.365 ; 17648.441) | @@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[34563.746 ; 35375.219) | @@@@@@@@@@@@@@\r\n[35375.219 ; 36186.692) | \r\n[36186.692 ; 36998.165) | \r\n[36998.165 ; 37809.638) | \r\n[37809.638 ; 39015.124) | @\r\n[39015.124 ; 39826.597) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[39826.597 ; 40796.807) | @@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, IgnoreCase, True))\r\n\r\n```log\r\n[ 8890.906 ;  9625.004) | @@@@@@@@@@@@@@\r\n[ 9625.004 ; 10333.195) | \r\n[10333.195 ; 11041.386) | \r\n[11041.386 ; 11749.577) | \r\n[11749.577 ; 12457.769) | \r\n[12457.769 ; 13023.837) | @\r\n[13023.837 ; 13732.028) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[13732.028 ; 14434.832) | @@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-US, IgnoreCase, True))\r\n\r\n```log\r\n[14805.514 ; 15554.325) | @@@@@@@@@@@@@@\r\n[15554.325 ; 16303.136) | \r\n[16303.136 ; 17051.948) | \r\n[17051.948 ; 17800.759) | \r\n[17800.759 ; 18662.288) | \r\n[18662.288 ; 19285.851) | @@\r\n[19285.851 ; 20034.662) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[20034.662 ; 20599.685) | @@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, None, True))\r\n\r\n```log\r\n[ 9024.075 ;  9674.928) | @@@@@@@@@@@@@@\r\n[ 9674.928 ; 10325.780) | \r\n[10325.780 ; 10976.632) | \r\n[10976.632 ; 11627.484) | \r\n[11627.484 ; 12278.336) | \r\n[12278.336 ; 12637.952) | \r\n[12637.952 ; 13288.804) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[13288.804 ; 13899.140) | @@\r\n```\r\n#### System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, IgnoreCase, True))\r\n\r\n```log\r\n[ 8882.220 ;  9650.252) | @@@@@@@@@@@@@@\r\n[ 9650.252 ; 10352.069) | \r\n[10352.069 ; 11053.887) | \r\n[11053.887 ; 11755.704) | \r\n[11755.704 ; 12457.521) | \r\n[12457.521 ; 12812.048) | \r\n[12812.048 ; 13513.865) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[13513.865 ; 14286.340) | @@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-US, None, True))\r\n\r\n```log\r\n[14587.344 ; 15366.223) | @@@@@@@@@@@@@@\r\n[15366.223 ; 16127.006) | \r\n[16127.006 ; 16887.789) | \r\n[16887.789 ; 17648.572) | \r\n[17648.572 ; 18409.355) | \r\n[18409.355 ; 18787.408) | \r\n[18787.408 ; 19548.191) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[19548.191 ; 20346.411) | @@@@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, IgnoreCase, True))\r\n\r\n```log\r\n[14863.073 ; 15658.737) | @@@@@@@@@@@@@@\r\n[15658.737 ; 16397.914) | \r\n[16397.914 ; 17137.092) | \r\n[17137.092 ; 17876.269) | \r\n[17876.269 ; 18615.446) | \r\n[18615.446 ; 18981.118) | \r\n[18981.118 ; 19720.295) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[19720.295 ; 20512.543) | @@@@\r\n```\r\n#### System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-US, IgnoreSymbols, False))\r\n\r\n```log\r\n[13785.427 ; 14537.175) | @@@@@@@@@@@@@@\r\n[14537.175 ; 15288.923) | \r\n[15288.923 ; 16040.671) | \r\n[16040.671 ; 16792.419) | \r\n[16792.419 ; 17544.167) | \r\n[17544.167 ; 18045.402) | \r\n[18045.402 ; 18964.029) | @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n[18964.029 ; 19744.608) | @@\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2020-10-16T18:15:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDQxMTk3Ng==",
                                           "createdAt":  "2020-10-16T18:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "thanks @DrewScoggins for the updates.",
                                           "updatedAt":  "2020-10-16T18:45:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDM0MDI1Mw==",
                                           "createdAt":  "2020-11-09T23:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "With #43065 that provided some really nice improvements, we are getting even closer to contributing to ICU itself (as we run out of ideas on our side).\r\n\r\nWhile reading the ICU source code I got the impression that it was not written with performance in mind (very few hacks, tricks, and comments explaining them). But I assumed that the code is not doing that because ICU is using PGO that does this for ICU.\r\n\r\nBut what if ICU is not using PGO? Perhaps this could be our first perf contribution?\r\n\r\nI\u0027ve searched ICU repo and bug tracker for \"PGO\" and did not find anything:\r\nhttps://github.com/unicode-org/icu/search?q=PGO\r\nhttps://unicode-org.atlassian.net/issues/?jql=text%20~%20%22PGO%22\r\n\r\nJust to give you some numbers: when Chromium started using Microsoft\u0027s PGO they got +15% improvement for \"new tab page load time\" and \"startup time\": https://blog.chromium.org/2016/10/making-chrome-on-windows-faster-with-pgo.html\r\n\r\n@tarekgh @GrabYourPitchforks what are your thoughts on this?\r\n",
                                           "updatedAt":  "2020-11-09T23:30:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDM0Mzk1MA==",
                                           "createdAt":  "2020-11-09T23:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "cc @brianrob ",
                                           "updatedAt":  "2020-11-09T23:28:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDM1NDk5OA==",
                                           "createdAt":  "2020-11-09T23:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWO10w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-11-10T03:42:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "For who don\u0027t know what is [PGO](https://en.wikipedia.org/wiki/Profile-guided_optimization), it is Profile-guided optimization.",
                                           "updatedAt":  "2020-11-09T23:54:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDM1NTY0Mg==",
                                           "createdAt":  "2020-11-09T23:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "also cc @lewing (although I guess his focus is just size)",
                                           "updatedAt":  "2020-11-09T23:56:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzI0NDMzOQ==",
                                           "createdAt":  "2020-11-14T18:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "For information only. PowerShell 7.1 was released on .Net 5.0 and we already got performance feedback https://github.com/PowerShell/PowerShell/issues/14087",
                                           "updatedAt":  "2020-11-14T18:07:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzYxNzkwOA==",
                                           "createdAt":  "2020-11-15T18:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@iSazonov did you have chance to investigate more and know where is the regression is coming from? \r\n\r\nAlso, could you please measure the same scenario on .NET 6.0? we have some more optimization there it may help?",
                                           "updatedAt":  "2020-11-15T18:52:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzY1NTMyMQ==",
                                           "createdAt":  "2020-11-15T23:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@danmosemsft we care about performance a lot too, we just had disproportionately large (small?) size needs here.  @tarekgh great work on all this.\r\n\r\nPGO of the unmanaged code looks complicated in our case because we\u0027d need a way for our compiler/toolchain to consume the the profile.",
                                           "updatedAt":  "2020-11-16T14:39:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzc0MDY0Ng==",
                                           "createdAt":  "2020-11-16T05:19:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e @iSazonov did you have chance to investigate more and know where is the regression is coming from?\r\n\r\n@tarekgh I believe it is an expected regression after moving to ICU. I shared the feedback to demonstrate what users can see in real scenarios. \r\n\r\n\u003e Also, could you please measure the same scenario on .NET 6.0? we have some more optimization there it may help?\r\n\r\nPowerShell repository is still on .Net 5.0. I guess PowerShell MSFT team will move to .Net 6.0 after .Net 6 Preview1 will be available to them. Then we could compare.\r\n\r\nIf users see such a noticeable regression, I would expect your latest improvements to be ported to .Net 5.0.\r\n\r\nAs for PGO, I think this could be a good step towards reaping benefits quickly with minimal cost. I assume you already have these statistics from MSFT services. But in general it is obvious which functions are the most used.\r\n\r\nMore important is how this performance is achieved. I see that there is a desire to make Runtime more compact. This is important for scenarios like WASM. But in other cases, this is not critical. If hardware intrinsics use double and triple implementations, why not do the same for strings? - a compact but slower implementation for WASM and etc. and a faster but more capacious implementation for other scenarios - it is not problem for PowerShell script execution to have additional 10 buffers by 20 Kb or even by 1 Mb.\r\nI can speculate that no one will understand why the Binq service is 20% slower just for the sake of WASM running in the browser. Based on the same test set WASM could be get more compact runtime by means of conditional compiling to use only compact implementations.\r\n",
                                           "updatedAt":  "2020-11-16T05:19:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODA5NjQ1MA==",
                                           "createdAt":  "2020-11-16T14:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I believe it is an expected regression after moving to ICU. I shared the feedback to demonstrate what users can see in real scenarios.\r\n\r\n@iSazonov I am still unclear what exactly regressed in the user scenario? did you investigate PowerShell and looked where the regression is happening? what calls to .NET is regressed? ",
                                           "updatedAt":  "2020-11-16T14:27:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODE3MDI0NQ==",
                                           "createdAt":  "2020-11-16T16:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "the referenced  issue (https://github.com/PowerShell/PowerShell/issues/14087) mentions:\r\n\r\n\u003e (...) on many lines of text to remove lines matching a criteria in a 85MB text file\r\n\r\nSo it could be `string.IndexOf`, `string.Contains`, `string.Remove`, `string.Replace` or even `RegEx`. Let\u0027s wait for the user to provide more details\r\n\r\n\u003e A script of mine that reliably took 26 or 27 minutes to run in 7.0 now takes 40 minutes in 7.1.\r\n\r\nIt should take less than a minute to handle 85 MB text file. We might be able to provide some recommendations as well.\r\n",
                                           "updatedAt":  "2020-11-16T16:25:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTA1NTQzOQ==",
                                           "createdAt":  "2020-11-17T16:47:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve looked into the PowerShell trace files and it looks like the regression is not related to ICU, but `Regex.Replace` (cc @stephentoub). For more details please see https://github.com/PowerShell/PowerShell/issues/14087#issuecomment-729053865\r\n\r\nWe should expect a new issue to be created soon by PowerShell contributors (https://github.com/PowerShell/PowerShell/issues/14087#issuecomment-729040556)\r\n",
                                           "updatedAt":  "2020-11-17T16:47:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDYxMDM5Nw==",
                                           "createdAt":  "2020-11-19T20:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFvoBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-11-20T03:31:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2020-11-20T18:33:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2020-11-20T18:44:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-11-20T18:45:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2021-12-08T14:41:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "To tell, @jefgen thankfully is in doing some optimization work from the ICU side\r\n\r\nhttps://github.com/unicode-org/icu/pull/1471\r\nhttps://github.com/unicode-org/icu/pull/1473\r\n\r\nYou can see the perf numbers in the ticket https://unicode-org.atlassian.net/browse/ICU-21388",
                                           "updatedAt":  "2020-11-19T20:12:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTE1MDg4Ng==",
                                           "createdAt":  "2020-11-20T12:48:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXiHFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2020-11-20T18:33:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@jefgen very nice improvements! did Windows Team consider using PGO (Profile Guided Optimization) to improve ICU perf?",
                                           "updatedAt":  "2020-11-20T12:48:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTMzOTY1MQ==",
                                           "createdAt":  "2020-11-20T18:33:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jefgen",
                                           "body":  "\u003e @jefgen very nice improvements!\r\n\r\nThanks!\r\nFWIW, I had a few more ideas that might help to improve the performance more, but I haven\u0027t had time to investigate them as of yet.\r\n\r\n\u003e did Windows Team consider using PGO (Profile Guided Optimization) to improve ICU perf?\r\n\r\nYes the version of ICU that ships as part of the OS with Windows (`icu.dll`) is indeed using PGO. However, IIUC, I think that the \"training data\" used for it is from scenarios for the old/legacy Edge browser. I wonder if it might be possible to somehow use training data from .NET Core instead? (I\u0027m not sure if that is possible though, and/or how it might work).\r\n\r\nThat said, the pre-built Windows binary downloads for the public ICU don\u0027t use PGO though.\r\nThe Nuget package that our team produces for ICU (with data changes for Microsoft products) also doesn\u0027t currently use PGO either. (Both of these would/could be used for the .NET app-local ICU feature).\r\n\r\nTBH, I\u0027m not super familiar with PGO though, so I wonder if it might be good to sync up to discuss more sometime perhaps?.\r\n",
                                           "updatedAt":  "2020-11-20T18:33:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTM4MzY5OA==",
                                           "createdAt":  "2020-11-29T12:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "I measured PowerShell startup scenario. Command line is `pwsh -c exit`. PowerShell processes args[] and for the command line it calls _once_ `string.ToLowerInvariant()` for args[0] that is \"c\". This takes **26 ms**. I guess it is slow ICU initialization.\r\nSpeedScope file:\r\n[PerfViewData-7.2-Startup-AI-DT.speedscope.json.zip](https://github.com/dotnet/runtime/files/5612110/PerfViewData-7.2-Startup-AI-DT.speedscope.json.zip)\r\n![image](https://user-images.githubusercontent.com/22290914/100541364-4d021580-3265-11eb-8c5a-7fdf35a5f544.png)\r\n\r\n\r\nUpdate: I found another slow ICU initialization in the scenario - we mistakenly called string.StartsWith() with a default StringComparison.CurrentCulture - it calls slow `icu!ucol_openElements`. I replaced with with Ordinal but \r\nthe fact remains - ICU is initialized too slow for PowerSHell startup scenario.\r\n",
                                           "updatedAt":  "2020-12-01T06:19:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzU0NzU4MA==",
                                           "createdAt":  "2021-01-10T21:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "To update the current status I have done the latest measurement comparing the 3.1 (the Base) against 6.0 (the diff). \r\n\r\nUsually I experience some instability in the results of IsPrefix and IsSuffix on my machine so maybe the numbers of these tests are not accurate.\r\n\r\nConsidering 6.0 faster in some scenarios and slower in other scenarios, we may need to look more at the slower scenarios. But in general, I think we are in much better state even we can do more.\r\n\r\n| Slower                                                                           | diff/base | Base Median (ns) | Diff Median (ns) | Modality|\r\n| -------------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| -------- |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |    355.35 |            63.98 |         22735.21 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (,  |     11.89 |            60.06 |           714.32 |         |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: ja)     |     11.81 |           435.96 |          5150.00 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (,  |     11.59 |            59.34 |           687.94 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |     10.59 |            71.06 |           752.27 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, Igno |      9.79 |          1230.14 |         12044.71 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      9.58 |            71.05 |           680.59 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"?\", value: \"?\", comparisonType: |      9.35 |            89.84 |           839.52 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (pl |      6.92 |            97.22 |           672.96 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      4.77 |          6048.56 |         28822.60 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      3.97 |          3387.45 |         13432.09 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ign |      3.85 |          3875.09 |         14903.18 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, Ig |      3.80 |          3425.80 |         13008.36 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      3.79 |          3406.47 |         12902.87 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, No |      3.79 |          3375.25 |         12779.77 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (, IgnoreCas |      3.26 |          1225.06 |          3989.05 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      3.25 |          3735.02 |         12154.61 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (, None, Tru |      3.20 |          1231.01 |          3936.81 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, Igno |      3.20 |          1249.21 |          3991.98 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, None |      3.17 |          1246.25 |          3944.60 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (, IgnoreCa |      2.19 |          2962.57 |          6493.42 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (, None, Tr |      2.18 |          2985.69 |          6514.83 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Non |      2.17 |          2994.42 |          6483.37 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ign |      2.16 |          3016.11 |          6524.22 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      2.06 |          9793.37 |         20199.81 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      2.01 |             5.04 |            10.12 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (pl-PL, None |      1.93 |          2702.20 |          5217.48 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.74 |          3055.79 |          5309.93 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.72 |          3064.04 |          5259.70 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (pl-P |      1.67 |          8432.65 |         14106.59 | several?|\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, I |      1.63 |          3512.51 |          5714.36 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (, None, Fal |      1.43 |           143.80 |           205.91 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.42 |          3804.85 |          5415.19 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (, None, Fa |      1.41 |           183.05 |           257.96 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.39 |          3860.38 |          5362.28 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, None |      1.38 |           150.76 |           207.55 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      1.36 |             6.29 |             8.53 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, I |      1.35 |          4352.17 |          5872.62 | several?|\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, Ignore |      1.33 |          4349.01 |          5804.45 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Non |      1.33 |           192.87 |           256.04 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, N |      1.31 |          4342.61 |          5683.86 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, None,  |      1.30 |          4424.18 |          5730.22 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.18 |            12.26 |            14.51 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 128, Options: (, None)) |      1.18 |          1592.80 |          1882.03 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 128, Options: (en-US, N |      1.15 |          1637.91 |          1881.80 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      1.11 |             8.05 |             8.98 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (, IgnoreCa |      1.08 |           214.00 |           231.22 |         |\r\n\r\n| Faster                                                                           | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| -------------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| -------- |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |    327.82 |          5636.99 |            17.20 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (pl |     21.58 |         21715.82 |          1006.19 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (pl- |     17.60 |         17759.59 |          1009.28 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ign |     11.52 |          2976.54 |           258.40 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, I |      9.97 |          4352.38 |           436.54 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      7.90 |          3339.68 |           422.59 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, Igno |      5.94 |          1227.92 |           206.88 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (, N |      5.76 |          6038.00 |          1048.36 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      5.70 |          6012.40 |          1055.24 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (, I |      5.66 |          6028.64 |          1065.38 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      5.31 |          6000.28 |          1130.70 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      3.97 |         10432.14 |          2630.57 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      3.97 |            64.39 |            16.24 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      3.88 |            64.89 |            16.73 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      3.27 |            53.30 |            16.32 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      3.18 |            51.48 |            16.19 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en |      3.10 |            51.88 |            16.72 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (, N |      2.59 |            43.52 |            16.79 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (,  |      2.59 |            41.51 |            16.04 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (, I |      2.58 |            43.56 |            16.89 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (,  |      2.57 |            43.39 |            16.87 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"string1\", value: \"string2\", com |      2.48 |            76.93 |            30.99 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      2.38 |           108.67 |            45.67 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"foobardzsdzs\", value: \"rddzs\",  |      2.32 |            86.74 |            37.46 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      2.18 |            78.59 |            36.06 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"AAAAA5AAAA\", value: \"5\", compar |      2.11 |            63.04 |            29.82 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"ABCDE\", value: \"c\", comparisonT |      2.07 |            53.78 |            25.93 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      2.07 |           878.20 |           423.61 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, No |      2.07 |           873.42 |           422.79 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      2.01 |          1082.01 |           539.23 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (, Ig |      2.00 |          1090.20 |           544.92 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"StrIng\", value: \"string\", compa |      1.98 |            43.01 |            21.69 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, None,  |      1.81 |           771.12 |           426.00 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, N |      1.79 |           770.64 |           431.25 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, Igno |      1.77 |           274.01 |           155.07 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"More Test\u0027s\", value: \"Tests\", c |      1.75 |            56.81 |            32.51 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      1.74 |            62.12 |            35.63 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"??????????????????????????????? |      1.71 |            23.46 |            13.70 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (, IgnoreCas |      1.68 |           263.07 |           156.53 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      1.65 |          1234.22 |           747.17 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, O |      1.65 |           827.37 |           501.93 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"Hello Worldbbbbbbbbbbbbbbcbbbbb |      1.61 |            21.75 |            13.49 |         |\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      1.60 |           884.82 |           553.21 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA |      1.56 |           280.66 |           179.49 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"Hello Worldbbbbbbbbbbbbbbbbbbbb |      1.54 |            42.92 |            27.95 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 131072, Options: (, Ign |      1.52 |       2208814.73 |       1456858.52 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      1.51 |           173.44 |           114.64 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ord |      1.51 |            91.77 |            60.81 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 131072, Options: (en-US |      1.50 |       2185948.21 |       1458638.64 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"Hello Worldbbbbbbbbbbbbbbbbbbbb |      1.45 |            26.75 |            18.43 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (, Ignore |      1.42 |           768.69 |           541.95 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 131072, Options: (en-US |      1.39 |       2175261.61 |       1562373.13 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.39 |         22249.54 |         16009.44 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 131072, Options: (, Non |      1.38 |       2154764.29 |       1563706.25 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      1.34 |          1344.50 |          1004.85 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA |      1.33 |            38.36 |            28.86 |         |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: da)     |      1.32 |           507.79 |           385.35 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA |      1.31 |           233.70 |           178.34 |         |\r\n| System.Memory.ReadOnlySpan.IndexOfString(input: \"??????????????????????????????? |      1.31 |            37.81 |            28.91 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      1.31 |          1325.58 |          1014.02 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (,  |      1.30 |          1299.60 |          1003.48 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      1.29 |          1301.69 |          1010.57 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      1.28 |            45.46 |            35.50 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, I |      1.28 |           769.79 |           601.59 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (en |      1.27 |          1285.98 |          1011.62 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same(Count: 1024, Options: (,  |      1.25 |          1261.57 |          1009.91 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_DifferentFirstChar(Count: 1024 |      1.24 |            43.21 |            34.91 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (en-US, O |      1.23 |            38.85 |            31.67 | several?|\r\n| System.Globalization.Tests.StringSearch.LastIndexOf_Word_NotFound(Options: (en-U |      1.22 |           129.74 |           106.45 |         |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: fr)     |      1.21 |           437.41 |           360.07 |         |\r\n| System.Globalization.Tests.StringSearch.IndexOf_Word_NotFound(Options: (pl-PL, N |      1.19 |          9184.99 |          7697.78 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ign |      1.18 |           272.30 |           230.99 |         |\r\n| System.Globalization.Tests.Perf_DateTimeCultureInfo.Parse(culturestring: )       |      1.17 |           425.10 |           363.77 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 128, Options: (en-US, I |      1.13 |          1665.63 |          1470.75 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (pl-PL, Non |      1.13 |          8582.96 |          7609.07 |         |\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 128, Options: (, Ignore |      1.10 |          1652.53 |          1503.49 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_DifferentLastChar(Options: (en- |      1.09 |            17.00 |            15.56 |         |\r\n| System.Globalization.Tests.StringEquality.Compare_Same_Upper(Count: 1024, Option |      1.08 |         10493.72 |          9745.46 |         |\r\n| System.Globalization.Tests.StringSearch.IsSuffix_SecondHalf(Options: (en-US, Ord |      1.07 |            13.45 |            12.63 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_FirstHalf(Options: (en-US, Ordi |      1.06 |            11.74 |            11.10 | several?|\r\n| System.Globalization.Tests.StringHash.GetHashCode(Count: 128, Options: (en-US, O |      1.04 |           101.90 |            97.68 |         |\r\n\r\n",
                                           "updatedAt":  "2021-01-10T21:33:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49TE9V",
                                           "createdAt":  "2022-02-02T22:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "L2",
                                           "body":  "@adamsitnik @tarekgh Friendly ping to see if there\u0027s any progress with resolving these ICU related regressions, since it\u0027s now the default library.\r\n\r\nSeeing this on my end, for example:\r\n\r\n| Slower                                                                                                      | diff/base | NLS - Base Median (ns) | ICU - Diff Median (ns) | Modality|\r\n| ----------------------------------------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en-US, IgnoreSymbols, False)) |    407.94 |            54.02 |         22036.56 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en-US, IgnoreCase, True))     |     12.13 |            57.79 |           700.76 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (, IgnoreCase, True))          |     11.94 |            57.98 |           691.99 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (en-US, None, True))           |     11.79 |            57.83 |           681.78 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (, None, True))                |     11.68 |            58.88 |           688.01 |         |\r\n| System.Globalization.Tests.StringSearch.IsPrefix_DifferentFirstChar(Options: (pl-PL, None, False))          |      8.70 |            79.92 |           695.66 |         |\r\n\r\nThanks",
                                           "updatedAt":  "2022-02-02T22:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49TGIK",
                                           "createdAt":  "2022-02-02T22:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@L2 We are not actively looking at this at the current time for other high-priority work. Using options like IgnoreSymbols is expected to have more cost because it is done with the slow path.  Could you please talk more about your scenario to try to see if there is any workaround for now? ",
                                           "updatedAt":  "2022-02-02T22:25:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CLe-",
                                           "createdAt":  "2022-02-15T20:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "L2",
                                           "body":  "Thanks, @tarekgh . It was mainly due to the difference seen for these benchmarks when comparing the previous NLS library to the now default ICU library. I\u0027ve tried setting DOTNET_SYSTEM_GLOBALIZATION_USENLS and can confirm this gives back the original perf.\r\n\r\nCurrently on my system (win10 x64 with latest updates), the `icu.dll` located in `Windows/System32` reports being version 64.2. Looking over at the ICU github repo, this release is from Apr 17, 2019 (https://github.com/unicode-org/icu/releases?page=3) and I think built with an older MSVC2017 (https://htmlpreview.github.io/?https://github.com/unicode-org/icu/blob/release-64-2/icu4c/readme.html).\r\n\r\nDo you know if there\u0027s any plans to roll out an updated `icu.dll` via windows updates anytime soon?\r\n\r\nThanks",
                                           "updatedAt":  "2022-02-15T20:28:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CNBE",
                                           "createdAt":  "2022-02-15T20:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think Windows 10 should have a higher version of ICU than what you have listed. \r\n\r\n@jefgen could you please comment on @L2 question https://github.com/dotnet/runtime/issues/40942#issuecomment-1040758718?",
                                           "updatedAt":  "2022-02-15T20:33:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CQ4_",
                                           "createdAt":  "2022-02-15T20:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwZv5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "L2",
                                                                               "createdAt":  "2022-02-15T21:52:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidnemeti",
                                                                               "createdAt":  "2024-08-30T09:35:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jefgen",
                                           "body":  "The story is unfortunately a bit complicated...\r\nThe version of ICU that is part of the Windows OneCore base was updated to a newer version, version 68.2. However, Windows 10 is still based on the older OneCore release, so this means that Windows 10 didn\u0027t get the updated version of ICU. The Windows 11 release was built on the newer OneCore bits, so it got the updated version of ICU.\r\n(You can see that the Windows 10 build number is still ~1904x, so the last few releases are all based on the same underlying OneCore bits).\r\n\r\nWhat this means is that Windows 10 is still on ICU version 64.2, while Windows 11 is on ICU version 68.2.\r\n\r\n\u003e roll out an updated icu.dll via windows updates anytime soon?\r\n\r\nI don\u0027t think there are currently any plans to push an updated version of ICU via Windows update at this time.\r\n\r\n\u003e built with an older MSVC2017\r\n\r\nAFAIK, the OS binaries aren\u0027t built using the public compiler. However, I\u0027m not sure off-hand what exact version of the `cl.exe` compiler is used though.",
                                           "updatedAt":  "2022-02-15T20:51:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-CXMk",
                                           "createdAt":  "2022-02-15T21:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCO5XIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2022-02-15T21:23:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "L2",
                                                                               "createdAt":  "2022-02-15T21:27:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2022-02-15T22:18:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-02-16T08:41:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @jefgen for the details. \r\n\r\n@L2 you still have the option to use the [ICU app-local](https://docs.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#app-local-icu) feature to use the latest ICU version if you want. \r\n\r\n```Xml\r\n  \u003cItemGroup\u003e\r\n        \u003cRuntimeHostConfigurationOption Include=\"System.Globalization.AppLocalIcu\" Value=\"68.2.0.6\" /\u003e\r\n        \u003cPackageReference Include=\"Microsoft.ICU.ICU4C.Runtime\" Version=\"68.2.0.6\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```",
                                           "updatedAt":  "2022-02-15T21:23:00Z"
                                       }
                                   ],
                         "totalCount":  69
                     },
        "title":  "List of performance regressions caused by switching to ICU",
        "labels":  [
                       "area-System.Globalization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43897",
        "createdAt":  "2020-10-27T17:29:35Z",
        "number":  43897,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-17T04:31:42Z",
        "body":  "Repro (.NET 5 on ICU):\r\n\r\n```cs\r\nvar ci = CultureInfo.InvariantCulture.CompareInfo;\r\nint idx = ci.IndexOf(\"\\u0600x\", \"x\", CompareOptions.None);\r\nbool isSuffix = ci.IsSuffix(\"\\u0600x\", \"x\", CompareOptions.None);\r\nConsole.WriteLine($\"idx = {idx}, isSuffix = {isSuffix}\");\r\n```\r\n\r\nThis sample prints __`idx = -1, isSuffix = True`__. These return values are inconsistent with respect to each other. If _IsSuffix_ returns true, then _IndexOf_ must return a non-negative value. It\u0027s the contrapositive of the code comment at:\r\n\r\nhttps://github.com/dotnet/runtime/blob/eb187d1250cf65c16442c207ff97da65690afae5/src/libraries/System.Private.CoreLib/src/System/String.Searching.cs#L270-L273",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONS6fUw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQwMzcxNg==",
                                           "createdAt":  "2020-10-27T17:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-27T17:29:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQwNTAxNQ==",
                                           "createdAt":  "2020-10-27T17:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/40803",
                                           "updatedAt":  "2020-10-27T17:31:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQwNTU0MA==",
                                           "createdAt":  "2020-10-27T17:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Note: This sample uses `CompareOptions.None`. The other linked issue considers non-default `CompareOptions` arguments.",
                                           "updatedAt":  "2020-10-27T17:32:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQwNzc5MA==",
                                           "createdAt":  "2020-10-27T17:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Note: This sample uses CompareOptions.None. The other linked issue considers non-default CompareOptions arguments.\r\n\r\nThat is right. but the root cause the same which is coming from the optimization of this case. it is ok to keep both issues or close one and add the extra information to the other.",
                                           "updatedAt":  "2020-10-27T17:36:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTU3MzcxNQ==",
                                           "createdAt":  "2020-10-30T14:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "#40803 is not related to the \"optimizaiton\", this issue most probably is. I think it\u0027s best to keep both of them open until we fix them.",
                                           "updatedAt":  "2020-10-30T14:08:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTY1MjQwOA==",
                                           "createdAt":  "2020-10-30T16:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve confirmed that `usearch_first` returns `-1` for this particular case, while the first element returned by `ucol_next(pSourceIterator)` returns `UCOL_IGNORABLE` and hence the \"optimized\" version of the code assumes that the first character (`\\u0600`) can be ignored and later returns true\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/97729552-210f3b00-1ad3-11eb-8ac4-401e1ca38dbb.png)\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/97729279-d988af00-1ad2-11eb-8ac9-2bff88c34212.png)\r\n\r\nI\u0027ve also tried it with .NET Core 3.1 on Windows to see what NLS has to say:\r\n\r\n![obraz](https://user-images.githubusercontent.com/6011991/97730200-dd690100-1ad3-11eb-9976-1c1a023457f5.png)\r\n\r\nAnd for NLS it returns `1` and `true`.\r\n\r\nWhich makes be confused. \r\n\r\n@GrabYourPitchforks @tarekgh In a perfect world, where there are no Unicode bugs, what should be the expected result and why? \r\n\r\n\r\n",
                                           "updatedAt":  "2020-10-30T16:22:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMTgyNzA3OQ==",
                                           "createdAt":  "2020-11-04T16:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@GrabYourPitchforks I\u0027ve raised a question in the ICU bug tracker: https://unicode-org.atlassian.net/browse/ICU-21375",
                                           "updatedAt":  "2020-11-04T16:15:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMTg2MDM3MQ==",
                                           "createdAt":  "2020-11-04T17:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBVuENA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-11-04T17:15:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "note that I expect this will happen with other codepoints (e.g. `\\u0601` too). I have some theory around these but let\u0027s wait if anyone officially reply the bug. ",
                                           "updatedAt":  "2020-11-04T17:12:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTI5OTg3MQ==",
                                           "createdAt":  "2020-11-20T17:26:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "My question got [answered by one of the ICU members](https://unicode-org.atlassian.net/browse/ICU-21375?focusedCommentId=159294):\r\n\r\n\u003e This looks like it\u0027s working as intended. U+0600 is one of many characters that map to a completely ignorable collation element: https://www.unicode.org/charts/collation/ --\u003e https://www.unicode.org/charts/collation/chart_Ignored.html\r\n\r\nSo `StartsWith` works as expected?\r\n\r\n\u003e I don\u0027t know why `usearch_first()` returns -1 for you. The StringSearch/SearchIterator classes have several options for how to deal with ignorables and combining marks etc. at the edges of a match. I suspect that there is optional behavior on top of collation element comparison responsible for rejecting the match.\r\n\r\nI am able to get `-1` for a small repro without any custom settings. @tarekgh @GrabYourPitchforks should I file a bug for `usearch_first` then?\r\n\r\n",
                                           "updatedAt":  "2020-11-20T17:26:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTMyMjYxNw==",
                                           "createdAt":  "2020-11-20T18:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik I don\u0027t think this is a bug in ICU. I am seeing `U+0600` is one of the characters that can be combined with the following characters which change the search operation https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt. Looks by design to ICU. This is similar to `\\r\\n` case. That is my understanding but I cannot claim I am expert in that :-) ",
                                           "updatedAt":  "2020-11-20T18:00:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzc3OTA0OQ==",
                                           "createdAt":  "2020-11-25T15:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tarekgh so `ucol_next(pSourceIterator)` returns `UCOL_IGNORABLE` for `U+0600` because as a single character it\u0027s ignorable, but when combined with the next character it\u0027s not ignorable anymore? \r\n\r\nIt would explain why ICU\u0027s `usearch_search` is not using the `ucol_next` API that works on `int32_t` collation elements, but uses a `int64_t `-based API instead:\r\n\r\nhttps://github.com/adamsitnik/icu/blob/3c3040eaf8a60919ae9ffd3d3804abd59ed22316/icu4c/source/i18n/usearch.cpp#L3932\r\n\r\nhttps://github.com/unicode-org/icu/blob/f744742e036441cbfd54b535e722dc3801ff0f63/icu4c/source/i18n/usearch.cpp#L3766\r\n\r\nthe problem is that this API is private and we can\u0027t use it ;/",
                                           "updatedAt":  "2020-11-25T15:33:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzg3Nzk2Mw==",
                                           "createdAt":  "2020-11-25T18:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e but when combined with the next character it\u0027s not ignorable anymore?\r\n\r\nRight. when combining two or more characters into a grapheme, this will make the whole grapheme treated as one unit and will have none ignorable weight. \r\n\r\n@adamsitnik can we measure if we removed this optimization how much we lose? as you see I have optimized the search operation which should help in such scenarios too. I am afraid whatever we do here we\u0027ll run into more problems that we never encountered before.",
                                           "updatedAt":  "2020-11-25T18:27:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzkwMDQzMg==",
                                           "createdAt":  "2020-11-25T19:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e can we measure if we removed this optimization how much we lose? \r\n\r\n@tarekgh we can, but I don\u0027t think it\u0027s worth it. The problem with the initial implementation was searching the entire text for a pattern for cases where the given text was not starting|ending with the given pattern. Your optimization has helped with reducing the cost of initialization of internal ICU structures, but for long strings that don\u0027t start|end with given prefix|sufix we would still do the very time-consuming comparison. \r\n\r\nExample: \r\n```cs\r\nnew string(\u0027a\u0027, 10_000_00).StartsWith(\"b\")`\r\n``` \r\n\r\nWould result in:\r\n\r\n- one cache access instead of 1 expensive initialization (great 👍 )\r\n- 10_000_00 comparisons instead of one (not good)\r\n\r\nWhat other options do we have? \r\n\r\nShould we propose adding a new `StartsWith` and `EndsWith` methods to ICU API? But it would then work only for those of our customers who have the latest version installed ;/\r\n\r\nI wonder how Windows solved this problem as most probably they have faced the same issue. I\u0027ve noticed that Microsoft has its own fork of ICU: https://github.com/microsoft/icu Have we considered shipping our own copy of ICU with .NET? (I am just thinking out loud, I am not a fan of forking other projects)",
                                           "updatedAt":  "2020-11-25T19:12:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzkwODU3OA==",
                                           "createdAt":  "2020-11-25T19:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I wonder how Windows solved this problem as most probably they have faced the same issue\r\n\r\nI don\u0027t think this affect Windows at all. Windows either provide NLS APIs which is not using ICU anyway. Or providing ICU as it is without any additions. \r\n\r\n\u003e Have we considered shipping our own copy of ICU with .NET?\r\n\r\nThat is exactly what we are trying to avoid for years :-) as soon as we own it, we\u0027ll run into many issues we are trying to avoid (e.g. servicing it). That is why we push the issue to the user and the OS which maintain it. ",
                                           "updatedAt":  "2020-11-25T19:32:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzkxMzA2MA==",
                                           "createdAt":  "2020-11-25T19:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Is it possible we can look at `ucol_nextSortKeyPart()`. I think this may help us implementing StartWith/EndsWith more reliably. but need some investigation when we have a time. The idea would be comparing the sort keys instead of comparing the code units.",
                                           "updatedAt":  "2020-11-25T19:42:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzkxNTU0OQ==",
                                           "createdAt":  "2020-11-25T19:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYAORw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2020-11-25T19:51:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I have wrongly assumed that at some point Windows is going to change the internals of NLS API to be implemented by using ICU inside (and hit the point they need to implement startswith|endswith).\r\n\r\nOne more idea is to use [BreakIterators](http://userguide.icu-project.org/boundaryanalysis)",
                                           "updatedAt":  "2020-11-25T19:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Lp9T",
                                           "createdAt":  "2021-08-04T00:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1DBbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-08-04T11:03:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have looked deeply at this issue, and I am seeing the underlying problem is coming from ICU and not from our code. \r\n\r\nWhen using **ICU** and comparing the two strings `x` and `\\u0600x`, it returns the result indicating the two strings are equal which is correct. The reason is the character `\\u0600` is ignorable character according to [Unicode Standard](https://www.unicode.org/charts/collation/chart_Ignored.html). But when try to search for `x` in the string `\\u0600x` using **ICU** APIs like `usearch_search` or `usearch_last`, it returns `-1` which is wrong.\r\n\r\nI have reported the issue to **ICU** through the [ticket](https://unicode-org.atlassian.net/browse/ICU-21698). I mentioned the details in the ticket and the possible root cause of this problem. \r\n\r\n**Note:**\r\n\r\nIn .NET, the problem shows up when doing:\r\n\r\n```C#\r\nint idx = ci.IndexOf(\"\\u0600x\", \"x\", CompareOptions.None);\r\n```\r\n\r\nbut will not show up if we do \r\n\r\n```C#\r\nint idx = ci.LastIndexOf(\"\\u0600x\", \"x\", CompareOptions.None);\r\n```\r\n\r\nThe reason is, in the first case we search forward which cause the processing encounter `\\u0600` first causing it to fallback to call **ICU**. In the second case we find the match (in our optimized code path) before hitting `\\u0600` and we\u0027ll not call **ICU** at all in such case.",
                                           "updatedAt":  "2021-08-08T01:03:09Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "CompareInfo.IsSuffix sometimes incorrectly splits collation elements and returns \u0027true\u0027",
        "labels":  [
                       "bug",
                       "area-System.Globalization",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46141",
        "createdAt":  "2020-12-16T14:57:06Z",
        "number":  46141,
        "author":  "marek-safar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-11T17:16:15Z",
        "body":  "CultureData [initialization](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L16) brings a lot of dependencies for members which are rarely used. Few examples are [_SpecificCulture](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L70) and [_bNeutral](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L68) but there are more.\r\n\r\nIt\u0027d decrease the size of a trimmed app if we moved all these data into delayed initialization. It\u0027d also help with code readability as today it\u0027s a mix of random jumps that can interfere with each other and are hard to follow.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONJ3Efg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NjQyNDEyMw==",
                                           "createdAt":  "2020-12-16T14:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCultureData [initialization](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L16) brings a lot of dependencies for members which are rarely used. Few examples are [_SpecificCulture](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L70) and [_bNeutral](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L68) but there are more.\r\n\r\nIt\u0027d decrease the size of a trimmed app if we moved all these data into delayed initialization. It\u0027d also help with code readability as today it\u0027s a mix of random jumps that can interfere with each other and are hard to follow.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarek-safar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-16T14:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NjkzODM5MA==",
                                           "createdAt":  "2020-12-16T20:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@marek-safar could you point at _bNeutral data you are referring to?\r\n\r\nI understand the benefit of that but I sated to worry the maintenance of the code started to be very complicated. so we need to weigh that against the benefit. ",
                                           "updatedAt":  "2020-12-16T20:10:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzA2ODU5NQ==",
                                           "createdAt":  "2020-12-16T22:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "\u003e could you point at _bNeutral data you are referring to?\r\n\r\nhttps://github.com/dotnet/runtime/blob/496bc88f0517990c8430ba8d8d63946a6f9e716c/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.cs#L1237\r\n\r\n\u003e worry the maintenance of the code started to be very complicated\r\n\r\nI think the changes could actually lead to clearer/simple code\r\n",
                                           "updatedAt":  "2020-12-16T22:04:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzExMjQ1Mw==",
                                           "createdAt":  "2020-12-16T23:59:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@marek-safar You are not pointing at _bNeutral at all. would be good to fix the description of the issue. ",
                                           "updatedAt":  "2020-12-16T23:59:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzI5MDEwOQ==",
                                           "createdAt":  "2020-12-17T08:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "What do you mean? The link in the description points to a line where _bNeutral is set and when you asked for data I added another comment point to value _bNeutral is set with.",
                                           "updatedAt":  "2020-12-17T08:26:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Nzc1MjAwMA==",
                                           "createdAt":  "2020-12-17T22:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Maybe I am missing something here. the line initialize `_bNeutral` is \r\n\r\nhttps://github.com/dotnet/runtime/blob/496bc88f0517990c8430ba8d8d63946a6f9e716c/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.cs#L789\r\n\r\nwhich is not really using any data. the link you sent is pointing at \r\n\r\n```C#\r\ninternal string TwoLetterISOCountryName =\u003e _sISO3166CountryName ??= GetLocaleInfoCore(LocaleStringData.Iso3166CountryName); \r\n```\r\n\r\nwhich I have no idea how this is related to `_bNeutral`.",
                                           "updatedAt":  "2020-12-17T22:59:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Nzc1NTA2MQ==",
                                           "createdAt":  "2020-12-17T23:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "Your code is I believe for invariant mode only, if you click on the link in the description it should take you to https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L68",
                                           "updatedAt":  "2020-12-17T23:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40naYM",
                                           "createdAt":  "2021-07-19T18:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@eerhardt I moved this to 7.0 milestone. Let me know if you still think we need to have for 6.0 and @joperezr is planning to fix it? ",
                                           "updatedAt":  "2021-07-19T18:00:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ncR-",
                                           "createdAt":  "2021-07-19T18:11:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to 7.0 sounds fine to me.",
                                           "updatedAt":  "2021-07-19T18:11:38Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "CultureData initialization brings a lot of dependencies",
        "labels":  [
                       "area-System.Globalization",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47967",
        "createdAt":  "2021-02-07T01:26:23Z",
        "number":  47967,
        "author":  "vargaz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-17T19:02:44Z",
        "body":  "NameIndexToNumericData is a 15k byte array which cannot be linked out even through much of the information inside it is not needed if not all entries in IcuLocaleDataParts are used by the app. It would be better to have 1 array for each entry in IcuLocaleDataParts.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM3fUHw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU3MjQ0Ng==",
                                           "createdAt":  "2021-02-07T01:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-07T01:26:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU3MjQ2Mw==",
                                           "createdAt":  "2021-02-07T01:26:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @tannergooding, @sbomer\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNameIndexToNumericData is a 15k byte array which cannot be linked out even through much of the information inside it is not needed if not all entries in IcuLocaleDataParts are used by the app. It would be better to have 1 array for every entry in IcuLocaleDataParts.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evargaz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`linkable-framework`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-07T01:26:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU5MDc5MA==",
                                           "createdAt":  "2021-02-07T04:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNameIndexToNumericData is a 15k byte array which cannot be linked out even through much of the information inside it is not needed if not all entries in IcuLocaleDataParts are used by the app. It would be better to have 1 array for each entry in IcuLocaleDataParts.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evargaz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `linkable-framework`, `size-reduction`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-07T04:12:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDc1NjQ2Ng==",
                                           "createdAt":  "2021-02-07T20:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@marek-safar @vargaz we need to decide for such issues if it is nice to have or it has to be fixed in 6.0. To know the priority and plan for that. Or you expecting your team will take care with that? ",
                                           "updatedAt":  "2021-02-07T20:38:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTA5MTkyNw==",
                                           "createdAt":  "2021-02-08T11:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "This was discussed in https://github.com/dotnet/runtime/pull/45643#discussion_r537516654\r\n\r\n@tarekgh teams working on size goals will take care of this when it fits into their priorities list.",
                                           "updatedAt":  "2021-02-08T11:54:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTMwMTgyMw==",
                                           "createdAt":  "2021-02-08T17:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I moved it to future milestone for now and can be brought back to 6.0 when is decided otherwise. ",
                                           "updatedAt":  "2021-02-08T17:15:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDIzMjkyMg==",
                                           "createdAt":  "2021-04-06T15:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "In a `dotnet new blazorwasm ` app - I see these parts being used:\r\n\r\n* `IcuLocaleDataParts.Lcid` ( indices 0-2 )\r\n* `IcuLocaleDataParts.DigitSubstitutionOrListSeparator` (index 14)\r\n* `IcuLocaleDataParts.SpecificLocaleIndex` (indices 15-16)\r\n\r\nso 6 out of 18 bytes are being used, potentially saving 66% of this table.\r\n\r\nIf this table is 15KB, that means we could potentially save 10KB (uncompressed).",
                                           "updatedAt":  "2021-04-06T15:53:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzQ4NzU4MQ==",
                                           "createdAt":  "2021-06-17T18:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@tarekgh - been a couple months since this was last discussed - just confirming that we can/cannot fit this in .NET 6 ? (Is the Future milestone still accurate ?)",
                                           "updatedAt":  "2021-06-17T18:57:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzQ5MTEwMw==",
                                           "createdAt":  "2021-06-17T19:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvLt4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2021-06-17T19:07:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@SamMonoRT nothing changes per the comment https://github.com/dotnet/runtime/issues/47967#issuecomment-775091927. It still marked for future.",
                                           "updatedAt":  "2021-06-17T19:02:44Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "IcuLocaleData.NameIndexToNumericData is not linker friendly",
        "labels":  [
                       "area-System.Globalization",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54987",
        "createdAt":  "2021-07-01T02:32:07Z",
        "number":  54987,
        "author":  "ufcpp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCr85ZA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xin9le",
                                            "createdAt":  "2021-07-01T02:48:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ovis",
                                            "createdAt":  "2021-07-01T03:35:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2021-07-01T05:29:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mutaguchi",
                                            "createdAt":  "2021-07-01T05:37:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kkamegawa",
                                            "createdAt":  "2021-07-01T05:47:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "proudust",
                                            "createdAt":  "2021-07-01T06:17:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gidodongas",
                                            "createdAt":  "2021-07-01T06:44:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "j-munemoto",
                                            "createdAt":  "2021-07-01T07:29:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kzrnm",
                                            "createdAt":  "2021-07-01T09:38:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tan90909090",
                                            "createdAt":  "2021-07-01T10:46:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manju-summoner",
                                            "createdAt":  "2021-07-01T10:49:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lissxxxx",
                                            "createdAt":  "2021-07-01T11:16:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SIkebe",
                                            "createdAt":  "2021-07-01T11:34:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mrtska",
                                            "createdAt":  "2021-07-01T12:29:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slime-hatena",
                                            "createdAt":  "2021-07-01T12:59:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "runceel",
                                            "createdAt":  "2021-07-02T07:27:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juner",
                                            "createdAt":  "2021-07-02T13:45:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tmyt",
                                            "createdAt":  "2021-07-02T16:59:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2021-07-16T08:19:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neelabo",
                                            "createdAt":  "2021-08-24T08:05:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "acid-chicken",
                                            "createdAt":  "2022-03-27T07:38:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yutokun",
                                            "createdAt":  "2022-12-20T14:20:47Z"
                                        }
                                    ],
                          "totalCount":  22
                      },
        "updatedAt":  "2021-08-12T02:20:23Z",
        "body":  "### Description\r\n\r\n```cs\r\nusing System;\r\nusing System.Globalization;\r\n\r\nCompare(\"つ\", \"っ\");\r\nCompare(\"ツ\", \"ッ\");\r\n\r\nvoid Compare(string s1, string s2)\r\n{\r\n    var result = CultureInfo.InvariantCulture.CompareInfo.Compare(s1, s2, CompareOptions.IgnoreCase);\r\n    Console.WriteLine($\"{s1} {(result == 0 ? \"=\" : \"!\")}= {s2}\");\r\n}\r\n```\r\n\r\nWhen running this code with NLS, the result is:\r\n\r\n```\r\nつ != っ\r\nツ != ッ\r\n```\r\n\r\nbut with ICU:\r\n\r\n```\r\nつ == っ\r\nツ != ッ\r\n```\r\n\r\nI and many Japanese developers think NLS is correct, and this is regression in .NET 5 ICU.\r\n\r\nThe Japanese language has no concept of upper/lower case, and `IgnoreCase` is rarely specified for Japanese letters. However, this problem is serious in PowerShell 7: `-eq` operator ignores case by default and behaves strangely.\r\n\r\n```ps1\r\n\u003e \"つ\" -eq \"っ\"\r\nTrue\r\n```\r\n\r\n`\"つ\" -eq \"っ\"` has to be false.\r\n\r\nOther incorrect APIs (`つ == っ`):\r\n\r\n* `string.Equals(s1, s2, StringComparison.InvariantCultureIgnoreCase)`\r\n* `string.Equals(s1, s2, StringComparison.CurrentCultureIgnoreCase)`\r\n* (PowerShell) `\"つ\" -eq \"っ\"`\r\n\r\nCorrect APIs (`つ != っ`):\r\n\r\n* `string.Equals(s1, s2, StringComparison.OrdinalIgnoreCase)`\r\n* `Regex.IsMatch(s1, $\"^{s2}$\", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase)`\r\n* (PowerShell) `\"つ\" -ceq \"っ\"`\r\n* (PowerShell) `\"つ\" -match \"っ\"`\r\n\r\n### Configuration\r\n\r\n* PowerShell 7.1.3\r\n* .NET 5 or greater with ICU (default) option.\r\n\r\n### Regression?\r\n\r\nYes.\r\n\r\n### Other information\r\n\r\n\r\n#### Character information\r\n\r\nっ 3063;HIRAGANA LETTER SMALL TU;Lo;0;L;;;;;N;;;;;\r\nつ 3064;HIRAGANA LETTER TU;Lo;0;L;;;;;N;;;;;\r\nッ 30C3;KATAKANA LETTER SMALL TU;Lo;0;L;;;;;N;;;;;\r\nツ 30C4;KATAKANA LETTER TU;Lo;0;L;;;;;N;;;;;\r\n\r\nAll these letters are Other Letter category. Japanese small letters are neither lower case nor upper case. っ and つ has different meaning and usage. There is no entry for Japanese letters in [CaseFolding](https://www.unicode.org/Public/UCD/latest/ucd/CaseFolding.txt).\r\n\r\nOn the other hand, [Tertiary Weight Table in tr10](http://www.unicode.org/reports/tr10/tr10-9.html#Tertiary_Weight_Table) refers to small/narrow hiragana/katakana, but behavior in .NET 5 ICU is still strange. If `\"つ\" -eq \"っ\"` were true, `\"ツ\" -eq \"ッ\"` would have to be also true.\r\n\r\n### Suspicious code\r\n\r\nWe suspect that this is a bug in [custom collation rules for Kana](https://github.com/dotnet/runtime/blob/5b585012aab2a8bbd90b32fdfd9c6d48884f8074/src/libraries/Native/Unix/System.Globalization.Native/pal_collation.c#L249).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONXufQw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTg2NDc3MA==",
                                           "createdAt":  "2021-07-01T02:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n```cs\r\nusing System;\r\nusing System.Globalization;\r\n\r\nCompare(\"つ\", \"っ\");\r\nCompare(\"ツ\", \"ッ\");\r\n\r\nvoid Compare(string s1, string s2)\r\n{\r\n    var result = CultureInfo.InvariantCulture.CompareInfo.Compare(s1, s2, CompareOptions.IgnoreCase);\r\n    Console.WriteLine($\"{s1} {(result == 0 ? \"=\" : \"!\")}= {s2}\");\r\n}\r\n```\r\n\r\nWhen running this code with NLS, the result is:\r\n\r\n```\r\nつ != っ\r\nツ != ッ\r\n```\r\n\r\nbut with ICU:\r\n\r\n```\r\nつ == っ\r\nツ != ッ\r\n```\r\n\r\nI and many Japanese developers think NLS is correct, and this is regression in .NET 5 ICU.\r\n\r\nThe Japanese language has no concept of upper/lower case, and `IgnoreCase` is rarely specified for Japanese letters. However, this problem is serious in PowerShell 7: `-eq` operator ignores case by default and behaves strangely.\r\n\r\n```ps1\r\n\u003e \"つ\" -eq \"っ\"\r\nTrue\r\n```\r\n\r\n`\"つ\" -eq \"っ\"` has to be false.\r\n\r\nOther incorrect APIs (`つ == っ`):\r\n\r\n* `string.Equals(s1, s2, StringComparison.InvariantCultureIgnoreCase)`\r\n* `string.Equals(s1, s2, StringComparison.CurrentCultureIgnoreCase)`\r\n* (PowerShell) `\"つ\" -eq \"っ\"`\r\n\r\nCorrect APIs (`つ != っ`):\r\n\r\n* `string.Equals(s1, s2, StringComparison.OrdinalIgnoreCase)`\r\n* `Regex.IsMatch(s1, $\"^{s2}$\", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase)`\r\n* (PowerShell) `\"つ\" -ceq \"っ\"`\r\n* (PowerShell) `\"つ\" -match \"っ\"`\r\n\r\n### Configuration\r\n\r\n* PowerShell 7.1.3\r\n* .NET 5 or greater with ICU (default) option.\r\n\r\n### Regression?\r\n\r\nYes.\r\n\r\n### Other information\r\n\r\n\r\n#### Character information\r\n\r\nっ 3063;HIRAGANA LETTER SMALL TU;Lo;0;L;;;;;N;;;;;\r\nつ 3064;HIRAGANA LETTER TU;Lo;0;L;;;;;N;;;;;\r\nッ 30C3;KATAKANA LETTER SMALL TU;Lo;0;L;;;;;N;;;;;\r\nツ 30C4;KATAKANA LETTER TU;Lo;0;L;;;;;N;;;;;\r\n\r\nAll these letters are Other Letter category. Japanese small letters are neither lower case nor upper case. っ and つ has different meaning and usage. There is no entry for Japanese letters in [CaseFolding](https://www.unicode.org/Public/UCD/latest/ucd/CaseFolding.txt).\r\n\r\nOn the other hand, [Tertiary Weight Table in tr10](http://www.unicode.org/reports/tr10/tr10-9.html#Tertiary_Weight_Table) refers to small/narrow hiragana/katakana, but behavior in .NET 5 ICU is still strange. If `\"つ\" -eq \"っ\"` were true, `\"ツ\" -eq \"ッ\"` would have to be also true.\r\n\r\n### Suspicious code\r\n\r\nWe suspect that this is a bug in [custom collation rules for Kana](https://github.com/dotnet/runtime/blob/5b585012aab2a8bbd90b32fdfd9c6d48884f8074/src/libraries/Native/Unix/System.Globalization.Native/pal_collation.c#L249).\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eufcpp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-01T02:32:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4033P4",
                                           "createdAt":  "2021-07-26T22:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@ufcpp this is the behavior of ICU. If you think this is wrong behavior for Japanese language, I suggest you raise this issue to the [CLDR](https://unicode-org.atlassian.net/jira/software/c/projects/CLDR/issues). That would be better to avoid us adding any hacks inside the .NET just to get back to NLS behavior. We are trying to not to customize much the collation behavior to avoid diverging from the default CLDR behavior.\r\n\r\nYou can play with that with the collation demo https://icu4c-demos.unicode.org/icu-bin/collation.html. Select the secondary strength and paste the characters `つ` and `っ` in the input box each in separate line. \r\n\r\n\u003e I and many Japanese developers think NLS is correct, and this is regression in .NET 5 ICU.\r\n\r\nWe don\u0027t consider the differences between `NLS` and `ICU` are regressions. It is intentional we want to move forward using CLDR Unicode standard through ICU. We already giving a way to go back to NLS if need to.",
                                           "updatedAt":  "2021-07-26T22:12:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Ytcm",
                                           "createdAt":  "2021-08-10T02:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no recent activity` because it has been marked as `needs author feedback` but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days. Any new comment (by anyone, not necessarily the author) will remove `no recent activity`",
                                           "updatedAt":  "2021-08-10T02:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41bpAC",
                                           "createdAt":  "2021-08-11T01:55:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB13GoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aetos382",
                                                                               "createdAt":  "2021-08-11T05:23:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "@tarekgh \r\nI got some feedback from a community member.\r\n`っ == つ` (hiragana tu) is a problem of ICU behavior, but `ッ != ツ` (katakana tu) is not. If `っ == つ` is correct, `ッ` should be also `ッ == ツ`. This might be a bug in custom rules, similar to #55116.\r\n",
                                           "updatedAt":  "2021-08-11T01:55:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41cpf5",
                                           "createdAt":  "2021-08-11T10:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "Anyway, why are you doing the case conversion based on [Collation Algorithm](https://unicode.org/reports/tr10/) instead of [CaseFolding](https://www.unicode.org/Public/UCD/latest/ucd/CaseFolding.txt)?\r\nI think `っ == つ` is natural for collation folding but unnatural for case folding.",
                                           "updatedAt":  "2021-08-11T10:22:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41dugH",
                                           "createdAt":  "2021-08-11T16:47:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e っ == つ (hiragana tu) is a problem of ICU behavior, but ッ != ツ (katakana tu) is not. If っ == つ is correct, ッ should be also ッ == ツ. This might be a bug in custom rules, similar to #55116.\r\n\r\nWe can look checking if the `ッ != ツ` is .NET issue. Did you already try ICU and see this is not ICU behavior? \r\n\r\n\u003e Anyway, why are you doing the case conversion based on Collation Algorithm instead of CaseFolding?\r\n\r\nWe just call ICU for collation operations, and we don\u0027t do any manual casing (except the tailoring part we are doing in the framework). ",
                                           "updatedAt":  "2021-08-11T16:47:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41e1K-",
                                           "createdAt":  "2021-08-12T01:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "\u003e Did you already try ICU and see this is not ICU behavior?\r\n\r\nI didn\u0027t directly but some community members did. Seems like it is correct behavior in [collation with Tertiary Weight Table](https://unicode.org/reports/tr10/#Tertiary_Weight_Table) but the tertiary weight is not only for case ignorance.\r\n",
                                           "updatedAt":  "2021-08-12T01:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41e5bW",
                                           "createdAt":  "2021-08-12T02:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "Please wait a moment. I ask the members for that details.",
                                           "updatedAt":  "2021-08-12T02:10:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41e59D",
                                           "createdAt":  "2021-08-12T02:15:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We can try it ourselves. I used [collation demo](https://icu4c-demos.unicode.org/icu-bin/collation.html) and it looks to me that `ッ, ツ` is behaving as `っ, つ`. They are not equal in the tertiary strength, and they are equal in the secondary and primary strength. ",
                                           "updatedAt":  "2021-08-12T02:20:23Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Incorrect string comparison for Japanese small letters with IgnoreCase option in .NET 5 ICU",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56155",
        "createdAt":  "2021-07-22T14:23:50Z",
        "number":  56155,
        "author":  "JanLoehe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-23T19:17:33Z",
        "body":  "### Description\r\nThe IndexOf method changes it\u0027s behavior to ignore case when a minus sign is included in the source, when CompareOptions IgnoreNonSpace is used. It is case sensitive when no \u0027-\u0027 sign is included.\r\nWhen I want to combine IgnoreNonSpace with IgnoreCase, then I can do it in following way:\r\nCompareOptions.IgnoreCase | CompareOptions.IgnoreNonSpace\r\nWhen I use only IgnoreNonSpace, I want it to be case sensitive.\r\n\r\n```\r\nint a = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABCXYZ\", \"abc\", CompareOptions.IgnoreNonSpace);\r\nint b = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABC-XYZ\", \"abc\", CompareOptions.IgnoreNonSpace);\r\nint c = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABCXYZ\", \"ÄBC\", CompareOptions.IgnoreNonSpace);\r\n```\r\n\r\nI expect a \u0026 b to be -1. And I expect c to be 0.\r\na \u0026 c return what I expect, but b returns 0. There is no lower case abc included in \"ABC-XYZ\".\r\nIt works as expected with .Net Framework 4.8 \u0026 with .Net Core 3.1.\r\n\r\nI am aware of the breaking change to switch from NLS to ICU.\r\nI am also aware that I can set UseNls to true in the project configuration. With this workaround it works again as expected.\r\nBut I think this use case should also work with ICU. I can\u0027t imagine a reason why the behavior of IndexOf should change to be case insensitive when a minus sign is included in the source.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONM0G2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40v1Y3",
                                           "createdAt":  "2021-07-22T14:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nThe IndexOf method changes it\u0027s behavior to ignore case when a minus sign is included in the source, when CompareOptions IgnoreNonSpace is used. It is case sensitive when no \u0027-\u0027 sign is included.\r\nWhen I want to combine IgnoreNonSpace with IgnoreCase, then I can do it in following way:\r\nCompareOptions.IgnoreCase | CompareOptions.IgnoreNonSpace\r\nWhen I use only IgnoreNonSpace, I want it to be case sensitive.\r\n\r\n```\r\nint a = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABCXYZ\", \"abc\", CompareOptions.IgnoreNonSpace);\r\nint b = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABC-XYZ\", \"abc\", CompareOptions.IgnoreNonSpace);\r\nint c = CultureInfo.InvariantCulture.CompareInfo.IndexOf(\"ABCXYZ\", \"ÄBC\", CompareOptions.IgnoreNonSpace);\r\n```\r\n\r\nI expect a \u0026 b to be -1. And I expect c to be 0.\r\na \u0026 c return what I expect, but b returns 0. There is no lower case abc included in \"ABC-XYZ\".\r\nIt works as expected with .Net Framework 4.8 \u0026 with .Net Core 3.1.\r\n\r\nI am aware of the breaking change to switch from NLS to ICU.\r\nI am also aware that I can set UseNls to true in the project configuration. With this workaround it works again as expected.\r\nBut I think this use case should also work with ICU. I can\u0027t imagine a reason why the behavior of IndexOf should change to be case insensitive when a minus sign is included in the source.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJanLoehe\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-22T14:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40zQbZ",
                                           "createdAt":  "2021-07-23T19:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@JanLoehe I looked at the issue and unfortunately the root problem is in ICU and not .NET. The issue is tracked for ICU through the ticket https://unicode-org.atlassian.net/browse/ICU-21338. I already added some comment there asking if they can raise the priority of this issue and get a fix in the next version of ICU. \r\n\r\nMeanwhile, there is no workaround for that except if you try avoiding using `IgnoreNonSpace` or switch back to use NLS https://docs.microsoft.com/en-us/dotnet/standard/globalization-localization/globalization-icu#use-nls-instead-of-icu.\r\n\r\nYou may follow up with the ICU ticket to get more updates about the issue.",
                                           "updatedAt":  "2021-07-23T19:17:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "CultureInfo.InvariantCulture.CompareInfo.IndexOf changes to ignore case when a minus \u0027-\u0027 sign is included",
        "labels":  [
                       "area-System.Globalization",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60590",
        "createdAt":  "2021-10-06T07:16:59Z",
        "number":  60590,
        "author":  "aburakab",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:27:11Z",
        "body":  "I\u0027m not sure if this is a bug or not! Starting from .net5, Right to Left Cultures is dealing with \"-1\" in a weird way.\r\nMay you please explain?\r\n\r\n```csharp\r\nvar str = \"-1\";\r\nvar num = Convert.ToInt32(str, CultureInfo.InvariantCulture);\r\n\r\nvar culture = new CultureInfo(\"en-US\");\r\nThread.CurrentThread.CurrentCulture = culture;\r\nstr.Dump(CultureInfo.CurrentCulture.Name);\r\nnum.Dump(CultureInfo.CurrentCulture.Name);\r\nnum.ToString().Length.Dump($\"{CultureInfo.CurrentCulture.Name} =\u003e ToString().Length\");\r\n\r\nculture = new CultureInfo(\"ar-SA\");\r\nThread.CurrentThread.CurrentCulture = culture;\r\nstr.Dump(CultureInfo.CurrentCulture.Name);\r\nnum.Dump(CultureInfo.CurrentCulture.Name);\r\nnum.ToString().Length.Dump($\"{CultureInfo.CurrentCulture.Name} =\u003e ToString().Length\");\r\n```\r\n\r\n.Net 5 and 6\r\n![image](https://user-images.githubusercontent.com/30401/136157103-9b9ac05e-67ea-4ac6-b4a1-2e19ea1ec805.png)\r\n\r\n.Net 3.1\r\n![image](https://user-images.githubusercontent.com/30401/136156962-2c8652f3-9e4a-4355-a3f5-c73cb9604421.png)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPDwIhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43xk1g",
                                           "createdAt":  "2021-10-06T08:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9Lfjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aburakab",
                                                                               "createdAt":  "2021-10-06T11:05:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "PowerShell 7.1.4 using .NET 5.0.9:\r\n\r\n```\r\nPS C:\\\u003e (-123).ToString([System.Globalization.CultureInfo]\"ar-SA\")\r\n؜-123\r\nPS C:\\\u003e (-123).ToString([System.Globalization.CultureInfo]\"ar-SA\")\r\n؜-123\r\nPS C:\\\u003e (-123).ToString([System.Globalization.CultureInfo]\"ar-SA\").EnumerateRunes() | % { \"U+{0:X4}\" -f $_.Value }\r\nU+061C\r\nU+002D\r\nU+0031\r\nU+0032\r\nU+0033\r\nPS C:\\\u003e ([System.Globalization.CultureInfo]\"ar-SA\").NumberFormat.NegativeSign.EnumerateRunes() | % { \"U+{0:X4}\" -f $_.Value }\r\nU+061C\r\nU+002D\r\n```\r\n\r\nThe minus sign precedes the digit 1 in the string, but there is also U+061C ARABIC LETTER MARK, which I suppose affects how the [Unicode bidirectional algorithm](http://www.unicode.org/reports/tr9/) lays out the text.",
                                           "updatedAt":  "2021-10-06T08:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43yew1",
                                           "createdAt":  "2021-10-06T11:03:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aburakab",
                                           "body":  "Ok, I see. The  **U+061C ARABIC LETTER MARK** description:\r\n\u003e \"The Arabic letter mark (ALM) is a non-printing character used in the computerized typesetting of bi-directional text **containing mixed left-to-right scripts (such as Latin and Cyrillic) and right-to-left scripts (such as Arabic, Syriac and Hebrew).** Similar to Right-to-left mark (RLM), it is used to change the way adjacent characters are grouped **with respect to text direction**, with some difference on how it affects the bidirectional level resolutions for nearby characters.\"\r\n[Reference](https://unicode-explorer.com/c/061C).\r\n\r\nThis already affects one library that we are using. \r\nI already sent a [PR for a library](https://github.com/pieceofsummer/Hangfire.Console/pull/111) which affects our product.\r\nAnd I solve it using this line of code.\r\n```csharp\r\nCultureInfo.CurrentCulture.NumberFormat = NumberFormatInfo.InvariantInfo;\r\n```\r\nBased on my experience in building Web Apps using Arabic Cultures, mixing characters was really a headache! so maybe this new implementation comes to solve this issue (which was not available in .net core 3.1 and before). \r\nSome old implementations were serializing or stringifying objects, they might be affected now.",
                                           "updatedAt":  "2021-10-06T11:03:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43zTwT",
                                           "createdAt":  "2021-10-06T13:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "From \u003chttps://st.unicode.org/cldr-apps/v#/ar_SA/Symbols/\u003e, it looks like the \"Symbols\" section has minusSign = U+002D, but the \"Symbols using Arabic-Indic Digits (Arab)\" section has minusSign = U+061C U+002D.  Perhaps then, it is a bug that .NET uses the latter even with the 0123456789 digits.",
                                           "updatedAt":  "2021-10-06T13:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43zfZD",
                                           "createdAt":  "2021-10-06T13:33:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aburakab",
                                           "body":  "Interesting! Thank you @KalleOlaviNiemitalo, let us see what they are going to reply :)",
                                           "updatedAt":  "2021-10-06T13:33:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43zuLR",
                                           "createdAt":  "2021-10-06T14:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "On which operating system do you run your code? If it is on Windows, you could use the compatibility setting to switch from ICU to NLS and work around the problem that way: [.NET globalization and ICU](https://docs.microsoft.com/dotnet/core/extensions/globalization-icu)",
                                           "updatedAt":  "2021-10-06T14:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc432eaI",
                                           "createdAt":  "2021-10-06T20:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aburakab",
                                           "body":  "I\u0027m using Windows. \nI\u0027ll give it a try.",
                                           "updatedAt":  "2021-10-06T20:02:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48PAiH",
                                           "createdAt":  "2022-01-12T02:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e From st.unicode.org/cldr-apps/v#/ar_SA/Symbols, it looks like the \"Symbols\" section has minusSign = U+002D, but the \"Symbols using Arabic-Indic Digits (Arab)\" section has minusSign = U+061C U+002D. Then, it is a bug that .NET uses the latter even with the 0123456789 digits.\r\n\r\nThe shape of the digits is decided by the visual rendering engines and not on the level of formatting the string. For example, can use the Latin digits and get rendered as Hindi digits. Looking at the CLDR data, I am seeing even with the `Latin`, it will insert the Left to right Mark `\\u200E`. So, either way will end up with some mark inserted with it. \r\nMay be the .NET will consider removing such marks from the sign when reading it and continue to work as we used to do before using ICU? If we do that, it means the callers will need to ensure how the formatted numbers or anything is laid out correctly. By the way, such marks are inserted in the dates too, but it is really helping lay out the dates correctly, especially when having the months written in Arabic.\r\n\r\nthoughts?\r\n\r\n\u003e switch from ICU to NLS and work around the problem that way\r\n\r\nI wouldn\u0027t recommend that. Switching back to NLS is not a desirable choice as it will lose other features and ICU is the future to go with. I would suggest you work around this either overwriting the negative sign in the culture or just processing the formatted string and removing the inserted marks.\r\n\r\n",
                                           "updatedAt":  "2022-01-12T21:24:56Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Right to Left Cultures for numbers ",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61148",
        "createdAt":  "2021-11-03T12:36:28Z",
        "number":  61148,
        "author":  "afvieira",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-17T11:12:09Z",
        "body":  "### Description\n\nRegardless of the used Culture (`InstalledUICulture`,`CurrentCulture`,`InvariantCulture`,`CurrentUICulture`) the `ShortTimePattern` is always `HH:mm`. This is happening only when I run the code in **macOS**. When running the same code in **windows** the `ShortTimePattern` is respecting the system configurations. \r\n\r\nYou can see an example [here](https://github.com/afvieira/tmp-ShortTimePattern-issue). I built a sample project just to show the behavior.\r\n\r\nAs you can see when running this in windows, the hour format is ok:\r\n![2021-11-03 11-13-35 - My Boot Camp(1)](https://user-images.githubusercontent.com/1200312/140058987-3f4e5b42-e8b9-4707-9fd8-444551845daf.png)\r\n\r\nIn macOS this is not working:\r\n![ezgif com-gif-maker (3)](https://user-images.githubusercontent.com/1200312/140059673-4603701d-058b-4b05-9919-bb7525369374.gif)\r\n\r\n\r\n\n\n### Reproduction Steps\n\nsmall project with repro steps: https://github.com/afvieira/tmp-ShortTimePattern-issue\n\n### Expected behavior\n\nRespecting the system configurations in macOS. When I have the \"24-Hour Time\" setting unchecked, the time format should be `h:mm tt` instead of `HH:mm`\n\n### Actual behavior\n\nWhen I have the \"24-Hour Time\" setting unchecked, the time format is ignoring this setting configuration.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n  - .net5.0\r\n- What OS and version, and what distro if applicable?\r\n  - ![image](https://user-images.githubusercontent.com/1200312/140060880-11c55f32-ee73-43b2-bf32-5054d04d8291.png)\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcPxzPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45KQ23",
                                           "createdAt":  "2021-11-03T12:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRegardless of the used Culture (`InstalledUICulture`,`CurrentCulture`,`InvariantCulture`,`CurrentUICulture`) the `ShortTimePattern` is always `HH:mm`. This is happening only when I run the code in **macOS**. When running the same code in **windows** the `ShortTimePattern` is respecting the system configurations. \r\n\r\nYou can see an example [here](https://github.com/afvieira/tmp-ShortTimePattern-issue). I built a sample project just to show the behavior.\r\n\r\nAs you can see when running this in windows, the hour format is ok:\r\n![2021-11-03 11-13-35 - My Boot Camp(1)](https://user-images.githubusercontent.com/1200312/140058987-3f4e5b42-e8b9-4707-9fd8-444551845daf.png)\r\n\r\nIn macOS this is not working:\r\n![ezgif com-gif-maker (3)](https://user-images.githubusercontent.com/1200312/140059673-4603701d-058b-4b05-9919-bb7525369374.gif)\r\n\r\n\r\n\n\n### Reproduction Steps\n\nsmall project with repro steps: https://github.com/afvieira/tmp-ShortTimePattern-issue\n\n### Expected behavior\n\nRespecting the system configurations in macOS. When I have the \"24-Hour Time\" setting unchecked, the time format should be `h:mm tt` instead of `HH:mm`\n\n### Actual behavior\n\nWhen I have the \"24-Hour Time\" setting unchecked, the time format is ignoring this setting configuration.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n  - .net5.0\r\n- What OS and version, and what distro if applicable?\r\n  - ![image](https://user-images.githubusercontent.com/1200312/140060880-11c55f32-ee73-43b2-bf32-5054d04d8291.png)\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eafvieira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-03T12:36:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Kxmp",
                                           "createdAt":  "2021-11-03T13:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRegardless of the used Culture (`InstalledUICulture`,`CurrentCulture`,`InvariantCulture`,`CurrentUICulture`) the `ShortTimePattern` is always `HH:mm`. This is happening only when I run the code in **macOS**. When running the same code in **windows** the `ShortTimePattern` is respecting the system configurations. \r\n\r\nYou can see an example [here](https://github.com/afvieira/tmp-ShortTimePattern-issue). I built a sample project just to show the behavior.\r\n\r\nAs you can see when running this in windows, the hour format is ok:\r\n![2021-11-03 11-13-35 - My Boot Camp(1)](https://user-images.githubusercontent.com/1200312/140058987-3f4e5b42-e8b9-4707-9fd8-444551845daf.png)\r\n\r\nIn macOS this is not working:\r\n![ezgif com-gif-maker (3)](https://user-images.githubusercontent.com/1200312/140059673-4603701d-058b-4b05-9919-bb7525369374.gif)\r\n\r\n\r\n\n\n### Reproduction Steps\n\nsmall project with repro steps: https://github.com/afvieira/tmp-ShortTimePattern-issue\n\n### Expected behavior\n\nRespecting the system configurations in macOS. When I have the \"24-Hour Time\" setting unchecked, the time format should be `h:mm tt` instead of `HH:mm`\n\n### Actual behavior\n\nWhen I have the \"24-Hour Time\" setting unchecked, the time format is ignoring this setting configuration.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n  - .net5.0\r\n- What OS and version, and what distro if applicable?\r\n  - ![image](https://user-images.githubusercontent.com/1200312/140060880-11c55f32-ee73-43b2-bf32-5054d04d8291.png)\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eafvieira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-03T13:49:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45N1rd",
                                           "createdAt":  "2021-11-03T20:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRegardless of the used Culture (`InstalledUICulture`,`CurrentCulture`,`InvariantCulture`,`CurrentUICulture`) the `ShortTimePattern` is always `HH:mm`. This is happening only when I run the code in **macOS**. When running the same code in **windows** the `ShortTimePattern` is respecting the system configurations. \r\n\r\nYou can see an example [here](https://github.com/afvieira/tmp-ShortTimePattern-issue). I built a sample project just to show the behavior.\r\n\r\nAs you can see when running this in windows, the hour format is ok:\r\n![2021-11-03 11-13-35 - My Boot Camp(1)](https://user-images.githubusercontent.com/1200312/140058987-3f4e5b42-e8b9-4707-9fd8-444551845daf.png)\r\n\r\nIn macOS this is not working:\r\n![ezgif com-gif-maker (3)](https://user-images.githubusercontent.com/1200312/140059673-4603701d-058b-4b05-9919-bb7525369374.gif)\r\n\r\n\r\n\n\n### Reproduction Steps\n\nsmall project with repro steps: https://github.com/afvieira/tmp-ShortTimePattern-issue\n\n### Expected behavior\n\nRespecting the system configurations in macOS. When I have the \"24-Hour Time\" setting unchecked, the time format should be `h:mm tt` instead of `HH:mm`\n\n### Actual behavior\n\nWhen I have the \"24-Hour Time\" setting unchecked, the time format is ignoring this setting configuration.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n  - .net5.0\r\n- What OS and version, and what distro if applicable?\r\n  - ![image](https://user-images.githubusercontent.com/1200312/140060880-11c55f32-ee73-43b2-bf32-5054d04d8291.png)\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eafvieira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-03T20:05:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45N5Yc",
                                           "createdAt":  "2021-11-03T20:13:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@afvieira thanks for the report. This is a limitation we currently have in .NET. This is something we are going to look at to support in the future releases. The workaround for that is manually read the setting from MacOS and use it for your formatting. ",
                                           "updatedAt":  "2021-11-03T20:13:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45O6Zs",
                                           "createdAt":  "2021-11-03T22:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afvieira",
                                           "body":  "\u003e @afvieira thanks for the report. This is a limitation we currently have in .NET. This is something we are going to look at to support in the future releases. The workaround for that is manually read the setting from MacOS and use it for your formatting.\r\n\r\nHi @tarekgh, thank you for your quick reply. Can you point me an example to read those settings from macOS?\r\nThanks in advance",
                                           "updatedAt":  "2021-11-03T22:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45T8g-",
                                           "createdAt":  "2021-11-05T00:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@afvieira here is a hacky example you may try. I couldn\u0027t find better way for now but when we get into this issue, we should provide a better way to read it.  For now, you may try this example. \r\n**Note, I didn\u0027t do much testing it, so make sure you test and polish it well before using it in any product.**\r\n\r\n```C#\r\nusing System;\r\nusing System.Globalization;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace NetCoreApp\r\n{\r\n    class Program\r\n    {\r\n        private static string NormalizeDateFormat(string dateFormat)\r\n        {\r\n            StringBuilder sb = new StringBuilder();\r\n            int i =0;\r\n            while (i \u003c dateFormat.Length)\r\n            {\r\n                char c = dateFormat[i];\r\n                switch (c)\r\n                {\r\n                    case \u0027G\u0027:\r\n                    case \u0027g\u0027: sb.Append(\u0027g\u0027); break;\r\n\r\n                    case \u0027y\u0027: sb.Append(\u0027y\u0027); break;\r\n                    \r\n                    case \u0027L\u0027:\r\n                    case \u0027M\u0027: sb.Append(\u0027M\u0027); break;\r\n\r\n                    case \u0027d\u0027: \r\n                    case \u0027E\u0027: sb.Append(\u0027d\u0027); break;\r\n\r\n                    case \u0027a\u0027: sb.Append(\"tt\"); break;\r\n\r\n                    case \u0027h\u0027:\r\n                    case \u0027k\u0027:\r\n                    case \u0027j\u0027: sb.Append(\u0027h\u0027); break;\r\n\r\n                    case \u0027H\u0027:\r\n                    case \u0027K\u0027:\r\n                    case \u0027J\u0027:\r\n                    case \u0027C\u0027: sb.Append(\u0027H\u0027); break;\r\n\r\n                    case \u0027m\u0027: sb.Append(\u0027m\u0027); break;\r\n\r\n                    case \u0027s\u0027: sb.Append(\u0027s\u0027); break;\r\n\r\n                    case \u0027z\u0027:\r\n                    case \u0027Z\u0027: sb.Append(\u0027z\u0027); break;\r\n\r\n                    case \u0027\\\u0027\u0027: \r\n                        sb.Append(\u0027\\\u0027\u0027);\r\n                        i++;\r\n\r\n                        while (i \u003c dateFormat.Length) \r\n                        {\r\n                            if (dateFormat[i] == \u0027\\\u0027\u0027)\r\n                            {\r\n                                sb.Append(\u0027\\\u0027\u0027);\r\n                                if (i \u003c dateFormat.Length - 1 \u0026\u0026 dateFormat[i + 1] == \u0027\\\u0027\u0027)\r\n                                {\r\n                                    sb.Append(\u0027\\\u0027\u0027);\r\n                                    i += 2;\r\n                                    continue;\r\n                                }\r\n                                break;\r\n                            }\r\n                            sb.Append(dateFormat[i]);\r\n                            i++;\r\n                        }\r\n                        break;\r\n                    \r\n                    default:\r\n                        if ((c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027) \u0026\u0026 (c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027) \u0026\u0026 c != \u0027\\r\u0027 \u0026\u0026 c != \u0027\\n\u0027)\r\n                        {\r\n                            sb.Append(c);\r\n                        }\r\n                        break;\r\n                }\r\n                i++;\r\n            }\r\n            return sb.ToString();\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            using Process process = new Process();\r\n            process.StartInfo.FileName = \"defaults\";\r\n            process.StartInfo.Arguments = \"read com.apple.menuextra.clock DateFormat\";\r\n            process.StartInfo.UseShellExecute = false;\r\n            process.StartInfo.RedirectStandardOutput = true;\r\n            process.Start();\r\n            string dateFormat = process.StandardOutput.ReadToEnd();\r\n            string normalizedDateFormat = NormalizeDateFormat(dateFormat);\r\n            Console.WriteLine($\"{dateFormat} ... {normalizedDateFormat}\");\r\n            Console.WriteLine($\"{DateTime.Now.ToString(normalizedDateFormat)}\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n",
                                           "updatedAt":  "2021-11-09T19:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w_HM8",
                                           "createdAt":  "2024-01-17T11:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPQ5Qw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LemmusLemmus",
                                                                               "createdAt":  "2025-04-22T18:01:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danipen",
                                           "body":  "The same happens for the date. See discussion https://github.com/dotnet/runtime/discussions/97083. Any progress on this?",
                                           "updatedAt":  "2024-01-17T11:12:09Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ShortTimePattern does not respect the system configuration when in macOS",
        "labels":  [
                       "area-System.Globalization",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67347",
        "createdAt":  "2022-03-30T16:22:05Z",
        "number":  67347,
        "author":  "DerFnoeh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-01T12:23:49Z",
        "body":  "### Description\r\n\r\nWhen creating a CultureInfo-Object for decimal-Parsing Linux is over 40 times slower compared to windows environments.\r\n\r\nThe differences can be easily observed by running the same program once inside a windows- and once inside a linux-container.\r\n\r\n#### Example project\r\nBuild\u0026Run the dockerfile. It will output the total time in milliseconds.\r\nhttps://github.com/DerFnoeh/PerformanceDifferencesCultureInfo\r\n\r\n### Configuration\r\n\r\n#### Laptop running windows and linux container\r\n- .NET6\r\n- DockerDesktop on Windows 10 WSL2\r\n- Image-Base: mcr.microsoft.com/dotnet/aspnet:6.0\r\n- VS2022\r\n- 32GB RAM\r\n- i7 10750H\r\n\r\n#### Performance was also affected on:\r\n- Native Ubuntu 20.04, AMD Ryzen x64\r\n- Azure AppService (Linux-Container)\r\n- Various other laptops with similiar setups\r\n\r\n\r\n### Regression?\r\n\r\nSimilar results in .NET5\r\n\r\n### Data\r\n\r\n#### Benchmark Result\r\n300ms on Windows\r\n13000ms on Linux\r\n\r\n#### Trace-Data of slow-execution:\r\nMost CPU Time was spent in the following methods.\r\n\r\n|Function Name|Total CPU \\[unit, %\\]|Self CPU \\[unit, %\\]|Module|\r\n|-|-|-|-|\r\n|\\| - System.Globalization.CultureInfo.get\\_NumberFormat\\(\\)|453550 \\(60,22 %\\)|4 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Decimal.TryParse\\(class System.String,value class System.Globalization.NumberStyles,class System.IFormatProvider,value class System.Decimal\u0026\\)|453378 \\(60,20 %\\)|3 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Globalization.NumberFormatInfo..ctor\\(class System.Globalization.CultureData\\)|453301 \\(60,19 %\\)|2 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Globalization.CultureData.GetNFIValues\\(class System.Globalization.NumberFormatInfo\\)|453261 \\(60,18 %\\)|19 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n\r\n### Analysis\r\n\r\nI spent the whole day investigating our larger-code-base to isolate this issue. Unfortunately I am not versed in the deeper details of OS-interfacing and can\u0027t provide any further insights.\r\n\r\n### Workaround\r\n\r\nInstead of instantiating CultureInfo every time it is needed, we setup a static readonly variable for it. This removed all performance drawbacks.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQLh8hA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Akqgd",
                                           "createdAt":  "2022-03-30T16:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen creating a CultureInfo-Object for decimal-Parsing Linux is over 40 times slower compared to windows environments.\r\n\r\nThe differences can be easily observed by running the same program once inside a windows- and once inside a linux-container.\r\n\r\nExample project: https://github.com/DerFnoeh/PerformanceDifferencesCultureInfo\r\n\r\n### Configuration\r\n\r\n#### Laptop running windows and linux container\r\n- .NET6\r\n- DockerDesktop on Windows 10 WSL2\r\n- Image-Base: mcr.microsoft.com/dotnet/aspnet:6.0\r\n- VS2022\r\n- 32GB RAM\r\n- i7 10750H\r\n\r\n#### Bug also appeared during troubleshooting on:\r\n- Native Ubuntu 20.04, AMD Ryzen x64\r\n- Azure AppService (Linux-Container)\r\n- Various other laptops with similiar setups\r\n\r\n\r\n### Regression?\r\n\r\nSimilar results in .NET5\r\n\r\n### Data\r\n\r\n#### Benchmark Result\r\n300ms on Windows\r\n13000ms on Linux\r\n\r\n#### Trace-Data of slow-execution:\r\nMost CPU Time was spent in the following methods.\r\n\r\n|Function Name|Total CPU \\[unit, %\\]|Self CPU \\[unit, %\\]|Module|\r\n|-|-|-|-|\r\n|\\| - System.Globalization.CultureInfo.get\\_NumberFormat\\(\\)|453550 \\(60,22 %\\)|4 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Decimal.TryParse\\(class System.String,value class System.Globalization.NumberStyles,class System.IFormatProvider,value class System.Decimal\u0026\\)|453378 \\(60,20 %\\)|3 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Globalization.NumberFormatInfo..ctor\\(class System.Globalization.CultureData\\)|453301 \\(60,19 %\\)|2 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n|\\| - System.Globalization.CultureData.GetNFIValues\\(class System.Globalization.NumberFormatInfo\\)|453261 \\(60,18 %\\)|19 \\(0,00 %\\)|System.Private.CoreLib.dll|\r\n\r\n### Analysis\r\n\r\nI spent the whole day investigating our larger-code-base to isolate this issue. Unfortunately I am not versed in the deeper details of OS-integration and can\u0027t provide any further insights.\r\n\r\n### Workaround\r\n\r\nInstead of instantiating CultureInfo every time it is needed, we setup a static readonly variable for it. This removed all performance drawbacks.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDerFnoeh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-30T16:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ak_jd",
                                           "createdAt":  "2022-03-30T17:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "![image](https://user-images.githubusercontent.com/523221/160899073-3d405b45-b4f6-42ac-9241-718fa70306aa.png)\r\n\r\nI wonder if we should cache ICU info (e.g. `GetNFIValues`) globally per culture id so all new instances of `CultureInfo` will be accessing that dictionary instead of asking ICU all the time - it is unlikely a typical app will trigger `GetNFIValues` for all the available cultures, right?",
                                           "updatedAt":  "2022-03-30T17:51:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlADS",
                                           "createdAt":  "2022-03-30T17:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCViT2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-03-30T18:26:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DerFnoeh",
                                                                               "createdAt":  "2022-03-31T07:19:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "There already exists a mechanism to get cached cultures: [`CultureInfo.GetCultureInfo(...)`](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.getcultureinfo?view=net-6.0).  Note this will return \"unmodified\" cultures (at least on Windows - see the remarks on the constructor documentation), but this may not be an issue in most cases.",
                                           "updatedAt":  "2022-03-30T17:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlKeO",
                                           "createdAt":  "2022-03-30T18:36:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCViT_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DerFnoeh",
                                                                               "createdAt":  "2022-03-31T07:19:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@DerFnoeh as @Clockwork-Muse indicated, you should use `CultureInfo.GetCultureInfo()` which already caching the created read-only instance. \r\n\r\nAlso, your test is measuring the creation of 100,000 creation instance. Does the perf numbers you mentioned are for the whole 100,000 creation? If this is correct, does that mean the difference you are seeing is around 0.1 ms per creation?  \r\n\r\nAlso, if you are using .NET 6.0, we should be executing the same code on Windows and Linux. ",
                                           "updatedAt":  "2022-03-30T18:38:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlPW8",
                                           "createdAt":  "2022-03-30T18:54:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e you should use CultureInfo.GetCultureInfo() which already caching the created read-only instance.\r\n\r\nHonestly speaking, I found myself always using `new CultureInfo(...)` pattern - can we construct it using cached data somehow?",
                                           "updatedAt":  "2022-03-30T18:54:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlUCN",
                                           "createdAt":  "2022-03-30T19:11:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Honestly speaking, I found myself always using new CultureInfo(...) pattern - can we construct it using cached data somehow?\r\n\r\nThe culture created with `new CultureInfo()` will be read-write. The issue is not during the creation itself; the issue is when asking for properties after creation (like `NumberFormat` for instance and Ensure support users override too which is picked up from the system settings too. It is possible to try to optimize but I am not sure it is worth the complication we\u0027ll add to the code while there are simpler solutions.  ",
                                           "updatedAt":  "2022-03-30T19:11:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlUoC",
                                           "createdAt":  "2022-03-30T19:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Can we then add a roslyn analyzer suggesting `CultureInfo.GetCultureInfo()` API over `new CultureInfo()`?",
                                           "updatedAt":  "2022-03-30T19:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AlbU9",
                                           "createdAt":  "2022-03-30T19:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Can we then add a roslyn analyzer suggesting CultureInfo.GetCultureInfo() API over new CultureInfo()?\r\n\r\nWill be hard to do that because it depends on the user scenario which hard to detect. Anyone wants read-write culture or need to pick the user override they will need to use `new CultureInfo`. It will be hard to have the analyzers detect the intention of the creation. We are educating the users as much as we can, especially when we spot patterns that can cause perf issues.  ",
                                           "updatedAt":  "2022-03-30T19:43:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AniDq",
                                           "createdAt":  "2022-03-31T05:54:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXZHAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DerFnoeh",
                                                                               "createdAt":  "2022-03-31T08:10:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-11T09:17:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "\u003e Can we then add a roslyn analyzer suggesting `CultureInfo.GetCultureInfo()` API over `new CultureInfo()`?\r\n\r\nDocs already say about this one. But the analyzer will be helpful as well. \r\n![image](https://user-images.githubusercontent.com/17148381/160985908-efb0924f-7398-4518-ae68-9deb11992d66.png)\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.getcultureinfo?view=net-6.0\r\n",
                                           "updatedAt":  "2022-03-31T05:54:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5An21u",
                                           "createdAt":  "2022-03-31T07:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DerFnoeh",
                                           "body":  "\u003e @DerFnoeh as @Clockwork-Muse indicated, you should use `CultureInfo.GetCultureInfo()` which already caching the created read-only instance.\r\n\r\nThanks for the suggestion, we already removed the huge performance impact by using a static variable for the CultureInfo. But I will update our solution to use `CultureInfo.GetCultureInfo()`\r\n\r\n\u003e Also, your test is measuring the creation of 100,000 creation instance. Does the perf numbers you mentioned are for the whole 100,000 creation? If this is correct, does that mean the difference you are seeing is around 0.1 ms per creation?\r\n\r\nYes, the issue occurs when creating the object 100.000 times, so 0.1ms per creation. Which isn\u0027t huge but adds up quite rapidly.\r\n\r\n\u003e Also, if you are using .NET 6.0, we should be executing the same code on Windows and Linux.\r\n\r\nI\u0027m not sure what you mean by that. But I did not do any adjustments to the code when changing between Linux and Windows Containers.\r\n",
                                           "updatedAt":  "2022-03-31T07:19:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AqOIy",
                                           "createdAt":  "2022-03-31T16:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e But the analyzer will be helpful as well.\r\n\r\nHow do you implement this analyzer? There are legitimate scenarios to use `new CultureInfo(...)`. I am not seeing easy way to detect the user intention.  ",
                                           "updatedAt":  "2022-03-31T16:20:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AqOlf",
                                           "createdAt":  "2022-03-31T16:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I\u0027m not sure what you mean by that.\r\n\r\nI mean is, in .NET 6.0 we are using ICU library when running on Windows and Linux. The code path is the same. So, I am not expecting any noticeable perf difference there.  ",
                                           "updatedAt":  "2022-03-31T16:22:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AqPFY",
                                           "createdAt":  "2022-03-31T16:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCVy7tA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DerFnoeh",
                                                                               "createdAt":  "2022-04-01T12:14:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Yes, the issue occurs when creating the object 100.000 times, so 0.1ms per creation. Which isn\u0027t huge but adds up quite rapidly.\r\n\r\nI am going to change the title of this issue to reflect that.",
                                           "updatedAt":  "2022-03-31T16:24:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AuHyE",
                                           "createdAt":  "2022-04-01T12:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DerFnoeh",
                                           "body":  "\u003e I mean is, in .NET 6.0 we are using ICU library when running on Windows and Linux. The code path is the same. So, I am not expecting any noticeable perf difference there.\r\n\r\nStrange, but the measured differences are huge (when multiplied, to be fair).\r\n\r\nAre you able to reproduce the issue (the original post includes a sample dockerfile)? Or was it just bad luck that we only saw it on linux?",
                                           "updatedAt":  "2022-04-01T12:23:49Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "CultureInfo creation is slower on Linux by 0.1 millisecond compared to Windows. ",
        "labels":  [
                       "area-System.Globalization",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67562",
        "createdAt":  "2022-04-04T20:34:58Z",
        "number":  67562,
        "author":  "serhiisolodovnyk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:26:43Z",
        "body":  "Hello! \r\nI noticed that formatting the date string containing the \\u200f character is incorrect. \r\nI can\u0027t reproduce this issue on my local machine, but it appears in the online compiler and in the Azure WebApp.\r\n\r\nwith symbol \u0027`\\u200f`\u0027 in format string (expected `24/2/2022` instead of `24‏/2‏/2022`):\r\n![image](https://user-images.githubusercontent.com/70412527/161627268-6c4f3962-8c70-4219-b4e8-a9966480c509.png)\r\n\r\n\r\nwithout \u0027`\\u200f`\u0027:\r\n![image](https://user-images.githubusercontent.com/70412527/161627355-e04e77f2-94ef-4634-91a7-73f4c40c510c.png)\r\n\r\ncode for reproducing:\r\nhttps://dotnetfiddle.net/NahJuV\r\n\r\n```\r\nusing System;\r\nusing System.Linq;\r\nusing System.Globalization;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\t\r\n\tprivate static readonly DateTime ExampleDateTime = new DateTime(2022, 2, 24, 5, 1, 0);\r\n\tpublic static void Main()\r\n\t{\r\n\t\t\r\n\t\t var l = CultureInfo.GetCultures(CultureTypes.AllCultures \u0026 ~CultureTypes.SpecificCultures)\r\n\t\t\t .Select(culture =\u003e (culture.DateTimeFormat.ShortDatePattern /*.Replace(\"\\u200f\", string.Empty) */ , culture.DisplayName))\r\n\t\t\t .DistinctBy(s =\u003e s.Item1);\r\n\t\t\r\n\t\tforeach(var cul in l)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"{cul.Item2} {cul.Item1} {ExampleDateTime.ToString(cul.Item1)} \\n\");\r\n\t\t}\r\n\t}\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQNvvZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A20xp",
                                           "createdAt":  "2022-04-04T23:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello! \r\nI noticed that formatting the date string containing the \\u200f character is incorrect. \r\nI can\u0027t reproduce this issue on my local machine, but it appears in the online compiler and in the Azure WebApp.\r\n\r\nwith symbol \u0027`\\u200f`\u0027 in format string (expected `24/2/2022` instead of `24‏/2‏/2022`):\r\n![image](https://user-images.githubusercontent.com/70412527/161627268-6c4f3962-8c70-4219-b4e8-a9966480c509.png)\r\n\r\n\r\nwithout \u0027`\\u200f`\u0027:\r\n![image](https://user-images.githubusercontent.com/70412527/161627355-e04e77f2-94ef-4634-91a7-73f4c40c510c.png)\r\n\r\ncode for reproducing:\r\nhttps://dotnetfiddle.net/NahJuV\r\n\r\n```\r\nusing System;\r\nusing System.Linq;\r\nusing System.Globalization;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\t\r\n\tprivate static readonly DateTime ExampleDateTime = new DateTime(2022, 2, 24, 5, 1, 0);\r\n\tpublic static void Main()\r\n\t{\r\n\t\t\r\n\t\t var l = CultureInfo.GetCultures(CultureTypes.AllCultures \u0026 ~CultureTypes.SpecificCultures)\r\n\t\t\t .Select(culture =\u003e (culture.DateTimeFormat.ShortDatePattern /*.Replace(\"\\u200f\", string.Empty) */ , culture.DisplayName))\r\n\t\t\t .DistinctBy(s =\u003e s.Item1);\r\n\t\t\r\n\t\tforeach(var cul in l)\r\n\t\t{\r\n\t\t\tConsole.WriteLine($\"{cul.Item2} {cul.Item1} {ExampleDateTime.ToString(cul.Item1)} \\n\");\r\n\t\t}\r\n\t}\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eserhiisolodovnyk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-04T23:27:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A2-9k",
                                           "createdAt":  "2022-04-05T00:42:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e with symbol \u0027\\u200f\u0027 in format string (expected 24/2/2022 instead of 24‏/2‏/2022):\r\n\r\nThe layout of the text depends on the rendering context. I mean if you want to render the text as right-to-left or left-to-right. The same text layout can change according to this rendering context. You can learn more about that in [UNICODE BIDIRECTIONAL ALGORITHM](https://unicode.org/reports/tr9/). \r\n\r\n.NET doesn\u0027t control the rendering, but it just returns the text.  As .NET started using ICU library, ICU return the date/time pattern including some marks for rendering (as in this case inserting the RTM `\\u200F`). \r\n\r\nWe are considering removing these marks from the text as it is causing a lot of confusion. Here is similar issue but with number formatting https://github.com/dotnet/runtime/issues/60590.",
                                           "updatedAt":  "2022-04-05T00:43:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Incorrect behavior of the ToString () method when converting DateTime by format string",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67873",
        "createdAt":  "2022-04-11T21:14:26Z",
        "number":  67873,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCy6Q9Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2022-04-12T13:30:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-09-28T11:52:35Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:39:13Z",
        "body":  "Per the following two documents, comparing strings using `StringComparison.OrdinalIgnoreCase` is explicitly documented as equivalent to calling `ToUpperInvariant` on each string, then performing an ordinal comparison against the contents.\r\n\r\n- https://docs.microsoft.com/dotnet/api/system.stringcomparer.ordinalignorecase#remarks\r\n- https://docs.microsoft.com/dotnet/standard/base-types/best-practices-strings#ordinal-string-operations\r\n\r\nThese statements within the docs imply that _ToUpperInvariant_ and _ToLowerInvariant_ are ordinal case conversions (\"simple case mapping\"), not linguistic case conversions. However, it looks like we\u0027re not consistenly following this pattern.\r\n\r\n```cs\r\nstring s1 = \"s\";\r\nstring s2 = \"\\u017f\"; // Latin Sharp S, which uppercase-maps to a normal ASCII \"S\"\r\nConsole.WriteLine(s1.Equals(s2, StringComparison.OrdinalIgnoreCase)); // False\r\nConsole.WriteLine(s1.ToUpperInvariant() == s2.ToUpperInvariant()); // True\r\n```\r\n\r\nThis has collateral impact. For example, recent PRs like https://github.com/dotnet/runtime/pull/67758 assume that non-ASCII characters cannot case-map to ASCII characters, which is [not a guarantee offered by Unicode](https://unicode.org/faq/casemap_charprop.html), but which might be a guarantee we\u0027d be willing to make separately within the runtime by munging the Unicode tables.\r\n\r\nSee also https://github.com/dotnet/runtime/issues/30960 for further discussion on case mapping as a more general Unicode concept.\r\n\r\n/cc @tarekgh, who had thoughts on this offline.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2o8ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BTRuz",
                                           "createdAt":  "2022-04-11T21:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPer the following two documents, comparing strings using `StringComparison.OrdinalIgnoreCase` is explicitly documented as equivalent to calling `ToUpperInvariant` on each string, then performing an ordinal comparison against the contents.\r\n\r\n- https://docs.microsoft.com/dotnet/api/system.stringcomparer.ordinalignorecase#remarks\r\n- https://docs.microsoft.com/dotnet/standard/base-types/best-practices-strings#ordinal-string-operations\r\n\r\nThese statements within the docs imply that _ToUpperInvariant_ and _ToLowerInvariant_ are ordinal case conversions (\"simple case mapping\"), not linguistic case conversions. However, it looks like we\u0027re not consistenly following this pattern.\r\n\r\n```cs\r\nstring s1 = \"s\";\r\nstring s2 = \"\\u017f\"; // Latin Sharp S, which uppercase-maps to a normal ASCII \"S\"\r\nConsole.WriteLine(s1.Equals(s2, StringComparison.OrdinalIgnoreCase)); // False\r\nConsole.WriteLine(s1.ToUpperInvariant() == s2.ToUpperInvariant()); // True\r\n```\r\n\r\nThis has collateral impact. For example, recent PRs like https://github.com/dotnet/runtime/pull/67758 assume that non-ASCII characters cannot case-map to ASCII characters, which is [not a guarantee offered by Unicode](https://unicode.org/faq/casemap_charprop.html), but which might be a guarantee we\u0027d be willing to make separately within the runtime by munging the Unicode tables.\r\n\r\nSee also https://github.com/dotnet/runtime/issues/30960 for further discussion on case mapping as a more general Unicode concept.\r\n\r\n/cc @tarekgh, who had thoughts on this offline.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGrabYourPitchforks\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-11T21:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hajx7",
                                           "createdAt":  "2024-08-06T18:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@tarekgh is there anything planned for this issue in .NET 9.0?",
                                           "updatedAt":  "2024-08-06T18:22:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "StringComparison.OrdinalIgnoreCase does not consistently match ToUpperInvariant",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73237",
        "createdAt":  "2022-08-02T14:51:49Z",
        "number":  73237,
        "author":  "VadimPeczynski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-22T20:44:12Z",
        "body":  "### Description\n\nI want to get operating system language on Mac Big Sur with .NET 6 and .NET 7 preview 6, but it is always returning en. Tested for de, pt and pl\n\n### Reproduction Steps\n\nCan be reproduced with this code snippet:\r\n\r\nusing System;\r\nusing System.Globalization;\r\n\r\nConsole.WriteLine($\"Language UI Culture: {CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}\");\r\nConsole.WriteLine($\"Language Current Culture: {CultureInfo.CurrentCulture.TwoLetterISOLanguageName}\");\r\nConsole.WriteLine($\"Language Installed Culture: {CultureInfo.InstalledUICulture.TwoLetterISOLanguageName}\");\n\n### Expected behavior\n\nLanguage UI Culture: de\r\nLanguage Current Culture: de\r\nLanguage Installed Culture: de\n\n### Actual behavior\n\nLanguage UI Culture: en\r\nLanguage Current Culture: en\r\nLanguage Installed Culture: en\n\n### Regression?\n\nIt is not working in .NET 5, .NET 6 and .NET 7 preview 6\r\n\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdNd7BQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HsGNr",
                                           "createdAt":  "2022-08-02T14:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI want to get operating system language on Mac Big Sur with .NET 6 and .NET 7 preview 6, but it is always returning en. Tested for de, pt and pl\n\n### Reproduction Steps\n\nCan be reproduced with this code snippet:\r\n\r\nusing System;\r\nusing System.Globalization;\r\n\r\nConsole.WriteLine($\"Language UI Culture: {CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}\");\r\nConsole.WriteLine($\"Language Current Culture: {CultureInfo.CurrentCulture.TwoLetterISOLanguageName}\");\r\nConsole.WriteLine($\"Language Installed Culture: {CultureInfo.InstalledUICulture.TwoLetterISOLanguageName}\");\n\n### Expected behavior\n\nLanguage UI Culture: de\r\nLanguage Current Culture: de\r\nLanguage Installed Culture: de\n\n### Actual behavior\n\nLanguage UI Culture: en\r\nLanguage Current Culture: en\r\nLanguage Installed Culture: en\n\n### Regression?\n\nIt is not working in .NET 5, .NET 6 and .NET 7 preview 6\r\n\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVadimPeczynski\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T14:52:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hs-Sq",
                                           "createdAt":  "2022-08-02T16:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveisok this is the same issue I believe you have fixed but I am not sure if your fix was in P6? Could you please have a look? Also, please triage this issue.\r\n\r\nThis is not expected to work on .NET 5.0 not .NET 6.0.",
                                           "updatedAt":  "2022-08-02T16:42:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ht-OL",
                                           "createdAt":  "2022-08-02T21:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e @steveisok this is the same issue I believe you have fixed but I am not sure if your fix was in P6? Could you please have a look? Also, please triage this issue.\r\n\u003e \r\n\u003e This is not expected to work on .NET 5.0 not .NET 6.0.\r\n\r\nFor desktop, the change I made was a backstop in the event your `LANG` environment variable was not set.  On OSX, it should always be set and change when you alter your preferred language and region.  \r\n\r\n@VadimPeczynski can you confirm your `LANG` environment variable is set to the language / region you want?",
                                           "updatedAt":  "2022-08-02T21:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HvyE3",
                                           "createdAt":  "2022-08-03T09:28:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VadimPeczynski",
                                           "body":  "@steveisok @tarekgh thank you for your response. \r\nYes, lang variable is set to the proper language e.g. for **pl**:\r\n\r\n\u003e LANG=\"pl_PL.UTF-8\"\r\n\r\nbut for **de** and **pt** I\u0027m getting:\r\n\r\n\u003e LANG=\"\"",
                                           "updatedAt":  "2022-08-03T09:45:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hyp7E",
                                           "createdAt":  "2022-08-03T20:41:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Strange, I would have expected osx to set that for you when you change languages.  Does it ask you to reboot?  I\u0027ll have to see if I can get a Big Sur machine to test on.",
                                           "updatedAt":  "2022-08-03T20:41:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HyyXA",
                                           "createdAt":  "2022-08-03T21:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VadimPeczynski",
                                           "body":  "Yes, I have tried it with automatic restart (just after language change)\r\nand manuał restart (reject restart and did it from main menu). Weirdly I\u0027m\r\ngetting only value for polish language (default installed) and not for\r\nlanguages installed later. I can also check this on Mac Monterey after system update",
                                           "updatedAt":  "2022-08-03T21:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50miPa",
                                           "createdAt":  "2024-02-21T09:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cmoaciopm",
                                           "body":  "@tarekgh I have met the same issue as well. The localization of my app on MacOS doesn\u0027t work as expected. Is there any plan to fix this issue? Thanks.",
                                           "updatedAt":  "2024-02-21T09:57:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50qSOF",
                                           "createdAt":  "2024-02-21T16:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveisok could you please help with @cmoaciopm question https://github.com/dotnet/runtime/issues/73237#issuecomment-1956258778?",
                                           "updatedAt":  "2024-02-21T16:39:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50wTy3",
                                           "createdAt":  "2024-02-22T06:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jane-mao",
                                           "body":  "I have met the same issue as well.\r\nThe issue seems to be related to non-standard culture combinations that Mac OS supports. If any of the standard combinations are used (examples: en-US, en-GB, fr-FR, fr-CA, nl-NL) the issue seemingly does not occur.\r\n\r\nAs soon as I start mixing the language and region, e.g. ja-CN, ko-CN, fr-CN, then the issue occurs, the `Thread.CurrentThread.CurrentCulture` and `Thread.CurrentThread.CurrentUICulture` were `en-CN`, and I got the empty LANG.",
                                           "updatedAt":  "2024-02-22T07:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc500MVI",
                                           "createdAt":  "2024-02-22T16:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveisok please help or redirect as needed. Thanks!",
                                           "updatedAt":  "2024-02-22T16:41:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc500Ve5",
                                           "createdAt":  "2024-02-22T17:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e I have met the same issue as well. The issue seems to be related to non-standard culture combinations that Mac OS supports. If any of the standard combinations are used (examples: en-US, en-GB, fr-FR, fr-CA, nl-NL) the issue seemingly does not occur.\r\n\u003e \r\n\u003e As soon as I start mixing the language and region, e.g. ja-CN, ko-CN, fr-CN, then the issue occurs, the `Thread.CurrentThread.CurrentCulture` and `Thread.CurrentThread.CurrentUICulture` were `en-CN`, and I got the empty LANG.\r\n\r\nThe empty `LANG` appears to be the problem as that\u0027s something ICU reads directly. We call `uloc_getDefault` first and if it returns us anything other than `en_US_POSIX`, we\u0027ll take it. In the case of `en_US_POSIX`, on apple platforms we\u0027ll ask the `NSLocale` api\u0027s what it thinks the value is. \r\n\r\n@tarekgh one way to fix this would be to always defer to the `NSLocale` api\u0027s. That happens on iOS already, but would be a change on desktop. Thoughts?",
                                           "updatedAt":  "2024-02-22T17:01:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc501273",
                                           "createdAt":  "2024-02-22T20:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e one way to fix this would be to always defer to the NSLocale api\u0027s. That happens on iOS already, but would be a change on desktop. Thoughts?\r\n\r\nIf calling `NSLocale` APIs already I expect you\u0027ll get the correct default locale on MAC. Why this is not happening? I assume at that time you are not going to the path calling `uloc_getDefault` anyway. right?",
                                           "updatedAt":  "2024-02-22T20:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5013sF",
                                           "createdAt":  "2024-02-22T20:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "oh, sorry, this is done on iOS. I think it make sense to do it on Mac too. I think this should work. \r\n\r\nNote, https://github.com/dotnet/runtime/issues/61148 is a related issues which may consider it when fixing this issue. ",
                                           "updatedAt":  "2024-02-22T20:44:12Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "CultureInfo is not returning proper system language on Mac Big Sur (Version 11.6) M1 (ARM64)",
        "labels":  [
                       "area-System.Globalization",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76437",
        "createdAt":  "2022-09-30T10:44:17Z",
        "number":  76437,
        "author":  "narcis-ro",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-01T19:06:40Z",
        "body":  "### Description\n\nCurrencySymbol for culture \"ro-RO\" has changed between .Net Framework and .Net 6. The correct symbol is `lei` (as it was in .net 4.8)\n\n### Reproduction Steps\n\n```\r\n            Console.OutputEncoding = System.Text.Encoding.UTF8;\r\n\r\n            CultureInfo.CurrentCulture = new CultureInfo(\"ro-RO\");\r\n            CultureInfo.CurrentUICulture = new CultureInfo(\"ro-RO\");\r\n\r\n            CultureInfo culture1 = CultureInfo.CurrentCulture;\r\n            Console.WriteLine(\"The current culture is {0} -\u003e {1}\", culture1.Name, culture1.DisplayName);\r\n            CultureInfo uiCulture2 = CultureInfo.CurrentUICulture;\r\n            Console.WriteLine(\"The current UI culture is {0} -\u003e {1}\\n\", uiCulture2.Name, culture1.DisplayName);\r\n\r\n            Console.WriteLine();\r\n\r\n            RegionInfo myRI1 = new RegionInfo(\"RO\");\r\n            Console.WriteLine(\"   Name:                         {0}\", myRI1.Name);\r\n            Console.WriteLine(\"   DisplayName:                  {0}\", myRI1.DisplayName);\r\n            Console.WriteLine(\"   EnglishName:                  {0}\", myRI1.EnglishName);\r\n            Console.WriteLine(\"   IsMetric:                     {0}\", myRI1.IsMetric);\r\n            Console.WriteLine(\"   ThreeLetterISORegionName:     {0}\", myRI1.ThreeLetterISORegionName);\r\n            Console.WriteLine(\"   ThreeLetterWindowsRegionName: {0}\", myRI1.ThreeLetterWindowsRegionName);\r\n            Console.WriteLine(\"   TwoLetterISORegionName:       {0}\", myRI1.TwoLetterISORegionName);\r\n            Console.WriteLine(\"   CurrencySymbol:               {0}\", myRI1.CurrencySymbol);\r\n            Console.WriteLine(\"   ISOCurrencySymbol:            {0}\", myRI1.ISOCurrencySymbol);\r\n\r\n            Console.ReadLine();\r\n```\n\n### Expected behavior\n\nCurrencySymbol is \"lei\"\r\n\r\n![image](https://user-images.githubusercontent.com/51541214/193252657-9e242667-06bd-4ce9-a747-ea843a08cc0b.png)\r\n\n\n### Actual behavior\n\nCurrencySymbol is \"RON\"\r\n\r\n![image](https://user-images.githubusercontent.com/51541214/193252690-1fc5299e-e90d-4c20-8073-ee10e0d2938c.png)\r\n\n\n### Regression?\n\nRegression from .net 4.8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWin10 - x64\r\n.net core sdk 6.0.400\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS14QIQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LTi0O",
                                           "createdAt":  "2022-09-30T10:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCurrencySymbol for culture \"ro-RO\" has changed between .Net Framework and .Net 6. The correct symbol is `lei` (as it was in .net 4.8)\n\n### Reproduction Steps\n\n```\r\n            Console.OutputEncoding = System.Text.Encoding.UTF8;\r\n\r\n            CultureInfo.CurrentCulture = new CultureInfo(\"ro-RO\");\r\n            CultureInfo.CurrentUICulture = new CultureInfo(\"ro-RO\");\r\n\r\n            CultureInfo culture1 = CultureInfo.CurrentCulture;\r\n            Console.WriteLine(\"The current culture is {0} -\u003e {1}\", culture1.Name, culture1.DisplayName);\r\n            CultureInfo uiCulture2 = CultureInfo.CurrentUICulture;\r\n            Console.WriteLine(\"The current UI culture is {0} -\u003e {1}\\n\", uiCulture2.Name, culture1.DisplayName);\r\n\r\n            Console.WriteLine();\r\n\r\n            RegionInfo myRI1 = new RegionInfo(\"RO\");\r\n            Console.WriteLine(\"   Name:                         {0}\", myRI1.Name);\r\n            Console.WriteLine(\"   DisplayName:                  {0}\", myRI1.DisplayName);\r\n            Console.WriteLine(\"   EnglishName:                  {0}\", myRI1.EnglishName);\r\n            Console.WriteLine(\"   IsMetric:                     {0}\", myRI1.IsMetric);\r\n            Console.WriteLine(\"   ThreeLetterISORegionName:     {0}\", myRI1.ThreeLetterISORegionName);\r\n            Console.WriteLine(\"   ThreeLetterWindowsRegionName: {0}\", myRI1.ThreeLetterWindowsRegionName);\r\n            Console.WriteLine(\"   TwoLetterISORegionName:       {0}\", myRI1.TwoLetterISORegionName);\r\n            Console.WriteLine(\"   CurrencySymbol:               {0}\", myRI1.CurrencySymbol);\r\n            Console.WriteLine(\"   ISOCurrencySymbol:            {0}\", myRI1.ISOCurrencySymbol);\r\n\r\n            Console.ReadLine();\r\n```\n\n### Expected behavior\n\nCurrencySymbol is \"lei\"\r\n\r\n![image](https://user-images.githubusercontent.com/51541214/193252657-9e242667-06bd-4ce9-a747-ea843a08cc0b.png)\r\n\n\n### Actual behavior\n\nCurrencySymbol is \"RON\"\r\n\r\n![image](https://user-images.githubusercontent.com/51541214/193252690-1fc5299e-e90d-4c20-8073-ee10e0d2938c.png)\r\n\n\n### Regression?\n\nRegression from .net 4.8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWin10 - x64\r\n.net core sdk 6.0.400\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enarcis-ro\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-30T10:44:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LUSrx",
                                           "createdAt":  "2022-09-30T13:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtGWqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "narcis-ro",
                                                                               "createdAt":  "2022-09-30T13:59:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "I\u0027m currently physically in Romania, and was wondering why I was seeing two different sets of currency designations....\r\n\r\nAnyways, the actual issue here is (almost certainly) that [.NET switched over to ICU on Windows](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu) - there\u0027s no bug in .NET per se (and wouldn\u0027t have been before this either, because this sort of data was maintained by the Windows OS).\r\nYou can try switching to use the legacy NLS as documented (at least to verify the source of the issue), but the recommendation is to migrate to use the ICU source.  Note that there was never a guarantee that the NLS would always return the same data in the first place.\r\n\r\nYou could potentially report this to the ICU maintainers as a data bug.",
                                           "updatedAt":  "2022-09-30T13:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LU-mD",
                                           "createdAt":  "2022-09-30T16:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Clockwork-Muse is correct. CLDR Unicode standard is defining the currency symbol as [RON](https://github.com/unicode-org/cldr/blob/d70f5d0d6ddc3f68899c3e8f7bce2569370160d1/common/main/ro.xml#L7740). You can open a [CLDR Ticket](https://unicode-org.atlassian.net/jira/software/c/projects/CLDR/issues/) for that you are sure the currency symbol is wrong. You can switch to [NLS mode](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#use-nls-instead-of-icu) if needed too. \r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-09-30T16:40:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LVAmp",
                                           "createdAt":  "2022-09-30T16:49:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "narcis-ro",
                                           "body":  "@tarekgh the bug is that it doesn’t read the narrow symbol.\r\n\r\nextract from the link you provided:\r\n\r\n```\r\n\r\n\u003ccurrency type=\"RON\"\u003e\r\n\t\t\t\t\u003cdisplayName\u003eleu românesc\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"one\"\u003eleu românesc\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"few\"\u003elei românești\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"other\"\u003elei românești\u003c/displayName\u003e\r\n\t\t\t\t\u003csymbol\u003eRON\u003c/symbol\u003e\r\n\t\t\t\t\u003csymbol alt=\"narrow\"\u003elei\u003c/symbol\u003e\r\n\t\t\t\u003c/currency\u003e\r\n\r\n```\r\n\r\nISOCurrencySymbol would be RON and CurrencySymbol would be the narrow version “lei”. So the CLDR is correct!\r\n\r\n\r\nCheck american dolar for example:\r\n```\r\n\u003ccurrency type=\"USD\"\u003e\r\n\t\t\t\t\u003cdisplayName\u003edolar american\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"one\"\u003edolar american\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"few\"\u003edolari americani\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"other\"\u003edolari americani\u003c/displayName\u003e\r\n\t\t\t\t\u003csymbol\u003eUSD\u003c/symbol\u003e\r\n\t\t\t\t\u003csymbol alt=\"narrow\"\u003e$\u003c/symbol\u003e\r\n\t\t\t\u003c/currency\u003e\r\n```",
                                           "updatedAt":  "2022-09-30T16:49:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LVdCG",
                                           "createdAt":  "2022-09-30T18:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@narcis-ro you are right about the data, but .NET is not reading the data directly. Instead, we use ICU APIs to read the data. We are calling the ICU with the correct information and that is what is returning `RON`.  You may look at [ICU Locale “Romanian (Romania)” (ro_RO)](https://www.localeplanet.com/icu/ro-RO/index.html) which shows the same result. Also looking at [Supported Currencies (ICU)](https://help.salesforce.com/s/articleView?id=sf.admin_supported_currencies.htm\u0026type=5) which also shows the numbers formatted with `RON` for Romanian culture:\r\n\r\n```\r\nRomanian (Romania)ro_RO | Leu românesc | RON | 1.234.567,57 RON-1.234.567,57 RON\r\n```\r\n\r\nIt may be worth [opening the ticket to ICU](https://unicode-org.atlassian.net/jira/software/c/projects/ICU/issues/) instead of CLDR. and here is the ICU calling code showing the problem:\r\n\r\n```C\r\n    UErrorCode status = U_ZERO_ERROR;\r\n    UChar value[100];\r\n\r\n    UNumberFormat* pFormat = unum_open(UNUM_DECIMAL, NULL, 0, \"ro_RO\", NULL, \u0026status);\r\n    int32_t l = unum_getSymbol(pFormat, UNUM_CURRENCY_SYMBOL, value, 100, \u0026status);\r\n    printf(\"Currency Symbole: %ls \\n\", value);   \u003c\u003c\u003c\u003c\u003c this print RON \r\n    unum_close(pFormat);\r\n\r\n```",
                                           "updatedAt":  "2022-09-30T19:00:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LVegO",
                                           "createdAt":  "2022-09-30T19:06:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I\u0027ll look more here to see if there is a way, we can read the narrow currency symbol from ICU. I\u0027ll try to report back here. But in general, we need to confirm which symbol is correct for `ro_RO` as it looks both are correct. otherwise, `RON` wouldn\u0027t be listed as a symbol.  ",
                                           "updatedAt":  "2022-09-30T19:06:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LVhbF",
                                           "createdAt":  "2022-09-30T19:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "narcis-ro",
                                           "body":  "Before operning the ticket I did find this ICU issue reported 4 years ago:\r\nhttps://unicode-org.atlassian.net/plugins/servlet/mobile?originPath=%2Fbrowse%2FCLDR-9464#issue/CLDR-9464\r\n\r\nIt seems at that time the narrow symbol was missing indeed. In the meantime it was added to both ICU and CLDR\r\n\r\nwhat is weird thst ICU for c++ does read it correctly.\r\n\r\nhttps://github.com/unicode-org/icu/blob/dcd19ae9bc0914f8be439a2de1a5fbc17e7b5447/icu4c/source/data/curr/ro.txt\r\n\r\nThe root is the same:\r\n\r\nhttps://github.com/unicode-org/icu/blob/64b35481263ac4df37a28a9c549553ecc9710db2/icu4c/source/data/curr/root.txt\r\n\r\nThe [link](https://www.localeplanet.com/icu/ro-RO/index.html) to localeplanet displays wrong info too. Same as the link to sales force. \r\nAs native Romanian, I can guarantee 100% that “lei” is the narrow symbol, and used in the country for any day to day use.\r\nhttps://st.unicode.org/cldr-apps/v#/ro/C_SEEurope/77b33e6ae2756b1b Shows correct info.\r\n",
                                           "updatedAt":  "2022-09-30T19:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LV9pe",
                                           "createdAt":  "2022-09-30T21:40:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The question that I don\u0027t have a clear answer for is, why does CLDR list `RON` as a currency symbol if it is not correct? Is this means it is correct to use it too as currency symbol? I trust you `lei` is correct, so why not just use it as currency symbol and remove `RON`? \r\n\r\nYou have pointed at American dollar example, but this snippet was not from the `en` locale file, look at the data from `en` file and it is clear there and not listing `$` as narrow symbol. Instead, it is just the currency symbol. \r\n\r\n```Xml\r\n\t\t\t\u003ccurrency type=\"USD\"\u003e\r\n\t\t\t\t\u003cdisplayName\u003eUS Dollar\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"one\"\u003eUS dollar\u003c/displayName\u003e\r\n\t\t\t\t\u003cdisplayName count=\"other\"\u003eUS dollars\u003c/displayName\u003e\r\n\t\t\t\t\u003csymbol\u003e$\u003c/symbol\u003e\r\n\t\t\t\u003c/currency\u003e\r\n```\r\nhttps://github.com/unicode-org/cldr/blob/d70f5d0d6ddc3f68899c3e8f7bce2569370160d1/common/main/en.xml#L5946\r\n\r\nSo, I expect the same for Romanian symbol to list `lei` as the currency symbol and not just the narrow one. Also, having ICU returning `RON` as a currency symbol for `ro_RO` looks incorrect if `lei` should be the one. right? \r\n\r\nCurrently .NET doesn\u0027t provide any option to choose using a narrow currency symbol instead of the listed currency symbol. This will be a feature request and not just a bug fix.",
                                           "updatedAt":  "2022-09-30T21:53:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LWuY6",
                                           "createdAt":  "2022-10-01T05:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "narcis-ro",
                                           "body":  "When you [click](https://st.unicode.org/cldr-apps/v#/ro/C_SEEurope/3f063922920fd8)  on the narrow form it gives you the following explanation.\r\n\r\n\r\n```\r\nThe NARROW form of the symbol used for the currency with the ISO currency code = RON, when the known context is already enough to distinguish the symbol from other currencies that may use the same symbol. Normally, this does not need to be changed from the inherited value. For more information, see https://cldr.unicode.org/translation/currency-names-and-symbols.\r\n```\r\n\r\nFollowing that [link](https://cldr.unicode.org/translation/currency-names-and-symbols) to the rules of symbols:\r\n\r\n\r\n```\r\n1. If a symbol is not widely recognized around the world (eg shekel ₪)\r\n        1. Where the currency is official in a country, use that symbol in locales with that country (eg IL)\r\n        2. Where the currency would be widely recognized by users of a language, use it in the base language locale (eg he/iw).\r\n```\r\n\r\nUse of **alt** is detailed in that link [currency process](https://cldr.unicode.org/index/cldr-spec/currency-process) mentioned on the rules page. In our case it we be rule 1.2 from above. **lei** is `widely` recognized by romanians\r\n\r\nThe dolar $ is widely recognized and uses different [rule]( https://cldr.unicode.org/translation/currency-names-and-symbols)\r\n\r\n```\r\n2. Otherwise the symbol is widely recognized. If the symbol is used for only one currency (eg €) or widely recognized as being a given currency (eg £):\r\n\r\n        1. Use that symbol in root.\r\n        2. If it wouldn\u0027t be recognized in particular countries or among particular language users, in those locales/countries use the international currency code (eg EUR) or another replacement (see below). These other symbols have to be listed explicitly, so that they override root.\r\n```\r\n\r\nThat’s why you see the symbol directly as $ for en US without need for **alt** / **narrow**\r\n\r\nSo I guess the **bug** for .net is not reading the **alt** aka **narrow** symbol when available for a culture\r\n",
                                           "updatedAt":  "2022-10-01T05:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LXfig",
                                           "createdAt":  "2022-10-01T18:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@narcis-ro thanks for the details. This is helpful. I am reopening this issue. ",
                                           "updatedAt":  "2022-10-01T18:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LXhAh",
                                           "createdAt":  "2022-10-01T19:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "narcis-ro",
                                           "body":  "@tarekgh glad I could be of any help.",
                                           "updatedAt":  "2022-10-01T19:06:40Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "CurrencySymbol wrong in .Net ^ ",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77200",
        "createdAt":  "2022-10-19T06:24:04Z",
        "number":  77200,
        "author":  "Gnbrkm41",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9lRpQ==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "hummy123",
                                            "createdAt":  "2022-12-19T19:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduarddejong",
                                            "createdAt":  "2023-01-01T16:45:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neme12",
                                            "createdAt":  "2023-08-23T21:34:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Neme12",
                                            "createdAt":  "2023-08-23T21:34:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-11-04T04:52:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-06-02T17:41:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dubzer",
                                            "createdAt":  "2024-10-05T10:21:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2024-12-18T19:47:02Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2023-08-23T20:40:34Z",
        "body":  "(Not marked as an API proposal because I think it definitely needs some more designing before putting one up)\r\n\r\nWhen handling Unicode strings, you quickly realise that strings can be split into many different units. For example, there\u0027s raw, minimum byte units of the encoding used (`char` in case of UTF-16 / `byte` in case of UTF-8 / `int` in case of UTF-32), there\u0027s codepoints (`System.Rune`) then grapheme clusters (\"Text element\"). There exists a lot of cases where all those mean the same thing (e.g. normalised strings containing all BMP characters encoded in UTF-16), however not always.\r\n\r\nWidespread usage of emojis (but not limited to) in modern applications means developers may be faced with a situation they run into situations where they need to work with individual grapheme clusters, especially in handling arbitrary user-supplied strings for display in UI.\r\n\r\nFor example, one may want to truncate long user-supplied strings for display on UI, and let users decide if they want to see the full text by clicking \"Read more\" button. Naive implementation of this would be just taking a substring of the full string... however this proves to be problematic in certain cases involving emojis for example, as shown in the example below (not an endorsement or anything, just something I ran into a few days ago):\r\n\r\n![Screenshot_20221018-234858_YouTube_1](https://user-images.githubusercontent.com/42944058/196609936-82536c13-96e3-4f0d-aa11-cd0ff7fee6b8.jpg)\r\n![Screenshot_20221018-234901_YouTube_1](https://user-images.githubusercontent.com/42944058/196609944-d041ae50-31b4-40fe-8ffd-1c0107c9b503.jpg)\r\n\r\nIn this example (which is the YouTube application on Android) the 👉🏻 emoji, which consists of `U+1F449 White Right Pointing Backhand Index` and `U+1F3FB Emoji Modifier Fitzpatrick Type-1-2`, encoded as surrogate pairs end up truncated \u0026 results in `U+FFFD Replacement Character` getting displayed instead.\r\n\r\nWhile the above example can be *solved* somewhat by using `EnumerateRunes`, grapheme clusters are still not considered so you may run into other cases such as 🧑🏽‍👦🏻‍🧒 which without proper handling of grapheme clusters may end up truncated inappropriately. There also exists examples of multiple codepoints combining into a single grapheme cluster other than just emojis such as Hangul in parts, and alphabets with combining marks, indic consonant clusters etc (although I\u0027m not exactly how common those actually are used).\r\n\r\nOther issue regarding this issue outlines some more examples where better handling of grapheme clusters would be required: https://github.com/dotnet/runtime/issues/31642\r\n\r\nThe above demonstrates how, in most user-facing situations, grapheme cluster is the most logical unit to operate on as it is meant to be displayed / understood to humans as a single \u0027character\u0027 / \u0027glyph\u0027. Currently, .NET has decent support for handling the raw bytes representation and individual codepoints, however I feel that currently .NET does not expose enough APIs to manipulate grapheme units effectively.\r\n\r\nCurrently, it appears that the only way to enumerate over the grapheme clusters is by using methods associated with `StringInfo`, such as `StringInfo.GetTextElementEnumerator` and `StringInfo.GetNextTextElementLength`.\r\n\r\nHowever, given how those methods existed from .NET Framework 1.1, those two methods are less than ideal.\r\n* `GetTextElementEnumerator`\r\n  * is a non-generic `IEnumerator`, so you can\u0027t use `foreach` with it / use LINQ etc\r\n    * (It may be possible to implement IEnumerable\u003cT\u003e on the enumerator itself, however: https://github.com/dotnet/runtime/issues/19423 )\r\n  * Has an ugly `object Current` property (which is just `GetTextElement` but in `object`)\r\n  * The only way to access the individual cluster is to use `GetTextElement`, however this returns a new `string`, meaning that using this could result in a new `string` being allocated, in the worst case for every single `char` (if the original string is made out of only non-combining, non-surrogate characters.)\r\n* `GetNextTextElementLength`\r\n  * You are able to obtain lengths of the individual grapheme clusters, so using this you could write your own non-allocating grapheme cluster enumerator, however involves extra steps \u0026 is less intuitive to use\r\n\r\nAnd generally, those two methods to work with grapheme clusters are (somewhat) hidden away in System.Globalization namespace, when IMO it really belongs in the String class.\r\n\r\n[Dart has `characters` package](https://pub.dev/packages/characters) that allow you to access the sequence of grapheme clusters like `str.characters`, and as an extreme example Swift makes individual grapheme clusters (named `Character`) the default unit of manipulation. I believe that .NET should make handling of grapheme clusters more accessible \u0026 easier.\r\n\r\nRust: https://crates.io/crates/unicode-segmentation\r\n\r\nInitially, I was thinking of essentially providing `EnumerateRunes` but instead of runes we use grapheme clusters, but I\u0027m not sure if that would provide you enough ability to effectively and easily handle grapheme clusters.\r\n\r\nTwo approaches I can think of would be follows:\r\n* Essentially come up with a new `string`-like / `string` wrapper type that considers the default unit of manipulation a single grapheme cluster by default (basically, what Swift did with their strings)\r\n  * Do we introduce a new type that represents individual grapheme clusters?\r\n* Come up with multiple helper methods that operate on `string` / `ReadOnlySpan\u003cchar\u003e`s, treating those string / ROS\u003cchar\u003es as grapheme clusters\r\n  * Basically providing `EnumerateRunes` like methods on string as members / as extension methods\r\n\r\nHere\u0027s a list of operations on strings, roughly taken from the string documents.\r\n* Substring\r\n  * Substring that takes grapheme clusters into considerations\r\n* Comparison\r\n  * Comparison between normalised characters and non-normalised characters? Although, could be argued that invariant culture comparison is enough\r\n* Enumeration\r\n  * Sequential enumeration using enumerators - should be non-allocating if we use `ReadOnlySpan` however is limited in capabilities\r\n  * Returning a list of indices / `Range`s - might be allocating but not as much\r\n  * Returning actual `string`s\r\n* Indexing\r\n  * Not exactly sure on this. It would not quite be a random access unless we pre-calculate where the boundaries are...\r\n* IsNormalized\r\n* Normalize\r\n* Insert\r\n* IsNullOrEmpty / IsNullOrWhitespace\r\n* Join\r\n* Searching\r\n  * Contains - might be enough with invariant culture comparison\r\n  * IndexOf / LastIndexOf (Any) - Should we return `char` index or index of the grapheme cluster?\r\n  * StartsWith / EndsWith\r\n* Splitting\r\n* PadLeft/Right\r\n* Remove\r\n* Replace\r\n* ReplaceLineEndings\r\n* ToUpper / ToLower\r\n* Trim (Start/End)\r\n\r\nSomething I haven\u0027t considered is the UTF-8 encoded `ReadOnlySpan\u003cbyte\u003e` strings and `ReadOnlySpan\u003cchar\u003e`s. If we are going to provide those grapheme cluster APIs to `string`, it might be worthwhile to provide similar APIs for those span-based strings as well.\r\n\r\nAny opinions are welcome.\r\n\r\nAlso, one open question - How should we refer to those \"grapheme clusters\" in API names and such?\r\n* `TextElement`\r\n  * Existing APIs call it as such\r\n  * However isn\u0027t there some other types that are also named `TextElement` in some UI frameworks?\r\n  * \"text element\" can really mean anything IMO, ranging from individual characters to words / sentences etc. \r\n* `GraphemeCluster`\r\n  * *The most correct* wording, as it appears on the Unicode documents\r\n  * Kind of a long name?\r\n* `Character`\r\n  * Some other language libraries refer to it as `Character`\r\n  * but we have `char` which is way different from a grapheme cluster\r\n\r\nI have mixed feeling about going either `TextElement` or `GraphemeCluster`, but I\u0027m personally fine with going with `TextElement`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZMSg3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MgIqQ",
                                           "createdAt":  "2022-10-19T06:24:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-19T06:24:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mg8Iq",
                                           "createdAt":  "2022-10-19T09:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n(Not marked as an API proposal because I think it definitely needs some more designing before putting one up)\r\n\r\nWhen handling Unicode strings, you quickly realise that strings can be split into many different units. For example, there\u0027s raw, minimum byte units of the encoding used (`char` in case of UTF-16 / `byte` in case of UTF-8 / `int` in case of UTF-32), there\u0027s codepoints (`System.Rune`) then grapheme clusters (\"Text element\"). There exists a lot of cases where all those mean the same thing (e.g. normalised strings containing all BMP characters encoded in UTF-16), however not always.\r\n\r\nWidespread usage of emojis (but not limited to) in modern applications means developers may be faced with a situation they run into situations where they need to work with individual grapheme clusters, especially in handling arbitrary user-supplied strings for display in UI.\r\n\r\nFor example, one may want to truncate long user-supplied strings for display on UI, and let users decide if they want to see the full text by clicking \"Read more\" button. Naive implementation of this would be just taking a substring of the full string... however this proves to be problematic in certain cases involving emojis for example, as shown in the example below (not an endorsement or anything, just something I ran into a few days ago):\r\n\r\n![Screenshot_20221018-234858_YouTube_1](https://user-images.githubusercontent.com/42944058/196609936-82536c13-96e3-4f0d-aa11-cd0ff7fee6b8.jpg)\r\n![Screenshot_20221018-234901_YouTube_1](https://user-images.githubusercontent.com/42944058/196609944-d041ae50-31b4-40fe-8ffd-1c0107c9b503.jpg)\r\n\r\nIn this example (which is the YouTube application on Android) the 👉🏻 emoji, which consists of `U+1F449 White Right Pointing Backhand Index` and `U+1F3FB Emoji Modifier Fitzpatrick Type-1-2`, encoded as surrogate pairs end up truncated \u0026 results in `U+FFFD Replacement Character` getting displayed instead.\r\n\r\nWhile the above example can be *solved* somewhat by using `EnumerateRunes`, grapheme clusters are still not considered so you may run into other cases such as 🧑🏽‍👦🏻‍🧒 which without proper handling of grapheme clusters may end up truncated inappropriately. There also exists examples of multiple codepoints combining into a single grapheme cluster other than just emojis such as Hangul in parts, and alphabets with combining marks, indic consonant clusters etc (although I\u0027m not exactly how common those actually are used).\r\n\r\nOther issue regarding this issue outlines some more examples where better handling of grapheme clusters would be required: https://github.com/dotnet/runtime/issues/31642\r\n\r\nThe above demonstrates how, in most user-facing situations, grapheme cluster is the most logical unit to operate on as it is meant to be displayed / understood to humans as a single \u0027character\u0027 / \u0027glyph\u0027. Currently, .NET has decent support for handling the raw bytes representation and individual codepoints, however I feel that currently .NET does not expose enough APIs to manipulate grapheme units effectively.\r\n\r\nCurrently, it appears that the only way to enumerate over the grapheme clusters is by using methods associated with `StringInfo`, such as `StringInfo.GetTextElementEnumerator` and `StringInfo.GetNextTextElementLength`.\r\n\r\nHowever, given how those methods existed from .NET Framework 1.1, those two methods are less than ideal.\r\n* `GetTextElementEnumerator`\r\n  * is a non-generic `IEnumerator`, so you can\u0027t use `foreach` with it / use LINQ etc\r\n    * (It may be possible to implement IEnumerable\u003cT\u003e on the enumerator itself, however: https://github.com/dotnet/runtime/issues/19423 )\r\n  * Has an ugly `object Current` property (which is just `GetTextElement` but in `object`)\r\n  * The only way to access the individual cluster is to use `GetTextElement`, however this returns a new `string`, meaning that using this could result in a new `string` being allocated, in the worst case for every single `char` (if the original string is made out of only non-combining, non-surrogate characters.)\r\n* `GetNextTextElementLength`\r\n  * You are able to obtain lengths of the individual grapheme clusters, so using this you could write your own non-allocating grapheme cluster enumerator, however involves extra steps \u0026 is less intuitive to use\r\n\r\nAnd generally, those two methods to work with grapheme clusters are (somewhat) hidden away in System.Globalization namespace, when IMO it really belongs in the String class.\r\n\r\n[Dart has `characters` package](https://pub.dev/packages/characters) that allow you to access the sequence of grapheme clusters like `str.characters`, and as an extreme example Swift makes individual grapheme clusters (named `Character`) the default unit of manipulation. I believe that .NET should make handling of grapheme clusters more accessible \u0026 easier.\r\n\r\nRust: https://crates.io/crates/unicode-segmentation\r\n\r\nInitially, I was thinking of essentially providing `EnumerateRunes` but instead of runes we use grapheme clusters, but I\u0027m not sure if that would provide you enough ability to effectively and easily handle grapheme clusters.\r\n\r\nTwo approaches I can think of would be follows:\r\n* Essentially come up with a new `string`-like / `string` wrapper type that considers the default unit of manipulation a single grapheme cluster by default (basically, what Swift did with their strings)\r\n  * Do we introduce a new type that represents individual grapheme clusters?\r\n* Come up with multiple helper methods that operate on `string` / `ReadOnlySpan\u003cchar\u003e`s, treating those string / ROS\u003cchar\u003es as grapheme clusters\r\n  * Basically providing `EnumerateRunes` like methods on string as members / as extension methods\r\n\r\nHere\u0027s a list of operations on strings, roughly taken from the string documents.\r\n* Substring\r\n  * Substring that takes grapheme clusters into considerations\r\n* Comparison\r\n  * Comparison between normalised characters and non-normalised characters? Although, could be argued that invariant culture comparison is enough\r\n* Enumeration\r\n  * Sequential enumeration using enumerators - should be non-allocating if we use `ReadOnlySpan` however is limited in capabilities\r\n  * Returning a list of indices / `Range`s - might be allocating but not as much\r\n  * Returning actual `string`s\r\n* Indexing\r\n  * Not exactly sure on this. It would not quite be a random access unless we pre-calculate where the boundaries are...\r\n* IsNormalized\r\n* Normalize\r\n* Insert\r\n* IsNullOrEmpty / IsNullOrWhitespace\r\n* Join\r\n* Searching\r\n  * Contains - might be enough with invariant culture comparison\r\n  * IndexOf / LastIndexOf (Any) - Should we return `char` index or index of the grapheme cluster?\r\n  * StartsWith / EndsWith\r\n* Splitting\r\n* PadLeft/Right\r\n* Remove\r\n* Replace\r\n* ReplaceLineEndings\r\n* ToUpper / ToLower\r\n* Trim (Start/End)\r\n\r\nSomething I haven\u0027t considered is the UTF-8 encoded `ReadOnlySpan\u003cbyte\u003e` strings and `ReadOnlySpan\u003cchar\u003e`s. If we are going to provide those grapheme cluster APIs to `string`, it might be worthwhile to provide similar APIs for those span-based strings as well.\r\n\r\nAny opinions are welcome.\r\n\r\nAlso, one open question - How should we refer to those \"grapheme clusters\" in API names and such?\r\n* `TextElement`\r\n  * Existing APIs call it as such\r\n  * However isn\u0027t there some other types that are also named `TextElement` in some UI frameworks?\r\n  * \"text element\" can really mean anything IMO, ranging from individual characters to words / sentences etc. \r\n* `GraphemeCluster`\r\n  * *The most correct* wording, as it appears on the Unicode documents\r\n  * Kind of a long name?\r\n* `Character`\r\n  * Some other language libraries refer to it as `Character`\r\n  * but we have `char` which is way different from a grapheme cluster\r\n\r\nI have mixed feeling about going either `TextElement` or `GraphemeCluster`, but I\u0027m personally fine with going with `TextElement`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGnbrkm41\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-19T09:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MiW4s",
                                           "createdAt":  "2022-10-19T14:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @GrabYourPitchforks ",
                                           "updatedAt":  "2022-10-19T14:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxKDd",
                                           "createdAt":  "2023-08-23T20:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Related issue: #91003",
                                           "updatedAt":  "2023-08-23T20:40:34Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Suggestion] Introduce more easy-to-use ways to work with grapheme clusters",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81429",
        "createdAt":  "2023-01-31T15:35:15Z",
        "number":  81429,
        "author":  "gurustron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyBXsg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gurustron",
                                            "createdAt":  "2023-01-31T15:41:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KGuetter",
                                            "createdAt":  "2023-01-31T15:46:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2023-01-31T16:16:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cklutz",
                                            "createdAt":  "2023-01-31T16:46:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptupitsyn",
                                            "createdAt":  "2023-01-31T17:34:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2023-02-01T00:28:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trionia",
                                            "createdAt":  "2023-02-01T11:01:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AArnott",
                                            "createdAt":  "2023-08-17T23:38:38Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2023-02-03T19:13:47Z",
        "body":  "### Background and motivation\r\n\r\nExpose members of [`GlobalizationMode`](https://github.com/dotnet/runtime/blob/2dc1889f5f40459f7c640867a25d0994dab3d868/src/libraries/System.Private.CoreLib/src/System/Globalization/GlobalizationMode.cs#L22) publicly. There is request for that:\r\n\r\n- [@ Stackoverflow](https://stackoverflow.com/q/75298957/2501279)\r\n- [@ Microsoft.Data.SqlClient](https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnection.cs#L1815) (which actually causes a bug - https://github.com/dotnet/SqlClient/issues/1913)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Globalization\r\n{\r\n    public static partial class GlobalizationMode\r\n    {\r\n        public static bool IsInvariant =\u003e ...;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar isGlobalizationInvarinat = GlobalizationMode.IsInvariant;\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVGrYnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UFAzo",
                                           "createdAt":  "2023-01-31T15:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nExpose members of [`GlobalizationMode`](https://github.com/dotnet/runtime/blob/2dc1889f5f40459f7c640867a25d0994dab3d868/src/libraries/System.Private.CoreLib/src/System/Globalization/GlobalizationMode.cs#L22) publicly. There is request for that:\r\n\r\n- [@ Stackoverflow](https://stackoverflow.com/q/75298957/2501279)\r\n- [@ Microsoft.Data.SqlClient](https://github.com/dotnet/SqlClient/blob/main/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnection.cs#L1815)\n\n### API Proposal\n\n```csharp\r\nnamespace System.Globalization\r\n{\r\n    public static partial class GlobalizationMode\r\n    {\r\n        public static bool IsInvariant =\u003e ...;\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar isGlobalizationInvarinat = GlobalizationMode.IsInvariant;\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egurustron\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-31T15:35:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFkCH",
                                           "createdAt":  "2023-01-31T17:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Why is reading the settings not good enough for that? I don\u0027t think this is going to change at all in the future. \r\n\r\n```C#\r\n       // https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Globalization/GlobalizationMode.cs,15\r\n       // https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/AppContextConfigHelper.cs,13\r\n\r\n        public static bool IsInvariantMode()\r\n        {\r\n            if (!AppContext.TryGetSwitch(\"System.Globalization.Invariant\", out bool ret))\r\n            {\r\n                string? switchValue = Environment.GetEnvironmentVariable(\"DOTNET_SYSTEM_GLOBALIZATION_INVARIANT\");\r\n                ret = switchValue != null ? switchValue.Equals(\"True\", StringComparison.OrdinalIgnoreCase) || switchValue.Equals(\"1\")) : false;\r\n            }\r\n\r\n            return ret;\r\n        }\r\n```\r\n\r\n\r\n",
                                           "updatedAt":  "2023-01-31T17:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFkSS",
                                           "createdAt":  "2023-01-31T17:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-01-31T17:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UFwHa",
                                           "createdAt":  "2023-01-31T17:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKyeAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trionia",
                                                                               "createdAt":  "2023-02-01T11:01:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2025-03-20T21:57:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gurustron",
                                           "body":  "@tarekgh because it requires some understanding of internal workings of the feature and leads to some inventive code even in Microsoft products as you see in the linked `Microsoft.Data.SqlClient` sources.  And it is small but still bunch of code instead of one small concise static property access.",
                                           "updatedAt":  "2023-01-31T17:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UF1d3",
                                           "createdAt":  "2023-01-31T17:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "One problem is that even if this property was added today, existing libraries like `Microsoft.Data.SqlClient` still couldn\u0027t use it because they have to support earlier versions, so they\u0027d basically be stuck copying this code anyway -- or relying on a separate package to roll up this code, since presumably it\u0027s backwards compatible at runtime. But that package could be written today without this proposal.\r\n\r\nBy the time libraries would be free to *only* use this property, secure that it\u0027s part of the core runtime, we\u0027re several years down the road, limiting its usefulness. That\u0027s not to say it\u0027s an absolute argument against, of course.",
                                           "updatedAt":  "2023-01-31T17:49:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGX0Q",
                                           "createdAt":  "2023-01-31T19:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "**don\u0027t take this as push back on the proposal idea**. \r\n\r\n\u003e because it requires some understanding of internal workings of the feature\r\n\r\nThe switches are public and documented so it is not internal. But I got a related point which makes reading the config switches are not reliable enough. I\u0027ll mention that later in this reply.\r\n\r\n\u003e And it is small but still bunch of code instead of one small concise static property access.\r\n\r\nI do not see this compelling argument to expose API for especially the workaround is not big. \r\n\r\nHere are some thoughts: \r\n\r\n- @jeroen-mostert has a good point regarding the apps/libraries need to work with the down-level versions of the .NET. They will need to include the workaround anyway. \r\n- I mentioned above the idea of reading the config switches. Unfortunately, this will not be reliable enough because in native compilation scenarios (AOT), it is possible the invariant mode value will get embedded inside the app and not get affected by the switches nor the environment variables. If we are going to have a workaround, it will need to be different. \r\n- It will be good if we understand how the libraries/apps are going to use the new API if we exposed it? The SQL issue suggests detecting the mode and still fails. more like showing more clearer failing reason. \r\n- The Invariant mode works in two ways, the default one is not allowing creating any culture except the Invariant culture. The other way is turning off [PredefinedCulturesOnly](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization#predefined-cultures) which make the Invariant mode create any culture, but all created culture will be using the Invariant culture data. Considering that, the proposed API needs to be adjusted if we need to communicate which way is enabled in the Invariant mode. \r\n\r\nIf need to have temporary workaround for now, I suggest you do something like the following:\r\n\r\n```C#\r\n        public enum InvariantMode\r\n        {\r\n            None,\r\n            PredefinedCultureOnly,\r\n            AllCultures\r\n        }\r\n\r\n        public static InvariantMode Invariant { get; } = GetInvariantMode();\r\n\r\n        private static InvariantMode GetInvariantMode()\r\n        {\r\n            try\r\n            {\r\n                return CultureInfo.GetCultureInfo(\"en-US\").NumberFormat.CurrencySymbol == \"¤\" ? InvariantMode.AllCultures : InvariantMode.None;\r\n            }\r\n            catch (CultureNotFoundException)\r\n            {\r\n                return InvariantMode.PredefinedCultureOnly;\r\n            }\r\n        }\r\n```\r\n\r\nIf you care only if Invariant mode is on or off, you may simplify that as\r\n\r\n```C#\r\n        public static bool Invariant { get; } = GetInvariantMode();\r\n\r\n        private static bool GetInvariantMode()\r\n        {\r\n            try { return CultureInfo.GetCultureInfo(\"en-US\").NumberFormat.CurrencySymbol == \"¤\" ; }\r\n            catch (CultureNotFoundException) { return true;}\r\n        }\r\n```\r\n",
                                           "updatedAt":  "2023-02-01T16:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGsDm",
                                           "createdAt":  "2023-01-31T20:41:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1LSng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gurustron",
                                                                               "createdAt":  "2023-01-31T21:27:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The switches are public and documented so it is not internal.\r\n\r\nThe switch is not reliable way to detect invariant mode in the presence of trimming. Trimming can hardcode the app to \"always invariant mode\" or \"never invariant mode\". The switch is ignored in that case.",
                                           "updatedAt":  "2023-01-31T20:41:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGsmR",
                                           "createdAt":  "2023-01-31T20:43:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1ZIrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gurustron",
                                                                               "createdAt":  "2023-01-31T21:27:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KGuetter",
                                                                               "createdAt":  "2023-02-01T06:40:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-02-03T12:23:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "This code may throw an exception when nothing\u0027s wrong, just to detect behavior. Such exceptions cause noise and slowdowns when debugging (even if it happens just once at startup, since it still requires developer attention every time). This is not a dealbreaker, but still annoying.\r\n\r\nWorse, like the code applied in `Microsoft.Data.SqlClient`, it relies on globalization-invariant mode behaving a particular way just to detect it, in a way that\u0027s not guaranteed except by how the implementation *happens* to behave now (with little guarantee that it will continue to do so, since it\u0027s not clear who\u0027s taking dependencies). `Microsoft.Data.SqlClient` checks if the `EnglishName` of the culture includes `Invariant`, this code checks if the `CurrencySymbol` is `¤`. This code is actually less reliable, in that a Windows end user can change their `en-US` regional settings to exactly that symbol. This isn\u0027t hypothetical either -- my machine uses exactly this setup, and not specifically to break this code. :) This check returns `true` on my machine even outside globalization-invariant mode. Of course some other property can be tested, but you need to be *really* sure it will *only* hold true for globalization-invariant mode, and not just accidentally but because the implementation requires it. That\u0027s a hard ask.",
                                           "updatedAt":  "2023-01-31T20:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHC-b",
                                           "createdAt":  "2023-01-31T22:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e this code checks if the CurrencySymbol is ¤. This code is actually less reliable, in that a Windows end user can change their en-US\r\n\r\nUsing `CultureInfo.GetCultureInfo(\"en-US\")` will protect against this case. I\u0027ll modify the code I included before.",
                                           "updatedAt":  "2023-01-31T22:07:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UHDx1",
                                           "createdAt":  "2023-01-31T22:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e The switch is not reliable way to detect invariant mode in the presence of trimming. Trimming can hardcode the app to \"always invariant mode\" or \"never invariant mode\". The switch is ignored in that case.\r\n\r\nThat is what I was trying to say in the second bullet in my reply.",
                                           "updatedAt":  "2023-01-31T22:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UInwq",
                                           "createdAt":  "2023-02-01T06:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KGuetter",
                                           "body":  "\u003e catch (CultureNotFoundException) { return false;}\r\n\r\nShouldn\u0027t this be `return true`?",
                                           "updatedAt":  "2023-02-01T06:48:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ULmIm",
                                           "createdAt":  "2023-02-01T16:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Shouldn\u0027t this be return true?\r\n\r\nYou are right. I fixed it in the code. ",
                                           "updatedAt":  "2023-02-01T16:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UPfTc",
                                           "createdAt":  "2023-02-02T08:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "Is there any possibility that the `en-US` culture is not available in a situation where globalization-invariant mode is *not* enabled, either in .NET Framework (which doesn\u0027t have GIM, of course) or .NET Core, for example, because it was excluded or disabled somehow?",
                                           "updatedAt":  "2023-02-02T08:42:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UR7pG",
                                           "createdAt":  "2023-02-02T16:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Is there any possibility that the en-US culture is not available in a situation where globalization-invariant mode is not enabled, either in .NET Framework (which doesn\u0027t have GIM, of course) or .NET Core, for example, because it was excluded or disabled somehow?\r\n\r\nCurrently `en-US` exist all the time and never get disabled.",
                                           "updatedAt":  "2023-02-02T16:06:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USIMm",
                                           "createdAt":  "2023-02-02T16:40:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Currently en-US exist all the time and never get disabled.\r\n\r\nIs that valid statement even for configurations with custom ICU builds? IIRC, custom ICU builds can be trimmed down in number of ways. ",
                                           "updatedAt":  "2023-02-02T16:40:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USPwI",
                                           "createdAt":  "2023-02-02T17:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Is that valid statement even for configurations with custom ICU builds? IIRC, custom ICU builds can be trimmed down in number of ways.\r\n\r\nAre you referring to the buildings for WASM and mobile apps? `en-US` exist there (at least for resource fallback lookups).\r\n\r\nCC @akoeplinger @ilonatommy if they add more details as needed.",
                                           "updatedAt":  "2023-02-02T20:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UTOKL",
                                           "createdAt":  "2023-02-02T20:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gurustron",
                                           "body":  "@tarekgh Here is another example were this API can be useful - https://github.com/Humanizr/Humanizer/pull/1213 instead of unnecessary exception management.",
                                           "updatedAt":  "2023-02-02T20:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UTPCd",
                                           "createdAt":  "2023-02-02T20:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1Xm-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gurustron",
                                                                               "createdAt":  "2023-02-02T20:34:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KGuetter",
                                                                               "createdAt":  "2023-02-03T05:23:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@gurustron I am not pushing back having API for that :-) what I have provided before just a workaround to use till we have the API. That is why I am keeping the issue open for tracking.",
                                           "updatedAt":  "2023-02-02T20:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UTR9n",
                                           "createdAt":  "2023-02-02T20:35:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gurustron",
                                           "body":  "@tarekgh great, thank you!",
                                           "updatedAt":  "2023-02-02T20:35:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UW8Tb",
                                           "createdAt":  "2023-02-03T08:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "\u003e \u003e Is that valid statement even for configurations with custom ICU builds? IIRC, custom ICU builds can be trimmed down in number of ways.\r\n\u003e \r\n\u003e Are you referring to the buildings for WASM and mobile apps? `en-US` exist there (at least for resource fallback lookups).\r\n\u003e \r\n\u003e CC @akoeplinger @ilonatommy if they add more details as needed.\r\n\r\nThat is true but actually we are thinking also about introducing a \"real\" custom ICU option for WASM where loading ICU bundles that contain a custom set of locales for specific app (nothing prevents from creating such ICU without en-US) will be possible. It is motivated by the fact that some customers require locales that are not present in the default ICU for WASM and we don\u0027t want to increase the size of the default ICU bundle.\r\nIn that situation check for `InvariantMode` relying on presence of \"en-US\" will fail for sure.",
                                           "updatedAt":  "2023-02-03T08:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UYKFW",
                                           "createdAt":  "2023-02-03T10:19:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "I guess it ultimately comes down to _why_ a library is trying to detect GIM and what happens if it doesn\u0027t. For example, for something like `Microsoft.Data.SqlClient`, it would probably have no problem to have the detection contingent on `en-US`, because it needs the client-side cultures to support the server-side collations. In theory you could trim locales corresponding to collations you actually use on the server (and nothing else), but `M.D.S` would need more code to support that scenario cleanly (if it\u0027s deemed worth it at all), so for now it just wants to bail out with a clear message if GIM is in use, as the failure is otherwise much more cryptic and not easily tied to GIM.\r\n\r\nFor a library like Humanizer, the problem specifically only occurred because it used `en-US` as a default, and there\u0027s a pull to make it fall back to `CultureInfo.InvariantCulture` if that\u0027s not available. In this case the only real need for detecting GIM is to avoid an unnecessary exception, which is valuable but minor. Arguably the *proper* fix here would be to make an API available for *trying* to get a culture -- the `CultureNotFoundException` is an example of what has now, with more variance in whether cultures are available or not, become a [vexing exception](https://ericlippert.com/2008/09/10/vexing-exceptions/) (it used to be worse pre-.NET 4, as it was an `ArgumentException`, which is of course not something you should normally catch -- the first sign that something was wrong).\r\n\r\n`CultureInfo.TryGetCultureInfo` (and overloads) is worth considering. The constructor of `CultureInfo` would still throw; the alternative there if you need a customizable culture is to check if it\u0027s available first with `TryGetCultureInfo` before instantiating. Libraries that need a specific culture (whether `en-US` for a default or anything else) would then be able to support this without having to handle exceptions (the Humanizer example would become `new DefaultFormatter(CultureInfo.TryGetCultureInfo(\"en-US\", out var usEnglish) ? usEnglish : CultureInfo.InvariantCulture`), while libraries like `M.D.S` which don\u0027t want to put in the effort to support mix and match locales (for now) could use `bool invariantMode = !CultureInfo.TryGetCultureInfo(\"en-US\", out var usEnglish) || usEnglish.NumberFormat.CurrencySymbol == \"¤\"` (assuming checking the `CurrencySymbol` is the most convenient/stable way of doing it), although realistically it would not start using this because of the downlevel requirement.\r\n\r\nBottom line is that detecting GIM as a flag should be unusual because what clients _ought_ to be doing is checking for support for the cultures they need -- but they currently can\u0027t do this without handling exceptions or by inefficiently enumerating `CultureInfo.GetCultures(...)` (and then they still have to pick a flag).",
                                           "updatedAt":  "2023-02-03T11:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UY1I-",
                                           "createdAt":  "2023-02-03T12:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "In my opinion given all the edge cases that were already listed pushing the checking code onto the end user doesn\u0027t seem viable to me. I like the `TryGetCultureInfo` proposal on first glance.",
                                           "updatedAt":  "2023-02-03T12:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZVIG",
                                           "createdAt":  "2023-02-03T14:12:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KGuetter",
                                           "body":  "In our case it is that we want to skip a rather expensive process (involving loading translations) that is definetely not useful with GIM.",
                                           "updatedAt":  "2023-02-03T14:12:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZYqp",
                                           "createdAt":  "2023-02-03T14:23:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "@KGuetter: but which translations? If the user has enabled a customized set of locales, would it be beneficial to only load those? In other words, might you be better off by checking what\u0027s in `CultureInfo.GetCultures` vs. available translations (by name or LCID or whatever\u0027s appropriate), rather than the broad switch for GIM? In the special case of this returning only a single culture/language (which in the case of GIM is the invariant culture) translations can be disabled entirely, if this speeds up anything beyond only arranging for the needed ones.",
                                           "updatedAt":  "2023-02-03T14:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZjS_",
                                           "createdAt":  "2023-02-03T14:53:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KGuetter",
                                           "body":  "@jeroen-mostert What you suggest might indeed also be a workaround: Check if `CultureInfo.GetCultures(CultureTypes.NeutralCultures)` contains only the invariant culture.",
                                           "updatedAt":  "2023-02-03T14:53:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZsZZ",
                                           "createdAt":  "2023-02-03T15:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "For the scenario where you may proficiently use the cultures for limiting translations anyway, yes. Not necessarily universally, because I imagine getting all the cultures (even if just to check there\u0027s only one) might have considerable overhead in other scenarios (I haven\u0027t actually benchmarked it). It\u0027ll almost certainly be slower than just checking if there\u0027s no `en-US` or a property of the invariant culture (though maybe not once exception handling gets thrown in. :P",
                                           "updatedAt":  "2023-02-03T15:22:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UaMSV",
                                           "createdAt":  "2023-02-03T17:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@ilonatommy \r\n\r\n\u003e In that situation check for InvariantMode relying on presence of \"en-US\" will fail for sure.\r\n\r\nIf you are going to support that, you need to think about the resource fallback handling. Currently all .NET libraries have `[assembly: NeutralResourcesLanguage(\"en-US\")]` which make `en-US` is a required existing culture (except in Invariant mode as we are restricting everything anyway). \r\n\r\n\r\n@akoeplinger \r\n\r\n\u003e  I like the TryGetCultureInfo proposal on first glance.\r\n\r\nThis comes everywhile and I agree it is worth considering this API too.  \r\n\r\n@jeroen-mostert \r\n\r\n\u003e I guess it ultimately comes down to why a library is trying to detect GIM and what happens if it doesn\u0027t. \r\n\r\nI fully agree with that, that is what I tried to point at in the third bullet of my reply https://github.com/dotnet/runtime/issues/81429#issuecomment-1410956560.\r\n\r\n\u003e but they currently can\u0027t do this without handling exceptions or by inefficiently enumerating CultureInfo.GetCultures(...) (and then they still have to pick a flag).\r\n\r\nEnumeration is not enough here either because there are aliased cultures which are not returned by the enumeration but still valid. But, in general I agree checking for GIM should be unusual and needed only in specific situations. \r\n\r\nIn general, I can see some libraries will not work properly (or will not work at all) in GIM, but this is part of the GIM contract that apps who enable GIM understand they will get some restrictions. \r\n",
                                           "updatedAt":  "2023-02-03T17:03:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UaT1h",
                                           "createdAt":  "2023-02-03T17:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroen-mostert",
                                           "body":  "@tarekgh: \r\n\u003e this is part of the GIM contract that apps who enable GIM understand they will get some restrictions\r\n\r\nThe problem there is twofold:\r\n* End users may not be clear they have actually enabled GIM (they \"just picked alpine for my Docker image because it\u0027s small!\")\r\n* If a library fails due to GIM, this may be somewhere in the bowels where a \"culture not found\" error or its fallout are not easily traced back to GIM in a causal or functional sense (as in the example of `Microsoft.Data.SqlClient` needing cultures to support collations -- most users don\u0027t even think of collations).\r\n\r\nFor the scenarios that this proposal was inspired by, it\u0027s not a simple case of \"well you asked for it, you got it, what did you expect?\"",
                                           "updatedAt":  "2023-02-03T17:32:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uatif",
                                           "createdAt":  "2023-02-03T19:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1nzng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KGuetter",
                                                                               "createdAt":  "2023-02-03T19:17:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2023-02-07T20:53:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thinking a little more, I think the best solution here is like what @jeroen-mostert mentioned before with a little modification. We can expose `CultureInfo.TryGetCultureInfo(string cultureName, bool predefinedCulturesOnly, out CultureInfo culture)`. note `predefinedCulturesOnly` flag. \r\nif passing `predefinedCulturesOnly=true` will always make `CultureInfo.TryGetCultureInfo` return false (except with Invariant culture) in GIM regardless of [predefined-cultures](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/globalization#predefined-cultures.) environmental settings. \r\n\r\nDoing that will give full flexibility to the libraries and not need to check any culture property like currency symbol. Also, this API can be super useful even for non-GIM. \r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-02-03T19:13:47Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "[API Proposal]: Expose `GlobalizationMode.Invariant` (and potentially others) publicly",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81633",
        "createdAt":  "2023-02-04T13:07:28Z",
        "number":  81633,
        "author":  "DJm00n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-14T09:48:40Z",
        "body":  "### Description\r\nSeems **CultureInfo.KeyboardLayoutId** was added to ease `System.Windows.Forms.InputLanguage.FromCulture` implementation but looks like it failed in long run since [LCIDs are deprecated and not unique anymore](https://learn.microsoft.com/en-us/globalization/locale/locale-names#the-deprecation-of-lcids)... There is some [background info on CultureInfo.KeyboardLayoutId](http://archives.miloush.net/michkap/archive/2008/02/25/7893424.html).\r\n\r\nIn https://github.com/dotnet/winforms/pull/8573 I proposed to remove its usage entirely in `InputLanguage` class.\r\n\r\nRight now `CultureInfo.KeyboardLayoutId` implementation just returns the pure LCID value for a locale and `0x0409` (English - US) locale id for supplemental cultures:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ec9fb02a2c6b606ef06acc911a0b104fd3d2a9a3/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.cs#L1200-L1218\r\n\r\nI proposing to change behaviour of [CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property so it will be more useful to users and return **default keyboard identifier for the culture/locale** that can be used with [LoadKeyboardLayout](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayoutw) etc API directly (full list of possible keyboard id values [is here](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-language-pack-default-values)).\r\n\r\n\"Primary input profile (language and keyboard pair)\" column on [this page](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs) shows proper value that I think should be returned in this case.\r\n\r\nFor example for \"French (Canada)\" locale: `0x00001009` (Canadian French keyboard) value should be returned, not `0x00000C0C` (Canadian French (Legacy) keyboard).\r\nAlso, this property is completely broken for [LCID-less locales](https://learn.microsoft.com/en-us/globalization/locale/locale-names) (LCID value is `0x1000` - `LOCALE_CUSTOM_UNSPECIFIED`) and just returns `0x00000409` (\"US\" keyboard) in such cases.\r\n\r\nI can make a pull request with the necessary changes, but I would like to start the discussion in advance.\r\n\r\n### Reproduction Steps\r\n\r\n```cs\r\nusing System;\r\nusing System.Globalization;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            CultureInfo culture1 = new CultureInfo(\"fr-CA\", false); // French (Canada)\r\n            // Right now 00000C0C (Canadian French (Legacy) keyboard)\r\n            // Should be 00011009 (Canadian Multilingual Standard keyboard)\r\n            Console.WriteLine(culture1.KeyboardLayoutId.ToString(\"X8\"));\r\n\r\n            CultureInfo culture2 = new CultureInfo(\"ca-AD\", false); // Catalan (Andorra)\r\n            // Right now 00000409 (US keyboard)\r\n            // Should be 0000040C (French keyboard)\r\n            Console.WriteLine(culture2.KeyboardLayoutId.ToString(\"X8\"));\r\n\r\n            CultureInfo culture3 = new CultureInfo(\"nqo\", false); // N\u0027ko\r\n            // Right now 00000409 (US keyboard)\r\n            // Should be 00090C00 (N\u0027Ko keyboard)\r\n            Console.WriteLine(culture3.KeyboardLayoutId.ToString(\"X8\"));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nI have expected that [CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property returns corresponding default keyboard id for the culture/locale - like we have on [this page](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs). \r\n\r\n### Actual behavior\r\n\r\n[CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property returns wrong values for many cultures.\r\n\r\n### Regression?\r\n\r\ndon\u0027t know\r\n\r\n### Known Workarounds\r\n\r\nCall `GetLocaleInfoEx(localeName, LOCALE_SKEYBOARDSTOINSTALL, ...)` and extract default keyboard id value for culture from there. String format is described [here](https://learn.microsoft.com/en-us/windows/win32/tsf/installlayoutortip#remarks).\r\n\r\n### Configuration\r\n\r\n.NET Framework 4.7.2\r\nWindows 10 x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVHIZng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ucdig",
                                           "createdAt":  "2023-02-04T13:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nLooks like [CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property returns wrong keyboard id for the culture/locale. I have expected that I can use returned value with [LoadKeyboardLayout](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadkeyboardlayoutw) API (full list of possible keyboard id values [is here](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-language-pack-default-values)).\r\n\r\nBut it seems it just returns the pure LCID value for a locale:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ec9fb02a2c6b606ef06acc911a0b104fd3d2a9a3/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.cs#L1200-L1218\r\n\r\n\"Primary input profile (language and keyboard pair)\" column on [this page](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs) shows proper value that should be returned instead.\r\n\r\nFor example `0x1009` (\"Canadian French\" keyboard id) should be returned for \"French (Canada)\" locale, not `0x0C0C` (\"Canadian French (Legacy)\" keyboard id).\r\nAlso, this property is completely broken for [LCID-less locales](https://learn.microsoft.com/en-us/globalization/locale/locale-names) and just returns `0x0409` (\"US\" keyboard id) in all such cases.\r\n\r\nI can make a pull request with the necessary changes, but I would like to start the discussion in advance.\n\n### Reproduction Steps\n\nusing System;\r\nusing System.Globalization;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            CultureInfo culture1 = new CultureInfo(\"fr-CA\", false); // French (Canada)\r\n            CultureInfo culture2 = new CultureInfo(\"ca-AD\", false); // Catalan (Andorra)\r\n\r\n            // See\r\n            // https://learn.microsoft.com/windows-hardware/manufacture/desktop/windows-language-pack-default-values\r\n            // https://learn.microsoft.com/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs\r\n\r\n            // 00000C0C (Canadian French (Legacy) keyboard) but should be 00011009 (Canadian Multilingual Standard keyboard)\r\n            Console.WriteLine(culture1.KeyboardLayoutId.ToString(\"X8\"));\r\n\r\n            // 00000409 (US keyboard) but should be 0000040C (French keyboard)\r\n            Console.WriteLine(culture2.KeyboardLayoutId.ToString(\"X8\")); \r\n\r\n        }\r\n    }\r\n}\r\n\n\n### Expected behavior\n\nI have expected that [CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property returns corresponding keyboard id for the culture/locale - like we have on [this page](https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs). \n\n### Actual behavior\n\n[CultureInfo.KeyboardLayoutId](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.keyboardlayoutid) property returns wrong values for many cultures.\n\n### Regression?\n\ndon\u0027t know\n\n### Known Workarounds\n\nCall `GetLocaleInfoEx(localeName, LOCALE_SKEYBOARDSTOINSTALL, ...)` and extract keyboard id value from there.\n\n### Configuration\n\n.NET Framework 4.7.2\r\nWindows 10 x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDJm00n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-04T13:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uchme",
                                           "createdAt":  "2023-02-04T14:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DJm00n",
                                           "body":  "Affected cultures and keyboard id values (from `GetLocaleInfoEx(localeName, LOCALE_SKEYBOARDSTOINSTALL, ..)` call):\r\n```\r\n[localeName] [lcId]=[langId]:[keyboardId]\r\naf 0x0436=0436:00000409\r\naf-ZA 0x0436=0436:00000409\r\nar-AE 0x3801=3801:00000401\r\nar-BH 0x3c01=3c01:00000401\r\nar-DJ 0x1000=0401:00000401\r\nar-DZ 0x1401=1401:00020401\r\nar-EG 0x0c01=0c01:00000401\r\nar-ER 0x1000=0401:00000401\r\nar-IL 0x1000=0401:00000401\r\nar-IQ 0x0801=0801:00000401\r\nar-JO 0x2c01=2c01:00000401\r\nar-KM 0x1000=0401:00000401\r\nar-KW 0x3401=3401:00000401\r\nar-LB 0x3001=3001:00000401\r\nar-LY 0x1001=1001:00000401\r\nar-MA 0x1801=1801:00020401\r\nar-MR 0x1000=0401:00000401\r\nar-OM 0x2001=2001:00000401\r\nar-PS 0x1000=0401:00000401\r\nar-QA 0x4001=4001:00000401\r\nar-SD 0x1000=0401:00000401\r\nar-SO 0x1000=0401:00000401\r\nar-SS 0x1000=0401:00000401\r\nar-SY 0x2801=2801:00000401\r\nar-TD 0x1000=0401:00000401\r\nar-TN 0x1c01=1c01:00020401\r\nar-YE 0x2401=2401:00000401\r\narn 0x047a=047a:0000080a\r\narn-CL 0x047a=047a:0000080a\r\nast 0x1000=040a:0000040a\r\nast-ES 0x1000=040a:0000040a\r\nbin 0x0466=0409:00000409\r\nbin-NG 0x0466=0409:00000409\r\nbn 0x0845=0845:00000445\r\nbn-BD 0x0845=0845:00000445\r\nbo-IN 0x1000=0451:00000451\r\nbr 0x047e=047e:0000040c\r\nbr-FR 0x047e=047e:0000040c\r\nbrx 0x1000=0439:00000439\r\nbrx-IN 0x1000=0439:00000439\r\nbs 0x141a=141a:0000041a\r\nbs-Latn 0x141a=141a:0000041a\r\nbs-Latn-BA 0x141a=141a:0000041a\r\nca 0x0403=0403:0000040a\r\nca-AD 0x1000=040c:0000040c\r\nca-ES 0x0403=0403:0000040a\r\nca-ES-valencia 0x0803=0803:0000040a\r\nca-FR 0x1000=040c:0000040c\r\nca-IT 0x1000=0410:00000410\r\nce 0x1000=0419:00000419\r\nce-RU 0x1000=0419:00000419\r\nco 0x0483=0483:0000040c\r\nco-FR 0x0483=0483:0000040c\r\ncu 0x1000=0419:00000419\r\ncu-RU 0x1000=0419:00000419\r\nda-GL 0x1000=0406:00000406\r\nde-AT 0x0c07=0c07:00000407\r\nde-BE 0x1000=080c:0000080c\r\nde-LI 0x1407=1407:00000807\r\nde-LU 0x1007=1007:00000407\r\ndsb 0x082e=082e:0002042e\r\ndsb-DE 0x082e=082e:0002042e\r\nel-CY 0x1000=0408:00000408\r\nen-029 0x2409=2409:00000409\r\nen-AE 0x4c09=0409:00000409\r\nen-AT 0x1000=0809:00000407\r\nen-AU 0x0c09=0c09:00000409\r\nen-BE 0x1000=080c:0000080c\r\nen-BI 0x1000=0809:0000040c\r\nen-BZ 0x2809=2809:00000409\r\nen-CA 0x1009=1009:00000409\r\nen-CH 0x1000=0809:00000407\r\nen-DE 0x1000=0809:00000407\r\nen-FI 0x1000=0809:0000040b\r\nen-FK 0x1000=0809:00000809\r\nen-GG 0x1000=0809:00000809\r\nen-GI 0x1000=0809:00000809\r\nen-HK 0x3c09=3c09:00000409\r\nen-ID 0x3809=0409:00000409\r\nen-IM 0x1000=0809:00000809\r\nen-JE 0x1000=0809:00000809\r\nen-JM 0x2009=2009:00000409\r\nen-MT 0x1000=0809:00000809\r\nen-MY 0x4409=4409:00000409\r\nen-NL 0x1000=0809:00020409\r\nen-NZ 0x1409=1409:00000409\r\nen-PH 0x3409=3409:00000409\r\nen-SE 0x1000=0809:0000041d\r\nen-SG 0x4809=4809:00000409\r\nen-SI 0x1000=0809:00000424\r\nen-TT 0x2c09=2c09:00000409\r\nen-VG 0x1000=0809:00000809\r\nen-ZA 0x1c09=1c09:00000409\r\nen-ZW 0x3009=3009:00000409\r\nes 0x0c0a=0c0a:0000040a\r\nes-419 0x580a=580a:0000080a\r\nes-AR 0x2c0a=2c0a:0000080a\r\nes-BO 0x400a=400a:0000080a\r\nes-CL 0x340a=340a:0000080a\r\nes-CO 0x240a=240a:0000080a\r\nes-CR 0x140a=140a:0000080a\r\nes-CU 0x5c0a=080a:0000080a\r\nes-DO 0x1c0a=1c0a:0000080a\r\nes-EC 0x300a=300a:0000080a\r\nes-ES 0x0c0a=0c0a:0000040a\r\nes-GQ 0x1000=080a:0000080a\r\nes-GT 0x100a=100a:0000080a\r\nes-HN 0x480a=480a:0000080a\r\nes-NI 0x4c0a=4c0a:0000080a\r\nes-PA 0x180a=180a:0000080a\r\nes-PE 0x280a=280a:0000080a\r\nes-PH 0x1000=080a:0000080a\r\nes-PR 0x500a=500a:0000080a\r\nes-PY 0x3c0a=3c0a:0000080a\r\nes-SV 0x440a=440a:0000080a\r\nes-US 0x540a=540a:0000080a\r\nes-UY 0x380a=380a:0000080a\r\nes-VE 0x200a=200a:0000080a\r\neu 0x042d=042d:0000040a\r\neu-ES 0x042d=042d:0000040a\r\nff 0x0867=0867:00000488\r\nff-Latn 0x0867=0867:00000488\r\nff-Latn-CM 0x1000=0488:00000488\r\nff-Latn-GH 0x1000=0488:00000488\r\nff-Latn-GM 0x1000=0488:00000488\r\nff-Latn-GN 0x1000=0488:00000488\r\nff-Latn-GW 0x1000=0488:00000488\r\nff-Latn-LR 0x1000=0488:00000488\r\nff-Latn-MR 0x1000=0488:00000488\r\nff-Latn-NE 0x1000=0488:00000488\r\nff-Latn-NG 0x0467=0488:00000488\r\nff-Latn-SL 0x1000=0488:00000488\r\nff-Latn-SN 0x0867=0867:00000488\r\nfil 0x0464=0464:00000409\r\nfil-PH 0x0464=0464:00000409\r\nfo 0x0438=0438:00000406\r\nfo-DK 0x1000=0438:00000406\r\nfo-FO 0x0438=0438:00000406\r\nfr-029 0x1c0c=040c:0000040c\r\nfr-BF 0x1000=040c:0000040c\r\nfr-BI 0x1000=040c:0000040c\r\nfr-BJ 0x1000=040c:0000040c\r\nfr-BL 0x1000=040c:0000040c\r\nfr-CA 0x0c0c=0c0c:00011009\r\nfr-CD 0x240c=240c:0000040c\r\nfr-CF 0x1000=040c:0000040c\r\nfr-CG 0x1000=040c:0000040c\r\nfr-CI 0x300c=300c:0000040c\r\nfr-CM 0x2c0c=2c0c:0000040c\r\nfr-DJ 0x1000=040c:0000040c\r\nfr-DZ 0x1000=040c:0000040c\r\nfr-GA 0x1000=040c:0000040c\r\nfr-GF 0x1000=040c:0000040c\r\nfr-GN 0x1000=040c:0000040c\r\nfr-GP 0x1000=040c:0000040c\r\nfr-GQ 0x1000=040c:0000040c\r\nfr-HT 0x3c0c=3c0c:0000040c\r\nfr-KM 0x1000=040c:0000040c\r\nfr-LU 0x140c=140c:0000100C\r\nfr-MA 0x380c=380c:0000040c\r\nfr-MC 0x180c=180c:0000040c\r\nfr-MF 0x1000=040c:0000040c\r\nfr-MG 0x1000=040c:0000040c\r\nfr-ML 0x340c=340c:0000040c\r\nfr-MQ 0x1000=040c:0000040c\r\nfr-MR 0x1000=040c:0000040c\r\nfr-MU 0x1000=040c:0000040c\r\nfr-NC 0x1000=040c:0000040c\r\nfr-NE 0x1000=040c:0000040c\r\nfr-PF 0x1000=040c:0000040c\r\nfr-PM 0x1000=040c:0000040c\r\nfr-RE 0x200c=200c:0000040c\r\nfr-RW 0x1000=040c:0000040c\r\nfr-SC 0x1000=040c:0000040c\r\nfr-SN 0x280c=280c:0000040c\r\nfr-SY 0x1000=040c:0000040c\r\nfr-TD 0x1000=040c:0000040c\r\nfr-TG 0x1000=040c:0000040c\r\nfr-TN 0x1000=040c:0000040c\r\nfr-VU 0x1000=040c:0000040c\r\nfr-WF 0x1000=040c:0000040c\r\nfr-YT 0x1000=040c:0000040c\r\nfur 0x1000=0410:00000410\r\nfur-IT 0x1000=0410:00000410\r\nfy 0x0462=0462:00020409\r\nfy-NL 0x0462=0462:00020409\r\nga 0x083c=083c:00001809\r\nga-IE 0x083c=083c:00001809\r\ngd 0x0491=0491:00011809\r\ngd-GB 0x0491=0491:00011809\r\ngl 0x0456=0456:0000040a\r\ngl-ES 0x0456=0456:0000040a\r\ngsw 0x1000=0807:00000807\r\ngsw-CH 0x1000=0807:00000807\r\ngsw-FR 0x0484=0484:0000040c\r\ngsw-LI 0x1000=0807:00000807\r\ngv 0x1000=0809:00000809\r\ngv-IM 0x1000=0809:00000809\r\nha-Latn-GH 0x1000=0468:00000468\r\nha-Latn-NE 0x1000=0468:00000468\r\nhr-BA 0x101a=101a:0000041a\r\nia 0x1000=040c:0000040c\r\nia-001 0x1000=040c:0000040c\r\nibb 0x0469=0409:00000409\r\nibb-NG 0x0469=0409:00000409\r\nid 0x0421=0421:00000409\r\nid-ID 0x0421=0421:00000409\r\nit-CH 0x0810=0810:0000100c\r\nit-SM 0x1000=0410:00000410\r\njv 0x1000=0c00:00000409\r\njv-Java 0x1000=0c00:00110c00\r\njv-Java-ID 0x1000=0c00:00110c00\r\njv-Latn 0x1000=0c00:00000409\r\njv-Latn-ID 0x1000=0c00:00000409\r\nkl 0x046f=046f:00000406\r\nkl-GL 0x046f=046f:00000406\r\nkok 0x0457=0457:00000439\r\nkok-IN 0x0457=0457:00000439\r\nkr 0x0471=0409:00000409\r\nkr-Latn 0x0471=0409:00000409\r\nkr-Latn-NG 0x0471=0409:00000409\r\nks 0x1000=0420:00000420\r\nks-Arab 0x1000=0420:00000420\r\nks-Arab-IN 0x1000=0420:00000420\r\nks-Deva 0x0860=0439:00010439\r\nks-Deva-IN 0x0860=0439:00010439\r\nksh 0x1000=0407:00000407\r\nksh-DE 0x1000=0407:00000407\r\nku-Arab-IR 0x1000=0492:00000492\r\nkw 0x1000=0809:00000809\r\nkw-GB 0x1000=0809:00000809\r\nla 0x0476=0409:00000409\r\nla-001 0x0476=0409:00000409\r\nlrc 0x1000=0801:00000401\r\nlrc-IQ 0x1000=0801:00000401\r\nlrc-IR 0x1000=0801:00000401\r\nmg 0x1000=0C00:0000040C\r\nmg-MG 0x1000=0C00:0000040C\r\nmn-Mong-MN 0x0c50=0c50:00010850\r\nmni 0x0458=4009:00004009\r\nmni-IN 0x0458=4009:00004009\r\nmoh 0x047c=047c:00000409\r\nmoh-CA 0x047c=047c:00000409\r\nms 0x043e=043e:00000409\r\nms-BN 0x083e=083e:00000409\r\nms-MY 0x043e=043e:00000409\r\nmy 0x0455=0455:00130c00\r\nmy-MM 0x0455=0455:00130c00\r\nmzn 0x1000=0429:00000429\r\nmzn-IR 0x1000=0429:00000429\r\nnb-SJ 0x1000=0414:00000414\r\nne-IN 0x0861=0861:00000461\r\nnl 0x0413=0413:00020409\r\nnl-NL 0x0413=0413:00020409\r\nnn 0x0814=0814:00000414\r\nnn-NO 0x0814=0814:00000414\r\nnqo 0x1000=0c00:00090c00\r\nnqo-GN 0x1000=0c00:00090c00\r\noc 0x0482=0482:0000040c\r\noc-FR 0x0482=0482:0000040c\r\nom 0x0472=0472:00000409\r\nom-ET 0x0472=0472:00000409\r\nos 0x1000=0419:00000419\r\nos-GE 0x1000=0419:00000419\r\nos-RU 0x1000=0419:00000419\r\npa-Arab 0x0846=0846:00000420\r\npa-Arab-PK 0x0846=0846:00000420\r\npap 0x0479=0479:00000409\r\npap-029 0x0479=0479:00000409\r\nprg 0x1000=0407:00000407\r\nprg-001 0x1000=0407:00000407\r\nprs 0x048c=048c:00050429\r\nprs-AF 0x048c=048c:00050429\r\npt-AO 0x1000=0816:00000816\r\npt-CV 0x1000=0816:00000816\r\npt-GW 0x1000=0816:00000816\r\npt-MO 0x1000=0816:00000816\r\npt-MZ 0x1000=0816:00000816\r\npt-ST 0x1000=0816:00000816\r\npt-TL 0x1000=0816:00000816\r\nquc 0x0486=0486:0000080a\r\nquc-Latn 0x0486=0486:0000080a\r\nquc-Latn-GT 0x0486=0486:0000080a\r\nquz 0x046b=046b:0000080a\r\nquz-BO 0x046b=046b:0000080a\r\nquz-EC 0x086b=086b:0000080a\r\nquz-PE 0x0c6b=0c6b:0000080a\r\nrm 0x0417=0417:00000807\r\nrm-CH 0x0417=0417:00000807\r\nro-MD 0x0818=0818:00010418\r\nru-BY 0x1000=0419:00000419\r\nru-KG 0x1000=0419:00000419\r\nru-KZ 0x1000=0419:00000419\r\nru-MD 0x0819=0409:00000409\r\nru-UA 0x1000=0419:00000419\r\nrw 0x0487=0487:00000409\r\nrw-RW 0x0487=0487:00000409\r\nsa 0x044f=044f:00000439\r\nsa-IN 0x044f=044f:00000439\r\nsd 0x0859=0859:00000420\r\nsd-Arab 0x0859=0859:00000420\r\nsd-Arab-PK 0x0859=0859:00000420\r\nsd-Deva 0x0459=0439:00010439\r\nsd-Deva-IN 0x0459=0439:00010439\r\nse-FI 0x0c3b=0c3b:0001083b\r\nshi 0x1000=105f:0000105f\r\nshi-Latn 0x1000=085f:0000085f\r\nshi-Latn-MA 0x1000=085f:0000085f\r\nshi-Tfng 0x1000=105f:0000105f\r\nshi-Tfng-MA 0x1000=105f:0000105f\r\nsma 0x1c3b=1c3b:0000083b\r\nsma-NO 0x183b=183b:0000043b\r\nsma-SE 0x1c3b=1c3b:0000083b\r\nsmj 0x143b=143b:0000083b\r\nsmj-NO 0x103b=103b:0000043b\r\nsmj-SE 0x143b=143b:0000083b\r\nsmn 0x243b=243b:0001083b\r\nsmn-FI 0x243b=243b:0001083b\r\nsms 0x203b=203b:0001083b\r\nsms-FI 0x203b=203b:0001083b\r\nsn 0x1000=0c00:00000409\r\nsn-Latn 0x1000=0c00:00000409\r\nsn-Latn-ZW 0x1000=0c00:00000409\r\nso 0x0477=0477:00000409\r\nso-SO 0x0477=0477:00000409\r\nsq-MK 0x1000=041c:0000041c\r\nsr 0x241a=241a:0000081a\r\nsr-Cyrl 0x281a=281a:00000c1a\r\nsr-Cyrl-BA 0x1c1a=1c1a:00000c1a\r\nsr-Cyrl-ME 0x301a=301a:00000c1a\r\nsr-Cyrl-RS 0x281a=281a:00000c1a\r\nsr-Latn 0x241a=241a:0000081a\r\nsr-Latn-BA 0x181a=181a:0000081a\r\nsr-Latn-ME 0x2c1a=2c1a:0000081a\r\nsr-Latn-RS 0x241a=241a:0000081a\r\nst 0x0430=0430:00000409\r\nst-ZA 0x0430=0430:00000409\r\nsv-AX 0x1000=041d:0000041d\r\nsv-FI 0x081d=081d:0000041d\r\nsw 0x0441=0441:00000409\r\nsw-KE 0x0441=0441:00000409\r\nta-LK 0x0849=0849:00020449\r\nta-MY 0x1000=0449:00020449\r\nta-SG 0x1000=0449:00020449\r\ntn-BW 0x0832=0832:00000432\r\ntr-CY 0x1000=041f:0000041f\r\nts 0x0431=0431:00000409\r\nts-ZA 0x0431=0431:00000409\r\ntzm-Arab 0x045f=1801:00020401\r\ntzm-Arab-MA 0x045f=1801:00020401\r\ntzm-Latn-MA 0x1000=085f:0000085f\r\nur-IN 0x0820=0820:00000420\r\nuz 0x0443=0443:00000409\r\nuz-Arab 0x1000=0463:00000463\r\nuz-Arab-AF 0x1000=0463:00000463\r\nuz-Latn 0x0443=0443:00000409\r\nuz-Latn-UZ 0x0443=0443:00000409\r\nve 0x0433=0409:00000409\r\nve-ZA 0x0433=0409:00000409\r\nwae 0x1000=0807:00000807\r\nwae-CH 0x1000=0807:00000807\r\nxh 0x0434=0434:00000409\r\nxh-ZA 0x0434=0434:00000409\r\nyi 0x043d=0409:00000409\r\nyi-001 0x043d=0409:00000409\r\nyo-BJ 0x1000=046a:0000046a\r\nzgh 0x1000=0c00:0000105F\r\nzgh-Tfng 0x1000=0c00:0000105F\r\nzgh-Tfng-MA 0x1000=0c00:0000105F\r\nzu 0x0435=0435:00000409\r\nzu-ZA 0x0435=0435:00000409\r\n```",
                                           "updatedAt":  "2023-02-06T19:21:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "CultureInfo.KeyboardLayoutId returns wrong values for many cultures",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82908",
        "createdAt":  "2023-03-02T17:05:11Z",
        "number":  82908,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1nkZg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2023-05-17T09:54:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "igotinfected",
                                            "createdAt":  "2023-06-10T11:52:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcusbooyah",
                                            "createdAt":  "2024-02-02T22:42:18Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-12-12T16:47:21Z",
        "body":  "In https://github.com/dotnet/runtime/pull/80421 and https://github.com/dotnet/runtime/issues/83585 we enabled loading custom ICU by setting `\u003cWasmIcuDataFileName\u003e` build property. Customers, in order to create such a custom ICU have to:\r\n1) clone the icu repo,\r\n2) install all the required tools,\r\n3) edit manually the ICU filters,\r\n4) build.\r\n\r\nIf they use Codespaces they need only steps 3-4 but actually manual edition of filters is the step that is the most error-prone. We would like to make this process easier for them by e.g. creating a dotnet tool. \r\n\r\n### Tool\u0027s input arguments: \r\n- `locales` - a list of locales that ICU should support, \r\n- `outputPath` - output path for the resulting ICU.\r\n- `target` - browser / mobile / wasi\r\n\r\n### Tool\u0027s output:\r\n- *.dat file created in `outputPath` location.\r\n\r\nThe tool would create a custom filter based on the locales passed and then trigger the build process.\r\n\r\n## Future work to be considered:\r\n- integegrate the process with building, e.g. as described in https://github.com/dotnet/runtime/issues/81552.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVo8L4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Wjwvj",
                                           "createdAt":  "2023-03-02T17:05:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn https://github.com/dotnet/runtime/pull/80421 we enabled loading custom ICU by setting `\u003cWasmIcuDataFileName\u003e` build property. Customers, in order to create such a custom ICU have to:\r\n1) clone the icu repo,\r\n2) install all the required tools,\r\n3) edit manually the ICU filters,\r\n4) build.\r\n\r\nIf they use Codespaces they need only steps 3-4 but actually manual edition of filters is the step that is the most error-prone. We would like to make this process easier for them by e.g. creating a dotnet tool. \r\n\r\nTool\u0027s input arguments: \r\n- `locales` - a list of locales that ICU should support, \r\n- `outputPath` - output path for the resulting ICU.\r\n- `target` - browser / mobile / wasi\r\n\r\nTool\u0027s output:\r\n- *.dat file created in `outputPath` location.\r\n\r\nThe tool would create a custom filter based on the locales passed and then trigger the build process.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilonatommy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edirecthex, steveisok, ilonatommy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `packaging`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-02T17:05:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][icu] Automate custom icu creation",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization",
                       "packaging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85034",
        "createdAt":  "2023-04-19T07:00:02Z",
        "number":  85034,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-19T15:48:42Z",
        "body":  "### Background and motivation\n\nCurrently, many members in `CultureInfo` and `NumberFormatInfo` returns array. Because the lack of immutable array in the first play, these members have to return a copy of the array. To avoid the allocation, many members in CoreLib are accessing the storage directly and bypassing the copy (For example #84964). However, types outside CoreLib can\u0027t benefit from this. This is currently mainly affecting `BigInteger`.\n\n### API Proposal\n\n```diff\r\nnamespace System.Globalization;\r\n\r\npublic sealed class NumberFormatInfo\r\n{\r\n    public int[] CurrencyGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e CurrencyGroupSizesValue { get; }\r\n    public int[] NumberGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e NumberGroupSizesValue { get; }\r\n    public int[] PercentGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e PercentGroupSizesValue { get; }\r\n    public string[] NativeDigits { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e NativeDigitsValue { get; }\r\n}\r\n\r\npublic sealed class DateTimeFormatInfo\r\n{\r\n    public string[] AbbreviatedDayNames { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e AbbreviatedDayNamesValue { get; }\r\n    public string[] AbbreviatedMonthGenitiveNames { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e AbbreviatedMonthGenitiveNames Value { get; }\r\n    // ... more similar member omitted\r\n}\r\n```\r\n\n\n### API Usage\n\nReplacing the following direct access of storage array in CoreLib:\r\n```csharp\r\nint[] groupDigits = info._numberGroupSizes;\r\n```\n\n### Alternative Designs\n\nUse different return types like `IReadOnlyList\u003cT\u003e`? `ImmutableArray\u003cT\u003e` isn\u0027t an option here since it doesn\u0027t live in CoreLib.\r\n\r\nAre these members, especially `DateTimeFormatInfo` used wide enough outside CoreLib?\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWkFEqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aQUSr",
                                           "createdAt":  "2023-04-19T07:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently, many members in `CultureInfo` and `NumberFormatInfo` returns array. Because the lack of immutable array in the first play, these members have to return a copy of the array. To avoid the allocation, many members in CoreLib are accessing the storage directly and bypassing the copy (For example #84964). However, types outside CoreLib can\u0027t benefit from this. This is currently mainly affecting `BigInteger`.\n\n### API Proposal\n\n```diff\r\nnamespace System.Globalization;\r\n\r\npublic sealed class NumberFormatInfo\r\n{\r\n    public int[] CurrencyGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e CurrencyGroupSizesValue { get; }\r\n    public int[] NumberGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e NumberGroupSizesValue { get; }\r\n    public int[] PercentGroupSizes { get; set; }\r\n+    public ReadOnlySpan\u003cint\u003e PercentGroupSizesValue { get; }\r\n    public string[] NativeDigits { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e NativeDigitsValue { get; }\r\n}\r\n\r\npublic sealed class DateTimeFormatInfo\r\n{\r\n    public string[] AbbreviatedDayNames { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e AbbreviatedDayNamesValue { get; }\r\n    public string[] AbbreviatedMonthGenitiveNames { get; set; }\r\n+    public ReadOnlySpan\u003cstring\u003e AbbreviatedMonthGenitiveNames Value { get; }\r\n    // ... more similar member omitted\r\n}\r\n```\r\n\n\n### API Usage\n\nReplacing the following direct access of storage array in CoreLib:\r\n```csharp\r\nint[] groupDigits = info._numberGroupSizes;\r\n```\n\n### Alternative Designs\n\nUse different return types like `IReadOnlyList\u003cT\u003e`? `ImmutableArray\u003cT\u003e` isn\u0027t an option here since it doesn\u0027t live in CoreLib.\r\n\r\nAre these members, especially `DateTimeFormatInfo` used wide enough outside CoreLib?\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehuoyaoyuan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-19T07:00:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Add read only collection returning members to NumberFormatInfo and DateTimeFormatInfo to avoid allocation of cloning",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87705",
        "createdAt":  "2023-06-16T19:43:16Z",
        "number":  87705,
        "author":  "kant2002",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwwi9Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2023-06-16T19:48:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ilchert",
                                            "createdAt":  "2023-06-16T19:54:05Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2023-06-17T21:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-06-17T22:10:17Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-06-16T22:00:37Z",
        "body":  "### Description\n\nIf Windows locale does not have ANSI and OEM codepages then `TextInfo.OEMCodePage` and `TextInfo.ANSICodePage` return 0 and 1 respectively. This is unexpected IMO, since if there no codepages I probably expect `-1` as value instead of some side-effects. \n\n### Reproduction Steps\n\n```\r\nusing System.Globalization;\r\n\r\nPrintCulture(CultureInfo.GetCultureInfo(\"kk-KZ\"));\r\nPrintCulture(CultureInfo.GetCultureInfo(\"uk-UA\"));\r\nvoid PrintCulture(CultureInfo culture)\r\n{\r\n    var textInfo = culture.TextInfo;\r\n    Console.WriteLine($\"Name:  {culture.Name}\");\r\n    Console.WriteLine($\"OEM :  {textInfo.OEMCodePage}\");\r\n    Console.WriteLine($\"ANSI: {textInfo.ANSICodePage}\");\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nName:  kk-KZ\r\nOEM :  -1\r\nANSI: -1\r\nName:  uk-UA\r\nOEM :  866\r\nANSI: 1251\r\n```\n\n### Actual behavior\n\n```\r\nName:  kk-KZ\r\nOEM :  1\r\nANSI: 0\r\nName:  uk-UA\r\nOEM :  866\r\nANSI: 1251\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXxUE6g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fFNzR",
                                           "createdAt":  "2023-06-16T19:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf Windows locale does not have ANSI and OEM codepages then `TextInfo.OEMCodePage` and `TextInfo.ANSICodePage` return 0 and 1 respectively. This is unexpected IMO, since if there no codepages I probably expect `-1` as value instead of some side-effects. \n\n### Reproduction Steps\n\n```\r\nusing System.Globalization;\r\n\r\nPrintCulture(CultureInfo.GetCultureInfo(\"kk-KZ\"));\r\nPrintCulture(CultureInfo.GetCultureInfo(\"uk-UA\"));\r\nvoid PrintCulture(CultureInfo culture)\r\n{\r\n    var textInfo = culture.TextInfo;\r\n    Console.WriteLine($\"Name:  {culture.Name}\");\r\n    Console.WriteLine($\"OEM :  {textInfo.OEMCodePage}\");\r\n    Console.WriteLine($\"ANSI: {textInfo.ANSICodePage}\");\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nName:  kk-KZ\r\nOEM :  -1\r\nANSI: -1\r\nName:  uk-UA\r\nOEM :  866\r\nANSI: 1251\r\n```\n\n### Actual behavior\n\n```\r\nName:  kk-KZ\r\nOEM :  1\r\nANSI: 0\r\nName:  uk-UA\r\nOEM :  866\r\nANSI: 1251\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekant2002\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-16T19:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fFQTq",
                                           "createdAt":  "2023-06-16T19:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-N2TA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2023-06-17T03:58:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-06-17T22:10:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ForNeVeR",
                                           "body":  "_Note:_ currently, the corresponding code doesn\u0027t do any error checking: https://github.com/dotnet/runtime/blob/d334f0c3f1adfa130efc94aa76e4dded7673e5c2/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Nls.cs#L34-L40\r\n\r\nThe exit code of `GetLocaleInfoEx` is discarded.\r\n\r\n(I\u0027m not sure the corresponding WinAPI signals an error, though.)\r\n\r\nAlso, while I agree that consistently returning `0` or `-1` for both properties would be better, we should also\r\n- consider the possible impact on existing code that misuses these codes,\r\n- document this new returned value properly.",
                                           "updatedAt":  "2023-06-16T19:54:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Inconsistent ANSICodePage and OEMCodePage values",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89194",
        "createdAt":  "2023-07-19T17:33:55Z",
        "number":  89194,
        "author":  "joncham",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-20T21:48:43Z",
        "body":  "### Description\r\n\r\nI am seeing an intermittent hang in dotnet.exe when exiting. The icu.dll is attempting to acquire a lock and block indefinitely. Callstack of hung process is:\r\n\r\n```\r\n\u003e\tntdll.dll!NtWaitForAlertByThreadId()\tUnknown\r\n \tntdll.dll!RtlpRunOnceWaitForInit()\tUnknown\r\n \tntdll.dll!RtlRunOnceExecuteOnce()\tUnknown\r\n \tKernelBase.dll!InitOnceExecuteOnce()\tUnknown\r\n \ticu.dll!std::call_once\u003cvoid (\u0026)(void)\u003e(struct std::once_flag \u0026,void (\u0026)(void))\tUnknown\r\n \ticu.dll!icu::UMutex::getMutex(void)\tUnknown\r\n \ticu.dll!icu::UMutex::lock(void)\tUnknown\r\n \ticu.dll!u_cleanup()\tUnknown\r\n \tucrtbase.dll!\u003clambda\u003e(void)()\tUnknown\r\n \tucrtbase.dll!__crt_seh_guarded_call\u003cint\u003e::operator()\u003c\u003clambda_7777bce6b2f8c936911f934f8298dc43\u003e,\u003clambda\u003e(void) \u0026,\u003clambda_3883c3dff614d5e0c5f61bb1ac94921c\u003e\u003e()\tUnknown\r\n \tucrtbase.dll!_execute_onexit_table()\tUnknown\r\n \tucrtbase.dll!__crt_state_management::wrapped_invoke\u003cint (*)(int *),int *,int\u003e(int (*)(int *),int *)\tUnknown\r\n \ticu.dll!dllmain_crt_process_detach()\tUnknown\r\n \ticu.dll!dllmain_dispatch()\tUnknown\r\n \tntdll.dll!LdrpCallInitRoutine()\tUnknown\r\n \tntdll.dll!LdrShutdownProcess()\tUnknown\r\n \tntdll.dll!RtlExitUserProcess()\tUnknown\r\n \tkernel32.dll!ExitProcessImplementation()\tUnknown\r\n \tucrtbase.dll!exit_or_terminate_process()\tUnknown\r\n \tucrtbase.dll!common_exit()\tUnknown\r\n \tdotnet.exe!__scrt_common_main_seh() Line 295\tC++\r\n \tkernel32.dll!BaseThreadInitThunk()\tUnknown\r\n \tntdll.dll!RtlUserThreadStart()\tUnknown\r\n```\r\n\r\nOnly a single thread (main thread) is executing at this point in the process.\r\n\r\n### Reproduction Steps\r\n\r\nNo reproduction. I can produce this with a stress test under our CI environment and cause it to hang after a few hours.\r\n\r\n### Expected behavior\r\n\r\nProcess exits without hang.\r\n\r\n### Actual behavior\r\n\r\nProcess never exits.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 7.0.102\r\nWindows 10 Pro (10.0.19045)\r\nx64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYgdFyA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h6CAc",
                                           "createdAt":  "2023-07-19T19:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @tarekgh @jefgen ",
                                           "updatedAt":  "2023-07-19T19:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6D-3",
                                           "createdAt":  "2023-07-19T19:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBNNmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joncham",
                                                                               "createdAt":  "2023-07-19T19:14:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-07-19T19:42:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "TautvydasZilys",
                                           "body":  "From what we can tell, this is a bug in the icu.dll library that ships with the OS. `icu.dll!u_cleanup` accesses `icu.dll!initFlag` which is a global variable and then `kernelbase.dll!InitOnceExecuteOnce` thinks that it\u0027s locked. Given the callstack, I believe global variables might have already started being destroyed at that point. For comparison, the same code gets executed through `DllMain` instead on the Windows 11 version of the library:\r\n\r\n \ticu.dll!icu_internal::UMutex::getMutex()\r\n \ticu.dll!uprv_u_cleanup()\r\n \ticu.dll!HandleIcuCleanUp()\r\n\ticu.dll!DllMain()\r\n \ticu.dll!dllmain_dispatch()\r\n \tntdll.dll!LdrpCallInitRoutine()\r\n \tntdll.dll!LdrShutdownProcess()\r\n \tntdll.dll!RtlExitUserProcess()\r\n \tkernel32.dll!ExitProcessImplementation()\r\n \tucrtbased.dll!exit_or_terminate_process(const unsigned int return_code) Line 138\tC++\r\n \tucrtbased.dll!common_exit(const int return_code, const _crt_exit_cleanup_mode cleanup_mode, const _crt_exit_return_mode return_mode) Line 274\tC++\r\n \tucrtbased.dll!exit(int return_code) Line 288\tC++\r\n \tProject2.exe!__scrt_common_main_seh() Line 297\tC++\r\n \tProject2.exe!__scrt_common_main() Line 331\tC++\r\n \tProject2.exe!mainCRTStartup(void * __formal) Line 17\tC++\r\n \tkernel32.dll!BaseThreadInitThunk()\tUnknown\r\n \tntdll.dll!RtlUserThreadStart()\tUnknown\r\n\r\nWe have not confirmed whether this is reproducible on Windows 11 since our CI runs on Windows 10. Jonathan didn\u0027t mention this, but we have a full heap dump file that we could privately share if needed.",
                                           "updatedAt":  "2023-07-19T19:09:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6Hzl",
                                           "createdAt":  "2023-07-19T19:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jefgen",
                                           "body":  "cc @rp9-next",
                                           "updatedAt":  "2023-07-19T19:18:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6Py-",
                                           "createdAt":  "2023-07-19T19:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBNpDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2023-07-19T20:54:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@rp9-next we may need to open a bug in Windows DB for ICU. Looks like this is a problem during the process shutdown. Do you know which ICU version installed on `Windows 10 Pro (10.0.19045)`? \r\n\r\n@TautvydasZilys \r\n\u003e but we have a full heap dump file that we could privately share if needed.\r\n\r\nThis will be very helpful. Is there a way you can run the CI on Windows 11 too just to see if the issue still there? ",
                                           "updatedAt":  "2023-07-19T19:45:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6Tzj",
                                           "createdAt":  "2023-07-19T19:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBNh2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-07-19T20:35:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jefgen",
                                           "body":  "I don\u0027t work on ICU anymore, but just to help out a bit...\r\n\r\nFor `Windows 10 Pro (10.0.19045)`, it has ICU version 64.2 included in the OS.\r\n\r\nNote that there are some changes made to the clean up functions for the OS version of the DLL, which aren\u0027t included upstream. See the comment here for details: https://github.com/microsoft/icu/blob/maint/maint-64/icu/icu4c/source/common/ucln_cmn.cpp#L66-L89\r\n\r\nSo this could be a bug in that patch perhaps. If you have a full heap dump file that would help. I think @rp9-next might need to take a look at the heap dump to investigate and see if this is a bug in those changes, or a bug in upstream ICU itself. There were also some additional changes made in this clean up code path in later versions. If you don\u0027t see this issue on Windows 11, then they might want to be backported.\r\n\r\nHope this helps.",
                                           "updatedAt":  "2023-07-19T19:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6WsR",
                                           "createdAt":  "2023-07-19T20:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TautvydasZilys",
                                           "body":  "\u003e Note that there are some changes made to the clean up functions for the OS version of the DLL, which aren\u0027t included upstream. See the comment here for details: https://github.com/microsoft/icu/blob/maint/maint-64/icu/icu4c/source/common/ucln_cmn.cpp#L66-L89\r\n\r\nFrom what I can tell, the DLL in Windows 10 does not have this patch: \r\n\r\n\tu_cleanup:\r\n\t  0000000180013130: mov         qword ptr [rsp+8],rbx\r\n\t  0000000180013135: push        rdi\r\n\t  0000000180013136: sub         rsp,20h\r\n\t  000000018001313A: xor         ecx,ecx\r\n\t  000000018001313C: call        umtx_lock\r\n\t  0000000180013141: inc         dword ptr [?cleanup_count@@3HA]\r\n\t  0000000180013147: lea         rcx,[?globalMutex@?A0x2c72d8bd@icu@@3VUMutex@2@A]\r\n\t  000000018001314E: call        ?unlock@UMutex@icu@@QEAAXXZ\r\n\t  0000000180013153: lea         rbx,[1802146F0h]\r\n\t  000000018001315A: mov         edi,8\r\n\t  000000018001315F: mov         rax,qword ptr [rbx]\r\n\t  0000000180013162: test        rax,rax\r\n\t  0000000180013165: je          0000000180013171\r\n\t  0000000180013167: call        qword ptr [__guard_dispatch_icall_fptr]\r\n\t  000000018001316D: and         qword ptr [rbx],0\r\n\t  0000000180013171: add         rbx,8\r\n\t  0000000180013175: sub         rdi,1\r\n\t  0000000180013179: jne         000000018001315F\r\n\t  000000018001317B: lea         rbx,[180214630h]\r\n\t  0000000180013182: mov         edi,18h\r\n\t  0000000180013187: mov         rax,qword ptr [rbx]\r\n\t  000000018001318A: test        rax,rax\r\n\t  000000018001318D: je          0000000180013199\r\n\t  000000018001318F: call        qword ptr [__guard_dispatch_icall_fptr]\r\n\t  0000000180013195: and         qword ptr [rbx],0\r\n\t  0000000180013199: add         rbx,8\r\n\t  000000018001319D: sub         rdi,1\r\n\t  00000001800131A1: jne         0000000180013187\r\n\t  00000001800131A3: and         qword ptr [180214740h],rdi\r\n\t  00000001800131AA: and         qword ptr [180214730h],rdi\r\n\t  00000001800131B1: and         qword ptr [180214738h],rdi\r\n\t  00000001800131B8: and         qword ptr [180214748h],rdi\r\n\t  00000001800131BF: and         qword ptr [1802145F8h],rdi\r\n\t  00000001800131C6: and         qword ptr [180214600h],rdi\r\n\t  00000001800131CD: and         qword ptr [1802145F0h],rdi\r\n\t  00000001800131D4: or          dword ptr [180214610h],0FFFFFFFFh\r\n\t  00000001800131DB: and         qword ptr [180214608h],rdi\r\n\t  00000001800131E2: mov         rbx,qword ptr [rsp+30h]\r\n\t  00000001800131E7: add         rsp,20h\r\n\t  00000001800131EB: pop         rdi\r\n\t  00000001800131EC: ret\r\n\t  00000001800131ED: int         3\r\n\r\nThe one on Windows 11 does:\r\n\r\n\tu_cleanup:\r\n\t  0000000180040A60: ret         0\r\n\t  0000000180040A63: int         3\r\n\r\n\u003e Is there a way you can run the CI on Windows 11 too just to see if the issue still there?\r\n\r\nUnfortunately that\u0027s surprisingly not trivial at this time. We will not be able to check that easily.\r\n\r\n\u003e If you have a full heap dump file that would help. \r\n\r\nWhat is a good way to share a dump with you privately? We don\u0027t want to put it on a public github issue :).\r\n",
                                           "updatedAt":  "2023-07-19T20:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6f9Z",
                                           "createdAt":  "2023-07-19T20:39:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBNo-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2023-07-19T20:53:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e What is a good way to share a dump with you privately? We don\u0027t want to put it on a public github issue :).\r\n\r\nI\u0027ll let @rp9-next advise about that as he will be the one to look at. @rp9-next let me know if you need help and I can provide that. ",
                                           "updatedAt":  "2023-07-19T20:39:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h87O4",
                                           "createdAt":  "2023-07-20T06:44:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rp9-next",
                                           "body":  "@joncham @TautvydasZilys Thanks for reporting this issue.\r\n@tarekgh @jefgen Thanks for preliminary investigation and re-routing !\r\n\r\nWe will log a bug into our system for windows and investigate further.. \r\nPlease share the full dumps to targetdev@microsoft.com (or you could file a bug  with windows for ICU using [Feedback Hub](https://support.microsoft.com/en-us/windows/send-feedback-to-microsoft-with-the-feedback-hub-app-f59187f8-8739-22d6-ba93-f66612949332) for tracking purposes.)\r\n\r\n\r\nFrom the explanation above, it seems that the system does not contain the no-op patch on Windows 10 (vs Win 11).\r\n@TautvydasZilys , could you consider updating the underlying ICU version for your project to a later version (perhaps 68.2) and confirm if you are still facing the same issue?\r\n\r\nYou can find the instructions for the same [here](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#app-local-icu)",
                                           "updatedAt":  "2023-07-20T06:44:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iBc8M",
                                           "createdAt":  "2023-07-20T20:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TautvydasZilys",
                                           "body":  "\u003e Could you consider updating the underlying ICU version for your project to a later version (perhaps 68.2) and confirm if you are still facing the same issue?\r\n\r\nThe problem is that we\u0027re seeing the hang in Roslyn when compiling C# code, not our own .NET project. Forcing NLS seems to make the hang go away so we are going to go with that workaround for now.",
                                           "updatedAt":  "2023-07-20T21:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iBijE",
                                           "createdAt":  "2023-07-20T20:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBZuZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2023-07-20T20:42:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rp9-next",
                                                                               "createdAt":  "2023-07-21T11:53:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@rp9-next It would be beneficial to provide the fix for these specific Windows versions. We should verify whether the problematic ICU version is utilized on any of the Windows server versions. If this is true, we must ensure that these server versions are promptly patched.",
                                           "updatedAt":  "2023-07-20T20:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iB0XI",
                                           "createdAt":  "2023-07-20T21:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBcC0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-07-20T23:13:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rp9-next",
                                                                               "createdAt":  "2023-07-21T11:52:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jefgen",
                                                                               "createdAt":  "2023-07-21T18:40:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "TautvydasZilys",
                                           "body":  "I\u0027ve sent over the dump to the email address you gave me.",
                                           "updatedAt":  "2023-07-20T21:42:31Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "dotnet.exe hangs on exit due to icu.dll ",
        "labels":  [
                       "area-System.Globalization",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90999",
        "createdAt":  "2023-08-23T17:01:36Z",
        "number":  90999,
        "author":  "Neme12",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:45:17Z",
        "body":  "### Background and motivation\r\n\r\nSince #32247/#40910, this code\r\n```c#\r\nstring.Equals(a, b, StringComparison.OrdinalIgnoreCase)\r\n```\r\nis no longer equivalent to this code\r\n```c#\r\na.ToUpperInvariant() == b.ToUpperInvariant()\r\n```\r\nThat\u0027s why I\u0027m proposing to add `ToLowerOrdinal()` and `ToUpperOrdinal()` methods that would be guaranteed to have the same semantics as `OrdinalIgnoreCase` comparisons, and that would also be guaranteed to be case folded letter-by-letter and have the same length as the input string (and IMO, `ToLowerInvariant` and `ToUpperInvariant` should be changed to use proper ICU case semantics that wouldn\u0027t have to result in the same length, as per https://github.com/dotnet/runtime/issues/32247#issuecomment-600265673, but that\u0027s a separate discussion).\r\n\r\n### API Proposal\r\n\r\n```diff\r\n namespace System;\r\n\r\n public sealed partial class String\r\n {\r\n     public string ToLower();\r\n     public string ToLower(CultureInfo? culture);\r\n     public string ToLowerInvariant();\r\n+    public string ToLowerOrdinal();\r\n     public string ToUpper();\r\n     public string ToUpper(CultureInfo? culture);\r\n     public string ToUpperInvariant();\r\n+    public string ToUpperOrdinal();\r\n }\r\n\r\n public readonly partial struct Char\r\n {\r\n     public static char ToLower(char c);\r\n     public static char ToLower(char c, CultureInfo culture);\r\n     public static char ToLowerInvariant(char c);\r\n+    public static char ToLowerOrdinal(char c);\r\n     public static char ToUpper(char c);\r\n     public static char ToUpper(char c, CultureInfo culture);\r\n     public static char ToUpperInvariant(char c);\r\n+    public static char ToUpperOrdinal(char c);\r\n }\r\n\r\n namespace System.Text;\r\n\r\n public readonly partial struct Rune\r\n {\r\n     public static Rune ToLower(Rune value, CultureInfo culture);\r\n     public static Rune ToLowerInvariant(Rune value);\r\n+    public static Rune ToLowerOrdinal(Rune value);\r\n     public static Rune ToUpper(Rune value, CultureInfo culture);\r\n     public static Rune ToUpperInvariant(Rune value);\r\n+    public static Rune ToUpperOrdinal(Rune value);\r\n }\r\n\r\n namespace System;\r\n\r\n public static partial class MemoryExtensions\r\n {\r\n     public static int ToLower(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, CultureInfo? culture);\r\n     public static int ToLowerInvariant(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n+    public static int ToLowerOrdinal(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n     public static int ToUpper(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, CultureInfo? culture);\r\n     public static int ToUpperInvariant(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n+    public static int ToUpperOrdinal(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n }\r\n```\r\n\r\n### API Usage\r\n\r\n...\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\ncc @GrabYourPitchforks ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgwC4Yw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kwLo4",
                                           "createdAt":  "2023-08-23T17:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nSince #32247/#40910, this code\r\n```c#\r\nstring.Equals(a, b, StringComparison.OrdinalIgnoreCase)\r\n```\r\nis no longer equivalent to this code\r\n```c#\r\na.ToUpperInvariant() == b.ToUpperInvariant()\r\n```\r\nThat\u0027s why I\u0027m proposing to add `ToLowerOrdinal()` and `ToUpperOrdinal()` methods that would be guaranteed to have the same semantics as `OrdinalIgnoreCase` comparisons, and that would also be guaranteed to be case folded letter-by-letter and have the same length as the input string (and IMO, `ToLowerInvariant` and `ToUpperInvariant` should be changed to use proper ICU case semantics that wouldn\u0027t have to result in the same length, as per https://github.com/dotnet/runtime/issues/32247#issuecomment-600265673, but that\u0027s a separate discussion).\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System;\r\n\r\n public sealed partial class String\r\n {\r\n     public string ToLower();\r\n     public string ToLower(CultureInfo? culture);\r\n     public string ToLowerInvariant();\r\n+    public string ToLowerOrdinal();\r\n     public string ToUpper();\r\n     public string ToUpper(CultureInfo? culture);\r\n     public string ToUpperInvariant();\r\n+    public string ToUpperOrdinal();\r\n }\r\n\r\n public readonly partial struct Char\r\n {\r\n     public static char ToLower(char c);\r\n     public static char ToLower(char c, CultureInfo culture);\r\n     public static char ToLowerInvariant(char c);\r\n+    public static char ToLowerOrdinal(char c);\r\n     public static char ToUpper(char c);\r\n     public static char ToUpper(char c, CultureInfo culture);\r\n     public static char ToUpperInvariant(char c);\r\n+    public static char ToUpperOrdinal(char c);\r\n }\r\n\r\nnamespace System.Text;\r\n\r\n public readonly partial struct Rune\r\n {\r\n     public static Rune ToLower(Rune value, CultureInfo culture);\r\n     public static Rune ToLowerInvariant(Rune value);\r\n+    public static Rune ToLowerOrdinal(Rune value);\r\n     public static Rune ToUpper(Rune value, CultureInfo culture);\r\n     public static Rune ToUpperInvariant(Rune value);\r\n+    public static Rune ToUpperOrdinal(Rune value);\r\n }\r\n\r\nnamespace System;\r\n\r\n public static partial class MemoryExtensions\r\n {\r\n     public static int ToLower(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, CultureInfo? culture);\r\n     public static int ToLowerInvariant(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n+    public static int ToLowerOrdinal(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n     public static int ToUpper(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination, CultureInfo? culture);\r\n     public static int ToUpperInvariant(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n+    public static int ToUpperOrdinal(this ReadOnlySpan\u003cchar\u003e source, Span\u003cchar\u003e destination);\r\n }\r\n```\r\n\r\n### API Usage\r\n\r\n...\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\ncc @GrabYourPitchforks \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNeme12\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-23T17:23:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwTHH",
                                           "createdAt":  "2023-08-23T17:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEkzsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2023-08-23T17:49:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This proposal will help resolving https://github.com/dotnet/runtime/issues/67873 too. ",
                                           "updatedAt":  "2023-08-23T17:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C_ZUE",
                                           "createdAt":  "2024-06-28T21:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@GrabYourPitchforks, is this something we should do now?",
                                           "updatedAt":  "2024-06-28T21:02:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DALhj",
                                           "createdAt":  "2024-06-29T02:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The proposal looks good to me. If we get someone to help with the implementation, we can consider it. ",
                                           "updatedAt":  "2024-06-29T02:31:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Add `ToLowerOrdinal()` \u0026 `ToUpperOrdinal()`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91003",
        "createdAt":  "2023-08-23T18:00:06Z",
        "number":  91003,
        "author":  "Neme12",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9lRHQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tats-u",
                                            "createdAt":  "2024-04-10T14:34:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-06-02T17:38:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Giles-Smith",
                                            "createdAt":  "2024-06-27T09:06:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2024-07-18T10:30:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dubzer",
                                            "createdAt":  "2024-09-23T21:36:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2024-12-18T19:43:26Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-04-10T20:45:43Z",
        "body":  "### Background and motivation\r\n\r\nThere\u0027s an existing API, `StringInfo.GetTextElementEnumerator`, which allows us to enumerate textual elements (grapheme clusters, or in other words, the individual characters that actually get printed on screen, as people usually think of them, and which can potentially consist of multiple `Rune`s), but this enumerator returns `string` instances as opposed to a span of the original string, adding unnecessary copying and allocations that could be avoided. It\u0027s also cumbersome because it\u0027s a non-generic enumerator, and doesn\u0027t even have a `GetEnumerator()` method, so it cannot be used in a foreach loop.\r\n\r\nThis is the existing API:\r\n```c#\r\nnamespace System.Globalization;\r\n\r\npublic class StringInfo\r\n{\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str);\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str, int index);\r\n}\r\n\r\npublic partial class TextElementEnumerator : System.Collections.IEnumerator\r\n{\r\n    internal TextElementEnumerator();\r\n    public object Current { get; }\r\n    public int ElementIndex { get; }\r\n    public string GetTextElement();\r\n    public bool MoveNext();\r\n    public void Reset();\r\n}\r\n\r\n```\r\n\r\n### API Proposal\r\n\r\nI\u0027m proposing adding a modern replacement for this API that uses a span. I also propose adding it next to the existing `EnumerateRunes` methods to make it more discoverable, and let people think about which to choose when they see these two methods next to each other.\r\n\r\n```diff\r\n namespace System;\r\n \r\n public sealed partial class String\r\n {\r\n     public StringRuneEnumerator EnumerateRunes();\r\n+    public StringTextElementEnumerator EnumerateTextElements();\r\n }\r\n \r\n public static partial class MemoryExtensions\r\n {\r\n     public static SpanRuneEnumerator EnumerateRunes(this ReadOnlySpan\u003cchar\u003e span);\r\n     public static SpanRuneEnumerator EnumerateRunes(this Span\u003cchar\u003e span);\r\n+    public static SpanTextElementEnumerator EnumerateTextElements(this ReadOnlySpan\u003cchar\u003e span);\r\n }\r\n \r\n namespace System.Text;\r\n \r\n public struct StringRuneEnumerator : IEnumerable\u003cRune\u003e, IEnumerator\u003cRune\u003e\r\n {\r\n     public Rune Current { get; }\r\n     public StringRuneEnumerator GetEnumerator();\r\n     public bool MoveNext();\r\n }\r\n \r\n+public struct StringTextElementEnumerator\r\n+{\r\n+    public ReadOnlySpan\u003cchar\u003e Current { get; }\r\n+    public StringTextElementEnumerator GetEnumerator();\r\n+    public bool MoveNext();\r\n+}\r\n\r\n public ref struct SpanRuneEnumerator\r\n {\r\n     public Rune Current { get; }\r\n     public SpanRuneEnumerator GetEnumerator();\r\n     public bool MoveNext();\r\n }\r\n\r\n+public ref struct SpanTextElementEnumerator\r\n+{\r\n+    public ReadOnlySpan\u003cchar\u003e Current { get; }\r\n+    public SpanTextElementEnumerator GetEnumerator();\r\n+    public bool MoveNext();\r\n+}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// e.g. properly reversing a string using this API:\r\n\r\nvoid Reverse(string str)\r\n{\r\n    var stringBuilder = new StringBuilder();\r\n\r\n    foreach (var character in str.EnumerateTextElements())\r\n    {\r\n        stringBuilder.Insert(0, character);\r\n    }\r\n\r\n    return stringBuilder.ToString();\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOehgkXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kwhYq",
                                           "createdAt":  "2023-08-23T18:30:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "FYI there already is a span based API available here:\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.globalization.stringinfo.getnexttextelementlength?view=net-7.0\r\n\r\nAnd a strrev function available here:\r\nhttps://apisof.net/catalog/a7f49f7b-010e-73f5-6374-dfd483f88ab7",
                                           "updatedAt":  "2023-08-23T18:30:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwh8H",
                                           "createdAt":  "2023-08-23T18:31:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Well, I know about that one, but that\u0027s not really a span-based API, that requires doing it manually. I wish there was an enumerator. The string reverse was just an example of something that requires enumerating the text elements as opposed to `Rune`s.",
                                           "updatedAt":  "2023-08-23T18:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwj3P",
                                           "createdAt":  "2023-08-23T18:37:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Oh, I see, you meant the source being a span. What I meant by span-based is the enumeration of `ReadOnlySpan\u003cchar\u003e` items as opposed to `string` items.",
                                           "updatedAt":  "2023-08-23T18:37:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxJ-H",
                                           "createdAt":  "2023-08-23T20:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "This is related to #77200",
                                           "updatedAt":  "2023-08-23T20:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxXh_",
                                           "createdAt":  "2023-08-23T21:26:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Oh, I see, you meant the source being a span. What I meant by span-based is the enumeration of ReadOnlySpan\u003cchar\u003e items as opposed to string items.\r\n\r\nThe APIs that @GrabYourPitchforks pointed at https://learn.microsoft.com/en-us/dotnet/api/system.globalization.stringinfo.getnexttextelementlength?view=net-7.0 can give you the length and use it as a span. Something like:\r\n\r\n```C#\r\n            ReadOnlySpan\u003cchar\u003e s = \"Hello World!\";\r\n\r\n            int clusterLength;\r\n            while ((clusterLength = StringInfo.GetNextTextElementLength(s)) \u003e 0)\r\n            {\r\n                Console.WriteLine($\"{s.Slice(0, clusterLength)}\");\r\n                s = s.Slice(clusterLength);\r\n            }\r\n```",
                                           "updatedAt":  "2023-08-23T21:26:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxX0w",
                                           "createdAt":  "2023-08-23T21:27:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Yes, I know about that API. I\u0027m proposing having an enumerator. The old one is unusable for spans.",
                                           "updatedAt":  "2023-08-23T21:27:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxX7i",
                                           "createdAt":  "2023-08-23T21:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Why you need a new API then?",
                                           "updatedAt":  "2023-08-23T21:27:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxYLS",
                                           "createdAt":  "2023-08-23T21:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Because the old `TextElementEnumerator` is allocating and unusable with span. It would be good to have a span-based replacement. Having an enumerator is much more convenient than doing it manually. For the same reason that `EnumerateRunes` exists, and `Rune.GetRuneAt` wasn\u0027t enough, even though it\u0027s sufficient for enumeration, because it was recognized that having an enumerator is more convenient.",
                                           "updatedAt":  "2023-08-23T21:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxYNe",
                                           "createdAt":  "2023-08-23T21:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThere\u0027s an existing API, `StringInfo.GetTextElementEnumerator`, which allows us to enumerate textual elements (grapheme clusters, or in other words, the individual characters that actually get printed on screen, as people usually think of them, and which can potentially consist of multiple `Rune`s), but this enumerator returns `string` instances as opposed to a span of the original string, adding unnecessary copying and allocations that could be avoided. It\u0027s also cumbersome because it\u0027s a non-generic enumerator, and doesn\u0027t even have a `GetEnumerator()` method, so it cannot be used in a foreach loop.\r\n\r\nThis is the existing API:\r\n```c#\r\nnamespace System.Globalization;\r\n\r\npublic class StringInfo\r\n{\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str);\r\n    public static TextElementEnumerator GetTextElementEnumerator(string str, int index);\r\n}\r\n\r\npublic partial class TextElementEnumerator : System.Collections.IEnumerator\r\n{\r\n    internal TextElementEnumerator();\r\n    public object Current { get; }\r\n    public int ElementIndex { get; }\r\n    public string GetTextElement();\r\n    public bool MoveNext();\r\n    public void Reset();\r\n}\r\n\r\n```\r\n\r\n### API Proposal\r\n\r\nI\u0027m proposing adding a modern replacement for this API that uses a span. I also propose adding it next to the existing `EnumerateRunes` methods to make it more discoverable, and let people think about which to choose when they see these two methods next to each other.\r\n\r\n```diff\r\n namespace System;\r\n \r\n public sealed partial class String\r\n {\r\n     public StringRuneEnumerator EnumerateRunes();\r\n+    public StringTextElementEnumerator EnumerateTextElements();\r\n }\r\n \r\n public static partial class MemoryExtensions\r\n {\r\n     public static SpanRuneEnumerator EnumerateRunes(this ReadOnlySpan\u003cchar\u003e span);\r\n     public static SpanRuneEnumerator EnumerateRunes(this Span\u003cchar\u003e span);\r\n+    public static SpanTextElementEnumerator EnumerateTextElements(this ReadOnlySpan\u003cchar\u003e span);\r\n+    public static SpanTextElementEnumerator EnumerateTextElements(this Span\u003cchar\u003e span);\r\n }\r\n \r\n namespace System.Text;\r\n \r\n public struct StringRuneEnumerator : IEnumerable\u003cRune\u003e, IEnumerator\u003cRune\u003e\r\n {\r\n     public Rune Current { get; }\r\n     public StringRuneEnumerator GetEnumerator();\r\n     public bool MoveNext();\r\n }\r\n \r\n+public struct StringTextElementEnumerator\r\n+{\r\n+    public ReadOnlySpan\u003cchar\u003e Current { get; }\r\n+    public StringTextElementEnumerator GetEnumerator();\r\n+    public bool MoveNext();\r\n+}\r\n\r\n public ref struct SpanRuneEnumerator\r\n {\r\n     public Rune Current { get; }\r\n     public SpanRuneEnumerator GetEnumerator();\r\n     public bool MoveNext();\r\n }\r\n\r\n+public ref struct SpanTextElementEnumerator\r\n+{\r\n+    public ReadOnlySpan\u003cchar\u003e Current { get; }\r\n+    public SpanTextElementEnumerator GetEnumerator();\r\n+    public bool MoveNext();\r\n+}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// e.g. properly reversing a string using this API:\r\n\r\nvoid Reverse(string str)\r\n{\r\n    var stringBuilder = new StringBuilder();\r\n\r\n    foreach (var character in str.EnumerateTextElements())\r\n    {\r\n        stringBuilder.Insert(0, character);\r\n    }\r\n\r\n    return stringBuilder.ToString();\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNeme12\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Globalization`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-23T21:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxZ3D",
                                           "createdAt":  "2023-08-23T21:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "See also #77200. I agree with many of these points:\r\n\u003e Currently, it appears that the only way to enumerate over the grapheme clusters is by using methods associated with `StringInfo`, such as `StringInfo.GetTextElementEnumerator` and `StringInfo.GetNextTextElementLength`.\r\n\u003e \r\n\u003e However, given how those methods existed from .NET Framework 1.1, those two methods are less than ideal.\r\n\u003e \r\n\u003e * `GetTextElementEnumerator`\r\n\u003e   \r\n\u003e   * is a non-generic `IEnumerator`, so you can\u0027t use `foreach` with it / use LINQ etc\r\n\u003e     \r\n\u003e     * (It may be possible to implement IEnumerable on the enumerator itself, however: [Proposal: Better API for StringInfo.GetTextElementEnumerator #19423](https://github.com/dotnet/runtime/issues/19423) )\r\n\u003e   * Has an ugly `object Current` property (which is just `GetTextElement` but in `object`)\r\n\u003e   * The only way to access the individual cluster is to use `GetTextElement`, however this returns a new `string`, meaning that using this could result in a new `string` being allocated, in the worst case for every single `char` (if the original string is made out of only non-combining, non-surrogate characters.)\r\n\u003e * `GetNextTextElementLength`\r\n\u003e   \r\n\u003e   * You are able to obtain lengths of the individual grapheme clusters, so using this you could write your own non-allocating grapheme cluster enumerator, however involves extra steps \u0026 is less intuitive to use\r\n\u003e \r\n\u003e And generally, those two methods to work with grapheme clusters are (somewhat) hidden away in System.Globalization namespace, when IMO it really belongs in the String class.\r\n\r\nIMHO, there should be a more usable, more friendly and a first-class way of dealing with grapheme clusters in .NET than just some length check and an old, non-generic enumerator hidden away somewhere in System.Globalization in a class that isn\u0027t discoverable at all. I feel like this should be a first-class citizen in .NET as much as `Rune`s are, and should be exposed as extension methods next to `EnumerateRunes`.",
                                           "updatedAt":  "2023-08-23T21:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxkVS",
                                           "createdAt":  "2023-08-23T22:15:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODud5DA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Giles-Smith",
                                                                               "createdAt":  "2024-06-27T09:07:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2024-08-16T13:52:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Neme12",
                                           "body":  "And IMHO there should be a lot more than just enumeration - common operations like Substring, IndexOf, etc. that are grapheme cluster bassed, as was mentioned in #77200. Most of the time when developers work with linguistic text they actually need to perform these operations on grapheme clusters and not on `char`s. Code that uses `char`s works *most of the time*, but not all the time (especially nowadays when emojis, which can even span multiple `Rune`s, are really common). These are really common operations and there is no first-class support for them in .NET. I guess everyone just accepted the reality that most developers won\u0027t write the correct code anyway and we can\u0027t teach them better ways, `char` is good enough, or I don\u0027t know :/\r\n\r\nThere should be a lot more samples that use string operations on text elements than on `char`s etc, because that\u0027s the correct way to do string operations on actual human-readable text. Yes, developers get this wrong 99% of the time, but can\u0027t we at least show them how to do it the right way? And more importantly, provide easy to use APIs to do things the right way?\r\n\r\nIMHO even basic samples like https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/ should really be showing Substring etc using grapheme clusters, and not `char`s. The fact that there are none and they all use `char`-based slices etc leads developers down the wrong path. And the fact that .NET doesn\u0027t even provide good APIs for being able to do this the right way is really sad.",
                                           "updatedAt":  "2023-08-23T22:29:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kxseW",
                                           "createdAt":  "2023-08-23T22:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIDotQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2023-08-23T23:00:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2023-08-24T19:54:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-09-28T11:51:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "It may be worth thinking to have a TextBreaker class which can do different operations (enumeration, searching, ...etc.). ",
                                           "updatedAt":  "2023-08-23T22:55:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k3s1g",
                                           "createdAt":  "2023-08-24T19:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "FWIW I don\u0027t have a strong opinion on how the team should triage this. If the area owners think it\u0027s useful, great!\r\n\r\nMy earlier comment was just to point out that lacking an official first class API, it would technically be feasible to implement it oneself if needed by relying on existing API surface. But I can definitely see the argument that doing that oneself would involve much boilerplate code and would be annoying.",
                                           "updatedAt":  "2023-08-24T19:56:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k4Vd0",
                                           "createdAt":  "2023-08-24T22:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e it would technically be feasible to implement it oneself if needed by relying on existing API surface\r\n\r\nI already have my own extension methods and utilities to work with grapheme clusters, but I feel like I shouldn\u0027t have to and this is something that should be built-in. Swift\u0027s string operations work with grapheme clusters by default - indexing, substring, etc, and they even have a type that represents a grapheme cluster, and simply call it `Character`. That\u0027s the proper way to do it, not `char` like we have :/\r\n\r\nI\u0027m thinking `EnumerateCharacters` might be a better name than `EnumerateTextElements`, because that\u0027s what these thing are - characters, human readable characters as they actually appear on screen. \"Text element\" is kind of vague. Swift calls it `Character`. Although that might be confused with `char`.\r\n\r\n\u003e It may be worth thinking to have a TextBreaker class\r\n\r\nYes, there are a lot more operations that are commonly needed other than enumeration - e.g. getting the length in characters, getting a character at a specified index, IndexOf where the index is the index in the number of characters, not in `char`s, substring, etc... as was mentioned in #77200. These are common operations and there\u0027s no easy way to do them in .NET on actual characters as opposed to code points, or `char`s. You almost never want to work with individual `char`s, do substrings in chars, etc, unless you\u0027re working with ASCII... if you don\u0027t want your code to be broken and want your application to be correct with all possible languages and to work well with emojis etc. I\u0027m jealous of Swift on this because they do all this correctly by default. (And .NET doesn\u0027t even *have* a way to do these things, let alone it being the default way of working with string 😔) .NET only has some basic helpers and an outdated .NET Framework 1.1 enumerator hidden somewhere in an unknown class in the Globalization namepace (and I feel like it really shouldn\u0027t be there - it has little to do with globalization because the result doesn\u0027t depend on the culture. it\u0027s just basic Unicode operations. It should be more like in the System.Text namespace).",
                                           "updatedAt":  "2024-04-10T20:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k4ymP",
                                           "createdAt":  "2023-08-25T01:04:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e It may be worth thinking to have a TextBreaker class which can do different operations (enumeration, searching, ...etc.).\r\n\r\nI\u0027ve relied on the ICU `UBRK_LINE` iterator for another personal project I\u0027m working on and ended up writing a C# wrapper around ICU\u0027s implementation. Having this functionality in an OOB package would be useful.",
                                           "updatedAt":  "2023-08-25T01:04:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k83gX",
                                           "createdAt":  "2023-08-25T17:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "What\u0027s also missing is a UTF-8 overload of `StringInfo.GetNextTextElementLength`.",
                                           "updatedAt":  "2023-08-25T17:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lbqoK",
                                           "createdAt":  "2023-08-31T20:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODne4KA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-09-28T11:52:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Giles-Smith",
                                                                               "createdAt":  "2024-06-27T09:07:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e I\u0027m thinking `EnumerateCharacters` might be a better name than `EnumerateTextElements`, because that\u0027s what these thing are - characters, human readable characters as they actually appear on screen. \"Text element\" is kind of vague. Swift calls it `Character`. Although that might be confused with `char`.\r\n\u003e \r\n\u003e \u003e\r\n\r\nAnother option might be `EnumerateGraphemes`. While Unicode calls them grapheme clusters, they are really just graphemes. This would be the most descriptive \u0026 precise name. I dislike \"text elements\" because it\u0027s really vague - even a whole word or a sentence could be considered text elements. And AFAIK, it\u0027s not a term that any other platforms use either, just an odd name invented by .NET.",
                                           "updatedAt":  "2023-08-31T20:40:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lbu_5",
                                           "createdAt":  "2023-08-31T20:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "There is a similar issue to this one: #19423",
                                           "updatedAt":  "2023-08-31T20:55:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s-Cve",
                                           "createdAt":  "2023-11-27T16:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdwVXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tats-u",
                                                                               "createdAt":  "2024-04-10T22:24:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "I just very much missed the UTF-8 GetNextTextElementLength overload, especially since all the necessary pieces are there, but oh so slightly out of reach between being `internal` and unusable with reflection due to `ReadOnlySpan`.",
                                           "updatedAt":  "2023-11-27T16:39:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Dh4I",
                                           "createdAt":  "2024-04-10T14:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdvs6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2024-04-10T20:42:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tats-u",
                                           "body":  "The current `TextElementEnumerator` is useless.\r\nIt does not accept `ReadOnlySpan\u003cchar\u003e`, and yields `object`, not even `string`.\r\nIt must have yielded `ReadOnlySpan\u003cchar\u003e` to avoid unnecessary heap allocations instead ideally.\r\n`GetNextTextElementLength` is just a tool to create such a new iterator by yourself, and missing the overload `(ReadOnlySpan\u003cchar\u003e, int)`.",
                                           "updatedAt":  "2024-04-10T14:55:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56GCRf",
                                           "createdAt":  "2024-04-10T20:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e I just very much missed the UTF-8 GetNextTextElementLength overload, especially since all the necessary pieces are there, but oh so slightly out of reach between being `internal` and unusable with reflection due to `ReadOnlySpan`.\r\n\r\nYeah, I needed that too. The implementation is written generically over a Rune decoder so adding it would just be a one line implementation. But it\u0027s not exposed :( But I also needed a UTF-32/Rune version. If only there was an API that specifically takes a `ReadOnlySpan\u003cT\u003e` and a decoder delegate like the internal one.",
                                           "updatedAt":  "2024-04-10T20:42:25Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "[API Proposal]: Add modern, span-based alternative to `StringInfo.GetTextElementEnumerator`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95338",
        "createdAt":  "2023-11-28T14:28:18Z",
        "number":  95338,
        "author":  "mkhamoyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:56:44Z",
        "body":  "- [ ]   Go through test cases market as `ActiveIssue` for `PlatformDetection. IsHybridGlobalizationOnApplePlatform ` in https://github.com/dotnet/runtime/blob/main/src/libraries/Common/tests/Tests/System/StringTests.cs (and others) and investigate if possible to have same behaviour as ICU compare.\n\n- [ ]  Check Turkish \u0027I\u0027 comparison and check \"\\u0131\" casing.\n    - For ICU, we have similar logic implemented at https://github.com/dotnet/runtime/blob/01aa3d96bb2160144f167b1065e081521d133b48/src/native/libs/System.Globalization.Native/pal_casing.c#L135\n    - and https://github.com/dotnet/runtime/blob/01aa3d96bb2160144f167b1065e081521d133b48/src/native/libs/System.Globalization.Native/pal_casing.c#L91\n\n- [ ] Check DateTime related behavioural changes.\n- [ ] Investigate `IndexOf` behavior differences:\n     - The normalization always makes ß == ss, however that shouldn\u0027t be the case when `IgnoreNonSpace` compare options is not used\n     - Handling of small latin dz (`\\U+01F3`) https://github.com/dotnet/runtime/blob/54f41ac4916077f8c9bf55eb502f04d3388af87a/src/libraries/System.Runtime/tests/System.Globalization.Tests/CompareInfo/CompareInfoTests.IndexOf.cs#L145\n     - `matchLength` returned might be incorrect due to applied normalization https://github.com/dotnet/runtime/issues/112418\n\nIn case not possible document behavioural differencies between `ICU` and `Hybrid`.\n\nTests have been marked as `ActiveIssue` in hybrid mode here https://github.com/dotnet/runtime/pull/95260\n- https://github.com/search?q=repo%3Adotnet%2Fruntime+https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F95338\u0026type=code\n\nContributes to https://github.com/dotnet/runtime/issues/80689",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBehLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tEtq7",
                                           "createdAt":  "2023-11-28T14:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nGo through test cases market as `ActiveIssue` for `PlatformDetection.IsNotHybridGlobalizaionOnOSX` in https://github.com/dotnet/runtime/blob/main/src/libraries/Common/tests/Tests/System/StringTests.cs and investigate if possible to have same behaviour as ICU compare.\r\nIn case not possible document behavioural differencies between `ICU` and `Hybrid`.\r\nTests have been marked as `ActiveIssue` in hybrid mode here https://github.com/dotnet/runtime/pull/95260\r\n\r\nContributes to https://github.com/dotnet/runtime/issues/80689\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emkhamoyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emkhamoyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-28T14:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cF6Eu",
                                           "createdAt":  "2025-01-28T11:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "There is ~ 140 cases of test altered or disabled conditioned by `HybridGlobalizationOnApplePlatform`. We should map all these cases, try implementing the missing functionality and documenting the differences to https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-hybrid-mode.md. fyi: @vitek-karas ",
                                           "updatedAt":  "2025-01-28T11:55:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Investigate behavioural changes between globalization on iOS and other ICU platforms",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98415",
        "createdAt":  "2024-02-13T15:46:45Z",
        "number":  98415,
        "author":  "joostvz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_4kUg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2024-02-14T16:42:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yigolden",
                                            "createdAt":  "2024-02-21T13:14:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vertonghenb",
                                            "createdAt":  "2024-03-25T00:14:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lamereactor",
                                            "createdAt":  "2024-03-25T15:41:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarkusRodler",
                                            "createdAt":  "2024-09-13T05:38:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pdurt",
                                            "createdAt":  "2024-10-10T13:31:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adampaquette",
                                            "createdAt":  "2025-02-05T01:29:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Talwynox",
                                            "createdAt":  "2025-03-10T08:51:41Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-04-02T09:32:36Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027m trying to create a Blazor WebAssembly app where users can switch the display language. This only seems to work after forcing a reload of the page. According to the conversation in dotnet/aspnetcore#50361, switching languages without a page reload is currently not supported in Webassembly. I have a web app where it is not acceptable to reload the page when the user switches the language. A page refresh gives a bad user experience. And our app also contains a form, which data must be preserved when switching to another language.\r\n\r\nI found a workaround by using this package: https://github.com/ScarletKuro/Blazor.WebAssembly.DynamicCulture, which calls an internal WebAssembly API: `INTERNAL.loadSatelliteAssemblies`. Normally, Blazor (WebAssembly) calls this method to load the assemblies for the current active culture. The _Blazor.WebAssembly.DynamicCulture_ package calls this method to load the assemblies of all specified cultures. After loading all specified assemblies, it is possible to change the language without a page reload.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIs it possible to open up the `INTERNAL.loadSatelliteAssemblies` API, so that developers can specify the cultures they want to be loaded? By default it can still load only the current culture, but it would be nice if developers can override this behavior.\r\n\r\n**Edit:** My feature request is about opening up this API in a decent way, so that developers don\u0027t have to call API\u0027s which are marked as internal.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeRaCNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5z5AOs",
                                           "createdAt":  "2024-02-14T17:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to create a Blazor WebAssembly app where users can switch the display language. This only seems to work after forcing a reload of the page. According to the conversation in dotnet/aspnetcore#50361, switching languages without a page reload is currently not supported in Webassembly. I have a web app where it is not acceptable to reload the page when the user switches the language. A page refresh gives a bad user experience. And our app also contains a form, which data must be preserved when switching to another language.\r\n\r\nI found a workaround by using this package: https://github.com/ScarletKuro/Blazor.WebAssembly.DynamicCulture, which calls an internal WebAssembly API: `INTERNAL.loadSatelliteAssemblies`. Normally, Blazor (WebAssembly) calls this method to load the assemblies for the current active culture. The _Blazor.WebAssembly.DynamicCulture_ package calls this method to load the assemblies of all specified cultures. After loading all specified assemblies, it is possible to change the language without a page reload.\n\n### Describe the solution you\u0027d like\n\nIs it possible to open up the `INTERNAL.loadSatelliteAssemblies` API, so that developers can specify the cultures they want to be loaded? By default it can still load only the current culture, but it would be nice if developers can override this behavior.\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoostvz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-14T17:54:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z5AbX",
                                           "createdAt":  "2024-02-14T17:55:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to create a Blazor WebAssembly app where users can switch the display language. This only seems to work after forcing a reload of the page. According to the conversation in dotnet/aspnetcore#50361, switching languages without a page reload is currently not supported in Webassembly. I have a web app where it is not acceptable to reload the page when the user switches the language. A page refresh gives a bad user experience. And our app also contains a form, which data must be preserved when switching to another language.\r\n\r\nI found a workaround by using this package: https://github.com/ScarletKuro/Blazor.WebAssembly.DynamicCulture, which calls an internal WebAssembly API: `INTERNAL.loadSatelliteAssemblies`. Normally, Blazor (WebAssembly) calls this method to load the assemblies for the current active culture. The _Blazor.WebAssembly.DynamicCulture_ package calls this method to load the assemblies of all specified cultures. After loading all specified assemblies, it is possible to change the language without a page reload.\n\n### Describe the solution you\u0027d like\n\nIs it possible to open up the `INTERNAL.loadSatelliteAssemblies` API, so that developers can specify the cultures they want to be loaded? By default it can still load only the current culture, but it would be nice if developers can override this behavior.\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoostvz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Globalization`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-14T17:55:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z-3cU",
                                           "createdAt":  "2024-02-15T11:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dvoituron",
                                           "body":  "I think you could add this C# code to call the equivalent JS code.\r\nYou have an example [here](https://github.com/dotnet/runtime/blob/main/src/mono/wasm/testassets/WasmBasicTestApp/App/SatelliteAssembliesTest.cs).\r\n \r\n```csharp\r\n[JSImport(\"INTERNAL.loadSatelliteAssemblies\")]\r\ninternal static partial Task LoadSatelliteAssemblies(string[] culturesToLoad);\r\n```",
                                           "updatedAt":  "2024-02-15T11:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z-6Ip",
                                           "createdAt":  "2024-02-15T11:09:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW3dmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dvoituron",
                                                                               "createdAt":  "2024-02-15T11:11:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joostvz",
                                           "body":  "@dvoituron Thanks for your response. This is indeed what the _Blazor.WebAssembly.DynamicCulture_ library is also doing, and this approach works.\r\n\r\nMy only concern is that this is using an internal Blazor API, with zero guarantees. Hence my feature request to open up this API in a decent way.",
                                           "updatedAt":  "2024-02-15T11:09:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50FztJ",
                                           "createdAt":  "2024-02-16T02:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "There isn\u0027t anything in the runtime that restricts which satellite assemblies can be loaded and if they are added to the correct items I believe the build will correctly pick them up but blazor has some custom logic here so @maraf can you take a look and give appropriate guidance.",
                                           "updatedAt":  "2024-02-16T02:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50JNxM",
                                           "createdAt":  "2024-02-16T15:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Making a public C# API is on our radar, but so far you are the first one asking for it.\r\n\r\nIn the meantime there are several workarounds\r\na) Use JSImport as mentioned above (the drawback is that the API might change between major .NET versions)\r\nb) Load all satellite assemblies `Blazor.start({ configureRuntime: runtime =\u003e runtime.withConfig({ loadAllSatelliteResources: true }) })` (wich also uses internal switch)\r\nc) If you know which assemblies contain resources, you fetch them from C#\r\n```c#\r\nvar http = new HttpClient();\r\nvar dllBytes = await http.GetByteArrayAsync(\"/_framework/en-US/WasmBasicTestApp.resources.wasm\");\r\nAssemblyLoadContext.Default.LoadFromStream(new MemoryStream(dllBytes));\r\n```\r\n\r\nI\u0027m curious what is your motivation for switching between cultures without reload? In a typical scenario users do this once and then use the prefered culture.",
                                           "updatedAt":  "2024-02-16T15:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Jue7",
                                           "createdAt":  "2024-02-16T15:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joostvz",
                                           "body":  "Thanks for the provided workarounds @maraf. I will give them a try.\r\n\r\nMy scenario is the following: I\u0027m developing a web app for a kiosk in a store. Users can select their preferred language on the screen. A page reload would probably cause a blinking page. Also, users should be able to switch the language at any moment in the process, even when they\u0027re filling in data in a form. A page reload would require all form data to be temporarily stored somewhere.\r\n\r\nSo for my scenario a page reload is possible, but has negative impact on the user experience, and adds technical challenges.",
                                           "updatedAt":  "2024-02-16T15:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50Kf8z",
                                           "createdAt":  "2024-02-16T17:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXFj5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joostvz",
                                                                               "createdAt":  "2024-02-16T18:42:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e My scenario is the following\r\n\r\nThank you for sharing! It makes perfect sense for your scenario",
                                           "updatedAt":  "2024-02-16T17:08:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54_FQe",
                                           "createdAt":  "2024-04-01T13:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexspirou",
                                           "body":  "\u003e Making a public C# API is on our radar, but so far you are the first one asking for it.\r\n\u003e \r\n\u003e In the meantime there are several workarounds a) Use JSImport as mentioned above (the drawback is that the API might change between major .NET versions) b) Load all satellite assemblies `Blazor.start({ configureRuntime: runtime =\u003e runtime.withConfig({ loadAllSatelliteResources: true }) })` (wich also uses internal switch) c) If you know which assemblies contain resources, you fetch them from C#\r\n\u003e \r\n\u003e ```cs\r\n\u003e var http = new HttpClient();\r\n\u003e var dllBytes = await http.GetByteArrayAsync(\"/_framework/en-US/WasmBasicTestApp.resources.wasm\");\r\n\u003e AssemblyLoadContext.Default.LoadFromStream(new MemoryStream(dllBytes));\r\n\u003e ```\r\n\u003e \r\n\u003e I\u0027m curious what is your motivation for switching between cultures without reload? In a typical scenario users do this once and then use the prefered culture.\r\n\r\nHello @maraf, could you please provide guidance on where to write Blazor.start({ configureRuntime: runtime =\u003e runtime.withConfig({ loadAllSatelliteResources: true }) }) in a Blazor application?",
                                           "updatedAt":  "2024-04-01T13:58:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55EeYY",
                                           "createdAt":  "2024-04-02T06:58:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joostvz",
                                           "body":  "@alexspirou I\u0027m currently using this approach, and did the following:\r\n1. In your App.razor file, add `autostart=\"false\"` to the include statement for the blazor.web.js file:\r\n  `\u003cscript src=\"_framework/blazor.web.js\" autostart=\"false\"\u003e\u003c/script\u003e`\r\n1. Create a new javascript file where you customize the `start` method, and link this file in your App.razor:\r\n   ```\r\n   Blazor.start({\r\n     webAssembly: {\r\n         configureRuntime: dotnet =\u003e {\r\n             dotnet.withConfig({ loadAllSatelliteResources: true });\r\n         }\r\n     }\r\n   });\r\n   ```",
                                           "updatedAt":  "2024-04-02T06:58:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55FoI2",
                                           "createdAt":  "2024-04-02T09:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexspirou",
                                           "body":  "Thanks for the response @joostvz.\r\n\r\nvar dllBytes = await http.GetByteArrayAsync(\"/_framework/en-US/WasmBasicTestApp.resources.wasm\");\r\n\r\n My resources are in a class library under the folder named Resources. How did you get the Assemblies?",
                                           "updatedAt":  "2024-04-02T09:32:35Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  ".NET 8 Blazor - Support localization change without page reload",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98694",
        "createdAt":  "2024-02-20T12:34:21Z",
        "number":  98694,
        "author":  "goodoldlameme",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-20T18:25:49Z",
        "body":  "### Description\n\nWhen one calls `DateTimeFormatInfo.InvariantInfo` new instance of `DateTimeFormatInfo` with default parameters is created. The new instance itself and its calendar are made readonly. The default parameters for new instance are: `CultureInfo.InvariantCulture._cultureData` and `GregorianCalendar.GetDefaultInstance()`. `GregorianCalendar.GetDefaultInstance()` holding single static instance of `GregorianCalendar` for each call. Hence default Gregorian calendar is becoming readonly after calling `DateTimeFormatInfo.InvariantInfo` and all the new `DateTimeFormatInfo` instances created with default parameters would contain readonly calendar instance, although this is not awaited.\n\n### Reproduction Steps\n\n```   C#\r\nvar dateTimeFormatInfo = new DateTimeFormatInfo();\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\nvar _ = DateTimeFormatInfo.InvariantInfo;\r\nAssert.True(dateTimeFormatInfo.Calendar.IsReadOnly);\r\n```\n\n### Expected behavior\n\nUsage of `DateTimeFormatInfo.InvariantInfo` should not affect state of calendar in other class instances.\n\n### Actual behavior\n\nUsage of `DateTimeFormatInfo.InvariantInfo` makes default Gregorian calendar in other class instances readonly.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```   C#\r\nvar dateTimeFormatInfo = new DateTimeFormatInfo{\r\n        Calendar = new GregorianCalendar()\r\n};\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\nvar _ = DateTimeFormatInfo.InvariantInfo;\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\n```\n\n### Configuration\n\ndotnet runtime: 6.0.26\r\ntarget framework: net6.0\r\nOS: macOS Sonoma 14.3.1 (23D60)\r\narchitecture: ARM64\r\nnot specific to the configuration\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdIQmrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50eY2q",
                                           "createdAt":  "2024-02-20T12:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen one calls `DateTimeFormatInfo.InvariantInfo` new instance of `DateTimeFormatInfo` with default parameters is created. The new instance itself and its calendar are made readonly. The default parameters for new instance are: `CultureInfo.InvariantCulture._cultureData` and `GregorianCalendar.GetDefaultInstance()`. `GregorianCalendar.GetDefaultInstance()` holding single static instance of `GregorianCalendar` for each call. Hence default Gregorian calendar is becoming readonly after calling `DateTimeFormatInfo.InvariantInfo` and all the new `DateTimeFormatInfo` instances created with default parameters would contain readonly calendar instance, although this is not awaited.\n\n### Reproduction Steps\n\n```   C#\r\nvar dateTimeFormatInfo = new DateTimeFormatInfo();\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\nvar _ = DateTimeFormatInfo.InvariantInfo;\r\nAssert.True(dateTimeFormatInfo.Calendar.IsReadOnly);\r\n```\n\n### Expected behavior\n\nUsage of `DateTimeFormatInfo.InvariantInfo` should not affect state of calendar in other class instances.\n\n### Actual behavior\n\nUsage of `DateTimeFormatInfo.InvariantInfo` makes default Gregorian calendar in other class instances readonly.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```   C#\r\nvar dateTimeFormatInfo = new DateTimeFormatInfo{\r\n        Calendar = new GregorianCalendar()\r\n};\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\nvar _ = DateTimeFormatInfo.InvariantInfo;\r\nAssert.False(dateTimeFormatInfo.Calendar.IsReadOnly);\r\n```\n\n### Configuration\n\ndotnet runtime: 6.0.26\r\ntarget framework: net6.0\r\nOS: macOS Sonoma 14.3.1 (23D60)\r\narchitecture: ARM64\r\nnot specific to the configuration\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egoodoldlameme\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-20T12:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50gxzv",
                                           "createdAt":  "2024-02-20T17:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@goodoldlameme thanks for the report. Is this blocking you by any mean? I am wondering about your scenario discovered this issue. The easiest workaround is to do the following which should work as expected.\r\n\r\n```C#\r\n            var dateTimeFormatInfo = (DateTimeFormatInfo) (new DateTimeFormatInfo().Clone());\r\n```",
                                           "updatedAt":  "2024-02-20T17:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50hCau",
                                           "createdAt":  "2024-02-20T18:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXijCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-02-20T19:06:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "goodoldlameme",
                                           "body":  "@tarekgh the scenario was: parsing \"yyMM\" date format with setting calendar property of TwoDigitYearMax for each such parsing. The workaround I suggested in report is fine for us, but yours would be helpful too.",
                                           "updatedAt":  "2024-02-20T18:25:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Calling DateTimeFormatInfo.InvariantInfo makes default Gregorian calendar readonly",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99231",
        "createdAt":  "2024-03-04T14:00:58Z",
        "number":  99231,
        "author":  "frankbuckley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T17:14:12Z",
        "body":  "### Description\n\n*.dat files can be blocked by default firewall configurations:\r\n\r\n- https://github.com/dotnet/runtime/issues/89073\r\n- https://github.com/coreruleset/coreruleset/blob/0bd51ff806c68e2a54c4d60ca13f731c5355696d/crs-setup.conf.example#L446\r\n\r\nThis causes Blazor WASM apps to fail to load:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/5655810/e2188080-3f1a-484b-89ac-5143afd67d3b)\r\n\n\n### Reproduction Steps\n\nDeploy WASM Blazor app behind an Ingress-NGINX Controller for Kubernetes with `enable-modsecurity: \"true\"` and `enable-owasp-modsecurity-crs: \"true\"`.\n\n### Expected behavior\n\nWASM app is downloaded and runs in browser without errors.\n\n### Actual behavior\n\nICU data file is blocked by firewall and WASM app fails to load.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nConfigure firewall rules to allow *.dat files\r\nOR\r\n[Customise WASM app build to rename ICU data files to use extension that is not blocked by default](https://github.com/maraf/dotnet-wasm-rename-icu)\n\n### Configuration\n\nConfirmed using Edge and Google Chrome.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOescw6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc511edM",
                                           "createdAt":  "2024-03-04T16:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n*.dat files can be blocked by default firewall configurations:\r\n\r\n- https://github.com/dotnet/runtime/issues/89073\r\n- https://github.com/coreruleset/coreruleset/blob/0bd51ff806c68e2a54c4d60ca13f731c5355696d/crs-setup.conf.example#L446\r\n\r\nThis causes Blazor WASM apps to fail to load:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/5655810/e2188080-3f1a-484b-89ac-5143afd67d3b)\r\n\n\n### Reproduction Steps\n\nDeploy WASM Blazor app behind an Ingress-NGINX Controller for Kubernetes with `enable-modsecurity: \"true\"` and `enable-owasp-modsecurity-crs: \"true\"`.\n\n### Expected behavior\n\nWASM app is downloaded and runs in browser without errors.\n\n### Actual behavior\n\nICU data file is blocked by firewall and WASM app fails to load.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nConfigure firewall rules to allow *.dat files\r\nOR\r\n[Customise WASM app build to rename ICU data files to use extension that is not blocked by default](https://github.com/maraf/dotnet-wasm-rename-icu)\n\n### Configuration\n\nConfirmed using Edge and Google Chrome.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efrankbuckley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-04T16:17:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56vViE",
                                           "createdAt":  "2024-04-16T14:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Existing solution is to bundle ICU data into the main `dotnet.native.wasm`, but that makes only sense if you know which shard or if you include full ICU data.\r\n\r\nNormally we only download the ICU shard which matches the locale of the browser. It\u0027s much smaller/faster.\r\nThere are multiple, and we don\u0027t know which we will use until we actually start.\r\n\r\nSo I think the proper solution is to wrap all ICU shards into .wasm container. \r\nIn the same way as we do for DLLs and WebCil, which is triggered by `WasmEnableWebcil`\r\n\r\nMaybe current [webcil is defined](https://github.com/dotnet/runtime/blob/main/docs/design/mono/webcil.md) as IL wrapper. But I think we could extend it to be more generic container.\r\n\r\n@lambdageek thoughts ?",
                                           "updatedAt":  "2024-04-16T14:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56vY3n",
                                           "createdAt":  "2024-04-16T14:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "An existing workaround that can be used only in case of loading full ICU (`icudt.dat`) could be the one described in https://github.com/dotnet/runtime/issues/100638. It is not ideal, though. For apps that use shards (dynamically load the best-matching file - in the described case `icudt_EFIGS.dat`), it will have a negative effect of increasing the app size.",
                                           "updatedAt":  "2024-04-16T14:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56vdr1",
                                           "createdAt":  "2024-04-16T14:41:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e Maybe current [webcil is defined](https://github.com/dotnet/runtime/blob/main/docs/design/mono/webcil.md) as IL wrapper. But I think we could extend it to be more generic container.\r\n\r\nIt was part of the original proposal, but out of scope for .NET 8",
                                           "updatedAt":  "2024-04-16T14:41:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56vv_T",
                                           "createdAt":  "2024-04-16T15:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "Is the issue just the extension?",
                                           "updatedAt":  "2024-04-16T15:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56v08Y",
                                           "createdAt":  "2024-04-16T15:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "I have a sample for the former bundler https://github.com/maraf/dotnet-wasm-rename-icu. Maybe providing a similar guidance for new SDK/blazor would be enough\n\nEDIT: Oh, already mentioned on the report",
                                           "updatedAt":  "2024-04-16T15:37:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56v9X8",
                                           "createdAt":  "2024-04-16T15:39:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "@frankbuckley Does the trick with changing the extension work in your scenario?",
                                           "updatedAt":  "2024-04-16T15:39:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56wQnh",
                                           "createdAt":  "2024-04-16T16:19:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "frankbuckley",
                                           "body":  "\u003e @frankbuckley Does the trick with changing the extension work in your scenario?\r\n\r\nI saw it but did not try it - sorry.\r\n\r\nWe decided we could alter our firewall rules to allow `.dat` file downloads without too much risk and that this would be the simpler option.\r\n\r\nHowever, the CRS is used, I believe, by (at least) Cloudflare and Azure WAFs, though I don\u0027t know if they change the allowed file extensions by default.\r\n\r\nMight be worth avoiding the potential pitfall.",
                                           "updatedAt":  "2024-04-16T16:19:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56xzDr",
                                           "createdAt":  "2024-04-16T20:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e Maybe current [webcil is defined](https://github.com/dotnet/runtime/blob/main/docs/design/mono/webcil.md) as IL wrapper. But I think we could extend it to be more generic container.\r\n\r\nyea, possibly. the outer container (ie the wasm module) doesn\u0027t care too much about what\u0027s inside (except there\u0027s an alignment hack specifically for IL).  We could change it to host other content.  Also @kg was interested in loading webcil \"honestly\" (ie: using `WebAssembly.instantiateStreaming` instead of `fetch`/`blob()`) so even for IL we wouldn\u0027t need the alignment hack anymore.",
                                           "updatedAt":  "2024-04-16T20:30:52Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Consider using file extension for WASM ICU data files that is less likely to be blocked by firewalls (not .dat)",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100959",
        "createdAt":  "2024-04-12T12:48:07Z",
        "number":  100959,
        "author":  "wertzui",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-20T23:59:08Z",
        "body":  "### Background and motivation\r\n\r\nAt the moment, when parsing currencies, one can specify `NumberStyles.AllowCurrencySymbol` to allow leading or trailing currency symbols.\r\nHowever this does only honor the symbol (`$`, `€`) and not the ISO code(`USD`, `EUR`).\r\n\r\nThe `ISOCurrencySymbol` is already available in the `RegionInfo` class, but not in the `NumberFormat` class.\r\nThis proposal is to add `ISOCurrencySymbol` to `NumberFormatInfo` and use it when parsing numbers (`Number.TryparseNumer(...)`).\r\n\r\nAn example of the current behavior can be seen below\r\n```csharp\r\nvoid Main()\r\n{\r\n    Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;\r\n\t\r\n    Console.WriteLine(\"en-US\");\r\n    Console.WriteLine();\r\n    TryParse(\"1,234.56 $\", \"en-US\");\r\n    // Parsed \"1,234.56 $\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"$\".\r\n\r\n    TryParse(\"1,234.56 USD\", \"en-US\");\r\n    // Failed to parse \"1,234.56 USD\" using culture \"en-US\" and currency symbol \"$\".\r\n    // Parsed \"1,234.56 USD\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"USD\".\r\n\r\n    TryParse(\"1,234.56$\", \"en-US\");\r\n    // Parsed \"1,234.56$\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"$\".\r\n\r\n    TryParse(\"1,234.56USD\", \"en-US\");\r\n    // Failed to parse \"1,234.56USD\" using culture \"en-US\" and currency symbol \"$\".\r\n    // Parsed \"1,234.56USD\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"USD\".\r\n\r\n    TryParse(\"$ 1,234.56\", \"en-US\");\r\n    // Parsed \"$ 1,234.56\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"$\".\r\n\r\n    TryParse(\"USD 1,234.56\", \"en-US\");\r\n    // Failed to parse \"USD 1,234.56\" using culture \"en-US\" and currency symbol \"$\".\r\n    // Parsed \"USD 1,234.56\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"USD\".\r\n\r\n    TryParse(\"$1,234.56\", \"en-US\");\r\n    // Parsed \"$1,234.56\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"$\".\r\n\r\n    TryParse(\"USD1,234.56\", \"en-US\");\r\n    // Failed to parse \"USD1,234.56\" using culture \"en-US\" and currency symbol \"$\".\r\n    // Parsed \"USD1,234.56\" =\u003e 1234.56 using culture \"en-US\" and currency symbol \"USD\".\r\n\r\n    Console.WriteLine(\"en-EU\");\r\n    Console.WriteLine();\r\n    TryParse(\"1,234.56 €\", \"en-EU\");\r\n    // Parsed \"1,234.56 €\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"€\".\r\n\r\n    TryParse(\"1,234.56 EUR\", \"en-EU\");\r\n    // Failed to parse \"1,234.56 EUR\" using culture \"en-EU\" and currency symbol \"€\".\r\n    // Parsed \"1,234.56 EUR\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"EUR\".\r\n\r\n    TryParse(\"1,234.56€\", \"en-EU\");\r\n    // Parsed \"1,234.56€\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"€\".\r\n\r\n    TryParse(\"1,234.56EUR\", \"en-EU\");\r\n    // Failed to parse \"1,234.56EUR\" using culture \"en-EU\" and currency symbol \"€\".\r\n    // Parsed \"1,234.56EUR\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"EUR\".\r\n\r\n    TryParse(\"€ 1,234.56\", \"en-EU\");\r\n    // Parsed \"€ 1,234.56\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"€\".\r\n\r\n    TryParse(\"EUR 1,234.56\", \"en-EU\");\r\n    // Failed to parse \"EUR 1,234.56\" using culture \"en-EU\" and currency symbol \"€\".\r\n    // Parsed \"EUR 1,234.56\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"EUR\".\r\n\r\n    TryParse(\"€1,234.56\", \"en-EU\");\r\n    // Parsed \"€1,234.56\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"€\".\r\n\r\n    TryParse(\"EUR1,234.56\", \"en-EU\");\r\n    // Failed to parse \"EUR1,234.56\" using culture \"en-EU\" and currency symbol \"€\".\r\n    // Parsed \"EUR1,234.56\" =\u003e 1234.56 using culture \"en-EU\" and currency symbol \"EUR\".\r\n}\r\n\r\nprivate static void TryParse(string value, string culture, string? symbol = null)\r\n{\r\n    // First try parsing using the currency Symbol\r\n    CultureInfo cultureInfo = (CultureInfo)CultureInfo.GetCultureInfo(culture).Clone();\r\n    if (symbol is not null)\r\n\tcultureInfo.NumberFormat.CurrencySymbol = symbol;\r\n\r\n    if (double.TryParse(value, NumberStyles.Any, cultureInfo, out var result))\r\n    {\r\n        Console.WriteLine($\"\"\"Parsed \"{value}\" =\u003e {result} using culture \"{culture}\" and currency symbol \"{cultureInfo.NumberFormat.CurrencySymbol}\".\"\"\");\r\n    }\r\n    else\r\n    {\r\n        Console.WriteLine($\"\"\"Failed to parse \"{value}\" using culture \"{culture}\" and currency symbol \"{cultureInfo.NumberFormat.CurrencySymbol}\".\"\"\");\r\n        var isoCurrencySymbol = new RegionInfo(culture).ISOCurrencySymbol;\r\n        TryParse(value, culture, isoCurrencySymbol);\r\n    }\r\n\t\r\n    if (symbol is null)\r\n        Console.WriteLine();\r\n}\r\n```\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace System.Globalization;\r\n\r\npublic sealed class NumberFormatInfo : IFormatProvider, ICloneable\r\n{\r\n+    public string ISOCurrencySymbol { get; set; }\r\n\r\n    ...\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nThe usage would mostly be internal in `Number.TryParseNumber`, but the general user would benefit that the following code would work instead of throwing an exception:\r\n\r\n```csharp\r\nvar parsed = double.Parse(\"1,234.56 USD\", NumberStyles.Any, CultureInfo.GetCulture(\"en-US\"));\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAn alternate approach would be that the `Parse` methods internally create the `RegionInfo` from `CultureInfo.Name` when `NumberStyles.AllowCurrencySymbol` is set and try to parse the value again using the `ISOCurrencySymbol` whenever parsing fails.\r\n\r\n### Risks\r\n\r\nAt the moment, parsing a string string which uses the `ISOCurrencySymbol` instead of the `CurrencySymbol` will fail to be parsed.\r\nAfter this change, the string would parse successfully.\r\nCode relying on this failure would stop working.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOekpwAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56SnAB",
                                           "createdAt":  "2024-04-12T12:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-12T12:48:26Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Add ISOCurrencySymbol to NumberFormat and use it when parsing numbers",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101165",
        "createdAt":  "2024-04-17T07:17:27Z",
        "number":  101165,
        "author":  "Andrey-Anatolyevich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-20T23:55:15Z",
        "body":  "### Description\r\n\r\nWhen the method **CultureInfo.GetCultureInfo(string)** called multiple times with different values, the cached **private-use** value is stuck for non-**private-use** original strings.\r\n\r\n### Reproduction Steps\r\n\r\nCode to reproduce:\r\n![CultureInfo Bug](https://github.com/dotnet/runtime/assets/9977125/a0f19b46-2311-4619-99f3-fc16f08fdbfb)\r\n\r\nCode as text:\r\n\r\n---\r\n```csharp\r\nusing System.Globalization;\r\n\r\nnamespace CultureInfoBug;\r\n\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Framework: \"\r\n            + System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription\r\n            + Environment.NewLine);\r\n\r\n        var cults = new[] {\r\n            \"en-NL\",\r\n            \"en-NL-X-blahblah\",\r\n            \"en-NL\",\r\n        };\r\n        foreach (var culture in cults)\r\n        {\r\n            var culture1 = CultureInfo.GetCultureInfo(culture);\r\n            LogCulture(culture, culture1);\r\n        }\r\n\r\n        Console.WriteLine(\"\\nOver\");\r\n        Console.ReadKey();\r\n    }\r\n\r\n    static void LogCulture(string originalString, CultureInfo culture)\r\n    {\r\n        Console.WriteLine(originalString.PadRight(18) + $\"Name: {culture.Name}\".PadRight(18) + $\"EnglishName: {culture.EnglishName}\");\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n\"en-NL\" always returns:    \"Name: en-NL       EnglishName: English (Netherlands)\"\r\n\r\n### Actual behavior\r\n\r\nAfter \"en-NL-X-forbnl\" the \"en-NL\" returns \"Name: en-NL       EnglishName: English (Netherlands)\"\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nEnvironment: Windows \r\n![image](https://github.com/dotnet/runtime/assets/9977125/8fa2ae66-5fd0-41cd-9885-ddea0c118089)\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOetF6FA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc560XoU",
                                           "createdAt":  "2024-04-17T07:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T07:17:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "CultureInfo.GetCultureInfo(string) -\u003e cache pollution bug",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101422",
        "createdAt":  "2024-04-23T11:53:05Z",
        "number":  101422,
        "author":  "danstur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-28T02:16:51Z",
        "body":  "### Description\n\nWith the switch to the ICU library string comparisons do not work as expected. The behavior also differs from what ICU should generally return. \r\n\r\nIn a case insensitive comparison `SS` and `ß`  do not compare equal. According to the current Unicode case folding rules they should be equal as I understand it:\r\n`00DF; F; 0073 0073; # LATIN SMALL LETTER SHARP S` ([CaseFolding.txt](https://www.unicode.org/Public/12.1.0/ucd/CaseFolding.txt)) \r\n\r\nAlso checking with the [ICU Unicode String Comparison](https://icu4c-demos.unicode.org/icu-bin/scompare) it says that the result should be equal.\r\n\r\nIt seems to me that somehow the specific ICU library used with .NET 6/8 has a bug or that it is used incorrectly.\r\n\r\nSee also https://stackoverflow.com/questions/78371156/%c3%9f-ss-for-case-insensitive-comparison-with-icu and https://stackoverflow.com/questions/78364649/why-does-%c3%9f-equalsss-stringcomparison-currentcultureignorecase-differ-betw\n\n### Reproduction Steps\n\n\"ß\".Equals(\"SS\", StringComparison.CurrentCultureIgnoreCase);  // returns false when using ICU library\r\n// The same is true for Contains and IndexOf\n\n### Expected behavior\n\nThe above code should return true.\n\n### Actual behavior\n\nThe above code returns false when the ICU library is used. Setting\r\n```\r\n\u003cItemGroup\u003e\r\n  \u003cRuntimeHostConfigurationOption Include=\"System.Globalization.UseNls\" Value=\"true\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n```\r\nthe code returns true as expected\n\n### Regression?\n\nA regression when compared to any \u003c .NET 5 under Windows.\n\n### Known Workarounds\n\nSpecify `System.Globalization.UseNls\" Value=\"true\" `. Sadly this only works under Windows and does not help with other platforms. \n\n### Configuration\n\nDotnet SDK: 8.0.104\r\nOS: Windows 11 22H2 (22621.3447)\r\nArchitecture: x64 \r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfA4GbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57gb9E",
                                           "createdAt":  "2024-04-23T11:53:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-23T11:53:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57hvZ4",
                                           "createdAt":  "2024-04-23T14:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Duplicate of https://github.com/dotnet/runtime/issues/20599#issuecomment-374791597",
                                           "updatedAt":  "2024-04-23T14:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jMO8",
                                           "createdAt":  "2024-04-23T16:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Yes, this is a duplicate. @danstur you may try https://github.com/dotnet/runtime/issues/20599#issuecomment-374791597 to get the desired behavior. Feel free to send any more question if you still have any. Thanks for your report. ",
                                           "updatedAt":  "2024-04-23T16:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jakr",
                                           "createdAt":  "2024-04-23T16:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danstur",
                                           "body":  "@tarekgh Can you explain the need for `IgnoreNonSpace` which says \"Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics\" and that rather more awkward API?\r\n\r\nAccording to the ICU library `ß` should be case insensitive equal to `ss` independent of language, so it\u0027s not that I need some collation for this to work.\r\nAnd neither `ß` nor `ss` contain any \"nonspacing combining characters\" but are all single codepoints and `ß` doesn\u0027t have any decompositions listed. Looking at the \"based on s\" list (https://www.compart.com/en/unicode/U+0073) there\u0027s also no ß in that list.\r\n\r\nLooking at the stackoverflow post, the commenters are all just as confused by the current behavior as I am. \r\n\r\nIf this is the expected behavior, it\u0027d be great if you could point to some more exhaustive documentation that explains exactly how the normal String APIs behave. I honestly couldn\u0027t say what the expected behavior of `Equals(..., StringComparison.CurrentCultureIgnoreCase)` is in .NET 8.",
                                           "updatedAt":  "2024-04-23T16:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jant",
                                           "createdAt":  "2024-04-23T16:32:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Another-Ralf",
                                           "body":  "What about documenting that behavior? Like here https://learn.microsoft.com/en-us/dotnet/csharp/how-to/compare-strings#linguistic-comparisons.\r\n\r\nThe docu in its examples is talking explicitly about the \"ß\" vs. \"SS\" case implies looking at comparison overloads using StringComparison but that seems a dead end, at least to me, to get the expected standard behavior. None of the StringComparison option translates to or includes the needed CompareOptions.IgnoreNonSpace right?",
                                           "updatedAt":  "2024-04-23T16:34:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jkks",
                                           "createdAt":  "2024-04-23T16:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfQycQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danstur",
                                                                               "createdAt":  "2024-04-23T16:58:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "To give some more info why you are seeing this behavior, ICU collation work using what it is called collation strength. Strength can be Primary, Secondary, Tertiary, or Quaternary. We are trying to map as much as we can the .NET comparison options to one of these strength. which work fine except in such special cases. Unfortunately, ICU make `ß` equals only to `ss` if having the ICU strength is primary. We cannot switch to that strength by default in .NET because is going to break many other things. Even I saw before users complaining on ICU because of this case. The work around in .NET is to use other comparison option `IgnoreNonSpace`  which will cause ICU to use the primary strength. You can play with that in the [Collation Demo](https://icu4c-demos.unicode.org/icu-bin/collation.html)\r\n\r\nI reactivated this issue to track [collation customization](https://unicode-org.github.io/icu/userguide/collation/customization/) for this special case of `ss` and `ß` .",
                                           "updatedAt":  "2024-04-23T16:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jsxy",
                                           "createdAt":  "2024-04-23T17:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danstur",
                                           "body":  "@tarekgh Thanks for the explanation, Unicode once again being even more complicated than anticipated. \r\n\r\nIs there any documentation what collation strength the values  comparison options use and how I can figure out at what collation strength two characters compare equal? \r\nOr do I just throw them into the collation demo and check that way what happens? I guess for my use cases that\u0027s fine too.\r\n\r\nAh Unicode causing headaches as usual.",
                                           "updatedAt":  "2024-04-23T17:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57j9OR",
                                           "createdAt":  "2024-04-23T17:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We don\u0027t document the mapping between the .NET options and ICU collation strength as this more implementation details. But you can see the mapping here https://github.com/dotnet/runtime/blob/40bc2d88b6606324f5774cc972d480a1d26084f8/src/native/libs/System.Globalization.Native/pal_collation.c#L276 if you are interested. \r\n\r\nNote, the default strength is always [`Tertiary`](https://unicode-org.github.io/icu/userguide/collation/architecture.html#attribute-types). ",
                                           "updatedAt":  "2024-04-23T17:46:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DX4k",
                                           "createdAt":  "2024-04-28T00:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andjc",
                                           "body":  "As far as I can tell, its working as expected. You are using a collation comparison, not a comparison of case folded strings. The [Unicode Collation Algorithm](http://www.unicode.org/reports/tr10/#Special_Cases), follows the relevant DIN standard for sorting ß.\r\n\r\n\u003e The UCA maintains compatibility with the DIN standard for sorting German by having the German sharp-s (U+00DF (ß) LATIN SMALL LETTER SHARP S) sort as a secondary difference with \"SS\", instead of having ß and SS match at the secondary level.\r\n\r\nIf you are comparing strings using full case folding, they will match. If you are comparing using simple casefolding, they will not match. If you compare using a collator set to Primary strength they will match. If you use a different strength for the collator, they will not match.\r\n\r\nYes, under full casefolding, they should be treated the same, but they are intended to sort differently.",
                                           "updatedAt":  "2024-04-28T00:13:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DbGU",
                                           "createdAt":  "2024-04-28T01:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@andjc Indeed, we recognize that this behavior aligns with what Unicode collation defines. However, the issue arises from the fact that .NET Framework previously utilized Windows collation (NLS), where `ss` equated to `ß`. With the transition to ICU in .NET Core, some users have voiced concerns about this new behavior. The question at hand is whether we should adhere to the Unicode collation behavior or make a special case for this particular scenario.",
                                           "updatedAt":  "2024-04-28T01:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DfCf",
                                           "createdAt":  "2024-04-28T01:53:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andjc",
                                           "body":  "I assume there are other differences as well.\n\nAs a rule I use multiple operating systems and multiple programming languages.\n\nSystem based locale data and locale operations differ across implementations. I use ICU when I want consistent results across different platforms and different programming languages.\n\nICU by default uses the CLDR collation Algorithm, what is referred to as the root collation, and tailors that as required per locale, with some locales having multiple collation tailorings.\n\nChanging the ICU collation to match NLS  breaks that benefit of ICU. It also raises the question of whether German collation should be system depended, ie using NLS rules on windows and using platform specific rules on other platforms, ie divergence of results based on platform.\n\nWhat comes to mind is that ICU supports multiple tailorings, including for German, ie standard vs phonebook style collation. This can be enabled by using a variant locale, either using POSIX or BCP47 identifiers. Given that alternative collation rules are already available, a logical approach would be to add another locale variant to kick in NLS compatible collation.\n\nThat way you can retain icu\u0027s collation and add a tailored collation that changes the collation weight of ß to match previous implementations.\n\nAlthough considering above it was noted that the collation strength is set to tertiary, how do you handle Japanese, I was under the impression that the excel and other apps used a sort that would be equivalent to a QUATERNARY strength.",
                                           "updatedAt":  "2024-04-28T01:53:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DgZs",
                                           "createdAt":  "2024-04-28T02:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e What comes to mind is that ICU supports multiple tailorings, including for German, ie standard vs phonebook style collation. This can be enabled by using a variant locale, either using POSIX or BCP47 identifiers. Given that alternative collation rules are already available, a logical approach would be to add another locale variant to kick in NLS compatible collation.\r\n\r\nRegrettably, the behavior of equating \u0027ss\u0027 to \u0027ß\u0027 functioned uniformly across all locales in NLS, which is what users requesting this behavior. As previously noted in this issue, there exists a workaround for users who wish to utilize it, namely employing the \u0027IgnoreNonSpace\u0027 comparison option.\r\n\r\nIn principle, we endeavor to adhere closely to CLDR/Unicode behavior, which is why no action has been taken on this issue thus far. However, users persist in expressing discontent regarding it. Mostly users used .NET Framework for awhile. ",
                                           "updatedAt":  "2024-04-28T02:16:50Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Incorrect String Comparison Results with ICU",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101887",
        "createdAt":  "2024-05-05T18:45:03Z",
        "number":  101887,
        "author":  "Dubzer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T23:25:54Z",
        "body":  "### Background and motivation\r\n\r\nThe current IDNA implementation doesn\u0027t comply with UTS 46 (Unicode IDNA Compatibility Processing). The IdnMapping class is missing some of the parameters [described in the specification](https://www.unicode.org/reports/tr46/#Processing), such as:\r\n- CheckHyphens\r\n- CheckBidi\r\n- CheckJoiners\r\n- VerifyDnsLength\r\n- IgnoreInvalidPunycode\r\n\r\nThese parameters are required for implementing the [WHATWG\u0027s URL](https://url.spec.whatwg.org/#idna) standard (see #29839)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Globalization;\r\n\r\npublic sealed partial class IdnMapping\r\n{\r\n    // New properties\r\n\r\n    public bool CheckHyphens { get; set; }\r\n\r\n    public bool CheckBidi { get; set; }\r\n\r\n    public bool CheckJoiners { get; set; }\r\n\r\n    public bool VerifyDnsLength { get; set; }\r\n\r\n    public bool IgnoreInvalidPunycode { get; set; }\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar idn = new IdnMapping\r\n{\r\n    CheckHyphens = false,\r\n    CheckBidi = true,\r\n    CheckJoiners = true,\r\n    VerifyDnsLength = false,\r\n    IgnoreInvalidPunycode  = true\r\n};\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfPJh8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc583cz0",
                                           "createdAt":  "2024-05-05T18:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dubzer",
                                           "body":  "@MihaZupan you may be interested since you\u0027ve filed a proposal on IdnMapping before 👀 ",
                                           "updatedAt":  "2024-05-05T18:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc588mHz",
                                           "createdAt":  "2024-05-06T15:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-06T15:07:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add missing parameters to IdnMapping to comply with UTS46",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102269",
        "createdAt":  "2024-05-15T16:48:28Z",
        "number":  102269,
        "author":  "DmitryMak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3-wmA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-05-15T17:03:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2024-05-15T21:36:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-05-17T15:53:05Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-05-17T15:30:19Z",
        "body":  "### Background and motivation\r\n\r\nNFKC normalization is very often performed along with casefolding. \r\n\r\n[http://www.unicode.org/reports/tr36/](http://www.unicode.org/reports/tr36/)\r\n\r\n\u003e The Unicode property [NFKC_Casefold] can be used to get a combined casefolding, normalization, and removal of default-ignorable code points. It is the basis for the mapping of international domain names in UTS 46: Unicode IDNA Compatibility Processing [UTS46].\r\n\r\nThe NFKC_Casefold algorithm is already [implemented](https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classNormalizer2.html) in [ICU](https://unicode-org.github.io/icu/userguide/transforms/normalization/) as another form of Unicode normalization:\r\n\r\n```\r\nNormalizer2 API:\r\n\r\ngetNFCInstance\r\nfor Unicode NFC normalization.\r\n\r\ngetNFDInstance\r\nfor Unicode NFD normalization.\r\n \r\ngetNFKCInstance\r\nfor Unicode NFKC normalization.\r\n \r\ngetNFKDInstance\r\nfor Unicode NFKD normalization.\r\n \r\ngetNFKCCasefoldInstance\r\nfor Unicode toNFKC_Casefold() normalization which is equivalent to applying the NFKC_Casefold mappings and then NFC.\r\n \r\ngetNFKCSimpleCasefoldInstance\r\nfor a variant of Unicode toNFKC_Casefold() normalization which is equivalent to applying the NFKC_Simple_Casefold mappings and then NFC.\r\n```\r\n\r\nI think introducing NFKC_Casefold method will be complementary to the currently [planned](https://github.com/dotnet/runtime/issues/20674) casefolding support in .NET.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic enum NormalizationForm\r\n{\r\n    FormC = 1,\r\n    \r\n    FormD = 2,\r\n    \r\n    FormKC = 5,\r\n    \r\n    FormKD = 6,\r\n\r\n    FormKC_CF = ?, \u003c-- NFKC_Casefold mappings and then NFC\r\n\r\n    FormKC_SCF = ? \u003c-- NFKC_Simple_Casefold mappings and then NFC\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nString.Equals(\r\n    \"weiß\".Normalize(NormalizationForm.FormKC_CF),\r\n    \"WEISS\".Normalize(NormalizationForm.FormKC_CF),\r\n    StringComparison.Ordinal);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfjvfFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc598h49",
                                           "createdAt":  "2024-05-15T16:48:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-15T16:48:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc598kfZ",
                                           "createdAt":  "2024-05-15T16:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "This is currently possible via [icu-dotnet](https://github.com/sillsdev/icu-dotnet/blob/5979f1c52814878336399b394146b73f32d1c075/source/icu.net/Normalization/Normalizer2.cs#L105), but requires another fairly heavy dependency.",
                                           "updatedAt":  "2024-05-15T16:55:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-IL3n",
                                           "createdAt":  "2024-05-16T19:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "Another implementation is in [ICU4N](https://github.com/NightOwl888/ICU4N/blob/c67c76153bfdf6a7bf5ad23b0855006b739c92ba/src/ICU4N/Text/Normalizer2.cs#L182)",
                                           "updatedAt":  "2024-05-16T19:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-IMzo",
                                           "createdAt":  "2024-05-16T19:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "@tarekgh do you have any recommendation for a .NET 8 project that needs an NFKC_Casefold implementation? Are there any other options aside from icu-dotnet and ICU4N (which is still in alpha)?",
                                           "updatedAt":  "2024-05-16T19:59:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-JqeT",
                                           "createdAt":  "2024-05-17T01:24:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiNijA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DmitryMak",
                                                                               "createdAt":  "2024-05-17T15:30:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The only way to do it without using [ICU4N](https://github.com/NightOwl888/ICU4N/blob/c67c76153bfdf6a7bf5ad23b0855006b739c92ba/src/ICU4N/Text/Normalizer2.cs#L182) or [icu-dotnet](https://github.com/sillsdev/icu-dotnet/blob/5979f1c52814878336399b394146b73f32d1c075/source/icu.net/Normalization/Normalizer2.cs#L105) is to manually call the ICU library. The challenge is to get the correct ICU library name loaded in the process. One way to work around this challenge is to use [app local ICU](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#app-local-icu) which carry the ICU with your app, and you\u0027ll know the exact library name at that time. Or if you are running on Windows and not using app locale ICU, Windows has the ICU library named `icu.dll`. Here is example of manually calling ICU if you know the ICU library name:\r\n\r\n```C#\r\n    public unsafe class Program\r\n    {\r\n        private enum UErrorCode\r\n        {\r\n            U_USING_FALLBACK_WARNING  = -128,   /**\u003c A resource bundle lookup returned a fallback result (not an error) */\r\n            U_ERROR_WARNING_START     = -128,   /**\u003c Start of information results (semantically successful) */\r\n            U_USING_DEFAULT_WARNING   = -127,   /**\u003c A resource bundle lookup returned a result from the root locale (not an error) */\r\n            U_SAFECLONE_ALLOCATED_WARNING = -126, /**\u003c A SafeClone operation required allocating memory (informational only) */\r\n            U_STATE_OLD_WARNING       = -125,   /**\u003c ICU has to use compatibility layer to construct the service. Expect performance/memory usage degradation. Consider upgrading */\r\n            U_STRING_NOT_TERMINATED_WARNING = -124,/**\u003c An output string could not be NUL-terminated because output length==destCapacity. */\r\n            U_SORT_KEY_TOO_SHORT_WARNING = -123, /**\u003c Number of levels requested in getBound is higher than the number of levels in the sort key */\r\n            U_AMBIGUOUS_ALIAS_WARNING = -122,   /**\u003c This converter alias can go to different converter implementations */\r\n            U_DIFFERENT_UCA_VERSION = -121,     /**\u003c ucol_open encountered a mismatch between UCA version and collator image version, so the collator was constructed from rules. No impact to further function */\r\n            U_PLUGIN_CHANGED_LEVEL_WARNING = -120, /**\u003c A plugin caused a level change. May not be an error, but later plugins may not load. */\r\n\r\n            U_ZERO_ERROR              =  0,     /**\u003c No error, no warning. */\r\n            U_ILLEGAL_ARGUMENT_ERROR  =  1,     /**\u003c Start of codes indicating failure */\r\n            U_MISSING_RESOURCE_ERROR  =  2,     /**\u003c The requested resource cannot be found */\r\n            U_INVALID_FORMAT_ERROR    =  3,     /**\u003c Data format is not what is expected */\r\n            U_FILE_ACCESS_ERROR       =  4,     /**\u003c The requested file cannot be found */\r\n            U_INTERNAL_PROGRAM_ERROR  =  5,     /**\u003c Indicates a bug in the library code */\r\n            U_MESSAGE_PARSE_ERROR     =  6,     /**\u003c Unable to parse a message (message format) */\r\n            U_MEMORY_ALLOCATION_ERROR =  7,     /**\u003c Memory allocation error */\r\n            U_INDEX_OUTOFBOUNDS_ERROR =  8,     /**\u003c Trying to access the index that is out of bounds */\r\n            U_PARSE_ERROR             =  9,     /**\u003c Equivalent to Java ParseException */\r\n            U_INVALID_CHAR_FOUND      = 10,     /**\u003c Character conversion: Unmappable input sequence. In other APIs: Invalid character. */\r\n            U_TRUNCATED_CHAR_FOUND    = 11,     /**\u003c Character conversion: Incomplete input sequence. */\r\n            U_ILLEGAL_CHAR_FOUND      = 12,     /**\u003c Character conversion: Illegal input sequence/combination of input units. */\r\n            U_INVALID_TABLE_FORMAT    = 13,     /**\u003c Conversion table file found, but corrupted */\r\n            U_INVALID_TABLE_FILE      = 14,     /**\u003c Conversion table file not found */\r\n            U_BUFFER_OVERFLOW_ERROR   = 15,     /**\u003c A result would not fit in the supplied buffer */\r\n            U_UNSUPPORTED_ERROR       = 16,     /**\u003c Requested operation not supported in current context */\r\n            U_RESOURCE_TYPE_MISMATCH  = 17,     /**\u003c an operation is requested over a resource that does not support it */\r\n            U_ILLEGAL_ESCAPE_SEQUENCE = 18,     /**\u003c ISO-2022 illegal escape sequence */\r\n            U_UNSUPPORTED_ESCAPE_SEQUENCE = 19, /**\u003c ISO-2022 unsupported escape sequence */\r\n            U_NO_SPACE_AVAILABLE      = 20,     /**\u003c No space available for in-buffer expansion for Arabic shaping */\r\n            U_CE_NOT_FOUND_ERROR      = 21,     /**\u003c Currently used only while setting variable top, but can be used generally */\r\n            U_PRIMARY_TOO_LONG_ERROR  = 22,     /**\u003c User tried to set variable top to a primary that is longer than two bytes */\r\n            U_STATE_TOO_OLD_ERROR     = 23,     /**\u003c ICU cannot construct a service from this state, as it is no longer supported */\r\n            U_TOO_MANY_ALIASES_ERROR  = 24,     /**\u003c There are too many aliases in the path to the requested resource.\r\n                                                    It is very possible that a circular alias definition has occurred */\r\n            U_ENUM_OUT_OF_SYNC_ERROR  = 25,     /**\u003c UEnumeration out of sync with underlying collection */\r\n            U_INVARIANT_CONVERSION_ERROR = 26,  /**\u003c Unable to convert a UChar* string to char* with the invariant converter. */\r\n            U_INVALID_STATE_ERROR     = 27,     /**\u003c Requested operation can not be completed with ICU in its current state */\r\n            U_COLLATOR_VERSION_MISMATCH = 28,   /**\u003c Collator version is not compatible with the base version */\r\n            U_USELESS_COLLATOR_ERROR  = 29,     /**\u003c Collator is options only and no base is specified */\r\n            U_NO_WRITE_PERMISSION     = 30,     /**\u003c Attempt to modify read-only or constant data. */\r\n        }\r\n\r\n        private delegate void* Unorm2_getNFKCCasefoldInstanceDelegate(UErrorCode *pErrorCode);\r\n        private delegate int Unorm2_normalizeDelegate(/*const UNormalizer2*/ void* norm2, char* src, int length, char* dest, int capacity, UErrorCode *pErrorCode);\r\n\r\n        public static void Main(string[] args)\r\n        {\r\n            if (NativeLibrary.TryLoad(\"icu\", out IntPtr icuHandle))\r\n            {\r\n                Console.WriteLine($\"ICU is Loaded\");\r\n\r\n                if (NativeLibrary.TryGetExport(icuHandle, \"unorm2_getNFKCCasefoldInstance\", out IntPtr unorm2_getNFKCCasefoldInstancePtr))\r\n                {\r\n                    Console.WriteLine($\"unorm2_getNFKCCasefoldInstance is Loaded\");\r\n\r\n                    Unorm2_getNFKCCasefoldInstanceDelegate unorm2_getNFKCCasefoldInstanceDelegate = Marshal.GetDelegateForFunctionPointer\u003cUnorm2_getNFKCCasefoldInstanceDelegate\u003e(unorm2_getNFKCCasefoldInstancePtr);\r\n                    UErrorCode errorCode = UErrorCode.U_ZERO_ERROR;\r\n                    void* uNormalizer2 = unorm2_getNFKCCasefoldInstanceDelegate(\u0026errorCode);\r\n                    Console.WriteLine($\"errorCode: {errorCode} ... uNormalizer2: {(long)uNormalizer2}\");\r\n\r\n                    if (NativeLibrary.TryGetExport(icuHandle, \"unorm2_normalize\", out IntPtr unorm2_normalizePtr))\r\n                    {\r\n                        Console.WriteLine($\"unorm2_normalize is Loaded\");\r\n\r\n                        Unorm2_normalizeDelegate unorm2_normalize = Marshal.GetDelegateForFunctionPointer\u003cUnorm2_normalizeDelegate\u003e(unorm2_normalizePtr);\r\n\r\n                        char* buffer = stackalloc char[100];\r\n\r\n                        fixed (char* src = \"Hello World\")\r\n                        {\r\n                            int normalizedLen = unorm2_normalize(uNormalizer2, src, \"Hello World\".Length, buffer, 100, \u0026errorCode);\r\n                            Console.WriteLine($\"normalizedLen: {normalizedLen} ... errorCode: {errorCode} ... Normalized: {new string(buffer, 0, normalizedLen)}\");\r\n                            Console.WriteLine($\"\");\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        Console.WriteLine($\"unorm2_normalize is NOT Loaded\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"unorm2_getNFKCCasefoldInstance is NOT Loaded\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nNote, this code is just a sample to know how you can do it. You can use it at your own risk as I didn\u0027t test it or tried it on different platforms. ",
                                           "updatedAt":  "2024-05-17T01:24:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-O98X",
                                           "createdAt":  "2024-05-17T15:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "Thank you @tarekgh ",
                                           "updatedAt":  "2024-05-17T15:30:18Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Introduce new string NormalizationForm for NFKC_Casefold",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102579",
        "createdAt":  "2024-05-22T19:59:04Z",
        "number":  102579,
        "author":  "daverayment",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-23T16:21:04Z",
        "body":  "### Description\n\nWhen comparing strings, `CompareOptions.StringSort` should apply low sort weights to hyphens and other non-alphanumeric characters. This works in .NET Framework projects. In .NET 5 and later, however, the weightings are not applied and the results of sorting with `CompareOptions.StringSort` are the same as when `CompareOptions.None` is chosen.\r\n\r\nNote: I am using the default ICU Unicode processing for .NET 5+ testing.\n\n### Reproduction Steps\n\nThis code is adapted from the `CompareOptions Enum` documentation page [here](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.compareoptions?view=net-8.0). The word list has been copied verbatim.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Globalization;\r\n\r\npublic class SamplesCompareOptions\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar wordList = new List\u003cstring\u003e { \"cant\", \"bill\u0027s\", \"coop\", \"cannot\", \"billet\", \"can\u0027t\", \"con\", \"bills\", \"co-op\" };\r\n\r\n\t\twordList.Sort((x, y) =\u003e string.Compare(x, y, CultureInfo.CurrentCulture, CompareOptions.None));\r\n\t\tConsole.WriteLine(\"\\nAfter default sort (CompareOptions.None):\");\r\n\t\tforeach (string word in wordList)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(word);\r\n\t\t}\r\n\r\n\t\twordList.Sort((x, y) =\u003e string.Compare(x, y, CultureInfo.CurrentCulture, CompareOptions.StringSort));\r\n\t\tConsole.WriteLine(\"\\nAfter sorting with CompareOptions.StringSort:\");\r\n\t\tforeach (string word in wordList)\r\n\t\t{\r\n\t\t\tConsole.WriteLine(word);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nDotNetFiddle for the code [here](https://dotnetfiddle.net/fzTKQ3).\n\n### Expected behavior\n\nThe `CompareOptions.StringSort` should apply a correct weighted ordering to the unordered collection of strings. The results are correct in .NET Framework 4.7.2 and Roslyn 4.8:\r\n\r\n```\r\nAfter default sort (CompareOptions.None):\r\nbillet\r\nbills\r\nbill\u0027s\r\ncannot\r\ncant\r\ncan\u0027t\r\ncon\r\ncoop\r\nco-op\r\n\r\nAfter sorting with CompareOptions.StringSort:\r\nbill\u0027s\r\nbillet\r\nbills\r\ncan\u0027t\r\ncannot\r\ncant\r\nco-op\r\ncon\r\ncoop\r\n```\n\n### Actual behavior\n\nIn .NET 5 and later, `CompareOptions.StringSort` is incorrect, producing the same results as `CompareOptions.None`:\r\n\r\n```\r\nAfter default sort (CompareOptions.None):\r\nbill\u0027s\r\nbillet\r\nbills\r\ncan\u0027t\r\ncannot\r\ncant\r\nco-op\r\ncon\r\ncoop\r\n\r\nAfter sorting with CompareOptions.StringSort:\r\nbill\u0027s\r\nbillet\r\nbills\r\ncan\u0027t\r\ncannot\r\ncant\r\nco-op\r\ncon\r\ncoop\r\n```\n\n### Regression?\n\nAccording to testing on dotnetfiddle.net, the correct results were produced in .NET Framework 4.7.2 and Roslyn 4.8. .NET 5 and later produce the incorrect sort order.\n\n### Known Workarounds\n\nA potential workaround may be to switch from ICU to NLS, but I have not tested this.\n\n### Configuration\n\nMy system:\r\n\r\n- .NET 8\r\n- Windows 11 latest\r\n- x64\r\n\r\nI don\u0027t think the issue is specific to my OS or architecture, as the same problem can be seen [via dotnetfiddle](https://dotnetfiddle.net/fzTKQ3).\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOftARVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-ssYs",
                                           "createdAt":  "2024-05-22T19:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-22T19:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-tcP6",
                                           "createdAt":  "2024-05-22T21:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "In .NET 5.0 and later, we switched to using the ICU library. For more information, please refer to [this article](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu).\r\n\r\nYou may notice some behavioral differences between the legacy NLS (used in .NET Framework) and ICU. In ICU, the `StringSort` behavior is enabled by default, rendering the `StringSort` option ineffective. This default setting is why you consistently see the following order:\r\n\r\n```\r\nbill\u0027s\r\nbillet\r\nbills\r\ncan\u0027t\r\ncannot\r\ncant\r\nco-op\r\ncon\r\ncoop\r\n```\r\n\r\nThis behavior is explained in the comment in the code [here](https://github.com/dotnet/runtime/blob/a17b872de7639a8b3182390b9ac54cb913b62bd1/src/native/libs/System.Globalization.Native/pal_collation.c#L32). We do not plan to change this behavior in the future as we adhere to ICU behavior, which aligns with the Unicode Standard.\r\n\r\nWe may add some information about this specific case in the documentation in the [article](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu).",
                                           "updatedAt":  "2024-05-22T21:58:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-ttHd",
                                           "createdAt":  "2024-05-22T22:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODi1nsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-22T23:53:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "daverayment",
                                           "body":  "@tarekgh Thank you for the quick response.\r\n\r\nSorry, I do see now that the `StringSort` option is being applied _by default_ in .NET 5+ rather than not being applied at all.\r\n\r\nThis still means the `CompareOptions` [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.compareoptions?view=net-8.0) is incorrect for .NET 5 and later. The example code says to expect different outputs for `None` and `StringSort` options.\r\n\r\nI will raise a separate documentation issue for that page and refer back here. I also thank you for suggesting an update to the ICU article to mention the `CompareOptions` change - that would be very useful, as I read that article myself while trying to troubleshoot.\r\n\r\nThanks again!",
                                           "updatedAt":  "2024-05-22T22:53:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-0BFX",
                                           "createdAt":  "2024-05-23T16:21:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODi-u0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-23T18:37:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-23T19:35:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "daverayment",
                                           "body":  "I\u0027ve raised a new documentation issue for the `CompareOptions` enum page: https://github.com/dotnet/docs/issues/41052",
                                           "updatedAt":  "2024-05-23T16:21:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "String comparisons with the CompareOptions.StringSort value produce incorrect results under .NET 5 and later",
        "labels":  [
                       "documentation",
                       "area-System.Globalization",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102910",
        "createdAt":  "2024-05-31T09:16:01Z",
        "number":  102910,
        "author":  "lilinus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4SduQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2024-05-31T09:21:26Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-09-25T08:46:34Z",
        "body":  "### Background and motivation\r\n\r\nThere is a number of methods in `Calendar` class that could have overloads support `DateOnly`, in addition to `DateTime`. This would be nice for code where only discrete dates are dealt with.\r\n\r\nInstead of having workarounds converting to and from `DateTime` it would be nice with properly implemented methods. All of the suggested methods could have default implementations to convert to and from `DateTime` so it is a non-breaking change.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Globalization;\r\n\r\npublic abstract class Calendar\r\n{\r\n    // Existing methods\r\n\r\n    // public DateTime AddDays(DateTime time, int days);\r\n    // public DateTime AddMonths(DateTime time, int months);\r\n    // public DateTime AddWeeks(DateTime time, int weeks);\r\n    // public DateTime AddYears(DateTime time, int years);\r\n    // public int GetDayOfMonth(DateTime time);\r\n    // public DayOfWeek GetDayOfWeek(DateTime time);\r\n    // public int GetDayOfYear(DateTime time);\r\n    // public int GetEra(DateTime time);\r\n    // public int GetMonth(DateTime time);\r\n    // public int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek);\r\n    // public int GetYear(DateTime time);\r\n    // public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);\r\n    // public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\r\n\r\n    // New methods\r\n\r\n    public virtual DateOnly AddDays(DateOnly date, int days); // Would this be different from DateOnly.AddDays in any calendar? Can we skip it?\r\n    public virtual DateOnly AddMonths(DateOnly date, int months);\r\n    public virtual DateOnly AddWeeks(DateOnly date, int weeks);\r\n    public virtual DateOnly AddYears(DateOnly date, int years);\r\n    public virtual int GetDayOfMonth(DateOnly date);\r\n    public virtual DayOfWeek GetDayOfWeek(DateOnly date);\r\n    public virtual int GetDayOfYear(DateOnly date);;\r\n    public virtual int GetEra(DateOnly date);\r\n    public virtual int GetMonth(DateOnly date);\r\n    public virtual int GetWeekOfYear(DateOnly date, CalendarWeekRule rule, DayOfWeek firstDayOfWeek);\r\n    public virtual int GetYear(DateOnly date);\r\n    public virtual DateOnly ToDateOnly(int year, int month, int day);\r\n    public virtual DateOnly ToDateOnly(int year, int month, int day, int era);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nNone. Maybe increased API surface?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf7YRpA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_pc3A",
                                           "createdAt":  "2024-05-31T09:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-31T09:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_thGk",
                                           "createdAt":  "2024-05-31T16:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-31T16:50:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: DateOnly support for Calendar",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105130",
        "createdAt":  "2024-07-19T07:50:33Z",
        "number":  105130,
        "author":  "mkhamoyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7E5UA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanpovazan",
                                            "createdAt":  "2024-07-19T07:59:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matouskozak",
                                            "createdAt":  "2024-09-17T13:15:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-05T10:46:37Z",
        "body":  "Clean up internal testing related to hybrid globalization: CI testing, performance testing, internal sample applications, builds, etc.\n\n- Modify documentation to not refer to hybrid globalization anymore but Apple native globalization\n- Change exception naming `PlatformNotSupported_HybridGlobalizationWithCompareOptions`\n- ....",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtx9cAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FbgQE",
                                           "createdAt":  "2024-07-19T07:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-19T07:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FbgTZ",
                                           "createdAt":  "2024-07-19T07:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-19T07:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MabcM",
                                           "createdAt":  "2024-09-17T13:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "cc @vitek-karas ",
                                           "updatedAt":  "2024-09-17T13:10:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62531J",
                                           "createdAt":  "2025-07-14T09:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEalDxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-07-15T06:58:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "/cc: @matouskozak ",
                                           "updatedAt":  "2025-07-14T09:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63H1wA",
                                           "createdAt":  "2025-07-15T06:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e /cc: [@matouskozak](https://github.com/matouskozak)\n\nThis is not a blocking issue for .NET 10 but we should take a look and remove this tech debt out to simplify the logic before .NET 11 efforts.",
                                           "updatedAt":  "2025-07-15T06:59:49Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[iOS][HybridGlobalization] Clean-up internal testing related to hybrid globalization",
        "labels":  [
                       "area-System.Globalization",
                       "good first issue",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106560",
        "createdAt":  "2024-08-16T10:35:33Z",
        "number":  106560,
        "author":  "sowacx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6XcZg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matouskozak",
                                            "createdAt":  "2024-08-21T12:18:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-18T13:46:47Z",
        "body":  "### Description\n\nHello,\r\n\r\nThere is long story with Turkish \u0027ı\u0027 and \u0027i\u0027. Many details can be found here: http://www.i18nguy.com/unicode/turkish-i18n.html\r\nLong story short - With Turkish locale ToUpper should transform text in this way:\r\ni -\u003e İ (dotted i)\r\nı -\u003e I (dottless ı)\r\n\r\nFor investigation I am using phrase \u0027Anlıyorum bilgi edinin iİ\u0027. Transformation TpUpper should give result \u0027**ANLIYORUM BİLGİ EDİNİN İİ**\u0027, but MAUI on **Android** platform is \u0027**ANLIYORUM BILGI EDININ Iİ**\u0027\r\n\r\nIt\u0027s working fine with plain .NET8 console app, proof: https://dotnetfiddle.net/fIV4eQ\r\n\r\nI found two issues reported at dotnet / runtime project that are describing that issue. Both were closed with comments that were pointing that root cause is Android ICU and dotnet familly can not do much about it.\r\nhttps://github.com/dotnet/runtime/issues/77689\r\nhttps://github.com/dotnet/runtime/issues/102622\r\n\r\nBut I started to dig a bit deeper. I found out that when I run Kotlin project with Android studio everything is fine. I forked some github project that is setting Locale to specific language. When I set \u0027en\u0027 it is giving me \u0027ANLIYORUM BILGI EDININ Iİ\u0027, but then  setting \u0027tr\u0027 locale produces \u0027ANLIYORUM BİLGİ EDİNİN İİ\u0027. Everything is proper at here. So why it\u0027s not with MAUI Android? Repository for my forked Kotlin project: https://github.com/sowacx/WizardOfLocale-maui-investigation\r\n![image](https://github.com/user-attachments/assets/6dbb06f2-8f5c-4f04-af40-d87544d84623)\r\n\r\nThen I tried to call setLocale the same way as in Kotlin App. That is possible by overriding MainActivity method AttachBaseContext. Code looks like that:\r\n```cs\r\nusing Android.App;\r\nusing Android.Content;\r\nusing Android.Content.PM;\r\nusing Android.Content.Res;\r\nusing Android.OS;\r\n\r\nnamespace TurkishSandbox;\r\n\r\n[Activity(Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, LaunchMode = LaunchMode.SingleTop,\r\n    ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode |\r\n                           ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]\r\npublic class MainActivity : MauiAppCompatActivity\r\n{\r\n    protected override void AttachBaseContext(Context baseContext)\r\n    {\r\n        Java.Util.Locale locale = new Java.Util.Locale(\"tr\");\r\n        Java.Util.Locale.Default = locale;\r\n\r\n        Resources res = baseContext.Resources;\r\n        Configuration config = new Configuration(res.Configuration);\r\n        if ((int)Build.VERSION.SdkInt \u003e= 17)\r\n        {\r\n            config.SetLocale(locale);\r\n            config.SetLayoutDirection(locale);\r\n            baseContext = baseContext.CreateConfigurationContext(config);\r\n        }\r\n        else\r\n        {\r\n            config.Locale = locale;\r\n            res.UpdateConfiguration(config, res.DisplayMetrics);\r\n        }\r\n        \r\n        base.AttachBaseContext(baseContext);\r\n    }\r\n}\r\n```\r\nAdditionally I set up Cultures to \u0027tr-TR\u0027 at MauiApplication c\u0027tor. But that all did not fix problem. \r\n![image](https://github.com/user-attachments/assets/b2ae689c-55af-4d67-9a7e-61b00b24b733)\r\n\r\nMy MAUI project to reproduce: \r\nhttps://github.com/sowacx/maui-turkish-locale-issue\r\n\r\n\n\n### Steps to Reproduce\n\n1. Create MAUI Boilerplate app.\r\n2. Place Label at MainPage.xaml\r\n`\u003cLabel\r\n    Text=\"Anlıyorum bilgi edinin iİ\"\r\n    TextTransform=\"Uppercase\"\r\n    Style=\"{StaticResource Headline}\"\r\n    SemanticProperties.HeadingLevel=\"Level1\" /\u003e`\r\n3. Explicitly set up \u0027tr-TR\u0027 culture or change Android phone language to Turkish\r\n4. Run\r\n5. New label text should be \u0027ANLIYORUM BİLGİ EDİNİN İİ\u0027, but it is \u0027ANLIYORUM BILGI EDININ I\u0027\r\n\r\n\r\n\r\n\n\n### Link to public reproduction project repository\n\nhttps://github.com/sowacx/maui-turkish-locale-issue\n\n### Version with bug\n\n8.0.40 SR5\n\n### Is this a regression from previous behavior?\n\nNo, this is something new\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\nAndroid\n\n### Affected platform versions\n\nAndroid 14\n\n### Did you find any workaround?\n\nUnfortunately no\n\n### Relevant log output\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiVjXgA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IvmFW",
                                           "createdAt":  "2024-08-16T10:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuhO8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "sowacx",
                                                                               "createdAt":  "2024-08-16T11:22:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "github-actions",
                                           "body":  "Hi I\u0027m an AI powered bot that finds similar issues based off the issue title.\n\nPlease view the issues below to see if they solve your problem, and if the issue describes your problem please consider closing this one and thumbs upping the other issue to help us prioritize it. Thank you!\n\n\n### Closed similar issues:\n- [[Android] - Cursor Resets to the Beginning When Typing Letters with TextTransform (#17122)](https://github.com/dotnet/maui/issues/17122),  similarity score: 0.76\n- [.NET MAUI Blazor Hybrid Localization issue (#22551)](https://github.com/dotnet/maui/issues/22551),  similarity score: 0.74\n- [The text enters in reverse when \"TextTransform = TextTransform.Uppercase\"  in Entry and Editor (#11416)](https://github.com/dotnet/maui/issues/11416),  similarity score: 0.73\n- [Localization rendering issue when language is right to left [iOS] (#17934)](https://github.com/dotnet/maui/issues/17934),  similarity score: 0.73\n- [[Bug] Localization with Humanizer (on Android) (#3992)](https://github.com/dotnet/maui/issues/3992),  similarity score: 0.72\n\n\u003e Note: You can give me feedback by thumbs upping or thumbs downing this comment.",
                                           "updatedAt":  "2024-08-16T10:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IvrXA",
                                           "createdAt":  "2024-08-16T20:34:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-16T20:34:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ivrb6",
                                           "createdAt":  "2024-08-16T20:34:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-16T20:34:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IwR9h",
                                           "createdAt":  "2024-08-16T21:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvEz9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-08-21T12:39:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @ilonatommy @matouskozak ",
                                           "updatedAt":  "2024-08-16T21:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JWNeA",
                                           "createdAt":  "2024-08-22T10:18:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "@sowacx thank you for this issue and the comparison with Kotlin. This is something we need to investigate and reconsider if there is a possibility for us to get the necessary culture information from Android ICU.",
                                           "updatedAt":  "2024-08-22T10:18:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Android - With set Turkish locale \"i\".ToUpper() is giving \u0027I\" instead of \u0027İ\u0027",
        "labels":  [
                       "area-System.Globalization",
                       "good first issue",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108272",
        "createdAt":  "2024-09-26T09:51:22Z",
        "number":  108272,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T16:54:16Z",
        "body":  "### Description\n\nWhen `PredefinedCulturesOnly=true` is set, wasm browser should throw when culture that is not available in ICU data is created.\n\n### Reproduction Steps\n\n```\r\nnew CultureInfo(\"xx-yy\");\r\n```\r\n```\r\n\u003cPredefinedCulturesOnly\u003etrue\u003c/PredefinedCulturesOnly\u003e\r\n```\n\n### Expected behavior\n\nShould throw `CultureNotFoundException` with message `\"xx-yy\" is an invalid culture identifier.`\n\n### Actual behavior\n\nNo exception.\n\n### Regression?\n\nYes, after we changed wasmbrowser to use sdk targets in net8.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjaY4KQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NpjWX",
                                           "createdAt":  "2024-09-26T09:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T09:51:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Npjgp",
                                           "createdAt":  "2024-09-26T09:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T09:51:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser] `OnlyPredefinedCultures=true` does not throw an exception when culture is missing",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108651",
        "createdAt":  "2024-10-08T08:31:26Z",
        "number":  108651,
        "author":  "Gaoyifei1011",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-10T05:38:11Z",
        "body":  "### Background and motivation\n\nWhen I strive to retrieve a list of countries using the [CultureInfo.GetCultures()](http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.getcultures.aspx) method and then get all the country information following [this example](http://www.daniweb.com/software-development/csharp/threads/265484). But I quickly realised that a lot of countries were missing from the list and that it does not matched the country list from the Windows control panel location setting. So hopefully .NET will provide a way to quickly access all countries or regions under Windows platform.\n\n### -----------------------------------------\n\n当我尝试使用[CultureInfo.GetCultures()](http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.getcultures.aspx)方法检索国家列表，然后获取[本示例](http://www.daniweb.com/software-development/csharp/threads/265484)后面的所有国家信息时。但我很快意识到，列表中遗漏了很多国家，而且它与Windows控制面板位置设置中的国家列表不匹配。所以希望 .NET 能够提供一个可以快速获取 Windows 平台下所有国家或地区的方法。\n\n-----------------------------------------------------\n\n代码示例：\nCode Samples:\nhttps://github.com/Ucodia/Blog-GeographicalLocation\n\nThis repository calls the Win32 API and retrieves all regions included under the Windows platform\n\n### -----------------------------------------\n\n这个仓库中调用了 Win32 API 并检索到 Windows 平台下包含的所有的地区\n\n-----------------------------------------------------\nResults for Windows Platform（Windows 平台下的结果）\n\n![{37DA5052-BEE6-4768-A921-576EBE6356C2}](https://github.com/user-attachments/assets/a6a2fc8c-a8a1-44c0-a9c9-a615ae78999e)\n\n\n-----------------------------------------------------\n\n### API Proposal\n\n```csharp\nnamespace System.Globalization;\n\npublic class RegionInfo\n{\n    private GEO_ENUMNAMEPROC enumNameProc;\n    private System.Collections.Generic.List\u003cRegionInfo\u003e regionInfoList = new List\u003cRegionInfo\u003e();\n\n    public static System.Globalization.RegionInfo[] GetAllRegions()\n    {\n            regionInfoList.Clear();\n            enumNameProc = new GEO_ENUMNAMEPROC(EnumNameProc);\n            Kernel32Library.EnumSystemGeoNames(SYSGEOCLASS.GEOCLASS_NATION, enumNameProc, IntPtr.Zero);\n            return regionInfoList.ToArray();\n    }\n\n    private static unsafe bool EnumNameProc(IntPtr unmamedParam1, IntPtr unmamedParam2)\n    {\n        string region = Utf16StringMarshaller.ConvertToManaged((ushort*)unmamedParam1);\n\n        if(!string.IsNullOrEmpty(region))\n        {\n              RegionInfo regionInfo = new RegionInfo(region);\n              if(regioninfo is not null)\n              {\n                 regionInfoList.Add(new RegionInfo(region));\n              }\n        }\n        \n        return true;\n    }\n\n    [UnmanagedFunctionPointer(CallingConvention.Winapi)]\n    public unsafe delegate bool GEO_ENUMNAMEPROC(IntPtr unmamedParam1, IntPtr unmamedParam2);\n\n    [LibraryImport(Kernel32, EntryPoint = \"EnumSystemGeoNames\", SetLastError = false), PreserveSig]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static partial bool EnumSystemGeoNames(SYSGEOCLASS geoClass, GEO_ENUMNAMEPROC geoEnumProc, IntPtr data);\n}\n```\n\n-----------------------------------------------------\n\n### API Usage\n\n```csharp\n// Fancy the value\nRegionInfo[] regions = RegionInfo.GetRegions();\nConsole.WriteLine(regions.Length);\n\n// Getting the values out\nforeach (var v in c)\n    Console.WriteLine(regions.Name);\n```\n\n-----------------------------------------------------\n\n### Alternative Designs\n\nNone\n\n### Risks\n\nNone",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjwDxiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PAPGI",
                                           "createdAt":  "2024-10-08T08:31:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-08T08:31:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: RegionInfo.GetAllRegions() like CultureInfo.GetAllCultures()",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108832",
        "createdAt":  "2024-10-14T08:55:22Z",
        "number":  108832,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:26Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=827900\nBuild error leg or test failing: `System.Tests.StringTests.EndsWithNoMatch_StringComparison`, `System.Tests.StringTests.StartsWithNoMatch_StringComparison`\nAffected CI: `maccatalyst_x64_release_allsubsets_mono ( runtime-extra-platforms )` and `iossimulator_x64_release_allsubsets_mono ( runtime-extra-platforms )`\nRange of commits: Sometime before https://github.com/dotnet/runtime/commit/fd4d0a9ae99d88f0dca7b5c95005149c641c2211\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"[FAIL] System.Tests.StringTests.EndsWithNoMatch_StringComparison\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=827900\n**Error message validated:** `[[FAIL] System.Tests.StringTests.EndsWithNoMatch_StringComparison`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 10/14/2024 8:55:53 AM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[973759](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973759)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973759\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25958612\u0026resultId=188813)||\n|[973426](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973426)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973426\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25948636\u0026resultId=109488)|dotnet/runtime#113288|\n|[973408](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973408)|dotnet/runtime|[System.Runtime.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973408\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25948204\u0026resultId=208464)||\n|[971661](https://dev.azure.com/dnceng-public/public/_build/results?buildId=971661)|dotnet/runtime|[System.Runtime.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=971661\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25899292\u0026resultId=188810)||\n|[970517](https://dev.azure.com/dnceng-public/public/_build/results?buildId=970517)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=970517\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25860888\u0026resultId=188747)||\n|[969362](https://dev.azure.com/dnceng-public/public/_build/results?buildId=969362)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=969362\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25832870\u0026resultId=109491)||\n|[967177](https://dev.azure.com/dnceng-public/public/_build/results?buildId=967177)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=967177\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25773948\u0026resultId=209126)||\n|[965870](https://dev.azure.com/dnceng-public/public/_build/results?buildId=965870)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=965870\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25733422\u0026resultId=109488)|dotnet/runtime#112876|\n|[958412](https://dev.azure.com/dnceng-public/public/_build/results?buildId=958412)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=958412\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25506600\u0026resultId=109484)|dotnet/runtime#112767|\n|[956983](https://dev.azure.com/dnceng-public/public/_build/results?buildId=956983)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=956983\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25468694\u0026resultId=109490)|dotnet/runtime#112671|\n|[949175](https://dev.azure.com/dnceng-public/public/_build/results?buildId=949175)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=949175\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25215524\u0026resultId=109487)|dotnet/runtime#112391|\n|[947282](https://dev.azure.com/dnceng-public/public/_build/results?buildId=947282)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=947282\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25157314\u0026resultId=109487)|dotnet/runtime#112345|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|6|11|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm7G_cQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PrUnU",
                                           "createdAt":  "2024-10-14T08:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-14T08:55:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PrUoh",
                                           "createdAt":  "2024-10-14T08:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-maccatalyst\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-14T08:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PrU0l",
                                           "createdAt":  "2024-10-14T08:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-14T08:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PrgzQ",
                                           "createdAt":  "2024-10-14T09:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1-bgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-10-14T11:07:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "I think https://github.com/dotnet/runtime/issues/108747 is a duplicate",
                                           "updatedAt":  "2024-10-14T09:17:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Pvtz_",
                                           "createdAt":  "2024-10-14T15:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2Kq9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-10-15T07:20:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@matouskozak could you please ensure triaging the issue by setting the milestone and remove the untriaged tag? Thanks!",
                                           "updatedAt":  "2024-10-14T15:50:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aldhi",
                                           "createdAt":  "2025-01-15T17:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "This issues is still present but it doesn\u0027t reproduce 100%. I\u0027m reopening the issue, so that we investigate the source of the problem.\n\nfyi: @filipnavara , @kotlarmilos ",
                                           "updatedAt":  "2025-01-15T17:16:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bsb9x",
                                           "createdAt":  "2025-01-24T09:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Seem like we hit this again in: https://dev.azure.com/dnceng-public/public/_build/results?buildId=927797\u0026view=logs\u0026j=7f49df26-8126-5de3-bf2f-6ac6bde01830\u0026t=c62b6a8c-bf71-5057-7f45-9c355fe0b802",
                                           "updatedAt":  "2025-01-24T09:57:55Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Apple-mobile] `System.Tests.StringTests.[Starts,Ends]WithNoMatch_StringComparison` test failure",
        "labels":  [
                       "area-System.Globalization",
                       "disabled-test",
                       "os-ios",
                       "os-maccatalyst",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109924",
        "createdAt":  "2024-11-11T19:30:57Z",
        "number":  109924,
        "author":  "ashrivax23",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-09T06:08:33Z",
        "body":  "### Description\n\n\u003chtml xmlns:o=\"urn:schemas-microsoft-com:office:office\"\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\n\n\u003chead\u003e\n\n\u003cmeta name=ProgId content=Word.Document\u003e\n\u003cmeta name=Generator content=\"Microsoft Word 15\"\u003e\n\u003cmeta name=Originator content=\"Microsoft Word 15\"\u003e\n\u003clink rel=File-List\nhref=\"file:///C:/Users/SHRIVA~1/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\n\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\n \u003co:OfficeDocumentSettings\u003e\n  \u003co:AllowPNG/\u003e\n \u003c/o:OfficeDocumentSettings\u003e\n\u003c/xml\u003e\u003c![endif]--\u003e\n\u003clink rel=themeData\nhref=\"file:///C:/Users/SHRIVA~1/AppData/Local/Temp/msohtmlclip1/01/clip_themedata.thmx\"\u003e\n\u003clink rel=colorSchemeMapping\nhref=\"file:///C:/Users/SHRIVA~1/AppData/Local/Temp/msohtmlclip1/01/clip_colorschememapping.xml\"\u003e\n\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\n \u003cw:WordDocument\u003e\n  \u003cw:View\u003eNormal\u003c/w:View\u003e\n  \u003cw:Zoom\u003e0\u003c/w:Zoom\u003e\n  \u003cw:TrackMoves/\u003e\n  \u003cw:TrackFormatting/\u003e\n  \u003cw:PunctuationKerning/\u003e\n  \u003cw:ValidateAgainstSchemas/\u003e\n  \u003cw:SaveIfXMLInvalid\u003efalse\u003c/w:SaveIfXMLInvalid\u003e\n  \u003cw:IgnoreMixedContent\u003efalse\u003c/w:IgnoreMixedContent\u003e\n  \u003cw:AlwaysShowPlaceholderText\u003efalse\u003c/w:AlwaysShowPlaceholderText\u003e\n  \u003cw:DoNotPromoteQF/\u003e\n  \u003cw:LidThemeOther\u003eEN-US\u003c/w:LidThemeOther\u003e\n  \u003cw:LidThemeAsian\u003eX-NONE\u003c/w:LidThemeAsian\u003e\n  \u003cw:LidThemeComplexScript\u003eX-NONE\u003c/w:LidThemeComplexScript\u003e\n  \u003cw:Compatibility\u003e\n   \u003cw:BreakWrappedTables/\u003e\n   \u003cw:SnapToGridInCell/\u003e\n   \u003cw:WrapTextWithPunct/\u003e\n   \u003cw:UseAsianBreakRules/\u003e\n   \u003cw:DontGrowAutofit/\u003e\n   \u003cw:SplitPgBreakAndParaMark/\u003e\n   \u003cw:EnableOpenTypeKerning/\u003e\n   \u003cw:DontFlipMirrorIndents/\u003e\n   \u003cw:OverrideTableStyleHps/\u003e\n  \u003c/w:Compatibility\u003e\n  \u003cm:mathPr\u003e\n   \u003cm:mathFont m:val=\"Cambria Math\"/\u003e\n   \u003cm:brkBin m:val=\"before\"/\u003e\n   \u003cm:brkBinSub m:val=\"\u0026#45;-\"/\u003e\n   \u003cm:smallFrac m:val=\"off\"/\u003e\n   \u003cm:dispDef/\u003e\n   \u003cm:lMargin m:val=\"0\"/\u003e\n   \u003cm:rMargin m:val=\"0\"/\u003e\n   \u003cm:defJc m:val=\"centerGroup\"/\u003e\n   \u003cm:wrapIndent m:val=\"1440\"/\u003e\n   \u003cm:intLim m:val=\"subSup\"/\u003e\n   \u003cm:naryLim m:val=\"undOvr\"/\u003e\n  \u003c/m:mathPr\u003e\u003c/w:WordDocument\u003e\n\u003c/xml\u003e\u003c![endif]--\u003e\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\n \u003cw:LatentStyles DefLockedState=\"false\" DefUnhideWhenUsed=\"false\"\n  DefSemiHidden=\"false\" DefQFormat=\"false\" DefPriority=\"99\"\n  LatentStyleCount=\"376\"\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"0\" QFormat=\"true\" Name=\"Normal\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 7\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 8\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 9\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 7\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 8\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index 9\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 7\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 8\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"toc 9\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Normal Indent\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"footnote text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"annotation text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"header\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"footer\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"index heading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"35\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"caption\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"table of figures\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"envelope address\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"envelope return\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"footnote reference\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"annotation reference\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"line number\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"page number\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"endnote reference\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"endnote text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"table of authorities\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"macro\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"toa heading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Bullet\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Number\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Bullet 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Bullet 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Bullet 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Bullet 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Number 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Number 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Number 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Number 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"10\" QFormat=\"true\" Name=\"Title\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Closing\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Signature\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"1\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"Default Paragraph Font\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text Indent\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Continue\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Continue 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Continue 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Continue 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"List Continue 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Message Header\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"11\" QFormat=\"true\" Name=\"Subtitle\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Salutation\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Date\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text First Indent\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text First Indent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Note Heading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text Indent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Body Text Indent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Block Text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Hyperlink\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"FollowedHyperlink\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"22\" QFormat=\"true\" Name=\"Strong\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"20\" QFormat=\"true\" Name=\"Emphasis\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Document Map\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Plain Text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"E-mail Signature\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Top of Form\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Bottom of Form\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Normal (Web)\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Acronym\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Address\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Cite\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Code\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Definition\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Keyboard\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Preformatted\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Sample\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Typewriter\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"HTML Variable\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Normal Table\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"annotation subject\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"No List\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Outline List 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Outline List 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Outline List 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Simple 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Simple 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Simple 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Classic 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Classic 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Classic 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Classic 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Colorful 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Colorful 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Colorful 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Columns 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Columns 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Columns 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Columns 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Columns 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 7\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Grid 8\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 7\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table List 8\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table 3D effects 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table 3D effects 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table 3D effects 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Contemporary\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Elegant\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Professional\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Subtle 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Subtle 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Web 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Web 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Web 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Balloon Text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" Name=\"Table Grid\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Table Theme\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" Name=\"Placeholder Text\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"1\" QFormat=\"true\" Name=\"No Spacing\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" Name=\"Revision\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"34\" QFormat=\"true\"\n   Name=\"List Paragraph\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"29\" QFormat=\"true\" Name=\"Quote\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"30\" QFormat=\"true\"\n   Name=\"Intense Quote\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"19\" QFormat=\"true\"\n   Name=\"Subtle Emphasis\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"21\" QFormat=\"true\"\n   Name=\"Intense Emphasis\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"31\" QFormat=\"true\"\n   Name=\"Subtle Reference\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"32\" QFormat=\"true\"\n   Name=\"Intense Reference\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"33\" QFormat=\"true\" Name=\"Book Title\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"37\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" Name=\"Bibliography\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"TOC Heading\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"41\" Name=\"Plain Table 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"42\" Name=\"Plain Table 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"43\" Name=\"Plain Table 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"44\" Name=\"Plain Table 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"45\" Name=\"Plain Table 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"40\" Name=\"Grid Table Light\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\" Name=\"Grid Table 1 Light\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\" Name=\"Grid Table 6 Colorful\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\" Name=\"Grid Table 7 Colorful\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"Grid Table 1 Light Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"Grid Table 6 Colorful Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"Grid Table 7 Colorful Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\" Name=\"List Table 1 Light\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\" Name=\"List Table 6 Colorful\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\" Name=\"List Table 7 Colorful\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 1\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 2\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 3\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 4\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 5\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\n   Name=\"List Table 1 Light Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\n   Name=\"List Table 6 Colorful Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\n   Name=\"List Table 7 Colorful Accent 6\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Mention\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Smart Hyperlink\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Hashtag\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Unresolved Mention\"/\u003e\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\n   Name=\"Smart Link\"/\u003e\n \u003c/w:LatentStyles\u003e\n\u003c/xml\u003e\u003c![endif]--\u003e\n\u003cstyle\u003e\n\u003c!--\n /* Font Definitions */\n @font-face\n\t{font-family:\"Cambria Math\";\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;\n\tmso-font-charset:0;\n\tmso-generic-font-family:roman;\n\tmso-font-pitch:variable;\n\tmso-font-signature:-536869121 1107305727 33554432 0 415 0;}\n@font-face\n\t{font-family:Calibri;\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;\n\tmso-font-charset:0;\n\tmso-generic-font-family:swiss;\n\tmso-font-pitch:variable;\n\tmso-font-signature:-469750017 -1040178053 9 0 511 0;}\n@font-face\n\t{font-family:-apple-system;\n\tmso-font-alt:Calibri;\n\tmso-font-charset:0;\n\tmso-generic-font-family:auto;\n\tmso-font-pitch:auto;\n\tmso-font-signature:0 0 0 0 0 0;}\n /* Style Definitions */\n p.MsoNormal, li.MsoNormal, div.MsoNormal\n\t{mso-style-unhide:no;\n\tmso-style-qformat:yes;\n\tmso-style-parent:\"\";\n\tmargin:0in;\n\tmso-pagination:widow-orphan;\n\tfont-size:11.0pt;\n\tfont-family:\"Calibri\",sans-serif;\n\tmso-ascii-font-family:Calibri;\n\tmso-ascii-theme-font:minor-latin;\n\tmso-fareast-font-family:Calibri;\n\tmso-fareast-theme-font:minor-latin;\n\tmso-hansi-font-family:Calibri;\n\tmso-hansi-theme-font:minor-latin;\n\tmso-bidi-font-family:\"Times New Roman\";\n\tmso-bidi-theme-font:minor-bidi;\n\tmso-font-kerning:1.0pt;\n\tmso-ligatures:standardcontextual;}\nspan.EmailStyle15\n\t{mso-style-type:personal;\n\tmso-style-noshow:yes;\n\tmso-style-unhide:no;\n\tmso-ansi-font-size:11.0pt;\n\tmso-bidi-font-size:11.0pt;\n\tfont-family:\"Calibri\",sans-serif;\n\tmso-ascii-font-family:Calibri;\n\tmso-ascii-theme-font:minor-latin;\n\tmso-fareast-font-family:Calibri;\n\tmso-fareast-theme-font:minor-latin;\n\tmso-hansi-font-family:Calibri;\n\tmso-hansi-theme-font:minor-latin;\n\tmso-bidi-font-family:\"Times New Roman\";\n\tmso-bidi-theme-font:minor-bidi;\n\tcolor:windowtext;}\n.MsoChpDefault\n\t{mso-style-type:export-only;\n\tmso-default-props:yes;\n\tmso-ascii-font-family:Calibri;\n\tmso-ascii-theme-font:minor-latin;\n\tmso-fareast-font-family:Calibri;\n\tmso-fareast-theme-font:minor-latin;\n\tmso-hansi-font-family:Calibri;\n\tmso-hansi-theme-font:minor-latin;\n\tmso-bidi-font-family:\"Times New Roman\";\n\tmso-bidi-theme-font:minor-bidi;}\n@page WordSection1\n\t{size:8.5in 11.0in;\n\tmargin:1.0in 1.0in 1.0in 1.0in;\n\tmso-header-margin:.5in;\n\tmso-footer-margin:.5in;\n\tmso-paper-source:0;}\ndiv.WordSection1\n\t{page:WordSection1;}\n /* List Definitions */\n @list l0\n\t{mso-list-id:714157983;\n\tmso-list-template-ids:1577717452;}\nol\n\t{margin-bottom:0in;}\nul\n\t{margin-bottom:0in;}\n--\u003e\n\u003c/style\u003e\n\u003c!--[if gte mso 10]\u003e\n\u003cstyle\u003e\n /* Style Definitions */\n table.MsoNormalTable\n\t{mso-style-name:\"Table Normal\";\n\tmso-tstyle-rowband-size:0;\n\tmso-tstyle-colband-size:0;\n\tmso-style-noshow:yes;\n\tmso-style-priority:99;\n\tmso-style-parent:\"\";\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\n\tmso-para-margin:0in;\n\tmso-pagination:widow-orphan;\n\tfont-size:11.0pt;\n\tfont-family:\"Calibri\",sans-serif;\n\tmso-ascii-font-family:Calibri;\n\tmso-ascii-theme-font:minor-latin;\n\tmso-hansi-font-family:Calibri;\n\tmso-hansi-theme-font:minor-latin;\n\tmso-bidi-font-family:\"Times New Roman\";\n\tmso-bidi-theme-font:minor-bidi;\n\tmso-font-kerning:1.0pt;\n\tmso-ligatures:standardcontextual;}\n\u003c/style\u003e\n\u003c![endif]--\u003e\n\u003c/head\u003e\n\n\u003cbody lang=EN-US style=\u0027tab-interval:.5in;word-wrap:break-word\u0027\u003e\n\u003c!--StartFragment--\u003e\n\n\u003cp class=MsoNormal style=\u0027mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\nmargin-left:.5in;text-indent:-.25in;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\nstyle=\u0027color:black;mso-color-alt:windowtext\u0027\u003eWe are building a MAUI app with .NET\n9 for iOS and Android and saw an issue in iOS and some Android device e.g. Samsung\nGalaxy Note 20 in which if the calendar is changed in the setting the\nCultureInfo doesn’t have the updated calendar information. Details are below\nalong with a sample application.\u003c/span\u003e\u003co:p\u003e\u003c/o:p\u003e\u003c/p\u003e\n\n\u003col start=1 type=1\u003e\n \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n     auto;mso-list:l0 level1 lfo1;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\n     style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n     \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n     mso-ligatures:none\u0027\u003e\u0026nbsp;To display a date, a DateTime object is\n     constructed, and DateTime.ToString() invoked to format the date.\u0026nbsp;\n     ToString() expects a CultureInfo object which represents the culture\n     settings on the phone, including the user selected calendar.\u0026nbsp; and\n     format the date using the DateTime.ToString() method which takes as input\n     the CultureInfo.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n     auto;mso-list:l0 level1 lfo1;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\n     style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n     \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n     mso-ligatures:none\u0027\u003eExpectation is that the Calendar returned\n     by\u0026nbsp;CultureInfo.DefaultThreadCurrentUICulture represents the actual\n     platform calendar selected by the user (Gregorian, Buddhist,\n     Japanese).\u0026nbsp; This calendar object is presumably used by the ToString()\n     implementation to format a date using the correct calendar. oString()\n     implementation.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n     auto;mso-list:l0 level1 lfo1;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\n     style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n     \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n     mso-ligatures:none\u0027\u003eWhen CultureInfo.DefaultThreadCurrentUICulture\n     properties are inspected, sometimes the associated Calendar object matches\n     the actual calendar selected by the on the phone by the user and sometimes\n     it does not match.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n     auto;mso-list:l0 level1 lfo1;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\n     style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n     \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n     mso-ligatures:none\u0027\u003eWhen the user phone settings are set to Language=\n     Thai, Country=Thailand, Calendar=Buddhist, CultureInfo returns the correct\n     Calendar object representing Buddhist calendar on iOS or Android.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n \u003col start=1 type=1\u003e\n  \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n      auto;mso-list:l0 level2 lfo1;tab-stops:list 1.0in;background:#F4F5F7\u0027\u003e\u003cspan\n      style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n      \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n      mso-ligatures:none\u0027\u003eWhen passed to the ToString() method to get a\n      ShortDatePattern, the ToString method does not format the date as\n      expected. It only correctly formats it when the app is restarted on iOS.\n      This indicates a potential issue with the ToString() implementation.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n  \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n      auto;mso-list:l0 level2 lfo1;tab-stops:list 1.0in;background:#F4F5F7\u0027\u003e\u003cspan\n      style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n      \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n      mso-ligatures:none\u0027\u003eWhen passed to the ToString() method to get a\n      LongDatePattern using ToString(\u0026quot;D\u0026quot;,\n      CultureInfo.DefaultThreadCurrentUICulture), the ToString method does\n      return the correct format.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n \u003c/ol\u003e\n \u003cli class=MsoNormal style=\u0027color:#172B4D;mso-margin-top-alt:auto;mso-margin-bottom-alt:\n     auto;mso-list:l0 level1 lfo1;tab-stops:list .5in;background:#F4F5F7\u0027\u003e\u003cspan\n     style=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\n     \"Times New Roman\";mso-bidi-font-family:Calibri;mso-font-kerning:0pt;\n     mso-ligatures:none\u0027\u003eIn all other language, country, calendar combinations\n     tested, CultureInfo does not even return a correct calendar object and the\n     Calendar represent Gregorian irrespective of what is selected by the user.\n     \u0026nbsp;In this case since Calendar object is incorrect, there is no\n     expectation ToString() would work correctly.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp class=MsoNormal\u003e\u003co:p\u003e\u0026nbsp;\u003c/o:p\u003e\u003c/p\u003e\n\n\u003cp class=MsoNormal style=\u0027background:#F4F5F7\u0027\u003e\u003cspan style=\u0027font-size:10.5pt;\nfont-family:-apple-system;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-family:\nCalibri;color:#172B4D;mso-font-kerning:0pt;mso-ligatures:none\u0027\u003eBelow is the\ntable that shows what date format is shown in the app when we set language,\nregion and calendar (when available) on an iOS and Android devices\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003cp class=MsoNormal style=\u0027background:#F4F5F7\u0027\u003e\u003cspan style=\u0027font-size:10.5pt;\nfont-family:-apple-system;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-family:\nCalibri;color:#172B4D;mso-font-kerning:0pt;mso-ligatures:none\u0027\u003e\u003co:p\u003e\u0026nbsp;\u003c/o:p\u003e\u003c/span\u003e\u003c/p\u003e\n\n\nLanguage | Country | Calendar | Expected | Actual | Platform | Remarks\n-- | -- | -- | -- | -- | -- | --\nEnglish | US | Gregorian | Gregorian | Gregorian | iOS |  \nEnglish | US | Buddhist | Buddhist | Gregorian | iOS | Even   after app restart\nEnglish | US | Japanese | Japanese | Gregorian | iOS | Even   after app restart\nThai | Thailand | Gregorian | Gregorian | Buddhist | iOS | Even   after app restart\nThai | Thailand | Buddhist | Buddhist | Buddhist | iOS |  \nThai | Thailand | Japanese | Japanese | Buddhist | iOS | Even   after app restart\nJapanese | Japan | Gregorian | Gregorian | Gregorian | iOS | Even   after app restart\nJapanese | Japan | Buddhist | Buddhist | Gregorian | iOS | Even   after app restart\nJapanese | Japan | Japanese | Japanese | Gregorian | iOS | Even   after app restart\nEnglish | US | Gregorian | Gregorian | Gregorian | Android |  \nEnglish | US | Hijri | Hijri | Gregorian | Android |  \nEnglish | US | Chinese   Lunar | Chinese   Lunar | Gregorian | Android |  \nThai | Thailand | Chinese   Lunar | Chinese   Lunar | Gregorian | Android |  \nThai | Thailand | Gregorian | Gregorian | Gregorian | Android |  \nThai | Thailand | Hijri | Hijri | Gregorian | Android |  \nJapanese | Japan | Chinese   Lunar | Chinese   Lunar | Gregorian | Android |  \nJapanese | Japan | Gregorian | Gregorian | Gregorian | Android |  \nJapanese | Japan | Hijri | Hijri | Gregorian | Android |  \n  |   |   |   |   |   |  \n\n\n\n\u003cp class=MsoNormal style=\u0027margin-top:7.5pt;background:#F4F5F7\u0027\u003e\u003cspan\nstyle=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\"Times New Roman\";\nmso-bidi-font-family:Calibri;color:#172B4D;mso-font-kerning:0pt;mso-ligatures:\nnone\u0027\u003eFor iOS we can see option to select Gregorian, Japanese or Buddhist\ncalendar from the device settings. \u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003cp class=MsoNormal style=\u0027margin-top:7.5pt;background:#F4F5F7\u0027\u003e\u003cspan\nstyle=\u0027font-size:10.5pt;font-family:-apple-system;mso-fareast-font-family:\"Times New Roman\";\nmso-bidi-font-family:Calibri;color:#172B4D;mso-font-kerning:0pt;mso-ligatures:\nnone\u0027\u003eFor Android on Samsung Note 20 we can see calendars like Chinese Lunar,\nHijri, Korean Lunar, Shamsi etc. Not all Android devices have the ability to\nchange the calendar.\u003co:p\u003e\u003c/o:p\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003cp class=MsoNormal\u003e\u003co:p\u003e\u0026nbsp;\u003c/o:p\u003e\u003c/p\u003e\n\n\u003c!--EndFragment--\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Steps to Reproduce\n\nAttached is a sample application that will show the dates and locale information.\nSteps \n1. Install the application\n2. Check the locale, calendar and date information\n3. Go to device settings -\u003e general -\u003e language and region (On iOS)\n4. Change the language, region and calendar \n5. Relaunch the application and check if the language, date and calendar match as per the device setting.\n\n### Link to public reproduction project repository\n\nhttps://github.com/ashrivax23/DateTimeFormatMauiSample\n\n### Version with bug\n\n9.0.0-rc.2.24503.2\n\n### Is this a regression from previous behavior?\n\nNot sure, did not test other versions\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\niOS, Android\n\n### Affected platform versions\n\n_No response_\n\n### Did you find any workaround?\n\nFor iOS I could write a method using NSCalendar to find which calendar is set on the device setting and based on that set the calendar in the app but that has other issues like characters from other language show with the date e.g. Thai characters shown when language is English and calendar is Buddhist.\nFor Android found no work arounds.\n\n### Relevant log output\n\n```shell\n\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtd5h-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UA2bz",
                                           "createdAt":  "2024-11-11T19:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "similar-issues-ai",
                                           "body":  "We\u0027ve found some similar issues:\n\n\n- dotnet/maui#17951 , similarity score: 86%\n  \n\nIf any of the above are duplicates, please consider closing this issue out and adding additional context in the original issue.\n\n\u003e Note: You can give me feedback by 👍 or 👎 this comment.",
                                           "updatedAt":  "2024-11-11T19:31:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UA2b8",
                                           "createdAt":  "2024-11-11T22:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ashrivax23",
                                           "body":  "\u003e We\u0027ve found some similar issues:\n\u003e \n\u003e * [Restore packages fails with error NU1605 when Microsoft.Maui.Controls.Compatibility version is 8.0.0-rc.2.9373 #17951](https://github.com/dotnet/maui/issues/17951) , similarity score: 86%\n\u003e \n\u003e If any of the above are duplicates, please consider closing this issue out and adding additional context in the original issue.\n\u003e \n\u003e \u003e Note: You can give me feedback by 👍 or 👎 this comment.\n\nNot relevant to the issue that is reported",
                                           "updatedAt":  "2024-11-11T22:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UA2cF",
                                           "createdAt":  "2024-11-12T07:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drasticactions",
                                           "body":  "@ashrivax23 Can you try running this code inside an .NET iOS (`dotnet new ios`) or Android (`dotnet new android`) application that doesn\u0027t implement that MAUI UI Framework?\n\nhttps://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/MainPage.xaml.cs#L60-L106\n\nI can\u0027t speak for Android (@jonathanpeppers would you know where to look for that?), but for iOS you\u0027re most likely facing what this user did:\n\nhttps://github.com/dotnet/maui/issues/15744#issuecomment-1600489748\n\n[https://learn.microsoft.com/en-us/xamarin/ios/app-fundamentals/localization/](https://learn.microsoft.com/en-us/xamarin/ios/app-fundamentals/localization/)\n\n\u003e If CFBundleDevelopmentRegion has not been specified in the Info.plist file, the Xamarin.iOS build tools currently use a default value of en_US. While this may change in a future release, it means that the default language is English.\n\n[https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/Platforms/iOS/Info.plist](https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/Platforms/iOS/Info.plist\n)\nIn short, you also need to declare the supported languages within your iOS/Catalyst app as well to get the supported controls. Relying on `CultureInfo` alone isn\u0027t enough.\n\nThese docs are for Xamarin.iOS, but also apply to MAUI iOS and Catalyst.",
                                           "updatedAt":  "2024-11-12T07:36:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UA2cP",
                                           "createdAt":  "2024-11-12T08:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaosnz-rep",
                                           "body":  "I can repro this issue at iOS \u0026 Android platform on the latest 17.12 Preview 5(9.0.0-rc.1.24453.9 \u0026 9.0.0-rc.2.24503.2).",
                                           "updatedAt":  "2024-11-12T08:47:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UA2cZ",
                                           "createdAt":  "2024-11-15T23:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ashrivax23",
                                           "body":  "\u003e [@ashrivax23](https://github.com/ashrivax23) Can you try running this code inside an .NET iOS (`dotnet new ios`) or Android (`dotnet new android`) application that doesn\u0027t implement that MAUI UI Framework?\n\u003e \n\u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/MainPage.xaml.cs#L60-L106\n\u003e \n\u003e I can\u0027t speak for Android ([@jonathanpeppers](https://github.com/jonathanpeppers) would you know where to look for that?), but for iOS you\u0027re most likely facing what this user did:\n\u003e \n\u003e [#15744 (comment)](https://github.com/dotnet/maui/issues/15744#issuecomment-1600489748)\n\u003e \n\u003e https://learn.microsoft.com/en-us/xamarin/ios/app-fundamentals/localization/\n\u003e \n\u003e \u003e If CFBundleDevelopmentRegion has not been specified in the Info.plist file, the Xamarin.iOS build tools currently use a default value of en_US. While this may change in a future release, it means that the default language is English.\n\u003e \n\u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/Platforms/iOS/Info.plist In short, you also need to declare the supported languages within your iOS/Catalyst app as well to get the supported controls. Relying on `CultureInfo` alone isn\u0027t enough.\n\u003e \n\u003e These docs are for Xamarin.iOS, but also apply to MAUI iOS and Catalyst.\n\n\nI tried the above mentioned approach.\n\nCreated this application: https://github.com/ashrivax23/DateTimeIOSSample\n\nIn the above application I can see the calendar change in the date picker. Please check the attached screenshots of the simulator with the locale, date format and calendar shown in the UI\n\n![Image](https://github.com/user-attachments/assets/ee4a7c12-ba85-41a7-8f2c-92ce0f361475)\n![Image](https://github.com/user-attachments/assets/0b186d99-6a4b-435f-a93d-037655fe6dd1)\n![Image](https://github.com/user-attachments/assets/9b7d601a-e4c2-4e2b-ada4-d749e3773c3d)\n\n",
                                           "updatedAt":  "2024-11-15T23:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ui0FO",
                                           "createdAt":  "2024-11-21T20:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @matouskozak ",
                                           "updatedAt":  "2024-11-21T20:02:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UpIV8",
                                           "createdAt":  "2024-11-22T13:47:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e \u003e [@ashrivax23](https://github.com/ashrivax23) Can you try running this code inside an .NET iOS (`dotnet new ios`) or Android (`dotnet new android`) application that doesn\u0027t implement that MAUI UI Framework?\n\u003e \u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/MainPage.xaml.cs#L60-L106\n\u003e \u003e I can\u0027t speak for Android ([@jonathanpeppers](https://github.com/jonathanpeppers) would you know where to look for that?), but for iOS you\u0027re most likely facing what this user did:\n\u003e \u003e [#15744 (comment)](https://github.com/dotnet/maui/issues/15744#issuecomment-1600489748)\n\u003e \u003e https://learn.microsoft.com/en-us/xamarin/ios/app-fundamentals/localization/\n\u003e \u003e \u003e If CFBundleDevelopmentRegion has not been specified in the Info.plist file, the Xamarin.iOS build tools currently use a default value of en_US. While this may change in a future release, it means that the default language is English.\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/Platforms/iOS/Info.plist In short, you also need to declare the supported languages within your iOS/Catalyst app as well to get the supported controls. Relying on `CultureInfo` alone isn\u0027t enough.\n\u003e \u003e These docs are for Xamarin.iOS, but also apply to MAUI iOS and Catalyst.\n\u003e \n\u003e I tried the above mentioned approach.\n\u003e \n\u003e Created this application: https://github.com/ashrivax23/DateTimeIOSSample\n\u003e \n\u003e In the above application I can see the calendar change in the date picker. Please check the attached screenshots of the simulator with the locale, date format and calendar shown in the UI\n\u003e \n\u003e ![Image](https://github.com/user-attachments/assets/ee4a7c12-ba85-41a7-8f2c-92ce0f361475) ![Image](https://github.com/user-attachments/assets/0b186d99-6a4b-435f-a93d-037655fe6dd1) ![Image](https://github.com/user-attachments/assets/9b7d601a-e4c2-4e2b-ada4-d749e3773c3d)\n\n@ashrivax23 based on the iOS screenshots you shared, it appears that the calendar is displayed as expected. Can you confirm if the issue is resolved?\n\nI took a look at the original app and I believe the issue was that only the locale identifier was retrieved https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/035d787e893b7e493da2f16a63c27be02c425dd4/Platforms/iOS/iOSUtil.cs#L14. When initializing the `CultureInfo` with that identifier, the calendar was set to the default for that locale identifier. Retrieving the device calendar and setting that appropriately should fix the issue.",
                                           "updatedAt":  "2024-11-22T13:47:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ur2EQ",
                                           "createdAt":  "2024-11-22T18:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ashrivax23",
                                           "body":  "\u003e \u003e \u003e [@ashrivax23](https://github.com/ashrivax23) Can you try running this code inside an .NET iOS (`dotnet new ios`) or Android (`dotnet new android`) application that doesn\u0027t implement that MAUI UI Framework?\n\u003e \u003e \u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/MainPage.xaml.cs#L60-L106\n\u003e \u003e \u003e I can\u0027t speak for Android ([@jonathanpeppers](https://github.com/jonathanpeppers) would you know where to look for that?), but for iOS you\u0027re most likely facing what this user did:\n\u003e \u003e \u003e [#15744 (comment)](https://github.com/dotnet/maui/issues/15744#issuecomment-1600489748)\n\u003e \u003e \u003e https://learn.microsoft.com/en-us/xamarin/ios/app-fundamentals/localization/\n\u003e \u003e \u003e \u003e If CFBundleDevelopmentRegion has not been specified in the Info.plist file, the Xamarin.iOS build tools currently use a default value of en_US. While this may change in a future release, it means that the default language is English.\n\u003e \u003e \u003e \n\u003e \u003e \u003e \n\u003e \u003e \u003e https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/main/Platforms/iOS/Info.plist In short, you also need to declare the supported languages within your iOS/Catalyst app as well to get the supported controls. Relying on `CultureInfo` alone isn\u0027t enough.\n\u003e \u003e \u003e These docs are for Xamarin.iOS, but also apply to MAUI iOS and Catalyst.\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e I tried the above mentioned approach.\n\u003e \u003e Created this application: https://github.com/ashrivax23/DateTimeIOSSample\n\u003e \u003e In the above application I can see the calendar change in the date picker. Please check the attached screenshots of the simulator with the locale, date format and calendar shown in the UI\n\u003e \u003e ![Image](https://github.com/user-attachments/assets/ee4a7c12-ba85-41a7-8f2c-92ce0f361475) ![Image](https://private-user-images.githubusercontent.com/188102335/386795096-0b186d99-6a4b-435f-a93d-037655fe6dd1.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzIzMDEzMjgsIm5iZiI6MTczMjMwMTAyOCwicGF0aCI6Ii8xODgxMDIzMzUvMzg2Nzk1MDk2LTBiMTg2ZDk5LTZhNGItNDM1Zi1hOTNkLTAzNzY1NWZlNmRkMS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMTIyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTEyMlQxODQzNDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1jMzUyODkyMmYwNmJiMzdhYzY3ZTg5YzllNzU5NzFhYzA3YmIzMGQ0YTUyMzQwNzgwNTZlNGEzMTlkMTU4OTIwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.xbKZHCxnQEIB5g81h0JSNBWfMQ7TgU3s_mdRnViJAvQ) ![Image](https://private-user-images.githubusercontent.com/188102335/386795097-9b7d601a-e4c2-4e2b-ada4-d749e3773c3d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzIzMDEzMjgsIm5iZiI6MTczMjMwMTAyOCwicGF0aCI6Ii8xODgxMDIzMzUvMzg2Nzk1MDk3LTliN2Q2MDFhLWU0YzItNGUyYi1hZGE0LWQ3NDllMzc3M2MzZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMTIyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTEyMlQxODQzNDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iNDQ2Yjg3YjhhYjE0ZGViNjEwOTJhOWQ1MWY1OWFmOTkyZjU1MmFhNjhmMGRhNGE2Nzg1YWRiYTc0NWRjZTNkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.6oYT5ibD1K4l0JUV1dEWp76_cozqzdfPUNZIIZ0JkgI)\n\u003e \n\u003e [@ashrivax23](https://github.com/ashrivax23) based on the iOS screenshots you shared, it appears that the calendar is displayed as expected. Can you confirm if the issue is resolved?\n\u003e \n\u003e I took a look at the original app and I believe the issue was that only the locale identifier was retrieved https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/035d787e893b7e493da2f16a63c27be02c425dd4/Platforms/iOS/iOSUtil.cs#L14. When initializing the `CultureInfo` with that identifier, the calendar was set to the default for that locale identifier. Retrieving the device calendar and setting that appropriately should fix the issue.\n\nThe issue is not resolved. The screenshot is created by not using MAUI framework. I was asked to confirm if we remove MAUI framework do we still see the issue but if I create a MAUI app then the issue is still reproducible.",
                                           "updatedAt":  "2024-11-22T18:45:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ur4uM",
                                           "createdAt":  "2024-11-22T18:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e The issue is not resolved. The screenshot is created by not using MAUI framework. I was asked to confirm if we remove MAUI framework do we still see the issue but if I create a MAUI app then the issue is still reproducible.\n\nAs I suggested here:\n\n\u003e I took a look at the original app and I believe the issue was that only the locale identifier was retrieved https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/035d787e893b7e493da2f16a63c27be02c425dd4/Platforms/iOS/iOSUtil.cs#L14. When initializing the CultureInfo with that identifier, the calendar was set to the default for that locale identifier. Retrieving the device calendar and setting that appropriately should fix the issue.\n\nHave you tried updating the MAUI app to retrieve the device calendar (similarly as you did in the native iOS app) and set it for the `CultureInfo`?",
                                           "updatedAt":  "2024-11-22T18:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U6ekn",
                                           "createdAt":  "2024-11-25T15:38:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ashrivax23",
                                           "body":  "\u003e \u003e The issue is not resolved. The screenshot is created by not using MAUI framework. I was asked to confirm if we remove MAUI framework do we still see the issue but if I create a MAUI app then the issue is still reproducible.\n\u003e \n\u003e As I suggested here:\n\u003e \n\u003e \u003e I took a look at the original app and I believe the issue was that only the locale identifier was retrieved https://github.com/ashrivax23/DateTimeFormatMauiSample/blob/035d787e893b7e493da2f16a63c27be02c425dd4/Platforms/iOS/iOSUtil.cs#L14. When initializing the CultureInfo with that identifier, the calendar was set to the default for that locale identifier. Retrieving the device calendar and setting that appropriately should fix the issue.\n\u003e \n\u003e Have you tried updating the MAUI app to retrieve the device calendar (similarly as you did in the native iOS app) and set it for the `CultureInfo`?\n\n@matouskozak  can you please clarify what does \"Retrieving the device calendar and setting that appropriately should fix the issue.\" what does this mean in context of MAUI do I need to use NSCalendar and get the Identifier and use that to find out which calendar is used on the device setting ? \n\nI was using the iOSUtil.GetSystemLocale(); to find out which locale is set on the device and the expectation is that once I get the locale and set the culture it should be able to get me the correct calendar set for the culture on that device.\n\nPlease let me know if I misunderstood the above comment.",
                                           "updatedAt":  "2024-11-25T15:38:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U6vU1",
                                           "createdAt":  "2024-11-25T16:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e [@matouskozak](https://github.com/matouskozak) can you please clarify what does \"Retrieving the device calendar and setting that appropriately should fix the issue.\" what does this mean in context of MAUI do I need to use NSCalendar and get the Identifier and use that to find out which calendar is used on the device setting ?\n\u003e \n\u003e I was using the iOSUtil.GetSystemLocale(); to find out which locale is set on the device and the expectation is that once I get the locale and set the culture it should be able to get me the correct calendar set for the culture on that device.\n\u003e \n\u003e Please let me know if I misunderstood the above comment.\n\nFrom what I understood, you took the device locale (from `iOSUtil.GetSystemLocale()`) and set it as current culture. Each locale should have a default calendar associated with it and thus when you set the culture for your app it will use this default calendar (not the device one). You could retrieve the `NSCalendar` to retrieve the device calendar and set it for the Culture Info.\n\nI\u0027m sorry, I\u0027m not a MAUI expert myself, @jonathanpeppers do you know if there is a better way to extract culture and calendar from the device and use it inside the app? This seems like a common thing to do so maybe there is a more appropriate solution.",
                                           "updatedAt":  "2024-11-25T16:04:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc613mH5",
                                           "createdAt":  "2025-07-09T06:08:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Not able to prioritize this for .NET 10, moving to 11. Please comment if this is a blocking issue for your scenario and should be address sooner.",
                                           "updatedAt":  "2025-07-09T06:08:33Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Calendar selected in device settings not available in CultureInfo",
        "labels":  [
                       "area-System.Globalization",
                       "os-android",
                       "os-ios",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109999",
        "createdAt":  "2024-11-20T01:32:31Z",
        "number":  109999,
        "author":  "PranavSenthilnathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPmCfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2025-09-10T12:20:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-08T10:59:56Z",
        "body":  "`CompareOptions.NumericOrdering` should be supported in Apple platforms. See #13979 for the approved API and discussion. PR #109861 adds the member `CompareOptions.NumericOrdering` but does not provide a conforming implementation for Apple platforms. The remaining work is to update the platform abstraction layer to support this.\n\nPAL change would be to recognize the dotnet CompareOptions and convert it to the NSString.CompareOptions [here](https://github.com/dotnet/runtime/blob/main/src/native/libs/System.Globalization.Native/pal_collation.m#L70)\n\nThis is the numeric compare option documentation for reference: [NSString.CompareOptions API](https://developer.apple.com/documentation/foundation/nsstring/compareoptions/1415530-numeric)\n\nPR #109861 throws PlatformNotSupportedException when this option is used and skips tests that used this option, so when this is implemented, those guards can be removed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnNg_sw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UPsVV",
                                           "createdAt":  "2024-11-20T01:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T01:44:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UPuVR",
                                           "createdAt":  "2024-11-20T01:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T01:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UPuV2",
                                           "createdAt":  "2024-11-20T01:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T01:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UPuXc",
                                           "createdAt":  "2024-11-20T01:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-maccatalyst\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T01:51:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aHFOJ",
                                           "createdAt":  "2025-01-12T02:19:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFCJVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-02-03T15:52:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PranavSenthilnathan",
                                           "body":  "Note: we rely on the `stringByFoldingWithOptions` native API for getting the sort key and hash code in Apple hybrid globalization, so numeric ordering can\u0027t be easily implemented for those 2 methods due to `stringByFoldingWithOptions` not supporting it: [docs](https://developer.apple.com/documentation/foundation/nsstring/1413779-stringbyfoldingwithoptions#parameters). Also, unlike the Hiragana/Katakana transformation, there doesn\u0027t seem to be a transform available for numbers so we can\u0027t work around it by preprocessing.",
                                           "updatedAt":  "2025-01-12T02:19:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c2D-z",
                                           "createdAt":  "2025-02-03T16:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhp6uA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2025-09-10T12:20:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e Note: we rely on the `stringByFoldingWithOptions` native API for getting the sort key and hash code in Apple hybrid globalization, so numeric ordering can\u0027t be easily implemented for those 2 methods due to `stringByFoldingWithOptions` not supporting it: [docs](https://developer.apple.com/documentation/foundation/nsstring/1413779-stringbyfoldingwithoptions#parameters). Also, unlike the Hiragana/Katakana transformation, there doesn\u0027t seem to be a transform available for numbers so we can\u0027t work around it by preprocessing.\n\nThank you for the initial investigation. Would you like to try implementing the `NumericOrdering` for the APIs where Apple provides direct support?",
                                           "updatedAt":  "2025-02-03T16:01:36Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[iOS/tvOS/MacCatalyst] String comparer for sorting numeric strings logically",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios",
                       "os-tvos",
                       "os-maccatalyst"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110035",
        "createdAt":  "2024-11-21T02:04:25Z",
        "number":  110035,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-28T13:12:35Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Globilization-country-list-only-returns-/10786098)._\n\n---\nI am using .Net 8  Visual Studio Version 17.11.5  and Blazor webassembly console app.\nUsing similar code in .net framword 4.7 I do get the full country name but not in my application\n\n**The output produced:**\n\nde      de  deu DEU de                                       de                                      \nde-DE   de  deu DEU de (DE)                                  de (DE)                                 \n en      en  eng ENU en                                       en                                      \n \n**The code I am using** \n\n@using System.Globalization;\nConsole.WriteLine(\"CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\");\nforeach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.AllCultures))\n{\n    Console.Write(\"{0,-7}\", ci.Name);\n    Console.Write(\" {0,-3}\", ci.TwoLetterISOLanguageName);\n    Console.Write(\" {0,-3}\", ci.ThreeLetterISOLanguageName);\n    Console.Write(\" {0,-3}\", ci.ThreeLetterWindowsLanguageName);\n    Console.Write(\" {0,-40}\", ci.DisplayName);\n    Console.WriteLine(\" {0,-40}\", ci.EnglishName);\n}\n\nThe sample code from [https://learn.microsoft.com/en-us/dotnet/api/system.globalization.culturetypes?view=net-8.0]()\nreturns the full name\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic\nbg      bg  bul BGR Bulgarian                                Bulgarian\n\n\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/10/2024, 05:32 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlT3DiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UaRkV",
                                           "createdAt":  "2024-11-21T02:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD71o9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2024-11-21T02:15:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@lewing I think this is by-design, but wanted to get you to answer here.",
                                           "updatedAt":  "2024-11-21T02:05:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UaThQ",
                                           "createdAt":  "2024-11-21T02:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-21T02:14:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UaTjv",
                                           "createdAt":  "2024-11-21T02:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-21T02:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UjBzG",
                                           "createdAt":  "2024-11-21T20:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @ilonatommy ",
                                           "updatedAt":  "2024-11-21T20:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VPcOI",
                                           "createdAt":  "2024-11-27T13:15:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "@lewing that is true for net 8.\n\nThis is fixed in net9 in https://github.com/dotnet/runtime/pull/99956. Do you want to backport?\n\nThe quoted locales will be then:\n```\nde      de  deu DEU German                                 German\nde-DE   de  deu DEU German (Germany)            German (Germany)\nen      en  eng ENU English                                  English \n```",
                                           "updatedAt":  "2024-11-27T13:15:23Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Globilization country list only returns 2 characters and not the full name",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110430",
        "createdAt":  "2024-12-04T01:22:15Z",
        "number":  110430,
        "author":  "LiamMorrow",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:59:28Z",
        "body":  "### Description\n\nWhen using `decimal.Parse` using the default `CultureInfo` (or not specifying one), MAUI does not respect the user\u0027s decimal separator options in iOS.  Instead, it simply uses the language\u0027s default.  What this means is that when a user is prompted for numerical, decimal input, the iOS keyboard presents them with a `comma` separator (as they have configured), but decimal.Parse treats it as a grouping separator.\n\nNote that if the user specifies a LANGUAGE which uses commas as a decimal separator, everything works as expected and decimal parse treats commas as decimal separators.\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e Screenshot showing how the default culture parses a decimal, and the correct parsing\u003c/summary\u003e\n\n ![Image](https://github.com/user-attachments/assets/c151e654-2a35-465c-b874-42e4d334f294)\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\u003csummary\u003eScreenshot showing that the keyboard only allows entering decimals with commas\u003c/summary\u003e\n\n![Image](https://github.com/user-attachments/assets/d458cc74-4121-4f29-b4b7-ebd35193a22a)\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003e Code driving the parsing logic\u003c/summary\u003e\n\n```\n if (decimal.TryParse(e.NewTextValue, out decimal result))\n        {\n            resultLabel.Text = $\"Parsed value with default culture: {result}\";\n        }\n        else\n        {\n            resultLabel.Text = \"Invalid input\";\n        }\n#if IOS\n        var correctedCulture = CultureInfo.CurrentCulture.Clone() as CultureInfo;\n        correctedCulture.NumberFormat.NumberDecimalSeparator = NSLocale\n            .CurrentLocale\n            .DecimalSeparator;\n        correctedCulture.NumberFormat.NumberGroupSeparator = NSLocale\n            .CurrentLocale\n            .GroupingSeparator;\n\n        if (decimal.TryParse(e.NewTextValue, correctedCulture, out decimal result2))\n        {\n            resultLabel2.Text = $\"Parsed value with culture from IOS settings: {result2}\";\n        }\n        else\n        {\n            resultLabel2.Text = \"Invalid input\";\n        }\n#endif\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\u003csummary\u003eVideo showing off behaviour\u003c/summary\u003e\n\nhttps://github.com/user-attachments/assets/1b488061-38eb-4e40-9704-ebc8dc06f89a\n\n\u003c/details\u003e\n\n### Steps to Reproduce\n\n1. Open iOS settings -\u003e General -\u003e Language\n2. Set language to English\n3. Set Number Format to 1.234.234,83 (the one which uses comma as a decimal separator)\n4. In a Maui app type in a numeric editor (notice iOS presents only a comma as the decimal separator)\n5. Notice that decimal.Parse treats the comma as a grouping separator\n\nAn example repo for parsing can be found here:\nhttps://github.com/LiamMorrow/maui-decimal-repro\n\n### Link to public reproduction project repository\n\nhttps://github.com/LiamMorrow/maui-decimal-repro\n\n### Version with bug\n\n9.0.12 SR1.2\n\n### Is this a regression from previous behavior?\n\nNo, this is something new\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\niOS\n\n### Affected platform versions\n\niOS 18\n\n### Did you find any workaround?\n\nCloning the current culture, then using the proper separators in the clone, and setting it as the current culture on app startup does fix this.  See [this PR](https://github.com/LiamMorrow/LiftLog/pull/335) for an example.\n\n### Relevant log output\n\n```shell\n\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn0c7Og==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6WM2KV",
                                           "createdAt":  "2024-12-04T07:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jfversluis",
                                           "body":  "This issue was moved to xamarin/xamarin-macios#21754",
                                           "updatedAt":  "2024-12-05T10:48:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WM2Kf",
                                           "createdAt":  "2024-12-05T10:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "This sounds like the default CultureInfo isn\u0027t instantiated correctly, which is an issue for dotnet/runtime.",
                                           "updatedAt":  "2024-12-05T10:39:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WM2dl",
                                           "createdAt":  "2024-12-05T10:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-05T10:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WReaU",
                                           "createdAt":  "2024-12-05T18:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-05T18:49:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WRic9",
                                           "createdAt":  "2024-12-05T18:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-05T18:59:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WRimh",
                                           "createdAt":  "2024-12-05T18:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@matouskozak could you please have a look and triage?",
                                           "updatedAt":  "2024-12-05T18:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WTXG8",
                                           "createdAt":  "2024-12-05T22:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LiamMorrow",
                                           "body":  "For the record, this was originally reported here:\nhttps://github.com/LiamMorrow/LiftLog/issues/332\n\nNote that the user seems to think it is due to the mix of Swedish\u0026English keyboard, introduced in ios18",
                                           "updatedAt":  "2024-12-05T23:00:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Wp0GN",
                                           "createdAt":  "2024-12-09T10:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "@LiamMorrow Thanks a lot for the great issue description with concrete examples. I\u0027m able to reproduce the issue, on both .net 8 and .net 9 MAUI apps.\n\nDo you with which version of .NET it used used to work correctly?\n\nAnyways, I\u0027ll investigate why the `CurrentCulture` is not set properly with the iOS number format setting.",
                                           "updatedAt":  "2024-12-09T11:10:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WqG7T",
                                           "createdAt":  "2024-12-09T11:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-LJsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2024-12-09T11:32:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LiamMorrow",
                                           "body":  "Thanks @matouskozak for looking into it!\n\n\u003e Do you know when was the last time this used to work correctly?\n\nI have a feeling it has never worked correctly, however iOS 18 has released new keyboards which allow for multi locale keyboards which has probably made it much easier for it to happen.  I don\u0027t think many users would stray from their default locale\u0027s number format otherwise.  The user who reported it to me says it started occuring when they switched to the Swedish/English keyboard.",
                                           "updatedAt":  "2024-12-09T11:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eppU_",
                                           "createdAt":  "2025-02-17T00:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmacmullin",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2025-02-17T00:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ewUDw",
                                           "createdAt":  "2025-02-17T15:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e Any update on this?\n\nI did an investigation to figure out what the issue is. \n\nThe root cause is that we are using a string locale identifier https://github.com/dotnet/runtime/blob/69c8a1dcc03e1d80be6967d55810e7524abeed04/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Icu.cs#L126\n\nto construct the current locale used to retrieve the `groupingSeparator` and `decimalSeparator`:\n\nhttps://github.com/dotnet/runtime/blob/ea63985c1cf56b07324f87c54acb4d49875fa360/src/native/libs/System.Globalization.Native/pal_locale.m#L142-L143\n\nas such it will always default to the default `groupingSeparator` and `decimalSeparator` for the given locale. We would have to always query the device for `[NSLocale currentLocale]` before retrieving the separators.\n\n\nHowever, I see that very similar approach is used on other ICU platforms https://github.com/dotnet/runtime/blob/eafd523bc82cf739b2d04bae55b3a3ceaad6a0f3/src/native/libs/System.Globalization.Native/pal_localeStringData.c#L224\n\nand based on my local testing (on macOS), we don\u0027t respect the device\u0027s setting and instead we use the locale\u0027s default. Do you know if this is expected @tarekgh ?\n\n",
                                           "updatedAt":  "2025-02-17T15:37:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fJDi0",
                                           "createdAt":  "2025-02-19T22:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmacmullin",
                                           "body":  "@matouskozak where are you getting the value that you use for the string locale identifier? And has this changed recently?\n\nI was directed at this issue by @jfversluis who closed an issue I opened in the MAUI project where we\u0027re observing a change in behaviour between the previous version of MAUI/.net and the latest:\nhttps://github.com/dotnet/maui/issues/27793\n\nIn that issue I describe (and include a sample project that reproduces the issue) the fact that when running on a device\u0027s with the region set to Australia we\u0027d expect MAUI/.net to respect the device\u0027s locale and use Australian date formats (dd/mm/yyyy) - and this is what used to happen prior to .net9 and the latest version of MAUI. Now it looks like `System.Globalization.CultureInfo.CurrentCulture` doesn\u0027t reflect the device\u0027s settings on iOS - though it does seem to in a console app running on macOS.\n\nIs this the same underlying issue?",
                                           "updatedAt":  "2025-02-19T22:58:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fRzs6",
                                           "createdAt":  "2025-02-20T17:50:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e Is this the same underlying issue?\n\nThe issue you\u0027re describing is more likely related to https://github.com/dotnet/runtime/issues/110704 and the [fix](https://github.com/dotnet/runtime/pull/111612) will likely be part of the next .NET 9 servicing release. This issue is related specifically to numeric formatting and is present on older MAUI/.net versions as well.\n",
                                           "updatedAt":  "2025-02-20T17:50:13Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "iOS `Numeric Format` setting not respected",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111501",
        "createdAt":  "2025-01-16T16:50:10Z",
        "number":  111501,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:57:33Z",
        "body":  "In several cases, iOS simulator CI jobs related to Apple native globalizations are behaving differently than local simulators.\n\nFor example, `CultureInfo.CurrentCulture` returns `en` on CI, whereas locally it returns `en-US`.\n\nWe should investigate this difference to understand the customer impact.\n\nAfter this issue gets resolved, the following test scenarios should be re-enabled:\n- https://github.com/dotnet/runtime/pull/111032\n- https://github.com/dotnet/runtime/pull/111612",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmr9GRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6av0TY",
                                           "createdAt":  "2025-01-16T16:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-16T16:50:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6av0ZF",
                                           "createdAt":  "2025-01-16T16:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-16T16:50:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Investigate different Globalization behavior on iOS simulators on the CI",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111510",
        "createdAt":  "2025-01-16T23:03:51Z",
        "number":  111510,
        "author":  "danpere",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-16T23:50:12Z",
        "body":  "### Description\n\n`System.Globalization.TextElementEnumerator.ElementIndex` has different behavior in .NET 5.0+ and all other versions of .NET when using the entrypoint [`StringInfo.GetTextElementEnumerator(string str, int index)`](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.stringinfo.gettextelementenumerator?view=net-9.0#system-globalization-stringinfo-gettextelementenumerator(system-string-system-int32)). Specifically, in .NET 5.0+, the `ElementIndex` starts counting from `0` and in other versions of .NET, it starts counting from `index` (i.e., the indexes are the same as you\u0027d get enumerating the whole string). While I think the latter behavior makes more sense, given that I can\u0027t find an indication anyone else has noticed, changing the behavior probably isn\u0027t worth breaking it again. But the documentation should at least mention the change.\n\n### Reproduction Steps\n\nIn Visual Studio\u0027s C# interactive window:\n```\n\u003e #reset 64\nResetting execution engine.\nLoading context from \u0027CSharpInteractive.rsp\u0027.\n\u003e var xs = System.Globalization.StringInfo.GetTextElementEnumerator(\"abc\", 1); xs.MoveNext(); xs.ElementIndex\n1\n\u003e #reset core\nResetting execution engine.\nLoading context from \u0027CSharpInteractive.rsp\u0027.\n\u003e var xs = System.Globalization.StringInfo.GetTextElementEnumerator(\"abc\", 1); xs.MoveNext(); xs.ElementIndex\n0\n```\n\n### Expected behavior\n\nThe output of that code shouldn\u0027t depend on the version of .NET used. (Note that the behavior for certain strings is expected to differ due to different levels of Unicode support. But the example string is plain ASCII so that is not relevant here.)\n\n### Actual behavior\n\nOutput differs as described.\n\n### Regression?\n\nThis behavior appears to have changed in .NET 5.0.\n\n### Known Workarounds\n\nMy workaround, since I am calling this code from a .NET Standard library that could be run on different .NET versions, is to record the first `.ElementIndex` reported and use that to adjust the output.\n\n### Configuration\n\n```\n$ dotnet --info\n.NET SDK:\n Version:           9.0.102\n Commit:            cb83cd4923\n Workload version:  9.0.100-manifests.4a54b1a6\n MSBuild version:   17.12.18+ed8c6aec5\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n\n\nHost:\n  Version:      9.0.1\n  Architecture: x64\n  Commit:       c8acea2262\n```\n\n### Other information\n\nThe change appears to have been introduced (by accident?) in #328, which does not mention the change, making me think it was unintentional.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOms01hg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6azFux",
                                           "createdAt":  "2025-01-16T23:04:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-16T23:04:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6azTWG",
                                           "createdAt":  "2025-01-16T23:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @GrabYourPitchforks ",
                                           "updatedAt":  "2025-01-16T23:50:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Undocumented breaking change in TextElementEnumerator.ElementIndex in .NET 5.0",
        "labels":  [
                       "documentation",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111546",
        "createdAt":  "2025-01-17T16:48:34Z",
        "number":  111546,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-07T20:38:07Z",
        "body":  "Unicode 16.0 introduced a new Grapheme boundary rule [GB9c](https://unicode.org/reports/tr29/#GB9c). Most likely this will need to read a new Unicode file [IndicSyllabicCategory.txt](https://www.unicode.org/Public/UCD/latest/ucd/IndicSyllabicCategory.txt) to extract the `Consonant` and `Virama` character list to be able to implement this rule according to the [InCB](https://www.unicode.org/reports/tr44/#Indic_Conjunct_Break) definition. \n\nWhen implementing this rule, we need to enable the test for rule `[9.3]` when [reading the test data](https://github.com/dotnet/runtime/blob/e2874f53ff8ba0d15cc552e380419f2e7c1217fa/src/libraries/System.Runtime/tests/System.Globalization.Tests/System/Globalization/GraphemeBreakTest.cs#L186)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmuZjag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6a5iHi",
                                           "createdAt":  "2025-01-17T16:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-17T16:48:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a5mNq",
                                           "createdAt":  "2025-01-17T16:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @GrabYourPitchforks ",
                                           "updatedAt":  "2025-01-17T16:58:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support Grapheme Boundary Rule GB9c",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111924",
        "createdAt":  "2025-01-28T08:23:22Z",
        "number":  111924,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-05T17:05:19Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"x64\",\"Os\":\"Windows1022621\",\"Queue\":\"TigerWindows\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2025-01-23T03:22:49\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | x64\nOS | Windows 10.0.22621\nQueue | TigerWindows\nBaseline | [4bb0bcd9b5c47df97e51b462d8204d66c7d470fc](https://github.com/dotnet/runtime/commit/4bb0bcd9b5c47df97e51b462d8204d66c7d470fc)\nCompare | [c74440f8291edd35843f3039754b887afe61766e](https://github.com/dotnet/runtime/commit/c74440f8291edd35843f3039754b887afe61766e)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/4bb0bcd9b5c47df97e51b462d8204d66c7d470fc...c74440f8291edd35843f3039754b887afe61766e)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Tests.Perf_Char\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio\n-- | -- | -- | -- | -- | -- | -- | -- | --\n|\u003cul\u003e\u003cli\u003e[GetUnicodeCategory - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.22621/System.Tests.Perf_Char.GetUnicodeCategory(c%3a%20%27%d7%90%27).html\u003e)\u003c/li\u003e\u003cli\u003e📝 - [Benchmark Source](\u003chttps://github.com/dotnet/performance/blob/main/src/benchmarks/micro/libraries/System.Runtime/Perf.Char.cs#L87-#L91\u003e)\u003c/li\u003e\u003cli\u003e[ADX - Test Multi Config Graph](\u003chttps://dataexplorer.azure.com/clusters/dotnetperf.westus/databases/PerformanceData?query=H4sIAAAAAAAACl2R3Y7TMBCF7yv1HYbeOBXZJo34qYosAWUFEloJbQtcIuNMGiPHruwJ24jlHXg7Xodxk95wM5adMyffnLFIQBgJJLwW+yESdqsD3+PqE4bm265VYfUe6bMz2te4U4RHH4ZMb0GIv3+EWIpX85llE9UQBnapWUKmw6wqq2c36/VNtTmUm+16s62q1csXZfW8qp6W5bYsl1NnwJPnRlF7ckhF6F3qv/p+D8rpNn0P2MSiRVXHolPGXQXau8Yc058Hpzqjs19i57uTsYqMd3dMLRiWDAasRQ7ivncfjavTI6uDF78TCM/4wUTywWhl3ylSXw21yUcFE72LWQpJppKPo8pLzS/0MpV8QpXjkU9gcjyW89kjnIL/gZpgj8FgzOFtb2x94GH3pLpTDl+U7VGm+HeeU8Bwj7G39OYnBnXE+awoHuGh5UEmB3jC5sRZRFgsyN+ete1rXCygKOD2zJYWwTfQGMtexh3B97woiJfmBBTQ1by1lLfmTRM88NSQjQJ5xTxrb/vOyf9xh/E9ygs368iQRSk4PuSkh+l6hyr2ATt0JJb/ABXwGudwAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u003e)\u003c/li\u003e\u003c/ul\u003e | 1.45 ns | 2.54 ns | 1.75 | 0.06 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_28_2025/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.Tests.Perf_Char_001.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/01_28_2025/refs/heads/main_x64_Windows%2010.0.22621_Regression/System.Tests.Perf_Char.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Tests.Perf_Char*\u0027\n```\n\n\u003cdetails\u003e\n\n### System.Tests.Perf_Char.GetUnicodeCategory(c: \u0027א\u0027)\r\n\r\n#### ETL Files\r\n\r\n#### Histogram\r\n\r\n#### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnFPb0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cJXyv",
                                           "createdAt":  "2025-01-28T17:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEWWVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-01-28T19:49:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LoopedBard3",
                                           "body":  "Due to https://github.com/dotnet/runtime/pull/111569, FYI @MihaZupan ",
                                           "updatedAt":  "2025-01-28T17:58:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cKnKM",
                                           "createdAt":  "2025-01-28T20:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "| Method             | Toolchain             | c | Mean      | Error     | Ratio |\n|------------------- |---------------------- |-- |----------:|----------:|------:|\n| GetUnicodeCategory | \\47581030\\corerun.exe | א | 0.4043 ns | 0.0165 ns |  1.01 |\n| GetUnicodeCategory | \\7d758783\\corerun.exe | א | 0.3995 ns | 0.0171 ns |  1.00 |\n| GetUnicodeCategory | \\c74440f8\\corerun.exe | א | 0.3999 ns | 0.0197 ns |  1.00 |\n| GetUnicodeCategory | \\e2874f53\\corerun.exe | א | 0.3965 ns | 0.0193 ns |  0.99 |\n\nI\u0027m not seeing a change here (x64, Windows, coreclr).\n\nI see previous spikes to similar levels for this benchmark, could this be bimodal?",
                                           "updatedAt":  "2025-01-28T20:49:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cUlOt",
                                           "createdAt":  "2025-01-29T19:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-29T19:25:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cU9vT",
                                           "createdAt":  "2025-01-29T20:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This may be related to bringing the new Unicode data to the runtime https://github.com/dotnet/runtime/pull/111469? This should be data change only and no code change though.",
                                           "updatedAt":  "2025-01-29T20:12:31Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Perf] Windows/x64: 1 Regression on 1/23/2025 3:22:49 AM +00:00",
        "labels":  [
                       "area-System.Globalization",
                       "os-windows",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "arch-x64",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111894",
        "createdAt":  "2025-01-28T10:42:47Z",
        "number":  111894,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:57:11Z",
        "body":  "Based on the current [documentation](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-hybrid-mode.md#string-starts-with--ends-with)\n\n\u003e Apple Native API does not expose locale-sensitive endsWith/startsWith function. As a workaround, both strings get normalized and weightless characters are removed. Resulting strings are cut to the same length and comparison is performed. As we are normalizing strings to be able to cut them, we cannot calculate the match length on the original strings. Methods that calculate this information throw PlatformNotSupported exception.\n\nhttps://github.com/dotnet/runtime/blob/b61c8fc7f63145ded1f522b21344241679345f81/src/libraries/System.Private.CoreLib/src/System/Globalization/CompareInfo.cs#L615-L621\n\nWe should remove the exception throw for `IsPrefixx/IsSuffix` APIs and instead document the differences in returned `matchLength` or improve the implementation to give correct results.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBUdXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cFRro",
                                           "createdAt":  "2025-01-28T10:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T10:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cFR1c",
                                           "createdAt":  "2025-01-28T10:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T10:43:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Implementing locale-sensitive `IsPrefix` with correct `matchLength` output parameter on iOS",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111895",
        "createdAt":  "2025-01-28T11:06:42Z",
        "number":  111895,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T09:30:53Z",
        "body":  "Based on the current [documentation](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-hybrid-mode.md#string-comparison)\n\n\u003e As there is no IgnoreSymbols equivalent in NSStringCompareOptions all CompareOptions combinations that include IgnoreSymbols throw PlatformNotSupportedException.\n\nhttps://github.com/dotnet/runtime/blob/2987aba166b9779fede74c454e3a3f8826dc167b/src/libraries/System.Private.CoreLib/src/System/Globalization/CompareInfo.iOS.cs#L76-L87\n\nWe should remove the exception throw for `IndexOf` and other APIs using `IgnoreSymbols` compare option and implement a workaround to enable this API. Due to no [NSStringCompareOptions](https://developer.apple.com/documentation/foundation/nsstringcompareoptions) that would mimic the same behavior as .NET `IgnoreSymbols` we will likely need to:\n1. Preprocess the strings by removing the symbols (comma, period, colon, etc.).\n2. Calculate the range on the preprocessed strings.\n3. Map the range from preprocessed strings back to the input string to get correct index and matchLength.\n\nAdd more test cases:\nhttps://github.com/dotnet/runtime/blob/10f0bbf03ccc0f560f315ce13d5918ef8452ee6f/src/libraries/System.Runtime/tests/System.Globalization.Tests/CompareInfo/CompareInfoTests.IndexOf.cs#L79-L80",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBX4vg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cFfW5",
                                           "createdAt":  "2025-01-28T11:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T11:06:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cFfi-",
                                           "createdAt":  "2025-01-28T11:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T11:07:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Implement `IgnoreSymbols` compare option for string collation APIs on iOS",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111901",
        "createdAt":  "2025-01-28T13:21:22Z",
        "number":  111901,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCwKsw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-05-20T06:40:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "zyonzarhaf",
                                            "createdAt":  "2025-05-23T18:59:34Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-07T09:34:20Z",
        "body":  " https://github.com/dotnet/runtime/blob/b61c8fc7f63145ded1f522b21344241679345f81/src/libraries/System.Private.CoreLib/src/System/Globalization/CompareInfo.cs#L1599-L1604\n\n\n`CompareInfo.Version` currently throws an exception on iOS-like platforms. We need to have a workaround to return Collator version used for string comparisons by Apple APIs instead of throwing an exception.\n\n- Investigate how to get version of the `SortKey` retrieved by https://github.com/dotnet/runtime/blob/8be351ca265f75dd5cbb67931500bc787149e3be/src/native/libs/System.Globalization.Native/pal_collation.m#L329\n- Should have similar characteristics as `ucol_getVersion` https://github.com/dotnet/runtime/blob/45bd1185767a9850a6135a1467e79c99c740955d/src/native/libs/System.Globalization.Native/pal_collation.c#L898\n- Add tests cases https://github.com/dotnet/runtime/blob/main/src/libraries/System.Runtime/tests/System.Globalization.Tests/CompareInfo/CompareInfoTests.SortKey.cs\n    - Re-enable disabled/modified tests conditioned by `HybridGlobalization` ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBqHSg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cGoRf",
                                           "createdAt":  "2025-01-28T13:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T13:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cGodK",
                                           "createdAt":  "2025-01-28T13:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T13:21:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Implementing Unicode version retrieval (`CompareInfo.Version`) on iOS",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112195",
        "createdAt":  "2025-02-05T16:18:49Z",
        "number":  112195,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:52Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=940013\nBuild error leg or test failing: System.Tests.StringTests.StartsWithNoMatch_StringComparison\nPull request: https://github.com/dotnet/runtime/pull/111877\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"[FAIL] System.Tests.StringTests.StartsWithNoMatch_StringComparison\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nLog\n```\n[17:27:34] dbug: 2025-02-04 17:27:34.201 Df System.Runtime.Tests[12401:3ab5fc] Failed tests:\n[17:27:34] dbug: 2025-02-04 17:27:34.201 Df System.Runtime.Tests[12401:3ab5fc] 1) \t[FAIL] System.Tests.StringTests.StartsWithNoMatch_StringComparison   Test name: System.Tests.StringTests.StartsWithNoMatch_StringComparison\n[17:27:34] dbug: Assembly:  [System.Runtime.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]\n[17:27:34] dbug: 2025-02-04 17:27:34.201 Df System.Runtime.Tests[12401:3ab5fc]    Exception messages: Assert.Equal() Failure: Values differ\n[17:27:34] dbug: Expected: True\n[17:27:34] dbug: Actual:   False   Exception stack traces:    at System.Tests.StringTests.StartsWithNoMatch_StringComparison()\n```\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=940013\n**Error message validated:** `[[FAIL] System.Tests.StringTests.StartsWithNoMatch_StringComparison`]\n**Result validation:** :x: Known issue did not match with the provided build.\n**Validation performed at:** 2/5/2025 4:19:32 PM UTC\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnWAl_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dNH5s",
                                           "createdAt":  "2025-02-05T16:44:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-05T16:44:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dNOIF",
                                           "createdAt":  "2025-02-05T16:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-05T16:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dNkMA",
                                           "createdAt":  "2025-02-05T17:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@matouskozak please triage. Thanks!",
                                           "updatedAt":  "2025-02-05T17:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dX-hI",
                                           "createdAt":  "2025-02-06T16:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFhj8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kotlarmilos",
                                                                               "createdAt":  "2025-02-06T16:30:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "Looks like duplicate of https://github.com/dotnet/runtime/issues/108832 but with slightly different error message. fyi: @kotlarmilos ",
                                           "updatedAt":  "2025-02-06T16:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dYCXu",
                                           "createdAt":  "2025-02-06T16:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-06T16:24:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dYCX9",
                                           "createdAt":  "2025-02-06T16:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-06T16:24:39Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "OSX failure on StringTests.StartsWithNoMatch_StringComparison",
        "labels":  [
                       "area-System.Globalization",
                       "disabled-test",
                       "os-ios",
                       "os-tvos",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112249",
        "createdAt":  "2025-02-06T21:00:59Z",
        "number":  112249,
        "author":  "dotMorten",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_ehqw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephenquan",
                                            "createdAt":  "2025-02-26T04:41:52Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-04T12:22:40Z",
        "body":  "### Description\n\nWhen having localized resources in your application, and one of them is norwegian `no`, the resource lookup no longer works and falls back to english. This behavior is only observed on net9.0-ios, and not on Windows and Android or in net8.0-ios.\n\n### Reproduction Steps\n\n1. Open and run the following sample on iOS:\n[MauiApp12.zip](https://github.com/user-attachments/files/18697366/MauiApp12.zip)\n\n2. Notice that the button says \"Language is English\". Repeat on Android and Windows or downgrade the iOS target to .NET 8 and notice the output is now correctly \"Language is Norwegian\".\n\n### Expected behavior\n\nNorwegian resources are correctly looked up.\n\n### Actual behavior\n\nResources not found and falls back to the default english resource.\n\n### Regression?\n\nYes\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9.0.101, ios-arm64 with iOS 18.2 as well as on iOS17.5\n\n### Other information\n\nLooking at the generated NO culture this is what I\u0027m seeing which is likely the cause of it:\n```\nvar no = new System.Globalization.CultureInfo(\"no\");\nDebug.WriteLine(no.TwoLetterISOLanguageName); // return \"nb\" on net9.0-iOS, \"no\" on  net9.0-Android and net8.0-ios\nDebug.WriteLine(no.Name); // return \"nb\" on net9.0-iOS, \"no\" on  net9.0-Android and net8.0-ios\n```\nLooks like in 8.0, dotnet linked its own fork of ICU into every ios app, and in 9.0, you use system libraries as much as possible instead: https://github.com/dotnet/runtime/issues/80689\n\nI\u0027m guessing this is the root of the problem.\n\nMight also be related to: https://github.com/dotnet/runtime/issues/110680\nAlso related: \n - https://learn.microsoft.com/en-us/answers/questions/1848600/icu-update-nb-no-to-no-no-locale-id-change-net-fra\n - https://icu.unicode.org/design/norwegian-locales-changes-in-v39\n \nThis is a pretty big regression for our localized libraries that we ship to other developers.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu8dspw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6daq2Y",
                                           "createdAt":  "2025-02-06T21:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFjX8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dotMorten",
                                                                               "createdAt":  "2025-02-06T21:03:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "/cc: @matouskozak ",
                                           "updatedAt":  "2025-02-06T21:02:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6daq3G",
                                           "createdAt":  "2025-02-06T21:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-06T21:02:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6daq-n",
                                           "createdAt":  "2025-02-06T21:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-06T21:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6djyGv",
                                           "createdAt":  "2025-02-07T16:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotMorten",
                                           "body":  "@ivanpovazan Since this is a pretty big regression breaking localization, is there a reason it\u0027s pushed off to the next release?",
                                           "updatedAt":  "2025-02-07T16:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvQLj",
                                           "createdAt":  "2025-02-09T17:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFzGeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2025-02-10T09:20:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e [@ivanpovazan](https://github.com/ivanpovazan) Since this is a pretty big regression breaking localization, is there a reason it\u0027s pushed off to the next release?\n\nWe\u0027ll typically set the milestone for the next release as way to track active work. A separate backport decision is made when the change goes in.  ",
                                           "updatedAt":  "2025-02-09T17:05:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dzAVV",
                                           "createdAt":  "2025-02-10T09:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@dotMorten, as @steveisok said, it is being marked with 10.0.0 milestone just to annotate that we are actively working on it. Once the fix gets merged to main, we consider backporting it to the servicing releases depending on when/where the regression started occurring. Thank you for understanding. ",
                                           "updatedAt":  "2025-02-10T09:19:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6evOpc",
                                           "createdAt":  "2025-02-17T13:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "As noted, in .NET 9 we use system libraries for globalization support on iOS platforms.\n\nIn case of `no` our [code paths](https://github.com/dotnet/runtime/blob/ea63985c1cf56b07324f87c54acb4d49875fa360/src/native/libs/System.Globalization.Native/pal_locale.m#L44-L47) essentially end up calling:\n```objc\nNSLocale *currentLocale = [[NSLocale alloc] initWithLocaleIdentifier:@\"no\"];\nconst char* value = [currentLocale.localeIdentifier UTF8String];\n```\nwhich returns `nb`.\n\nThe same behavior has been verified with plain Objective-C app in Xcode targeting MacOS and iOS platforms, which implies the behavior is imposed by Apple. \n\nI opened a feedback ticket to apple: https://feedbackassistant.apple.com/feedback/16512787 \n\nIn the meantime, @dotMorten is it feasible for you to add `nb` resource as well to your app as a workaround?\n\n",
                                           "updatedAt":  "2025-04-22T08:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6feYwv",
                                           "createdAt":  "2025-02-21T21:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tivik7",
                                           "body":  "@dotMorten\n\nI am using in the startup to force the language setting, seems to be working\n\n        if (NSLocale.PreferredLanguages.ElementAt(0).Substring(0, Math.Min(NSLocale.PreferredLanguages.ElementAt(0).Length, 3)) == \"nb-\")\n        {\n            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo(\"nb-NO\");\n            CultureInfo.DefaultThreadCurrentUICulture = new CultureInfo(\"nb-NO\");\n        } else if (NSLocale.PreferredLanguages.ElementAt(0).Substring(0, Math.Min(NSLocale.PreferredLanguages.ElementAt(0).Length, 3)) == \"nn-\")\n        {\n            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo(\"nn-NO\");\n            CultureInfo.DefaultThreadCurrentUICulture = new CultureInfo(\"nn-NO\");\n        }",
                                           "updatedAt":  "2025-02-21T21:06:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fec1f",
                                           "createdAt":  "2025-02-21T21:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotMorten",
                                           "body":  "@tivik7 I\u0027m building a 3rd party class library (so no language startup code), and the `no` language resources suddenly won\u0027t work because of this breaking behavior, but continues to work on all other platforms.",
                                           "updatedAt":  "2025-02-21T21:17:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fi7jd",
                                           "createdAt":  "2025-02-23T09:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tivik7",
                                           "body":  "@dotMorten I guess you will be able to use complier directives to add the check for iOS in your library initialization code, or in the relevant features til this gets fixed. Not entirely sure how the CultureInfo.DefaultThreadCurrentCulture work, but believe that you set the culture for the entire app event if you set it from a library. Might be a need to set it using the main tread if not done in the initialization.",
                                           "updatedAt":  "2025-02-23T09:19:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67x2yn",
                                           "createdAt":  "2025-08-04T12:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e As noted, in .NET 9 we use system libraries for globalization support on iOS platforms.\n\u003e \n\u003e In case of `no` our [code paths](https://github.com/dotnet/runtime/blob/ea63985c1cf56b07324f87c54acb4d49875fa360/src/native/libs/System.Globalization.Native/pal_locale.m#L44-L47) essentially end up calling:\n\u003e \n\u003e NSLocale *currentLocale = [[NSLocale alloc] initWithLocaleIdentifier:@\"no\"];\n\u003e const char* value = [currentLocale.localeIdentifier UTF8String];\n\u003e which returns `nb`.\n\u003e \n\u003e The same behavior has been verified with plain Objective-C app in Xcode targeting MacOS and iOS platforms, which implies the behavior is imposed by Apple.\n\u003e \n\u003e I opened a feedback ticket to apple: https://feedbackassistant.apple.com/feedback/16512787\n\u003e \n\u003e In the meantime, [@dotMorten](https://github.com/dotMorten) is it feasible for you to add `nb` resource as well to your app as a workaround?\n\nI\u0027ll keep this open to track this regression but move it to .NET 11 until https://feedbackassistant.apple.com/feedback/16512787 is addressed. ",
                                           "updatedAt":  "2025-08-04T12:22:33Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Regression: Norwegian localization no longer works in iOS with .NET 9",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112418",
        "createdAt":  "2025-02-11T15:53:13Z",
        "number":  112418,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:56:18Z",
        "body":  "`matchLength` [definition](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.compareinfo.indexof?view=net-9.0#system-globalization-compareinfo-indexof(system-readonlyspan((system-char))-system-readonlyspan((system-char))-system-globalization-compareoptions-system-int32@)):\n\n\u003e When this method returns, contains the number of characters of source that matched the desired value. This may be different than the length of value if a linguistic comparison is performed. Set to 0 if value is not found within source.\n\nDue to the applied normalization https://github.com/dotnet/runtime/blob/ec118c7e798862fd69dc7fa6544c0d9849d32488/src/native/libs/System.Globalization.Native/pal_collation.m#L185-L186 the `matchLength` returned by the (Last)IndexOf, IsSuffix, IsPrefix APIs might not be what users expect.\n\nThe `precomposedStringWithCanonicalMapping` converts the string to its NFC form, potentially causing the returned length to be shorter than expected (if a combination of two code points got normalized into a single code point). \n\n---\n\nPossible solutions:\n- Revisit the implementation of `IndexOf` and remove the normalization while ensuring correct behavior.\n- Introduce a post-search step, where we would traverse the original `source` string based on the found index and calculate the `matchLength`.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnga0Gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6eBrBJ",
                                           "createdAt":  "2025-02-11T15:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-11T15:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eBrQa",
                                           "createdAt":  "2025-02-11T15:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-11T15:53:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[iOS][globalization] Investigate `matchLength` differences between Apple mobile and other ICU platform returned by (Last)IndexOf, IsSuffix, IsPrefix APIs",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113614",
        "createdAt":  "2025-03-17T14:22:25Z",
        "number":  113614,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T10:51:03Z",
        "body":  "There seems to be something off with how iOS determines the language-region combination in `preferredLanguages`. If you select Germany region, you can choose\n\n- `English (US)`: this will result in behavior where the region is incorrectly set to US even though iPhone region is still Germany.\n\n```\n2025-03-17 14:16:09.229227+0000 net9_maui[13431:5122872] CultureInfo.CurrentCulture: en-US\n2025-03-17 14:16:09.229416+0000 net9_maui[13431:5122872] CultureInfo.CurrentUICulture: en-US\n2025-03-17 14:16:09.229760+0000 net9_maui[13431:5122872] CultureInfo.CurrentUICulture.DisplayName: English (United States)\n2025-03-17 14:16:09.231533+0000 net9_maui[13431:5122872] RegionInfo.CurrentRegion.CurrencyEnglishName: US Dollar\n2025-03-17 14:16:09.231593+0000 net9_maui[13431:5122872] RegionInfo.CurrentRegion.ISOCurrencySymbol: USD\n2025-03-17 14:16:09.231654+0000 net9_maui[13431:5122872] RegionInfo.CurrentRegion.CurrencyNativeName: US Dollar\n2025-03-17 14:16:09.231694+0000 net9_maui[13431:5122872] RegionInfo.CurrentRegion.CurrencySymbol: $\n2025-03-17 14:16:09.231771+0000 net9_maui[13431:5122872] CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol: $\n```\n\n\u003cimg width=\"308\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/82c6f3f2-a832-4df5-b91b-faaa036e25b6\" /\u003e\n\n- `English (UK)`: this will result in correct behavior, i.e., German regional info and English as a language.\n```\n2025-03-17 14:13:56.740872+0000 net9_maui[10392:5103515] CultureInfo.CurrentCulture: en-DE\n2025-03-17 14:13:56.741067+0000 net9_maui[10392:5103515] CultureInfo.CurrentUICulture: en-DE\n2025-03-17 14:13:56.741291+0000 net9_maui[10392:5103515] CultureInfo.CurrentUICulture.DisplayName: English (Germany)\n2025-03-17 14:13:56.743050+0000 net9_maui[10392:5103515] RegionInfo.CurrentRegion.CurrencyEnglishName: Euro\n2025-03-17 14:13:56.743108+0000 net9_maui[10392:5103515] RegionInfo.CurrentRegion.ISOCurrencySymbol: EUR\n2025-03-17 14:13:56.743168+0000 net9_maui[10392:5103515] RegionInfo.CurrentRegion.CurrencyNativeName: Euro\n2025-03-17 14:13:56.743215+0000 net9_maui[10392:5103515] RegionInfo.CurrentRegion.CurrencySymbol: €\n2025-03-17 14:13:56.743277+0000 net9_maui[10392:5103515] CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol: €\n```\n\nWe should always return regional information for Germany as the iPhone region is set that way.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqfFgxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6is_uh",
                                           "createdAt":  "2025-03-17T14:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-17T14:22:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6is_34",
                                           "createdAt":  "2025-03-17T14:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-17T14:22:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i1GaV",
                                           "createdAt":  "2025-03-18T06:32:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "makazeu",
                                           "body":  "When the language is set to `English (UK)`, why does `CultureInfo.CurrentCulture` show as `en-DE`? Shouldn\u0027t it be `en-GB` instead?",
                                           "updatedAt":  "2025-03-18T06:32:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i2e09",
                                           "createdAt":  "2025-03-18T09:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e When the language is set to `English (UK)`, why does `CultureInfo.CurrentCulture` show as `en-DE`? Shouldn\u0027t it be `en-GB` instead?\n\nIt is still unclear to me why we\u0027re seeing this difference behavior between `English (UK)` and `English (US)`. We\u0027re taking the current locale (culture) information directly from `NSLocale.preferredLanguages` Objective-C API. We might need to revisit if this API is the most appropriate and if something like `NSLocale.currentLocale` doesn\u0027t align better with our use-case.",
                                           "updatedAt":  "2025-03-18T09:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i9C21",
                                           "createdAt":  "2025-03-18T16:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKkBWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-03-19T15:49:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "makazeu",
                                           "body":  "Region should be different from preferred language, because they\u0027re simply different things.\n\nFor Windows, the current region is the UserGeo from Win32 API:\nhttps://github.com/dotnet/runtime/blob/11519252b061f007691c5c5e491911caac581926/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Windows.cs#L157-L183\n\nHowever, for all Unix-like OS\u0027s, the current region is simply CurrentCulture:\nhttps://github.com/dotnet/runtime/blob/a45130eb8019ca923ad58e7dd0c6378c1a88a555/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Unix.cs#L53\n\nOn iOS, the CurrentCulture is the Locale from Native API:\nhttps://github.com/dotnet/runtime/blob/a45130eb8019ca923ad58e7dd0c6378c1a88a555/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.iOS.cs#L25-L30",
                                           "updatedAt":  "2025-03-18T16:29:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jJegL",
                                           "createdAt":  "2025-03-19T15:54:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e On iOS, the CurrentCulture is the Locale from Native API:\n\nI think the `CurrentCulture` on iOS is taken from https://github.com/dotnet/runtime/blob/69c8a1dcc03e1d80be6967d55810e7524abeed04/src/libraries/System.Private.CoreLib/src/System/Globalization/CultureData.Icu.cs#L178-L185\n\nI agree that it does seem a bit off to use `preferredLanguages` API to get `CurrentCulture` region info. @mdh1418 @steveisok  do you remember why we switched from using `NSLocale.currentLocale` to  `NSLocale.preferredLanguages` in https://github.com/dotnet/runtime/pull/95786? I suppose that `NSLocale.preferredLanguages` is what usually changes for users on iPhones but I don\u0027t now for sure as I would expect `NSLocale.currentLocale` to work as well (since we use it on macOS also).",
                                           "updatedAt":  "2025-03-19T15:54:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jJyYc",
                                           "createdAt":  "2025-03-19T16:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKk2RA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-03-19T17:12:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "@matouskozak No, I don\u0027t know any other reason besides trying to fix the issue that the PR targeted. Maybe we should split it into separate functions, one using the preferredLanguage and the other to use the currentLocale.",
                                           "updatedAt":  "2025-03-19T16:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p71zN",
                                           "createdAt":  "2025-05-05T13:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tipa",
                                           "body":  "I found a perhaps related problem. Given these macOS settings, I get `CultureInfo.CurrentCulture.Name = \"en-DE\"`. I think this is the expected behavior, right?\n\n![Image](https://github.com/user-attachments/assets/f1b590c5-3ba2-4fa7-8646-e063fa47e9c4)\n\nIn a similar setup on iOS (see screenshot below), I get `CultureInfo.CurrentCulture.Name = \"en-DE\"` when running the app in Debug mode **BUT** `CultureInfo.CurrentCulture.Name = \"en\"` when running the app in Release mode (Native AOT). This causes incorrect results when trying to format (`double.ToString()`) or parse decimal values (`double.TryParse()`), among other things.\n\n- Is this problem covered by this issue as well?\n- Is it safe to construct my own `CultureInfo` with `new CultureInfo(CultureInfo.CurrentCulture.TwoLetterISOLanguageName + \"-\" + NSLocale.CurrentLocale.RegionCode)` until this issue is (hopefully) fixed with .net10 or could this cause problems in certain situations?\n\n![Image](https://github.com/user-attachments/assets/dd59c580-576e-47b9-83a7-adf97055e200)",
                                           "updatedAt":  "2025-05-05T13:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p8DSn",
                                           "createdAt":  "2025-05-05T13:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e In a similar setup on iOS (see screenshot below), I get CultureInfo.CurrentCulture.Name = \"en-DE\" when running the app in Debug mode BUT CultureInfo.CurrentCulture.Name = \"en\" when running the app in Release mode (Native AOT).\n\nThis is a new and different issue I haven\u0027t seen before (different behavior in debug and release builds). Could you please open an issue for it with a repro steps?\n\nAbout the workaround, yes, you could also `NSLocale.CurrentLocale.LanguageCode` to get the language from the device if that fits your purpose.",
                                           "updatedAt":  "2025-05-05T13:58:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p8WDE",
                                           "createdAt":  "2025-05-05T14:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQ0y7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-05-05T15:33:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tipa",
                                           "body":  "Thanks - I filed a new issue here: https://github.com/dotnet/runtime/issues/115302\nI think `NSLocale.CurrentLocale.LanguageCode` is not what I want, it returns \"en\" for the language/region settings I showed in my screenshots, so my constructed CultureInfo would have the Name \"en-en\", leading to the same problems as before (e.g. decimals being formatted with a period character as decimal separator)",
                                           "updatedAt":  "2025-05-05T14:19:32Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[iOS][globalization] Incorrect region information when using `English (US)` language and non-US region",
        "labels":  [
                       "area-System.Globalization",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114677",
        "createdAt":  "2025-04-15T08:10:21Z",
        "number":  114677,
        "author":  "Diekreef",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-15T23:08:35Z",
        "body":  "### Description\n\nHi everyone,\n\nI’m running into a strange issue and hoping someone might have experienced something similar.\n\nI’m running a .NET WebForms app inside a Windows 11 ARM VM (via Parallels) on an M4 MacBook.\n\nA colleague running the exact same code on an Intel-based Windows PC has no issues.\n\nMy app breaks on this line:\n\n**DateAdd(DateInterval.Month, -1, Now.Date.AddDays(-1))**\n\nIt throws a “date out of range” error.\n\nWhen debugging, both Now.Date.AddDays(-1) and DateTime.Today.AddDays(-1) evaluate to 0001-01-01, which is obviously invalid.\n\n**What I’ve tried so far:**\n\n- Locale is set to en-US (same as my colleague’s)\n- Tried forcing culture to en-ZA programmatically\n- Checked Now.Ticks and it looks normal (e.g., 638802624726249884)\n- This happens only in the Parallels VM on the Mac, not on a regular Windows laptop.\n- Even tried switching VMs (from VMWare to Parallels) — same issue.\n\nAny idea what could be causing the functions to go haywire like this on ARM-based VMs?\n\n### Reproduction Steps\n\nMy app breaks on this line:\n\n**DateAdd(DateInterval.Month, -1, Now.Date.AddDays(-1))**\n\nIt throws a “date out of range” error.\n\nWhen debugging, both Now.Date.AddDays(-1) and DateTime.Today.AddDays(-1) evaluate to 0001-01-01, which is obviously invalid.\n\n### Expected behavior\n\nSo subtract todays date to render default values of the last week. I can\u0027t change the code as it works on a coworkers Windows machine and obviously runs in Prod.\n\n### Actual behavior\n\nGetting Date out of range issue.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 4.8\nWindows 11 on arm VM running on Macbook pro m4 chipset\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp1qN8Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nJNf-",
                                           "createdAt":  "2025-04-15T08:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Diekreef",
                                           "body":  "@vitek-karas ",
                                           "updatedAt":  "2025-04-15T08:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nSkCy",
                                           "createdAt":  "2025-04-15T16:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This will be hard to tell without more information, I guess. When you say `Now.Date` you mean `DateTime.Now.Date`? or do you have your own property called `Now`?\n\nWhat do you get when you call `DateTime.Utc.Now`? and what is the default time zone on that VM? could you send the output of the following code?\n\n```C#\nConsole.WriteLine($\"{DateTime.UtcNow}\");\nConsole.WriteLine($\"{TimeZoneInfo.Local.DisplayName} ... {TimeZoneInfo.Local.BaseUtcOffset}\");\nDumpTimeZoneRules(saoTZ);\n\npublic static void DumpTimeZoneRules(TimeZoneInfo tzi)\n{\n    Console.WriteLine($\" ------------- {tzi.Id}  {tzi.BaseUtcOffset} -----------------------\");\n\n    foreach (var rule in tzi.GetAdjustmentRules())\n    {\n        Console.WriteLine($\"DateStart                  : {rule.DateStart} ({rule.DateStart.Kind})\");\n        Console.WriteLine($\"DateEnd                    : {rule.DateEnd} ({rule.DateEnd.Kind})\");\n        Console.WriteLine($\"DaylightDelta              : {rule.DaylightDelta}\");\n\n        Console.WriteLine($\"DaylightTransitionStart    : M:{rule.DaylightTransitionStart.Month}, D:{rule.DaylightTransitionStart.Day}, W:{rule.DaylightTransitionStart.Week}, DoW:{rule.DaylightTransitionStart.DayOfWeek}, Time:{rule.DaylightTransitionStart.TimeOfDay}, FixedDate:{rule.DaylightTransitionStart.IsFixedDateRule}\");\n        Console.WriteLine($\"DaylightTransitionEnd      : M:{rule.DaylightTransitionEnd.Month}, D:{rule.DaylightTransitionEnd.Day}, W:{rule.DaylightTransitionEnd.Week}, DoW:{rule.DaylightTransitionEnd.DayOfWeek}, Time:{rule.DaylightTransitionEnd.TimeOfDay}, FixedDate:{rule.DaylightTransitionEnd.IsFixedDateRule}\");\n\n        // Console.WriteLine($\"BaseUtcOffsetDelta         : {rule.BaseUtcOffsetDelta}\");\n        // Console.WriteLine($\"BaseUtcOffsetDelta         : {rule.GetType().GetProperty(\"BaseUtcOffsetDelta\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)!.GetValue(rule)}\");\n        Console.WriteLine($\"NoDaylightTransitions      : {rule.GetType().GetProperty(\"NoDaylightTransitions\", BindingFlags.Instance | BindingFlags.NonPublic)!.GetValue(rule)}\");\n        Console.WriteLine($\"------------------------------------------------------------------------------------------------------------------------------------------------------------\");\n    }\n}\n```",
                                           "updatedAt":  "2025-04-15T16:08:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nWklC",
                                           "createdAt":  "2025-04-15T22:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Diekreef",
                                           "body":  "Hi @tarekgh \n\nThanks please see the results below.\n\nhttps://share.zight.com/L1ulg8pb",
                                           "updatedAt":  "2025-04-15T22:55:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nWo3x",
                                           "createdAt":  "2025-04-15T23:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Diekreef thanks.\n\nI am a little bit confused. I n your issue description you mentioned the problem is happening on `.Net 4.8` while the image you sent showing running on `net8`. Am I missing anything? Did you run the code on the failing VM?",
                                           "updatedAt":  "2025-04-15T23:08:34Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  ".NET DateTime date out of range error only on Windows ARM VM (Parallels on Mac M4 or vmware fusion)",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116577",
        "createdAt":  "2025-06-12T10:23:50Z",
        "number":  116577,
        "author":  "phuclv90",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-13T17:03:16Z",
        "body":  "### Background and motivation\n\nThere are [JapaneseLunisolarCalendar](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.japaneselunisolarcalendar?view=net-9.0), [KoreanLunisolarCalendar](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.koreanlunisolarcalendar?view=net-9.0), [TaiwanLunisolarCalendar](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.taiwanlunisolarcalendar?view=net-9.0), [ChineseLunisolarCalendar](https://learn.microsoft.com/en-us/dotnet/api/system.globalization.chineselunisolarcalendar?view=net-9.0) but **[no VietnameseLunisolarCalendar](https://learn.microsoft.com/en-us/dotnet/standard/datetime/working-with-calendars)**. What\u0027s even weirder is that Japan doesn\u0027t even use Lunisolar calendar nowadays, unlike Vietnamese people who use it extensively, and celebrate Lun(isol)ar New Year and other events in Lunisolar calendar just like the other East Asian cultures\n\n### API Proposal\n\nSince Vietnamese is in the CJKV area (Sinosphere), its calendar is also the same\n```csharp\npublic class VietnameseLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar\n```\nThe only difference is the timezone that\u0027s used to calculate the new moon\n\n\n### API Usage\n\n```csharp\nusing System;\nusing System.Globalization;\n\npublic class VietnameseLunisolarCalendarExample\n{\n    public static void Main(string[] args)\n    {\n        VietnameseLunisolarCalendar calendar = new VietnameseLunisolarCalendar();\n\n        // Convert a Gregorian date to VietnameseLunisolar\n        DateTime gregorianDate = new DateTime(2025, 6, 12);\n        int year = calendar.GetYear(gregorianDate);\n        int month = calendar.GetMonth(gregorianDate);\n        int day = calendar.GetDayOfMonth(gregorianDate);\n\n        // Display the converted VietnameseLunisolar date\n        Console.WriteLine($\"Gregorian Date: {gregorianDate}\");\n        Console.WriteLine($\"VietnameseLunisolar Year: {year}\");\n        Console.WriteLine($\"VietnameseLunisolar Month: {month}\");\n        Console.WriteLine($\"VietnameseLunisolar Day: {day}\");\n\n        // Example: Convert a VietnameseLunisolar date back to Gregorian\n        int vietnameseYear = 2025;\n        int vietnameseMonth = 1;\n        int vietnameseDay = 1;\n\n        DateTime vietnameseDate = calendar.ToDateTime(vietnameseYear, vietnameseMonth, vietnameseDay, 0, 0, 0, 0);\n        Console.WriteLine($\"VietnameseLunisolar Date (year {vietnameseYear}, month {vietnameseMonth}, day {vietnameseDay}): {vietnameseDate}\");\n    }\n}\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsRWP7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wyunZ",
                                           "createdAt":  "2025-06-12T10:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-12T10:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w3RAJ",
                                           "createdAt":  "2025-06-12T15:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-12T15:21:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w3owt",
                                           "createdAt":  "2025-06-12T15:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@phuclv90 Thank you for your report. Before we consider adding support for a new calendar, we need to see sufficient demand for it. I recommend implementing the calendar in your own library and publishing it to NuGet. We can then monitor its adoption and revisit this discussion based on community interest. \n\nhttps://en.wikipedia.org/wiki/Vietnamese_calendar",
                                           "updatedAt":  "2025-06-12T15:50:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6w_SlN",
                                           "createdAt":  "2025-06-13T07:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "phuclv90",
                                           "body":  "There\u0027s currently a related package on NuGet: https://www.nuget.org/packages/SonPhat.VietnameseCalendar\nAlso https://www.codeproject.com/Articles/30193/Vietnamese-Lunar-Calendar-for-NET",
                                           "updatedAt":  "2025-06-13T07:28:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xE_Zy",
                                           "createdAt":  "2025-06-13T16:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "phuclv90",
                                           "body":  "Apple also has just added Vietnamese calendar to iOS26, although Samsung had already done that long long ago to its calendar app",
                                           "updatedAt":  "2025-06-13T16:16:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xFY_v",
                                           "createdAt":  "2025-06-13T17:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@phuclv90 Thanks for the info. \n\nWe’re currently not seeing strong demand for NuGet packages. However, we’ll keep this issue open for potential future consideration. In the meantime, affected users can continue using the existing NuGet package.\n\n![Image](https://github.com/user-attachments/assets/bc2ee3c6-f44b-410b-8e0a-63c7491bf73d)",
                                           "updatedAt":  "2025-06-13T17:03:16Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add support for VietnameseLunisolarCalendar",
        "labels":  [
                       "api-suggestion",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117116",
        "createdAt":  "2025-06-28T15:42:47Z",
        "number":  117116,
        "author":  "mikernet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-30T14:32:52Z",
        "body":  "### Description\n\nCalling `string.Normalize(form)` or `IsNormalized(form)` on an ASCII string when `form` is a compatibility form (i.e. `FormKD` or `FormKC`) does not throw - it only throws if the string is not ASCII. I find this behavior to be a little bit troubling - I think it should always throw for the unsupported form instead of giving false hope that it works. The current behavior can make it look like code paths work and then you get `PlatformNotSupportedException` at runtime after deployment when users enter a non-ASCII string.\n\n### Reproduction Steps\n\n```cs\n\"asdf\".IsNormalized(NormalizationForm.FormKD); // no throw\n\"😊\".IsNormalized(NormalizationForm.FormKD); // throws\n```\n\n### Expected behavior\n\nShould always throw when requesting an unsupported form.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs8aUng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zxpQo",
                                           "createdAt":  "2025-06-28T23:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-28T23:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zxpSe",
                                           "createdAt":  "2025-06-28T23:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-28T23:00:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[WASM] string Normalize() / IsNormalized() compatibility forms",
        "labels":  [
                       "arch-wasm",
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117421",
        "createdAt":  "2025-07-08T15:35:33Z",
        "number":  117421,
        "author":  "vcsjones",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-03T20:00:40Z",
        "body":  "This test fails on macOS 26 preview 3 (and also failed on preview 1 and 2):\n\n```\nAssert.Equal() Failure: Collections differ\nExpected: [3]\nActual:   [3, 2]\n              ↑ (pos 1)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvrg4kw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc61wqF_",
                                           "createdAt":  "2025-07-08T15:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-08T15:36:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-uDiT",
                                           "createdAt":  "2025-08-19T08:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "A similar issue was created for MacCatalyst: https://github.com/dotnet/runtime/issues/118850",
                                           "updatedAt":  "2025-08-19T08:22:32Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NumberGroupSizes_Get_ReturnsExpected fails on macOS 26 Preview 3",
        "labels":  [
                       "area-System.Globalization",
                       "test-bug",
                       "os-macos-tahoe (macOS26)"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118521",
        "createdAt":  "2025-08-08T09:07:27Z",
        "number":  118521,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-08T16:18:16Z",
        "body":  "There seems to be a bug in the ICU version of `IsPrefix` with `IgnoreSymbols` compare option. For example, in the following test case the string \"Tests\" is not found as prefix in \"\u0027\u0027Tests\" source when `CompareOptions.IgnoreSymbols` is used.\n\nhttps://github.com/dotnet/runtime/blob/39111b0942ce8cd3a941c347afcf980158369c00/src/libraries/System.Runtime/tests/System.Globalization.Tests/CompareInfo/CompareInfoTests.IsPrefix.cs#L97C21-L97C130\n\n\nThe bug could by coming from https://github.com/dotnet/runtime/blob/a054715cc307652cbd96130c501c27b52ee039e7/src/coreclr/src/corefx/System.Globalization.Native/pal_collation.c#L327\n\nRepro:\n```\nCompareInfo myComp = CultureInfo.InvariantCulture.CompareInfo;\nConsole.WriteLine(myComp.IsPrefix(\"\u0027\u0027Tests\", \"Tests\", CompareOptions.IgnoreSymbols)); -\u003e returns False\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvMZoGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68xmgb",
                                           "createdAt":  "2025-08-08T09:07:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-08T09:07:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "CompareInfo.IsPrefix with CompareOptions.IgnoreSymbols does not ignore leading symbols",
        "labels":  [
                       "area-System.Globalization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118850",
        "createdAt":  "2025-08-18T17:11:16Z",
        "number":  118850,
        "author":  "davidnguyen-tech",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLo-lQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "matouskozak",
                                            "createdAt":  "2025-08-18T18:36:23Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-20T22:04:24Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1111636\u0026view=results\nBuild error leg or test failing: System.Globalization.IOS.Tests\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\u003c!-- Fill for repository issues. For infrastructure issues the engineering services (@dotnet/dnceng) is going to fill it. --\u003e\n```json \n{ \n    \"ErrorMessage\": [\n\"System.Globalization.Tests.NumberFormatInfoNumberGroupSizes.NumberGroupSizes_Get_ReturnsExpected(format: NumberFormatInfo { CurrencyDecimalDigits = 2, CurrencyDecimalSeparator = \\\".\\\",\",\n\"CurrencyGroupSeparator = \\\",\\\", CurrencyGroupSizes = [3, 2], CurrencyNegativePattern = 1, \\u00B7\\u00B7\\u00B7 }, expected: [3])\",\n\"Expected: [3]\",\n\"Actual:   [3, 2]\"\n],\n    \"BuildRetry\": false,\n    \"ErrorPattern\": \"\",\n    \"ExcludeConsoleLog\": false\n} \n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1111636\r\n**Error message validated:** `[System.Globalization.Tests.NumberFormatInfoNumberGroupSizes.NumberGroupSizes_Get_ReturnsExpected(format: NumberFormatInfo { CurrencyDecimalDigits = 2, CurrencyDecimalSeparator = \".\", CurrencyGroupSeparator = \",\", CurrencyGroupSizes = [3, 2], CurrencyNegativePattern = 1, ··· }, expected: [3]) Expected: [3] Actual:   [3, 2]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/18/2025 5:12:11 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1147783](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147783)|dotnet/runtime|[System.Globalization.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147783\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31688496\u0026resultId=205912)||\r\n|[1144610](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144610)|dotnet/runtime|[System.Globalization.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144610\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31572996\u0026resultId=212864)||\r\n|[1141255](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141255)|dotnet/runtime|[System.Globalization.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141255\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31450476\u0026resultId=205909)||\r\n|[1139258](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139258)|dotnet/runtime|[System.Globalization.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139258\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31388268\u0026resultId=205908)||\r\n|[1130996](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130996)|dotnet/runtime|[System.Globalization.IOS.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130996\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31116862\u0026resultId=212976)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|5|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvqAw0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-mgsD",
                                           "createdAt":  "2025-08-18T17:11:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-maccatalyst\u0027: @vitek-karas, @kotlarmilos, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T17:11:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mg3B",
                                           "createdAt":  "2025-08-18T17:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @akoeplinger, @matouskozak, @simonrozsival\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T17:11:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mhMq",
                                           "createdAt":  "2025-08-18T17:12:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEesFIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-08-18T20:06:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "There is a similar issue on macOS: https://github.com/dotnet/runtime/issues/117421",
                                           "updatedAt":  "2025-08-18T17:12:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mk3D",
                                           "createdAt":  "2025-08-18T17:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "Last non-failing build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1111091\u0026view=results\n\nGit compare of last non-failing and first failing build: https://github.com/dotnet/runtime/compare/f736e4f...78abe10",
                                           "updatedAt":  "2025-08-19T08:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-nbOJ",
                                           "createdAt":  "2025-08-18T18:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T18:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-oDDT",
                                           "createdAt":  "2025-08-18T19:38:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @matouskozak ",
                                           "updatedAt":  "2025-08-18T19:38:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[maccatalyst][mono] System.Globalization.Tests.NumberFormatInfoNumberGroupSizes.NumberGroupSizes_Get_ReturnsExpected fails",
        "labels":  [
                       "area-System.Globalization",
                       "os-maccatalyst",
                       "Known Build Error"
                   ]
    }
]
